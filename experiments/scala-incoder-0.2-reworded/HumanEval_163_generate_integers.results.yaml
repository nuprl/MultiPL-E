language: scala
name: HumanEval_163_generate_integers
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.toList\n        evensSortedList.takeWhile(_ < b).reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptqd7lowx.scala:20)\n\tat Problem.main(tmptqd7lowx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = a.toInt\n        val odd = b.toInt\n        while(even < odd)\
    \ {\n            evens += even\n            odd += 2\n        }\n        while(even\
    \ > odd) {\n            odds += odd\n            even -= 2\n        }\n      \
    \  evens.toList ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ig9tfis.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0ig9tfis.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp0ig9tfis.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            odd += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean odd.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ig9tfis.scala:24:17\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            even -= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value -= is not a member of Int - did you mean even.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659797572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b - 1)\n        val odd = b until (a - 1)\n        val evensOdd =\
    \ evens ++ odd\n        evensOdd.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpieebj4z0.scala:20)\n\tat Problem.main(tmpieebj4z0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797573
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.filter(x => x % 2 ==\
    \ 0).sortBy(x => x).takeWhile(x => x < b).map(x => x.toLong).toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4udkvlq9.scala:20)\n\tat Problem.main(tmp4udkvlq9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797573
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -1\n        val evensSorted = evens.toList\n\
    \        val oddsSorted = odds.toList\n        val result = evensSorted.filter(\
    \ x => oddsSorted.contains(x) )\n        result ++ oddsSorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpilqqr78r.scala:22)\n\tat Problem.main(tmpilqqr78r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797573
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        val evensSorted = evens.toList.sortWith(_\
    \ < _)\n        val oddsSorted = odds.toList.sortWith(_ < _)\n        evensSorted.flatMap(x\
    \ => oddsSorted.filter(y => y % x == 0))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptptzmh9w.scala:21)\n\tat Problem.main(tmptptzmh9w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val x = range.next\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo9u4dkj2.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpo9u4dkj2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val num = (a to b).map(_.toInt)\n\
    \        val even = num.filter(x => x % 2 == 0)\n        val odd = num.filter(x\
    \ => x % 2 != 0)\n        even.foreach(x => list += x)\n        odd.foreach(x\
    \ => list += x)\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpff_lqr5q.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mut\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa48qaskc.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd is already defined as \e[33mvalue\e[0m \e[35modd\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpa48qaskc.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0meven is already defined as \e[33mvalue\e[0m \e[35meven\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpa48qaskc.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd is already defined as \e[33mvalue\e[0m \e[35modd\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpa48qaskc.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0meven is already defined as \e[33mvalue\e[0m \e[35meven\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpa48qaskc.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd is already defined as \e[33mv"
  stdout: ''
  timestamp: 1659797572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            if\
    \ (i % 2 == 0) {\n                evens += i\n            } else {\n         \
    \       odds += i\n            }\n            i += 1\n            j += 1\n   \
    \     }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfjfint9i.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfjfint9i.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val range = (a to b).iterator\n      \
    \  while (range.hasNext) {\n            val current = range.next\n           \
    \ val remainder = current % 10\n            if (remainder == 0) {\n          \
    \      list += current\n            }\n        }\n        list.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpui7cq_gw.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.filter(x => x % 2 ==\
    \ 0).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppiqaykk6.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sorted\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:   \
    \ IndexedSeq[Long]\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.toList\n        val evensSortedListLength = evensSortedList.length\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ evensSortedListLength = evensSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val evensSortedListLength = evensSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ evensSortedListLength = evensSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val evensSortedListLength = evensSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ evensSortedListLength = evensSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val evensSortedListLength = evensSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ evensSortedListLength = evensSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val evensSortedListLength = evensSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ evensSortedListLength = evensSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val evensSortedListLength = evensSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ evensSortedListLength = evensSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val evensSortedListLength = evensSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ evensSortedListLength = evensSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val evensSortedListLength = evensSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ evensSortedListLength = evensSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.to\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdl9ki6em.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdl9ki6em.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdl9ki6em.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdl9ki6em.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/t"
  stdout: ''
  timestamp: 1659797572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = mutable.ListBuffer[Long]()\n        val start = a\n        val end = b\n \
    \       while(start < end) {\n            val mid = (start + end) / 2\n      \
    \      val digit = math.pow(10, mid.toInt)\n            if(digit % 2 == 0) {\n\
    \                result.+=mid.toLong\n                start = mid + 1\n      \
    \      } else {\n                end = mid\n            }\n        }\n       \
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1axqj8dr.scala:21:28 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result.+=mid.toLong\n\e[31m\e[31m   |\e\
    [0m                            ^\e[0m\n\e[31m   |\e[0m                       \
    \     expression expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1axqj8dr.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp1axqj8dr.scala:22:22 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                start = mid + \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Reassignment to val start\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp1axqj8dr.scala:24:20 -----------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                end = mid\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val end\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659797568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to (b+1)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val oddsSorted = odds.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.toList\n        val oddsSortedList = oddsSorted.toList\n     \
    \   val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedListLength.toLong\n\
    \        val oddsSortedListLength = oddsSortedListLength.toLong\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val oddsSortedListLength = oddsSortedListLength.toLong\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ oddsSortedListLength = oddsSortedListLength.toLong\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val oddsSortedListLength = oddsSortedListLength.toLong\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ oddsSortedListLength = oddsSortedListLength.toLong\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val oddsSortedListLength = oddsSortedListLength.toLong\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ oddsSortedListLength = oddsSortedListLength.toLong\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val oddsSortedListLength = oddsSortedListLength.toLong\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ oddsSortedListLength = oddsSortedListLength.toLong\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val oddsSortedListLength = oddsSortedListLength.toLong\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ oddsSortedListLength = oddsSortedListLength.toLong\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val oddsSortedListLength = oddsSortedListLength.toLong\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ oddsSortedListLength = oddsSortedListLength.toLong\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val oddsSortedListLength = odd\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp3rc59f6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp3rc59f6.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36moddsSortedListLength\e[0m\
    \ = oddsSortedListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35moddsSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpp3rc59f6.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp3rc59f6.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moddsSortedListLength\e[0m\
    \ = oddsSortedListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35moddsSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpp3rc59"
  stdout: ''
  timestamp: 1659797572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b - 1)\n        val odds = b until (a - 1)\n        evens.filter(x\
    \ => x % 2 == 0).sortBy(x => x).reverse ++ odds.filter(x => x % 2 == 1).sortBy(x\
    \ => x)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyt8r6in7.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sortBy(\e[36mx\e[0m => x).reverse ++\
    \ odds.filter(\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m).sortBy(\e[36mx\e\
    [0m => x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.filter(x => x % 2 ==\
    \ 0).sortBy(x => x).takeWhile(x => x < b).reverse.map(x => x.toLong).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp52gywhmz.scala:19)\n\tat Problem.main(tmp52gywhmz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val mid = a + (b - a) / 2\n      \
    \  val mid2 = mid / 2\n        val mid3 = mid2 / 2\n        val mid4 = mid3 /\
    \ 2\n        val mid5 = mid4 / 2\n        val mid6 = mid5 / 2\n        val mid7\
    \ = mid6 / 2\n        val mid8 = mid7 / 2\n        val mid9 = mid8 / 2\n     \
    \   val mid10 = mid9 / 2\n        val mid11 = mid10 / 2\n        val mid12 = mid11\
    \ / 2\n        val mid13 = mid12 / 2\n        val mid14 = mid13 / 2\n        val\
    \ mid15 = mid14 / 2\n        val mid16 = mid15 / 2\n        val mid17 = mid16\
    \ / 2\n        val mid18 = mid17 / 2\n        val mid19 = mid18 / 2\n        val\
    \ mid20 = mid19 / 2\n        val mid21 = mid20 / 2\n        val mid22 = mid21\
    \ / 2\n        val mid23 = mid22 / 2\n        val mid24 = mid23 / 2\n        val\
    \ mid25 = mid24 / 2\n        val mid26 = mid25 / 2\n        val mid27 = mid26\
    \ / 2\n        val mid28 = mid27 / 2\n        val mid29 = mid28 / 2\n        val\
    \ mid30 = mid29 / 2\n        val mid31 = mid30 / 2\n        val mid32 = mid31\
    \ / 2\n        val mid33 = mid32 / 2\n        val mid34 = mid33 / 2\n        val\
    \ mid35 = mid34 / 2\n        val mid36 = mid35 / 2\n        val mid37 = mid36\
    \ / 2\n        val mid38 = mid37 / 2\n        val mid39 = mid38 / 2\n        val\
    \ mid40 = mid39 / 2\n        val mid41 = mid40 / 2\n        val mid42 = mid41\
    \ / 2\n        val mid43 = mid42 / 2\n        val mid44 = mid43 / 2\n        val\
    \ mid45 = mid44 / 2\n        val mid46 = mid45 / 2\n        val mid47 = mid46\
    \ / 2\n        val mid48 = mid47 / 2\n        val mid49 = mid48 / 2\n        val\
    \ mid50 = mid49 / 2\n        val mid51 = mid50 / 2\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5gp_qday.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5gp_qday.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        evens ++ odds\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgj7xf_6i.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a / 2\n        val odds = a % 2\n        val evenList = List(evens.toLong)\n\
    \        val oddList = List(odds.toLong)\n        val list = evenList ++ oddList\n\
    \        list.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpamcnl8ya.scala:22)\n\tat Problem.main(tmpamcnl8ya.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.toList\n        evensSortedList.takeWhile(_ % 2 == 0).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmp1hk6h6.scala:20)\n\tat Problem.main(tmpmp1hk6h6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val range = (a to b).iterator\n  \
    \      while(range.hasNext) {\n            val current = range.next\n        \
    \    if(current % 2 == 0) {\n                result.+=current\n            }\n\
    \        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpw49mjab5.scala:19:32 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                result.+=current\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpw49mjab5.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a / 2\n        val odd = a % 2\n        val evensRemainder = b % 2\n     \
    \   val oddRemainder = b % 2\n        val evensRemainderList = List(evensRemainder)\n\
    \        val oddRemainderList = List(oddRemainder)\n        val evensRemainderList2\
    \ = List(evensRemainder)\n        val oddRemainderList2 = List(oddRemainder)\n\
    \        val evensRemainderList3 = List(evensRemainder)\n        val oddRemainderList3\
    \ = List(oddRemainder)\n        val evensRemainderList4 = List(evensRemainder)\n\
    \        val oddRemainderList4 = List(oddRemainder)\n        val evensRemainderList5\
    \ = List(evensRemainder)\n        val oddRemainderList5 = List(oddRemainder)\n\
    \        val evensRemainderList6 = List(evensRemainder)\n        val oddRemainderList6\
    \ = List(oddRemainder)\n        val evensRemainderList7 = List(evensRemainder)\n\
    \        val oddRemainderList7 = List(oddRemainder)\n        val evensRemainderList8\
    \ = List(evensRemainder)\n        val oddRemainderList8 = List(oddRemainder)\n\
    \        val evensRemainderList9 = List(evensRemainder)\n        val oddRemainderList9\
    \ = List(oddRemainder)\n        val evensRemainderList10 = List(evensRemainder)\n\
    \        val oddRemainderList10 = List(oddRemainder)\n        val evensRemainderList11\
    \ = List(evensRemainder)\n        val oddRemainderList11 = List(oddRemainder)\n\
    \        val evensRemainderList12 = List(evensRemainder)\n        val oddRemainderList12\
    \ = List(oddRemainder)\n        val evensRemainderList13 = List(evensRemainder)\n\
    \        val oddRemainderList13 = List(oddRemainder)\n        val evensRemainderList14\
    \ = List(evensRemainder)\n        val oddRemainderList14 = List(oddRemainder)\n\
    \        val evensRemainderList15 = List(evensRemainder)\n        val oddRemainderList15\
    \ = List(oddRemainder)\n        val evensRemainderList16 = List(evensRemainder)\n\
    \        val oddRemainderList16 = List(oddRemainder)\n        val evensRemainderList17\
    \ = List(evensRemainder)\n        val oddRemainderList17\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp62k0eh3g.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp62k0eh3g.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b + 1)\n        val odds = b until (a + 1)\n        evens ++ odds\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpylocwd07.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a / 2\n        val odds = a % 2\n        val evensRemaining = a / 2\n    \
    \    val oddsRemaining = a % 2\n        val evensRemainingList = List(evensRemaining)\n\
    \        val oddsRemainingList = List(oddsRemaining)\n        val evensRemainingListIterator\
    \ = evensRemainingList.iterator\n        val oddsRemainingListIterator = oddsRemainingList.iterator\n\
    \        val evensRemainingListIterator2 = evensRemainingListIterator.next\n \
    \       val oddsRemainingListIterator2 = oddsRemainingListIterator.next\n    \
    \    val evensRemainingListIterator3 = evensRemainingListIterator2.next\n    \
    \    val oddsRemainingListIterator3 = oddsRemainingListIterator2.next\n      \
    \  val evensRemainingListIterator4 = evensRemainingListIterator3.next\n      \
    \  val oddsRemainingListIterator4 = oddsRemainingListIterator3.next\n        val\
    \ evensRemainingListIterator5 = evensRemainingListIterator4.next\n        val\
    \ oddsRemainingListIterator5 = oddsRemainingListIterator4.next\n        val evensRemainingListIterator6\
    \ = evensRemainingListIterator5.next\n        val oddsRemainingListIterator6 =\
    \ oddsRemainingListIterator5.next\n        val evensRemainingListIterator7 = evensRemainingListIterator6.next\n\
    \        val oddsRemainingListIterator7 = oddsRemainingListIterator6.next\n  \
    \      val evensRemainingListIterator8 = evensRemainingListIterator7.next\n  \
    \      val oddsRemainingListIterator8 = oddsRemainingListIterator7.next\n    \
    \    val evensRemainingListIterator9 = evensRemainingListIterator8.next\n    \
    \    val oddsRemainingListIterator9 = oddsRemainingListIterator8.next\n      \
    \  val evensRemainingListIterator10 = evensRemainingListIterator9.next\n     \
    \   val oddsRemainingListIterator10 = oddsRemainingListIterator9.next\n      \
    \  val evensRemainingListIterator11 = evensRemainingListIterator10.next\n    \
    \    val oddsRemainingListIterator11 = oddsRemainingListIterator10.next\n    \
    \    val evensRemainingListIterator12 = evensRemainingListIterator11.next\n  \
    \      val oddsRemainingListIterator12 = oddsRemainingListIterator11.next\n  \
    \      val evensRemainingListIterator13 = evensRemainingListIterator12.next\n\
    \        val odd\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp0ikatbv.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp0ikatbv.scala:24:70\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mevensRemainingListIterator3\e[0m = evensRemainingListIterator2.next\n\e[31m\e\
    [31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value next is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp0ikatbv.scala:25:68\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36moddsRemainingListIterator3\e[0m = oddsRemainingListIterator2.next\n\e[31m\e\
    [31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value next is not a\
    \ member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp0ikatbv.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797579
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.sortWith(_ < _)\n        evensSorted.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2loq465q.scala:19)\n\tat Problem.main(tmp2loq465q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensOdds = mutable.ListBuffer[Long]()\n        val evensOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n        val evensOddsOddsOddsOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsO\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5p6iuihr.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5p6iuihr.scala:14:20\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5p6iuihr.scala:15:19\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5p6iuihr.scala:16:24\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mevensOdds\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5p6iuihr.scala:17:28\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mevensOddsOdds\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5p6iuihr.scala:18:32 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mevensOddsOddsOdds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: muta"
  stdout: ''
  timestamp: 1659797579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = a.toInt\n        val odd = b.toInt\n        while(even < odd)\
    \ {\n            evens += even\n            odd += 2\n        }\n        while(even\
    \ > odd) {\n            odds += odd\n            even -= 2\n        }\n      \
    \  evens.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0onhmg2z.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0onhmg2z.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp0onhmg2z.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            odd += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean odd.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0onhmg2z.scala:24:17\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            even -= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value -= is not a member of Int - did you mean even.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        evens ++ odds\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgj7xf_6i.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.sortWith(_ < _)\n        evensSorted.takeWhile(_\
    \ % 2 == 0).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv1_nbi_s.scala:16:42\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evensSorted.takeWhile(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = a.toInt\n        val odd = b.toInt\n        var i = even\n\
    \        var j = odd\n        while (i <= odd) {\n            if (i % 2 == 0)\
    \ {\n                evens += i\n            } else {\n                odds +=\
    \ i\n            }\n            i += 1\n            j += 1\n        }\n      \
    \  evens.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxqyr5ujs.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxqyr5ujs.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b by 2\n        val odd = a until b by 1\n        evens ++ odd\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphbqao29e.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odd\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = a.toInt\n        val odd = b.toInt\n        while(even < odd)\
    \ {\n            evens += even\n            odd += 2\n        }\n        while(even\
    \ > odd) {\n            odds += odd\n            even -= 2\n        }\n      \
    \  evens.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0onhmg2z.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0onhmg2z.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp0onhmg2z.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            odd += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean odd.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0onhmg2z.scala:24:17\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            even -= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value -= is not a member of Int - did you mean even.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val m = math.min(math.max(a, b), Long.MaxValue)\n\
    \        val n = math.min(math.max(a, b), Long.MaxValue)\n        var i = a\n\
    \        var j = b\n        while (i <= n) {\n            while (j > i) {\n  \
    \              list += i.toLong\n                j -= 1\n            }\n     \
    \       i += 1\n            j += 1\n        }\n        list.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkf63o5yj.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.sortWith(_ < _)\n        val evensSorted\
    \ = evensSorted.filter(_ % 2 == 0)\n        evensSorted.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpabg7ke9y.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659797578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        val evensSet = evens.toSet\n\
    \        val oddsSet = odds.toSet\n        val evensSetList = evensSet.toList\n\
    \        val oddsSetList = oddsSet.toList\n        val evensSetList2 = evensSetList.sortWith(_\
    \ < _)\n        val oddsSetList2 = oddsSetList.sortWith(_ < _)\n        val evensSetList3\
    \ = evensSetList2.sortWith(_ < _)\n        val oddsSetList3 = oddsSetList2.sortWith(_\
    \ < _)\n        val evensSetList4 = evensSetList3.sortWith(_ < _)\n        val\
    \ oddsSetList4 = oddsSetList3.sortWith(_ < _)\n        val evensSetList5 = evensSetList4.sortWith(_\
    \ < _)\n        val oddsSetList5 = oddsSetList4.sortWith(_ < _)\n        val evensSetList6\
    \ = evensSetList5.sortWith(_ < _)\n        val oddsSetList6 = oddsSetList5.sortWith(_\
    \ < _)\n        val evensSetList7 = evensSetList6.sortWith(_ < _)\n        val\
    \ oddsSetList7 = oddsSetList6.sortWith(_ < _)\n        val evensSetList8 = evensSetList7.sortWith(_\
    \ < _)\n        val oddsSetList8 = oddsSetList7.sortWith(_ < _)\n        val evensSetList9\
    \ = evensSetList8.sortWith(_ < _)\n        val oddsSetList9 = oddsSetList8.sortWith(_\
    \ < _)\n        val evensSetList10 = evensSetList9.sortWith(_ < _)\n        val\
    \ oddsSetList10 = oddsSetList9.sortWith(_ < _)\n        val evensSetList11 = evensSetList10.sortWith(_\
    \ < _)\n        val oddsSetList11 = oddsSetList10.sortWith(_ < _)\n        val\
    \ evensSetList12 = evensSetList11.sortWith(_ < _)\n        val oddsSetList12 =\
    \ oddsSetList11.sortWith(_ < _)\n        val evensSetList13 = evensSetList12.sortWith(_\
    \ < _)\n        val oddsSetList13 = oddsSetList12.sort\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq_voa1j1.scala:43:42 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36moddsSetList13\e[0m = oddsSetList12.sort\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue sort is not a member of List[Long] - did you mean oddsSetList12.sortBy?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq_voa1j1.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.filter(x => x % 2 ==\
    \ 0).sorted ++ odds\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxo7nqlda.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sorted ++ odds\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    IndexedSeq[Long]\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b - 1)\n        val odds = b until (a - 1)\n        evens ++ odds\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeao6pdwh.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b - 1)\n        val odds = b until (a - 1)\n        evens.filter(x\
    \ => x % 2 == 0).sorted ++ odds.filter(x => x % 2 == 1).sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp92w19e6_.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sorted ++ odds.filter(\e[36mx\e[0m =>\
    \ x % \e[31m2\e[0m == \e[31m1\e[0m).sorted\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val remainder = a % b\n        val\
    \ remainder2 = remainder / b\n        val remainder3 = remainder2 / b\n      \
    \  val remainder4 = remainder3 / b\n        val remainder5 = remainder4 / b\n\
    \        val remainder6 = remainder5 / b\n        val remainder7 = remainder6\
    \ / b\n        val remainder8 = remainder7 / b\n        val remainder9 = remainder8\
    \ / b\n        val remainder10 = remainder9 / b\n        val remainder11 = remainder10\
    \ / b\n        val remainder12 = remainder11 / b\n        val remainder13 = remainder12\
    \ / b\n        val remainder14 = remainder13 / b\n        val remainder15 = remainder14\
    \ / b\n        val remainder16 = remainder15 / b\n        val remainder17 = remainder16\
    \ / b\n        val remainder18 = remainder17 / b\n        val remainder19 = remainder18\
    \ / b\n        val remainder20 = remainder19 / b\n        val remainder21 = remainder20\
    \ / b\n        val remainder22 = remainder21 / b\n        val remainder23 = remainder22\
    \ / b\n        val remainder24 = remainder23 / b\n        val remainder25 = remainder24\
    \ / b\n        val remainder26 = remainder25 / b\n        val remainder27 = remainder26\
    \ / b\n        val remainder28 = remainder27 / b\n        val remainder29 = remainder28\
    \ / b\n        val remainder30 = remainder29 / b\n        val remainder31 = remainder30\
    \ / b\n        val remainder32 = remainder31 / b\n        val remainder33 = remainder32\
    \ / b\n        val remainder34 = remainder33 / b\n        val remainder35 = remainder34\
    \ / b\n        val remainder36 = remainder35 / b\n        val remainder37 = remainder36\
    \ / b\n        val remainder38 = remainder37 / b\n        val remainder39 = remainder38\
    \ / b\n        val remainder40 = remainder39 / b\n        val remainder41 = remainder40\
    \ / b\n        val remainder42 = remainder41 / b\n        val remainder43 = remainder42\
    \ / b\n\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp555ev8v1.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp555ev8v1.scala:59:5\
    \ ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val mid = (a + b) / 2\n        val\
    \ midDigit = math.floor(mid)\n        val evenDigit = math.floor(midDigit / 2)\n\
    \        val evenDigitDigit = math.floor(midDigit / 2)\n        val evenDigitDigitDigit\
    \ = math.floor(midDigit / 2)\n        val evenDigitDigitDigitDigit = math.floor(midDigit\
    \ / 2)\n        val evenDigitDigitDigitDigitDigit = math.floor(midDigit / 2)\n\
    \        val evenDigitDigitDigitDigitDigitDigit = math.floor(midDigit / 2)\n \
    \       val evenDigitDigitDigitDigitDigitDigitDigit = math.floor(midDigit / 2)\n\
    \        val evenDigitDigitDigitDigitDigitDigitDigitDigit = math.floor(midDigit\
    \ / 2)\n        val evenDigitDigitDigitDigitDigitDigitDigitDigitDigit = math.floor(midDigit\
    \ / 2)\n        val evenDigitDigitDigitDigitDigitDigitDigitDigitDigit = math.floor(midDigit\
    \ / 2)\n        val evenDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = math.floor(midDigit\
    \ / 2)\n        val evenDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = math.floor(midDigit / 2)\n        val evenDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = math.floor(midDigit / 2)\n        val evenDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = math.floor(midDigit / 2)\n        val evenDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = math.floor(midDigit / 2)\n        val evenDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = math.floor(midDigit / 2)\n        val evenDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = math.floor(midDigit / 2)\n        val evenDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = math.floor(midDigit / 2)\n        val evenDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = math.floor(midDigit / 2)\n        val evenDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = math.floor(midDigit / 2)\n        val evenDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = math.floor(midDigit / 2)\n        val evenDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = math.floor(midDigit / 2)\n        val evenDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnxfblvce.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnxfblvce.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenDigitDigitDigitDigitDigitDigitDigitDigitDigit\e[0m = math.floor(midDigit\
    \ / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenDigitDigitDigitDigitDigitDigitDigitDigitDigit is already\
    \ defined as \e[33mvalue\e[0m \e[35mevenDigitDigitDigitDigitDigitDigitDigitDigitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnxfblvce.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mevenDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\e\
    [0m = math.floor(midDigit / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35mevenDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnxfblvce.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mevenDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\e\
    [0m = math.floor(midDigit / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35mevenDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded"
  stdout: ''
  timestamp: 1659797583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val n = math.min(a, b)\n        var\
    \ i = 0\n        while (i < n) {\n            val d = math.floor(i * 1.0 / b)\n\
    \            list.+= d\n            i += 1\n        }\n        list.sort\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp41cf45lv.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a / 2\n        val odds = a % 2\n        val evenList = generateIntegers(evens,\
    \ b)\n        val oddList = generateIntegers(odds, b)\n        evenList ::: oddList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\
    \tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\
    \tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\
    \tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\
    \tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\
    \tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\
    \tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\
    \tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\
    \tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\
    \tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\
    \tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\
    \tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\
    \tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\
    \tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\
    \tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\
    \tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\
    \tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\
    \tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\
    \tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\
    \tat Problem$.generateIntegers(tmp7kkazmcw.scala:16)\n\tat Problem$.gen"
  stdout: ''
  timestamp: 1659797584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        var i = a\n        var j = b\n   \
    \     while (i <= j) {\n            val remainder = i % 10\n            if (remainder\
    \ == 0) {\n                result.add(i)\n            }\n            i += 1\n\
    \        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn9gyfe6x.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val start = a\n        val end = b\n \
    \       while(start < end) {\n            val digit = start.toString.toLong %\
    \ 10\n            list += digit\n            start += 1\n        }\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3bvqxe7w.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp3bvqxe7w.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            start += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Long - did you mean start.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659797584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val range = (a to b).iterator\n  \
    \      while(range.hasNext) {\n            val current = range.next\n        \
    \    val remainder = current % 10\n            if(remainder == 0) {\n        \
    \        result += current.toLong\n            }\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwtzbt89h.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        while (i <= b) {\n            if (i % 2 == 0) {\n\
    \                evens += i\n            } else {\n                odds += i\n\
    \            }\n            i += 1\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp08cyxhzu.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp08cyxhzu.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b + 1)\n        val odds = b until (a + 1)\n        evens ++ odds\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpylocwd07.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to (b + 1)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val oddsSorted = odds.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.map(_.toLong).toList\n        val oddsSortedList = oddsSorted.map(_.toLong).toList\n\
    \        val evensSortedListLength = evensSortedList.length\n        val oddsSortedListLength\
    \ = oddsSortedList.length\n        val evensSortedListLength = evensSortedListLength\n\
    \        val oddsSortedListLength = oddsSortedListLength\n        val evensSortedListLength\
    \ = evensSortedListLength\n        val oddsSortedListLength = oddsSortedListLength\n\
    \        val evensSortedListLength = evensSortedListLength\n        val oddsSortedListLength\
    \ = oddsSortedListLength\n        val evensSortedListLength = evensSortedListLength\n\
    \        val oddsSortedListLength = oddsSortedListLength\n        val evensSortedListLength\
    \ = evensSortedListLength\n        val oddsSortedListLength = oddsSortedListLength\n\
    \        val evensSortedListLength = evensSortedListLength\n        val oddsSortedListLength\
    \ = oddsSortedListLength\n        val evensSortedListLength = evensSortedListLength\n\
    \        val oddsSortedListLength = oddsSortedListLength\n        val evensSortedListLength\
    \ = evensSortedListLength\n        val oddsSortedListLength = oddsSortedListLength\n\
    \        val evensSortedListLength = evensSortedListLength\n        val oddsSortedListLength\
    \ = oddsSortedListLength\n        val evensSortedListLength = evensSortedListLength\n\
    \        val oddsSortedListLength = oddsSortedListLength\n        val evensSortedListLength\
    \ = evensSortedListLength\n        val oddsSortedListLength = oddsSortedListLength\n\
    \        val evensSortedListLength = evensSortedListLength\n        val oddsSortedListLength\
    \ = oddsSortedListLength\n        val evensSortedListLength = evensSortedListLength\n\
    \        val oddsSortedListLength = oddsSortedListLength\n        val evensSortedListLength\
    \ = evensSortedListLength\n        val oddsSortedListLength = oddsSortedListLength\n\
    \        val evensSortedListLength = evensSortedListLength\n        val oddsSortedListLength\
    \ = oddsSortedListLength\n        val evensSortedListLength = evensSortedListLength\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpws86ev1h.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpws86ev1h.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedListLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpws86ev1h.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36moddsSortedListLength\e[0m\
    \ = oddsSortedListLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35moddsSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpws86ev1h.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedListLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpws86ev1h.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moddsSortedListLength\e[0m\
    \ = oddsSortedListLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedLi"
  stdout: ''
  timestamp: 1659797588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjdjessj_.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjdjessj_.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdjessj_.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjdjessj_.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdjessj_.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is alread"
  stdout: ''
  timestamp: 1659797590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        evens ++ odds\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgj7xf_6i.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b + 1)\n        val odds = b until (a + 1)\n        val evensSorted\
    \ = evens.sortWith(_ < _)\n        val oddsSorted = odds.sortWith(_ < _)\n   \
    \     val evensSortedList = evensSorted.map(_.toLong).toList\n        val oddsSortedList\
    \ = oddsSorted.map(_.toLong).toList\n        val evensSortedList2 = evensSortedList.filter(x\
    \ => oddsSortedList.contains(x))\n        val oddsSortedList2 = oddsSortedList.filter(x\
    \ => evensSortedList.contains(x))\n        val evensSortedList3 = evensSortedList2.filter(x\
    \ => oddsSortedList2.contains(x))\n        val oddsSortedList3 = oddsSortedList2.filter(x\
    \ => evensSortedList2.contains(x))\n        val evensSortedList4 = evensSortedList3.filter(x\
    \ => oddsSortedList3.contains(x))\n        val oddsSortedList4 = oddsSortedList3.filter(x\
    \ => evensSortedList3.contains(x))\n        val evensSortedList5 = evensSortedList4.filter(x\
    \ => oddsSortedList4.contains(x))\n        val oddsSortedList5 = oddsSortedList4.filter(x\
    \ => evensSortedList4.contains(x))\n        val evensSortedList6 = evensSortedList5.filter(x\
    \ => oddsSortedList5.contains(x))\n        val oddsSortedList6 = oddsSortedList5.filter(x\
    \ => evensSortedList5.contains(x))\n        val evensSortedList7 = evensSortedList6.filter(x\
    \ => oddsSortedList6.contains(x))\n        val oddsSortedList7 = oddsSortedList6.filter(x\
    \ => evensSortedList6.contains(x))\n        val evensSortedList8 = evensSortedList7.filter(x\
    \ => oddsSortedList7.contains(x))\n        val oddsSortedList8 = oddsSortedList7.filter(x\
    \ => evensSortedList7.contains(x))\n        val evensSortedList9 = evensSortedList8.filter(x\
    \ => oddsSortedList8.contains(x))\n        val oddsSortedList9 = oddsSortedList8.filter(x\
    \ => evensSortedList8.contains(x))\n        val evensSortedList10 = evensSortedList9.filter(x\
    \ => oddsSortedList9.contains(x))\n        val oddsSortedList10 = oddsSortedList9.filter(x\
    \ => evensSortedList9.contains(x))\n        val evensSortedList11 = evensSortedList10.filter(x\
    \ => oddsSorted\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx8_mvdsn.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpx8_mvdsn.scala:38:62 --------------------\e[0m\e[0m\n\e[31m38 |\e[0m\
    \        \e[33mval\e[0m \e[36mevensSortedList11\e[0m = evensSortedList10.filter(\e\
    [36mx\e[0m => oddsSorted\n\e[31m\e[31m   |\e[0m                              \
    \                                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Found:    (oddsSorted : IndexedSeq[Long])\n\e[31m   |\e[0m\
    \                               Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpx8_mvdsn.scala:39:5 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659797591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < a && i <\
    \ b) {\n            list += i.toLong\n            i += 1\n        }\n        if\
    \ (i < a) {\n            list += i.toLong\n        }\n        if (i < b) {\n \
    \           list += i.toLong\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6e4nrux0.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        val evensSorted = evens.toList.sortBy(_.toLong)\n\
    \        val oddsSorted = odds.toList.sortBy(_.toLong)\n        val result = evensSorted.flatMap(_\
    \ % 2 == 0).filter(_ <= b).filter(_ >= a).union(oddsSorted)\n        if (result.isEmpty)\
    \ Nil\n        else result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt3exas7h.scala:18:41\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = evensSorted.flatMap(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ <= b).filter(_\
    \ >= a).union(oddsSorted)\n\e[31m\e[31m   |\e[0m                             \
    \            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \         Found:    Boolean\n\e[31m   |\e[0m                                 \
    \        Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpt3exas7h.scala:18:62 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = evensSorted.flatMap(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ <= b).filter(_ >= a).union(oddsSorted)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^^^^\e[0m\n\e[31m   |\e[0mvalue <= is not a member of Nothing, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\e[31m\
    \   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\e[31m\
    \   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt3exas7h.scala:18:77\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = evensSorted.flatMap(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_\
    \ <= b).filter(_ >= a).union(oddsSorted)\n\e[31m\e[31m   |\e[0m              \
    \                                                             ^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue >= is not a member of Nothing, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fi"
  stdout: ''
  timestamp: 1659797592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val m = math.min(math.max(a, b), Long.MaxValue)\n\
    \        val n = math.min(math.max(a, b), Long.MaxValue)\n        val d = math.min(math.max(a,\
    \ b), Long.MaxValue)\n        val r = math.min(math.max(a, b), Long.MaxValue)\n\
    \        val t = math.min(math.max(a, b), Long.MaxValue)\n        val u = math.min(math.max(a,\
    \ b), Long.MaxValue)\n        val v = math.min(math.max(a, b), Long.MaxValue)\n\
    \        val w = math.min(math.max(a, b), Long.MaxValue)\n        val x = math.min(math.max(a,\
    \ b), Long.MaxValue)\n        val y = math.min(math.max(a, b), Long.MaxValue)\n\
    \        val z = math.min(math.max(a, b), Long.MaxValue)\n        val a = math.min(math.max(a,\
    \ b), Long.MaxValue)\n        val b = math.min(math.max(a, b), Long.MaxValue)\n\
    \        val c = math.min(math.max(a, b), Long.MaxValue)\n        val d = math.min(math.max(a,\
    \ b), Long.MaxValue)\n        val e = math.min(math.max(a, b), Long.MaxValue)\n\
    \        val f = math.min(math.max(a, b), Long.MaxValue)\n        val g = math.min(math.max(a,\
    \ b), Long.MaxValue)\n        val h = math.min(math.max(a, b), Long.MaxValue)\n\
    \        val i = math.min(math.max(a, b), Long.MaxValue)\n        val j = math.min(math.max(a,\
    \ b), Long.MaxValue)\n        val k = math.min(math.max(a, b), Long.MaxValue)\n\
    \        val l = math.min(math.max(a, b), Long.MaxValue)\n        val m = math.min(math.max(a,\
    \ b), Long.MaxValue)\n        val n = math.min(math.max(a, b), Long.MaxValue)\n\
    \        val o = math.min(math.max(a, b), Long.MaxValue)\n        val p = math.min(math.max(a,\
    \ b), Long.MaxValue)\n        val q = math.min(math.max(a, b), Long.MaxValue)\n\
    \        val r = math.min(math.max(a, b), Long.MaxValue)\n        val s = math.min(math.max(a,\
    \ b), Long.MaxValue)\n        val t = math.min(math.max(a, b), Long.MaxValue)\n\
    \        val u = math.min(math.max(a, b), Long.MaxValue)\n        val v = math.min(math.max(a,\
    \ b), Long.MaxValue)\n        val w = math.min(math.max(a, b), Long.MaxValue)\n\
    \        val x = math.min(math.max(a, b), Long.MaxValue)\n        val y = math.min(math.max(a,\
    \ b), \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr10mwowe.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr10mwowe.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36md\e[0m = math.min(math.max(a, b), Long.MaxValue)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0md\
    \ is already defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr10mwowe.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = math.min(math.max(a, b), Long.MaxValue)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm\
    \ is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr10mwowe.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = math.min(math.max(a, b), Long.MaxValue)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn\
    \ is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr10mwowe.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mr\e[0m = math.min(math.max(a, b), Long.MaxValue)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr\
    \ is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr10mwowe.scala:45:12\
    \ --------------"
  stdout: ''
  timestamp: 1659797591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a / 2\n        val odds = a % 2\n        val evensBetween = b.toLong / 2\n\
    \        val oddsBetween = b.toLong % 2\n        val evensBetweenBetween = evensBetween\
    \ / 2\n        val oddsBetweenBetween = evensBetween % 2\n        val evensBetweenBetweenBetween\
    \ = evensBetweenBetween / 2\n        val oddsBetweenBetweenBetween = evensBetweenBetween\
    \ % 2\n        val evensBetweenBetweenBetweenBetween = evensBetweenBetweenBetween\
    \ / 2\n        val oddsBetweenBetweenBetweenBetween = evensBetweenBetweenBetween\
    \ % 2\n        val evensBetweenBetweenBetweenBetweenBetween = evensBetweenBetweenBetweenBetween\
    \ / 2\n        val oddsBetweenBetweenBetweenBetweenBetween = evensBetweenBetweenBetweenBetween\
    \ % 2\n        val evensBetweenBetweenBetweenBetweenBetween = evensBetweenBetweenBetweenBetween\
    \ / 2\n        val oddsBetweenBetweenBetweenBetweenBetween = evensBetweenBetweenBetweenBetween\
    \ % 2\n        val evensBetweenBetweenBetweenBetweenBetween = evensBetweenBetweenBetweenBetween\
    \ / 2\n        val oddsBetweenBetweenBetweenBetweenBetween = evensBetweenBetweenBetween\
    \ % 2\n        val evensBetweenBetweenBetweenBetween = evensBetweenBetweenBetween\
    \ / 2\n        val oddsBetweenBetweenBetweenBetween = evensBetweenBetweenBetween\
    \ % 2\n        val evensBetweenBetweenBetween = evensBetweenBetween / 2\n    \
    \    val oddsBetweenBetweenBetween = evensBetweenBetween % 2\n        val evensBetweenBetween\
    \ = evensBetweenBetween / 2\n        val oddsBetweenBetween = evensBetweenBetween\
    \ % 2\n        val evensBetween = evensBetweenBetween / 2\n        val oddsBetween\
    \ = evensBetweenBetween % 2\n        val evens = evensBetween / 2\n        val\
    \ odds = evensBetween % 2\n        val evensBetweenBetween = evensBetweenBetween\
    \ / 2\n        val oddsBetweenBetween = evensBetweenBetween % 2\n        val evensBetweenBetweenBetween\
    \ = evensBetweenBetweenBetween / 2\n        val oddsBetweenBetweenBetween = evensBetweenBetweenBetween\
    \ % 2\n        val evensBetweenBetweenBetweenBetween = evensBetweenBetweenBetween\
    \ / 2\n\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkjrg93p6.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mevensBetweenBetweenBetweenBetweenBetween\e\
    [0m = evensBetweenBetweenBetweenBetween / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensBetweenBetweenBetweenBetweenBetween is already defined\
    \ as \e[33mvalue\e[0m \e[35mevensBetweenBetweenBetweenBetweenBetween\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpkjrg93p6.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36moddsBetweenBetweenBetweenBetweenBetween\e\
    [0m = evensBetweenBetweenBetweenBetween % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsBetweenBetweenBetweenBetweenBetween is already defined\
    \ as \e[33mvalue\e[0m \e[35moddsBetweenBetweenBetweenBetweenBetween\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpkjrg93p6.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mevensBetweenBetweenBetweenBetweenBetween\e\
    [0m = evensBetweenBetweenBetweenBetween / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensBetweenBetweenBetweenBetweenBetween is already defined\
    \ as \e[33mvalue\e[0m \e[35mevensBetweenBetweenBetweenBetweenBetween\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpkjrg93p6.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36moddsBetweenBetweenBetweenBetweenBetween\e\
    [0m = evensBetweenBetweenBetween % \e[31m2\e[0m\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1659797590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to b + 1\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val oddsSorted = odds.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.toList\n        val oddsSortedList = oddsSorted.toList\n     \
    \   val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedList.size\n\
    \        val oddsSortedListLength = oddsSortedList.size\n        val evensSortedListLength\
    \ = evensSortedList.size\n        val oddsSortedListLength = oddsSortedList.size\n\
    \        val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedList.size\n\
    \        val oddsSortedListLength = oddsSortedList.size\n        val evensSortedListLength\
    \ = evensSortedList.size\n        val oddsSortedListLength = oddsSortedList.size\n\
    \        val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedList.size\n\
    \        val oddsSortedListLength = oddsSortedList.size\n        val evensSortedListLength\
    \ = evensSortedList.size\n        val oddsSortedListLength = oddsSortedList.size\n\
    \        val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedList.size\n\
    \        val oddsSortedListLength = oddsSortedList.size\n        val evensSortedListLength\
    \ = evensSortedList.size\n        val oddsSortedListLength = oddsSortedList.size\n\
    \        val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedList.size\n\
    \        val oddsSortedListLength = oddsSortedList.size\n        val evensSortedListLength\
    \ = evensSortedList.size\n        val oddsSortedListLength = oddsSortedList.size\n\
    \        val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedList.size\n\
    \        val oddsSortedListLength = oddsSorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaaznavx3.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaaznavx3.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36moddsSortedListLength\e[0m\
    \ = oddsSortedList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35moddsSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpaaznavx3.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaaznavx3.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moddsSortedListLength\e[0m\
    \ = oddsSortedList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35moddsSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpaaznavx3.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m"
  stdout: ''
  timestamp: 1659797592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensOdds = mutable.ListBuffer[Long]()\n        val evensOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n        val evensOddsOddsOddsOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsO\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5p6iuihr.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5p6iuihr.scala:14:20\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5p6iuihr.scala:15:19\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5p6iuihr.scala:16:24\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mevensOdds\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5p6iuihr.scala:17:28\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mevensOddsOdds\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5p6iuihr.scala:18:32 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mevensOddsOddsOdds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: muta"
  stdout: ''
  timestamp: 1659797579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val low = a\n        val high = b\n\
    \        while(low <= high) {\n            val mid = (low + high) / 2\n      \
    \      val digit = math.pow(10, mid.toInt)\n            if(digit % 2 == 0) {\n\
    \                result.+=mid\n                low = mid + 1\n            } else\
    \ {\n                high = mid - 1\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpserq0q7k.scala:22:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                low = mid + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    end of\
    \ statement expected but '=' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpserq0q7k.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpserq0q7k.scala:24:21 -----------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                high = mid - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to\
    \ val high\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val remainder = a % b\n        val remainderDigit\
    \ = remainder / b\n        val remainderRemainder = remainder % b\n        val\
    \ digit = a / b\n        val digitDigit = digit / b\n        val digitDigitDigit\
    \ = digit % b\n        val digitDigitDigitDigit = digit % b\n        val digitDigitDigitDigitDigit\
    \ = digit % b\n        val digitDigitDigitDigitDigitDigit = digit % b\n      \
    \  val digitDigitDigitDigitDigitDigitDigit = digit % b\n        val digitDigitDigitDigitDigitDigitDigitDigit\
    \ = digit % b\n        val digitDigitDigitDigitDigitDigitDigitDigitDigit = digit\
    \ % b\n        val digitDigitDigitDigitDigitDigitDigitDigitDigitDigit = digit\
    \ % b\n        val digitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = digit\
    \ % b\n        val digitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digit % b\n        val digitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digit % b\n        val digitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digit % b\n        val digitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digit % b\n        val digitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digit % b\n        val digitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digit % b\n        val digitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digit % b\n        val digitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digit % b\n        val digitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digit % b\n        val digitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digit % b\n        val digitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digit % b\n        val digitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digit % b\n        val digitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digit % b\n        val digitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digit % b\n        val digit\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkw26a0rr.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkw26a0rr.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\e[0m = digit\
    \ % b\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35mdigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkw26a0rr.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mdigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\e\
    [0m = digit % b\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35mdigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkw26a0rr.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mdigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\e\
    [0m = digit % b\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  digitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjdjessj_.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjdjessj_.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdjessj_.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjdjessj_.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdjessj_.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is alread"
  stdout: ''
  timestamp: 1659797590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b - 1) filter (_ % 2 == 0)\n        val odds = a until (b - 1) filter\
    \ (_ % 2 != 0)\n        evens ++ odds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplyxuml0m.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val x = range.next\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk0vyv8dk.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpk0vyv8dk.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val x = range.next\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk0vyv8dk.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpk0vyv8dk.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = mutable.ListBuffer[Long]()\n        val nums = scala.math.pow(b, a).toInt\n\
    \        val numsArray = Array.ofDim[Long](nums)\n        val numsArrayIterator\
    \ = numsArray.iterator\n        val numsArrayIteratorNext = numsArrayIterator.next\n\
    \        val numsArrayIteratorNextInt = numsArrayIteratorNext.toInt\n        val\
    \ numsArrayIteratorNextLong = numsArrayIteratorNext.toLong\n        val numsArrayIteratorNextDouble\
    \ = numsArrayIteratorNext.toDouble\n        val numsArrayIteratorNextFloat = numsArrayIteratorNext.toFloat\n\
    \        val numsArrayIteratorNextBigDecimal = numsArrayIteratorNext.toBigDecimal\n\
    \        val numsArrayIteratorNextBigInt = numsArrayIteratorNext.toBigInt\n  \
    \      val numsArrayIteratorNextByte = numsArrayIteratorNext.toByte\n        val\
    \ numsArrayIteratorNextShort = numsArrayIteratorNext.toShort\n        val numsArrayIteratorNextInt\
    \ = numsArrayIteratorNext.toInt\n        val numsArrayIteratorNextLong = numsArrayIteratorNext.toLong\n\
    \        val numsArrayIteratorNextDouble = numsArrayIteratorNext.toDouble\n  \
    \      val numsArrayIteratorNextFloat = numsArrayIteratorNext.toFloat\n      \
    \  val numsArrayIteratorNextBigDecimal = numsArrayIteratorNext.toBigDecimal\n\
    \        val numsArrayIteratorNextBigInt = numsArrayIteratorNext.toBigInt\n  \
    \      val numsArrayIteratorNextByte = numsArrayIteratorNext.toByte\n        val\
    \ numsArrayIteratorNextShort = numsArrayIteratorNext.toShort\n        val numsArrayIteratorNextInt\
    \ = numsArrayIteratorNext.toInt\n        val numsArrayIteratorNextLong = numsArrayIteratorNext.toLong\n\
    \        val numsArrayIteratorNextDouble = numsArrayIteratorNext.toDouble\n  \
    \      val numsArrayIteratorNextFloat = numsArrayIteratorNext.toFloat\n      \
    \  val numsArrayIteratorNextBigDecimal = numsArrayIteratorNext.toBigDecimal\n\
    \        val numsArrayIteratorNextBigInt = numsArrayIteratorNext.toBigInt\n  \
    \      val numsArrayIteratorNextByte = numsArrayIteratorNext.toByte\n        val\
    \ numsArrayIteratorNextShort = numsArrayIteratorNext.toShort\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6k06jdv0.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayIteratorNextInt\e\
    [0m = numsArrayIteratorNext.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayIteratorNextInt is already defined as \e[33mvalue\e\
    [0m \e[35mnumsArrayIteratorNextInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6k06jdv0.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayIteratorNextLong\e\
    [0m = numsArrayIteratorNext.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayIteratorNextLong is already defined as \e[33mvalue\e\
    [0m \e[35mnumsArrayIteratorNextLong\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6k06jdv0.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayIteratorNextDouble\e\
    [0m = numsArrayIteratorNext.toDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayIteratorNextDouble is already defined as \e[33mvalue\e\
    [0m \e[35mnumsArrayIteratorNextDouble\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6k06jdv0.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayIteratorNextFloat\e\
    [0m = numsArrayIteratorNext.toFloat\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayIteratorNextFloat is already defined as \e[33mvalue\e\
    [0m \e[35mnumsArrayIteratorNextFloat\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in"
  stdout: ''
  timestamp: 1659797594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        val evensSorted = evens.toList.sortBy(_.toLong)\n\
    \        val oddsSorted = odds.toList.sortBy(_.toLong)\n        val evensSorted2\
    \ = evensSorted.takeWhile(x => x < b).reverse\n        val oddsSorted2 = oddsSorted.takeWhile(x\
    \ => x < b).reverse\n        val evensSorted3 = evensSorted2.takeWhile(x => x\
    \ < b).reverse\n        val oddsSorted3 = oddsSorted2.takeWhile(x => x < b).reverse\n\
    \        val evensSorted4 = evensSorted3.takeWhile(x => x < b).reverse\n     \
    \   val oddsSorted4 = oddsSorted3.takeWhile(x => x < b).reverse\n        val evensSorted5\
    \ = evensSorted4.takeWhile(x => x < b).reverse\n        val oddsSorted5 = oddsSorted4.takeWhile(x\
    \ => x < b).reverse\n        val evensSorted6 = evensSorted5.takeWhile(x => x\
    \ < b).reverse\n        val oddsSorted6 = oddsSorted5.takeWhile(x => x < b).reverse\n\
    \        val evensSorted7 = evensSorted6.takeWhile(x => x < b).reverse\n     \
    \   val oddsSorted7 = oddsSorted6.takeWhile(x => x < b).reverse\n        val evensSorted8\
    \ = evensSorted7.takeWhile(x => x < b).reverse\n        val oddsSorted8 = oddsSorted7.takeWhile(x\
    \ => x < b).reverse\n        val evensSorted9 = evensSorted8.takeWhile(x => x\
    \ < b).reverse\n        val oddsSorted9 = oddsSorted8.takeWhile(x => x < b).reverse\n\
    \        val evensSorted10 = evensSorted9.takeWhile(x => x < b).reverse\n    \
    \    val oddsSorted10 = oddsSorted9.takeWhile(x => x < b).reverse\n        val\
    \ evensSorted11 = evensSorted10.takeWhile(x => x < b).reverse\n        val oddsSorted11\
    \ = oddsSorted10.takeWhile(x => x < b).reverse\n        val evensSorted12 = evensSorted11.takeWhile(x\
    \ => x < b).reverse\n        val oddsSorted12 = oddsSorted11.takeWhile(x => x\
    \ < b).reverse\n        val evensSorted13 = evensSorted12.takeWhile(x => x < b\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqxclg7b5.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqxclg7b5.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.filter(x => x % 2 ==\
    \ 0).sortBy(x => x).takeWhile(x => x < b).reverse ++ odds\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqdxksbnt.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sortBy(\e[36mx\e[0m => x).takeWhile(\e\
    [36mx\e[0m => x < b).reverse ++ odds\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to b + 1\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val oddsSorted = odds.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.toList\n        val oddsSortedList = oddsSorted.toList\n     \
    \   val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedList.size\n\
    \        val oddsSortedListLength = oddsSortedList.size\n        val evensSortedListLength\
    \ = evensSortedList.size\n        val oddsSortedListLength = oddsSortedList.size\n\
    \        val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedList.size\n\
    \        val oddsSortedListLength = oddsSortedList.size\n        val evensSortedListLength\
    \ = evensSortedList.size\n        val oddsSortedListLength = oddsSortedList.size\n\
    \        val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedList.size\n\
    \        val oddsSortedListLength = oddsSortedList.size\n        val evensSortedListLength\
    \ = evensSortedList.size\n        val oddsSortedListLength = oddsSortedList.size\n\
    \        val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedList.size\n\
    \        val oddsSortedListLength = oddsSortedList.size\n        val evensSortedListLength\
    \ = evensSortedList.size\n        val oddsSortedListLength = oddsSortedList.size\n\
    \        val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedList.size\n\
    \        val oddsSortedListLength = oddsSortedList.size\n        val evensSortedListLength\
    \ = evensSortedList.size\n        val oddsSortedListLength = oddsSortedList.size\n\
    \        val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedList.size\n\
    \        val oddsSortedListLength = oddsSorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaaznavx3.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaaznavx3.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36moddsSortedListLength\e[0m\
    \ = oddsSortedList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35moddsSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpaaznavx3.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaaznavx3.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moddsSortedListLength\e[0m\
    \ = oddsSortedList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35moddsSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpaaznavx3.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m"
  stdout: ''
  timestamp: 1659797592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = Range(a, b)\n        range.foreach { x =>\n            if\
    \ (x % 2 == 0) {\n                evens += x\n            } else {\n         \
    \       odds += x\n            }\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncobd_kd.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncobd_kd.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpncobd_kd.scala:16:26 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpncobd_kd.scala:16:29\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (b : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.filter(x => x % 2 ==\
    \ 0).sortBy(x => x).takeWhile(x => x < b).reverse ++ odds\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqdxksbnt.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sortBy(\e[36mx\e[0m => x).takeWhile(\e\
    [36mx\e[0m => x < b).reverse ++ odds\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjdjessj_.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjdjessj_.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdjessj_.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjdjessj_.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdjessj_.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is alread"
  stdout: ''
  timestamp: 1659797590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvr4x8nb6.scala:19)\n\tat Problem.main(tmpvr4x8nb6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjdjessj_.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjdjessj_.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdjessj_.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjdjessj_.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdjessj_.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is alread"
  stdout: ''
  timestamp: 1659797590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val even = a.toInt\n        val odd = b.toInt\n        while(even < odd)\
    \ {\n            evens += even\n            odd += 2\n        }\n        while(odd\
    \ < even) {\n            odds += odd\n            even += 2\n        }\n     \
    \   evens.toList ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn77w8ofl.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpn77w8ofl.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpn77w8ofl.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            odd += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean odd.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn77w8ofl.scala:24:17\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            even += \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value += is not a member of Int - did you mean even.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659797594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjdjessj_.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjdjessj_.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdjessj_.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjdjessj_.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdjessj_.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is alread"
  stdout: ''
  timestamp: 1659797590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val current = range.next\n            if (current % 2 == 0) {\n     \
    \           evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpth3jv4ei.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpth3jv4ei.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n        val\
    \ end = (a / b).toInt\n        val start2 = start / 2\n        val end2 = end\
    \ / 2\n        val start3 = start2 / 2\n        val end3 = end2 / 2\n        val\
    \ start4 = start3 / 2\n        val end4 = end3 / 2\n        val start5 = start4\
    \ / 2\n        val end5 = end4 / 2\n        val start6 = start5 / 2\n        val\
    \ end6 = end5 / 2\n        val start7 = start6 / 2\n        val end7 = end6 /\
    \ 2\n        val start8 = start7 / 2\n        val end8 = end7 / 2\n        val\
    \ start9 = start8 / 2\n        val end9 = end8 / 2\n        val start10 = start9\
    \ / 2\n        val end10 = end9 / 2\n        val start11 = start10 / 2\n     \
    \   val end11 = end10 / 2\n        val start12 = start11 / 2\n        val end12\
    \ = end11 / 2\n        val start13 = start12 / 2\n        val end13 = end12 /\
    \ 2\n        val start14 = start13 / 2\n        val end14 = end13 / 2\n      \
    \  val start15 = start14 / 2\n        val end15 = end14 / 2\n        val start16\
    \ = start15 / 2\n        val end16 = end15 / 2\n        val start17 = start16\
    \ / 2\n        val end17 = end16 / 2\n        val start18 = start17 / 2\n    \
    \    val end18 = end17 / 2\n        val start19 = start18 / 2\n        val end19\
    \ = end18 / 2\n        val start20 = start19 / 2\n        val end20 = end19 /\
    \ 2\n        val start21 = start20 / 2\n        val end21 = end20 / 2\n      \
    \  val start22 = start21 / 2\n        val end22 = end21 / 2\n        val start23\
    \ = start22 / 2\n        val end23 = end22 / 2\n        val start24 = start23\
    \ / 2\n        val end24 = end23 / 2\n        val start25 = start24 / 2\n    \
    \    val end25 = end24 / 2\n        val start26 = start25 / 2\n        val end26\
    \ = end25 / 2\n        val start27 = start\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqwud0p28.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpqwud0p28.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to (b+1)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val oddsSorted = odds.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.map(_.toLong).toList\n        val oddsSortedList = oddsSorted.map(_.toLong).toList\n\
    \        val result = evensSortedList.intersect(oddsSortedList)\n        if (result.isEmpty)\
    \ Nil\n        else result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4hr86pff.scala:25)\n\tat Problem.main(tmp4hr86pff.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b + 1)\n        val odds = b until (a + 1)\n        evens ++ odds\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpylocwd07.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b - 1)\n        val odds = b until (a - 1)\n        evens ++ odds\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeao6pdwh.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = mutable.ListBuffer[Long]()\n        var x = a\n        var y = b\n       \
    \ while (x != y) {\n            if (x % 2 == 0) {\n                x /= 2\n  \
    \              result += x\n            }\n            else {\n              \
    \  x /= 2\n                result += x\n                x += 1\n            }\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbshsf7sm.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val m = math.min(a, b)\n        val n\
    \ = math.max(a, b)\n        for (i <- m until n) {\n            list += i.toLong\n\
    \        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe6dhc643.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while(i <= j) {\n            val\
    \ remainder = i % 10\n            evens += remainder\n            i /= 10\n  \
    \          j /= 10\n        }\n        while(i <= j) {\n            val remainder\
    \ = i % 2\n            evens += remainder\n            i /= 2\n            j /=\
    \ 2\n        }\n        evens.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3b6qxl4l.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3b6qxl4l.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        var i = a\n        while(i <= b) {\n \
    \           list += i\n            i += 2\n        }\n        list.sortWith(_\
    \ < _)\n        list.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpceq5p5rn.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val evensCount = mutable.ListBuffer.empty[Long]\n        val oddsCount\
    \ = mutable.ListBuffer.empty[Long]\n        var evensCountIndex = 0\n        var\
    \ oddsCountIndex = 0\n        while (a < b) {\n            if (a % 2 == 0) {\n\
    \                evens += a\n                evensCount += a\n               \
    \ evensCountIndex += 1\n            } else {\n                odds += a\n    \
    \            oddsCount += a\n                oddsCountIndex += 1\n           \
    \ }\n            a += 1\n        }\n        evens.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi6f8f2i4.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpi6f8f2i4.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpi6f8f2i4.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevensCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi6f8f2i4.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36moddsCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpi6f8f2i4.scala:30:14 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            a += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean a.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1659797599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        val evensSorted = evens.toList\n\
    \        val oddsSorted = odds.toList\n        evensSorted.sortWith(_ < _)\n \
    \       oddsSorted.sortWith(_ < _)\n        evensSorted.toList ++ oddsSorted.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec51t12f.scala:23)\n\tat Problem.main(tmpec51t12f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        evens ++ odds\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgj7xf_6i.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < a.toInt)\
    \ {\n            val x = a.toInt - i\n            val y = b.toInt - i\n      \
    \      val z = (x * y).toInt\n            while (z > 0) {\n                val\
    \ z1 = z - 1\n                val z2 = z - 2\n                val z3 = z - 3\n\
    \                val z4 = z - 4\n                val z5 = z - 5\n            \
    \    val z6 = z - 6\n                val z7 = z - 7\n                val z8 =\
    \ z - 8\n                val z9 = z - 9\n                val z10 = z - 10\n  \
    \              val z11 = z - 11\n                val z12 = z - 12\n          \
    \      val z13 = z - 13\n                val z14 = z - 14\n                val\
    \ z15 = z - 15\n                val z16 = z - 16\n                val z17 = z\
    \ - 17\n                val z18 = z - 18\n                val z19 = z - 19\n \
    \               val z20 = z - 20\n                val z21 = z - 21\n         \
    \       val z22 = z - 22\n                val z23 = z - 23\n                val\
    \ z24 = z - 24\n                val z25 = z - 25\n                val z26 = z\
    \ - 26\n                val z27 = z - 27\n                val z28 = z - 28\n \
    \               val z29 = z - 29\n                val z30 = z - 30\n         \
    \       val z31 = z - 31\n                val z32 = z - 32\n                val\
    \ z33 = z - 33\n                val z34 = z - 34\n                val z35 = z\
    \ - 35\n                val z36 = z - 36\n                val z37 = z - 37\n \
    \               val z38 = z - 38\n                val z39 = z - 39\n         \
    \       val z40 = z - 40\n                val z41 = z - 41\n                val\
    \ z42 = z - 42\n                val z43 = z - 43\n                val z44 = z\
    \ - 44\n                val z45 = z - 45\n                val z46 = z - 46\n \
    \               val z47 = z - 47\n                val z48 = z - 48\n         \
    \       val z49 = z - 49\n                val z50 = z - 50\n                val\
    \ z51 = z - 51\n                val z52 = z - 52\n                \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqv7ze576.scala:83:0 ----------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqv7ze576.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpqv7ze576.scala:16:8 ---------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mwhile\e[0m (i < a.toInt) {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mx\e[0m = a.toInt\
    \ - i\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = b.toInt - i\n\e\
    [31m19 |\e[0m            \e[33mval\e[0m \e[36mz\e[0m = (x * y).toInt\n\e[31m20\
    \ |\e[0m            \e[33mwhile\e[0m (z > \e[31m0\e[0m) {\n\e[31m21 |\e[0m   \
    \             \e[33mval\e[0m \e[36mz1\e[0m = z - \e[31m1\e[0m\n\e[31m22 |\e[0m\
    \                \e[33mval\e[0m \e[36mz2\e[0m = z - \e[31m2\e[0m\n\e[31m23 |\e\
    [0m                \e[33mval\e[0m \e[36mz3\e[0m = z - \e[31m3\e[0m\n\e[31m24 |\e\
    [0m                \e[33mval\e[0m \e[36mz4\e[0m = z - \e[31m4\e[0m\n\e[31m25 |\e\
    [0m                \e[33mval\e[0m \e[36mz5\e[0m = z - \e[31m5\e[0m\n\e[31m26 |\e\
    [0m                \e[33mval\e[0m \e[36mz6\e[0m = z - \e[31m6\e[0m\n\e[31m27 |\e\
    [0m                \e[33mval\e[0m \e[36mz7\e[0m = z - \e[31m7\e[0m\n\e[31m28 |\e\
    [0m                \e[33mval\e[0m \e[36mz8\e[0m = z - \e[31m8\e[0m\n\e[31m29 |\e\
    [0m                \e[33mval\e[0m \e[36mz9\e[0m = z - \e[31m9\e[0m\n\e[31m30 |\e\
    [0m                \e[33mval\e[0m \e[36mz10\e[0m = z - \e[31m10\e[0m\n\e[31m31\
    \ |\e[0m                \e[33mval\e[0m \e[36mz11\e[0m = z - \e[31m11\e[0m\n\e\
    [31m32 |\e[0m                \e[33mval\e[0m \e[36mz12\e[0m = z - \e[31m12\e[0m\n\
    \e[31m33 |\e[0m                \e[33mval\e[0m \e[36mz13\e[0m = z - \e[31m13\e\
    [0m\n\e[31m34 |\e[0m                \e[33m"
  stdout: ''
  timestamp: 1659797602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -1\n        evens ++ odds\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpve1xuzxy.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val start = 0\n        val end = b - a\n\
    \        while (start < end) {\n            val mid = start + (end - start) /\
    \ 2\n            val midVal = math.pow(10, mid)\n            if (midVal % 2 ==\
    \ 0) {\n                list += midVal.toLong\n                start = mid + 1\n\
    \            } else {\n                start = mid + 1\n            }\n      \
    \  }\n        list.sortWith(_ < _)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi7qu8wx3.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpi7qu8wx3.scala:22:24 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                start = mid + \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Found:    Long\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi7qu8wx3.scala:24:24\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                start = mid +\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    Long\n\e[31m   |\e[0m         \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.filter(_ % 2 == 0).sortBy(_\
    \ % 2).takeWhile(_ < b).flatMap(x => odds filter (_ % 2 == 0) filter (x % 2 ==\
    \ 0)).sortBy(_ % 2).takeWhile(_ < b).flatMap(x => evens filter (_ % 2 == 0) filter\
    \ (x % 2 == 0)).sortBy(_ % 2).takeWhile(_ < b).flatMap(x => odds filter (_ % 2\
    \ == 0) filter (x % 2 == 0)).sortBy(_ % 2).takeWhile(_ < b).flatMap(x => evens\
    \ filter (_ % 2 == 0) filter (x % 2 == 0)).sortBy(_ % 2).takeWhile(_ < b).flatMap(x\
    \ => odds filter (_ % 2 == 0) filter (x % 2 == 0)).sortBy(_ % 2).takeWhile(_ <\
    \ b).flatMap(x => evens filter (_ % 2 == 0) filter (x % 2 == 0)).sortBy(_ % 2).takeWhile(_\
    \ < b).flatMap(x => odds filter (_ % 2 == 0) filter (x % 2 == 0)).sortBy(_ % 2).takeWhile(_\
    \ < b).flatMap(x => evens filter (_ % 2 == 0) filter (x % 2 == 0)).sortBy(_ %\
    \ 2).takeWhile(_ < b).flatMap(x => odds filter (_ % 2 == 0) filter (x % 2 == 0)).sortBy(_\
    \ % 2).takeWhile(_ < b).flatMap(x => evens filter (_ % 2 == 0) filter (x % 2 ==\
    \ 0)).sortBy(_ % 2).takeWhile(_ < b).flatMap(x => odds filter (_ % 2 == 0) filter\
    \ (x % 2 == 0)).sortBy(_ % 2).takeWhile(_ < b).flatMap(x => evens filter (_ %\
    \ 2 == 0) filter (x % 2 == 0)).sortBy(_ % 2).takeWhile(_ < b).flatMap(x => odds\
    \ filter (_ % 2 == 0) filter (x % 2 == 0)).sortBy(_ % 2).takeWhile(_ < b).flatMap(x\
    \ => evens filter (_ % 2 == 0) filter (x % 2 == 0)).sortBy(_ % 2).takeWhile(_\
    \ < b).flatMap(x => odds filter (_ % 2 == 0) filter (x % 2 == 0)).sortBy(_ % 2).takeWhile(_\
    \ < b).flatMap(x => evens filter (_ % 2 == 0) filter (x % 2 == 0)).sortBy(_ %\
    \ 2).takeWhile(_\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfauz9bpp.scala:17:4 ----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpfauz9bpp.scala:16:1505\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).sortBy(_ % \e[31m2\e[0m).takeWhile(_ < b).flatMap(\e\
    [36mx\e[0m => odds filter (_ % \e[31m2\e[0m == \e[31m0\e[0m) filter (x % \e[31m2\e\
    [0m == \e[31m0\e[0m)).sortBy(_ % \e[31m2\e[0m).takeWhile(_ < b).flatMap(\e[36mx\e\
    [0m => evens filter (_ % \e[31m2\e[0m == \e[31m0\e[0m) filter (x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m)).sortBy(_ % \e[31m2\e[0m).takeWhile(_ < b).flatMap(\e[36mx\e\
    [0m => odds filter (_ % \e[31m2\e[0m == \e[31m0\e[0m) filter (x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m)).sortBy(_ % \e[31m2\e[0m).takeWhile(_ < b).flatMap(\e[36mx\e\
    [0m => evens filter (_ % \e[31m2\e[0m == \e[31m0\e[0m) filter (x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m)).sortBy(_ % \e[31m2\e[0m).takeWhile(_ < b).flatMap(\e[36mx\e\
    [0m => odds filter (_ % \e[31m2\e[0m == \e[31m0\e[0m) filter (x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m)).sortBy(_ % \e[31m2\e[0m).takeWhile(_ < b).flatMap(\e[36mx\e\
    [0m => evens filter (_ % \e[31m2\e[0m == \e[31m0\e[0m) filter (x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m)).sortBy(_ % \e[31m2\e[0m).takeWhile(_ < b).flatMap(\e[36mx\e\
    [0m => odds filter (_ % \e[31m2\e[0m == \e[31m0\e[0m) filter (x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m)).sortBy(_ % \e[31m2\e[0m).takeWhile(_ < b).flatMap(\e[36mx\e\
    [0m => evens filter (_ % \e[31m2\e[0m == \e[31m0\e[0m) filter (x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m)).sortBy(_ % \e[31m2\e[0m).takeWhile(_ < b).flatMap(\e[36mx\e\
    [0m => odds filter (_ % \e[31m2\e[0m == \e[31m0\e[0m) filter (x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m)).sortBy(_ % \e[31m2\e[0m).takeWhile(_ < b).flatMap(\e[36mx\e\
    [0m => evens filter (_ % \e[31m2\e[0m == \e[31m0\e[0m) filter (x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m)).sortBy(_ % \e[31m2\e[0m).takeWhile(_ < b).flatMap(\e[36mx\e\
    [0m => odds filter (_ % \e[31m2\e[0m == \e[31m0\e[0m) filter (x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m)).sortBy(_ % \e[31m2\e[0m).takeWhile(_ < b).flatMap(\e[36mx\e\
    [0m => evens filter (_ % \e[31m2\e[0m == \e[31m0\e[0m)"
  stdout: ''
  timestamp: 1659797608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        var i = a\n        var j = b\n       \
    \ while (i <= j) {\n            if (i % 2 == 0) {\n                evens += i\n\
    \            }\n            i += 1\n        }\n        evens.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpthbynw8k.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val a = a.toInt\n        val b = b.toInt\n        val c = b - a\n   \
    \     val d = c / 2\n        val e = c % 2\n        val f = d - e\n        val\
    \ g = f / 2\n        val h = f % 2\n        val i = g - h\n        val j = i -\
    \ e\n        val k = j / 2\n        val l = j % 2\n        val m = k - l\n   \
    \     val n = m - e\n        val o = n - h\n        val p = o / 2\n        val\
    \ q = o % 2\n        val r = p - q\n        val s = r / 2\n        val t = r %\
    \ 2\n        val u = s - t\n        val v = u / 2\n        val w = u % 2\n   \
    \     val x = v - w\n        val y = x - e\n        val z = y - h\n        val\
    \ a = z / 2\n        val b = z % 2\n        val c = a - b\n        val d = c /\
    \ 2\n        val e = c % 2\n        val f = d - e\n        val g = f / 2\n   \
    \     val h = f % 2\n        val i = g - h\n        val j = i - e\n        val\
    \ k = j / 2\n        val l = j % 2\n        val m = k - l\n        val n = m -\
    \ e\n        val o = n - h\n        val p = o / 2\n        val q = o % 2\n   \
    \     val r = p - q\n        val s = r / 2\n        val t = r % 2\n        val\
    \ u = s - t\n        val v = u / 2\n        val w = u % 2\n        val x = v -\
    \ w\n        val y = x - e\n        val z = y - h\n        val a = z / 2\n   \
    \     val b = z % 2\n        val c = a - b\n        val d = c / 2\n        val\
    \ e = c % 2\n        val f = d - e\n        val g = f / 2\n        val h = f %\
    \ 2\n        val i = g - h\n        val j = i - e\n        val k = j / 2\n   \
    \     val l = j % 2\n        val m = k - l\n        val n = m - e\n        val\
    \ o = n - h\n        val p = o / 2\n        val q = o % 2\n        val r = p -\
    \ q\n        val s = r / 2\n        val t = r % 2\n        val u = s - t\n\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr50wq_ev.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = z / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ma is already defined\
    \ as \e[33mvalue\e[0m \e[35ma\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr50wq_ev.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = z % \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mb is already defined\
    \ as \e[33mvalue\e[0m \e[35mb\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr50wq_ev.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = a - b\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mc is already defined as\
    \ \e[33mvalue\e[0m \e[35mc\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr50wq_ev.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = c / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0md is already defined\
    \ as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr50wq_ev.scala:46:12 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36me\e[0m = c % \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0me is already defined\
    \ as \e[33mvalue\e[0m \e[35me\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr50wq_ev.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1659797602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        var i = a\n        var j = b\n       \
    \ while(i <= j) {\n            list += i\n            i += 1\n        }\n    \
    \    list.sortWith(_ < _)\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplf8x6bu0.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val range = (a to b).iterator\n  \
    \      while(range.hasNext) {\n            val current = range.next\n        \
    \    if(current % 2 == 0) {\n                result.+=current\n            }\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1vrboif1.scala:19:32 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                result.+=current\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1vrboif1.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        val evensSorted = evens.toList.sortBy(_.toLong)\n\
    \        val oddsSorted = odds.toList.sortBy(_.toLong)\n        val result = evensSorted.takeWhile(x\
    \ => oddsSorted.contains(x))\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplymx9smm.scala:22)\n\tat Problem.main(tmplymx9smm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val numsEven = mutable.ListBuffer[Long]()\n\
    \        val numsOdd = mutable.ListBuffer[Long]()\n        val numsBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothEven = mutable.ListBuffer[Long]()\n        val numsBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2vkc3pb0.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2vkc3pb0.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsBothBothBothEven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsBothBothBothEven is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsBothBothBothEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2vkc3pb0.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnumsBothBothBothOdd\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsBothBothBothOdd is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsBothBothBothOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2vkc3pb0.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnumsBothBothBothBoth\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsBothBothBothBoth is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsBothBothBothBoth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2vkc3pb0.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnumsBothBothBothEven\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsBothBothBothEven is already defined a"
  stdout: ''
  timestamp: 1659797603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.filter(x => x % 2 ==\
    \ 0).map(x => x.toLong).toList ++ odds.filter(x => x % 2 == 1).map(x => x.toLong).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8y2545fa.scala:20)\n\tat Problem.main(tmp8y2545fa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.filter(x => x % 2 ==\
    \ 0).sorted ++ odds.filter(x => x % 2 == 1).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp7od4ir1.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sorted ++ odds.filter(\e[36mx\e[0m =>\
    \ x % \e[31m2\e[0m == \e[31m1\e[0m).sorted\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjdjessj_.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjdjessj_.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdjessj_.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjdjessj_.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdjessj_.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is alread"
  stdout: ''
  timestamp: 1659797590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val mid = a + (b - a) / 2\n      \
    \  val midDigit = math.floor(mid)\n        val midDigitDigit = math.floor(midDigit\
    \ % 10)\n        val leftDigit = math.floor(midDigit / 10)\n        val rightDigit\
    \ = math.floor(a / 10)\n        val leftDigitDigit = math.floor(leftDigit % 10)\n\
    \        val rightDigitDigit = math.floor(rightDigit % 10)\n        val leftDigitDigitDigit\
    \ = math.floor(leftDigit / 10)\n        val rightDigitDigitDigit = math.floor(rightDigit\
    \ / 10)\n        val leftDigitDigitDigitDigit = math.floor(leftDigit / 10)\n \
    \       val rightDigitDigitDigitDigit = math.floor(rightDigit / 10)\n        val\
    \ leftDigitDigitDigitDigitDigit = math.floor(leftDigit / 10)\n        val rightDigitDigitDigitDigit\
    \ = math.floor(rightDigit / 10)\n        val leftDigitDigitDigitDigitDigitDigit\
    \ = math.floor(leftDigit / 10)\n        val rightDigitDigitDigitDigitDigit = math.floor(rightDigit\
    \ / 10)\n        val leftDigitDigitDigitDigitDigitDigitDigit = math.floor(leftDigit\
    \ / 10)\n        val rightDigitDigitDigitDigitDigitDigit = math.floor(rightDigit\
    \ / 10)\n        val leftDigitDigitDigitDigitDigitDigitDigit = math.floor(leftDigit\
    \ / 10)\n        val rightDigitDigitDigitDigitDigitDigit = math.floor(rightDigit\
    \ / 10)\n        val leftDigitDigitDigitDigitDigitDigitDigitDigit = math.floor(leftDigit\
    \ / 10)\n        val rightDigitDigitDigitDigitDigitDigitDigit = math.floor(rightDigit\
    \ / 10)\n        val leftDigitDigitDigitDigitDigitDigitDigitDigit = math.floor(leftDigit\
    \ / 10)\n        val rightDigitDigitDigitDigitDigitDigitDigit = math.floor(rightDigit\
    \ / 10)\n        val leftDigitDigitDigitDigitDigitDigitDigitDigitDigit = math.floor(leftDigit\
    \ / 10)\n        val rightDigitDigitDigitDigitDigitDigitDigitDigit = math.floor(rightDigit\
    \ / 10)\n        val leftDigitDigitDigitDigitDigitDigitDigitDigitDigit = math.floor(leftDigit\
    \ / 10)\n        val rightDigitDigitDigitDigitDigitDigitDigitDigit = math.floor(rightDigit\
    \ / 10)\n        val leftDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit =\
    \ math.floor(leftDigit / 10)\n        val rightDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = math.floor(rightDigit / 10)\n        val leftDigitDigitDigit\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp759isbln.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp759isbln.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mrightDigitDigitDigitDigit\e[0m = math.floor(rightDigit / \e[31m10\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrightDigitDigitDigitDigit is already defined as \e[33mvalue\e\
    [0m \e[35mrightDigitDigitDigitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp759isbln.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mleftDigitDigitDigitDigitDigitDigitDigit\e\
    [0m = math.floor(leftDigit / \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mleftDigitDigitDigitDigitDigitDigitDigit is already defined\
    \ as \e[33mvalue\e[0m \e[35mleftDigitDigitDigitDigitDigitDigitDigit\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp759isbln.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mrightDigitDigitDigitDigitDigitDigit\e[0m\
    \ = math.floor(rightDigit / \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrightDigitDigitDigitDigitDigitDigit is already defined as\
    \ \e[33mvalue\e[0m \e[35mrightDigitDigitDigitDigitDigitDigit\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp759isbln.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mleftDigitDigitDigitDigitDigitDigitDigitDigit\e[0"
  stdout: ''
  timestamp: 1659797604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val n = math.min(a, b)\n        val\
    \ m = math.max(a, b)\n        val digits = math.pow(10, math.ceil(math.log10(m)))\n\
    \        var i = m\n        while (i <= n) {\n            val d = math.floor(i\
    \ / digits)\n            i -= d * digits\n            list += d\n        }\n \
    \       list.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmnerzgip.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmnerzgip.scala:21:14\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            i -= d * digits\n\
    \e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value -=\
    \ is not a member of Long - did you mean Long.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659797605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n      \
    \  val end = (a / b).toInt\n        val mid = (a / b).toInt\n        val start2\
    \ = mid * b\n        val end2 = mid * b\n        val mid2 = mid * b\n        val\
    \ start3 = mid2 * b\n        val end3 = mid2 * b\n        val mid3 = mid2 * b\n\
    \        val start4 = mid3 * b\n        val end4 = mid3 * b\n        val mid4\
    \ = mid3 * b\n        val start5 = mid4 * b\n        val end5 = mid4 * b\n   \
    \     val mid5 = mid4 * b\n        val start6 = mid5 * b\n        val end6 = mid5\
    \ * b\n        val mid6 = mid5 * b\n        val start7 = mid6 * b\n        val\
    \ end7 = mid6 * b\n        val mid7 = mid6 * b\n        val start8 = mid7 * b\n\
    \        val end8 = mid7 * b\n        val mid8 = mid7 * b\n        val start9\
    \ = mid8 * b\n        val end9 = mid8 * b\n        val mid9 = mid8 * b\n     \
    \   val start10 = mid9 * b\n        val end10 = mid9 * b\n        val mid10 =\
    \ mid9 * b\n        val start11 = mid10 * b\n        val end11 = mid10 * b\n \
    \       val mid11 = mid10 * b\n        val start12 = mid11 * b\n        val end12\
    \ = mid11 * b\n        val mid12 = mid11 * b\n        val start13 = mid12 * b\n\
    \        val end13 = mid12 * b\n        val mid13 = mid12 * b\n        val start14\
    \ = mid13 * b\n        val end14 = mid13 * b\n        val mid14 = mid13 * b\n\
    \        val start15 = mid14 * b\n        val end15 = mid14 * b\n        val mid15\
    \ = mid14 * b\n        val start16 = mid15 * b\n        val end16 = mid15 * b\n\
    \        val mid16 = mid15 * b\n        val start17 = mid16 * b\n        val end17\
    \ = mid16 * b\n        val mid17 = mid16 * b\n        val start18 = mid17 * b\n\
    \        val end18 = mid17 * b\n        val mid18 = mid17 * b\n        val start19\
    \ = mid18 * b\n        val end19 = mid18 * b\n        val mid19 = mid18 * b\n\
    \        val start20 = mid19 * b\n        val end20\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnog385wb.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnog385wb.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnog385wb.scala:74:5 ---------------------\e[0m\e[0m\n\e[31m74\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.toList\n        val evensSortedListIterator = evensSortedList.iterator\n\
    \        val evensSortedListIteratorNext = evensSortedListIterator.next\n    \
    \    val evensSortedListIteratorNextLong = evensSortedListIteratorNext.asInstanceOf[Long]\n\
    \        val evensSortedListIteratorNextLongToInt = evensSortedListIteratorNextLong.toInt\n\
    \        val evensSortedListIteratorNextLongToInt = evensSortedListIteratorNextLongToInt.toInt\n\
    \        val evensSortedListIteratorNextLongToInt = evensSortedListIteratorNextLongToInt.toInt\n\
    \        val evensSortedListIteratorNextLongToInt = evensSortedListIteratorNextLongToInt.toInt\n\
    \        val evensSortedListIteratorNextLongToInt = evensSortedListIteratorNextLongToInt.toInt\n\
    \        val evensSortedListIteratorNextLongToInt = evensSortedListIteratorNextLongToInt.toInt\n\
    \        val evensSortedListIteratorNextLongToInt = evensSortedListIteratorNextLongToInt.toInt\n\
    \        val evensSortedListIteratorNextLongToInt = evensSortedListIteratorNextLongToInt.toInt\n\
    \        val evensSortedListIteratorNextLongToInt = evensSortedListIteratorNextLongToInt.toInt\n\
    \        val evensSortedListIteratorNextLongToInt = evensSortedListIteratorNextLongToInt.toInt\n\
    \        val evensSortedListIteratorNextLongToInt = evensSortedListIteratorNextLongToInt.toInt\n\
    \        val evensSortedListIteratorNextLongToInt = evensSortedListIteratorNextLongToInt.toInt\n\
    \        val evensSortedListIteratorNextLongToInt = evensSortedListIteratorNextLongToInt.toInt\n\
    \        val evensSortedListIteratorNextLongToInt = evensSortedListIteratorNextLongToInt.toInt\n\
    \        val evensSortedListIteratorNextLongToInt = evensSortedListIteratorNextLongToInt.toInt\n\
    \        val evensSortedListIteratorNextLongToInt = evensSortedListIteratorNextLongToInt.toInt\n\
    \        val evensSortedListIteratorNextLongToInt = evensSortedListIteratorNextLongToInt.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2t1npq2g.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListIteratorNextLongToInt\e\
    [0m = evensSortedListIteratorNextLongToInt.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListIteratorNextLongToInt is already defined as\
    \ \e[33mvalue\e[0m \e[35mevensSortedListIteratorNextLongToInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2t1npq2g.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensSortedListIteratorNextLongToInt\e[0m = evensSortedListIteratorNextLongToInt.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListIteratorNextLongToInt is already defined as\
    \ \e[33mvalue\e[0m \e[35mevensSortedListIteratorNextLongToInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2t1npq2g.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensSortedListIteratorNextLongToInt\e[0m = evensSortedListIteratorNextLongToInt.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListIteratorNextLongToInt is already defined as\
    \ \e[33mvalue\e[0m \e[35mevensSortedListIteratorNextLongToInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2t1npq2g.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensSortedListIteratorNextLongToInt\e[0m = evensSortedListIteratorNextLongToInt.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val c = a / b\n        val d = a %\
    \ b\n        val e = c / b\n        val f = c % b\n        val g = d / b\n   \
    \     val h = d % b\n        val i = e / b\n        val j = e % b\n        val\
    \ k = f / b\n        val l = f % b\n        val m = g / b\n        val n = g %\
    \ b\n        val o = h / b\n        val p = h % b\n        val q = i / b\n   \
    \     val r = i % b\n        val s = j / b\n        val t = j %b\n        val\
    \ u = k / b\n        val v = k % b\n        val w = l / b\n        val x = l %\
    \ b\n        val y = m / b\n        val z = m % b\n        val aa = o / b\n  \
    \      val ab = o % b\n        val ba = p / b\n        val bb = p % b\n      \
    \  val ca = q / b\n        val cb = q %b\n        val da = s / b\n        val\
    \ db = s % b\n        val ea = t / b\n        val eb = t %b\n        val fa =\
    \ u / b\n        val fb = u %b\n        val ga = v / b\n        val gb = v %b\n\
    \        val ha = w / b\n        val hb = w %b\n        val ia = x / b\n     \
    \   val ib = x %b\n        val ja = y / b\n        val jb = y %b\n        val\
    \ ka = z / b\n        val kb = z %b\n        val la = a / b\n        val lb =\
    \ a %b\n        val ma = a / b\n        val mb = a %b\n        val na = a / b\n\
    \        val nb = a %b\n        val oa = a / b\n        val ob = a %b\n      \
    \  val pa = a / b\n        val pb = a %b\n        val qa = a / b\n        val\
    \ qb = a %b\n        val ra = a / b\n        val rb = a %b\n        val sa = a\
    \ / b\n        val sb = a %b\n        val ta = a / b\n        val tb = a %b\n\
    \        val ua = a / b\n        val ub = a %b\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_5x395wb.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_5x395wb.scala:81:5\
    \ ---------------------\e[0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val x = range.next\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk0vyv8dk.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpk0vyv8dk.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to (b+1)\n        evens.filter(x => x % 2 ==\
    \ 0).sortBy(x => x).takeWhile(x => x < b).map(x => x.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplscpxcmb.scala:16:78\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sortBy(\e[36mx\e[0m => x).takeWhile(\e\
    [36mx\e[0m => x < b).map(\e[36mx\e[0m => x.toLong)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        var i = 0\n        while (i <= a && i\
    \ <= b) {\n            list += i.toLong\n            i += 1\n        }\n     \
    \   list.sortWith(_ < _)\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg01dob9b.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.filter(x => x % 2 ==\
    \ 0).sorted ++ odds.filter(x => x % 2 == 1).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp7od4ir1.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sorted ++ odds.filter(\e[36mx\e[0m =>\
    \ x % \e[31m2\e[0m == \e[31m1\e[0m).sorted\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a / 2\n        val odds = a % 2\n        val evensBetween = b / 2\n      \
    \  val oddsBetween = b % 2\n        val evensBetweenList = generateIntegers(evensBetween,\
    \ evensBetween)\n        val oddsBetweenList = generateIntegers(oddsBetween, oddsBetween)\n\
    \        val evensBetweenList ++ oddsBetweenList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl2vtlv1p.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl2vtlv1p.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ evensBetweenList ++ oddsBetweenList\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensBetweenList is already defined as \e[33mvalue\e[0m \e\
    [35mevensBetweenList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpl2vtlv1p.scala:20:32 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m evensBetweenList ++ oddsBetweenList\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0moddsBetweenList is already defined as \e[33mvalue\e[0m \e[35moddsBetweenList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpl2vtlv1p.scala:20:29 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m evensBetweenList ++ oddsBetweenList\n\e\
    [31m\e[31m   |\e[0m                             ^^\e[0m\n\e[31m   |\e[0m     \
    \                        Not found: ++\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpl2vtlv1p.scala:21:5 ---------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659797607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = a.toInt\n        val odd = b.toInt\n        while(even < odd)\
    \ {\n            evens += even\n            odd -= even\n            even += odd\n\
    \        }\n        evens.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqfmxcp4a.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqfmxcp4a.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpqfmxcp4a.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            odd -= even\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of Int\
    \ - did you mean odd.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqfmxcp4a.scala:21:17\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            even += odd\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean even.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a / 2\n        val odds = a % 2\n        val evensRemainder = a - evens\n\
    \        val oddsRemainder = b - odds\n        val evensRemainderList = List(evensRemainder)\n\
    \        val oddsRemainderList = List(oddsRemainder)\n        val evensRemainderListWithOddsRemainder\
    \ = evensRemainderList ++ oddsRemainderList\n        val evensRemainderListWithOddsRemainderList\
    \ = evensRemainderListWithOddsRemainder.toList\n        val evensRemainderListWithOddsRemainderListSorted\
    \ = evensRemainderListWithOddsRemainderList\n            .sortWith((a, b) => a\
    \ < b)\n        val evensRemainderListWithOddsRemainderListSortedWithEvensRemainderListSorted\
    \ = evensRemainderListWithOddsRemainderListSorted\n            .sortWith((a, b)\
    \ => a < b)\n        val evensRemainderListWithOddsRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSorted\
    \ = evensRemainderListWithOddsRemainderListSortedWithEvensRemainderListSorted\n\
    \            .sortWith((a, b) => a < b)\n        val evensRemainderListWithOddsRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSorted\
    \ = evensRemainderListWithOddsRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSorted\n\
    \            .sortWith((a, b) => a < b)\n        val evensRemainderListWithOddsRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSorted\
    \ = evensRemainderListWithOddsRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSorted\n\
    \            .sortWith((a, b) => a < b)\n        val evensRemainderListWithOddsRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSorted\
    \ = evensRemainderListWithOddsRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSortedWithEvensRemainder\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmfz3czy1.scala:32:200 -----------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mevensRemainderListWithOddsRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSorted\e\
    [0m = evensRemainderListWithOddsRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSortedWithEvensRemainder\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: evensRemainderListWithOddsRemainderListSortedWithEvensRemainderListSortedWithEvensRemainderListSortedWithEvensRemainder\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmfz3czy1.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.toList\n        val evensSortedListAsString = evensSortedList.mkString(\"\
    \")\n        val evensSortedListAsLong = evensSortedListAsString.toLong\n    \
    \    val evensSortedListAsLongList = evensSortedListAsLong.map(_.toLong)\n   \
    \     val evensSortedListAsLongListAsString = evensSortedListAsLongList.mkString(\"\
    \")\n        val evensSortedListAsLongListAsLong = evensSortedListAsLongListAsString.toLong\n\
    \        val evensSortedListAsLongListAsLongList = evensSortedListAsLongListAsLong.map(_.toLong)\n\
    \        val evensSortedListAsLongListAsLongListAsString = evensSortedListAsLongListAsLongListAsString.toLong\n\
    \        val evensSortedListAsLongListAsLongListAsLong = evensSortedListAsLongListAsLongListAsLongList.map(_.toLong)\n\
    \        val evensSortedListAsLongListAsLongListAsLongListAsString = evensSortedListAsLongListAsLongListAsLongListAsLong.mkString(\"\
    \")\n        val evensSortedListAsLongListAsLongListAsLongListAsLong = evensSortedListAsLongListAsLongListAsLongListAsLongListAsString.toLong\n\
    \        val evensSortedListAsLongListAsLongListAsLongListAsLongListAsString =\
    \ evensSortedListAsLongListAsLongListAsLongListAsLongListAsLongListAsString.toLong\n\
    \        val evensSortedListAsLongListAsLongListAsLongListAsLongListAsLongListAsString\
    \ = evensSortedListAsLongListAsLongListAsLongListAsLongListAsLongListAsLongListAsString.toLong\n\
    \        val evensSortedListAsLongListAsLongListAsLongListAsLongListAsLongListAsLongListAsString\
    \ = evensSortedListAsLongListAsLongListAsLongListAsLongListAsLongListAsLongListAsString.toLong\n\
    \        val evensSortedListAsLongListAsLongListAsLongListAsLongListAsLongListAsLongListAsLongListAsString\
    \ = evensSortedListAsLongListAsLongListAsLongListAsLongListAsLongListAsLongListAsLongListAsString.toLong\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp523qwy0q.scala:19:62 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListAsLongList\e\
    [0m = evensSortedListAsLong.map(_.toLong)\n\e[31m\e[31m   |\e[0m             \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                     value map is not a member of Long\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp523qwy0q.scala:23:58 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListAsLongListAsLongListAsString\e\
    [0m = evensSortedListAsLongListAsLongListAsString.toLong\n\e[31m\e[31m   |\e[0m\
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m  Recursive \e[33mvalue\e[0m \e[35mevensSortedListAsLongListAsLongListAsString\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp523qwy0q.scala:24:56\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mevensSortedListAsLongListAsLongListAsLong\e[0m = evensSortedListAsLongListAsLongListAsLongList.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: evensSortedListAsLongListAsLongListAsLongList\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp523qwy0q.scala:29:98\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensSortedListAsLongListAsLongListAsLongListAsLongListAsLongListAsLongListAsString\e\
    [0m = evensSortedListAsLongListAsLongListAsLongListAsLongListAsLongListAsLongListAsString.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                          ^\e[0m\n\e[31m   |\e[0mRecursive \e\
    [33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  evensSortedListAsLongListAsLongListAsLongListAsLongListAsLongListAsLongListAsString\n\
    \e[31m   |\e[0m\e[0m needs typ"
  stdout: ''
  timestamp: 1659797611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        var i = 0\n        while (i <= b)\
    \ {\n            val x = a.toString.toLong * 10 + i.toString.toLong\n        \
    \    if (x % 2 == 0) {\n                result += x\n            }\n         \
    \   i += 1\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvh72aptm.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val start = a\n        val end = b\n \
    \       val step = end - start\n        val mid = start + step/2\n        while(start\
    \ < end) {\n            list += mid.toLong\n            start += step\n      \
    \      mid = start + step/2\n        }\n        list.sortWith(_ < _)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjwbc0xi4.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpjwbc0xi4.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            start += step\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean start.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpjwbc0xi4.scala:22:16\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            mid = start\
    \ + step/\e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val mid\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = a.toInt\n        val odd = b.toInt\n        while(even < odd)\
    \ {\n            evens += even\n            odd += 2\n        }\n        while(even\
    \ > odd) {\n            odds += odd\n            even -= 2\n        }\n      \
    \  evens.toList ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ig9tfis.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0ig9tfis.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp0ig9tfis.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            odd += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean odd.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ig9tfis.scala:24:17\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            even -= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value -= is not a member of Int - did you mean even.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659797572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a / 2\n        val odds = a % 2\n        val evensBetween = b % evens\n  \
    \      val oddsBetween = b % odds\n        val evensBetweenList = evensBetween.until(evensBetween.toLong)\n\
    \        val oddsBetweenList = oddsBetween.until(oddsBetween.toLong)\n       \
    \ evensBetweenList.takeWhile(x => x <= b).toList ++ oddsBetweenList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.generateIntegers(tmpxjcscj9n.scala:17)\n\
    \tat Problem$.main(tmpxjcscj9n.scala:23)\n\tat Problem.main(tmpxjcscj9n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer.empty[Long]\n        var i = a\n        var j = b\n   \
    \     while(i <= j) {\n            val remainder = i % 10\n            evens +=\
    \ remainder\n            i += 1\n        }\n        evens.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwltzkupi.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val current = range.next\n            if (current % 2 == 0) {\n     \
    \           evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpth3jv4ei.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpth3jv4ei.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvr4x8nb6.scala:19)\n\tat Problem.main(tmpvr4x8nb6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.filter(x => x % 2 ==\
    \ 0).sorted ++ odds.filter(x => x % 2 == 1).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp7od4ir1.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sorted ++ odds.filter(\e[36mx\e[0m =>\
    \ x % \e[31m2\e[0m == \e[31m1\e[0m).sorted\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odd = a to b by 1\n        val evensAndOdd = evens\
    \ ++ odd\n        evensAndOdd.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpegdmot9d.scala:20)\n\tat Problem.main(tmpegdmot9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b - 1)\n        val odds = b until (a - 1)\n        evens ++ odds\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeao6pdwh.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.toList\n        val evensSortedListReversed = evensSortedList.reverse\n\
    \        val evensSortedListReversedList = evensSortedListReversed.toList\n  \
    \      val evensSortedListReversedListReversed = evensSortedListReversedList.reverse\n\
    \        val evensSortedListReversedListReversedList = evensSortedListReversedListReversed.toList\n\
    \        val evensSortedListReversedListReversedListReversed = evensSortedListReversedListReversedList.reverse\n\
    \        val evensSortedListReversedListReversedListReversedList = evensSortedListReversedListReversedListReversed.toList\n\
    \        val evensSortedListReversedListReversedListReversedListReversed = evensSortedListReversedListReversedListReversedList.reverse\n\
    \        val evensSortedListReversedListReversedListReversedListReversedList =\
    \ evensSortedListReversedListReversedListReversedListReversed.toList\n       \
    \ val evensSortedListReversedListReversedListReversedListReversedListReversed\
    \ = evensSortedListReversedListReversedListReversedListReversedList.reverse\n\
    \        val evensSortedListReversedListReversedListReversedListReversedListReversedList\
    \ = evensSortedListReversedListReversedListReversedListReversedListReversed.toList\n\
    \        val evensSortedListReversedListReversedListReversedListReversedListReversedListReversed\
    \ = evensSortedListReversedListReversedListReversedListReversedListReversedList.reverse\n\
    \        val evensSortedListReversedListReversedListReversedListReversedListReversedListReversedList\
    \ = evensSortedListReversedListReversedListReversedListReversedListReversedListReversed.toList\n\
    \        val evensSortedListReversedListReversedListReversedListReversedListReversedListReversedListReversed\
    \ = evensSortedListReversedListReversedListReversedListReversedListReversedListReversedListReversed.reverse\n\
    \        val evensSortedListReversedListReversedListReversedListReversedListReversedListReversedListReversedListReversed\
    \ = evensSortedListReversedListReversedListReversedListReversedListReversedListReversedListReverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkbjfsfx1.scala:29:110 --------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListReversedListReversedListReversedListReversedListReversedListReversedListReversed\e\
    [0m = evensSortedListReversedListReversedListReversedListReversedListReversedListReversedListReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  evensSortedListReversedListReversedListReversedListReversedListReversedListReversedListReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkbjfsfx1.scala:30:122 -----------------------\e[0m\e[0m\n\e[31m30 |\e\
    [0m        \e[33mval\e[0m \e[36mevensSortedListReversedListReversedListReversedListReversedListReversedListReversedListReversedListReversed\e\
    [0m = evensSortedListReversedListReversedListReversedListReversedListReversedListReversedListReverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: evensSortedListReversedListReversedListReversedListReversedListReversedListReversedListReverse\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkbjfsfx1.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).filter(x => x % 2 == 0)\n        range.foreach\
    \ { x =>\n            if (x % 2 == 0) {\n                evens += x\n        \
    \    } else {\n                odds += x\n            }\n        }\n        evens.toList\
    \ ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdt72pmk1.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdt72pmk1.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdt72pmk1.scala:16:26 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                   ^\e[0m\n\e[31m   |\e[0m                          Found:  \
    \  (a : Long)\n\e[31m   |\e[0m                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdt72pmk1.scala:16:29 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                      ^\e[0m\n\e[31m   |\e[0m                             Found:\
    \    (b : Long)\n\e[31m   |\e[0m                             Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odd = a to b by 1\n        evens ++ odd\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmfztzu5z.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odd\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val m = math.min(math.max(a, b), 1000000000000l)\n\
    \        val n = math.min(math.max(a, b), 1000000000000l)\n        val d = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val r = math.min(math.max(a, b), 1000000000000l)\n\
    \        val t = math.min(math.max(a, b), 1000000000000l)\n        val u = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val v = math.min(math.max(a, b), 1000000000000l)\n\
    \        val w = math.min(math.max(a, b), 1000000000000l)\n        val x = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val y = math.min(math.max(a, b), 1000000000000l)\n\
    \        val z = math.min(math.max(a, b), 1000000000000l)\n        val a = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val b = math.min(math.max(a, b), 1000000000000l)\n\
    \        val c = math.min(math.max(a, b), 1000000000000l)\n        val d = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val e = math.min(math.max(a, b), 1000000000000l)\n\
    \        val f = math.min(math.max(a, b), 1000000000000l)\n        val g = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val h = math.min(math.max(a, b), 1000000000000l)\n\
    \        val i = math.min(math.max(a, b), 1000000000000l)\n        val j = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val k = math.min(math.max(a, b), 1000000000000l)\n\
    \        val l = math.min(math.max(a, b), 1000000000000l)\n        val m = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val n = math.min(math.max(a, b), 1000000000000l)\n\
    \        val o = math.min(math.max(a, b), 1000000000000l)\n        val p = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val q = math.min(math.max(a, b), 1000000000000l)\n\
    \        val r = math.min(math.max(a, b), 1000000000000l)\n        val s = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val t = math.min(math.max(a, b), 1000000000000l)\n\
    \        val u = math.min(math.max(a, b), 1000000000000l)\n        val v = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val w = math.min(math.max(a, b), 1000000000000l)\n\
    \        val x = math.min(math.max(a, b), 1000000000000l)\n        val y = math.min(math.max(a,\
    \ b), 100\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppcnrhws3.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppcnrhws3.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36md\e[0m = math.min(math.max(a, b), \e[31m1000000000000l\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0md is already defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppcnrhws3.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = math.min(math.max(a, b), \e[31m1000000000000l\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppcnrhws3.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = math.min(math.max(a, b), \e[31m1000000000000l\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppcnrhws3.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mr\e[0m = math.min(math.max(a, b), \e[31m1000000000000l\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while(i <= j) {\n            val\
    \ remainder = i % 10\n            i /= 10\n            evens += remainder\n  \
    \          val remainder2 = i % 10\n            i /= 10\n            odd += remainder2\n\
    \            val remainder3 = i % 10\n            i /= 10\n            even +=\
    \ remainder3\n        }\n        evens.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjfullvk_.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd is already defined as \e[33mvalue\e[0m \e[35modd\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpjfullvk_.scala:14:20 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpjfullvk_.scala:15:18 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpjfullvk_.scala:16:19 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val temp = a\n        val temp2 =\
    \ b\n        while(temp != 0 || temp2 != 0) {\n            val temp3 = temp %\
    \ 10\n            val temp4 = temp2 % 10\n            list.add(temp3)\n      \
    \      list.add(temp4)\n            temp /= 10\n            temp2 /= 10\n    \
    \    }\n        list.sortWith((a, b) => a < b)\n        list.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1mrcxg95.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1mrcxg95.scala:22:17\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            temp /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value /= is not a member of Long - did you mean temp.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp1mrcxg95.scala:23:18 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            temp2 /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean temp2.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val start = a\n        val end = b\n\
    \        while(start < end) {\n            val digit = start.toString.toInt\n\
    \            val nextDigit = start.toString.toInt\n            if(digit % 2 ==\
    \ 0) {\n                result.add(digit)\n                start = nextDigit\n\
    \            } else {\n                start = nextDigit\n            }\n    \
    \    }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpof_ftak8.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpof_ftak8.scala:22:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                start\
    \ = nextDigit\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                Reassignment to val start\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpof_ftak8.scala:24:22 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                start = nextDigit\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val start\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).iterator\n        while (range.hasNext) {\n \
    \           val n = range.next\n            if (n % 2 == 0) {\n              \
    \  evens += n\n            } else {\n                odds += n\n            }\n\
    \        }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbv9l0yq6.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbv9l0yq6.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbv9l0yq6.scala:16:26 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).iterator\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbv9l0yq6.scala:16:29\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b).iterator\n\e[31m\e[31m   |\e[0m                            \
    \ ^\e[0m\n\e[31m   |\e[0m                             Found:    (b : Long)\n\e\
    [31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val n = math.max(math.abs(a), math.abs(b))\n\
    \        val m = math.min(math.abs(a), math.abs(b))\n        val d = math.min(m,\
    \ n)\n        var i = 0\n        while (i < d) {\n            val x = math.min(math.abs(a),\
    \ math.abs(b))\n            val y = math.min(math.abs(a), math.abs(b))\n     \
    \       val z = math.min(math.abs(a), math.abs(b))\n            val w = math.min(math.abs(a),\
    \ math.abs(b))\n            val t = math.min(math.abs(a), math.abs(b))\n     \
    \       val u = math.min(math.abs(a), math.abs(b))\n            val v = math.min(math.abs(a),\
    \ math.abs(b))\n            val w = math.min(math.abs(a), math.abs(b))\n     \
    \       val x = math.min(math.abs(a), math.abs(b))\n            val y = math.min(math.abs(a),\
    \ math.abs(b))\n            val z = math.min(math.abs(a), math.abs(b))\n     \
    \       val w = math.min(math.abs(a), math.abs(b))\n            val t = math.min(math.abs(a),\
    \ math.abs(b))\n            val u = math.min(math.abs(a), math.abs(b))\n     \
    \       val v = math.min(math.abs(a), math.abs(b))\n            val w = math.min(math.abs(a),\
    \ math.abs(b))\n            val x = math.min(math.abs(a), math.abs(b))\n     \
    \       val y = math.min(math.abs(a), math.abs(b))\n            val z = math.min(math.abs(a),\
    \ math.abs(b))\n            val w = math.min(math.abs(a), math.abs(b))\n     \
    \       val t = math.min(math.abs(a), math.abs(b))\n            val u = math.min(math.abs(a),\
    \ math.abs(b))\n            val v = math.min(math.abs(a), math.abs(b))\n     \
    \       val w = math.min(math.abs(a), math.abs(b))\n            val x = math.min(math.abs(a),\
    \ math.abs(b))\n            val y = math.min(math.abs(a), math.abs(b))\n     \
    \       val z = math.min(math.abs(a), math.abs(b))\n            val w = math.min(math.abs(a),\
    \ math.abs(b))\n            val t = math.min(math.abs(a), math.abs(b))\n     \
    \       val u = math.min(math.abs(a), math.abs(b))\n            val v = math.min(math.abs(a),\
    \ math.abs(b))\n            val w = math.min(math.abs(a), math.abs(b))\n     \
    \       val x = math.min(math.abs(a), math.abs(b))\n            val y = math.min(math.abs(a),\
    \ math.abs(b))\n            val z = math.min(math.abs(a), math.abs(b))\n     \
    \       val w = \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpr_2esbvp.scala:55:19 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m            \e[33mval\e[0m \e[36mw\e[0m = \n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpr_2esbvp.scala:65:0 ----------------------------\e[0m\e[0m\n\e[31m65\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr_2esbvp.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr_2esbvp.scala:27:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e\
    [0m \e[36mw\e[0m = math.min(math.abs(a), math.abs(b))\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mw\
    \ is already defined as \e[33mvalue\e[0m \e[35mw\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr_2esbvp.scala:28:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e\
    [0m \e[36mx\e[0m = math.min(math.abs(a), math.abs(b))\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mx\
    \ is already defined as \e[33mvalue\e[0m \e[35mx\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr_2esbvp.scala:29:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e\
    [0m \e[36my\e[0m = math.min(math.abs(a), math.abs(b))\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        evens ++ odds\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgj7xf_6i.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val current = range.next\n            if (current % 2 == 0) {\n     \
    \           evens += current.toLong\n            } else {\n                odds\
    \ += current.toLong\n            }\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpszog2ob5.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpszog2ob5.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -1\n        evens ++ odds\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpve1xuzxy.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b by 2\n        val odd = b until a by 2\n        evens ++ odd\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxz69m4q3.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odd\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.sortWith(_ < _)\n        val evensSorted\
    \ = evensSorted.toList\n        val evensSorted = evensSorted.filter(_ % 2 ==\
    \ 0)\n        evensSorted.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpetc4na_d.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpetc4na_d.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val start = 0\n        val end = a.toInt\n\
    \        while (start < end) {\n            val mid = (start + end) / 2\n    \
    \        if (mid % 2 == 0) {\n                result.append((mid.toLong))\n  \
    \              start = mid + 1\n            } else {\n                end = mid\n\
    \            }\n        }\n        if (result.isEmpty) {\n            result.append((b.toLong))\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl7x0gbla.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpl7x0gbla.scala:21:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                start\
    \ = mid + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val start\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpl7x0gbla.scala:23:20 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                end = mid\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val\
    \ end\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        var i = a\n        var\
    \ j = b\n        while(i <= j) {\n            val remainder = i % 10\n       \
    \     evens += remainder\n            i += 10\n            val remainder2 = j\
    \ % 10\n            odds += remainder2\n            j += 10\n        }\n     \
    \   while(evens.nonEmpty) {\n            val num = evens.takeWhile(_ < b).last\n\
    \            nums += num\n        }\n        while(odds.nonEmpty) {\n        \
    \    val num = odds.takeWhile(_ < b).last\n            nums += num\n        }\n\
    \        nums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sbwg33u.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7sbwg33u.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7sbwg33u.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = mutable.ListBuffer[Long]()\n        val range = (a to b).iterator\n      \
    \  while (range.hasNext) {\n            val current = range.next\n           \
    \ if (current % 2 == 0) {\n                result += current\n            }\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfsj1dtvl.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val x = a / b\n        val y = a % b\n\
    \        val z = b / x\n        val w = b % x\n        val a = x / z\n       \
    \ val b = x % z\n        val c = y / w\n        val d = y % w\n        val e =\
    \ z / d\n        val f = z %d\n        val g = w / f\n        val h = w % f\n\
    \        val i = a / h\n        val j = a % h\n        val k = b / j\n       \
    \ val l = b % j\n        list += x\n        list += y\n        list += z\n   \
    \     list += w\n        list += a\n        list += b\n        list += c\n   \
    \     list += d\n        list += e\n        list += f\n        list += g\n   \
    \     list += h\n        list += i\n        list += j\n        list += k\n   \
    \     list += l\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg5ap4j67.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpg5ap4j67.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = x / z\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjdjessj_.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjdjessj_.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdjessj_.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjdjessj_.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdjessj_.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is alread"
  stdout: ''
  timestamp: 1659797590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val remainder = a % b\n        val\
    \ remainder2 = remainder / b\n        val remainder3 = remainder2 / b\n      \
    \  val remainder4 = remainder3 / b\n        val remainder5 = remainder4 / b\n\
    \        val remainder6 = remainder5 / b\n        val remainder7 = remainder6\
    \ / b\n        val remainder8 = remainder7 / b\n        val remainder9 = remainder8\
    \ / b\n        val remainder10 = remainder9 / b\n        val remainder11 = remainder10\
    \ / b\n        val remainder12 = remainder11 / b\n        val remainder13 = remainder12\
    \ / b\n        val remainder14 = remainder13 / b\n        val remainder15 = remainder14\
    \ / b\n        val remainder16 = remainder15 / b\n        val remainder17 = remainder16\
    \ / b\n        val remainder18 = remainder17 / b\n        val remainder19 = remainder18\
    \ / b\n        val remainder20 = remainder19 / b\n        val remainder21 = remainder20\
    \ / b\n        val remainder22 = remainder21 / b\n        val remainder23 = remainder22\
    \ / b\n        val remainder24 = remainder23 / b\n        val remainder25 = remainder24\
    \ / b\n        val remainder26 = remainder25 / b\n        val remainder27 = remainder26\
    \ / b\n        val remainder28 = remainder27 / b\n        val remainder29 = remainder28\
    \ / b\n        val remainder30 = remainder29 / b\n        val remainder31 = remainder30\
    \ / b\n        val remainder32 = remainder31 / b\n        val remainder33 = remainder32\
    \ / b\n        val remainder34 = remainder33 / b\n        val remainder35 = remainder34\
    \ / b\n        val remainder36 = remainder35 / b\n        val remainder37 = remainder36\
    \ / b\n        val remainder38 = remainder37 / b\n        val remainder39 = remainder38\
    \ / b\n        val remainder40 = remainder39 / b\n        val remainder41 = remainder40\
    \ / b\n        val remainder42 = remainder41 / b\n        val remainder43 = remainder42\
    \ / b\n\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp555ev8v1.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp555ev8v1.scala:59:5\
    \ ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b - 1)\n        val odds = b until (a - 1)\n        evens ++ odds\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeao6pdwh.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        var i = a\n        var j = b\n       \
    \ while (i <= j) {\n            val temp = i\n            i = i + 1\n        \
    \    j = j - 1\n            if (i % 2 == 0) {\n                list = list :+\
    \ temp\n            }\n        }\n        list.sort\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp88x3btkq.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp88x3btkq.scala:22:21 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                list = list :+ temp\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val list\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        val evensSet = evens.toSet\n\
    \        val oddsSet = odds.toSet\n        val evensSetList = evens.toList\n \
    \       val oddsSetList = odds.toList\n        val evensSetList2 = evensSetList.map(_.toLong)\n\
    \        val oddsSetList2 = oddsSetList.map(_.toLong)\n        val evensSetList3\
    \ = evensSetList2.map(_.toLong)\n        val oddsSetList3 = oddsSetList2.map(_.toLong)\n\
    \        val evensSetList4 = evensSetList3.map(_.toLong)\n        val oddsSetList4\
    \ = oddsSetList3.map(_.toLong)\n        val evensSetList5 = evensSetList4.map(_.toLong)\n\
    \        val oddsSetList5 = oddsSetList4.map(_.toLong)\n        val evensSetList6\
    \ = evensSetList5.map(_.toLong)\n        val oddsSetList6 = oddsSetList5.map(_.toLong)\n\
    \        val evensSetList7 = evensSetList6.map(_.toLong)\n        val oddsSetList7\
    \ = oddsSetList6.map(_.toLong)\n        val evensSetList8 = evensSetList7.map(_.toLong)\n\
    \        val oddsSetList8 = oddsSetList7.map(_.toLong)\n        val evensSetList9\
    \ = evensSetList8.map(_.toLong)\n        val oddsSetList9 = oddsSetList8.map(_.toLong)\n\
    \        val evensSetList10 = evensSetList9.map(_.toLong)\n        val oddsSetList10\
    \ = oddsSetList9.map(_.toLong)\n        val evensSetList11 = evensSetList10.map(_.toLong)\n\
    \        val oddsSetList11 = oddsSetList10.map(_.toLong)\n        val evensSetList12\
    \ = evensSetList11.map(_.toLong)\n        val oddsSetList12 = oddsSetList11.map(_.toLong)\n\
    \        val evensSetList13 = evensSetList12.map(_.toLong)\n        val oddsSetList13\
    \ = oddsSetList12.map(_.toLong)\n        val evensSetList14 = evensSetList13.map(_.toLong)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo2g_z5bx.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b filter (_ % 2 == 0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        evensSorted.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp1hni1ow.scala:20)\n\tat Problem.main(tmpp1hni1ow.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to (b+1)\n        evens.filter(x => x % 2 ==\
    \ 0).sortBy(x => x).takeWhile(x => x < b).map(x => x.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplscpxcmb.scala:16:78\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sortBy(\e[36mx\e[0m => x).takeWhile(\e\
    [36mx\e[0m => x < b).map(\e[36mx\e[0m => x.toLong)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to (b+1)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val oddsSorted = odds.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.map(_.toLong).toList\n        val oddsSortedList = oddsSorted.map(_.toLong).toList\n\
    \        val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedList.size\n\
    \        val oddsSortedListLength = oddsSortedList.size\n        val evensSortedListLength\
    \ = evensSortedList.size\n        val oddsSortedListLength = oddsSortedList.size\n\
    \        val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedList.size\n\
    \        val oddsSortedListLength = oddsSortedList.size\n        val evensSortedListLength\
    \ = evensSortedList.size\n        val oddsSortedListLength = oddsSortedList.size\n\
    \        val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedList.size\n\
    \        val oddsSortedListLength = oddsSortedList.size\n        val evensSortedListLength\
    \ = evensSortedList.size\n        val oddsSortedListLength = oddsSortedList.size\n\
    \        val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedList.size\n\
    \        val oddsSortedListLength = oddsSortedList.size\n        val evensSortedListLength\
    \ = evensSortedList.size\n        val oddsSortedListLength = oddsSortedList.size\n\
    \        val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedList.size\n\
    \        val oddsSortedListLength = oddsSortedList.size\n        val evensSortedListLength\
    \ = evensSortedList.size\n        val oddsSortedListLength = oddsSortedList.size\n\
    \        val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedList.size\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp6n923rb_.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp6n923rb_.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6n923rb_.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36moddsSortedListLength\e[0m\
    \ = oddsSortedList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35moddsSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6n923rb_.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6n923rb_.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moddsSortedListLength\e[0m\
    \ = oddsSortedList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedListLength"
  stdout: ''
  timestamp: 1659797622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odd = a to b by -1\n        val evensAndOdd = evens\
    \ ++ odd\n        evensAndOdd.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx5720uei.scala:20)\n\tat Problem.main(tmpx5720uei.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val low = a\n        val high = b\n\
    \        while(low < high) {\n            val mid = (low + high) / 2\n       \
    \     val digit = math.pow(10, mid.toInt)\n            list += mid.toLong\n  \
    \          if(mid % 2 == 0) {\n                low = mid + 1\n            } else\
    \ {\n                high = mid - 1\n            }\n        }\n        list.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe8vm6gkz.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpe8vm6gkz.scala:22:20 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                low = mid + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val low\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpe8vm6gkz.scala:24:21\
    \ -----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                high\
    \ = mid - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val high\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        val evensSorted = evens.toList\n\
    \        val oddsSorted = odds.toList\n        val evensSortedSorted: Seq[Long]\
    \ = evensSorted.sortBy(_ % 2 == 0)\n        val oddsSortedSorted: Seq[Long] =\
    \ oddsSorted.sortBy(_ % 2 == 0)\n        val evensSortedSortedSorted: Seq[Long]\
    \ = evensSortedSorted.sortBy(_ % 2 == 0)\n        val oddsSortedSortedSorted:\
    \ Seq[Long] = oddsSortedSorted.sortBy(_ % 2 == 0)\n        val evensSortedSortedSortedSorted:\
    \ Seq[Long] = evensSortedSortedSorted.sortBy(_ % 2 == 0)\n        val oddsSortedSortedSortedSorted:\
    \ Seq[Long] = oddsSortedSortedSorted.sortBy(_ % 2 == 0)\n        val evensSortedSortedSortedSortedSorted:\
    \ Seq[Long] = evensSortedSortedSortedSorted.sortBy(_ % 2 == 0)\n        val oddsSortedSortedSortedSortedSorted:\
    \ Seq[Long] = oddsSortedSortedSortedSorted.sortBy(_ % 2 == 0)\n        val evensSortedSortedSortedSortedSortedSorted:\
    \ Seq[Long] = evensSortedSortedSortedSortedSorted.sortBy(_ % 2 == 0)\n       \
    \ val oddsSortedSortedSortedSortedSortedSorted: Seq[Long] = oddsSortedSortedSortedSorted.sortBy(_\
    \ % 2 == 0)\n        val evensSortedSortedSortedSortedSortedSorted: Seq[Long]\
    \ = evensSortedSortedSortedSortedSorted.sortBy(_ % 2 == 0)\n        val oddsSortedSortedSortedSortedSortedSorted:\
    \ Seq[Long] = oddsSortedSortedSortedSorted.sortBy(_ % 2 == 0)\n        val evensSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Long] = evensSortedSortedSortedSortedSorted.sortBy(_ % 2 == 0)\n       \
    \ val oddsSortedSortedSortedSortedSortedSortedSorted: Seq[Long] = oddsSortedSortedSortedSorted.sortBy(_\
    \ % 2 == 0)\n        val evensSortedSortedSortedSortedSortedSortedSorted: Seq[Long]\
    \ = evensSortedSortedSortedSortedSorted.sortBy(_ % 2 == 0)\n        val oddsSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Long] = oddsSortedSortedSortedSorted.sortBy(_ % 2 == 0)\n        val evensSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Long] = evensSortedSortedSortedSortedSorted.sortBy(_ % 2 == \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpy2l4pmlv.scala:34:130 --------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSortedSortedSortedSortedSorted\e\
    [0m: \e[35mSeq\e[0m[\e[35mLong\e[0m] = evensSortedSortedSortedSortedSorted.sortBy(_\
    \ % \e[31m2\e[0m == \n\e[31m\e[31m   |\e[0m                                  \
    \                                                                            \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \      expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpy2l4pmlv.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSortedSortedSorted\e\
    [0m: \e[35mSeq\e[0m[\e[35mLong\e[0m] = evensSortedSortedSortedSortedSorted.sortBy(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSortedSortedSorted is already defined\
    \ as \e[33mvalue\e[0m \e[35mevensSortedSortedSortedSortedSortedSorted\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpy2l4pmlv.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36moddsSortedSortedSortedSortedSortedSorted\e\
    [0m: \e[35mSeq\e[0m[\e[35mLong\e[0m] = oddsSortedSortedSortedSorted.sortBy(_ %\
    \ \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedSortedSortedSortedSortedSorted is already defined\
    \ as \e[33mvalue\e[0m \e[35moddsSortedSortedSortedSortedSortedSorted\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpy2l4pmlv.sca"
  stdout: ''
  timestamp: 1659797626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b - 1)\n        val odds = b until (a - 1)\n        evens.filter(_\
    \ % 2 == 0).sortBy(_ % 2).takeWhile(_ < b).reverse ++ odds.filter(_ % 2 == 1).sortBy(_\
    \ % 2).takeWhile(_ < a).reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpea86whhu.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(_ % \e\
    [31m2\e[0m == \e[31m0\e[0m).sortBy(_ % \e[31m2\e[0m).takeWhile(_ < b).reverse\
    \ ++ odds.filter(_ % \e[31m2\e[0m == \e[31m1\e[0m).sortBy(_ % \e[31m2\e[0m).takeWhile(_\
    \ < a).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjdjessj_.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjdjessj_.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdjessj_.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjdjessj_.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdjessj_.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is alread"
  stdout: ''
  timestamp: 1659797590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a.toString.takeWhile(_ % 2 == 0).sorted\n        val odds = b.toString.takeWhile(_\
    \ % 2 == 1).sorted\n        evens ++ odds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjnujij3q.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    String\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b - 2)\n        val odds = b until (a - 2)\n        evens ++ odds\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp518v7zgp.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while(range.hasNext) {\n     \
    \       val current = range.next\n            if(current % 2 == 0) {\n       \
    \         evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpimewvlbf.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpimewvlbf.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b by 2\n        val odds = a until b by 1\n        evens ++ odds\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ppsu1so.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b - 1) filter (_ % 2 == 0)\n        val odds = b until (a - 1) filter\
    \ (_ % 2 == 1)\n        evens ++ odds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgz93pmzi.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797625
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odd = b until a\n        odd.toList ++ evens.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc23al8ek.scala:19)\n\tat Problem.main(tmpc23al8ek.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.filter(x => x % 2 ==\
    \ 0).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppiqaykk6.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sorted\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:   \
    \ IndexedSeq[Long]\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.sortWith(_ < _)\n        val evensSorted\
    \ = evensSorted.toList\n        val evensSorted = evensSorted.filter(_ % 2 ==\
    \ 0)\n        evensSorted.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpetc4na_d.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpetc4na_d.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val even = a.toInt\n        val odd = b.toInt\n        while(even < odd)\
    \ {\n            evens += even\n            odd += 2\n        }\n        while(even\
    \ > odd) {\n            odds += odd\n            even -= 2\n        }\n      \
    \  evens.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgr3aitzk.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgr3aitzk.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpgr3aitzk.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            odd += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean odd.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgr3aitzk.scala:24:17\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            even -= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value -= is not a member of Int - did you mean even.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659797627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val numsEven = mutable.ListBuffer[Long]()\n\
    \        val numsOdd = mutable.ListBuffer[Long]()\n        val numsEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddOdd = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val\
    \ numsEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi2ru56tj.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi2ru56tj.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpi2ru56tj.scala:14:20 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpi2ru56tj.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpi2ru56tj.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpi2ru56tj.scala:17:23 -----"
  stdout: ''
  timestamp: 1659797626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odd = a until b by -1\n        odd.filter(_ % 2 ==\
    \ 0).reverse ++ evens\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptcup6z9i.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        odd.filter(_ % \e[31m2\e\
    [0m == \e[31m0\e[0m).reverse ++ evens\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val nums = Range(a, b).filter(x => x %\
    \ 2 == 0).map(x => x.toLong).toList\n        val evens = nums.filter(x => x %\
    \ 2 == 0)\n        val odds = nums.filter(x => x % 2 != 0)\n        evens.foreach(x\
    \ => list += x)\n        odds.foreach(x => list += x)\n        list.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2iw3q4hl.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2iw3q4hl.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = Range(a, b).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).map(\e[36mx\e[0m => x.toLong).toList\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (a : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2iw3q4hl.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e\
    [0m = Range(a, b).filter(\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).map(\e\
    [36mx\e[0m => x.toLong).toList\n\e[31m\e[31m   |\e[0m                        \
    \    ^\e[0m\n\e[31m   |\e[0m                            Found:    (b : Long)\n\
    \e[31m   |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b - 1)\n        val odds = b until (a - 1)\n        evens ++ odds\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeao6pdwh.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        while(i <= b) {\n            val remainder = i % 10\n\
    \            if(remainder == 0) {\n                evens += i\n            } else\
    \ {\n                odd += i\n            }\n            i /= 10\n        }\n\
    \        even.clear()\n        odd.clear()\n        evens += a\n        odd.add(a)\n\
    \        evens += b\n        odd.add(b)\n        evens += evens.toList\n     \
    \   odd.add(evens.toList)\n        evens += odd.toList\n        odd.add(odd.toList)\n\
    \        evens += evens.toList\n        odd.add(evens.toList)\n        evens +=\
    \ odd.toList\n        odd.add(odd.toList)\n        evens += evens.toList\n   \
    \     odd.add(evens.toList)\n        evens += odd.toList\n        odd.add(odd.toList)\n\
    \        evens += evens.toList\n        odd.add(evens.toList)\n        evens +=\
    \ odd.toList\n        odd.add(odd.toList)\n        evens += evens.toList\n   \
    \     odd.add(evens.toList)\n        evens += odd.toList\n        odd.add(odd.toList)\n\
    \        evens += evens.toList\n        odd.add(evens.toList)\n        evens +=\
    \ odd.toList\n        odd.add(odd.toList)\n        evens += evens.toList\n   \
    \     odd.add(evens.toList)\n        evens += odd.toList\n        odd.add(odd.toList)\n\
    \        evens += evens.toList\n        odd.add(evens.toList)\n        evens +=\
    \ odd.toList\n        odd.add(odd.toList)\n        evens += evens.toList\n   \
    \     odd.add(evens.toList)\n        evens += odd.toList\n        odd.add(odd.toList)\n\
    \        evens += evens.toList\n        odd.add(evens.toList)\n        evens +=\
    \ odd.toList\n        odd.add(odd.toList)\n        evens += evens.toList\n   \
    \     odd.add(evens.toList)\n        evens += odd.toList\n        odd.add(odd.toList)\n\
    \        evens += evens.toList\n        odd.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpssi29zui.scala:80:4 ----------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpssi29zui.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd is already defined as \e[33mvalue\e[0m \e[35modd\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpssi29zui.scala:14:20 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpssi29zui.scala:15:18 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpssi29zui.scala:16:19 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659797624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.filter(x => x % 2 ==\
    \ 0).sorted ++ odds.filter(x => x % 2 == 1).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp7od4ir1.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sorted ++ odds.filter(\e[36mx\e[0m =>\
    \ x % \e[31m2\e[0m == \e[31m1\e[0m).sorted\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.toList\n        val evensSortedListAsString = evensSortedList.mkString(\"\
    ,\")\n        val evensSortedListAsLong = evensSortedListAsString.toLong\n   \
    \     val evensSortedListAsLongList = evensSortedListAsLong.toList\n        val\
    \ evensSortedListAsLongListAsString = evensSortedListAsLongList.mkString(\",\"\
    )\n        val evensSortedListAsLongListAsLong = evensSortedListAsLongListAsString.toLong\n\
    \        val evensSortedListAsLongListAsLongList = evensSortedListAsLongListAsLong.toList\n\
    \        val evensSortedListAsLongListAsLongListAsString = evensSortedListAsLongListAsLongListAsString.toLong\n\
    \        val evensSortedListAsLongListAsLongListAsLong = evensSortedListAsLongListAsLongListAsLong.toList\n\
    \        val evensSortedListAsLongListAsLongListAsLongListAsString = evensSortedListAsLongListAsLongListAsLongListAsString.toLong\n\
    \        val evensSortedListAsLongListAsLongListAsLongListAsLong = evensSortedListAsLongListAsLongListAsLongListAsLongListAsString.toLong\n\
    \        val evensSortedListAsLongListAsLongListAsLongListAsLongListAsString =\
    \ evensSortedListAsLongListAsLongListAsLongListAsLongListAsLong.toLong\n     \
    \   val evensSortedListAsLongListAsLongListAsLongListAsLongListAsLong = evensSortedListAsLongListAsLongListAsLongListAsLongListAsLongListAsString.toLong\n\
    \        val evensSortedListAsLongListAsLongListAsLongListAsLongListAsLongListAsString\
    \ = evensSortedListAsLongListAsLongListAsLongListAsLongListAsLongListAsLongListAsString.toLong\n\
    \        val evensSortedListAsLongListAsLongListAsLongListAsLongListAsLongListAsLong\
    \ = evensSortedListAsLongListAsLongListAsLongListAsLongListAsLongListAsLongListAsString.toLong\n\
    \        val evensSortedListAsLongListAsLongListAsLongListAsLongListAsLongListAsLongListAsString\
    \ = evensSortedListAsLong\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv2h844p_.scala:19:62 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListAsLongList\e\
    [0m = evensSortedListAsLong.toList\n\e[31m\e[31m   |\e[0m                    \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toList\
    \ is not a member of Long - did you mean evensSortedListAsLong.toInt?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpv2h844p_.scala:23:58 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListAsLongListAsLongListAsString\e\
    [0m = evensSortedListAsLongListAsLongListAsString.toLong\n\e[31m\e[31m   |\e[0m\
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m  Recursive \e[33mvalue\e[0m \e[35mevensSortedListAsLongListAsLongListAsString\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv2h844p_.scala:24:56\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensSortedListAsLongListAsLongListAsLong\e[0m = evensSortedListAsLongListAsLongListAsLong.toList\n\
    \e[31m\e[31m   |\e[0m                                                        ^\e\
    [0m\n\e[31m   |\e[0m    Recursive \e[33mvalue\e[0m \e[35mevensSortedListAsLongListAsLongListAsLong\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv2h844p_.scala:25:68\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensSortedListAsLongListAsLongListAsLongListAsString\e[0m = evensSortedListAsLongListAsLongListAsLongListAsString.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mevensSortedListAsLongListAsLongListAsLongListAsString\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv2h844p_.scala:32:5\
    \ ---------------------\e[0"
  stdout: ''
  timestamp: 1659797628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = Range(a, b)\n        for(i <- range) {\n            if(i.toString.toLong\
    \ % 2 == 0) {\n                evens += i.toString.toLong\n            } else\
    \ {\n                odds += i.toString.toLong\n            }\n        }\n   \
    \     evens.toList ++ odds.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuqi51elh.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpuqi51elh.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpuqi51elh.scala:16:26 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuqi51elh.scala:16:29\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (b : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = a % 2\n        val odd = b % 2\n        val a = a / 2\n  \
    \      val b = b / 2\n        val c = a * b\n        val d = a * a + b * b\n \
    \       val e = a * a + b * b + c * c + d * d\n        val f = a * a + b * b +\
    \ c * c + d * d + e * e\n        val g = a * a + b * b + c * c + d * d + e * e\
    \ + f * f\n        val h = a * a + b * b + c * c + d * d + e * e + f * f + g *\
    \ g\n        val i = a * a + b * b + c * c + d * d + e * e + f * f + g * g + h\
    \ * h\n        val j = a * a + b * b + c * c + d * d + e * e + f * f + g * g +\
    \ h * h + i * i\n        val k = a * a + b * b + c * c + d * d + e * e + f * f\
    \ + g * g + h * h + i * i + j * j\n        val l = a * a + b * b + c * c + d *\
    \ d + e * e + f * f + g * g + h * h + i * i + j * j + k * k\n        val m = a\
    \ * a + b * b + c * c + d * d + e * e + f * f + g * g + h * h + i * i + j * j\
    \ + k * k + l * l\n        val n = a * a + b * b + c * c + d * d + e * e + f *\
    \ f + g * g + h * h + i * i + j * j + k * k + l * l + m * m\n        val o = a\
    \ * a + b * b + c * c + d * d + e * e + f * f + g * g + h * h + i * i + j * j\
    \ + k * k + l * l + m * m + n * n\n        val p = a * a + b * b + c * c + d *\
    \ d + e * e + f * f + g * g + h * h + i * i + j * j + k * k + l * l + m * m +\
    \ n * n + o * o\n        val q = a * a + b * b + c * c + d * d + e * e + f * f\
    \ + g * g + h * h + i * i + j * j + k * k + l * l + m * m + n * n + o * o + p\
    \ * p\n        val r = a * \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmph2i6lppl.scala:35:19 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = a * \n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmph2i6lppl.scala:14:20 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmph2i6lppl.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmph2i6lppl.scala:18:16 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = a / \e[31m2\e[0m\n\e[31m\e[31m \
    \  |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmph2i6lppl.scala:19:16 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = b / \e[31m2\e[0m\n\e[31m\e[31m \
    \  |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmph2i6lppl.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List"
  stdout: ''
  timestamp: 1659797628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val even\
    \ = a / 2\n        val odd = a % 2\n        val evens = generateIntegers(even,\
    \ b)\n        val odds = generateIntegers(odd, b)\n        evens ++ odds\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\
    \tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\
    \tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\
    \tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\
    \tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\
    \tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\
    \tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\
    \tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\
    \tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\
    \tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\
    \tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\
    \tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\
    \tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\
    \tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\
    \tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\
    \tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\
    \tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\
    \tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\
    \tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\
    \tat Problem$.generateIntegers(tmp9lmvkedl.scala:16)\n\tat Problem$.gen"
  stdout: ''
  timestamp: 1659797628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvr4x8nb6.scala:19)\n\tat Problem.main(tmpvr4x8nb6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x.toLong else odds += x.toLong)\n        evens.toList ++ odds.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp96byaj78.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp96byaj78.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp96byaj78.scala:16:26 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp96byaj78.scala:16:29\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (b : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val low = a\n        val high = b\n\
    \        while(low <= high) {\n            val mid = low + (high - low) / 2\n\
    \            val digit = math.pow(10, math.ceil(math.log(mid) / math.log(10)))\n\
    \            if(mid % 2 == 0) {\n                result.+=mid.toLong\n       \
    \     }\n            low = mid + 1\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnn5ky046.scala:21:28 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result.+=mid.toLong\n\e[31m\e[31m   |\e\
    [0m                            ^\e[0m\n\e[31m   |\e[0m                       \
    \     expression expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpnn5ky046.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpnn5ky046.scala:23:16\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            low = mid\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Reassignment to val low\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to (b+1)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val oddsSorted = odds.sortWith(_ < _)\n        evensSorted.takeWhile(_%2\
    \ == 0).reverse ++ oddsSorted.takeWhile(_%2 == 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmwvify4h.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        evensSorted.takeWhile(_%\e\
    [31m2\e[0m == \e[31m0\e[0m).reverse ++ oddsSorted.takeWhile(_%\e[31m2\e[0m ==\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val n = math.min(a, b)\n        val d\
    \ = math.max(a, b)\n        val m = math.min(d, n)\n        val r = math.max(d,\
    \ n)\n        val q = math.min(d, r)\n        val t = math.max(d, r)\n       \
    \ val u = math.min(d, q)\n        val v = math.max(d, q)\n        val w = math.min(d,\
    \ t)\n        val x = math.max(d, t)\n        val y = math.min(d, u)\n       \
    \ val z = math.max(d, u)\n        val a = math.min(d, v)\n        val b = math.max(d,\
    \ v)\n        val c = math.min(d, w)\n        val d = math.max(d, w)\n       \
    \ val e = math.min(d, x)\n        val f = math.max(d, x)\n        val g = math.min(d,\
    \ y)\n        val h = math.max(d, y)\n        val i = math.min(d, z)\n       \
    \ val j = math.max(d, z)\n        val k = math.min(d, a)\n        val l = math.max(d,\
    \ a)\n        val m = math.min(d, b)\n        val n = math.max(d, b)\n       \
    \ val o = math.min(d, c)\n        val p = math.max(d, c)\n        val q = math.min(d,\
    \ d)\n        val r = math.max(d, d)\n        val s = math.min(d, e)\n       \
    \ val t = math.max(d, e)\n        val u = math.min(d, f)\n        val v = math.max(d,\
    \ f)\n        val w = math.min(d, g)\n        val x = math.max(d, g)\n       \
    \ val y = math.min(d, h)\n        val z = math.max(d, h)\n        val a = math.min(d,\
    \ i)\n        val b = math.max(d, i)\n        val c = math.min(d, j)\n       \
    \ val d = math.max(d, j)\n        val e = math.min(d, k)\n        val f = math.max(d,\
    \ k)\n        val g = math.min(d, l)\n        val h = math.max(d, l)\n       \
    \ val i = math.min(d, m)\n        val j = math.max(d, m)\n        val k = math.min(d,\
    \ n)\n        val l = math.max(d, n)\n        val m = math.min(d, o)\n       \
    \ val n = math.max(d, o)\n        val o = math.min(d, p)\n        val p = math.max(d,\
    \ p)\n        val q = math.min(d, q)\n        val r = math.max(d, q)\n       \
    \ val s = math.min(d, r)\n        val t = math.max(d, r)\n        val u = math.min(d,\
    \ s)\n        val v = math.max(d, s)\n        val w = math.min(d, t)\n       \
    \ val x = math.max(d, t)\n        val y = math.min(d, \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv3v4eio1.scala:78:4 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv3v4eio1.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36md\e[0m = math.max(d, w)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0md is already defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv3v4eio1.scala:39:12 ---------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.min(d, b)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpv3v4eio1.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = math.max(d, b)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is\
    \ already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv3v4eio1.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mq\e[0m = math.min(d, d)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mq is already defined as \e[33mvalue\e[0m \e[35mq\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv3v4eio1.scala:44:12 ---------------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = math.max(d, d)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n"
  stdout: ''
  timestamp: 1659797629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val temp = a\n        while(temp <=\
    \ b) {\n            val remainder = temp % 10\n            val digit = temp /\
    \ 10\n            list.+=digit\n            temp += 1\n        }\n        list.sortWith(_\
    \ < _)\n        list.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprlp3j5s0.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        val evensSet = evens.toSet\n\
    \        val oddsSet = odds.toSet\n        val evensSetSize = evensSet.size\n\
    \        val oddsSetSize = oddsSet.size\n        val evensSetIterator = evensSet.iterator\n\
    \        val oddsSetIterator = oddsSet.iterator\n        val evensSetIteratorSize\
    \ = evensSetIterator.size\n        val oddsSetIteratorSize = oddsSetIterator.size\n\
    \        val evensSetIteratorIterator = evensSetIterator.iterator\n        val\
    \ oddsSetIteratorIterator = oddsSetIterator.iterator\n        val evensSetIteratorIteratorSize\
    \ = evensSetIteratorIterator.size\n        val oddsSetIteratorIteratorSize = oddsSetIteratorIterator.size\n\
    \        val evensSetIteratorIteratorIterator = evensSetIteratorIterator.iterator\n\
    \        val oddsSetIteratorIteratorIterator = oddsSetIteratorIterator.iterator\n\
    \        val evensSetIteratorIteratorIteratorSize = evensSetIteratorIteratorIterator.size\n\
    \        val oddsSetIteratorIteratorIteratorSize = oddsSetIteratorIteratorIterator.size\n\
    \        val evensSetIteratorIteratorIteratorIterator = evensSetIteratorIteratorIterator.iterator\n\
    \        val oddsSetIteratorIteratorIteratorIterator = oddsSetIteratorIteratorIterator.iterator\n\
    \        val evensSetIteratorIteratorIteratorIteratorSize = evensSetIteratorIteratorIteratorIterator.size\n\
    \        val oddsSetIteratorIteratorIteratorIteratorSize = oddsSetIteratorIteratorIteratorIterator.size\n\
    \        val evensSetIteratorIteratorIteratorIteratorIterator = evensSetIteratorIteratorIteratorIterator.iterator\n\
    \        val oddsSetIteratorIteratorIteratorIteratorIterator = oddsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val evensSetIteratorIteratorIteratorIteratorIteratorSize = evensSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val oddsSetIteratorIteratorIteratorIteratorIteratorSize = oddsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val evensSetIteratorIteratorIteratorIteratorIteratorIterator = evensSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val oddsSetIteratorIteratorIteratorIteratorIteratorIterator = oddsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val evensSetIteratorIteratorIteratorIteratorIteratorIteratorSize = evensSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val oddsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = oddsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val evensSetIteratorIteratorIteratorIteratorIterator\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpem15xiiz.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpem15xiiz.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a / 2\n        val odds = a % 2\n        val evensBetween = b % 2\n      \
    \  val oddsBetween = b % 2\n        val evensBetweenList = List(evensBetween.toLong)\n\
    \        val oddsBetweenList = List(oddsBetween.toLong)\n        val evensBetweenList2\
    \ = List(evensBetween.toLong)\n        val oddsBetweenList2 = List(oddsBetween.toLong)\n\
    \        val evensBetweenList3 = List(evensBetween.toLong)\n        val oddsBetweenList3\
    \ = List(oddsBetween.toLong)\n        val evensBetweenList4 = List(evensBetween.toLong)\n\
    \        val oddsBetweenList4 = List(oddsBetween.toLong)\n        val evensBetweenList5\
    \ = List(evensBetween.toLong)\n        val oddsBetweenList5 = List(oddsBetween.toLong)\n\
    \        val evensBetweenList6 = List(evensBetween.toLong)\n        val oddsBetweenList6\
    \ = List(oddsBetween.toLong)\n        val evensBetweenList7 = List(evensBetween.toLong)\n\
    \        val oddsBetweenList7 = List(oddsBetween.toLong)\n        val evensBetweenList8\
    \ = List(evensBetween.toLong)\n        val oddsBetweenList8 = List(oddsBetween.toLong)\n\
    \        val evensBetweenList9 = List(evensBetween.toLong)\n        val oddsBetweenList9\
    \ = List(oddsBetween.toLong)\n        val evensBetweenList10 = List(evensBetween.toLong)\n\
    \        val oddsBetweenList10 = List(oddsBetween.toLong)\n        val evensBetweenList11\
    \ = List(evensBetween.toLong)\n        val oddsBetweenList11 = List(oddsBetween.toLong)\n\
    \        val evensBetweenList12 = List(evensBetween.toLong)\n        val oddsBetweenList12\
    \ = List(oddsBetween.toLong)\n        val evensBetweenList13 = List(evensBetween.toLong)\n\
    \        val oddsBetweenList13 = List(oddsBetween.toLong)\n        val evensBetweenList14\
    \ = List(evensBetween.toLong)\n        val oddsBetweenList14 = List(oddsBetween.toLong)\n\
    \        val evensBetweenList15 = List(evensBetween.toLong)\n        val oddsBetweenList15\
    \ = List(oddsBetween.toLong)\n        val evensBetweenList16 = List(evensBetween.toLong)\n\
    \        val oddsBetweenList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyex0vodn.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyex0vodn.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
