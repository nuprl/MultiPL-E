name: HumanEval_47_median
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
  \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
  \    def median(l : List[Long]) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
  \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n  \
  \  assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
  \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
  \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
completions: ["        val n = l.length\n        val m = l.toArray\n        val sorted\
    \ = m.sortWith(_ < _)\n        val mid = sorted.length / 2\n        val median\
    \ = if (n % 2 == 0) sorted((mid + mid) / 2) else sorted((mid - mid) / 2)\n   \
    \     median.toFloat", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = (sorted take mid) match {\n            case Nil =>\
    \ 0.0f\n            case x :: xs => xs.sum / xs.length\n        }\n        median",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        if\
    \ (sorted.length % 2 == 0) sorted.last\n        else sorted.last.toFloat + sorted.last.toFloat\
    \ / 2", "        val sorted = l.sorted\n        val mid = sorted.length / 2\n\
    \        val median = sorted.take(mid).last\n        median.toFloat", "      \
    \  val n = l.length\n        if (n == 0) 0f\n        else {\n            val half\
    \ = n / 2\n            val left = l.take(half)\n            val right = l.drop(half)\n\
    \            val median = left.median + right.median\n            if (median ==\
    \ 0) 0f\n            else median.toFloat\n        }", "        val n = l.length\n\
    \        if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n      \
    \      val left = l.take(mid)\n            val right = l.drop(mid)\n         \
    \   val median = median(left) + median(right)\n            val diff = (median\
    \ * 2.0f) - (median * 1.0f)\n            if (diff > 0.0f) median else 0.0f\n \
    \       }", "        val sorted = l.sorted\n        val mid = sorted.length /\
    \ 2\n        val median = sorted.take(mid).last\n        val left = sorted.drop(mid)\n\
    \        val right = sorted.takeRight(mid)\n        val medianLeft = median(left)\n\
    \        val medianRight = median(right)\n        val medianMedian = median(List(medianLeft,\
    \ medianRight))\n        val medianMedianFloat = medianMedian.toFloat\n      \
    \  val medianMedianInt = medianMedianFloat.toInt\n        val medianMedianLong\
    \ = medianMedianInt.toLong\n        val medianMedianDouble = medianMedianLong.toDouble\n\
    \        val medianMedianFloatInt = medianMedianDouble.toInt\n        val medianMedianFloatLong\
    \ = medianMedianFloatInt.toLong\n        val medianMedianFloatDouble = medianMedianFloatLong.toDouble\n\
    \        val medianMedianFloatFloat = medianMedianFloatDouble.toFloat\n      \
    \  val medianMedianFloatFloatInt = medianMedianFloatFloat.toInt\n        val medianMedianFloatFloatLong\
    \ = medianMedianFloatFloatInt.toLong\n        val medianMedianFloatFloatDouble\
    \ = medianMedianFloatFloatLong.toDouble\n        val medianMedianFloatFloatFloat\
    \ = medianMedianFloatFloatDouble.toFloat\n        val medianMedianFloatFloatFloatInt\
    \ = medianMedianFloatFloatFloat.toInt\n        val medianMedianFloatFloatFloatLong\
    \ = medianMedianFloatFloatFloatInt.toLong\n        val medianMedianFloatFloatFloatDouble\
    \ = medianMedianFloatFloatFloatLong.toDouble\n        val medianMedianFloatFloatFloatFloat\
    \ = medianMedianFloatFloatFloatDouble.toFloat\n        val medianMedianFloatFloatFloatFloatInt\
    \ = medianMedianFloatFloatFloatFloat.toInt\n        val medianMedianFloatFloatFloatFloatLong\
    \ = medianMedianFloatFloatFloatFloatInt.toLong\n        val medianMedianFloatFloatFloatFloatDouble\
    \ = medianMedianFloatFloatFloatFloatLong.toDouble\n        val medianMedianFloatFloatFloatFloatFloat\
    \ = medianMedianFloatFloatFloatFloatDouble.toFloat\n        val medianMedianFloatFloatFloatFloatFloatInt\
    \ = medianMedianFloatFloatFloatFloatFloat.toInt\n        val medianMedianFloatFloatFloatFloatFloatLong\
    \ = medianMedianFloatFloatFloatFloatFloatFloatInt.toLong\n        val medianMedianFloatFloatFloatFloatFloatDouble\
    \ = medianMedianFloatFloatFloatFloatFloat", "        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = (sorted take mid) match\
    \ {\n            case Nil => 0.0f\n            case x :: xs => xs.sum / xs.length\n\
    \        }\n        median", "        val n = l.length\n        if (n < 2) 0.0f\n\
    \        else {\n            val mid = n / 2\n            val left = l.slice(0,\
    \ mid)\n            val right = l.slice(mid)\n            val median = median(left)\n\
    \            val median2 = median(right)\n            val median3 = median(left.zip(right))\n\
    \            val median4 = median(left.zip(right.zip(left)))\n            val\
    \ median5 = median(left.zip(right.zip(left.zip(right))))\n            val median6\
    \ = median(left.zip(right.zip(left.zip(right.zip(left)))))\n            val median7\
    \ = median(left.zip(right.zip(left.zip(right.zip(left.zip(right)))))\n       \
    \     val median8 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left)))))\n\
    \            val median9 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right)))))\n\
    \            val median10 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left)))))\n\
    \            val median11 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left)))))\n\
    \            val median12 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left))))))))\n\
    \            val median13 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left)))))))))))\n\
    \            val median14 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left)))))))))))\n\
    \            val median15 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left)))))))))))\n\
    \            val median16 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left)))))))))))\n\
    \            val median17 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left)))))))))))\n\
    \            val median18 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left)))))))))))\n\
    \            val median19 = median(left.zip(right.zip(left.zip(right.zip(left.zip(",
  "        val n = l.length\n        if (n <= 1) 0f\n        else {\n            val\
    \ mid = n / 2\n            val left = l.take(mid)\n            val right = l.drop(mid)\n\
    \            val leftMedian = median(left)\n            val rightMedian = median(right)\n\
    \            val median = (leftMedian + rightMedian) / 2\n            if (leftMedian\
    \ < rightMedian) median\n            else rightMedian\n        }", "        val\
    \ sorted = l.sorted\n        val mid = sorted.length / 2\n        val median =\
    \ if (sorted.length % 2 == 0) sorted.apply(mid) else (sorted.apply(mid) + sorted.apply(mid\
    \ - 1)).toFloat\n        median", "        val n = l.length\n        if (n < 2)\
    \ 0.0f\n        else {\n            val mid = l.length / 2\n            val m1\
    \ = l.slice(0, mid)\n            val m2 = l.slice(mid)\n            val m = (m1\
    \ + m2).sortWith(_ < _)\n            val midVal = m.last\n            val m1 =\
    \ m.drop(mid)\n            val m2 = m.take(mid)\n            val m = (m1 + m2).sortWith(_\
    \ < _)\n            val midVal2 = m.last\n            val m1 = m.drop(mid)\n \
    \           val m2 = m.take(mid)\n            val m = (m1 + m2).sortWith(_ < _)\n\
    \            val midVal3 = m.last\n            val m1 = m.drop(mid)\n        \
    \    val m2 = m.take(mid)\n            val m = (m1 + m2).sortWith(_ < _)\n   \
    \         val midVal4 = m.last\n            val m1 = m.drop(mid)\n           \
    \ val m2 = m.take(mid)\n            val m = (m1 + m2).sortWith(_ < _)\n      \
    \      val midVal5 = m.last\n            val m1 = m.drop(mid)\n            val\
    \ m2 = m.take(mid)\n            val m = (m1 + m2).sortWith(_ < _)\n          \
    \  val midVal6 = m.last\n            val m1 = m.drop(mid)\n            val m2\
    \ = m.take(mid)\n            val m = (m1 + m2).sortWith(_ < _)\n            val\
    \ midVal7 = m.last\n            val m1 = m.drop(mid)\n            val m2 = m.take(mid)\n\
    \            val m = (m1 + m2).sortWith(_ < _)\n            val midVal8 = m.last\n\
    \            val m1 = m.drop(mid)\n            val m2 = m.take(mid)\n        \
    \    val m = (m1 + m2).sortWith(_ < _)\n            val midVal9 = m.last\n   \
    \         val m1 = m.drop(mid)\n            val m2 = m.take(mid)\n           \
    \ val m = (m1 + m2).sortWith(_ < _)\n            val midVal10 = m.last\n     \
    \       val m1 = m.drop(mid)\n            val m2 = m.take(mid)\n            val\
    \ m = (m1 + m2).sortWith(_ < _)\n            val midVal11 = m.last\n         \
    \   val m1 = m.drop(mid)\n            val m2 = m.take(mid", "        val n = l.length\n\
    \        val m = l.toArray\n        val sorted = m.sortWith(_ < _)\n        val\
    \ half = n / 2\n        if (n % 2 == 0) sorted.last else (sorted take half).last\
    \ / 2", "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n \
    \           val mid = l.length / 2\n            val left = l.slice(0, mid)\n \
    \           val right = l.slice(mid)\n            val leftMedian = median(left)\n\
    \            val rightMedian = median(right)\n            val median = (leftMedian\
    \ + rightMedian) / 2\n            if (n == 1) median\n            else median\n\
    \        }", "        val sorted = l.sortWith(_ < _)\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        val leftMedian = sorted.take(mid)\n\
    \        val rightMedian = sorted.drop(mid)\n        val leftMedianMedian = leftMedian.last\n\
    \        val rightMedianMedian = rightMedian.last\n        val leftMedianMedianMedian\
    \ = leftMedianMedian.last\n        val rightMedianMedianMedian = rightMedianMedian.last\n\
    \        val leftMedianMedianMedianMedian = leftMedianMedianMedian.last\n    \
    \    val rightMedianMedianMedianMedian = rightMedianMedianMedian.last\n      \
    \  val leftMedianMedianMedianMedianMedian = leftMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedian = rightMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedian = leftMedianMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedianMedian = rightMedianMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedianMedian = leftMedianMedianMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedianMedian = rightMedianMedianMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedianMedian = leftMedianMedianMedianMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedianMedianMedian = rightMedianMedianMedianMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedianMedian = leftMedianMedianMedianMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedianMedianMedian = rightMedianMedianMedianMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedianMedian = leftMedianMe", " \
    \       val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = if (sorted.length % 2 == 0) sorted.apply(mid) else (sorted.apply(mid)\
    \ + sorted.apply(mid - 1)).toFloat\n        median", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median.toFloat", "        val n = l.length\n        val mid = n / 2\n\
    \        val left = l.take(mid)\n        val right = l.drop(mid)\n        val\
    \ midVal = left.reduce((x, y) => x + y)\n        val leftMedian = midVal / left.length\n\
    \        val rightMedian = midVal / right.length\n        math.max(leftMedian,\
    \ rightMedian)", "        val sorted = l.sortWith(_ < _)\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        median.toFloat", " \
    \       val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = if (sorted.length % 2 == 0) sorted.apply(mid) else sorted.apply(mid\
    \ - 1)\n        val lower = sorted.take(mid)\n        val upper = sorted.drop(mid)\n\
    \        val medianOfLower = median(lower)\n        val medianOfUpper = median(upper)\n\
    \        val medianOfBoth = median(sorted ++ List(medianOfLower, medianOfUpper))\n\
    \        medianOfBoth", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        val leftHalf = sorted.drop(mid)\n\
    \        val rightHalf = sorted.takeRight(mid)\n        val medianOfLeftHalf =\
    \ median(leftHalf)\n        val medianOfRightHalf = median(rightHalf)\n      \
    \  val medianOfBothHalfs = median(leftHalf ++ rightHalf)\n        val medianOfBothHalfsIfBothHalfsAreEven\
    \ = if (medianOfLeftHalf == medianOfRightHalf) medianOfBothHalfs else medianOfBothHalfs\n\
    \        val medianOfBothHalfsIfLeftHalfIsEven = if (medianOfLeftHalf == medianOfBothHalfs)\
    \ medianOfLeftHalf else medianOfBothHalfs\n        val medianOfBothHalfsIfRightHalfIsEven\
    \ = if (medianOfRightHalf == medianOfBothHalfs) medianOfRightHalf else medianOfBothHalfs\n\
    \        val medianOfBothHalfsIfBothHalfsAreOdd = if (medianOfLeftHalf == medianOfRightHalf)\
    \ medianOfBothHalfsIfBothHalfsAreEven else medianOfBothHalfsIfLeftHalfIsEven\n\
    \        val medianOfBothHalfsIfLeftHalfIsOdd = if (medianOfLeftHalf == medianOfBothHalfsIfBothHalfsAreEven)\
    \ medianOfLeftHalf else medianOfBothHalfsIfRightHalfIsEven\n        val medianOfBothHalfsIfRightHalfIsOdd\
    \ = if (medianOfRightHalf == medianOfBothHalfsIfBothHalfsAreEven) medianOfRightHalf\
    \ else medianOfBothHalfsIfLeftHalfIsEven\n        val medianOfBothHalfsIfBothHalfsAreEven\
    \ = if (medianOfLeftHalf == medianOfRightHalf) medianOfBothHalfsIfBothHalfsAreOdd\
    \ else medianOfBothHalfsIfLeftHalfIsOdd\n        val medianOfBothHalfsIfLeftHalfIsEven\
    \ = if (medianOfLeftHalf == medianOfBothHalfsIfBothHalfsAreOdd) medianOfLeftHalf\
    \ else medianOfBothHalfsIfRightHalfIsOdd\n        val medianOfBothHalfsIfRightHalfIsEven\
    \ = if (medianOfRightHalf == medianOfBothHalfsIfBothHalfsAreOdd) medianOfRightHalf\
    \ else medianOfBothHalfsIfLeftHalfIsOdd\n        ", "        val n = l.length\n\
    \        if (n <= 1) 0f\n        else {\n            val mid = n / 2\n       \
    \     val left = l.take(mid)\n            val right = l.drop(mid)\n          \
    \  val median = median(left) + median(right)\n            median.toFloat\n   \
    \     }", "        val sorted = l.sorted\n        val mid = sorted.length / 2\n\
    \        val median = sorted.take(mid).last\n        median", "        val n =\
    \ l.length\n        if (n < 2) 0.0f\n        else {\n            val mid = n /\
    \ 2\n            val left  = l.take(mid)\n            val right = l.drop(mid)\n\
    \            val median = median(left) + median(right)\n            median\n \
    \       }", "        val n = l.length\n        if (n < 2) 0f\n        else l.sorted\n\
    \            .take((n+1)/2)\n            .last\n            .init\n          \
    \  .last", "        val n = l.length\n        val mid = n / 2\n        val left\
    \ = l.take(mid)\n        val right = l.drop(mid)\n        val median = (left +\
    \ right).sortWith(_ < _).last\n        median.toFloat", "        val n = l.length\n\
    \        val m = l.foldLeft(0f){\n            case (acc, x) => if (x < 0) acc\
    \ + x else acc + x\n        }\n        m / n", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median.toFloat", "        val n = l.length\n        if (n < 2) 0.0f\n\
    \        else {\n            val mid = n / 2\n            val left = l.slice(0,\
    \ mid)\n            val right = l.slice(mid)\n            val median = (left +\
    \ right).sortWith(_ < _).last\n            median.toFloat\n        }", "     \
    \   val n = l.length\n        if (n < 2) 0.0f\n        else {\n            val\
    \ mid = l.length / 2\n            val left = l.slice(0, mid)\n            val\
    \ right = l.slice(mid)\n            val median = median(left) + median(right)\n\
    \            val medianFloat = median.toFloat\n            val medianInt = medianFloat.toInt\n\
    \            if (medianInt == 0) 0.0f\n            else medianFloat\n        }",
  "        val n = l.length\n        val m = l.toArray\n        val sorted = m.sortWith(_\
    \ < _)\n        val mid = sorted.length / 2\n        val median = if (sorted.length\
    \ % 2 == 0) sorted[mid] else (sorted[mid-1] + sorted[mid]) / 2\n        median.toFloat",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        val leftMedian = sorted.drop(mid).last\n\
    \        val rightMedian = sorted.take(mid).last\n        val leftMedianInt =\
    \ leftMedian.toInt\n        val rightMedianInt = rightMedian.toInt\n        val\
    \ medianInt = median.toInt\n        val leftMedianFloat = leftMedian.toFloat\n\
    \        val rightMedianFloat = rightMedian.toFloat\n        val medianFloat =\
    \ median.toFloat\n        val leftMedianDouble = leftMedian.toDouble\n       \
    \ val rightMedianDouble = rightMedian.toDouble\n        val medianDouble = median.toDouble\n\
    \        val leftMedianLong = leftMedian.toLong\n        val rightMedianLong =\
    \ rightMedian.toLong\n        val medianLong = median.toLong\n        val leftMedianInt\
    \ = leftMedian.toInt\n        val rightMedianInt = rightMedian.toInt\n       \
    \ val medianInt = median.toInt\n        val leftMedianFloat = leftMedian.toFloat\n\
    \        val rightMedianFloat = rightMedian.toFloat\n        val medianFloat =\
    \ median.toFloat\n        val leftMedianDouble = leftMedian.toDouble\n       \
    \ val rightMedianDouble = rightMedian.toDouble\n        val medianDouble = median.toDouble\n\
    \        val leftMedianLong = leftMedian.toLong\n        val rightMedianLong =\
    \ rightMedian.toLong\n        val medianLong = median.toLong\n        val leftMedianInt\
    \ = leftMedian.toInt\n        val rightMedianInt = rightMedian.toInt\n       \
    \ val medianInt = median.toInt\n        val leftMedianFloat = leftMedian.toFloat\n\
    \        val rightMedianFloat = rightMedian.toFloat\n        val medianFloat =\
    \ median.toFloat\n        val leftMedianDouble = leftMedian.toDouble\n       \
    \ val rightMedianDouble = rightMedian.toDouble\n        val medianDouble = median.toDouble\n\
    \        val leftMedianLong = leftMedian.toLong\n        val rightMedianLong =\
    \ rightMedian.toLong\n        val medianLong = median.toLong\n        val leftMedianInt\
    \ = leftMedian.toInt\n        val rightMedianInt = rightMedian.toInt\n       \
    \ val medianInt = median.toInt\n", "        val sorted = l.sorted\n        val\
    \ mid = sorted.length / 2\n        val median = sorted.take(mid).last\n      \
    \  val leftMedian = sorted.drop(mid)\n        val rightMedian = sorted.takeRight(mid)\n\
    \        val leftMedianMedian = leftMedian.last\n        val rightMedianMedian\
    \ = rightMedian.last\n        val leftMedianLeftMedian = leftMedian.drop(mid)\n\
    \        val rightMedianRightMedian = rightMedian.takeRight(mid)\n        val\
    \ leftMedianLeftMedianMedian = leftMedianLeftMedian.last\n        val rightMedianRightMedianMedian\
    \ = rightMedianRightMedian.last\n        val leftMedianLeftMedianLeftMedian =\
    \ leftMedianLeftMedian.drop(mid)\n        val rightMedianRightMedianLeftMedian\
    \ = rightMedianRightMedian.takeRight(mid)\n        val leftMedianLeftMedianLeftMedianMedian\
    \ = leftMedianLeftMedianLeftMedian.last\n        val rightMedianRightMedianLeftMedianMedian\
    \ = rightMedianRightMedianLeftMedian.last\n        val leftMedianLeftMedianLeftMedianMedianMedian\
    \ = leftMedianLeftMedianLeftMedianMedian.drop(mid)\n        val rightMedianRightMedianLeftMedianMedianMedian\
    \ = rightMedianRightMedianLeftMedianMedian.takeRight(mid)\n        val leftMedianLeftMedianLeftMedianMedianMedianMedian\
    \ = leftMedianLeftMedianLeftMedianMedianMedian.last\n        val rightMedianRightMedianLeftMedianMedianMedianMedian\
    \ = rightMedianRightMedianLeftMedianMedianMedian.last\n        val leftMedianLeftMedianLeftMedianMedianMedianMedianMedian\
    \ = leftMedianLeftMedianLeftMedianMedianMedianMedian.drop(mid)\n        val rightMedianRightMedianLeftMedianMedianMedianMedianMedian\
    \ = rightMedianRightMedianLeftMedianMedianMedianMedian.takeRight(mid)\n      \
    \  val leftMedianLeftMedianLeftMedianMedianMedianMedianMedianMedian = leftMedianLeftMedianLeftMedianMe",
  "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n           \
    \ val mid = n / 2\n            val left = new Array[Long](n)\n            val\
    \ right = new Array[Long](n)\n            System.arraycopy(l, 0, left, 0, mid)\n\
    \            System.arraycopy(l, mid, right, 0, n - mid)\n            val leftMedian\
    \ = median(left)\n            val rightMedian = median(right)\n            val\
    \ median = (leftMedian + rightMedian) / 2\n            median\n        }", " \
    \       val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        val left = sorted.drop(mid)\n      \
    \  val right = sorted.takeRight(mid)\n        if (left.isEmpty) median\n     \
    \   else if (right.isEmpty) median\n        else median", "        val n = l.length\n\
    \        val mid = n / 2\n        val left = l.take(mid)\n        val right =\
    \ l.drop(mid)\n        val median = (left + right).sortWith(_ < _).last\n    \
    \    median.toFloat", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        if (sorted.length % 2 == 0) sorted.apply(mid) else (sorted.apply(mid)\
    \ + sorted.apply(mid - 1)).toFloat", "        val sorted = l.sorted\n        val\
    \ mid = sorted.length / 2\n        val median = (sorted take mid).sum / mid\n\
    \        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val m1 = sorted.take(mid)\n        val m2 = sorted.drop(mid)\n\
    \        val median = (m1.sum + m2.sum) / 2\n        median", "        val sorted\
    \ = l.sorted\n        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftMedian = sorted.drop(mid).last\n        val rightMedian = sorted.take(mid).last\n\
    \        val medianOfLeftAndRight = leftMedian + rightMedian\n        val medianOfLeft\
    \ = leftMedian\n        val medianOfRight = rightMedian\n        val medianOfLeftAndRightAndMedian\
    \ = medianOfLeftAndRight + medianOfLeft + medianOfRight\n        medianOfLeftAndRightAndMedian",
  "        val n = l.length\n        val m = l.max\n        val median = (m + (n -\
    \ 1) / 2.0).toFloat\n        val sum = 0.0\n        for (i <- 0 until n) {\n \
    \           sum += l(i)\n        }\n        sum / n", "        val n = l.length\n\
    \        val m = l.foldLeft(0l){\n            (sum, e) => if (sum < e) sum else\
    \ e\n        }\n        val half = n / 2\n        val m1 = l.take(half)\n    \
    \    val m2 = l.drop(half)\n        val m = (m1 + m2).sortWith(_ < _)\n      \
    \  val m1 = m.head\n        val m2 = m.last\n        val m = (m1 + m2).sortWith(_\
    \ < _)\n        val m1 = m.head\n        val m2 = m.last\n        val m = (m1\
    \ + m2).sortWith(_ < _)\n        val m1 = m.head\n        val m2 = m.last\n  \
    \      val m = (m1 + m2).sortWith(_ < _)\n        val m1 = m.head\n        val\
    \ m2 = m.last\n        val m = (m1 + m2).sortWith(_ < _)\n        val m1 = m.head\n\
    \        val m2 = m.last\n        val m = (m1 + m2).sortWith(_ < _)\n        val\
    \ m1 = m.head\n        val m2 = m.last\n        val m = (m1 + m2).sortWith(_ <\
    \ _)\n        val m1 = m.head\n        val m2 = m.last\n        val m = (m1 +\
    \ m2).sortWith(_ < _)\n        val m1 = m.head\n        val m2 = m.last\n    \
    \    val m = (m1 + m2).sortWith(_ < _)\n        val m1 = m.head\n        val m2\
    \ = m.last\n        val m = (m1 + m2).sortWith(_ < _)\n        val m1 = m.head\n\
    \        val m2 = m.last\n        val m = (m1 + m2).sortWith(_ < _)\n        val\
    \ m1 = m.head\n        val m2 = m.last\n        val m = (m1 + m2).sortWith(_ <\
    \ _)\n        val m1 = m.head\n        val m2 = m.last\n        val m = (m1 +\
    \ m2).sortWith(_ < _)\n        val m1 = m.head\n        val m2 = m.last\n    \
    \    val m = (m1 + m2).sortWith(_ < _)\n        val m1 = m.head\n        val m2\
    \ = m.last\n        val m = (m1 + m2).sortWith(_ < _)\n        val m1 = m.head\n\
    \        val m2 = m.last\n        val m = (m1 + m2).sortWith(_ < _)\n        val ",
  "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n           \
    \ val mid = n / 2\n            val left = l.slice(0, mid)\n            val right\
    \ = l.slice(mid)\n            val median = (left + right).sortWith(_ < _).last\n\
    \            median.toFloat\n        }", "        val n = l.length\n        val\
    \ m = l.max\n        val median = (m + n) / 2\n        l.filter(_ < median).sum\
    \ / n", "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n \
    \           val mid = n / 2\n            val left = l.take(mid)\n            val\
    \ right = l.drop(mid)\n            val median = median(left) + median(right)\n\
    \            median.toFloat\n        }", "        val n = l.length\n        if\
    \ (n == 0) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ m1 = l.take(mid)\n            val m2 = l.drop(mid)\n            val m = (m1\
    \ + m2).sort\n            val m3 = m.length / 2\n            val m4 = m.take(m3)\n\
    \            val m5 = m.drop(m3)\n            val m6 = (m4 + m5).sort\n      \
    \      val m7 = m6.length / 2\n            val m8 = m6.take(m7)\n            val\
    \ m9 = m6.drop(m7)\n            val m10 = (m8 + m9).sort\n            val m11\
    \ = m10.length / 2\n            val m12 = m10.take(m11)\n            val m13 =\
    \ m10.drop(m11)\n            val m14 = (m12 + m13).sort\n            val m15 =\
    \ m14.length / 2\n            val m16 = m14.take(m15)\n            val m17 = m14.drop(m15)\n\
    \            val m18 = (m16 + m17).sort\n            val m19 = m18.length / 2\n\
    \            val m20 = m18.take(m19)\n            val m21 = m18.drop(m19)\n  \
    \          val m22 = (m20 + m21).sort\n            val m23 = m22.length / 2\n\
    \            val m24 = m22.take(m23)\n            val m25 = m22.drop(m23)\n  \
    \          val m26 = (m24 + m25).sort\n            val m27 = m26.length / 2\n\
    \            val m28 = m26.take(m27)\n            val m29 = m26.drop(m27)\n  \
    \          val m30 = (m28 + m29).sort\n            val m31 = m30.length / 2\n\
    \            val m32 = m30.take(m31)\n            val m33 = m30.drop(m31)\n  \
    \          val m34 = (m32 + m33).sort\n            val m35 = m34.length / 2\n\
    \            val m36 = m34.take(m35)\n            val m37 = m34.drop(m35)\n  \
    \          val m38 = (m36 + m37).sort\n            val m39 = m38.length / 2\n\
    \            val m40 = m38.take(m39)\n            val m41 = m38.drop(m39)\n  \
    \          val m42 = (m40 + m41).sort\n            val m43 = m42.length / 2\n\
    \            val m44 = m42.take(m4", "        val sorted = l.sorted\n        val\
    \ mid = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.last\n \
    \       else sorted.last.toFloat + sorted.last.toFloat / 2", "        val n =\
    \ l.length\n        if (n == 0) 0.0f\n        else {\n            val sorted =\
    \ l.sortWith(_ < _)\n            val mid = n / 2\n            val median = if\
    \ (n % 2 == 0) sorted.head + sorted.last else sorted.last\n            val lower\
    \ = sorted.take(mid)\n            val upper = sorted.drop(mid)\n            val\
    \ medianOfLower = median(lower)\n            val medianOfUpper = median(upper)\n\
    \            val medianOfBoth = median(lower ++ upper)\n            val medianOfBothInt\
    \ = medianOfBoth.asInstanceOf[Int]\n            val medianOfBothFloat = medianOfBoth.asInstanceOf[Float]\n\
    \            val medianOfBothLong = medianOfBoth.asInstanceOf[Long]\n        \
    \    val medianOfBothDouble = medianOfBoth.asInstanceOf[Double]\n            val\
    \ medianOfBothString = medianOfBoth.asInstanceOf[String]\n            val medianOfBothBoolean\
    \ = medianOfBoth.asInstanceOf[Boolean]\n            val medianOfBothChar = medianOfBoth.asInstanceOf[Char]\n\
    \            val medianOfBothAny = medianOfBoth.asInstanceOf[Any]\n          \
    \  val medianOfBothUnit = medianOfBoth.asInstanceOf[Unit]\n            val medianOfBothNull\
    \ = medianOfBoth.asInstanceOf[Null]\n            val medianOfBothUnitNull = medianOfBoth.asInstanceOf[Unit]\n\
    \            val medianOfBothNullUnitNull = medianOfBoth.asInstanceOf[Null]\n\
    \            val medianOfBothNullUnit = medianOfBoth.asInstanceOf[Unit]\n    \
    \        val medianOfBothNullUnitNullUnitNull = medianOfBoth.asInstanceOf[Null]\n\
    \            val medianOfBothNullUnitNullUnit = medianOfBoth.asInstanceOf[Unit]\n\
    \            val medianOfBothNullUnitNullUnitNullUnitNull = medianOfBoth.asInstanceOf[Null]\n\
    \            val medianOfBothNullUnitNullUnitNullUnitNullUnitNull = medianOfBoth.asInstanceOf[Null]\n\
    \            val medianOfBothNullUnitNullUnitNullUnitNullUnitNullUnitNull = medianOfBoth.asInstanceOf[Null]\n\
    \            val medianOfBothNullUnitNullUnitNullUnitNullUnitNullUnitNullUnitNull\
    \ = medianOfBoth.asInstanceOf[Null]\n            val medianOfBothNullUnitNullUnitNullUnitNullUnit",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = if (sorted.length % 2 == 0) sorted.apply(mid) else (sorted.apply(mid)\
    \ + sorted.apply(mid - 1)).toFloat\n        median", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = (sorted take mid).last\
    \ + sorted take mid.last\n        median.toFloat", "        val n = l.length\n\
    \        if (n == 0) 0.0f\n        else if (n % 2 == 0) (l.last + l.dropRight(1).last)\
    \ / 2l\n        else (l.last + l.dropRight(1).last) /2.0f", "        val n = l.length\n\
    \        if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n      \
    \      val left = l.take(mid)\n            val right = l.drop(mid)\n         \
    \   val median = median(left) + median(right)\n            median\n        }",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        median", "        val n = l.length\n\
    \        if (n < 2) 0.0f\n        else {\n            val half = n / 2\n     \
    \       val left = l.take(half)\n            val right = l.drop(half)\n      \
    \      val mid = left.length / 2\n            val median = if (left.length % 2\
    \ == 0) left.get(mid) else right.get(mid)\n            val medianFloat = median.toFloat\n\
    \            val diff = (n - half) * medianFloat\n            diff + medianFloat\n\
    \        }", "        val sorted = l.sorted\n        val middle = sorted.length\
    \ / 2\n        val median = sorted.take(middle).last\n        median", "     \
    \   val n = l.length\n        val m = l.max\n        val q = l.min\n        val\
    \ r = l.sum / n\n        val s = l.sum\n        val t = l.sum / n\n        val\
    \ u = (r + s) / 2\n        val v = (r - s) / 2\n        val w = v - u\n      \
    \  val x = u + w\n        val y = v + w\n        val z = v - w\n        val a\
    \ = x - y\n        val b = z - x\n        val c = y - z\n        val d = b * b\
    \ - 4 * a * c\n        if (d < 0)\n            throw new ArithmeticException(\"\
    Negative discriminant\")\n        if (d == 0)\n            return x\n        if\
    \ (d > 0)\n            return y\n        if (d == -1)\n            return z",
  "        val n = l.length\n        val m = l.toArray\n        val sorted = m.sortWith(_\
    \ < _)\n        val half = n / 2\n        if (n % 2 == 0) sorted.last else (sorted\
    \ take half).last + sorted.last", "        val sorted = l.sorted\n        val\
    \ mid = sorted.length / 2\n        val median = sorted.take(mid).last\n      \
    \  val left = sorted.drop(mid)\n        val right = sorted.takeRight(mid)\n  \
    \      val medianLeft = median(left)\n        val medianRight = median(right)\n\
    \        val medianMedian = median(sorted.take(mid))\n        val medianMedianLeft\
    \ = median(left.take(mid))\n        val medianMedianRight = median(right.take(mid))\n\
    \        val medianMedianMedian = median(sorted.takeRight(mid))\n        val medianMedianMedianLeft\
    \ = median(left.takeRight(mid))\n        val medianMedianMedianRight = median(right.takeRight(mid))\n\
    \        val medianMedianMedianMedian = median(sorted.drop(mid))\n        val\
    \ medianMedianMedianMedianLeft = median(left.drop(mid))\n        val medianMedianMedianMedianRight\
    \ = median(right.drop(mid))\n        val medianMedianMedianMedianMedian = median(sorted.take(mid))\n\
    \        val medianMedianMedianMedianLeft = median(left.take(mid))\n        val\
    \ medianMedianMedianMedianRight = median(right.take(mid))\n        val medianMedianMedianMedianMedian\
    \ = median(sorted.takeRight(mid))\n        val medianMedianMedianMedianLeft =\
    \ median(left.takeRight(mid))\n        val medianMedianMedianMedianRight = median(right.takeRight(mid))\n\
    \        val medianMedianMedianMedianMedian = median(sorted.drop(mid))\n     \
    \   val medianMedianMedianMedianLeft = median(left.drop(mid))\n        val medianMedianMedianMedianRight\
    \ = median(right.drop(mid))\n        val medianMedianMedianMedianMedian = median(sorted.take(mid))\n\
    \        val medianMedianMedianMedianLeft = median(left.take(mid))\n        val\
    \ medianMedianMedianMedianRight = median(right.take(mid))\n        val medianMedianMedianMedianMedian\
    \ = median(sorted.takeRight(mid))\n        val medianMedianMedianMedianLeft =\
    \ median(left.takeRight(mid))\n        val medianMedianMedianMedianRight = median(right.takeRight",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        median", "        val n = l.length\n\
    \        val mid = n / 2\n        val left = l.take(mid)\n        val right =\
    \ l.drop(mid)\n        val median = (left + right).sorted\n        val medianIndex\
    \ = median.indexWhere(_ > median(mid))\n        median(medianIndex)", "      \
    \  val n = l.length\n        if (n < 2) 0.0f\n        else {\n            val\
    \ mid = n / 2\n            val left = new Array[Long](n)\n            val right\
    \ = new Array[Long](n)\n            for (i <- 0 until n) {\n                left(i)\
    \ = l(i)\n                right(i) = (i + 1) % n\n            }\n            val\
    \ midVal = median(left)\n            val rightVal = median(right)\n          \
    \  val leftMedian = median(left).asInstanceOf[Float]\n            val rightMedian\
    \ = median(right).asInstanceOf[Float]\n            val median = midVal + rightVal\
    \ - leftMedian\n            median\n        }", "        val n = l.length\n  \
    \      val half = n / 2\n        if (n < 2) 0.0f\n        else {\n           \
    \ val m1 = l.slice(0, half)\n            val m2 = l.slice(half, half)\n      \
    \      val m3 = l.slice(half + 1, n)\n            val m4 = l.slice(0, half + 1)\n\
    \            val m5 = l.slice(half + 1, half + 1)\n            val m6 = l.slice(n\
    \ - 1, n - 1)\n            val m7 = l.slice(0, n - 1)\n            val m8 = l.slice(n\
    \ - 1, n)\n            val m9 = l.slice(0, half)\n            val m10 = l.slice(half,\
    \ half)\n            val m11 = l.slice(half + 1, n)\n            val m12 = l.slice(0,\
    \ half + 1)\n            val m13 = l.slice(half + 1, half + 1)\n            val\
    \ m14 = l.slice(n - 1, n - 1)\n            val m15 = l.slice(0, n - 1)\n     \
    \       val m16 = l.slice(n - 1, n)\n            val m17 = l.slice(0, half)\n\
    \            val m18 = l.slice(half, half)\n            val m19 = l.slice(half\
    \ + 1, n)\n            val m20 = l.slice(0, half + 1)\n            val m21 = l.slice(half\
    \ + 1, half + 1)\n            val m22 = l.slice(n - 1, n - 1)\n            val\
    \ m23 = l.slice(0, n - 1)\n            val m24 = l.slice(n - 1, n)\n         \
    \   val m25 = l.slice(0, half)\n            val m26 = l.slice(half, half)\n  \
    \          val m27 = l.slice(half + 1, n)\n            val m28 = l.slice(0, half\
    \ + 1)\n            val m29 = l.slice(half + 1, half + 1)\n            val m30\
    \ = l.slice(n - 1, n - 1)\n            val m31 = l.slice(0, n - 1)\n         \
    \   val m32 = l.slice(n - 1, n)\n            val m33 = l.slice(0, half)\n    \
    \        val m34 = l.slice(half, half)\n            val m35 = l.slice(half + 1,\
    \ n)\n            val m36 = l.slice(0, half + 1)\n            val m37 = l.slice(half\
    \ + 1, half + 1)\n            val m38 = l.slice(n - 1, n - 1)\n            val\
    \ m39 = l.slice(0, n - 1)\n            val m40 = l.slice(n - 1, n)\n         \
    \   val m41 = l.slice(0, half)\n            val m42 = l.slice(half, half)\n  \
    \          val m43 = l.slice(half + 1, n)\n            val m44 = l.slice(0, half\
    \ + 1)\n            val m45 = l.slice(half + 1, half + 1)\n            val m46\
    \ = l.slice(n - 1, ", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        val leftHalf = sorted.drop(mid)\n\
    \        val rightHalf = sorted.takeRight(mid)\n        val medianOfLeftHalf =\
    \ median(leftHalf)\n        val medianOfRightHalf = median(rightHalf)\n      \
    \  val medianOfBothHalfs = median(leftHalf ++ rightHalf)\n        val medianOfBothHalfsIfBothHalfsAreEven\
    \ = medianOfBothHalfs match {\n            case 0 => medianOfLeftHalf\n      \
    \      case 1 => medianOfRightHalf\n            case 2 => medianOfBothHalfs\n\
    \            case _ => medianOfBothHalfsIfBothHalfsAreEven\n        }\n      \
    \  val medianOfBothHalfsIfBothHalfsAreOdd = medianOfBothHalfs match {\n      \
    \      case 0 => medianOfRightHalf\n            case 1 => medianOfLeftHalf\n \
    \           case 2 => medianOfBothHalfs\n            case _ => medianOfBothHalfsIfBothHalfsAreOdd\n\
    \        }\n        val medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOdd =\
    \ medianOfBothHalfs match {\n            case 0 => medianOfLeftHalf\n        \
    \    case 1 => medianOfRightHalf\n            case 2 => medianOfBothHalfs\n  \
    \          case _ => medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOdd\n  \
    \      }\n        val medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreEven =\
    \ medianOfBothHalfs match {\n            case 0 => medianOfLeftHalf\n        \
    \    case 1 => medianOfRightHalf\n            case 2 => medianOfBothHalfs\n  \
    \          case _ => medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreEven\n \
    \       }\n        val medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreEvenIfBothHalfsAreOdd\
    \ = medianOfBothHalfs match {\n            case 0 => medianOfLeftHalf\n      \
    \      case 1 => medianOfRightHalf\n            case 2 => medianOfBothHalfs\n\
    \            case _ => medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreEvenIfBothHalfsAreOdd\n\
    \        }\n        val medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreEvenIfBothHalfsAreEven\
    \ = medianOfBothHalfs match {\n            case 0 => medianOfLeftHalf", "    \
    \    val sorted = l.sorted\n        val mid = sorted.length / 2\n        val left\
    \ = sorted.take(mid)\n        val right = sorted.drop(mid)\n        val median\
    \ = (left.length + right.length) / 2\n        val medianValue = if (median ==\
    \ 0) 0 else (left.sum + right.sum) / median\n        medianValue.toFloat", " \
    \       val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        median", "        val n = l.length\n\
    \        if (n <= 1) l.head\n        else {\n            val mid = n / 2\n   \
    \         val left = l.slice(0, mid)\n            val right = l.slice(mid)\n \
    \           val median = median(left) + median(right)\n            if (n % 2 ==\
    \ 0) median\n            else (median + l.last) / 2\n        }", "        val\
    \ sorted = l.sorted\n        val mid = sorted.length / 2\n        val median =\
    \ sorted.take(mid).last\n        median", "        val n = l.length\n        val\
    \ mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left + right).sorted.last\n        median.toFloat", " \
    \       val n = l.length\n        val m = l.toArray\n        val sorted = m.sortWith(_\
    \ < _)\n        val half = n / 2\n        if (n % 2 == 0) sorted.last else (sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted ", "        val n = l.length\n   \
    \     if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n         \
    \   val left = l.slice(0, mid)\n            val right = l.slice(mid)\n       \
    \     val median = median(left) + median(right)\n            median.toFloat\n\
    \        }", "        val n = l.length\n        val sorted = l.sorted\n      \
    \  val half = n / 2\n        if (n < 2) 0.0f\n        else if (n == 2) sorted.head\n\
    \        else sorted.head + half * (sorted.last - sorted.head)", "        val\
    \ n = l.length\n        if (n < 2) 0.0f\n        else {\n            val mid =\
    \ n / 2\n            val left = l.slice(0, mid)\n            val right = l.slice(mid)\n\
    \            val median = (left + right).sortWith(_ < _).last\n            median.toFloat\n\
    \        }", "        val sorted = l.sorted\n        val mid = sorted.length /\
    \ 2\n        val median = sorted.take(mid).last\n        val left  = sorted.drop(mid)\n\
    \        val right = sorted.takeRight(mid)\n        val leftMedian = median(left)\n\
    \        val rightMedian = median(right)\n        val medianOfMedians = leftMedian\
    \ + rightMedian\n        if (medianOfMedians == 0.0f) 0.0f else medianOfMedians",
  "        val n = l.length\n        val m = l.toArray\n        val sorted = m.sortWith(_\
    \ < _)\n        val half = n / 2\n        val median = if (n % 2 == 0) sorted.last\
    \ else sorted.last.last\n        val lower = sorted.take(half)\n        val upper\
    \ = sorted.drop(half)\n        val mid = if (n / 2 == 0) lower else upper\n  \
    \      val medianOfMiddle = if (n / 2 == 0) mid else mid.last\n        val medianOfAll\
    \ = if (n / 2 == 0) lower else upper.last\n        val medianOfAllAndMiddle =\
    \ if (n / 2 == 0) lower else upper.last.last\n        val medianOfAllAndMiddleAndLower\
    \ = if (n / 2 == 0) lower else upper.last.last.last\n        val medianOfAllAndMiddleAndLowerAndLower\
    \ = if (n / 2 == 0) lower else upper.last.last.last.last\n        val medianOfAllAndMiddleAndLowerAndLowerAndLower\
    \ = if (n / 2 == 0) lower else upper.last.last.last.last.last\n        val medianOfAllAndMiddleAndLowerAndLowerAndLowerAndLower\
    \ = if (n / 2 == 0) lower else upper.last.last.last.last.last.last\n        val\
    \ medianOfAllAndMiddleAndLowerAndLowerAndLowerAndLowerAndLower = if (n / 2 ==\
    \ 0) lower else upper.last.last.last.last.last.last.last\n        val medianOfAllAndMiddleAndLowerAndLowerAndLowerAndLowerAndLowerAndLower\
    \ = if (n / 2 == 0) lower else upper.last.last.last.last.last.last.last.last\n\
    \        val medianOfAllAndMiddleAndLowerAndLowerAndLowerAndLowerAndLowerAndLowerAndLower\
    \ = if (n / 2 == 0) lower else upper.last.last.last.last.last.last.last.last.last\n\
    \        val medianOfAllAndMiddleAndLowerAndLowerAndLowerAndLowerAndLowerAndLowerAndLowerAndLower\
    \ = if (n / 2 == 0) lower else upper.last.last.last.last.last.last.last.last.last.last\n\
    \        val medianOfAllAndMiddleAndLowerAndLowerAndLowerAndLowerAndLowerAndLowerAndLowerAndLowerAndLower\
    \ = if (n / 2 == 0) lower else upper.last.last.last.last.last.last.last.last.last.last.last\n\
    \        val median", "        val n = l.length\n        val m = l.toList.sortWith(_\
    \ < _).length\n        if (m % 2 == 0) l.toList.sortWith(_ < _).last.toFloat /\
    \ 2\n        else l.toList.sortWith(_ < _).last.toFloat / 2 + l.toList.sortWith(_\
    \ < _).last.toFloat / 2", "        val n = l.length\n        if (n < 2) 0.0f\n\
    \        else {\n            val mid = l.length / 2\n            val left = l.slice(0,\
    \ mid)\n            val right = l.slice(mid)\n            val m1 = median(left)\n\
    \            val m2 = median(right)\n            (m1 + m2) / 2\n        }", " \
    \       val n = l.length\n        if (n == 0) 0.0f\n        else {\n         \
    \   val mid = n / 2\n            val left = l.slice(0, mid)\n            val right\
    \ = l.slice(mid)\n            val median = median(left) + median(right)\n    \
    \        val medianFloat = median.toFloat\n            medianFloat\n        }",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = if (sorted.length % 2 == 0) sorted.apply(mid) else (sorted.apply(mid)\
    \ + sorted.apply(mid - 1)).toFloat\n        median", "        val n = l.length\n\
    \        if (n == 0) 0\n        else {\n            val mid = n / 2\n        \
    \    val left = l.slice(0, mid)\n            val right = l.slice(mid)\n      \
    \      val median = median(left) + median(right)\n            median\n       \
    \ }", "        val sorted = l.sorted\n        val mid = sorted.length / 2\n  \
    \      val median = sorted.take(mid).last\n        val left = sorted.drop(mid)\n\
    \        val right = sorted.take(mid)\n        val medianLeft = median(left)\n\
    \        val medianRight = median(right)\n        if (median < medianLeft) median\n\
    \        else if (median > medianRight) median\n        else (median + medianLeft)\
    \ / 2", "        val sorted = l.sorted\n        val half = sorted.length / 2\n\
    \        if (sorted.length % 2 == 0) sorted.last\n        else sorted.last.toFloat\
    \ + sorted.last.toFloat / 2", "        val n = l.length\n        if (n < 2) 0.0f\n\
    \        else {\n            val mid = n / 2\n            val m1 = l.slice(0,\
    \ mid)\n            val m2 = l.slice(mid)\n            val m = (m1 + m2).sortWith(_\
    \ < _)\n            val m3 = m.last\n            val m4 = m.init\n           \
    \ (m3 + m4) / 2\n        }", "        val n = l.length\n        if (n < 2) 0.0f\n\
    \        else {\n            val mid = n / 2\n            val left = l.take(mid)\n\
    \            val right = l.drop(mid)\n            val median = median(left) +\
    \ median(right)\n            median.toFloat\n        }", "        val n = l.length\n\
    \        if (n < 2) 0.0f\n        else {\n            val mid = l.length / 2\n\
    \            val l1 = l.take(mid)\n            val l2 = l.drop(mid)\n        \
    \    val m1 = median(l1)\n            val m2 = median(l2)\n            (m1 + m2)\
    \ / 2\n        }", "        val n = l.length\n        if (n < 2) 0.0f\n      \
    \  else {\n            val mid = n / 2\n            val left = l.slice(0, mid)\n\
    \            val right = l.slice(mid)\n            val median = median(left) +\
    \ median(right)\n            median\n        }", "        val n = l.length\n \
    \       val m = l.min\n        val median = (m + n) / 2\n        val half = n\
    \ / 2\n        val left = (0 until half).map(i => l(i)).sum\n        val right\
    \ = (half until n).map(i => l(i)).sum\n        val median1 = (left + right) /\
    \ 2\n        val median2 = if (n == 1) (l.head + l.last) else (l.head + l.last\
    \ + l.drop(1).sum) / 2\n        val median3 = if (n == 1) (l.head + l.last) else\
    \ (l.head + l.last + l.drop(2).sum) / 2\n        val median4 = if (n == 1) (l.head\
    \ + l.last) else (l.head + l.last + l.drop(3).sum) / 2\n        val median5 =\
    \ if (n == 1) (l.head + l.last) else (l.head + l.last + l.drop(4).sum) / 2\n \
    \       val median6 = if (n == 1) (l.head + l.last) else (l.head + l.last + l.drop(5).sum)\
    \ / 2\n        val median7 = if (n == 1) (l.head + l.last) else (l.head + l.last\
    \ + l.drop(6).sum) / 2\n        val median8 = if (n == 1) (l.head + l.last) else\
    \ (l.head + l.last + l.drop(7).sum) / 2\n        val median9 = if (n == 1) (l.head\
    \ + l.last) else (l.head + l.last + l.drop(8).sum) / 2\n        val median10 =\
    \ if (n == 1) (l.head + l.last) else (l.head + l.last + l.drop(9).sum) / 2\n \
    \       val median11 = if (n == 1) (l.head + l.last) else (l.head + l.last + l.drop(10).sum)\
    \ / 2\n        val median12 = if (n == 1) (l.head + l.last) else (l.head + l.last\
    \ + l.drop(11).sum) / 2\n        val median13 = if (n == 1) (l.head + l.last)\
    \ else (l.head + l.last + l.drop(12).sum) / 2\n        val median14 = if (n ==\
    \ 1) (l.head + l.last) else (l.head + l.last + l.drop(13).sum) / 2\n        val\
    \ median15 = if (n == 1) (l.head + l.last) else (l.head + l.last + l.drop(14).sum)\
    \ / 2\n        val median16 = if (n == 1) (l.head + l.last) else (l.head + l.last\
    \ + l.drop(15).sum) / 2\n        val median17 = if (n == 1) ", "        val n\
    \ = l.length\n        val half = n / 2\n        if (n < 2) 0f\n        else {\n\
    \            val median = l.sortWith(_ < _).last\n            val lower = l.take(half)\n\
    \            val upper = l.drop(half)\n            val lowerMedian = median(lower)\n\
    \            val upperMedian = median(upper)\n            val lowerMedianAbs =\
    \ Math.abs(lowerMedian)\n            val upperMedianAbs = Math.abs(upperMedian)\n\
    \            val lowerMedianAbsMedian = lowerMedianAbs / upperMedianAbs\n    \
    \        val lowerMedianAbsMedianAbs = lowerMedianAbsMedian * lowerMedianAbs\n\
    \            val medianAbs = Math.abs(median)\n            val medianAbsMedian\
    \ = medianAbs / lowerMedianAbsMedianAbs\n            val medianAbsMedianAbs =\
    \ medianAbsMedian * medianAbsMedian\n            val medianAbsMedianAbsMedian\
    \ = medianAbsMedianAbs / upperMedianAbsMedianAbs\n            val medianAbsMedianAbsMedianAbs\
    \ = medianAbsMedianAbsMedian * medianAbsMedianAbsMedian\n            val medianAbsMedianAbsMedianAbsMedian\
    \ = medianAbsMedianAbsMedianAbs / lowerMedianAbsMedianAbsMedianAbs\n         \
    \   val medianAbsMedianAbsMedianAbsMedianAbs = medianAbsMedianAbsMedianAbsMedian\
    \ * medianAbsMedianAbsMedianAbsMedian\n            val medianAbsMedianAbsMedianAbsMedianAbsMedian\
    \ = medianAbsMedianAbsMedianAbsMedianAbs / upperMedianAbsMedianAbsMedianAbsMedianAbs\n\
    \            val medianAbsMedianAbsMedianAbsMedianAbsMedianAbs = medianAbsMedianAbsMedianAbsMedianAbsMedian\
    \ * medianAbsMedianAbsMedianAbsMedianAbsMedian\n            val medianAbsMedianAbsMedianAbsMedianAbsMedianAbsMedian\
    \ = medianAbsMedianAbsMedianAbsMedianAbsMedianAbsMedian * medianAbsMedianAbsMedianAb",
  "        val n = l.length\n        val m = l.groupBy(x => x).mapValues(_.length).max\n\
    \        val half = m / 2\n        val m1 = l.take(half)\n        val m2 = l.drop(half)\n\
    \        val m3 = m1.zip(m2).map { case (x, y) => x + y }\n        val m4 = m3.sum\
    \ / half\n        val m5 = m3.max / half\n        val m6 = m4.toFloat / m5\n \
    \       m6", "        val sorted = l.sorted\n        val mid = sorted.length /\
    \ 2\n        val median = sorted.take(mid).last\n        val leftMedian = sorted.drop(mid).last\n\
    \        val rightMedian = sorted.take(mid).last\n        val leftMedianInt =\
    \ leftMedian.toInt\n        val rightMedianInt = rightMedian.toInt\n        if\
    \ (leftMedianInt < rightMedianInt) {\n            median\n        } else {\n \
    \           rightMedian\n        }", "        val n = l.length\n        val m\
    \ = l.foldLeft(0l){ (sum, e) => sum + e / n }\n        val m1 = l.foldLeft(0l){\
    \ (sum, e) => sum + e / n }\n        val m2 = l.foldLeft(0l){ (sum, e) => sum\
    \ + e / n }\n        val m3 = l.foldLeft(0l){ (sum, e) => sum + e / n }\n    \
    \    val m4 = l.foldLeft(0l){ (sum, e) => sum + e / n }\n        val m5 = l.foldLeft(0l){\
    \ (sum, e) => sum + e / n }\n        val m6 = l.foldLeft(0l){ (sum, e) => sum\
    \ + e / n }\n        val m7 = l.foldLeft(0l){ (sum, e) => sum + e / n }\n    \
    \    val m8 = l.foldLeft(0l){ (sum, e) => sum + e / n }\n        val m9 = l.foldLeft(0l){\
    \ (sum, e) => sum + e / n }\n        val m10 = l.foldLeft(0l){ (sum, e) => sum\
    \ + e / n }\n        val m11 = l.foldLeft(0l){ (sum, e) => sum + e / n }\n   \
    \     val m12 = l.foldLeft(0l){ (sum, e) => sum + e / n }\n        val m13 = l.foldLeft(0l){\
    \ (sum, e) => sum + e / n }\n        val m14 = l.foldLeft(0l){ (sum, e) => sum\
    \ + e / n }\n        val m15 = l.foldLeft(0l){ (sum, e) => sum + e / n }\n   \
    \     val m16 = l.foldLeft(0l){ (sum, e) => sum + e / n }\n        val m17 = l.foldLeft(0l){\
    \ (sum, e) => sum + e / n }\n        val m18 = l.foldLeft(0l){ (sum, e) => sum\
    \ + e / n }\n        val m19 = l.foldLeft(0l){ (sum, e) => sum + e / n }\n   \
    \     val m20 = l.foldLeft(0l){ (sum, e) => sum + ", "        val n = l.length\n\
    \        val m = l.toArray\n        val sorted = m.sortWith(_ < _)\n        val\
    \ half = n / 2\n        if (n < 2) 0.0f\n        else if (n == 1) sorted[half]\n\
    \        else (sorted take half).last + sorted take half sum / 2", "        val\
    \ sorted = l.sorted\n        val mid = sorted.length / 2\n        val median =\
    \ sorted.take(mid).sum / mid\n        median", "        val n = l.length\n   \
    \     val m = l.toList.sortWith(_ < _).length\n        val mid = m / 2\n     \
    \   val m1 = l.toList.sortWith(_ < _).take(mid).toList\n        val m2 = l.toList.sortWith(_\
    \ < _).drop(mid).toList\n        val m3 = l.toList.sortWith(_ < _).take(mid).toList\n\
    \        val m4 = l.toList.sortWith(_ < _).drop(mid).toList\n        val m5 =\
    \ l.toList.sortWith(_ < _).take(mid).toList\n        val m6 = l.toList.sortWith(_\
    \ < _).drop(mid).toList\n        val m7 = l.toList.sortWith(_ < _).take(mid).toList\n\
    \        val m8 = l.toList.sortWith(_ < _).drop(mid).toList\n        val m9 =\
    \ l.toList.sortWith(_ < _).take(mid).toList\n        val m10 = l.toList.sortWith(_\
    \ < _).drop(mid).toList\n        val m11 = l.toList.sortWith(_ < _).take(mid).toList\n\
    \        val m12 = l.toList.sortWith(_ < _).drop(mid).toList\n        val m13\
    \ = l.toList.sortWith(_ < _).take(mid).toList\n        val m14 = l.toList.sortWith(_\
    \ < _).drop(mid).toList\n        val m15 = l.toList.sortWith(_ < _).take(mid).toList\n\
    \        val m16 = l.toList.sortWith(_ < _).drop(mid).toList\n        val m17\
    \ = l.toList.sortWith(_ < _).take(mid).toList\n        val m18 = l.toList.sortWith(_\
    \ < _).drop(mid).toList\n        val m19 = l.toList.sortWith(_ < _).take(mid).toList\n\
    \        val m20 = l.toList.sortWith(_ < _).drop(mid).toList\n        val m21\
    \ = l.toList.sortWith(_ < _).take(mid).toList\n        val m22 = l.toList.sortWith(_\
    \ < _).drop(mid).toList\n        val m23 = l.toList.sortWith(_ < _).take(mid).toList\n\
    \        val m24 = l.toList.sortWith(_ < _).drop(mid).toList\n        val m25\
    \ = l.toList.sortWith(_ < _).take(mid", "        val n = l.length\n        val\
    \ half = n / 2\n        val left = l.slice(0, half)\n        val right = l.slice(half,\
    \ n)\n        val median = (left ++ right).sortWith(_ < _).last\n        median.toFloat",
  "        val n = l.length\n        val m = l.max\n        val median = (m + n) /\
    \ 2\n        val half = n / 2\n        val left = l.take(half)\n        val right\
    \ = l.drop(half)\n        val leftMedian = median(left)\n        val rightMedian\
    \ = median(right)\n        if (leftMedian > rightMedian)\n            median\n\
    \        else\n            leftMedian", "        val n = l.length\n        val\
    \ half = n / 2\n        if (n < 1) throw new IllegalArgumentException(\"List must\
    \ have at least two elements\")\n        if (n == 1) return l(0)\n        if (n\
    \ == 2) return (l(1) + l(2))/2\n        if (n % 2 == 0) return median(l(half,\
    \ half+1))\n        else return median(l(half, half-1))", "        val n = l.length\n\
    \        if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n      \
    \      val left = l.take(mid)\n            val right = l.drop(mid)\n         \
    \   val median = median(left) + median(right)\n            median\n        }",
  "        val n = l.length\n        val m = l.groupBy(x => x).mapValues(_.length).max\n\
    \        val half = m / 2\n        val low = l.take(half)\n        val high =\
    \ l.drop(half)\n        val mid = high.zip(low).map { case (h, l) => l }\n   \
    \     val median = mid.foldLeft(0f) { (sum, v) => sum + v }\n        median.toFloat",
  "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n           \
    \ val mid = n / 2\n            val left = new Array[Long](n)\n            val\
    \ right = new Array[Long](n)\n            l.foreach(x => if (x < mid) left(x)\
    \ else right(x))\n            val m1 = median(left)\n            val m2 = median(right)\n\
    \            val m = (m1 + m2) / 2\n            if (m1 < m) m1 else m2\n     \
    \   }", "        val n = l.length\n        val half = n / 2\n        val left\
    \ = l.take(half)\n        val right = l.drop(half)\n        val median = (left\
    \ + right).sorted\n        median.last", "        val n = l.length\n        val\
    \ half = n / 2\n        val m1 = l.take(half)\n        val m2 = l.drop(half)\n\
    \        val m = (m1.length + m2.length) / 2\n        if (m1.length < m2.length)\
    \ m1 else m2", "        val n = l.length\n        if (n < 2) 0.0f\n        else\
    \ {\n            val mid = l.length / 2\n            val left = l.slice(0, mid)\n\
    \            val right = l.slice(mid)\n            val median = median(left)\n\
    \            val median2 = median(right)\n            val median3 = median(left.toList\
    \ ++ right.toList)\n            val median4 = median(left.toList ++ right.toList\
    \ ++ left.toList ++ right.toList)\n            val median5 = median(left.toList\
    \ ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList\
    \ ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList\
    \ ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList\
    \ ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList\
    \ ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList\
    \ ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList\
    \ ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList\
    \ ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList\
    \ ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList\
    \ ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList\
    \ ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList\
    \ ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList\
    \ ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList\
    \ ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList\
    \ ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList\
    \ ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList\
    \ ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList\
    \ ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList\
    \ ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList\
    \ ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList\
    \ ++ right.toList ++ left.toList ++ right.toList ", "        val n = l.length\n\
    \        if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n      \
    \      val left = l.take(mid)\n            val right = l.drop(mid)\n         \
    \   val midVal = median(left)\n            val rightVal = median(right)\n    \
    \        val median = midVal + rightVal\n            median.toFloat\n        }",
  "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n           \
    \ val mid = n / 2\n            val left = l.slice(0, mid)\n            val right\
    \ = l.slice(mid, n)\n            val lMedian = median(left)\n            val rMedian\
    \ = median(right)\n            val median = (lMedian + rMedian) / 2\n        \
    \    median\n        }", "        val n = l.length\n        val half = n / 2\n\
    \        val left = new Array[Long](half)\n        val right = new Array[Long](half)\n\
    \        val mid = n / 2\n        var i = 0\n        var j = 0\n        var k\
    \ = 0\n        var m = 0\n        while (i < half && j < half) {\n           \
    \ val x = l(i)\n            val y = l(j)\n            if (x < y) {\n         \
    \       left(k) = x\n                i += 1\n            } else {\n          \
    \      right(k) = y\n                j += 1\n            }\n            k += 1\n\
    \        }\n        if (i == half) {\n            m = right(mid)\n        } else\
    \ if (j == half) {\n            m = left(mid)\n        } else {\n            m\
    \ = ((right(mid) + left(mid)) / 2).toFloat\n        }\n        m", "        val\
    \ n = l.length\n        if (n < 2) 0.0f\n        else {\n            val mid =\
    \ n / 2\n            val left  = l.take(mid)\n            val right = l.drop(mid)\n\
    \            val median = (left + right).sorted.last\n            median\n   \
    \     }", "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n\
    \            val mid = n / 2\n            val left = l.slice(0, mid)\n       \
    \     val right = l.slice(mid, n)\n            val lMedian = median(left)\n  \
    \          val rMedian = median(right)\n            (lMedian + rMedian) / 2\n\
    \        }", "        val n = l.length\n        if (n < 2) 0.0f\n        else\
    \ {\n            val mid = l.length / 2\n            val left = l.slice(0, mid)\n\
    \            val right = l.slice(mid)\n            val median = median(left)\n\
    \            val leftMedian = median(left)\n            val rightMedian = median(right)\n\
    \            val medianDiff = leftMedian - rightMedian\n            val leftDiff\
    \ = leftMedian - median\n            val rightDiff = rightMedian - median\n  \
    \          val medianDiffAbs = Math.abs(medianDiff)\n            val leftDiffAbs\
    \ = Math.abs(leftDiff)\n            val rightDiffAbs = Math.abs(rightDiff)\n \
    \           val medianDiffAbsMin = if (medianDiffAbs < 0.0f) 0.0f else medianDiffAbs\n\
    \            val leftDiffAbsMin = if (leftDiffAbs < 0.0f) 0.0f else leftDiffAbs\n\
    \            val rightDiffAbsMin = if (rightDiffAbs < 0.0f) 0.0f else rightDiffAbs\n\
    \            val medianDiffAbsMax = if (medianDiffAbs < 0.0f) 0.0f else medianDiffAbs\n\
    \            val leftDiffAbsMax = if (leftDiffAbs < 0.0f) 0.0f else leftDiffAbs\n\
    \            val rightDiffAbsMax = if (rightDiffAbs < 0.0f) 0.0f else rightDiffAbs\n\
    \            val medianDiffAbsMaxMin = if (medianDiffAbs < 0.0f) 0.0f else medianDiffAbs\n\
    \            val leftDiffAbsMaxMin = if (leftDiffAbs < 0.0f) 0.0f else leftDiffAbs\n\
    \            val rightDiffAbsMaxMin = if (rightDiffAbs < 0.0f) 0.0f else rightDiffAbs\n\
    \            val medianDiffAbsMaxMinMax = if (medianDiffAbs < 0.0f) 0.0f else\
    \ medianDiffAbs\n            val leftDiffAbsMaxMinMax = if (leftDiffAbs < 0.0f)\
    \ 0.0f else leftDiffAbs\n            val rightDiffAbsMaxMinMax = if (rightDiffAbs\
    \ < 0.0f) 0.0f else rightDiffAbs\n            val medianDiffAbsMaxMinMaxMin =\
    \ if (medianDiffAbs < 0.0f) 0.0f else medianDiffAbs\n            val leftDiffAbsMaxMinMaxMin\
    \ = if (leftDiffAbs < 0.0f) 0.0f else leftDiffAbs\n            val rightDiffAbsMaxMinMaxMin\
    \ = if (rightDiffAbs < 0.0f) 0.0f else rightDiffAbs", "        val n = l.length\n\
    \        if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n      \
    \      val m1 = l.slice(0, mid)\n            val m2 = l.slice(mid)\n         \
    \   val m = (m1 + m2).sortWith(_ < _)\n            val m1 = m.head\n         \
    \   val m2 = m.last\n            val m = (m1 + m2).sortWith(_ < _)\n         \
    \   val m1 = m.head\n            val m2 = m.last\n            val m = (m1 + m2).sortWith(_\
    \ < _)\n            val m1 = m.head\n            val m2 = m.last\n           \
    \ val m = (m1 + m2).sortWith(_ < _)\n            val m1 = m.head\n           \
    \ val m2 = m.last\n            val m = (m1 + m2).sortWith(_ < _)\n           \
    \ val m1 = m.head\n            val m2 = m.last\n            val m = (m1 + m2).sortWith(_\
    \ < _)\n            val m1 = m.head\n            val m2 = m.last\n           \
    \ val m = (m1 + m2).sortWith(_ < _)\n            val m1 = m.head\n           \
    \ val m2 = m.last\n            val m = (m1 + m2).sortWith(_ < _)\n           \
    \ val m1 = m.head\n            val m2 = m.last\n            val m = (m1 + m2).sortWith(_\
    \ < _)\n            val m1 = m.head\n            val m2 = m.last\n           \
    \ val m = (m1 + m2).sortWith(_ < _)\n            val m1 = m.head\n           \
    \ val m2 = m.last\n            val m = (m1 + m2).sortWith(_ < _)\n           \
    \ val m1 = m.head\n            val m2 = m.last\n            val m = (m1 + m2).sortWith(_\
    \ < _)\n            val m1 = m.head\n            val m2 = m.last\n           \
    \ val m = (m1 + m2).sortWith(_ < _)\n            val m1 = m.head\n           \
    \ val m2 = m.last\n            val m = (m1 + m2).sortWith(_ < _)\n           \
    \ val m1 = m.head\n            val m2 = m.last\n            val m = (m1 + m2).sortWith(_\
    \ < _)\n            val m1 = m.head\n            val m2 = m.last\n           \
    \ val m = (m1 + m2).sortWith(_ < _)\n            val m1 = m.head\n           \
    \ val m2 = m.last\n            val m = (m1 + m2).", "        val n = l.length\n\
    \        if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n      \
    \      val left = l.slice(0, mid)\n            val right = l.slice(mid)\n    \
    \        val median = median(left) + median(right)\n            val medianFloat\
    \ = median.toFloat\n            if (medianFloat == 0.0f) 0.0f\n            else\
    \ medianFloat\n        }", "        val n = l.length\n        val half = n / 2\n\
    \        val left = l.take(half)\n        val right = l.drop(half)\n        val\
    \ median = left.sorted match {\n            case Nil => right(0)\n           \
    \ case x :: xs => xs.sorted match {\n                case Nil => x(0)\n      \
    \          case y :: ys => if (y > x(0)) y else x(0)\n            }\n        }\n\
    \        median.toFloat", "        val n = l.length\n        val m = l.toSeq.sortBy(_).take(n\
    \ / 2).length\n        val median = (l.toSeq.sortBy(_).take(m / 2).sum / m).toFloat\n\
    \        median", "        val n = l.length\n        val half = n / 2\n      \
    \  val left = l.slice(0, half)\n        val right = l.slice(half, n)\n       \
    \ val median = (left + right).sorted.last\n        median.toFloat", "        val\
    \ n = l.length\n        val m = l.toArray\n        val half = n / 2\n        val\
    \ left = m.slice(0, half)\n        val right = m.slice(half, n)\n        val mid\
    \ = math.floor(half)\n        val median = (left.sum + right.sum) / 2.0\n    \
    \    val leftMedian = left.sum / 2.0\n        val rightMedian = right.sum / 2.0\n\
    \        val medianDiff = leftMedian - rightMedian\n        if (medianDiff < 0)\n\
    \            median\n        else\n            leftMedian", "        val sorted\
    \ = l.sorted\n        val mid = sorted.length / 2\n        val left = sorted.take(mid)\n\
    \        val right = sorted.drop(mid)\n        val median = (left ++ right).sum\
    \ / 2\n        median", "        val n = l.length\n        val m = l.toSet.size\n\
    \        val half = m / 2\n        if (half == 0) l.toSet.head\n        else if\
    \ (half == 1) l.toSet.last\n        else l.toSet.take(half).last", "        val\
    \ n = l.length\n        val half = n / 2\n        val left = l.take(half)\n  \
    \      val right = l.drop(half)\n        val median = (left + right).sorted\n\
    \        median.last", "        val n = l.length\n        if (n < 2) 0.0f\n  \
    \      else {\n            val mid = n / 2\n            val left = l.take(mid)\n\
    \            val right = l.drop(mid)\n            val m = (left + right).sortBy(_).reverse.head\n\
    \            val median = (m + right).sortBy(_).reverse.head\n            median.toFloat\n\
    \        }", "        val sorted = l.sorted\n        val mid = sorted.length /\
    \ 2\n        val median = sorted.take(mid).last\n        val leftMedian = sorted.drop(mid).last\n\
    \        val rightMedian = sorted.take(mid).last\n        val leftMedianInt =\
    \ leftMedian.toInt\n        val rightMedianInt = rightMedian.toInt\n        val\
    \ leftMedianFloat = leftMedian.toFloat\n        val rightMedianFloat = rightMedian.toFloat\n\
    \        val leftMedianLong = leftMedian.toLong\n        val rightMedianLong =\
    \ rightMedian.toLong\n        val leftMedianDouble = leftMedian.toDouble\n   \
    \     val rightMedianDouble = rightMedian.toDouble\n        val leftMedianString\
    \ = leftMedian.toString\n        val rightMedianString = rightMedian.toString\n\
    \        val leftMedianBigInt = leftMedian.toBigInt\n        val rightMedianBigInt\
    \ = rightMedian.toBigInt\n        val leftMedianBigDecimal = leftMedian.toBigDecimal\n\
    \        val rightMedianBigDecimal = rightMedian.toBigDecimal\n        val leftMedianBigDecimal\
    \ = leftMedian.toBigDecimal\n        val rightMedianBigDecimal = rightMedian.toBigDecimal\n\
    \        val leftMedianBigDecimal = leftMedian.toBigDecimal\n        val rightMedianBigDecimal\
    \ = rightMedian.toBigDecimal\n        val leftMedianBigDecimal = leftMedian.toBigDecimal\n\
    \        val rightMedianBigDecimal = rightMedian.toBigDecimal\n        val leftMedianBigDecimal\
    \ = leftMedian.toBigDecimal\n        val rightMedianBigDecimal = rightMedian.toBigDecimal\n\
    \        val leftMedianBigDecimal = leftMedian.toBigDecimal\n        val rightMedianBigDecimal\
    \ = rightMedian.toBigDecimal\n        val leftMedianBigDecimal = leftMedian.toBigDecimal\n\
    \        val rightMedianBigDecimal = rightMedian.toBigDecimal\n        val leftMedianBigDecimal\
    \ = leftMedian.toBigDecimal\n        val rightMedianBigDecimal = rightMedian.toBigDecimal\n\
    \        val leftMedianBigDecimal = leftMedian.toBigDecimal\n        val rightMedianBigDecimal\
    \ = rightMedian.toBigDecimal\n        val leftMedianBigDecimal = leftMedian.toBigDecimal\n\
    \        val rightMedianBigDecimal = rightMedian.toBigDecimal", "        val n\
    \ = l.length\n        val m = l.head\n        val h = (n - 1) / 2\n        val\
    \ i = h + 1\n        val j = n - 1\n        val m1 = if (i < j) l.apply(i) else\
    \ l.apply(j)\n        val m2 = if (i < j) l.apply(j) else l.apply(i)\n       \
    \ val m3 = if (i < j) l.apply(i) else l.apply(j)\n        val m4 = if (i < j)\
    \ l.apply(j) else l.apply(i)\n        val m5 = if (i < j) l.apply(j) else l.apply(i)\n\
    \        val m6 = if (i < j) l.apply(j) else l.apply(i)\n        val m7 = if (i\
    \ < j) l.apply(j) else l.apply(i)\n        val m8 = if (i < j) l.apply(j) else\
    \ l.apply(i)\n        val m9 = if (i < j) l.apply(j) else l.apply(i)\n       \
    \ val m10 = if (i < j) l.apply(j) else l.apply(i)\n        val m11 = if (i < j)\
    \ l.apply(j) else l.apply(i)\n        val m12 = if (i < j) l.apply(j) else l.apply(i)\n\
    \        val m13 = if (i < j) l.apply(j) else l.apply(i)\n        val m14 = if\
    \ (i < j) l.apply(j) else l.apply(i)\n        val m15 = if (i < j) l.apply(j)\
    \ else l.apply(i)\n        val m16 = if (i < j) l.apply(j) else l.apply(i)\n \
    \       val m17 = if (i < j) l.apply(j) else l.apply(i)\n        val m18 = if\
    \ (i < j) l.apply(j) else l.apply(i)\n        val m19 = if (i < j) l.apply(j)\
    \ else l.apply(i)\n        val m20 = if (i < j) l.apply(j) else l.apply(i)\n \
    \       val m21 = if (i < j) l.apply(j) else l.apply(i)\n        val m22 = if\
    \ (i < j) l.apply(j) else l.apply(i)\n        val m23 = if (i < j) l.apply(j)\
    \ else l.apply(i)\n        val m24 = if (i < j) l.apply(j) else l.apply(i)\n \
    \       val m25 = if (i < j) l.apply(j) else l.apply(i)\n        val m26 = if\
    \ (i < j) l.apply(j) else l.apply(i)\n        val m27 = if (i < j) l.apply(j)\
    \ else l.apply(i)\n        val m28 = if (i < j) l.apply(j) else l.apply(i)\n \
    \       val m29 = if (i < j) l.apply(j) else l.apply(i)\n", "        val n = l.length\n\
    \        val m = l.toSeq.sortBy(_).take(n / 2)\n        val m1 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m2 = l.toSeq.sortBy(_).take(n / 2)\n        val m3 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m4 = l.toSeq.sortBy(_).take(n / 2)\n        val m5 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m6 = l.toSeq.sortBy(_).take(n / 2)\n        val m7 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m8 = l.toSeq.sortBy(_).take(n / 2)\n        val m9 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m10 = l.toSeq.sortBy(_).take(n / 2)\n        val m11 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m12 = l.toSeq.sortBy(_).take(n / 2)\n        val m13 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m14 = l.toSeq.sortBy(_).take(n / 2)\n        val m15 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m16 = l.toSeq.sortBy(_).take(n / 2)\n        val m17 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m18 = l.toSeq.sortBy(_).take(n / 2)\n        val m19 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m20 = l.toSeq.sortBy(_).take(n / 2)\n        val m21 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m22 = l.toSeq.sortBy(_).take(n / 2)\n        val m23 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m24 = l.toSeq.sortBy(_).take(n / 2)\n        val m25 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m26 = l.toSeq.sortBy(_).take(n / 2)\n        val m27 = l.toSeq",
  "        val n = l.length\n        val m = l.head\n        val median = (m + n)\
    \ / 2\n        val half = n / 2\n        val left = new Array[Long](half)\n  \
    \      val right = new Array[Long](half)\n        val leftSum = 0\n        val\
    \ rightSum = 0\n        val leftCount = 0\n        val rightCount = 0\n      \
    \  l.foreach { x =>\n            if (x < median) {\n                leftCount\
    \ += 1\n                leftSum += x\n            } else {\n                rightCount\
    \ += 1\n                rightSum += x\n            }\n        }\n        if (leftCount\
    \ > rightCount) {\n            median\n        } else {\n            (median +\
    \ leftSum + rightSum) / 3\n        }", "        val sorted = l.sorted\n      \
    \  val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n \
    \       val leftHalf = sorted.drop(mid)\n        val rightHalf = sorted.takeRight(mid)\n\
    \        val medianOfLeftHalf = median(leftHalf)\n        val medianOfRightHalf\
    \ = median(rightHalf)\n        val medianOfBothHalfs = median(leftHalf ++ rightHalf)\n\
    \        val medianOfBothHalfsIfBothHalfsAreEven = if (medianOfLeftHalf == medianOfRightHalf)\
    \ medianOfBothHalfs else if (medianOfLeftHalf == medianOfBothHalfs) medianOfLeftHalf\
    \ else medianOfBothHalfs\n        val medianOfBothHalfsIfBothHalfsAreOdd = if\
    \ (medianOfLeftHalf == medianOfBothHalfs) medianOfRightHalf else medianOfBothHalfs\n\
    \        val medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOdd = if (medianOfLeftHalf\
    \ == medianOfBothHalfs) medianOfBothHalfsIfBothHalfsAreEven else if (medianOfLeftHalf\
    \ == medianOfRightHalf) medianOfBothHalfsIfBothHalfsAreOdd else medianOfBothHalfs\n\
    \        val medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOddIfBothHalfsAreEven\
    \ = if (medianOfLeftHalf == medianOfBothHalfsIfBothHalfsAreEven) medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOdd\
    \ else if (medianOfLeftHalf == medianOfBothHalfsIfBothHalfsAreOdd) medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOdd\
    \ else medianOfBothHalfsIfBothHalfsAreEven\n        val medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOddIfBothHalfsAreEvenIfBothHalfsAreOdd\
    \ = if (medianOfLeftHalf == medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOdd)\
    \ medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOddIfBothHalfsAreEven else\
    \ if (medianOfLeftHalf == medianOfBothHalfsIfBothHalfsAreOddIfBothHalfsAreEven)\
    \ medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOddIfBothHalf", "        val\
    \ n = l.length\n        if (n < 2) 0.0f\n        else {\n            val mid =\
    \ n / 2\n            val left = l.take(mid)\n            val right = l.drop(mid)\n\
    \            val midVal = median(left)\n            val rightVal = median(right)\n\
    \            val median = midVal + rightVal\n            median.toFloat\n    \
    \    }", "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n\
    \            val mid = n / 2\n            val m1 = l.take(mid)\n            val\
    \ m2 = l.drop(mid)\n            val m = (m1 + m2).sortWith(_ < _)\n          \
    \  val m1 = m.head\n            val m2 = m.last\n            (m1 + m2) / 2.0f\n\
    \        }", "        val sorted = l.sorted\n        val mid = sorted.length /\
    \ 2\n        val median = sorted.take(mid).last\n        val left = sorted.drop(mid)\n\
    \        val right = sorted.take(mid)\n        val medianLeft = median(left)\n\
    \        val medianRight = median(right)\n        val medianMedian = median(List(medianLeft,\
    \ medianRight))\n        val medianMedianFloat = medianMedian.toFloat\n      \
    \  val medianMedianInt = medianMedianFloat.toInt\n        val medianMedianLong\
    \ = medianMedianInt.toLong\n        val medianMedianDouble = medianMedianLong.toDouble\n\
    \        val medianMedianString = medianMedianDouble.toString\n        val medianMedianBoolean\
    \ = medianMedianString.toBoolean\n        val medianMedianNull = medianMedianBoolean.asInstanceOf[Null]\n\
    \        medianMedianNull", "        val n = l.length\n        if (n < 2) 0.0f\n\
    \        else {\n            val mid = n / 2\n            val left = l.slice(0,\
    \ mid)\n            val right = l.slice(mid)\n            val median = median(left)\
    \ + median(right)\n            median.toFloat\n        }", "        val sorted\
    \ = l.sorted\n        val mid = sorted.length / 2\n        val median = sorted.take(mid).sum\
    \ / mid\n        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        val leftHalf = sorted.drop(mid)\n\
    \        val rightHalf = sorted.takeRight(mid)\n        val medianOfLeftHalf =\
    \ median(leftHalf)\n        val medianOfRightHalf = median(rightHalf)\n      \
    \  val medianOfBothHalfs = median(leftHalf ++ rightHalf)\n        val medianOfBothHalfsIfBothHalfsAreInOrder\
    \ = if (leftHalf.last < rightHalf.last) medianOfBothHalfs else medianOfBothHalfs\n\
    \        val medianOfBothHalfsIfLeftHalfIsInOrder = if (leftHalf.last < medianOfLeftHalf)\
    \ medianOfBothHalfs else medianOfBothHalfs\n        val medianOfBothHalfsIfRightHalfIsInOrder\
    \ = if (rightHalf.last < medianOfRightHalf) medianOfBothHalfs else medianOfBothHalfs\n\
    \        val medianOfBothHalfsIfBothHalfsAreInOrderIfLeftHalfIsInOrder = if (leftHalf.last\
    \ < medianOfLeftHalf && rightHalf.last < medianOfRightHalf) medianOfBothHalfsIfBothHalfsAreInOrder\
    \ else medianOfBothHalfsIfLeftHalfIsInOrder\n        val medianOfBothHalfsIfBothHalfsAreInOrderIfRightHalfIsInOrder\
    \ = if (rightHalf.last < medianOfRightHalf && leftHalf.last < medianOfLeftHalf)\
    \ medianOfBothHalfsIfBothHalfsAreInOrder else medianOfBothHalfsIfRightHalfIsInOrder\n\
    \        val medianOfBothHalfsIfBothHalfsAreInOrderIfBothHalfsAreInOrder = if\
    \ (leftHalf.last < medianOfLeftHalf && rightHalf.last < medianOfRightHalf && medianOfBothHalfsIfBothHalfsAreInOrder\
    \ != medianOfBothHalfs) medianOfBothHalfsIfBothHalfsAreInOrder else medianOfBothHalfsIfBothHalfsAreInOrderIfLeftHalfIsInOrder\n\
    \        val medianOfBothHalfsIfBothHalfsAreInOrderIfBothHalfsAreInOrderIfRightHalfIsInOrder\
    \ = if (rightHalf.last < medianOfRightHalf && leftHalf.last < medianOfLeftHalf\
    \ && medianOfBothHalfsIfBothHalfsAreInOrder != medianOfBothHalfs) medianOfBothHalfsIf",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ m1 = sorted.take(mid)\n        val m2 = sorted.drop(mid)\n        val median\
    \ = (m1.sum + m2.sum) / 2\n        median.toFloat", "        val n = l.length\n\
    \        val m = l.min\n        val h = l.max\n        val mid = (m + h) / 2\n\
    \        val m1 = l.filter(_ < mid)\n        val m2 = l.filter(_ >= mid)\n   \
    \     val m3 = l.filter(_ == mid)\n        val m4 = l.filter(_ > mid)\n      \
    \  val m5 = l.filter(_ < h)\n        val m6 = l.filter(_ >= h)\n        val m7\
    \ = l.filter(_ == h)\n        val m8 = l.filter(_ > h)\n        val m9 = l.filter(_\
    \ < n)\n        val m10 = l.filter(_ >= n)\n        val m11 = l.filter(_ == n)\n\
    \        val m12 = l.filter(_ > n)\n        val m13 = l.filter(_ < m)\n      \
    \  val m14 = l.filter(_ >= m)\n        val m15 = l.filter(_ == m)\n        val\
    \ m16 = l.filter(_ > m)\n        val m17 = l.filter(_ < mid)\n        val m18\
    \ = l.filter(_ >= mid)\n        val m19 = l.filter(_ == mid)\n        val m20\
    \ = l.filter(_ > mid)\n        val m21 = l.filter(_ < h)\n        val m22 = l.filter(_\
    \ >= h)\n        val m23 = l.filter(_ == h)\n        val m24 = l.filter(_ > h)\n\
    \        val m25 = l.filter(_ < n)\n        val m26 = l.filter(_ >= n)\n     \
    \   val m27 = l.filter(_ == n)\n        val m28 = l.filter(_ > n)\n        val\
    \ m29 = l.filter(_ < m)\n        val m30 = l.filter(_ >= m)\n        val m31 =\
    \ l.filter(_ == m)\n        val m32 = l.filter(_ > m)\n        val m33 = l.filter(_\
    \ < mid)\n        val m34 = l.filter(_ >= mid)\n        val m35 = l.filter(_ ==\
    \ mid)\n        val m36 = l.filter(_ > mid)\n        val m37 = l.filter(_ < h)\n\
    \        val m38 = l.filter(_ >= h)\n        val m39 = l.filter(_ == h)\n    \
    \    val m40 = l.filter(_ > h)\n        val m41 = l.filter(_ < n)\n        val\
    \ m42 = l.filter(_ >= n)\n        val m43 = l.filter(_ == n)\n        val m44\
    \ = l.filter(_ > n)\n        val m45", "        val sorted = l.sorted\n      \
    \  val half = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.last\n\
    \        else (sorted take half).last + (sorted drop half).last", "        val\
    \ n = l.length\n        val m = l.max\n        val median = (m + n) / 2\n    \
    \    val lower = l.filter(_ < median).length\n        val upper = l.filter(_ >\
    \ median).length\n        if (lower + upper == 0) median else (median + median)\
    \ / 2", "        val n = l.length\n        val mid = n / 2\n        val left =\
    \ l.take(mid)\n        val right = l.drop(mid)\n        val median = (left + right).sortWith(_\
    \ < _).last\n        median.toFloat", "        val n = l.length\n        val half\
    \ = n / 2\n        if (n < 2) 0f\n        else {\n            val lower = l.take(half)\n\
    \            val upper = l.drop(half)\n            val median = (lower + upper)\
    \ / 2\n            median.toFloat\n        }", "        val n = l.length\n   \
    \     if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n         \
    \   val left = l.take(mid)\n            val right = l.drop(mid)\n            val\
    \ median = (left + right).sorted\n            val medianIndex = median.indexOf(0)\n\
    \            median(medianIndex)\n        }", "        val n = l.length\n    \
    \    val half = n / 2\n        if (n < 3) {\n            l.head\n        } else\
    \ if (n % 2 == 0) {\n            l.head\n        } else {\n            val m =\
    \ (l.head + l.last) / 2\n            val left = l.take(half)\n            val\
    \ right = l.drop(half)\n            val m1 = median(left)\n            val m2\
    \ = median(right)\n            if (m1 < m) m1 else m2\n        }", "        val\
    \ n = l.length\n        val m = l.min\n        val r = l.max\n        val mid\
    \ = (m + r) / 2\n        val m1 = l.filter(_ < mid).length\n        val m2 = l.filter(_\
    \ >= mid).length\n        if (m1 < m) m1 else m2", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median.toFloat", "        val n = l.length\n        if (n < 2) 0.0f\n\
    \        else {\n            val mid = n / 2\n            val left = l.slice(0,\
    \ mid)\n            val right = l.slice(mid)\n            val median = median(left)\
    \ + median(right)\n            val medianFloat = median.toFloat\n            medianFloat\n\
    \        }", "        val n = l.length\n        if (n < 2) 0.0f\n        else\
    \ {\n            val mid = n / 2\n            val left = l.slice(0, mid)\n   \
    \         val right = l.slice(mid)\n            val median = median(left) + median(right)\n\
    \            val medianFloat = median.toFloat\n            if (medianFloat ==\
    \ 0.0f) 0.0f\n            else medianFloat\n        }", "        val n = l.length\n\
    \        val mid = n / 2\n        val left = new Array[Long](n)\n        val right\
    \ = new Array[Long](n)\n        var i = 0\n        var j = 0\n        while (i\
    \ < n) {\n            while (j < n) {\n                if (j == mid) {\n     \
    \               right(j) = l(j)\n                    j += 1\n                }\
    \ else {\n                    left(i) = l(j)\n                    i += 1\n   \
    \             }\n            }\n            val leftMedian = median(left)\n  \
    \          val rightMedian = median(right)\n            if (leftMedian > rightMedian)\
    \ {\n                return leftMedian\n            } else {\n               \
    \ return rightMedian\n            }\n        }", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val m1 = sorted.take(mid)\n    \
    \    val m2 = sorted.drop(mid)\n        val median = (m1.sum + m2.sum) / 2\n \
    \       median", "        val n = l.length\n        val m = l.toList.sortWith(_\
    \ < _).length / 2\n        if (m == 0) 0f else l.toList.sortWith(_ < _).last",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        median.toFloat", "        val n = l.length\n\
    \        val half = n / 2\n        val left = l.slice(0, half)\n        val right\
    \ = l.slice(half, n)\n        val median = (left ++ right).sortWith(_ < _).head\n\
    \        median.toFloat", "        val n = l.length\n        if (n < 2) 0.0f\n\
    \        else {\n            val mid = n / 2\n            val m1 = l.take(mid)\n\
    \            val m2 = l.drop(mid)\n            val m = (m1 + m2).sorted\n    \
    \        val midPoint = m.length / 2\n            val median = m.take(midPoint)\n\
    \            median.toFloat\n        }", "        val n = l.length\n        val\
    \ m = l.max\n        val m1 = l.min\n        val m2 = l.sum / n\n        val m3\
    \ = l.sum / n\n        val m4 = l.sum / n\n        val m5 = l.sum / n\n      \
    \  val m6 = l.sum / n\n        val m7 = l.sum / n\n        val m8 = l.sum / n\n\
    \        val m9 = l.sum / n\n        val m10 = l.sum / n\n        val m11 = l.sum\
    \ / n\n        val m12 = l.sum / n\n        val m13 = l.sum / n\n        val m14\
    \ = l.sum / n\n        val m15 = l.sum / n\n        val m16 = l.sum / n\n    \
    \    val m17 = l.sum / n\n        val m18 = l.sum / n\n        val m19 = l.sum\
    \ / n\n        val m20 = l.sum / n\n        val m21 = l.sum / n\n        val m22\
    \ = l.sum / n\n        val m23 = l.sum / n\n        val m24 = l.sum / n\n    \
    \    val m25 = l.sum / n\n        val m26 = l.sum / n\n        val m27 = l.sum\
    \ / n\n        val m28 = l.sum / n\n        val m29 = l.sum / n\n        val m30\
    \ = l.sum / n\n        val m31 = l.sum / n\n        val m32 = l.sum / n\n    \
    \    val m33 = l.sum / n\n        val m34 = l.sum / n\n        val m35 = l.sum\
    \ / n\n        val m36 = l.sum / n\n        val m37 = l.sum / n\n        val m38\
    \ = l.sum / n\n        val m39 = l.sum / n\n        val m40 = l.sum / n\n    \
    \    val m41 = l.sum / n\n        val m42 = l.sum / n\n        val m43 = l.sum\
    \ / n\n        val m44 = l.sum / n\n        val m45 = l.sum / n\n        val m46\
    \ = l.sum / n\n        val m47 = l.sum / n\n        val m48 = l.sum / n\n    \
    \    val m49 = l.sum / n\n        val m50 = l.sum / n\n        val m51 = l.sum\
    \ / n\n        val m52 = l.", "        val n = l.length\n        val half = n\
    \ / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n   \
    \     val mid = left.length / 2\n        val median = if (left.length == 0) 0f\
    \ else left.take(mid).sum / mid\n        val median2 = if (right.length == 0)\
    \ 0f else right.take(mid).sum / mid\n        val median3 = if (left.length ==\
    \ 0 || right.length == 0) 0f else (left + right).take(mid).sum / mid\n       \
    \ val median4 = if (left.length == 0 || right.length == 0) 0f else (left + right).take(half).sum\
    \ / half\n        val median5 = if (left.length == 0 || right.length == 0) 0f\
    \ else (left + right).take(n / 2).sum / n\n        val median6 = if (left.length\
    \ == 0 || right.length == 0) 0f else (left + right).take(n / 4).sum / n\n    \
    \    val median7 = if (left.length == 0 || right.length == 0) 0f else (left +\
    \ right).take(n / 8).sum / n\n        val median8 = if (left.length == 0 || right.length\
    \ == 0) 0f else (left + right).take(n / 16).sum / n\n        val median9 = if\
    \ (left.length == 0 || right.length == 0) 0f else (left + right).take(n / 32).sum\
    \ / n\n        val median10 = if (left.length == 0 || right.length == 0) 0f else\
    \ (left + right).take(n / 64).sum / n\n        val median11 = if (left.length\
    \ == 0 || right.length == 0) 0f else (left + right).take(n / 128).sum / n\n  \
    \      val median12 = if (left.length == 0 || right.length == 0) 0f else (left\
    \ + right).take(n / 256).sum / n\n        val median13 = if (left.length == 0\
    \ || right.length == 0) 0f else (left + right).take(n / 512).sum / n\n       \
    \ val median14 = if (left.length == 0 || right.length == 0) 0f else (left + right).take(n\
    \ / 1024).sum / n\n        val median15 = if (left.length == 0 || right.length\
    \ == 0) 0f else (left + right).take(n / 2048).sum / n\n        val median16 =\
    \ if (left.length == 0 || right.length == 0) 0f else (left + right).take(n / 4096).sum\
    \ / n\n        val median17 = if (left.length == 0 || right.length == ", "   \
    \     val sorted = l.sorted\n        val half = sorted.length / 2\n        if\
    \ (sorted.length % 2 == 0) {\n            val median = (sorted take half).sum\
    \ / 2\n            val left = (sorted drop half).sum / 2\n            val right\
    \ = (sorted drop half).sum / 2\n            val median2 = left + right\n     \
    \       val median3 = left + right\n            val median4 = left + right\n \
    \           val median5 = left + right\n            val median6 = left + right\n\
    \            val median7 = left + right\n            val median8 = left + right\n\
    \            val median9 = left + right\n            val median10 = left + right\n\
    \            val median11 = left + right\n            val median12 = left + right\n\
    \            val median13 = left + right\n            val median14 = left + right\n\
    \            val median15 = left + right\n            val median16 = left + right\n\
    \            val median17 = left + right\n            val median18 = left + right\n\
    \            val median19 = left + right\n            val median20 = left + right\n\
    \            val median21 = left + right\n            val median22 = left + right\n\
    \            val median23 = left + right\n            val median24 = left + right\n\
    \            val median25 = left + right\n            val median26 = left + right\n\
    \            val median27 = left + right\n            val median28 = left + right\n\
    \            val median29 = left + right\n            val median30 = left + right\n\
    \            val median31 = left + right\n            val median32 = left + right\n\
    \            val median33 = left + right\n            val median34 = left + right\n\
    \            val median35 = left + right\n            val median36 = left + right\n\
    \            val median37 = left + right\n            val median38 = left + right\n\
    \            val median39 = left + right\n            val median40 = left + right\n\
    \            val median41 = left + right\n            val median42 = left + right\n\
    \            val median43 = left + right\n            val median44 = left + right\n\
    \            val median45 = left + right\n            val median46 = left + right\n\
    \            val median47 = left + right\n            val median48 = left + right\n\
    \            val median49 = left + right\n            val median50 = left + right\n\
    \            val median51 = left + right\n            val median52 = left + right\n\
    \            val median53 = left + right\n            val median54 = left + right\n\
    \            val median55 = left + right\n            val median56 = left + right\n\
    \            val median57 = left + right\n            val median58 = left + right\n\
    \            val median59 = left + ", "        val n = l.length\n        val m\
    \ = l.toList.sortWith(_ < _).length\n        val half = m / 2\n        if (half\
    \ == 0) l.toList.sortWith(_ < _).head\n        else if (half == 1) l.toList.sortWith(_\
    \ < _).last\n        else l.toList.sortWith(_ < _).span(_ < l.toList.sortWith(_\
    \ < _).head).last", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val m1 = sorted.take(mid)\n        val m2 = sorted.drop(mid)\n\
    \        val median = (m1.sum + m2.sum) / 2\n        median", "        val sorted\
    \ = l.sorted\n        val middle = sorted.length / 2\n        val median = sorted.take(middle).last\n\
    \        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(mid) else\
    \ sorted.apply(mid - 1)\n        val low = sorted.take(mid)\n        val high\
    \ = sorted.drop(mid)\n        val medianOfHigh = median(high)\n        val medianOfLow\
    \ = median(low)\n        val medianOfBoth = median(sorted ++ List(medianOfLow,\
    \ medianOfHigh))\n        medianOfBoth", "        val n = l.length\n        if\
    \ (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val left\
    \ = l.slice(0, mid)\n            val right = l.slice(mid, n)\n            val\
    \ m = (left + right).sortWith(_ < _)\n            val median = m.length / 2\n\
    \            val medianValue = m.last\n            medianValue\n        }", " \
    \       val n = l.length\n        if (n < 2) 0.0f\n        else {\n          \
    \  val mid = l.length / 2\n            val left = l.take(mid)\n            val\
    \ right = l.drop(mid)\n            val midVal = median(right)\n            val\
    \ leftVal = median(left)\n            val median = midVal + leftVal\n        \
    \    median\n        }", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        val left = sorted.drop(mid)\n\
    \        val right = sorted.takeRight(mid)\n        if (left.isEmpty) median\n\
    \        else if (right.isEmpty) median\n        else if (left.last > median)\
    \ median\n        else median", "        val n = l.length\n        if (n < 2)\
    \ 0f\n        else {\n            val mid = n / 2\n            val left = l.slice(0,\
    \ mid)\n            val right = l.slice(mid)\n            val median = median(left)\
    \ + median(right)\n            val midPoint = median(left) + median(right)\n \
    \           val medianPoint = median(l)\n            if (midPoint < medianPoint)\
    \ mid\n            else median\n        }", "        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftMedian = sorted.drop(mid)\n        val rightMedian = sorted.takeRight(mid)\n\
    \        val leftMedianMedian = leftMedian.last\n        val rightMedianMedian\
    \ = rightMedian.last\n        val leftMedianMedianMedian = leftMedianMedian.last\n\
    \        val rightMedianMedianMedian = rightMedianMedian.last\n        val leftMedianMedianMedianMedian\
    \ = leftMedianMedianMedian.last\n        val rightMedianMedianMedianMedian = rightMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedian = leftMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedian = rightMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedian = leftMedianMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedianMedian = rightMedianMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedianMedian = leftMedianMedianMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedianMedian = rightMedianMedianMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedianMedian = leftMedianMedianMedianMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedianMedianMedian = rightMedianMedianMedianMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedianMedian = leftMedianMedianMedianMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedianMedianMedian = rightMedianMedianMedianMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedianMedian = leftMedianMedianMedianMe",
  "        val sorted = l.sortWith(_ < _)\n        val mid = sorted.length / 2\n \
    \       if (sorted.length % 2 == 0) sorted.last\n        else sorted.last.toFloat\
    \ + sorted.last.toFloat / 2", "        val n = l.length\n        if (n < 2) 0.0f\n\
    \        else {\n            val mid = n / 2\n            val left = l.take(mid)\n\
    \            val right = l.drop(mid)\n            val median = median(left) +\
    \ median(right)\n            median\n        }", "        val n = l.length\n \
    \       if (n <= 1) 0f\n        else {\n            val mid = n / 2\n        \
    \    val left = l.slice(0, mid)\n            val right = l.slice(mid)\n      \
    \      val midVal = median(left)\n            val rightVal = median(right)\n \
    \           val median = midVal + rightVal\n            median\n        }", " \
    \       val n = l.length\n        if (n < 2) 0.0\n        else {\n           \
    \ val mid = n / 2\n            val left = l.take(mid)\n            val right =\
    \ l.drop(mid)\n            val median = median(left) + median(right)\n       \
    \     val diff = median(left) - median(right)\n            if (diff < 0.0) median\n\
    \            else median + diff\n        }", "        val n = l.length\n     \
    \   val m = l.max\n        val median = (m + n) / 2\n        val half = if (n\
    \ % 2 == 0) n / 2 else n / 2 - 1\n        val median2 = if (half == 0) m else\
    \ (m + n) / 2 - 1\n        val median3 = if (half == 0) m else (m + n) / 2 - 1\n\
    \        val median4 = if (half == 0) m else (m + n) / 2 - 1\n        val median5\
    \ = if (half == 0) m else (m + n) / 2 - 1\n        val median6 = if (half == 0)\
    \ m else (m + n) / 2 - 1\n        val median7 = if (half == 0) m else (m + n)\
    \ / 2 - 1\n        val median8 = if (half == 0) m else (m + n) / 2 - 1\n     \
    \   val median9 = if (half == 0) m else (m + n) / 2 - 1\n        val median10\
    \ = if (half == 0) m else (m + n) / 2 - 1\n        val median11 = if (half ==\
    \ 0) m else (m + n) / 2 - 1\n        val median12 = if (half == 0) m else (m +\
    \ n) / 2 - 1\n        val median13 = if (half == 0) m else (m + n) / 2 - 1\n \
    \       val median14 = if (half == 0) m else (m + n) / 2 - 1\n        val median15\
    \ = if (half == 0) m else (m + n) / 2 - 1\n        val median16 = if (half ==\
    \ 0) m else (m + n) / 2 - 1\n        val median17 = if (half == 0) m else (m +\
    \ n) / 2 - 1\n        val median18 = if (half == 0) m else (m + n) / 2 - 1\n \
    \       val median19 = if (half == 0) m else (m + n) / 2 - 1\n        val median20\
    \ = if (half == 0) m else (m + n) / 2 - 1\n        val median21 = if (half ==\
    \ 0) m else (m + n) / 2 - 1\n        val median22 = if (half == 0) m else (m +\
    \ n) / 2 - 1\n        val median23 = if (half == 0) m else (m + n) / 2 - 1\n \
    \       val median24 = if (half == 0) m else (m + n) / 2 - 1\n        val median25\
    \ = if (half == 0) m else (m + n) / 2 - 1\n        val median26 = if (half ==\
    \ 0) m else (m + n) / 2 - 1\n        val median27 = if (half == 0) m else (m +\
    \ n) / 2 - 1\n        val median28 = if (half == 0) m else (m + n) / 2 - 1\n \
    \       ", "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n\
    \            val mid = n / 2\n            val left = l.slice(0, mid)\n       \
    \     val right = l.slice(mid)\n            val median = (left + right).sorted.last\n\
    \            median.toFloat\n        }", "        val sorted = l.sorted\n    \
    \    val mid = sorted.length / 2\n        val median = (sorted.head + sorted.last)\
    \ / 2.0\n        val medianIndex = sorted.indexOf(median)\n        if (medianIndex\
    \ == 0) median else (sorted.take(medianIndex).last + sorted.last) / 2.0", "  \
    \      val n = l.length\n        if (n < 2) 0.0f\n        else {\n           \
    \ val mid = n / 2\n            val left = l.take(mid)\n            val right =\
    \ l.drop(mid)\n            val median = (left + right).sorted\n            val\
    \ midPoint = (left + right).length / 2\n            median(midPoint)\n       \
    \ }", "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n   \
    \         val mid = n / 2\n            val m1 = l.slice(0, mid)\n            val\
    \ m2 = l.slice(mid)\n            val m = (m1 + m2).sortWith(_ < _)\n         \
    \   val midPoint = m.length / 2\n            val median = m.slice(0, midPoint)\n\
    \            val medianIndex = m.length - 1\n            val medianValue = median(medianIndex)\n\
    \            val medianIndexValue = medianIndex(medianValue)\n            val\
    \ medianIndexValueFloat = medianIndexValue.toFloat\n            val medianIndexValueInt\
    \ = medianIndexValueFloat.toInt\n            val medianIndexValueLong = medianIndexValueFloat.toLong\n\
    \            val medianIndexValueDouble = medianIndexValueFloat.toDouble\n   \
    \         val medianIndexValueFloat = medianIndexValueFloat.toFloat\n        \
    \    val medianIndexValueInt = medianIndexValueFloat.toInt\n            val medianIndexValueLong\
    \ = medianIndexValueFloat.toLong\n            val medianIndexValueDouble = medianIndexValueFloat.toDouble\n\
    \            val medianIndexValueFloat = medianIndexValueFloat.toFloat\n     \
    \       val medianIndexValueInt = medianIndexValueFloat.toInt\n            val\
    \ medianIndexValueLong = medianIndexValueFloat.toLong\n            val medianIndexValueDouble\
    \ = medianIndexValueFloat.toDouble\n            val medianIndexValueFloat = medianIndexValueFloat.toFloat\n\
    \            val medianIndexValueInt = medianIndexValueFloat.toInt\n         \
    \   val medianIndexValueLong = medianIndexValueFloat.toLong\n            val medianIndexValueDouble\
    \ = medianIndexValueFloat.toDouble\n            val medianIndexValueFloat = medianIndexValueFloat.toFloat\n\
    \            val medianIndexValueInt = medianIndexValueFloat.toInt\n         \
    \   val medianIndexValueLong = medianIndexValueFloat.toLong\n            val medianIndexValueDouble\
    \ = medianIndexValueFloat.toDouble\n            val medianIndexValueFloat = medianIndexValueFloat.toFloat\n\
    \            val medianIndexValueInt = medianIndexValueFloat.toInt\n         \
    \   val medianIndexValueLong = medianIndexValueFloat.toLong\n            val medianIndexValueDouble\
    \ = medianIndexValueFloat.toDouble\n            val medianIndexValueFloat = medianIndexValueFloat.toFloat\n\
    \            val medianIndexValueInt = medianIndexValueFloat.toInt\n         \
    \   val medianIndexValueLong = medianIndexValueFloat.toLong\n            val medianIndexValueDouble\
    \ = medianIndexValueFloat.toDouble\n            val medianIndexValueFloat = medianIndexValueFloat.toFloat\n\
    \            val medianIndexValue"]
stop_tokens:
- "\n    }\n"
