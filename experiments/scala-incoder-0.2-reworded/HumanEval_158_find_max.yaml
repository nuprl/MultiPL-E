name: HumanEval_158_find_max
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts a list of strings.\n    // The list contains\
  \ different words. Return the word with maximum number\n    // of unique characters.\
  \ If multiple strings have maximum number of unique\n    // characters, return the\
  \ one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
  name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
  name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
  aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
  \ : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
  name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
  name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
  aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
  abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
  , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
  we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
  we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
  this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
  b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"\
  play\"))).equals((\"play\")));\n    }\n\n}\n"
completions: ["        val counts = words.map(word => word.distinct.length).distinct\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordChars = maxWord.distinct\n\
    \        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex\
    \ = words.indexOf(max", "        val counts = words.map(word => word.distinct.length).distinct\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordString = words.filter(word => word.distinct.length == maxCount).head\n\
    \        val maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength\
    \ = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n\
    \        val maxWordStringLength = maxWordString.distinct.length\n        val\
    \ maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength\
    \ = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n\
    \        val maxWordStringLength = maxWordString.distinct.length\n        val\
    \ maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength\
    \ = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n\
    \        val maxWordStringLength = maxWordString.distinct.length\n        val\
    \ maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength\
    \ = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n\
    \        val maxWordStringLength = maxWordString.distinct.length\n        val\
    \ maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength\
    \ = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n\
    \        val maxWordStringLength = maxWordString.distinct.length\n        val\
    \ maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength\
    \ = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n\
    \        val maxWordStringLength = maxWordString.distinct.length\n        val\
    \ maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength\
    \ = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n\
    \        val maxWordStringLength = maxWordString.distinct.length\n        val\
    \ maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength\
    \ = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n\
    \        val maxWordStringLength = maxWordString.distinct.length\n        val\
    \ maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength\
    \ = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n\
    \        val maxWordStringLength = maxWordString.distinct.length\n        val\
    \ maxWordStringIndex = words.indexOf(maxWordString)\n", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = maxWord.sortWith(_ < _)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.charAt(0))\n\
    \        val maxWordWithMaxCharsFirstCharCount = maxWordWithMaxCharsFirst.count(_\
    \ == maxWordWithMaxCharsFirstChar)\n        if (maxWordWithMaxCharsFirstCharCount\
    \ == 1) {\n            maxWordWithMaxCharsFirstChar\n        } else {\n      \
    \      val maxWordWithMaxCharsFirstCharCountInOrder = maxWordWithMaxCharsFirst.sortWith(_\
    \ < _).count(_ == maxWordWithMaxCharsFirstChar)\n            if (maxWordWithMaxCharsFirstCharCountInOrder\
    \ == 1) {\n                maxWordWithMaxCharsFirstChar\n            } else {\n\
    \                val maxWordWithMaxCharsFirstCharCountInOrderInOrder = maxWordWithMaxCharsFirst.sortWith(_\
    \ < _).sortWith(_ < _).count(_ == maxWordWithMaxCharsFirstChar)\n            \
    \    if (maxWordWithMaxCharsFirstCharCountInOrderInOrder == 1) {\n           \
    \         maxWordWithMaxCharsFirstChar\n                } else {\n           \
    \         val maxWordWithMaxCharsFirstCharCountInOrderInOrderInOrder = maxWordWithMaxCharsFirst.sortWith(_\
    \ < _).sortWith(_ < _).sortWith(_ < _).count(_ == maxWordWithMaxCharsFirstChar)\n\
    \                    if (maxWordWithMaxCharsFirstCharCountInOrderInOrderInOrder\
    \ == 1) {\n                        maxWordWithMaxCharsFirstChar\n            \
    \        } else {\n                        val maxWordWithMaxCharsFirstCharCountInOrderInOrderInOrderInOrder\
    \ = maxWordWithMaxCharsFirst.sortWith(_ < _).sortWith(_ < _).sortWith(_ < _).sortWith(_\
    \ < _).count(_ == maxWordWithMaxCharsFirstChar)\n                        if (maxWordWithMaxCharsFirstCharCountInOrderInOrderInOrderInOrder\
    \ == 1) {\n                            maxWordWithMaxCharsFirstChar\n        \
    \                } else {\n                            val maxWordWithMaxCharsFirstCharCountInOrderInOrderInOrderInOrderInOrder\
    \ = maxWordWithMax", "        val uniqueChars = mutable.HashSet[Char]()\n    \
    \    val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   val count = maxChars.getOrElse(char, 0)\n            maxChars += char -> count\
    \ + 1\n        })\n        val maxKey = maxChars.maxBy(_._2)\n        val maxValue\
    \ = maxChars(maxKey)\n        words.find(word => word.toSet.size == maxValue)",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsString = words.apply(maxWordWithMaxCharsIndex)\n\
    \        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsString.length\n\
    \        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsString", "        val unique = mutable.Map[Char,\
    \ Int]()\n        val maxWord = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                unique.getOrElse(c, 0)\
    \ + 1\n            })\n        })\n        unique.foreach(c => {\n           \
    \ val count = unique.get(c)\n            if (count > maxWord.getOrElse(c, 0))\n\
    \                maxWord.put(c, count)\n        })\n        maxWord.keys.toList.sortWith(_\
    \ < _).head", "        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                uniqueChars += c\n          \
    \      maxChars(c) = maxChars.getOrElse(c, 0) + 1\n            })\n        })\n\
    \        uniqueChars.toList.sortWith(_ < _).head", "        val counts = words.map(word\
    \ => word.count(_ == 'a')).toList\n        val maxCount = counts.max\n       \
    \ val maxWord = words.filter(word => word.count(_ == 'a') == maxCount).head\n\
    \        val maxWordWithCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word\
    \ => word.count(_ == 'a')).head\n        val maxWordWithCountWithMaxCount = words.filter(word\
    \ => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCount = words.filter(word => word.count(_\
    \ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).last.last\n      \
    \  val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word\
    \ => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).last.last.last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_\
    \ == 'a')).last.last.last.last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_\
    \ == 'a')).last.last.last.last.last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_\
    \ == 'a')).last.last.last.last.last.last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_\
    \ == 'a')).last.last.last.last.last.last.last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_\
    \ == 'a')).last.last.last.last.last.last.last.last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWith",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.sortWith(_.length > _.length)\n   \
    \     val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxChars.head\n      \
    \  val maxWordWithMaxCharsWithFirstCharInLexicographicalOrder = maxWordWithMaxCharsWithFirstChar.sortWith(_.compareTo(_)\
    \ < 0)\n        maxWordWithMaxCharsWithFirstCharInLexicographicalOrder.head",
  "        val counts = words.map(x => x.toCharArray).groupBy(x => x).mapValues(_.length)\n\
    \        val maxCount = counts.max\n        val maxChars = counts.filter(x =>\
    \ x._2 == maxCount).keys.toList\n        val maxCharsCount = counts.filter(x =>\
    \ x._2 == maxCount).values.toList\n        val maxCharsIndex = maxCharsCount.indexOf(maxCharsCount.max)\n\
    \        val maxCharsIndex = maxCharsIndex.map(x => maxCharsIndex.indexOf(x)).max\n\
    \        val maxChar = maxChars(maxCharsIndex)\n        val maxCharCount = maxCharsCount(maxCharsIndex)\n\
    \        val maxCharIndex = maxCharsIndex.indexOf(maxChar)\n        val maxCharIndex\
    \ = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex\
    \ = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex\
    \ = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex\
    \ = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex\
    \ = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex\
    \ = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex\
    \ = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex\
    \ = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex\
    \ = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex\
    \ = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex\
    \ = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex\
    \ = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex\
    \ = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex\
    \ = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex\
    \ = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex\
    \ = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex\
    \ = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        ", "        val\
    \ unique = mutable.HashSet[Char]()\n        val maxCount = 0\n        val maxWord\
    \ = \"\"\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               unique.add(c)\n            })\n        })\n        unique.foreach(c\
    \ => {\n            if (unique.count(_ == c) > maxCount) {\n                maxCount\
    \ = unique.count(_ == c)\n                maxWord = c\n            }\n       \
    \ })\n        maxWord", "        val unique = words.map(x => x.toSet).reduceLeft(_\
    \ ++ _)\n        val maxCount = unique.max\n        val maxWord = words.filter(x\
    \ => x.toSet.size == maxCount).sortBy(x => x.toSet).head\n        unique.contains(maxWord)\
    \ ? maxWord : findMax(words.filter(x => !x.toSet.contains(maxWord)))", "     \
    \   val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = maxWord.head\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n       \
    \ val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMax", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWords = words.filter(_.length == maxChars)\n        val maxWord =\
    \ maxWords.head\n        val maxWordWithMaxChars = maxWords.filter(_.length ==\
    \ maxChars).head\n        val maxWordWithMaxCharsAndMaxWords = maxWords.filter(_.length\
    \ == maxChars && words.contains(_)).head\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWords\
    \ = maxWords.filter(_.length == maxChars && words.contains(_) && words.contains(_)).head\n\
    \        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWords = maxWords.filter(_.length\
    \ == maxChars && words.contains(_) && words.contains(_) && words.contains(_)).head\n\
    \        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords =\
    \ maxWords.filter(_.length == maxChars && words.contains(_) && words.contains(_)\
    \ && words.contains(_) && words.contains(_) && words.contains(_)).head\n     \
    \   val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = maxWords.filter(_.length == maxChars && words.contains(_) && words.contains(_)\
    \ && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_)).head\n\
    \        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = maxWords.filter(_.length == maxChars && words.contains(_) && words.contains(_)\
    \ && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_)\
    \ && words.contains(_) && words.contains(_)).head\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = maxWords.filter(_.length == maxChars && words.contains(_) && words.contains(_)\
    \ && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_)\
    \ && words.contains(_) && words.contains(_) && words.contains(_)).head\n     \
    \   val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = maxWords.filter(_.length == maxChars && words.contains(_) && words.contains(_)\
    \ && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_)\
    \ && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_)).head",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += (c, 1)\n            })\n        })\n        uniqueChars.toList.sortWith((a,\
    \ b) => a._2 > b._2).head._1", "        val unique = words.map(x => x.toSet).reduceLeft(_\
    \ ++ _)\n        val maxUnique = unique.max\n        val maxIndex = unique.indexOfMax\n\
    \        words(maxIndex)", "        val chars = words.map(_.toCharArray).flatten\n\
    \        val counts = chars.groupBy(identity).mapValues(_.length)\n        val\
    \ maxCount = counts.max\n        val maxChar = counts.values.max\n        val\
    \ maxWord = words.filter(w => w.toCharArray.forall(c => c == maxChar))\n     \
    \   if (maxCount == maxChar) {\n            words.filter(w => w.toCharArray.forall(c\
    \ => c == maxChar))\n        } else {\n            words.filter(w => w.toCharArray.forall(c\
    \ => c == maxChar)).sortWith(_.toCharArray.forall(c => c == maxChar))\n      \
    \  }", "        val uniqueChars = words.map(_.length).distinct\n        val maxChars\
    \ = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMax", "        val chars = words.map(_.toCharArray).flatten\n\
    \        val counts = chars.groupBy(identity).mapValues(_.length)\n        val\
    \ maxCount = counts.max\n        val maxChar = counts.mapValues(_.max).max\n \
    \       val maxWord = words.filter(w => w.toCharArray.map(_.toInt).max == maxChar)\n\
    \        val maxWordWithMaxCount = words.filter(w => w.toCharArray.map(_.toInt).max\
    \ == maxCount && w < maxWord)\n        val maxWordWithMaxCountWithMaxChar = words.filter(w\
    \ => w.toCharArray.map(_.toInt).max == maxCount && w.toCharArray.map(_.toInt).max\
    \ == maxChar)\n        val maxWordWithMaxCountWithMaxCharWithMaxWord = words.filter(w\
    \ => w.toCharArray.map(_.toInt).max == maxCount && w.toCharArray.map(_.toInt).max\
    \ == maxChar && w < maxWord)\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWord\
    \ = words.filter(w => w.toCharArray.map(_.toInt).max == maxCount && w.toCharArray.map(_.toInt).max\
    \ == maxChar && w < maxWord && w < maxWordWithMaxCount)\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(w => w.toCharArray.map(_.toInt).max == maxCount && w.toCharArray.map(_.toInt).max\
    \ == maxChar && w < maxWord && w < maxWordWithMaxCount && w < maxWordWithMaxCountWithMaxChar)\n\
    \        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(w => w.toCharArray.map(_.toInt).max == maxCount && w.toCharArray.map(_.toInt).max\
    \ == maxChar && w < maxWord && w < maxWordWithMaxCount && w < maxWordWithMaxCountWithMaxChar\
    \ && w < maxWordWithMaxCountWithMaxCharWithMaxWord)\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(w => w.toCharArray.map(_.toInt).max == maxCount && w.toCharArray.map(_.toInt).max\
    \ == maxChar && w < maxWord && w < maxWordWithMax", "        val chars = words.map(_.toCharArray).flatten\n\
    \        val unique = chars.distinct\n        val maxCount = unique.count(_ ==\
    \ chars.max)\n        val maxChar = unique.max\n        val maxCharIndex = chars.indexOf(maxChar)\n\
    \        val maxCharIndex = if (maxCharIndex == -1) words.length - 1 else maxCharIndex\n\
    \        val maxWord = words(maxCharIndex)\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = if (maxWordIndex == -1) words.length - 1 else maxWordIndex\n\
    \        if (maxCount > words.length) maxWord\n        else words(maxWordIndex)",
  "        val maxCount = words.foldLeft(Map[String, Int]())((map, word) => {\n  \
    \          val count = map.getOrElse(word, 0) + 1\n            map += (word ->\
    \ count)\n            if (count > map.getOrElse(word, 0))\n                map\n\
    \            else\n                map + (word -> 1)\n        })\n        val\
    \ maxKey = maxCount.keys.max\n        val maxValue = maxCount.values.max\n   \
    \     val maxWord = words.filter(w => w == maxKey).head\n        if (maxValue\
    \ == maxCount.values.max)\n            maxWord\n        else\n            words.filter(w\
    \ => w == maxKey).sortBy(w => w.length).head", "        val counts = words.map(word\
    \ => word.distinct.length).distinct\n        val maxCount = counts.max\n     \
    \   val maxWord = words.filter(word => word.distinct.length == maxCount).head\n\
    \        val maxWordCount = words.filter(word => word.distinct.length == maxCount).length\n\
    \        if (maxWordCount == 1) maxWord\n        else findMax(words.filter(word\
    \ => word.distinct.length == maxWordCount))", "        val unique = words.map(x\
    \ => x.distinct).flatten.toSet\n        val maxCount = words.map(x => x.distinct).flatten.toSet.max\n\
    \        val maxWord = words.filter(x => unique.contains(x)).sortBy(x => x.length).last\n\
    \        val maxWordLength = maxWord.length\n        val maxWordLength = maxWordLength\
    \ + maxWord.takeWhile(x => unique.contains(x)).last.length\n        if (maxWordLength\
    \ > maxCount) {\n            maxWord\n        } else {\n            words.filter(x\
    \ => unique.contains(x)).sortBy(x => x.length).last\n        }", "        val\
    \ uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(_.length == maxChars).head\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLength\
    \ = words.sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLengthReversed\
    \ = words.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.head\n    \
    \    val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxUniqueChars\
    \ = uniqueChars.max\n        val maxWord = words.filter(_.length == maxUniqueChars)\n\
    \        val maxWordWithMaxUniqueChars = words.filter(_.length == maxUniqueChars)\n\
    \        val maxWordWithMaxUniqueCharsFirst = words.filter(_.length == maxUniqueChars)\n\
    \        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrder = words.filter(_.length\
    \ == maxUniqueChars)\n        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInReverse\
    \ = words.filter(_.length == maxUniqueChars).reverse\n        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInReverseInLexicographicalOrder\
    \ = words.filter(_.length == maxUniqueChars).reverse\n        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInReverseInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxUniqueChars).reverse.reverse\n        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInReverseInLexicographicalOrderInLexicographicalOrderInReverse\
    \ = words.filter(_.length == maxUniqueChars).reverse.reverse.reverse\n       \
    \ val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInReverseInLexicographicalOrderInLexicographicalOrderInReverseInLexicographicalOrder\
    \ = words.filter(_.length == maxUniqueChars).reverse.reverse.reverse.reverse\n\
    \        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInReverseInLexicographicalOrderInLexicographicalOrderInReverseInLexicographicalOrderInReverseInLexicographicalOrder\
    \ = words.filter(_.length == maxUniqueChars).reverse.reverse.reverse.reverse.reverse.reverse\n\
    \        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInReverseInLexicographicalOrderInLexicographicalOrderInReverseInLexicographicalOrderInReverseInLexicographicalOrderInReverse\
    \ = words.filter(_.length == maxUniqueChars).reverse.reverse.reverse.reverse.reverse.reverse.reverse\n\
    \        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInReverseInLexicographicalOrderInLexicographicalOrderInReverseInLexicographicalOrderInReverseInLexicographicalOrderInReverseInLexicographicalOrder\
    \ = words.filter(_.length == maxUniqueChars).reverse.reverse.reverse.reverse.reverse.reverse",
  "        val unique = mutable.HashSet[String]()\n        val maxCount = 0\n    \
    \    val maxWord = \"\"\n        words.foreach(word => {\n            val count\
    \ = unique.count(_ == word)\n            if (count > maxCount) {\n           \
    \     maxCount = count\n                maxWord = word\n            }\n      \
    \      unique += word\n        })\n        maxWord", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars\
    \ = maxChars + (c -> count)\n        })\n        val maxKey = maxChars.maxBy(_._2)._1\n\
    \        words.find(word => word.toSet.size == uniqueChars.size)", "        val\
    \ uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashSet[Char]()\n\
    \        val maxWord = mutable.HashSet[String]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \       })\n        })\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                maxChars += c\n            })\n        })\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                if (uniqueChars.contains(c))\
    \ {\n                    uniqueChars -= c\n                } else {\n        \
    \            if (maxChars.contains(c)) {\n                        maxChars -=\
    \ c\n                    } else {\n                        if (maxWord.contains(word))\
    \ {\n                            maxWord -= word\n                        } else\
    \ {\n                            maxWord += word\n                        }\n\
    \                    }\n                }\n            })\n        })\n      \
    \  if (maxWord.size == 1) {\n            maxWord.head\n        } else {\n    \
    \        val maxWords = maxWord.toList\n            val maxWordIndex = maxWords.indexOf(maxWords.max)\n\
    \            maxWords(maxWordIndex)\n        }", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        val maxChars = mutable.Map[Char, Int]()\n        val maxWord\
    \ = mutable.Map[Char, String]()\n        words.foreach(word => {\n           \
    \ word.foreach(c => {\n                uniqueChars(c) = uniqueChars(c) + 1\n \
    \           })\n        })\n        uniqueChars.foreach(c => {\n            val\
    \ count = uniqueChars(c)\n            if (count > maxChars(c)) {\n           \
    \     maxChars(c) = count\n                maxWord(c) = \"\"\n            }\n\
    \        })\n        uniqueChars.foreach(c => {\n            val count = uniqueChars(c)\n\
    \            if (count > maxChars(c)) {\n                maxChars(c) = count\n\
    \                maxWord(c) = \"\"\n            }\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = uniqueChars(c)\n            if (count > maxChars(c))\
    \ {\n                maxChars(c) = count\n                maxWord(c) = \"\"\n\
    \            }\n        })\n        uniqueChars.foreach(c => {\n            val\
    \ count = uniqueChars(c)\n            if (count > maxChars(c)) {\n           \
    \     maxChars(c) = count\n                maxWord(c) = \"\"\n            }\n\
    \        })\n        uniqueChars.foreach(c => {\n            val count = uniqueChars(c)\n\
    \            if (count > maxChars(c)) {\n                maxChars(c) = count\n\
    \                maxWord(c) = \"\"\n            }\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = uniqueChars(c)\n            if (count > maxChars(c))\
    \ {\n                maxChars(c) = count\n                maxWord(c) = \"\"\n\
    \            }\n        })\n        uniqueChars.foreach(c => {\n            val\
    \ count = uniqueChars(c)\n            if (count > maxChars(c)) {\n           \
    \     maxChars(c) = count\n                maxWord(c) = \"\"\n            }\n\
    \        })\n        uniqueChars.foreach(c => {\n            val count = uniqueChars(c)\n\
    \            if (count > maxChars(c)) {\n                maxChars(c) = count\n\
    \                maxWord(c) = \"\"\n            }\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = uniqueChars(c)\n            if (count > maxChars(c))\
    \ {\n                maxChars(c) = count\n                maxWord(c) = \"\"\n\
    \            }\n        })\n        uniqueChars.foreach(c => {\n            val\
    \ count = uniqueChars(c)\n            if (count > maxChars(c)) {\n           \
    \     maxChars(c) = count\n                maxWord(c) = \"\"\n            }\n\
    \        })\n", "        val unique = words.map(_.length).distinct\n        val\
    \ maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordWithCount = words.filter(_.length == maxCount).sortBy(_.length).head\n\
    \        val maxWordWithCountWithMax = words.filter(_.length == maxCount).sortBy(_.length).last\n\
    \        val maxWordWithCountWithMaxWithMax = words.filter(_.length == maxCount).sortBy(_.length).last.sortBy(_.length).last\n\
    \        val maxWordWithCountWithMaxWithMaxWithMax = words.filter(_.length ==\
    \ maxCount).sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMax = words.filter(_.length\
    \ == maxCount).sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMax = words.filter(_.length\
    \ == maxCount).sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(_.length\
    \ == maxCount).sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxUniqueChars\
    \ = uniqueChars.max\n        val maxWord = words.filter(_.length == maxUniqueChars).min\n\
    \        val maxWordWithMaxUniqueChars = words.filter(_.length == maxUniqueChars).max\n\
    \        val maxWordWithMinUniqueChars = words.filter(_.length == uniqueChars.min).max\n\
    \        val maxWordWithMaxUniqueCharsAndMinUniqueChars = words.filter(_.length\
    \ == maxUniqueChars && _.length == uniqueChars.min).max\n        val maxWordWithMaxUniqueCharsAndMinUniqueCharsAndMaxUniqueChars\
    \ = words.filter(_.length == maxUniqueChars && _.length == uniqueChars.min &&\
    \ _.length == uniqueChars.max).max\n        val maxWordWithMaxUniqueCharsAndMinUniqueCharsAndMaxUniqueCharsAndMaxUniqueChars\
    \ = words.filter(_.length == maxUniqueChars && _.length == uniqueChars.min &&\
    \ _.length == uniqueChars.max && _.length == uniqueChars.max).max\n        val\
    \ maxWordWithMaxUniqueCharsAndMinUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueChars\
    \ = words.filter(_.length == maxUniqueChars && _.length == uniqueChars.min &&\
    \ _.length == uniqueChars.max && _.length == uniqueChars.max && _.length == uniqueChars.max).max\n\
    \        val maxWordWithMaxUniqueCharsAndMinUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueChars\
    \ = words.filter(_.length == maxUniqueChars && _.length == uniqueChars.min &&\
    \ _.length == uniqueChars.max && _.length == uniqueChars.max && _.length == uniqueChars.max\
    \ && _.length == uniqueChars.max).max\n        val maxWordWithMaxUniqueCharsAndMinUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueChars\
    \ = words.filter(_.length == maxUniqueChars && _.length == uniqueChars.min &&\
    \ _.length == uniqueChars.max && _.length == uniqueChars.max && _.length == uniqueChars.max\
    \ && _.length == uniqueChars.max && _.length == uniqueChars.max).max\n       \
    \ val maxWordWithMaxUniqueCharsAndMinUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueChars\
    \ = words.filter(_.length == maxUniqueChars && _.length == uniqueChars.min &&\
    \ _.length == uniqueChars.", "        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         uniqueChars += (char -> (uniqueChars(char) + 1))\n            })\n \
    \       })\n        uniqueChars.maxBy(_._2)._1", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.head\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex + 1\n    \
    \    val maxWords = words.filter(_.length == maxChars).sortBy(_.length)\n    \
    \    val maxWord = maxWords.head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWords = words.filter(_.length\
    \ == maxChars).sortBy(_.length)\n        val maxWord = maxWords.head\n       \
    \ val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex\
    \ + 1\n        val maxWords = words.filter(_.length == maxChars).sortBy(_.length)\n\
    \        val maxWord = maxWords.head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWords = words.filter(_.length\
    \ == maxChars).sortBy(_.length)\n        val maxWord = maxWords.head\n       \
    \ val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex\
    \ + 1\n        val maxWords = words.filter(_.length == maxChars).sortBy(_.length)\n\
    \        val maxWord = maxWords.head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWords = words.filter(_.length\
    \ == maxChars).sortBy(_.length)\n        val maxWord = maxWords.head\n       \
    \ val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex\
    \ + 1\n        val maxWords = words.filter(_.length == maxChars).sortBy(_.length)\n\
    \        val maxWord = maxWords.head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWords = words.filter(_.length\
    \ == maxChars).sortBy(_.length)\n        val maxWord = maxWords.head\n       \
    \ val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex\
    \ + 1\n        val maxWords = words.filter(_.length == maxChars).sortBy(_.length)\n\
    \        val maxWord = maxWords.head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord", "        val\
    \ uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n  \
    \          word.foreach(char => {\n                uniqueChars += (char -> (uniqueChars(char)\
    \ + 1))\n            })\n        })\n        uniqueChars.maxBy(_._2)._1", "  \
    \      val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars\
    \ += c -> count\n        })\n        val maxKey = maxChars.maxBy(_._2)._1\n  \
    \      words.find(word => word.toString.contains(maxKey))", "        val chars\
    \ = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(w\
    \ => w.toCharArray.distinct.size == maxChars)\n        val maxWordString = maxWord.mkString(\"\
    \")\n        val maxWordLength = maxWordString.length\n        val maxWordIndex\
    \ = words.indexOf(maxWordString)\n        val maxWordString = words.filter(w =>\
    \ w.toCharArray.distinct.size == maxChars)(maxWordIndex)\n        val maxWordLength\
    \ = maxWordString.length\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words.filter(w => w.toCharArray.distinct.size ==\
    \ maxChars)(maxWordIndex)\n        val maxWordLength = maxWordString.length\n\
    \        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString\
    \ = words.filter(w => w.toCharArray.distinct.size == maxChars)(maxWordIndex)\n\
    \        val maxWordLength = maxWordString.length\n        val maxWordIndex =\
    \ words.indexOf(maxWordString)\n        val maxWordString = words.filter(w =>\
    \ w.toCharArray.distinct.size == maxChars)(maxWordIndex)\n        val maxWordLength\
    \ = maxWordString.length\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words.filter(w => w.toCharArray.distinct.size ==\
    \ maxChars)(maxWordIndex)\n        val maxWordLength = maxWordString.length\n\
    \        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString\
    \ = words.filter(w => w.toCharArray.distinct.size == maxChars)(maxWordIndex)\n\
    \        val maxWordLength = maxWordString.length\n        val maxWordIndex =\
    \ words.indexOf(maxWordString)\n        val maxWordString = words.filter(w =>\
    \ w.toCharArray.distinct.size == maxChars)(maxWordIndex)\n        val maxWordLength\
    \ = maxWordString.length\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words.filter(w => w.toCharArray.distinct.size ==\
    \ maxChars)(maxWordIndex)\n        val maxWordLength = maxWordString.length\n\
    \        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString\
    \ = words.filter(w => w.toCharArray.distinct.size == maxChars)(maxWordIndex)\n\
    \        val maxWordLength = maxWordString.length\n        val maxWordIndex =\
    \ words.indexOf(maxWordString)\n        val maxWordString = words.filter(w =>\
    \ w.toCharArray.distinct.size == maxChars)(maxWord", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            maxChars += c -> uniqueChars.count(_ == c)\n        })\n \
    \       val maxCharsSorted = maxChars.toSeq.sortBy(_._2).reverse\n        val\
    \ maxCharsSortedFirst = maxCharsSorted.head._1\n        words.find(word => word.count(_\
    \ == maxCharsSortedFirst) == uniqueChars.count(_ == maxCharsSortedFirst))", " \
    \       val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashSet[Char]()\n\
    \        val maxWord = mutable.HashSet[String]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \       })\n        })\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                maxChars += c\n            })\n        })\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                maxWord = maxWord.filterNot(_\
    \ == word)\n            })\n        })\n        val maxCharsCount = maxChars.size\n\
    \        val maxWordCount = maxWord.size\n        if (maxCharsCount > maxWordCount)\
    \ {\n            maxWord.head\n        } else {\n            maxChars.head\n \
    \       }", "        val maxCount = words.foldLeft(0)((count, word) => count +\
    \ word.distinct().length)\n        val maxWord = words.filter(word => word.distinct().length\
    \ == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   words.take(maxWordIndex).mkString(\" \")", "        val unique = mutable.HashSet[String]()\n\
    \        val maxCount = 0\n        words.foreach(word => {\n            val count\
    \ = unique.count(_ == word)\n            if (count > maxCount) {\n           \
    \     maxCount = count\n            }\n            unique += word\n        })\n\
    \        if (maxCount == 0) {\n            \"\"\n        } else {\n          \
    \  words.sortWith((word1, word2) => unique.count(_ == word1) < unique.count(_\
    \ == word2))\n        }", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith((a, b) => a.compareTo(b)\
    \ > 0)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n    \
    \    val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.charAt(0)\n \
    \       val maxWordWithMaxCharsFirstCharCount = maxWordWithMaxCharsFirst.count(_\
    \ == maxWordWithMaxCharsFirstChar)\n        if (maxWordWithMaxCharsFirstCharCount\
    \ == 1) {\n            maxWordWithMaxCharsFirstChar\n        } else {\n      \
    \      maxWordWithMaxCharsFirstChar\n        }", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \          })\n        })\n        uniqueChars.foreach(c => {\n            maxChars\
    \ += c -> uniqueChars.count(_ == c)\n        })\n        val maxCharsSorted =\
    \ maxChars.toSeq.sortBy(_._2).reverse\n        val maxCharsSortedFirst = maxCharsSorted.head\n\
    \        val maxCharsSortedFirstKey = maxCharsSorted.keys.toSeq.find(_ == maxCharsSortedFirst._1)\n\
    \        val maxCharsSortedFirstValue = maxCharsSorted.values.toSeq.find(_ ==\
    \ maxCharsSortedFirst._2)\n        val maxCharsSortedFirstKeyValue = maxCharsSortedFirst._1\
    \ -> maxCharsSortedFirst._2\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValue.toString\n\
    \        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.substring(1,\
    \ maxCharsSortedFirstKeyValueString.length)\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValueString.substring(0, maxCharsSortedFirstKeyValueString.length\
    \ - 1)\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.substring(0,\
    \ maxCharsSortedFirstKeyValueString.length - 1)\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValueString.substring(0, maxCharsSortedFirstKeyValueString.length\
    \ - 1)\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.substring(0,\
    \ maxCharsSortedFirstKeyValueString.length - 1)\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValueString.substring(0, maxCharsSortedFirstKeyValueString.length\
    \ - 1)\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.substring(0,\
    \ maxCharsSortedFirstKeyValueString.length - 1)\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValueString.substring(0, maxCharsSortedFirstKeyValueString.length\
    \ - 1)\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.substring(0,\
    \ maxCharsSortedFirstKeyValueString.length - 1)\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValueString.substring(0, maxCharsSortedFirstKeyValueString.length\
    \ - 1)\n", "        val uniqueChars = words.map(_.length).distinct\n        val\
    \ maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.sortWith(_ < _)\n        val maxWordWithMaxCharsFirst\
    \ = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstChars = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsMax = maxWordWithMaxCharsFirstChars.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirst = maxWordWithMaxCharsFirstCharsMax.head\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstChars = maxWordWithMaxCharsFirstCharsMaxFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMax = maxWordWithMaxCharsFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst.head\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstChars = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst =\
    \ maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst.head\n     \
    \   val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstChars =\
    \ maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMax\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstChars", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWord = words.filter(_.length == maxChars).min\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars)\n        val maxWordWithMaxCharsSortedByFirstChar\
    \ = maxWordWithMaxChars.sortBy(_.charAt(0))\n        val maxWordWithMaxCharsSortedByFirstCharReversed\
    \ = maxWordWithMaxCharsSortedByFirstChar.reverse\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirst\
    \ = maxWordWithMaxCharsSortedByFirstCharReversed.head\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstChar\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirst.charAt(0)\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstChar.reverse\n        val\
    \ maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirst = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversed.head\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstChar\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirst.charAt(0)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirst\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirst.head\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstChar\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstChar.charAt(0)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstCharReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstCharReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstCharReversedFirst\
    \ = maxWordWithMaxChars", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && _.toSet.size == uniqueChars.max)\n        val maxWordWithMaxCharsFirst =\
    \ words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.compareTo(_)\
    \ < 0).head == words.toList.sortWith(_.compareTo(_) < 0).head)\n        val maxWordWithMaxCharsFirstWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.compareTo(_)\
    \ < 0).head == words.toList.sortWith(_.compareTo(_) < 0).head && words.toList.sortWith(_.compareTo(_)\
    \ < 0).head == words.toList.sortWith(_.compareTo(_) < 0).head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.compareTo(_)\
    \ < 0).head == words.toList.sortWith(_.compareTo(_) < 0).head && words.toList.sortWith(_.compareTo(_)\
    \ < 0).head == words.toList.sortWith(_.compareTo(_) < 0).head && words.toList.sortWith(_.compareTo(_)\
    \ < 0).head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.compareTo(_)\
    \ < 0).head == words.toList.sortWith(_.compareTo(_) < 0).head && words.toList.sortWith(_.compareTo(_)\
    \ < 0).head == words.toList.sortWith(_.compareTo(_) < 0).head && words.toList.sortWith(_.compareTo(_)\
    \ < 0).head && words.toList.sortWith(_.compareTo(_) < 0).head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.compareTo(_)\
    \ < 0).head == words.toList.sortWith(_.compareTo(_) < 0).head && words.toList.sortWith(_.compareTo(_)\
    \ < 0).head == words.toList.sortWith(_.compareTo(_", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxCount = uniqueChars.max\n   \
    \     val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        val maxWordChars = maxWord.distinct\n    \
    \    if (maxWordIndex == 0) maxWord\n        else words.take(maxWordIndex).mkString(\"\
    \") + maxWordChars.mkString(\"\")", "        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWords = words.filter(_.toCharArray.forall(uniqueChars.contains))\n\
    \        val maxWord = maxWords.min\n        val maxWordLength = maxWord.length\n\
    \        val maxWordChars = maxWord.map(_.toCharArray).flatten.distinct\n    \
    \    val maxWordCharCount = maxWordChars.max\n        val maxWordCharCountLength\
    \ = maxWordCharCount.length\n        val maxWordCharCountUnique = maxWordCharCount.distinct\n\
    \        val maxWordCharCountUniqueLength = maxWordCharCountUnique.length\n  \
    \      val maxWordCharCountUniqueUnique = maxWordCharCountUnique.distinct\n  \
    \      val maxWordCharCountUniqueUniqueLength = maxWordCharCountUniqueUnique.length\n\
    \        val maxWordCharCountUniqueUniqueUnique = maxWordCharCountUniqueUnique.distinct\n\
    \        val maxWordCharCountUniqueUniqueUniqueLength = maxWordCharCountUniqueUniqueUnique.length\n\
    \        val maxWordCharCountUniqueUniqueUniqueUnique = maxWordCharCountUniqueUniqueUniqueUnique.distinct\n\
    \        val maxWordCharCountUniqueUniqueUniqueUniqueLength = maxWordCharCountUniqueUniqueUniqueUniqueUnique.length\n\
    \        val maxWordCharCountUniqueUniqueUniqueUniqueUnique = maxWordCharCountUniqueUniqueUniqueUniqueUnique.distinct\n\
    \        val maxWordCharCountUniqueUniqueUniqueUniqueUniqueLength = maxWordCharCountUniqueUniqueUniqueUniqueUniqueUnique.length\n\
    \        val maxWordCharCountUniqueUniqueUniqueUniqueUniqueUnique = maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUnique.distinct\n\
    \        val maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueLength = maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique.length\n\
    \        val maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUnique = maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique.distinct\n\
    \        val maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueLength\
    \ = maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique.length\n\
    \        val maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique\
    \ = maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique.distinct\n\
    \        val maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueLength\
    \ = maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique.length\n\
    \        val maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique\
    \ = maxWordCharCountUniqueUniqueUniqueUniqueUnique", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char\
    \ => {\n            maxChars += char -> uniqueChars.count(_ == char)\n       \
    \ })\n        uniqueChars.toList.sortWith(_._2 > _._2).head._1", "        val\
    \ uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars\
    \ += c -> count\n        })\n        val maxKey = maxChars.keys.max\n        val\
    \ maxValue = maxChars(maxKey)\n        words.find(word => word.toString.count(_\
    \ == maxKey) == maxValue)", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \              maxChars += c -> 0\n            })\n        })\n        uniqueChars.maxBy(maxChars)._1",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars\
    \ += c -> count\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith((a,\
    \ b) => b._2 > a._2)\n        val maxCharsSortedKey = maxCharsSorted.head._1\n\
    \        val maxCharsSortedValue = maxCharsSorted.head._2\n        words.find(word\
    \ => word.toString.contains(maxCharsSortedKey))", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(w\
    \ => w.length == maxChars)\n        val maxWordWithMaxChars = words.filter(w =>\
    \ w.length == maxChars && w < maxWord)\n        val maxWordWithMaxCharsFirst =\
    \ words.filter(w => w.length == maxChars && w > maxWord)\n        val maxWordWithMaxCharsFirstInLex\
    \ = words.filter(w => w.length == maxChars && w < maxWordWithMaxCharsFirst)\n\
    \        val maxWordWithMaxCharsFirstInLexFirst = words.filter(w => w.length ==\
    \ maxChars && w > maxWordWithMaxCharsFirst)\n        val maxWordWithMaxCharsFirstInLexFirstInLex\
    \ = words.filter(w => w.length == maxChars && w < maxWordWithMaxCharsFirstInLexFirst)\n\
    \        val maxWordWithMaxCharsFirstInLexFirstInLexFirst = words.filter(w =>\
    \ w.length == maxChars && w > maxWordWithMaxCharsFirstInLexFirst)\n        val\
    \ maxWordWithMaxCharsFirstInLexFirstInLexFirstInLex = words.filter(w => w.length\
    \ == maxChars && w < maxWordWithMaxCharsFirstInLexFirstInLexFirst)\n        val\
    \ maxWordWithMaxCharsFirstInLexFirstInLexFirstInLexFirst = words.filter(w => w.length\
    \ == maxChars && w > maxWordWithMaxCharsFirstInLexFirstInLexFirst)\n        val\
    \ maxWordWithMaxCharsFirstInLexFirstInLexFirstInLexFirstInLex = words.filter(w\
    \ => w.length == maxChars && w < maxWordWithMaxCharsFirstInLexFirstInLexFirstInLexFirst)\n\
    \        val maxWordWithMaxCharsFirstInLexFirstInLexFirstInLexFirstInLexFirst\
    \ = words.filter(w => w.length == maxChars && w > maxWordWithMaxCharsFirstInLexFirstInLexFirstInLexFirst)\n\
    \        val maxWordWithMaxCharsFirstInLexFirstInLexFirstInLexFirstInLexFirstInLex\
    \ = words.filter(w => w.length == maxChars && w < maxWordWithMaxCharsFirstInLexFirstInLexFirstInLexFirstInLexFirst)\n\
    \        val maxWordWithMaxCharsFirstInLexFirstInLexFirstInLexFirstInLexFirstInLexFirst\
    \ = words.filter(", "        val uniqueChars = mutable.HashSet[Char]()\n     \
    \   val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n\
    \            word.foreach(c => {\n                uniqueChars += c\n         \
    \   })\n        })\n        uniqueChars.foreach(c => {\n            val count\
    \ = maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n       \
    \ })\n        val maxCharsSorted = maxChars.toSeq.sortBy(_._2).reverse\n     \
    \   val maxCharsSortedFirst = maxCharsSorted.head\n        val maxCharsSortedFirstKey\
    \ = maxCharsSorted.keys.toSeq.find(_ == maxCharsSortedFirst._1)\n        val maxCharsSortedFirstValue\
    \ = maxCharsSorted.values.toSeq.find(_ == maxCharsSortedFirst._2)\n        val\
    \ maxCharsSortedFirstKeyValue = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2\n\
    \        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n\
    \        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n\
    \        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n\
    \        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n\
    \        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n\
    \        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n\
    \        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n\
    \        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n\
    \        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n\
    \        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n\
    \        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n\
    \        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 ", " \
    \       val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxChars && _.toSet.size\
    \ == uniqueChars.size)\n        val maxWordWithMaxCharsSortedByFirstChar = maxWordWithMaxChars.sortBy(_.charAt(0))\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversed = maxWordWithMaxCharsSortedByFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstWord = maxWordWithMaxCharsSortedByFirstCharReversed.head\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxChars\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstWord.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstChar\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxChars.sortBy(_.charAt(0))\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstCharReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstCharReversedFirstWord\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstCharReversed.head\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxChars\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstCharReversedFirstWord.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstChar\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxChars",
  "        val unique = words.map(x => x.toSet).reduce(_|)\n        val max = unique.max\n\
    \        val index = words.indexWhere(x => x.toSet == max)\n        words(index)",
  "        val unique = words.map(_.length).distinct\n        val maxCount = unique.max\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        val maxWordIndex = if (maxWordIndex == 0)\
    \ words.size else maxWordIndex\n        words.take(maxWordIndex).mkString(\" \"\
    )", "        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += (c ->\
    \ 1)\n            })\n        })\n        val maxChar = uniqueChars.maxBy(_._2)._1\n\
    \        words.find(word => word.count(_ == maxChar) == uniqueChars(maxChar)).get",
  "        val chars = words.map(_.toCharArray).flatten\n        val counts = chars.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = counts.max\n        val maxChars = counts.filter(x =>\
    \ x._2 == maxCount).keys\n        val maxCharsCount = maxChars.map(_.toInt)\n\
    \        val maxCharsIndex = maxCharsCount.indexOf(maxCharsCount.max)\n      \
    \  val maxCharsString = maxChars(maxCharsIndex)\n        val maxCharsIndex = words.indexOf(maxCharsString)\n\
    \        words(maxCharsIndex)", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxWord = mutable.HashMap[Int, String]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \          })\n        })\n        uniqueChars.toList.sortWith(_ < _).foreach(c\
    \ => {\n            val count = maxWord.getOrElse(0, 0) + uniqueChars.count(_\
    \ == c)\n            maxWord.update(0, count)\n        })\n        maxWord.maxBy(_._1)._1",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWords = words.filter(w => w.length == maxChars)\n\
    \        val maxWord = maxWords.min\n        val maxWordWithMaxChars = words.filter(w\
    \ => w.length == maxChars && w < maxWord)\n        if (maxWordWithMaxChars.isEmpty)\
    \ maxWord\n        else maxWordWithMaxChars.min", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \          })\n        })\n        uniqueChars.foreach(c => {\n            val\
    \ count = maxChars.getOrElse(c, 0) + 1 // count of unique chars\n            maxChars\
    \ += c -> count\n        })\n        val maxKey = maxChars.maxBy(_._2)._1\n  \
    \      words.find(word => word.toString.contains(maxKey))", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1 \n            maxChars\
    \ += c -> count\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith(_.value\
    \ < _.value)\n        val maxCharsSortedKey = maxCharsSorted.last._1\n       \
    \ val maxCharsSortedValue = maxCharsSorted.last._2\n        words.find(word =>\
    \ word.contains(maxCharsSortedKey))", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith((a, b) => a.compareTo(b)\
    \ < 0).head\n        val maxWordWithMaxCharsFirstInLex = maxWordWithMaxChars.sortWith((a,\
    \ b) => a.compareTo(b) < 0).head\n        val maxWordWithMaxCharsFirstInLexLex\
    \ = maxWordWithMaxCharsFirstInLex.sortWith((a, b) => a.compareTo(b) < 0).head\n\
    \        val maxWordWithMaxCharsFirstInLexLexLex = maxWordWithMaxCharsFirstInLexLex.sortWith((a,\
    \ b) => a.compareTo(b) < 0).head\n        val maxWordWithMaxCharsFirstInLexLexLexLex\
    \ = maxWordWithMaxCharsFirstInLexLexLex.sortWith((a, b) => a.compareTo(b) < 0).head\n\
    \        val maxWordWithMaxCharsFirstInLexLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLexLex.sortWith((a,\
    \ b) => a.compareTo(b) < 0).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLex\
    \ = maxWordWithMaxCharsFirstInLexLexLexLex.sortWith((a, b) => a.compareTo(b) <\
    \ 0).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLexLex.sortWith((a,\
    \ b) => a.compareTo(b) < 0).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLex\
    \ = maxWordWithMaxCharsFirstInLexLexLexLexLex.sortWith((a, b) => a.compareTo(b)\
    \ < 0).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLexLexLex.sortWith((a,\
    \ b) => a.compareTo(b) < 0).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLex\
    \ = maxWordWithMaxCharsFirstInLexLexLexLexLexLex.sortWith((a, b) => a.compareTo(b)\
    \ < 0).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex.sortWith((a,\
    \ b) => a.compareTo(b) < 0).head\n        ", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars(c) += 1\n            })\n        })\n        val maxChar\
    \ = uniqueChars.maxBy(_._2)._1\n        words.find(word => word.count(_ == maxChar)\
    \ == uniqueChars(maxChar))", "        val maxCount = words.map(_.length).max\n\
    \        val maxWord = words.filter(_.length == maxCount).sortBy(_.length).head\n\
    \        val maxWordLength = maxWord.length\n        val maxWordWithUniqueChars\
    \ = words.filter(_.length == maxWordLength).map(_.toSet).reduce(_|_)\n       \
    \ val maxWordWithUniqueCharsLength = maxWordWithUniqueChars.length\n        val\
    \ maxWordWithUniqueCharsFirst = words.filter(_.length == maxWordWithUniqueCharsLength).sortBy(_.toSet).head\n\
    \        val maxWordWithUniqueCharsFirstLength = maxWordWithUniqueCharsFirst.length\n\
    \        val maxWordWithUniqueCharsFirstFirst = words.filter(_.length == maxWordWithUniqueCharsFirstLength).sortBy(_.toSet).head\n\
    \        val maxWordWithUniqueCharsFirstFirstFirst = words.filter(_.length ==\
    \ maxWordWithUniqueCharsFirstFirstLength).sortBy(_.toSet).head\n        val maxWordWithUniqueCharsFirstFirstFirstFirst\
    \ = words.filter(_.length == maxWordWithUniqueCharsFirstFirstFirstLength).sortBy(_.toSet).head\n\
    \        val maxWordWithUniqueCharsFirstFirstFirstFirstFirst = words.filter(_.length\
    \ == maxWordWithUniqueCharsFirstFirstFirstFirstLength).sortBy(_.toSet).head\n\
    \        val maxWordWithUniqueCharsFirstFirstFirstFirstFirstFirst = words.filter(_.length\
    \ == maxWordWithUniqueCharsFirstFirstFirstFirstFirstLength).sortBy(_.toSet).head\n\
    \        val maxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstFirst = words.filter(_.length\
    \ == maxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstLength).sortBy(_.toSet).head\n\
    \        val maxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstFirstFirst =\
    \ words.filter(_.length == maxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstFirstLength).sortBy(_.toSet).head\n\
    \        val maxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstFirstFirst =\
    \ words.filter(_.length == maxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstFirstLength).sortBy(_.toSet).head\n\
    \        val maxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstFirstFirstFirst\
    \ = words.filter(_.length == maxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstFirstFirstFirstLength).sortBy(_.toSet).head\n\
    \        val maxWordWithUniqueCharsFirstFirstFirstFirst", "        val chars =\
    \ words.map(_.toCharArray).flatten\n        val counts = chars.groupBy(identity).mapValues(_.size)\n\
    \        val maxCount = counts.max\n        val maxChars = counts.filter(c =>\
    \ c._2 == maxCount).keys.toList\n        val maxChar = maxChars.head\n       \
    \ val maxWord = words.filter(w => w.toCharArray.forall(c => c == maxChar))\n \
    \       val maxWordString = maxWord.mkString(\"\")\n        val maxWordLength\
    \ = maxWordString.length\n        if (maxWordLength > maxChars.length)\n     \
    \       maxWordString\n        else\n            words.filter(w => w.toCharArray.forall(c\
    \ => c == maxChar)).sortWith(_.toString.compareTo(maxWordString)).head", "   \
    \     val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char\
    \ => {\n            val count = maxChars.getOrElse(char, 0)\n            maxChars\
    \ += char -> count + 1\n        })\n        val maxChar = maxChars.maxBy(_._2)\n\
    \        words.find(word => word.count(_ == maxChar)).getOrElse(\"\")", "    \
    \    val maxCount = words.foldLeft(0)((count, word) => count + word.count(\"a\"\
    ))\n        val maxWord = words.filter(word => word.count(\"a\") == maxCount).minBy(_.length)\n\
    \        words.filter(word => word.count(\"a\") == maxCount).minBy(_.length)",
  "        val counts = words.map(word => word.count(_ == 'a')).toList\n        val\
    \ maxCount = counts.max\n        val maxWord = words.filter(word => word.count(_\
    \ == 'a') == maxCount).head\n        val maxWordWithCount = words.filter(word\
    \ => word.count(_ == 'a') == maxCount).sortBy(word => word.count).head\n     \
    \   val maxWordWithCountWithMaxCount = words.filter(word => word.count(_ == 'a')\
    \ == maxCount).sortBy(word => word.count).last\n        val maxWordWithCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last.sortBy(word\
    \ => word.count).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last.sortBy(word\
    \ => word.count).last.sortBy(word => word.count).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last.sortBy(word\
    \ => word.count).last.sortBy(word => word.count).last.sortBy(word => word.count).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last.sortBy(word\
    \ => word.count).last.sortBy(word => word.count).last.sortBy(word => word.count).last.sortBy(word\
    \ => word.count).last.sortBy(word => word.count).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last.sortBy(word\
    \ => word.count).last.sortBy(word => word.count).last.sortBy(word => word.count).last.sortBy(word\
    \ => word.count).last.sortBy(word => word.count).last.sortBy(word => word.count).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last.sortBy(word\
    \ => word.count).", "        val uniqueChars = mutable.HashSet[Char]()\n     \
    \   val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n\
    \            word.foreach(c => {\n                uniqueChars += c\n         \
    \   })\n        })\n        uniqueChars.foreach(c => {\n            val count\
    \ = maxChars.getOrElse(c, 0) + 1\n            maxChars = maxChars + (c -> count)\n\
    \        })\n        val maxKey = maxChars.maxBy(_._2)._1\n        words.find(word\
    \ => word.toSet.size == word.toSet.size).map(word => word.toSet.contains(maxKey)).getOrElse(false)",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars\
    \ += c -> count\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith((a,\
    \ b) => a._2 > b._2)\n        val maxCharsSortedFirst = maxCharsSorted.head._1\n\
    \        val maxCharsSortedLast = maxCharsSorted.last._1\n        val maxCharsSortedFirstIndex\
    \ = words.indexOf(maxCharsSortedFirst)\n        val maxCharsSortedLastIndex =\
    \ words.indexOf(maxCharsSortedLast)\n        if (maxCharsSortedFirstIndex < maxCharsSortedLastIndex)\
    \ {\n            maxCharsSortedFirst\n        } else {\n            maxCharsSortedLast\n\
    \        }", "        val uniqueChars = mutable.HashSet[Char]()\n        val maxWord\
    \ = mutable.StringBuilder()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars += c\n            })\n        })\n       \
    \ uniqueChars.toList.sortWith(_ < _).foreach(c => {\n            maxWord.append(c)\n\
    \        })\n        maxWord.toString", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.min\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size)\n \
    \       val maxWordWithMaxCharsFirst = maxWordWithMaxChars.min\n        val maxWordWithMaxCharsFirstWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _.toSet.head\
    \ == maxChars)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxChars.min\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.size && _.toSet.head == maxChars\
    \ && _.toSet.head == uniqueChars.size)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.min\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _.toSet.head\
    \ == maxChars && _.toSet.head == uniqueChars.size && _.toSet.head == uniqueChars.size)\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.min\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _.toSet.head\
    \ == maxChars && _.toSet.head == uniqueChars.size && _.toSet.head == uniqueChars.size\
    \ && _.toSet.head == uniqueChars.size)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.min\n\
    \        val maxWordWithMaxChars", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars.getOrElse(c,\
    \ 0) + 1\n            })\n        })\n        uniqueChars.toList.sortWith((a,\
    \ b) => b._2 - a._2).head._1", "        val chars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      chars += (c -> (chars(c) += 1))\n            })\n        })\n        val\
    \ maxKey = chars.maxBy(_._2)._1\n        words.find(word => word.toSet.size ==\
    \ word.toSet.size).sortBy(word => word.toSet.indexOf(maxKey)).head", "       \
    \ val unique = words.map(x => x.toSet).reduce(_|)\n        val max = unique.max\n\
    \        val index = unique.indexOf(max)\n        words(index)", "        val\
    \ uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n  \
    \          word.foreach(c => {\n                uniqueChars(c) match {\n     \
    \               case Some(count) => uniqueChars(c) = uniqueChars(c) + 1;\n   \
    \                 case None => uniqueChars(c) = 1\n                }\n       \
    \     })\n        })\n        val maxCount = uniqueChars.values.max\n        uniqueChars.maxBy(_._2)._1",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.sortWith((a, b) => a.compareTo(b) <\
    \ 0)(0)\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxChars.map(_.charAt(0))\n\
    \        val maxWordWithMaxCharsWithFirstCharIndex = words.indexOf(maxWordWithMaxCharsWithFirstChar)\n\
    \        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.compareTo(0)\n\
    \        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxCharsWithFirstChar.mkString\n\
    \        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n\
    \        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n\
    \        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n\
    \        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n\
    \        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n\
    \        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n\
    \        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n\
    \        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n\
    \        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n\
    \        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n\
    \        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n\
    \        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n\
    \        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n\
    \        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n\
    \        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxCount =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxCount).sortBy(_.length).head\n\
    \        val maxWordLength = maxWord.length\n        val maxWordWithMaxChars =\
    \ words.filter(_.length == maxWordLength).sortBy(_.length).head\n        val maxWordWithMaxCharsLength\
    \ = maxWordWithMaxChars.length\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0,\
    \ maxWordLength)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0,\
    \ maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength\
    \ = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length -\
    \ 1)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0,\
    \ maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength\
    \ = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length -\
    \ 1)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0,\
    \ maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength\
    \ = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length -\
    \ 1)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0,\
    \ maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength\
    \ = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length -\
    \ 1)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0,\
    \ maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength\
    \ = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length -\
    \ 1)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0,\
    \ maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength\
    \ = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length -\
    \ 1)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0,\
    \ maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength\
    \ = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length -\
    \ 1)\n        val maxWordWithMaxChar", "        val unique = words.map(_.length).distinct\n\
    \        val maxCount = unique.max\n        val maxWord = words.filter(_.length\
    \ == maxCount).sortBy(_.length).head\n        unique.contains(maxCount) ? maxWord\
    \ : findMax(words.filter(_.length != maxCount))", "        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(_.toCharArray.contains(maxChars)).head\n \
    \       val maxWordIndex = words.indexOf(maxWord)\n        val maxWordLength =\
    \ maxWord.length\n        val maxWordChars = maxWord.toCharArray\n        val\
    \ maxWordUniqueChars = uniqueChars.filter(_.toCharArray.contains(maxWordChars)).max\n\
    \        val maxWordMaxChars = maxWordUniqueChars.toCharArray\n        val maxWordMaxCharsIndex\
    \ = words.indexOf(maxWordMaxChars)\n        val maxWordMaxCharsLength = maxWordMaxChars.length\n\
    \        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n    \
    \    val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex\
    \ = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n\
    \        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n    \
    \    val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex\
    \ = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n\
    \        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n    \
    \    val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex\
    \ = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n\
    \        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n    \
    \    val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex\
    \ = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n\
    \        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n    \
    \    val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex\
    \ = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n\
    \        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n    \
    \    val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex\
    \ = words.", "        val uniqueChars = mutable.HashSet[Char]()\n        val maxWord\
    \ = mutable.Array[String]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars += c\n            })\n        })\n       \
    \ uniqueChars.toList.sortWith(_ < _).foreach(c => {\n            val index = uniqueChars.indexOf(c)\n\
    \            if (index > 0) {\n                val wordWithMaxChar = uniqueChars.take(index).mkString(\"\
    \")\n                if (maxWord.contains(wordWithMaxChar)) {\n              \
    \      maxWord(maxWord.indexOf(wordWithMaxChar)) = wordWithMaxChar\n         \
    \       } else {\n                    maxWord(maxWord.length) = wordWithMaxChar\n\
    \                }\n            }\n        })\n        maxWord.mkString(\"\")",
  "        val unique = words.map(x => x.distinct).flatten\n        val count = unique.map(x\
    \ => x.length).max\n        unique.find(x => x.length == count).getOrElse(\"\"\
    )", "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars =\
    \ mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars += c\n                maxChars(c) = maxChars(c).max(uniqueChars(c)).getOrElse(0)\n\
    \            })\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith((a,\
    \ b) => b._2 > a._2)\n        val maxCharsSortedWithMax = maxCharsSorted.takeWhile(_._2\
    \ > 1).map(_._1)\n        val maxCharsSortedWithMaxLength = maxCharsSortedWithMax.length\n\
    \        val maxCharsSortedWithMaxLength = maxCharsSortedWithMaxLength.max(uniqueChars.length)\n\
    \        val maxCharsSortedWithMaxLength = maxCharsSortedWithMaxLength.getOrElse(0)\n\
    \        val maxCharsSortedWithMax = maxCharsSortedWithMax.take(maxCharsSortedWithMaxLength)\n\
    \        val maxCharsSortedWithMax = maxCharsSortedWithMax.sortWith((a, b) =>\
    \ a.compareTo(b))\n        val maxCharsSortedWithMax = maxCharsSortedWithMax.head\n\
    \        maxCharsSortedWithMax", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMax", "        val chars = words.map(_.toCharArray).flatten.toSet\n\
    \        val maxChars = chars.max\n        val maxWord = words.filter(word =>\
    \ word.count(_ == maxChars) > 1)\n        if (maxWord.isEmpty) \"\"\n        else\
    \ maxWord.head", "        val uniqueChars = words.map(_.length).distinct\n   \
    \     val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.min\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size)\n \
    \       val maxWordWithMaxCharsFirst = maxWordWithMaxChars.min\n        val maxWordWithMaxCharsFirstWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _\
    \ == maxWordWithMaxCharsFirst)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstWithMaxChars.min\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _\
    \ == maxWordWithMaxCharsFirstWithMaxChars && _ == maxWordWithMaxCharsFirst)\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.min\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _\
    \ == maxWordWithMaxCharsFirstWithMaxCharsFirst && _ == maxWordWithMaxCharsFirstWithMaxChars\
    \ && _ == maxWordWithMaxCharsFirst)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.min\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _\
    \ == maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars && _ == maxWordWithMaxCharsFirstWithMaxCharsFirst\
    \ && _ == maxWordWithMaxCharsFirstWithMaxChars && _ == maxWordWithMaxCharsFirst)\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n\
    \        val maxWord = maxWords.min\n        val maxWordInLex = maxWords.sortWith((x,\
    \ y) => x.compareTo(y))\n        val maxWordInLexInLex = maxWordInLex.sortWith((x,\
    \ y) => x.compareTo(y))\n        val maxWordInLexInLexInLex = maxWordInLexInLex.sortWith((x,\
    \ y) => x.compareTo(y))\n        val maxWordInLexInLexInLexInLex = maxWordInLexInLexInLex.sortWith((x,\
    \ y) => x.compareTo(y))\n        val maxWordInLexInLexInLexInLexInLex = maxWordInLexInLexInLexInLex.sortWith((x,\
    \ y) => x.compareTo(y))\n        val maxWordInLexInLexInLexInLexInLexInLex = maxWordInLexInLexInLexInLexInLex.sortWith((x,\
    \ y) => x.compareTo(y))\n        val maxWordInLexInLexInLexInLexInLexInLexInLex\
    \ = maxWordInLexInLexInLexInLexInLexInLex.sortWith((x, y) => x.compareTo(y))\n\
    \        val maxWordInLexInLexInLexInLexInLexInLexInLexInLex = maxWordInLexInLexInLexInLexInLexInLexInLex.sortWith((x,\
    \ y) => x.compareTo(y))\n        val maxWordInLexInLexInLexInLexInLexInLexInLexInLexInLex\
    \ = maxWordInLexInLexInLexInLexInLexInLexInLexInLex.sortWith((x, y) => x.compareTo(y))\n\
    \        val maxWordInLexInLexInLexInLexInLexInLexInLexInLexInLexInLex = maxWordInLexInLexInLexInLexInLexInLexInLexInLexInLex.sortWith((x,\
    \ y) => x.compareTo(y))\n        val maxWordInLexInLexInLexInLexInLexInLexInLexInLexInLexInLexInLex\
    \ = maxWordInLexInLexInLexInLexInLexInLexInLexInLexInLex.sortWith((x, y) => x.compareTo(y))\n\
    \        val maxWordInLexInLexInLexInLexInLexInLexIn", "        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxUniqueChars = uniqueChars.max\n\
    \        val maxWord = words.filter(w => w.toCharArray.distinct.length == maxUniqueChars)\n\
    \        val maxWordString = maxWord.mkString(\"\")\n        val maxWordChars\
    \ = maxWordString.toCharArray\n        val maxWordCharsCount = maxWordChars.distinct\n\
    \        val maxWordCharsCount = maxWordCharsCount.length\n        val maxWordCharsIndex\
    \ = maxWordCharsCount.zipWithIndex.maxBy(_._1)._1\n        val maxWordCharsIndex\
    \ = maxWordCharsIndex + 1\n        val maxWordString = maxWord.map(w => w.charAt(maxWordCharsIndex))\n\
    \        val maxWordString = maxWordString.mkString(\"\")\n        val maxWordChars\
    \ = maxWordString.toCharArray\n        val maxWordCharsCount = maxWordChars.distinct\n\
    \        val maxWordCharsCount = maxWordCharsCount.length\n        val maxWordCharsIndex\
    \ = maxWordCharsCount.zipWithIndex.maxBy(_._1)._1\n        val maxWordCharsIndex\
    \ = maxWordCharsIndex + 1\n        val maxWordString = maxWord.map(w => w.charAt(maxWordCharsIndex))\n\
    \        val maxWordString = maxWordString.mkString(\"\")\n        val maxWordChars\
    \ = maxWordString.toCharArray\n        val maxWordCharsCount = maxWordChars.distinct\n\
    \        val maxWordCharsCount = maxWordCharsCount.length\n        val maxWordCharsIndex\
    \ = maxWordCharsCount.zipWithIndex.maxBy(_._1)._1\n        val maxWordCharsIndex\
    \ = maxWordCharsIndex + 1\n        val maxWordString = maxWord.map(w => w.charAt(maxWordCharsIndex))\n\
    \        val maxWordString = maxWordString.mkString(\"\")\n        val maxWordChars\
    \ = maxWordString.toCharArray\n        val maxWordCharsCount = maxWordChars.distinct\n\
    \        val maxWordCharsCount = maxWordCharsCount.length\n        val maxWordCharsIndex\
    \ = maxWordCharsCount.zipWithIndex.maxBy(_._1)._1\n        val maxWordCharsIndex\
    \ = maxWordCharsIndex + 1\n        val maxWordString = maxWord.map(w => w.charAt(maxWordCharsIndex))\n\
    \        val maxWordString = maxWordString.mkString(\"\")\n        ", "      \
    \  val uniqueChars = words.map(_.length).distinct\n        val maxUniqueChars\
    \ = uniqueChars.max\n        val maxWord = words.filter(_.length == maxUniqueChars)\n\
    \        val maxWordWithMaxUniqueChars = words.filter(_.length == maxUniqueChars)\n\
    \        val maxWordWithMaxUniqueCharsSortedByLexicographicalOrder = maxWordWithMaxUniqueChars.sortBy(_.toLowerCase\
    \ compareTo _.toLowerCase)\n        val maxWordWithMaxUniqueCharsSortedByLexicographicalOrderFirst\
    \ = maxWordWithMaxUniqueCharsSortedByLexicographicalOrder.head\n        val maxWordWithMaxUniqueCharsSortedByLexicographicalOrderLast\
    \ = maxWordWithMaxUniqueCharsSortedByLexicographicalOrder.last\n        val maxWordWithMaxUniqueCharsSortedByLexicographicalOrderFirstChar\
    \ = maxWordWithMaxUniqueCharsSortedByLexicographicalOrderFirst.charAt(0)\n   \
    \     val maxWordWithMaxUniqueCharsSortedByLexicographicalOrderLastChar = maxWordWithMaxUniqueCharsSortedByLexicographicalOrderLast.charAt(0)\n\
    \        if (maxWordWithMaxUniqueCharsSortedByLexicographicalOrderFirstChar >\
    \ maxWordWithMaxUniqueCharsSortedByLexicographicalOrderLastChar) {\n         \
    \   maxWordWithMaxUniqueCharsSortedByLexicographicalOrderFirstChar\n        }\
    \ else {\n            maxWordWithMaxUniqueCharsSortedByLexicographicalOrderLastChar\n\
    \        }", "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars\
    \ = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n          \
    \  word.foreach(c => {\n                uniqueChars += c\n            })\n   \
    \     })\n        uniqueChars.foreach(c => {\n            maxChars(c) = uniqueChars.count(_\
    \ == c)\n        })\n        uniqueChars.toList.sortWith(_ < _).head", "     \
    \   val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashSet[Char]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                maxChars += c\n     \
    \       })\n        })\n        val maxCharsCount = maxChars.size\n        val\
    \ uniqueCharsCount = uniqueChars.size\n        if (maxCharsCount > uniqueCharsCount)\
    \ {\n            words.sortWith(_.compareTo(_) > 0)(0)\n        } else {\n   \
    \         words.sortWith(_.compareTo(_) < 0)(0)\n        }", "        val counts\
    \ = words.map(x => x.toCharArray.distinct.length).distinct\n        val maxCount\
    \ = counts.max\n        val maxWord = words.filter(x => x.toCharArray.distinct.length\
    \ == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   val maxWordChars = maxWord.toCharArray\n        val maxWordCharsIndex = maxWordIndex.toCharArray\n\
    \        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first\
    \ < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first\
    \ < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first\
    \ < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first\
    \ < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first\
    \ < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first\
    \ < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first\
    \ < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first\
    \ < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first\
    \ < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first\
    \ < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first\
    \ < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first\
    \ < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first\
    \ < _.second).last._1.toCharArray", "        val uniqueChars = words.map(word\
    \ => word.distinct).flatten.toSet\n        val maxChars = uniqueChars.max\n  \
    \      val maxWord = words.filter(word => word.count(_ == maxChars) > 0).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordLength\
    \ = maxWord.length\n        val maxWordChars = maxWord.distinct\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharsLength = maxWordChars.length\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordCharsIndex)\n        val\
    \ maxWordCharsLength = maxWordCharsIndex\n        if (maxWordCharsLength > maxWordLength)\
    \ {\n            maxWord\n        } else {\n            val maxWordIndex = words.indexOf(maxWord)\n\
    \            val maxWordLength = maxWord.length\n            val maxWordChars\
    \ = maxWord.distinct\n            val maxWordCharsIndex = words.indexOf(maxWordChars)\n\
    \            val maxWordCharsLength = maxWordChars.length\n            val maxWordCharsIndex\
    \ = words.indexOf(maxWordCharsIndex)\n            val maxWordCharsLength = maxWordCharsIndex\n\
    \            if (maxWordCharsLength > maxWordLength) {\n                maxWord\n\
    \            } else {\n                val maxWordIndex = words.indexOf(maxWord)\n\
    \                val maxWordLength = maxWord.length\n                val maxWordChars\
    \ = maxWord.distinct\n                val maxWordCharsIndex = words.indexOf(maxWordChars)\n\
    \                val maxWordCharsLength = maxWordChars.length\n              \
    \  val maxWordCharsIndex = words.indexOf(maxWordCharsIndex)\n                val\
    \ maxWordCharsLength = maxWordCharsIndex\n                if (maxWordCharsLength\
    \ > maxWordLength) {\n                    maxWord\n                } else {\n\
    \                    val maxWordIndex = words.indexOf(maxWord)\n             \
    \       val maxWordLength = maxWord.length\n                    val maxWordChars\
    \ = maxWord.distinct\n                    val maxWordCharsIndex = words.indexOf(maxWordChars)\n\
    \                    val maxWordCharsLength = maxWordChars.length\n          \
    \          val maxWordCharsIndex = words.indexOf(maxWordCharsIndex)\n        \
    \            val maxWordCharsLength = maxWordCharsIndex\n                    if\
    \ (maxWordCharsLength > maxWordLength) {\n                        maxWord\n  \
    \                  } else {\n                        val maxWordIndex = words.indexOf(maxWord)\n\
    \                        val maxWordLength = maxWord.length\n                \
    \        val maxWordChars = maxWord.distinct\n                        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars)\n                        val maxWordCharsLength\
    \ = maxWordChar", "        val counts = words.map(word => word.distinct).map(_.size).groupBy(_).mapValues(_.size)\n\
    \        val maxCount = counts.max\n        val maxKey = counts.keys.toList.sortBy(_._1).head\n\
    \        val maxValue = counts(maxKey)\n        val maxWord = words.filter(word\
    \ => word.distinct.size == maxValue)\n        val maxWordWithMaxCount = words.filter(word\
    \ => word.distinct.size == maxValue && word.distinct.contains(maxKey))\n     \
    \   val maxWordWithMaxCountWithMaxKey = words.filter(word => word.distinct.size\
    \ == maxValue && word.distinct.contains(maxKey) && word.distinct.contains(maxKey))\n\
    \        val maxWordWithMaxCountWithMaxKeyWithMaxValue = words.filter(word =>\
    \ word.distinct.size == maxValue && word.distinct.contains(maxKey) && word.distinct.contains(maxKey)\
    \ && word.distinct.contains(maxValue))\n        val maxWordWithMaxCountWithMaxKeyWithMaxValueWithMaxKey\
    \ = words.filter(word => word.distinct.size == maxValue && word.distinct.contains(maxKey)\
    \ && word.distinct.contains(maxKey) && word.distinct.contains(maxValue) && word.distinct.contains(maxKey))\n\
    \        val maxWordWithMaxCountWithMaxKeyWithMaxValueWithMaxKeyWithMaxValue =\
    \ words.filter(word => word.distinct.size == maxValue && word.distinct.contains(maxKey)\
    \ && word.distinct.contains(maxKey) && word.distinct.contains(maxValue) && word.distinct.contains(maxKey)\
    \ && word.distinct.contains(maxValue))\n        val maxWordWithMaxCountWithMaxKeyWithMaxValueWithMaxKeyWithMaxValueWithMaxKey\
    \ = words.filter(word => word.distinct.size == maxValue && word.distinct.contains(maxKey)\
    \ && word.distinct.contains(maxKey) && word.distinct.contains(maxValue) && word.distinct.contains(maxKey)\
    \ && word.distinct.contains(maxValue) && word.distinct.contains(maxKey))\n   \
    \     val maxWordWithMaxCountWithMaxKeyWithMaxValueWithMaxKeyWithMaxValueWithMaxKeyWithMaxValue\
    \ = words.filter(word => word.distinct.size == maxValue && word.distinct.contains(maxKey)\
    \ && word.distinct.contains(maxKey) && word.distinct.contains(maxValue) && word.distinct.contains(maxKey)\
    \ && word.distinct.contains(maxValue) && word.distinct.contains(maxKey) && word.distinct.contains(maxValue))\n\
    \        val maxWordWithMaxCountWithMaxKeyWithMaxValueWithMaxKeyWithMaxValueWithMaxKeyWithMaxValueWithMaxKey\
    \ = words.filter(word => word.distinct.size == maxValue && word.distinct.contains(maxKey)\
    \ && word.distin", "        val uniqueChars = words.map(_.length).distinct\n \
    \       val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMax", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars(c) match {\n                    case Some(count) =>\
    \ uniqueChars(c) = uniqueChars(c) + 1;\n                    case None => uniqueChars(c)\
    \ = 1;\n                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1",
  "        val counts = words.map(word => word.distinct).map(word => word -> word.size)\n\
    \        val maxCount = counts.max\n        val maxWord = counts.find(_._2 ==\
    \ maxCount).get._1\n        val maxWordIndex = words.indexOf(maxWord)\n      \
    \  val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n  \
    \      val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWord = words(maxWordIndex)\n        val maxWordIndex = if (maxWordIndex\
    \ == 0) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex\
    \ == 0) words.size else maxWordIndex\n        val maxWord = words(maxWordIndex)\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWord = words(maxWordIndex)\n        val maxWordIndex = if (maxWordIndex\
    \ == 0) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex\
    \ == 0) words.size else maxWordIndex\n        val maxWord = words(maxWordIndex)\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWord = words(maxWordIndex)\n        val maxWordIndex = if (maxWordIndex\
    \ == 0) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex\
    \ == 0) words.size else maxWordIndex\n        val maxWord = words(maxWordIndex)\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWord = words(maxWordIndex)\n        val maxWordIndex = if (maxWordIndex\
    \ == 0) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex\
    \ == 0) words.size else maxWordIndex\n        val maxWord = words(maxWordIndex)\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWord = words(maxWordIndex)\n        val maxWordIndex = if (maxWordIndex\
    \ == 0) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex\
    \ == 0) words.size else maxWordIndex\n        val maxWord = words(maxWordIndex)",
  "        val counts = words.map(word => word.count(_ == 'a')).toMap\n        val\
    \ maxCount = counts.values.max\n        val maxWord = counts.keys.filter(_.count(_\
    \ == maxCount)).max\n        val maxWords = counts.keys.filter(_.count(_ == maxCount)).sortBy(_.length)\n\
    \        val maxWord = maxWords.head\n        val maxWordCount = maxWords.map(_.count(_\
    \ == maxCount)).sum\n        if (maxWordCount == maxCount) {\n            maxWord\n\
    \        } else {\n            findMax(maxWords)\n        }", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars(c) += 1\n            })\n        })\n    \
    \    val maxChar = uniqueChars.maxBy(_._2)._1\n        words.find(word => uniqueChars(word._1)._1\
    \ == uniqueChars(maxChar)._1)", "        val chars = words.map(_.toCharArray).flatten.toSet\n\
    \        val counts = chars.groupBy(identity).mapValues(_.length)\n        val\
    \ maxCount = counts.max\n        val maxChar = counts.maxBy(_._2)._1\n       \
    \ val maxWord = words.filter(w => w.toCharArray.contains(maxChar))\n        val\
    \ maxWordWithMaxCount = words.filter(w => w.toCharArray.contains(maxChar) && w.toCharArray.count(_\
    \ == maxChar) == maxCount)\n        val maxWordWithMaxCountWithMaxChar = words.filter(w\
    \ => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar))\n\
    \        val maxWordWithMaxCountWithMaxCharWithMaxWord = words.filter(w => w.toCharArray.count(_\
    \ == maxChar) == maxCount && w.toCharArray.contains(maxChar) && words.filter(w\
    \ => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar)\
    \ && w.toCharArray.count(_ == maxChar) == maxCount).length == 1)\n        val\
    \ maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWord = words.filter(w => w.toCharArray.count(_\
    \ == maxChar) == maxCount && w.toCharArray.contains(maxChar) && words.filter(w\
    \ => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar)\
    \ && w.toCharArray.count(_ == maxChar) == maxCount).length == 1 && words.filter(w\
    \ => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar)\
    \ && words.filter(w => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar)\
    \ && w.toCharArray.count(_ == maxChar) == maxCount).length == 1).length == 1)\n\
    \        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWordWithMaxWord =\
    \ words.filter(w => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar)\
    \ && words.filter(w => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar)\
    \ && w.toCharArray.count(_ == maxChar) == maxCount).length == 1 && words.filter(w\
    \ => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar)\
    \ && words.filter(w => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar)\
    \ && w.toCharArray.", "        val unique = words.map(_.length).distinct\n   \
    \     val maxCount = unique.max\n        val maxWord = words.filter(_.length ==\
    \ maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n        words.take(maxWordIndex).mkString(\"\
    \ \")", "        val uniqueChars = words.map(_.length).distinct\n        val maxChars\
    \ = uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n\
    \        val maxWord = maxWords.min\n        val maxWordString = maxWord.mkString\n\
    \        val maxWordString = maxWordString.reverse\n        val maxWordString\
    \ = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n\
    \        val maxWordString = maxWordString.reverse\n        val maxWordString\
    \ = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n\
    \        val maxWordString = maxWordString.reverse\n        val maxWordString\
    \ = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n\
    \        val maxWordString = maxWordString.reverse\n        val maxWordString\
    \ = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n\
    \        val maxWordString = maxWordString.reverse\n        val maxWordString\
    \ = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n\
    \        val maxWordString = maxWordString.reverse\n        val maxWordString\
    \ = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n\
    \        val maxWordString = maxWordString.reverse\n        val maxWordString\
    \ = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n\
    \        val maxWordString = maxWordString.reverse\n        val maxWordString\
    \ = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n\
    \        val maxWordString = maxWordString.reverse\n        val maxWordString\
    \ = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n\
    \        val maxWordString = maxWordString.reverse\n        val maxWordString\
    \ = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n\
    \        val maxWordString = maxWordString.reverse\n        val maxWordString\
    \ = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n\
    \        val maxWordString = maxWordString.reverse\n        val maxWordString\
    \ = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n\
    \        val maxWordString = maxWordString.reverse\n        val maxWordString\
    \ = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n\
    \        val maxWordString = maxWordString.reverse\n        val maxWordString\
    \ = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n\
    \        val maxWordString = maxWordString.reverse\n        val maxWordString\
    \ = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n\
    \        val maxWordString = ", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.head\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars).head\n        val maxWordWithMaxCharsWithMaxChars\
    \ = words.filter(_.length == maxChars).filter(_.length == maxChars).head\n   \
    \     val maxWordWithMaxCharsWithMaxCharsWithMaxChars = words.filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).head\n\
    \        val maxWordWithMaxCharsWithMaxCharsWithMaxCharsWithMaxChars = words.filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxChars\
    \ = words.filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).head\n\
    \        val maxWordWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxChars\
    \ = words.filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxChars\
    \ = words.filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxChars\
    \ = words.filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).head\n\
    \        val maxWordWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxChars\
    \ = words.filter(_.length == maxChars).filter(_.", "        val uniqueChars =\
    \ mutable.HashSet[Char]()\n        val maxChars = mutable.HashSet[Char]()\n  \
    \      words.foreach(word => {\n            word.foreach(c => {\n            \
    \    uniqueChars += c\n            })\n        })\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                maxChars += c\n     \
    \       })\n        })\n        val maxCharsCount = maxChars.size\n        val\
    \ uniqueCharsCount = uniqueChars.size\n        if(maxCharsCount > uniqueCharsCount)\
    \ {\n            words.sortWith((a, b) => a.compareTo(b) < 0)(0)\n        } else\
    \ {\n            words.sortWith((a, b) => a.compareTo(b) > 0)(0)\n        }",
  "        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars =\
    \ chars.distinct\n        val maxCount = uniqueChars.count(_ == chars.max)\n \
    \       if(maxCount > 1) uniqueChars.min\n        else uniqueChars.max", "   \
    \     val uniqueChars = mutable.HashSet[Char]()\n        val maxWord = mutable.ArrayBuffer(words(0))\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        uniqueChars.toList.sortWith(_\
    \ < _).take(1).foreach(c => {\n            maxWord = maxWord.updated(0, c)\n \
    \       })\n        maxWord.toString", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \           maxChars(c) = maxChars.getOrElse(c, 0) + 1\n            })\n     \
    \   })\n        uniqueChars.maxBy(maxChars)", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxWord = mutable.ListBuffer[String]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.toList.sortWith(_ < _).foreach(uniqueChar\
    \ => {\n            val word = words.filter(word => word.contains(uniqueChar))\n\
    \            if (word.length > 0) {\n                maxWord += word(0)\n    \
    \        }\n        })\n        if (maxWord.length > 0) {\n            maxWord(0)\n\
    \        } else {\n            \"\"\n        }", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsAndMaxWord =\
    \ words.filter(_.length == maxChars).sortBy(_.length).head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head\n     \
    \   val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head.head.head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head.head.head.head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head.head.head.head.head.head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars\
    \ += c -> count\n        })\n        val maxKey = maxChars.maxBy(_._2)._1\n  \
    \      words.find(word => word.toSet.size == uniqueChars.size)", "        val\
    \ chars = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n\
    \        val maxCount = uniqueChars.count\n        val maxChar = uniqueChars.max\n\
    \        val maxWord = words.filter(w => w.toCharArray.contains(maxChar))\n  \
    \      val maxWordWithMaxCount = words.filter(w => w.toCharArray.contains(maxChar)\
    \ && w.toCharArray.count(_ == maxChar) == maxCount)\n        val maxWordWithMaxCountWithMaxChar\
    \ = words.filter(w => w.toCharArray.contains(maxChar) && w.toCharArray.count(_\
    \ == maxChar) == maxCount && w.toCharArray.max == maxChar)\n        val maxWordWithMaxCountWithMaxCharWithMaxWord\
    \ = words.filter(w => w.toCharArray.contains(maxChar) && w.toCharArray.count(_\
    \ == maxChar) == maxCount && w.toCharArray.max == maxChar && words.filter(w =>\
    \ w.toCharArray.max == maxChar).exists(w => w.toCharArray.count(_ == maxChar)\
    \ == maxCount))\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWord\
    \ = words.filter(w => w.toCharArray.contains(maxChar) && w.toCharArray.count(_\
    \ == maxChar) == maxCount && w.toCharArray.max == maxChar && words.filter(w =>\
    \ w.toCharArray.max == maxChar).exists(w => w.toCharArray.count(_ == maxChar)\
    \ == maxCount && w.toCharArray.max == maxChar))\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(w => w.toCharArray.contains(maxChar) && w.toCharArray.count(_\
    \ == maxChar) == maxCount && w.toCharArray.max == maxChar && words.filter(w =>\
    \ w.toCharArray.max == maxChar).exists(w => w.toCharArray.count(_ == maxChar)\
    \ == maxCount && w.toCharArray.max == maxChar && words.filter(w => w.toCharArray.max\
    \ == maxChar).exists(w => w.toCharArray.count(_ == maxChar) == maxCount)))\n \
    \       val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(w => w.toCharArray.contains(maxChar) && w.toCharArray.count(_\
    \ == maxChar) == maxCount && w.toCharArray.max == maxChar && words.filter(w =>\
    \ w.toCharArray.max == maxChar).exists(w => w.toCharArray.count(_", "        val\
    \ chars = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.toCharArray.forall(uniqueChars.contains)).max\n\
    \        val maxWordWithMaxChars = words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max\n\
    \        val maxWordWithMaxCharsAndMaxWord = words.filter(_.toCharArray.forall(uniqueChars.contains(_))\
    \ && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_))).max\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWord = words.filter(_.toCharArray.forall(uniqueChars.contains(_))\
    \ && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_))\
    \ && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_))).max\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord = words.filter(_.toCharArray.forall(uniqueChars.contains(_))\
    \ && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_))\
    \ && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_))\
    \ && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_))).max\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.toCharArray.forall(uniqueChars.contains(_))\
    \ && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_))\
    \ && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_))\
    \ && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_))\
    \ && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_))).max\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.", "        val uniqueChars = words.map(_.length).distinct\n       \
    \ val maxCount = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordWithCount = words.filter(_.length == maxCount).sortBy(_.length).head\n\
    \        val maxWordWithCountWithMaxCount = words.filter(_.length == maxCount).sortBy(_.length).take(1).head\n\
    \        val maxWordWithCountWithMaxCountWithMaxCount = words.filter(_.length\
    \ == maxCount).sortBy(_.length).take(1).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).take(1).head\n       \
    \ val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(_.length\
    \ == maxCount).sortBy(_.length).take(1).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).take(1).head\n       \
    \ val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).take(1).head\n       \
    \ val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).take(1).head\n       \
    \ val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).take(1).head\n       \
    \ val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).take(1).head\n       \
    \ val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).take(1).head\n       \
    \ val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_.length >\
    \ _.length)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstLength = maxWordWithMaxCharsFirst.length\n\
    \        val maxWordWithMaxCharsFirstChars = maxWordWithMaxCharsFirst.map(_.toChar).distinct\n\
    \        val maxWordWithMaxCharsFirstCharsLength = maxWordWithMaxCharsFirstChars.max\n\
    \        val maxWordWithMaxCharsFirstCharsFirst = maxWordWithMaxCharsFirstChars.head\n\
    \        val maxWordWithMaxCharsFirstCharsFirstLength = maxWordWithMaxCharsFirstCharsFirst.length\n\
    \        val maxWordWithMaxCharsFirstCharsFirstChars = maxWordWithMaxCharsFirstCharsFirst.map(_.toChar).distinct\n\
    \        val maxWordWithMaxCharsFirstCharsFirstCharsLength = maxWordWithMaxCharsFirstCharsFirstChars.max\n\
    \        val maxWordWithMaxCharsFirstCharsFirstCharsFirst = maxWordWithMaxCharsFirstCharsFirstChars.head\n\
    \        val maxWordWithMaxCharsFirstCharsFirstCharsFirstLength = maxWordWithMaxCharsFirstCharsFirstCharsFirst.length\n\
    \        val maxWordWithMaxCharsFirstCharsFirstCharsFirstChars = maxWordWithMaxCharsFirstCharsFirstCharsFirst.map(_.toChar).distinct\n\
    \        val maxWordWithMaxCharsFirstCharsFirstCharsFirstCharsLength = maxWordWithMaxCharsFirstCharsFirstCharsFirstChars.max\n\
    \        val maxWordWithMaxCharsFirstCharsFirstCharsFirstCharsFirst = maxWordWithMaxCharsFirstCharsFirstCharsFirstCharsFirst.head\n\
    \        val maxWordWithMaxCharsFirstCharsFirstCharsFirstCharsFirstLength = maxWordWithMaxCharsFirstCharsFirstCharsFirstCharsFirst.length\n\
    \        val maxWordWithMaxCharsFirstCharsFirstCharsFirstCharsFirstChars = maxWordWithMaxCharsFirstCharsFirstCharsFirstCharsFirst.map(_.toChar).distinct\n\
    \        val maxWordWithMaxChars", "        val counts = words.foldLeft(Map[Char,\
    \ Int]()){\n            case (acc, word) =>\n                val chars = word.map(c\
    \ => c.toInt)\n                val count = chars.foldLeft(0)(_ + _)\n        \
    \        (chars zip count) map {\n                    case (c, n) => (c, n)\n\
    \                }.toMap\n        }\n        val maxCount = counts.max\n     \
    \   val maxChars = counts.filter(_._2 == maxCount).map(_._1)\n        val maxCharsCount\
    \ = maxChars.foldLeft(0)(_ + _)\n        val maxCharsCountInWord = words.foldLeft(0)(_\
    \ + _)\n        if (maxCharsCount > maxCharsCountInWord) {\n            words.find(w\
    \ => w.count(_ == maxChars.head) > maxCharsCountInWord)\n        } else {\n  \
    \          words.find(w => w.count(_ == maxChars.head) == maxCharsCountInWord)\n\
    \        }", "        val chars = words.map(_.toCharArray).flatten\n        val\
    \ counts = chars.groupBy(identity).mapValues(_.length)\n        val maxCount =\
    \ counts.max\n        val maxChars = counts.filter(_._2 == maxCount).map(_._1).sorted\n\
    \        val maxWord = words.filter(w => w.toCharArray.forall(c => maxChars.contains(c))).sorted\n\
    \        val maxWordWithMaxChars = maxWord.mkString(\"\")\n        val maxWordWithMaxCharsAndCounts\
    \ = maxWordWithMaxChars + \" \" + maxCount\n        val maxWordWithMaxCharsAndCountAndIndex\
    \ = maxWordWithMaxCharsAndCounts.indexOf(0)\n        val maxWordWithMaxCharsAndCountAndIndexAsString\
    \ = maxWordWithMaxCharsAndCountAndIndex + maxWordWithMaxCharsAndCounts.substring(maxWordWithMaxCharsAndCountAndIndex).trim\n\
    \        val maxWordWithMaxCharsAndCountAndIndexAsChars = maxWordWithMaxCharsAndCountAndIndexAsString.toCharArray\n\
    \        val maxWordWithMaxCharsAndCountAndIndexAsCharsAsString = maxWordWithMaxCharsAndCountAndIndexAsChars.mkString(\"\
    \")\n        val maxWordWithMaxCharsAndCountAndIndexAsCharsAsStringWithMaxChars\
    \ = maxWordWithMaxCharsAndCountAndIndexAsCharsAsString + maxWordWithMaxCharsAndCounts.substring(maxWordWithMaxCharsAndCountAndIndex).trim\n\
    \        val maxWordWithMaxCharsAndCountAndIndexAsCharsAsStringWithMaxCharsAndCounts\
    \ = maxWordWithMaxCharsAndCountAndIndexAsCharsAsStringWithMaxChars + \" \" + maxCount\n\
    \        val maxWordWithMaxCharsAndCountAndIndexAsCharsAsStringWithMaxCharsAndCountAndIndex\
    \ = maxWordWithMaxCharsAndCountAndIndexAsCharsAsStringWithMaxCharsAndCounts.indexOf(0)\n\
    \        val maxWordWithMaxCharsAndCountAndIndexAsCharsAsStringWithMaxCharsAndCountAndIndexAsString\
    \ = maxWordWithMaxCharsAndCountAndIndexAsCharsAsStringWithMaxCharsAndCountAndIndex\
    \ + maxWordWithMaxCharsAndCounts.substring(maxWordWithMaxCharsAndCountAndIndex).trim\n\
    \        val maxWordWithMaxCharsAndCountAndIndexAsCharsAsStringWithMaxCharsAndCountAndIndexAsChars\
    \ = maxWordWithMaxCharsAndCountAndIndexAsCharsAsStringWithMaxCharsAndCountAndIndexAsString.toCharArray\n\
    \        val max", "        val uniqueChars = words.map(_.length).distinct\n \
    \       val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_ < _)\n  \
    \      val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.head\n        val maxWordWithMaxCharsFirstCharCount\
    \ = maxWordWithMaxCharsFirst.count(_ == maxWordWithMaxCharsFirstChar)\n      \
    \  if (maxWordWithMaxCharsFirstCharCount > 1) {\n            val maxWordWithMaxCharsFirstCharCountInOrder\
    \ = maxWordWithMaxCharsFirst.count(_ == maxWordWithMaxCharsFirstChar)\n      \
    \      if (maxWordWithMaxCharsFirstCharCountInOrder == 1) {\n                maxWordWithMaxCharsFirstChar\n\
    \            } else {\n                maxWordWithMaxCharsFirstChar\n        \
    \    }\n        } else {\n            maxWordWithMaxCharsFirstChar\n        }",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                if (uniqueChars.getOrElse(c,\
    \ 0) == 0) {\n                    uniqueChars += (c -> 1)\n                } else\
    \ {\n                    uniqueChars += (c -> uniqueChars(c) + 1)\n          \
    \      }\n            })\n        })\n        val maxKey = uniqueChars.maxBy(_._2)._1\n\
    \        words.find(word => word.toString.contains(maxKey))", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWord = words.filter(_.length == maxChars).head\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLength\
    \ = words.sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLengthReversed\
    \ = words.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.head\n    \
    \    val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMax", "        val uniqueChars = words.foldLeft(Set.empty[Char])((set,\
    \ word) => set + word.charAt(0))\n        val maxChars = uniqueChars.max\n   \
    \     val maxWord = words.filter(word => word.charAt(0) == maxChars)\n       \
    \ val maxWordWithMaxChars = words.filter(word => word.charAt(0) == maxChars &&\
    \ word < maxWord)\n        val maxWordWithMaxCharsAndMaxWord = words.filter(word\
    \ => word.charAt(0) == maxChars && word < maxWord && word > maxWordWithMaxChars)\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordWithMaxChars = words.filter(word\
    \ => word.charAt(0) == maxChars && word < maxWord && word > maxWordWithMaxChars\
    \ && word < maxWordWithMaxCharsAndMaxWord)\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(word => word.charAt(0) == maxChars && word < maxWord && word\
    \ > maxWordWithMaxChars && word < maxWordWithMaxCharsAndMaxWord && word < maxWordWithMaxCharsAndMaxWordAndMaxWord)\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordWithMaxCharsAndMaxWordWithMaxChars\
    \ = words.filter(word => word.charAt(0) == maxChars && word < maxWord && word\
    \ > maxWordWithMaxChars && word < maxWordWithMaxCharsAndMaxWord && word < maxWordWithMaxCharsAndMaxWordAndMaxWord\
    \ && word < maxWordWithMaxCharsAndMaxWordAndMaxWordWithMaxChars)\n        val\
    \ maxWordWithMaxCharsAndMaxWordAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(word => word.charAt(0) == maxChars && word < maxWord && word\
    \ > maxWordWithMaxChars && word < maxWordWithMaxCharsAndMaxWord && word < maxWordWithMaxCharsAndMaxWordAndMaxWord\
    \ && word < maxWordWithMaxCharsAndMaxWordAndMaxWordWithMaxChars && word < maxWordWithMaxCharsAndMaxWordAndMaxWordWithMaxCharsAndMaxWord)\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(word => word.charAt(0) == maxChars && word < maxWord && word\
    \ > maxWordWithMaxChars && word < maxWordWithMax", "        val chars = words.map(_.toCharArray).flatten.toSet\n\
    \        val uniqueChars = chars.toSeq.distinct.length\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(w => w.toCharArray.distinct.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(w => w.toCharArray.distinct.length\
    \ == maxChars && w.toCharArray.distinct.toList.sorted == maxWord.toCharArray.distinct.toList.sorted)\n\
    \        val maxWordWithMaxCharsSorted = maxWordWithMaxChars.sortWith(_.toCharArray.distinct.toList.sorted\
    \ == _.toCharArray.distinct.toList.sorted)\n        val maxWordWithMaxCharsSortedWithMaxChars\
    \ = maxWordWithMaxCharsSorted.take(1)\n        val maxWordWithMaxCharsSortedWithMaxCharsSorted\
    \ = maxWordWithMaxCharsSortedWithMaxChars.sortWith(_.toCharArray.distinct.toList.sorted\
    \ == _.toCharArray.distinct.toList.sorted)\n        val maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxChars\
    \ = maxWordWithMaxCharsSortedWithMaxCharsSorted.take(1)\n        val maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSorted\
    \ = maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxChars.sortWith(_.toCharArray.distinct.toList.sorted\
    \ == _.toCharArray.distinct.toList.sorted)\n        val maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxChars\
    \ = maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxChars.take(1)\n\
    \        val maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSorted\
    \ = maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSorted.take(1)\n\
    \        val maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxChars\
    \ = maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxChars.take(1)\n\
    \        val maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSorted\
    \ = maxWordWithMaxCharsSortedWithMaxCharsSortedWithMax", "        val chars =\
    \ words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.toCharArray.size\
    \ == maxChars)\n        val maxWord = maxWords.head\n        val maxWordLength\
    \ = maxWord.length\n        val maxWordChars = maxWord.map(_.toChar).distinct\n\
    \        val maxWordCharCount = maxWordChars.max\n        val maxWordCharCountLength\
    \ = maxWordCharCount.length\n        val maxWordCharCountIndex = maxWordCharCount\
    \ - 1\n        val maxWordCharCountIndex = maxWordCharCountIndex.toInt\n     \
    \   val maxWordCharCountIndex = maxWordCharCountIndex.toString\n        val maxWordCharCountIndex\
    \ = maxWordCharCountIndex.charAt(0)\n        val maxWordCharCountIndex = maxWordCharCountIndex.toInt\n\
    \        val maxWordCharCountIndex = maxWordCharCountIndex.toString\n        val\
    \ maxWordCharCountIndex = maxWordCharCountIndex.charAt(0)\n        val maxWordCharCountIndex\
    \ = maxWordCharCountIndex.toInt\n        val maxWordCharCountIndex = maxWordCharCountIndex.toString\n\
    \        val maxWordCharCountIndex = maxWordCharCountIndex.charAt(0)\n       \
    \ val maxWordCharCountIndex = maxWordCharCountIndex.toInt\n        val maxWordCharCountIndex\
    \ = maxWordCharCountIndex.toString\n        val maxWordCharCountIndex = maxWordCharCountIndex.charAt(0)\n\
    \        val maxWordCharCountIndex = maxWordCharCountIndex.toInt\n        val\
    \ maxWordCharCountIndex = maxWordCharCountIndex.toString\n        val maxWordCharCountIndex\
    \ = maxWordCharCountIndex.charAt(0)\n        val maxWordCharCountIndex = maxWordCharCountIndex.toInt\n\
    \        val maxWordCharCountIndex = maxWordCharCountIndex.toString\n        val\
    \ maxWordCharCountIndex = maxWordCharCountIndex.charAt(0)\n        val maxWordCharCountIndex\
    \ = maxWordCharCountIndex.toInt\n        val maxWordCharCountIndex = maxWordCharCountIndex.toString\n\
    \        val maxWordCharCountIndex = maxWordCharCountIndex.charAt(0)\n       \
    \ val maxWordCharCountIndex = maxWordCharCountIndex.toInt\n        val maxWordCharCountIndex\
    \ = maxWordCharCountIndex.toString\n        val maxWordCharCountIndex = maxWordCharCountIndex.charAt(0)\n\
    \        val maxWordCharCountIndex = maxWordCharCountIndex.toInt\n        val\
    \ maxWordCharCountIndex = maxWordCharCountIndex.toString\n        ", "       \
    \ val unique = mutable.HashSet[Char]()\n        val maxCount = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               unique.add(c)\n                maxCount(c) = maxCount(c) + 1\n\
    \            })\n        })\n        val maxKey = maxCount.maxBy(_._2)._1\n  \
    \      words.find(word => unique.count(_ == word.charAt(0)) == maxCount(maxKey))",
  "        val counts = words.foldLeft(Map[Char, Int]()){\n            case (acc,\
    \ word) => word.count(x => acc.getOrElse(x, 0) == 0)\n        }\n        counts.maxBy(_._2)._1",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars(c) match {\n                    case Some(count) =>\
    \ uniqueChars(c) = uniqueChars(c) + 1;\n                    case None => uniqueChars(c)\
    \ = 1;\n                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            maxChars(c) = uniqueChars.count(_ == c)\n        })\n    \
    \    val maxCharsSorted = maxChars.toSeq.sortBy(_._2)(Ordering.Int.reverse).head\n\
    \        words.find(word => word.count(_ == maxCharsSorted._1))", "        val\
    \ uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(_.length == maxChars).head\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLength\
    \ = words.sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLengthReversed\
    \ = words.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.head\n    \
    \    val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed",
  "        val unique = words.map(x => x.distinct).flatten.toSet\n        val maxCount\
    \ = words.map(x => x.distinct).flatten.toSet.max\n        val maxWord = words.filter(x\
    \ => unique.contains(x)).sortWith(_.length < maxCount).head\n        unique.contains(maxWord)\
    \ ? maxWord : findMax(words.filter(x => !unique.contains(x)))", "        val chars\
    \ = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.toCharArray.contains(maxChars)).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordLength\
    \ = maxWord.length\n        val maxWordChars = maxWord.toCharArray\n        val\
    \ maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = maxWordChars.indexOf(0)\n\
    \        val maxWordCharsIndex = maxWordCharsIndex + 1\n        if (maxWordCharsLength\
    \ > maxWordLength) {\n            val maxWordCharsIndex = maxWordCharsIndex -\
    \ 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val\
    \ maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex\
    \ = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex\
    \ - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n           \
    \ val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex\
    \ = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex\
    \ - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n           \
    \ val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex\
    \ = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex\
    \ - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n           \
    \ val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex\
    \ = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex\
    \ - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n           \
    \ val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex\
    \ = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex\
    \ - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n           \
    \ val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex\
    \ = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex\
    \ - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n           \
    \ val maxWordCharsIndex = maxWordCharsIndex - 1\n", "        val uniqueChars =\
    \ mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n \
    \       words.foreach(word => {\n            word.foreach(c => {\n           \
    \     uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            maxChars(c) = uniqueChars.count(_ == c)\n        })\n    \
    \    uniqueChars.toList.sortWith(_ < _).head", "        val unique = words.map(_.length).distinct\n\
    \        val maxCount = unique.max\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   val maxWordIndex = if (maxWordIndex == 0) words.length - 1 else maxWordIndex\n\
    \        words.take(maxWordIndex).mkString(\" \")", "        val uniqueChars =\
    \ words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n     \
    \   val maxWords = words.filter(_.length == maxChars)\n        val maxWord = maxWords.sortBy(_.length).head\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsAndMaxWords = words.filter(_.length == maxChars).sortBy(_.length).head\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last\n  \
    \      val maxWordWithMaxCharsAndMaxWordsAndMaxWords = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last\n  \
    \      val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWords = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n\
    \            words.filter(_.length == maxChars).sortBy(_.length).last\n      \
    \  val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n\
    \            words.filter(_.length == maxChars).sortBy(_.length).last +\n    \
    \        words.filter(_.length == maxChars).sortBy(_.length).last\n        val\
    \ maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords =\
    \ words.filter(_.length == maxChars).sortBy(_.length).head +\n            words.filter(_.length\
    \ == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n\
    \            words.filter(_.length == maxChars).sortBy(_.length).last +\n    \
    \        words.filter(_.length == maxChars).sortBy(_.length).last\n        val\
    \ maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAnd",
  "        val unique = words.map(_.length).distinct\n        val max = unique.max\n\
    \        val index = unique.indexOfMax\n        words(index)", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWords = words.filter(_.length == maxChars)\n        val maxWord =\
    \ maxWords.min\n        val maxWordString = maxWord.mkString(\"\")\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val\
    \ maxWordString = max", "        val uniqueChars = mutable.HashSet[Char]()\n \
    \       val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \              maxChars(c) = maxChars.getOrElse(c, 0) + 1\n            })\n  \
    \      })\n        val maxChar = maxChars.maxBy(_._2)._1\n        words.find(word\
    \ => uniqueChars.count(_ == word.charAt(0)) == maxChars(maxChar))", "        val\
    \ uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashSet[Char]()\n\
    \        val maxWord = mutable.HashSet[String]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \       })\n        })\n        uniqueChars.foreach(c => {\n            maxChars\
    \ += c\n        })\n        uniqueChars.foreach(c => {\n            if (maxChars.contains(c))\
    \ {\n                maxWord += word\n            }\n        })\n        if (maxWord.size\
    \ == 1) {\n            maxWord.head\n        } else {\n            maxWord.headOption.getOrElse(\"\
    \")\n        }", "        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashSet[Char]()\n        val maxWord = mutable.HashSet[String]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                maxChars += c\n     \
    \       })\n        })\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                maxWord = maxWord.filterNot(_ == word)\n            })\n\
    \        })\n        val maxWordWithMaxChars = maxWord.filter(_ => maxChars.contains(_))\n\
    \        val maxWordWithMaxCharsAndUniqueChars = maxWordWithMaxChars.filter(_\
    \ => uniqueChars.contains(_))\n        val maxWordWithMaxCharsAndUniqueCharsAndFirst\
    \ = maxWordWithMaxCharsAndUniqueChars.filter(_ => words.indexOf(_) < words.indexOf(_))\n\
    \        val maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxChars = maxWordWithMaxCharsAndUniqueCharsAndFirst.filter(_\
    \ => maxChars.contains(_))\n        val maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueChars\
    \ = maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxChars.filter(_ => uniqueChars.contains(_))\n\
    \        val maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueCharsAndFirst\
    \ = maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueChars.filter(_\
    \ => words.indexOf(_) < words.indexOf(_))\n        val maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueCharsAndFirstWithMaxChars\
    \ = maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueCharsAndFirst.filter(_\
    \ => maxChars.contains(_))\n        val maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueChars\
    \ = maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueCharsAndFirstWithMaxChars.filter(_\
    \ => uniqueChars.contains(_))\n        val maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueCharsAndFirst\
    \ = maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueChars.filter(_\
    \ => ", "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars\
    \ = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n          \
    \  word.foreach(c => {\n                uniqueChars += c\n            })\n   \
    \     })\n        uniqueChars.toList.sortWith(_ < _).foreach(c => {\n        \
    \    maxChars(c) = uniqueChars.count(_ == c)\n        })\n        val maxCharsSorted\
    \ = maxChars.toList.sortWith(_ < _)\n        if (maxCharsSorted.size == 1) {\n\
    \            maxCharsSorted.head\n        } else {\n            val maxCharsSortedFirst\
    \ = maxCharsSorted.head\n            val maxCharsSortedSecond = maxCharsSorted.tail.head\n\
    \            if (maxCharsSortedFirst < maxCharsSortedSecond) {\n             \
    \   maxCharsSortedFirst\n            } else {\n                maxCharsSortedSecond\n\
    \            }\n        }", "        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        val maxWord = mutable.Map[Char,\
    \ String]()\n        for (word <- words) {\n            for (char <- word) {\n\
    \                if (!uniqueChars.contains(char)) {\n                    uniqueChars(char)\
    \ = uniqueChars(char) + 1\n                }\n                if (!maxChars.contains(char))\
    \ {\n                    maxChars(char) = maxChars(char) + 1\n               \
    \ }\n            }\n        }\n        for (char <- uniqueChars.keys) {\n    \
    \        if (maxChars(char) > maxChars(maxChars.keys.last)) {\n              \
    \  maxWord(char) = word\n            }\n        }\n        maxWord(maxWord.keys.last)",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxCount = mutable.Map[String,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n            val count = uniqueChars.size\n\
    \            uniqueChars.clear()\n            maxCount(word) = count\n       \
    \ })\n        val maxWord = maxCount.maxBy(_._2)._1\n        words.find(word =>\
    \ maxCount(word) == maxCount(maxWord))", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   maxChars += char -> uniqueChars.count(_ == char)\n        })\n        val\
    \ maxCharsSorted = maxChars.toSeq.sortBy(_._2)(Ordering.Int.reverse).head\n  \
    \      val maxCharsSortedKey = maxCharsSorted._1.toString\n        val maxCharsSortedValue\
    \ = maxCharsSorted._2\n        words.find(word => maxCharsSortedValue == uniqueChars.count(_\
    \ == word))", "        val uniqueChars = words.map(_.length).distinct\n      \
    \  val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_.length >\
    \ _.length)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstChars = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsFirst = maxWordWithMaxCharsFirstChars.head\n\
    \        val maxWordWithMaxCharsFirstCharsFirst = maxWordWithMaxCharsFirstCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsFirstFirst = maxWordWithMaxCharsFirstCharsFirstFirst.head\n\
    \        val maxWordWithMaxCharsFirstCharsFirstFirstFirst = maxWordWithMaxCharsFirstCharsFirstFirstFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsFirstFirstFirstFirst = maxWordWithMaxCharsFirstCharsFirstFirstFirstFirst.head\n\
    \        val maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirst = maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirst = maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirst.head\n\
    \        val maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirst = maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirst\
    \ = maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirst.head\n  \
    \      val maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirst =\
    \ maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirst\
    \ = maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirstFirst.head\n\
    \        val maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirstFirst\
    \ = maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirstFirstFirst.map(_.length)\n\
    \        val ", "        val uniqueChars = words.map(_.length).distinct\n    \
    \    val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLength\
    \ = words.sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLengthReversed\
    \ = words.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversed\
    \ = words.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n        val\
    \ maxWordWithMaxCharsSortedByLengthReversedReversedReversed = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head",
  "        val counts = words.map(word => word.distinct.length).distinct\n       \
    \ val maxCount = counts.max\n        val maxWord = words.filter(word => word.distinct.length\
    \ == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   words.take(maxWordIndex).mkString(\" \")", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \       })\n        })\n        uniqueChars.foreach(c => {\n            maxChars\
    \ += c -> uniqueChars.count(_ == c)\n        })\n        val maxCharsSorted =\
    \ maxChars.toSeq.sortBy(_._2).reverse\n        val maxCharsSortedFirst = maxCharsSorted.head._1\n\
    \        val maxCharsSortedSecond = maxCharsSorted.head._2\n        val maxCharsSortedThird\
    \ = maxCharsSorted.head._3\n        if (maxCharsSortedFirst == maxCharsSortedSecond\
    \ && maxCharsSortedFirst == maxCharsSortedThird) {\n            maxCharsSortedFirst\n\
    \        } else {\n            maxCharsSortedFirst\n        }", "        val counts\
    \ = words.map(word => word.distinct.length).distinct\n        val maxCount = counts.max\n\
    \        val maxWord = words.filter(word => word.distinct.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        words.take(maxWordIndex).mkString(\"\
    \ \")", "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar\
    \ = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars(c) match {\n                    case Some(count)\
    \ => uniqueChars(c) = uniqueChars(c) + 1;\n                    case None => uniqueChars(c)\
    \ = 1\n                }\n            })\n        })\n        uniqueChars.toList.sortWith((a,\
    \ b) => b._2 - a._2).head._1", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsAndMaxWord =\
    \ words.filter(_.length == maxChars).sortBy(_.length).head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head\n     \
    \   val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head.head.head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head.head.head.head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head.head.head.head.head.head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length", "        val chars =\
    \ words.map(_.toCharArray).flatten\n        val counts = chars.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = counts.max\n        val maxChars = counts.filter(_._2\
    \ == maxCount).map(_._1).mkString(\"\")\n        val maxWord = words.filter(word\
    \ => word.count(_ == maxChars) > 0).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(word => word.count(_ == maxChars) > 0).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word\
    \ => word.count(_ == maxChars) > 0).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(word => word.count(_ == maxChars) > 0).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word\
    \ => word.count(_ == maxChars) > 0).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(word => word.count(_ == maxChars) > 0).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word\
    \ => word.count(_ == maxChars) > 0).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(word => word.count(_ == maxChars) > 0).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word\
    \ => word.count(_ == maxChars) > 0).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(word => word.count(_ == maxChars) > 0).head\n\
    \        val maxWordIndex = ", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        val maxWord = mutable.Array[String]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n                maxChars(c) = maxChars.getOrElse(c, 0)\
    \ + 1 \n            })\n        })\n        uniqueChars.toList.sortWith(_ < _).foreach(c\
    \ => {\n            val count = maxChars.get(c)\n            if (count > maxChars.getOrElse(c,\
    \ 0))\n                maxChars(c) = count\n        })\n        maxChars.toList.sortWith(_\
    \ < _).foreach(c => {\n            val count = maxChars.get(c)\n            if\
    \ (count > maxChars.getOrElse(c, 0))\n                maxWord = c :: maxWord\n\
    \        })\n        maxWord.head", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWords = words.filter(w\
    \ => w.length == maxChars)\n        val maxWord = maxWords.sortBy(_.length).head\n\
    \        val maxWordWithMaxChars = words.filter(w => w.length == maxChars && w\
    \ < maxWord)\n        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxChars.sortBy(_.length)\n\
    \        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.head\n\
    \        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.sortBy(_.length)\n\
    \        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.head\n\
    \        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.sortBy(_.length)\n\
    \        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.head\n\
    \        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.sortBy(_.length)\n\
    \        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.head\n\
    \        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.sortBy(_.length)\n\
    \        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.head\n\
    \        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.sortBy(_.length)\n\
    \        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.head\n\
    \        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.sortBy(_.length)\n\
    \        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.head\n\
    \        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.sortBy(_.length)\n\
    \        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.head\n\
    \        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.sortBy(_.length)\n\
    \        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashSet[Char]()\n\
    \        val maxWord = mutable.HashSet[String]()\n        for (word <- words)\
    \ {\n            val chars = word.map(c => c.toInt)\n            uniqueChars ++=\
    \ chars\n            maxChars ++= chars\n        }\n        val maxCount = uniqueChars.max\n\
    \        val maxChar = maxChars.max\n        val maxWords = words.filter(word\
    \ => word.count(_ == maxChar) == maxCount)\n        if (maxWords.isEmpty) maxWord\n\
    \        else maxWords.sortBy(word => word.head).head", "        val unique =\
    \ words.map(x => x.distinct).distinct\n        val maxCount = unique.max\n   \
    \     unique.find(x => x.size == maxCount).head", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirst = words.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsFirstWithMaxChars = words.sortBy(_.length).filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxCharsFirstWithMaxCharsFirst = words.sortBy(_.length).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.sortBy(_.length).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.sortBy(_.length).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.sortBy(_.length).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).head\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.sortBy(_.length).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.sortBy(_.length).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.sortBy(_.length).filter(_.length == ", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars(c) match {\n                    case Some(count) =>\
    \ uniqueChars(c) = uniqueChars(c) + 1;\n                    case None => uniqueChars(c)\
    \ = 1\n                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += char\n                maxChars(char) match {\n\
    \                    case Some(count) => count = count + 1\n                 \
    \   case None => maxChars(char) = uniqueChars.size\n                }\n      \
    \      })\n        })\n        val maxChar = maxChars.maxBy(_._2)._1\n       \
    \ words.find(word => word.contains(maxChar))", "        val unique = words.map(x\
    \ => x.distinct).flatten\n        val maxCount = unique.count(_ == unique.max)\n\
    \        val maxWord = unique.take(maxCount)\n        val maxWordIndex = unique.indexOf(maxWord)\n\
    \        val maxWordString = words.take(maxWordIndex).mkString(\" \")\n      \
    \  words.take(maxWordIndex).mkString(\" \")", "        val unique = words.map(_.length).distinct\n\
    \        val maxCount = unique.max\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   val maxWordLength = maxWord.length\n        val maxWordChars = maxWord.distinct\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n        val\
    \ maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n\
    \        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val\
    \ maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n\
    \        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val\
    \ maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n\
    \        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val\
    \ maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n\
    \        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val\
    \ maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n\
    \        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val\
    \ maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars).head\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsSortedByLength = words.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversed = words.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversed = words.sortBy(_.length).reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.head\n    \
    \    val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n\
    \        val maxWord = maxWords.min\n        val maxWordWithMaxChars = words.filter(_.length\
    \ == maxChars && _.toLowerCase == maxWord.toLowerCase && words.toLowerCase ==\
    \ maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.to",
  "        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                maxChars.getOrElse(c, 0)\
    \ += 1\n            })\n        })\n        val maxCharsCount = maxChars.values.max\n\
    \        val maxCharsKeys = maxChars.keys.max\n        val maxCharsValues = maxChars.values.max\n\
    \        val maxCharsKeysValues = maxCharsKeys.zip(maxCharsValues).max\n     \
    \   val maxCharsKeysValuesString = maxCharsKeysValues.map(x => x._1 + x._2).mkString(\"\
    \")\n        val maxCharsKeysValuesString = maxCharsKeysValues.map(x => x._1 +\
    \ x._2).mkString(\" \")\n        val maxCharsKeysValuesString2 = maxCharsKeysValues.map(x\
    \ => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString3 = maxCharsKeysValues.map(x\
    \ => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString4 = maxCharsKeysValues.map(x\
    \ => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString5 = maxCharsKeysValues.map(x\
    \ => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString6 = maxCharsKeysValues.map(x\
    \ => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString7 = maxCharsKeysValues.map(x\
    \ => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString8 = maxCharsKeysValues.map(x\
    \ => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString9 = maxCharsKeysValues.map(x\
    \ => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString10 = maxCharsKeysValues.map(x\
    \ => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString11 = maxCharsKeysValues.map(x\
    \ => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString12 = maxCharsKeysValues.map(x\
    \ => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString13 = maxCharsKeysValues.map(x\
    \ => x._", "        val uniqueChars = words.map(_.length).distinct\n        val\
    \ maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars).head\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWord = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head.head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head.head.head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head.head.head.head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head.head.head.head.head.head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length", "        val unique =\
    \ words.map(_.length).distinct\n        val maxCount = unique.max\n        val\
    \ maxWord = words.filter(_.length == maxCount).head\n        val maxWordCount\
    \ = unique.filter(_.length == maxCount).length\n        if (maxWordCount == 1)\
    \ {\n            maxWord\n        } else {\n            val maxWordIndex = unique.indexOf(maxWord)\n\
    \            words.take(maxWordIndex).mkString(\" \")\n        }", "        val\
    \ uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWords = words.filter(_.length == maxChars)\n        val maxWord\
    \ = maxWords.sortBy(_.length).head\n        val maxWordLength = maxWord.length\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxWordLength)\n \
    \       val maxWordWithMaxCharsLength = maxWordWithMaxChars.length\n        val\
    \ maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.length\n  \
    \      val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.length\n  \
    \      val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.length\n  \
    \      val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.length\n  \
    \      val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.length\n  \
    \      val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.length\n  \
    \      val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.length\n  \
    \      val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.length\n  \
    \      val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.length\n  \
    \      val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength", "       \
    \ val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                if (uniqueChars.contains(char)) {\n                    uniqueChars\
    \ += char\n                    maxChars(char) += 1\n                } else {\n\
    \                    uniqueChars += char\n                }\n            })\n\
    \        })\n        val maxKey = maxChars.maxBy(_._2)._1\n        words.find(word\
    \ => maxChars(maxKey) == word.count(_ == maxKey))", "        val uniqueChars =\
    \ mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars\
    \ += c -> count\n        })\n        val maxKey = maxChars.maxBy(_._2)\n     \
    \   words.find(word => word.toSet.size == uniqueChars.size).getOrElse(maxKey)",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars\
    \ += c -> count\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith(_.value\
    \ < _.value)\n        val maxCharsSortedFirst = maxCharsSorted.head\n        val\
    \ maxCharsSortedFirstKey = maxCharsSorted.keys.toSeq.find(_.value == maxCharsSortedFirst.value).get\n\
    \        val maxCharsSortedFirstValue = maxCharsSorted.values.toSeq.find(_.value\
    \ == maxCharsSortedFirst.value).get\n        val maxCharsSortedFirstKey = maxCharsSortedFirstKey.toString\n\
    \        val maxCharsSortedFirstValue = maxCharsSortedFirstValue.toString\n  \
    \      val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirstKey\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + max", "    \
    \    val maxCount = words.foldLeft(0) { (max, word) =>\n            val count\
    \ = word.length\n            if (count > max) {\n                count\n     \
    \       } else {\n                max\n            }\n        }\n        val maxWord\
    \ = words.filter(word => word.length == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        words.take(maxWordIndex).mkString(\" \")",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n                maxChars(c) = maxChars(c).max(uniqueChars(c)).getOrElse(0)\n\
    \            })\n        })\n        val maxCharsSorted = maxChars.toSeq.sortBy(_._2).reverse\n\
    \        val maxCharsSortedUnique = maxCharsSorted.filter(_._2 == uniqueChars.size).head._1\n\
    \        val maxCharsSortedUniqueString = maxCharsSortedUnique.mkString\n    \
    \    words.find(word => word.count(_ == maxCharsSortedUniqueString) == uniqueChars.size).getOrElse(\"\
    \")", "        val unique = words.map(x => x.distinct).flatten.toSet\n       \
    \ val maxCount = words.map(x => x.distinct).flatten.count(x => unique.contains(x))\n\
    \        val maxWord = if (maxCount > 1) words.filter(x => unique.contains(x)).head\
    \ else words.head\n        val maxChar = words.map(x => x.distinct).flatten.count(x\
    \ => unique.contains(x))\n        val maxCharWord = if (maxChar > 1) words.filter(x\
    \ => unique.contains(x)).head else words.head\n        val maxCharWord2 = words.map(x\
    \ => x.distinct).flatten.count(x => unique.contains(x))\n        val maxCharWord3\
    \ = words.filter(x => unique.contains(x)).head\n        val maxCharWord4 = words.filter(x\
    \ => unique.contains(x)).head\n        val maxCharWord5 = words.filter(x => unique.contains(x)).head\n\
    \        val maxCharWord6 = words.filter(x => unique.contains(x)).head\n     \
    \   val maxCharWord7 = words.filter(x => unique.contains(x)).head\n        val\
    \ maxCharWord8 = words.filter(x => unique.contains(x)).head\n        val maxCharWord9\
    \ = words.filter(x => unique.contains(x)).head\n        val maxCharWord10 = words.filter(x\
    \ => unique.contains(x)).head\n        val maxCharWord11 = words.filter(x => unique.contains(x)).head\n\
    \        val maxCharWord12 = words.filter(x => unique.contains(x)).head\n    \
    \    val maxCharWord13 = words.filter(x => unique.contains(x)).head\n        val\
    \ maxCharWord14 = words.filter(x => unique.contains(x)).head\n        val maxCharWord15\
    \ = words.filter(x => unique.contains(x)).head\n        val maxCharWord16 = words.filter(x\
    \ => unique.contains(x)).head\n        val maxCharWord17 = words.filter(x => unique.contains(x)).head\n\
    \        val maxCharWord18 = words.filter(x => unique.contains(x)).head\n    \
    \    val maxCharWord19 = words.filter(x => unique.contains(x)).head\n        val\
    \ maxCharWord20 = words.filter(x => unique.contains(x)).head\n        val maxCharWord21\
    \ = words.filter(x => unique.contains(x)).head\n        val maxCharWord22 = words.filter(x\
    \ => unique.contains(x)).head\n        val maxCharWord23 = words.filter(x => unique.contains(x)).head\n\
    \        val maxCharWord24 = words.filter(x => unique.", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxUniqueChars = uniqueChars.max\n\
    \        val maxWords = words.filter(_.length == maxUniqueChars)\n        val\
    \ maxWord = maxWords.min\n        val maxWordWithMaxUniqueChars = words.filter(_.length\
    \ == maxUniqueChars)\n        val maxWordWithMaxUniqueCharsFirst = maxWordWithMaxUniqueChars.head\n\
    \        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrder = maxWordWithMaxUniqueCharsFirst.compareToIgnoreCase(maxWord)\n\
    \        if (maxWordWithMaxUniqueCharsFirstInLexicographicalOrder == 0) maxWordWithMaxUniqueCharsFirst\
    \ else maxWord", "        val unique = words.map(_.length).distinct\n        val\
    \ maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWord =\
    \ words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex\
    \ == -1) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex\
    \ == -1) words.size else maxWordIndex\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordIndex = if (maxWordIndex == -1) words.size\
    \ else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == -1) words.size\
    \ else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWord\
    \ = words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex\
    \ == -1) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex\
    \ == -1) words.size else maxWordIndex\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordIndex = if (maxWordIndex == -1) words.size\
    \ else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == -1) words.size\
    \ else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWord\
    \ = words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex\
    \ == -1) words.size else maxWordIndex\n        val maxWordIndex = if (maxWord",
  "        val unique = words.foldLeft(Set.empty[String]) { (set, word) =>\n     \
    \       set + word\n        }\n        val maxCount = unique.max\n        val\
    \ maxWord = unique.find(_ == maxCount)\n        if (maxCount == unique.size)\n\
    \            maxWord\n        else\n            words.find(word => unique.contains(word)\
    \ && word < maxWord)", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsString = words.apply(maxWordWithMaxCharsIndex)\n\
    \        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsString.length\n\
    \        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsString", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n \
    \       val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n  \
    \      val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n   \
    \     val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n    \
    \    val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n     \
    \   val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n      \
    \  val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n       \
    \ val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val\
    \ maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n \
    \       val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n  \
    \      val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n   \
    \     val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n    \
    \    val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n     \
    \   val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n      \
    \  val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n       \
    \ val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val\
    \ maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ words.indexOf(maxWord", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(w\
    \ => w.length == maxChars)\n        val maxWordWithMaxChars = words.filter(w =>\
    \ w.length == maxChars && w < maxWord)\n        val maxWordWithMaxCharsFirst =\
    \ words.filter(w => w.length == maxChars && w > maxWord)\n        val maxWordWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(w => w.length == maxChars && w < maxWordWithMaxCharsFirst)\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(w => w.length == maxChars && w > maxWordWithMaxCharsFirst)\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(w => w.length == maxChars && w < maxWordWithMaxCharsFirstInLexicographicalOrder\
    \ && w > maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder)\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(w => w.length == maxChars && w > maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder)\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(w => w.length == maxChars && w < maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder)\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(w => w.length == maxChars && w > maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLex",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n                maxChars += c -> 0\n       \
    \     })\n        })\n        val maxKey = maxChars.maxBy(_._2)._1\n        words.find(word\
    \ => uniqueChars.count(_ == word(0)) == maxChars(maxKey))", "        val maxChars\
    \ = mutable.Map[Int, String]()\n        words.foreach(word => {\n            val\
    \ chars = word.distinct\n            val count = chars.length\n            if\
    \ (maxChars.contains(count)) {\n                maxChars(count) = word\n     \
    \       } else {\n                maxChars(count) = word\n            }\n    \
    \    })\n        maxChars.maxBy(_._1)._1", "        val unique = words.map(_.length).distinct\n\
    \        val maxCount = unique.max\n        val maxWord = words.filter(_.length\
    \ == maxCount).sortBy(_.length).head\n        unique.find(_ == maxCount) match\
    \ {\n            case Some(count) => maxWord\n            case None => \"\"\n\
    \        }", "        val chars = words.map(_.toCharArray).flatten\n        val\
    \ counts = chars.groupBy(identity).mapValues(_.length)\n        val maxCount =\
    \ counts.max\n        val maxChars = counts.filter(_._2 == maxCount).keys.toList\n\
    \        val maxCharsIndex = chars.indexOf(maxChars.head)\n        val maxCharsString\
    \ = chars.take(maxCharsIndex).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_\
    \ != maxChars.head).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_\
    \ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_\
    \ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_\
    \ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_\
    \ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_\
    \ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_\
    \ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_\
    \ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_\
    \ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_\
    \ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_\
    \ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_\
    \ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_\
    \ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_\
    \ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_\
    \ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_\
    \ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_\
    \ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_\
    \ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_",
  "        val unique = words.map(_.length).distinct\n        val maxUnique = unique.max\n\
    \        val maxIndex = unique.indexOf(maxUnique)\n        words(maxIndex)", " \
    \       val maxCount = words.foldLeft(0)((count, word) => count + word.count(\"\
    a\"))\n        val maxWord = words.filter(word => word.count(\"a\") == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        words.take(maxWordIndex).mkString(\"\
    \")", "        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars\
    \ = chars.distinct\n        val maxCount = uniqueChars.count(_ == chars.max)\n\
    \        val maxChar = uniqueChars.max\n        val maxCharIndex = chars.indexOf(maxChar)\n\
    \        val maxCharIndex = if (maxCharIndex == -1) words.length else maxCharIndex\n\
    \        val maxWord = words.take(maxCharIndex).mkString(\"\")\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        val maxWordIndex = if (maxWordIndex == -1)\
    \ words.length else maxWordIndex\n        val maxWord = words.take(maxWordIndex).mkString(\"\
    \")\n        if (maxCount == 1) maxWord\n        else if (maxCount > 1) maxWord\n\
    \        else words.take(maxWordIndex).mkString(\"\")", "        val uniqueChars\
    \ = words.map(word => word.distinct).reduce(_ ++ _)\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(word => word.count(_ == maxChars) == 1)\n\
    \        val maxWordWithMaxChars = maxWord.filter(word => word.count(_ == maxChars)\
    \ == 1)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.sortBy(word\
    \ => word.head)\n        val maxWordWithMaxCharsFirstWithMaxChars = maxWordWithMaxCharsFirst.filter(word\
    \ => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstWithMaxChars.sortBy(word => word.head)\n        val\
    \ maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = maxWordWithMaxCharsFirstWithMaxCharsFirst.filter(word\
    \ => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.sortBy(word => word.head)\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst.filter(word =>\
    \ word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.sortBy(word\
    \ => word.head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst.filter(word\
    \ => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.sortBy(word\
    \ => word.head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = maxWordWith", "        val unique = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                if (!unique.contains(c))\
    \ {\n                    unique(c) = unique.getOrElse(c, 0) + 1\n            \
    \    }\n            })\n        })\n        val maxKey = unique.maxBy(_._2)._1\n\
    \        words.find(word => word(maxKey) == unique.maxBy(_._2)._1)", "       \
    \ val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWords = words.filter(_.length == maxChars)\n        val maxWord\
    \ = maxWords.head\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).head\n        val maxWordWithMaxCharsFirstInLex = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexLex\
    \ = words.filter(_.length == maxChars).sortBy(_.length).reverse.head\n       \
    \ val maxWordWithMaxCharsFirstInLexLexLex = words.filter(_.length == maxChars).sortBy(_.length).reverse.tail.head\n\
    \        val maxWordWithMaxCharsFirstInLexLexLexLex = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).reverse.tail.tail.head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLex\
    \ = words.filter(_.length == maxChars).sortBy(_.length).reverse.tail.tail.tail.head\n\
    \        val maxWordWithMaxCharsFirstInLexLexLexLexLexLex = words.filter(_.length\
    \ == maxChars).sortBy(_.length).reverse.tail.tail.tail.tail.head\n        val\
    \ maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex = words.filter(_.length == maxChars).sortBy(_.length).reverse.tail.tail.tail.tail.tail.head\n\
    \        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLex = words.filter(_.length\
    \ == maxChars).sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.head\n \
    \       val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLex = words.filter(_.length\
    \ == maxChars).sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLexLex = words.filter(_.length\
    \ == maxChars).sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLexLexLex = words.filter(_.length\
    \ == maxChars).sortBy(_.length).reverse.tail.tail.tail.", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWord = words.filter(_.length == maxChars).sortBy(_.length).head\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last\n  \
    \      val maxWordWithMaxCharsAndMaxWordAndMaxWord = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last\n  \
    \      val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n\
    \            words.filter(_.length == maxChars).sortBy(_.length).last\n      \
    \  val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n\
    \            words.filter(_.length == maxChars).sortBy(_.length).last +\n    \
    \        words.filter(_.length == maxChars).sortBy(_.length).last\n        val\
    \ maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n\
    \            words.filter(_.length == maxChars).sortBy(_.length).last +\n    \
    \        words.filter(_.length == maxChars).sortBy(_.length).last +\n        \
    \    words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == max", "        val chars = words.map(_.toChar).distinct\n\
    \        val maxChars = chars.max\n        val maxWord = words.filter(_.toChar\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.toChar == maxChars).head\n\
    \        val maxWordWithMaxCharsAndMaxWord = words.filter(_.toChar == maxChars).takeWhile(_.toChar\
    \ == maxChars).head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWords = words.filter(_.toChar\
    \ == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWords = words.filter(_.toChar\
    \ == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar\
    \ == maxChars).head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar\
    \ == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).head\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar\
    \ == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar\
    \ == maxChars).head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar\
    \ == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar\
    \ == maxChars).takeWhile(_.toChar == maxChars).head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar\
    \ == maxChars).takeWhile(_.toChar == maxChars).takeWhile", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxCount = uniqueChars.max\n   \
    \     val maxWord = words.filter(_.length == maxCount).min\n        val maxWordWithCount\
    \ = words.filter(_.length == maxCount).max\n        val maxWordWithCountWithMax\
    \ = words.filter(_.length == maxCount).maxBy(_.length)\n        val maxWordWithCountWithMaxWithMax\
    \ = words.filter(_.length == maxCount).maxBy(_.length).maxBy(_.length)\n     \
    \   val maxWordWithCountWithMaxWithMaxWithMax = words.filter(_.length == maxCount).maxBy(_.length).maxBy(_.length).maxBy(_.length)\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMax = words.filter(_.length\
    \ == maxCount).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length)\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(_.length\
    \ == maxCount).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length)\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(_.length\
    \ == maxCount).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length)\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(_.length\
    \ == maxCount).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length)\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = words.filter(_.length == maxCount).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length)\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = words.filter(_.length == maxCount).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length)\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMax", "        val\
    \ counts = words.map(word => word.count(_ == 'a')).toList\n        val maxCount\
    \ = counts.max\n        val maxWord = words.filter(word => word.count(_ == 'a')\
    \ == maxCount).head\n        val maxWordWithCount = words.filter(word => word.count(_\
    \ == 'a') == maxCount).sortBy(word => word).head\n        val maxWordWithCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word).sortBy(word\
    \ => word).head\n        val maxWordWithCountWithMaxCountWithMaxCount = words.filter(word\
    \ => word.count(_ == 'a') == maxCount).sortBy(word => word).sortBy(word => word).sortBy(word\
    \ => word).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word).sortBy(word\
    \ => word).sortBy(word => word).sortBy(word => word).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word).sortBy(word\
    \ => word).sortBy(word => word).sortBy(word => word).sortBy(word => word).head\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word).sortBy(word\
    \ => word).sortBy(word => word).sortBy(word => word).sortBy(word => word).sortBy(word\
    \ => word).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word).sortBy(word\
    \ => word).sortBy(word => word).sortBy(word => word).sortBy(word => word).sortBy(word\
    \ => word).sortBy(word => word).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word).sortBy(word\
    \ => word).sortBy(word => word).sortBy(word => word).sortBy(word => word).sortBy(word\
    \ => word).sortBy(word => word).sortBy(word => word).head\n", "        val unique\
    \ = words.map(x => x.toSet).reduceLeft(_ ++ _)\n        val maxCount = unique.max\n\
    \        val maxWord = words.filter(x => x.toSet.size == maxCount).min\n     \
    \   val maxWordString = maxWord.mkString(\"\")\n        val maxWordLength = maxWordString.length\n\
    \        val maxWordChars = maxWordString.toCharArray\n        val maxWordCharsLength\
    \ = maxWordChars.length\n        val maxWordCharsSet = maxWordChars.toSet\n  \
    \      val maxWordCharsSetLength = maxWordCharsSet.length\n        val maxWordCharsSetSet\
    \ = maxWordCharsSet.toSet\n        val maxWordCharsSetSetLength = maxWordCharsSetSet.length\n\
    \        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n       \
    \ val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength\
    \ = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n\
    \        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n       \
    \ val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength\
    \ = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n\
    \        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n       \
    \ val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength\
    \ = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n\
    \        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n       \
    \ val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength\
    \ = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n\
    \        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n       \
    \ val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength\
    \ = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWord",
  "        val maxCountMap = mutable.Map[String, Int]()\n        words.foreach(word\
    \ => {\n            val count = maxCountMap.getOrElse(word, 0) + 1;\n        \
    \    maxCountMap += (word -> (count))\n        })\n        val maxCount = maxCountMap.maxBy(_._2)._1\n\
    \        val maxWord = maxCountMap.maxBy(_._2)._2\n        val maxWords = maxCountMap.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxWordsSorted = maxWords.sortWith(_ < _)\n\
    \        val maxWordsSortedFirst = maxWordsSorted.head\n        val maxWordsSortedFirstIndex\
    \ = words.indexOf(maxWordsSortedFirst)\n        val maxWordsSortedFirstIndex =\
    \ if (maxWordsSortedFirstIndex == -1) words.size else maxWordsSortedFirstIndex\n\
    \        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex == -1) words.size\
    \ else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex\
    \ == -1) words.size else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex\
    \ = if (maxWordsSortedFirstIndex == -1) words.size else maxWordsSortedFirstIndex\n\
    \        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex == -1) words.size\
    \ else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex\
    \ == -1) words.size else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex\
    \ = if (maxWordsSortedFirstIndex == -1) words.size else maxWordsSortedFirstIndex\n\
    \        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex == -1) words.size\
    \ else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex\
    \ == -1) words.size else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex\
    \ = if (maxWordsSortedFirstIndex == -1) words.size else maxWordsSortedFirstIndex\n\
    \        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex == -1) words.size\
    \ else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex\
    \ == -1) words.size else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex\
    \ = if (maxWordsSortedFirstIndex == -1) words.size else maxWordsSortedFirstIndex\n\
    \        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex == -1) words.",
  "        val unique = words.map(x => x.distinct).flatten.toSet\n        val maxCount\
    \ = words.map(x => x.distinct).flatten.toSet.max\n        val maxWord = words.filter(x\
    \ => x.distinct.size == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        words.take(maxWordIndex).mkString(\" \")", "        val unique = words.map(x\
    \ => x.distinct).distinct\n        val maxCount = unique.map(x => x.size).max\n\
    \        val maxWord = unique.filter(x => x.size == maxCount).head\n        unique.filter(x\
    \ => x.size == maxCount).sortWith(_ < _).head", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxCount = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxCount).sortBy(_.length).head\n        uniqueChars.find(_ == maxCount)\
    \ match {\n            case Some(count) => maxWord\n            case None => \"\
    \"\n        }", "        val unique = words.map(_.length).distinct\n        val\
    \ max = unique.max\n        val index = unique.indexOfMax\n        if (index !=\
    \ -1)\n            words(index)\n        else\n            \"\"", "        val\
    \ unique = mutable.HashSet[String]()\n        val maxWord = mutable.HashMap[String,\
    \ Int]()\n        words.foreach(word => {\n            val count = unique.count(_\
    \ == word)\n            if (count > maxWord(word)) {\n                maxWord(word)\
    \ = count\n            }\n            unique += word\n        })\n        val\
    \ maxCount = maxWord.maxBy(_._2)\n        val maxWords = maxWord.filter(_._2 ==\
    \ maxCount).map(_._1)\n        if (maxWords.isEmpty) \"\"\n        else maxWords.min",
  "        val unique = words.map(_.distinct).map(_.size).max\n        val maxWord\
    \ = words.filter(_.distinct.size == unique)\n        val maxWordWithMaxChars =\
    \ maxWord.sortWith((a, b) => a.length < b.length)(0)\n        val maxWordWithMaxCharsAndFirst\
    \ = maxWordWithMaxChars.sortWith((a, b) => a.compareTo(b) < 0)(0)\n        maxWordWithMaxCharsAndFirst"]
stop_tokens:
- "\n    }\n"
