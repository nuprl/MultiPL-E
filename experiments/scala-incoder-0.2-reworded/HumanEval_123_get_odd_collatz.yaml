name: HumanEval_123_get_odd_collatz
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return a sorted list that has the odd numbers\
  \ in collatz sequence.\n    // The Collatz conjecture is a conjecture in mathematics\
  \ that concerns a sequence defined\n    // as follows: start with any positive integer\
  \ n. Then each term is obtained from the \n    // previous term as follows: if the\
  \ previous term is even, the next term is one half of \n    // the previous term.\
  \ If the previous term is odd, the next term is 3 times the previous\n    // term\
  \ plus 1. The conjecture is that no matter what value of n, the sequence will always\
  \ reach 1.\n    // Note: \n    // 1. Collatz(1) is [1].\n    // 2. returned list\
  \ sorted in increasing order.\n    // For example:\n    // get_odd_collatz(5) returns\
  \ [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers\
  \ are only 1, and 5.\n    // >>> getOddCollatz((5l))\n    // (List[Long](1l.toLong,\
  \ 5l.toLong))\n    def getOddCollatz(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
  \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
  \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        val odd = mutable.ListBuffer.empty[Long]\n        val even\
    \ = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n1 = n.toInt\n        val n2 = n1.toInt\n        val n3 = n2.toInt\n\
    \        val n4 = n3.toInt\n        val n5 = n4.toInt\n        val n6 = n5.toInt\n\
    \        val n7 = n6.toInt\n        val n8 = n7.toInt\n        val n9 = n8.toInt\n\
    \        val n10 = n9.toInt\n        val n11 = n10.toInt\n        val n12 = n11.toInt\n\
    \        val n13 = n12.toInt\n        val n14 = n13.toInt\n        val n15 = n14.toInt\n\
    \        val n16 = n15.toInt\n        val n17 = n16.toInt\n        val n18 = n17.toInt\n\
    \        val n19 = n18.toInt\n        val n20 = n19.toInt\n        val n21 = n20.toInt\n\
    \        val n22 = n21.toInt\n        val n23 = n22.toInt\n        val n24 = n23.toInt\n\
    \        val n25 = n24.toInt\n        val n26 = n25.toInt\n        val n27 = n26.toInt\n\
    \        val n28 = n27.toInt\n        val n29 = n28.toInt\n        val n30 = n29.toInt\n\
    \        val n31 = n30.toInt\n        val n32 = n31.toInt\n        val n33 = n32.toInt\n\
    \        val n34 = n33.toInt\n        val n35 = n34.toInt\n        val n36 = n35.toInt\n\
    \        val n37 = n36.toInt\n        val n38 = n37.toInt\n        val n39 = n38.toInt\n\
    \        val n40 = n39.toInt\n        val n41 = n40.toInt\n        val n42 = n41.toInt\n\
    \        val n43 = n42.toInt\n        val n44 = n43.toInt\n        val n45 = n44.toInt\n\
    \        val n46 = n45.toInt\n        val n47 = n46.toInt\n        val n48 = n47.toInt\n\
    \        val n49 = n48.toInt\n        val n50 = n49.toInt\n        val n51 = n50.toInt\n\
    \        val n", "        val odd_collatz = new mutable.ListBuffer[Long]()\n \
    \       val collatz = new mutable.ListBuffer[Long]()\n        val odd_collatz_temp\
    \ = new mutable.ListBuffer[Long]()\n        val collatz_temp = new mutable.ListBuffer[Long]()\n\
    \        val odd_collatz_temp_temp = new mutable.ListBuffer[Long]()\n        val\
    \ collatz_temp_temp = new mutable.ListBuffer[Long]()\n        val odd_collatz_temp_temp_temp\
    \ = new mutable.ListBuffer[Long]()\n        val collatz_temp_temp_temp = new mutable.ListBuffer[Long]()\n\
    \        val odd_collatz_temp_temp_temp_temp = new mutable.ListBuffer[Long]()\n\
    \        val collatz_temp_temp_temp_temp = new mutable.ListBuffer[Long]()\n  \
    \      val odd_collatz_temp_temp_temp_temp_temp = new mutable.ListBuffer[Long]()\n\
    \        val collatz_temp_temp_temp_temp_temp = new mutable.ListBuffer[Long]()\n\
    \        val odd_collatz_temp_temp_temp_temp_temp_temp = new mutable.ListBuffer[Long]()\n\
    \        val collatz_temp_temp_temp_temp_temp_temp = new mutable.ListBuffer[Long]()\n\
    \        val odd_collatz_temp_temp_temp_temp_temp_temp_temp = new mutable.ListBuffer[Long]()\n\
    \        val collatz_temp_temp_temp_temp_temp_temp_temp = new mutable.ListBuffer[Long]()\n\
    \        val odd_collatz_temp_temp_temp_temp_temp_temp_temp_temp = new mutable.ListBuffer[Long]()\n\
    \        val collatz_temp_temp_temp_temp_temp_temp_temp_temp = new mutable.ListBuffer[Long]()\n\
    \        val odd_collatz_temp_temp_temp_temp_temp_temp_temp_temp_temp = new mutable.ListBuffer[Long]()\n\
    \        val collatz_temp_temp_temp_temp_temp_temp_temp_temp_temp = new mutable.ListBuffer[Long]()\n\
    \        val odd_collatz_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = new\
    \ mutable.ListBuffer[Long]()\n        val collatz_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = new mutable.ListBuffer[Long]()\n        val odd_collatz_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = new mutable.ListBuffer[Long]()\n        val collatz_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = new mutable.ListBuffer[", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        var current = 0\n        while (current < n) {\n            val next\
    \ = current + 1\n            if (next % 2 == 0) {\n                even.append(next)\n\
    \            } else {\n                odd.append(next)\n            }\n     \
    \       current = next\n        }\n        odd.toList ++ even.toList", "     \
    \   val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val n = n.toInt\n \
    \       val prev = 1\n        val next = 1\n        val prevEven = 1\n       \
    \ val nextEven = 1\n        val prevOdd = 1\n        val nextOdd = 1\n       \
    \ while(n > 1) {\n            n match {\n                case 1 => collatz ++=\
    \ List(prev)\n                case 2 => even ++= List(next)\n                case\
    \ 3 => odd ++= List(next)\n                case 4 => even ++= List(nextEven)\n\
    \                case 5 => odd ++= List(nextOdd)\n                case 6 => even\
    \ ++= List(prevEven)\n                case 7 => odd ++= List(prevOdd)\n      \
    \          case _ => collatz ++= List(prev)\n            }\n            prevEven\
    \ = prev\n            prevOdd = prev\n            prevEven = nextEven\n      \
    \      prevOdd = nextOdd\n            prevEven = next\n            prevOdd = next\n\
    \            prev = next\n            next = nextEven\n            nextEven =\
    \ nextOdd\n            next = prevEven\n            nextOdd = prevOdd\n      \
    \  }\n        collatz.sortWith(_ < _)", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val prev = 0\n        val next = 1\n        val current = (1l).toLong\n\
    \        val evens = even.clear()\n        val odds = odd.clear()\n        val\
    \ list = list.clear()\n        val prev = 0\n        val next = 1\n        val\
    \ current = (1l).toLong\n        val evens = even.clear()\n        val odds =\
    \ odd.clear()\n        val list = list.clear()\n        val prev = 0\n       \
    \ val next = 1\n        val current = (1l).toLong\n        val evens = even.clear()\n\
    \        val odds = odd.clear()\n        val list = list.clear()\n        val\
    \ prev = 0\n        val next = 1\n        val current = (1l).toLong\n        val\
    \ evens = even.clear()\n        val odds = odd.clear()\n        val list = list.clear()\n\
    \        val prev = 0\n        val next = 1\n        val current = (1l).toLong\n\
    \        val evens = even.clear()\n        val odds = odd.clear()\n        val\
    \ list = list.clear()\n        val prev = 0\n        val next = 1\n        val\
    \ current = (1l).toLong\n        val evens = even.clear()\n        val odds =\
    \ odd.clear()\n        val list = list.clear()\n        val prev = 0\n       \
    \ val next = 1\n        val current = (1l).toLong\n        val evens = even.clear()\n\
    \        val odds = odd.clear()\n        val list = list.clear()\n        val\
    \ prev = 0\n        val next = 1\n        val current = (1l).toLong\n        val\
    \ evens = even.clear()\n        val odds = odd.clear()\n        val list = list.clear()\n\
    \        val prev = 0\n        val next = 1\n        val current = (1l).toLong\n\
    \        val evens = even.clear()\n        val odds = odd.clear()\n        val\
    \ list = list.clear()\n        val prev = 0\n        val next = 1\n        val\
    \ current = (1l).toLong\n        val evens = even.clear()\n        val odds =\
    \ odd.clear()\n        val list = list.clear()\n        val prev = 0\n       \
    \ val next = 1\n        val current = (1l).toLong\n        val evens = even.clear()\n\
    \        val odds = odd.clear()\n        val list = list.clear()\n        val\
    \ prev = 0\n        val next = 1\n        val current = (1l).toLong\n        val\
    \ evens = ", "        var odd = List[Long]()\n        var current = 1\n      \
    \  var next = 1\n        while (current <= n) {\n            next = current *\
    \ 2 + 1\n            if (next % 2 == 0) {\n                odd ::= next\n    \
    \        } else {\n                odd ::= next * 3 + 1\n            }\n     \
    \       current += 1\n        }\n        odd.sortWith(_ < _)\n        return odd",
  "        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.List", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        var current = 1\n        while (current < n) {\n            val next\
    \ = current + 1\n            if (next % 2 == 0) {\n                odd += next\n\
    \            }\n            current = next\n        }\n        odd.toList", " \
    \       val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val list = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 1\n        val current = 1\n    \
    \    val next = 1\n        val evenNext = 1\n        val oddNext = 1\n       \
    \ val evenPrev = 1\n        val oddPrev = 1\n        while(current <= n) {\n \
    \           val next = current + 1\n            val evenNext = next * 2\n    \
    \        val oddNext = next * 3 + 1\n            val evenPrev = prev * 2\n   \
    \         val oddPrev = prev * 3 + 1\n            if(evenNext == next) {\n   \
    \             even += evenNext\n                odd += oddNext\n             \
    \   collatz += even\n                collatz += odd\n                list += even\n\
    \                list += odd\n                prev += 2\n                current\
    \ += 2\n            } else if(oddNext == next) {\n                even += evenNext\n\
    \                odd += oddNext\n                collatz += even\n           \
    \     collatz += odd\n                list += even\n                list += odd\n\
    \                prev += 3\n                current += 3\n            } else {\n\
    \                even += evenNext\n                odd += oddNext\n          \
    \      collatz += even\n                collatz += odd\n                list +=\
    \ even\n                list += odd\n                prev += 3\n             \
    \   current += 3\n            }\n        }\n        return list.toList", "   \
    \     val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val temp = mutable.ListBuffer.empty[Long]\n\
    \        val temp2 = mutable.ListBuffer.empty[Long]\n        val temp3 = mutable.ListBuffer.empty[Long]\n\
    \        val temp4 = mutable.ListBuffer.empty[Long]\n        val temp5 = mutable.ListBuffer.empty[Long]\n\
    \        val temp6 = mutable.ListBuffer.empty[Long]\n        val temp7 = mutable.ListBuffer.empty[Long]\n\
    \        val temp8 = mutable.ListBuffer.empty[Long]\n        val temp9 = mutable.ListBuffer.empty[Long]\n\
    \        val temp10 = mutable.ListBuffer.empty[Long]\n        val temp11 = mutable.ListBuffer.empty[Long]\n\
    \        val temp12 = mutable.ListBuffer.empty[Long]\n        val temp13 = mutable.ListBuffer.empty[Long]\n\
    \        val temp14 = mutable.ListBuffer.empty[Long]\n        val temp15 = mutable.ListBuffer.empty[Long]\n\
    \        val temp16 = mutable.ListBuffer.empty[Long]\n        val temp17 = mutable.ListBuffer.empty[Long]\n\
    \        val temp18 = mutable.ListBuffer.empty[Long]\n        val temp19 = mutable.ListBuffer.empty[Long]\n\
    \        val temp20 = mutable.ListBuffer.empty[Long]\n        val temp21 = mutable.ListBuffer.empty[Long]\n\
    \        val temp22 = mutable.ListBuffer.empty[Long]\n        val temp23 = mutable.ListBuffer.empty[Long]\n\
    \        val temp24 = mutable.ListBuffer.empty[Long]\n        val temp25 = mutable.ListBuffer.empty[Long]\n\
    \        val temp26 = mutable.ListBuffer.empty[Long]\n        val temp27 = mutable.ListBuffer.empty[Long]\n\
    \        val temp28 = mutable.ListBuffer.empty[Long]\n        val temp29 = mutable.ListBuffer.empty[Long]\n\
    \        val temp30 = mutable.ListBuffer.empty[Long]\n        val temp31 = mutable.ListBuffer.empty[Long]\n\
    \        val temp32 = mutable.ListBuffer.empty[Long]\n        val temp33 = mutable.ListBuffer.empty[Long]\n\
    \        val temp34 = mutable.ListBuffer.empty[Long]\n        val temp35 = mutable.ListBuffer.",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq = mutable.ListBuffer.empty[Long]\n        val collatzSeqLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLen = mutable.ListBuffer.empty[Long]\n        val\
    \ collatzSeqLenLenLenLen = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLen =\
    \ mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val prev = 0\n        val next = 1\n        val evenNext = if (n % 2\
    \ == 0) next * 2 else next * 3 + 1\n        val oddNext = if (n % 2 == 1) next\
    \ * 2 else next * 3 + 1\n        val evenPrev = if (n % 2 == 0) prev * 2 else\
    \ prev * 3 + 1\n        val oddPrev = if (n % 2 == 1) prev * 2 else prev * 3 +\
    \ 1\n        val evenList = if (n % 2 == 0) even.take(prev + 1).reverse else even.take(prev\
    \ + 1).reverse\n        val oddList = if (n % 2 == 1) odd.take(prev + 1).reverse\
    \ else odd.take(prev + 1).reverse\n        val list = if (even.nonEmpty) evenList\
    \ ++ oddList else oddList ++ evenList\n        list.sortWith(_ < _)", "      \
    \  val result = new mutable.ListBuffer[Long]()\n        var prev = 0\n       \
    \ while(n > 1) {\n            val next = if (n % 2 == 0) prev + 1 else prev *\
    \ 3 + 1\n            prev = next\n            result += next\n            n -=\
    \ 1\n        }\n        result.sorted", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_odd_even\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_odd\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n        val\
    \ odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_odd_odd_odd\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_odd_odd_odd_even =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_", "        var result : List[Long] = List()\n  \
    \      var prev : Long = 1\n        var i : Long = 1\n        while (i <= n) {\n\
    \            val next = (prev match {\n                case 1 => prev\n      \
    \          case 2 => prev / 2\n                case 3 => prev * 3 + 1\n      \
    \          case _ => prev * 3\n            }).toLong\n            prev = next\n\
    \            result += next\n            i += 1\n        }\n        result.sortWith(_\
    \ < _)\n        result", "        val odd = mutable.ListBuffer[Long]()\n     \
    \   val even = mutable.ListBuffer[Long]()\n        val list = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val evenList = mutable.ListBuffer[Long]()\n\
    \        val oddList = mutable.ListBuffer[Long]()\n        val evenCollatz = mutable.ListBuffer[Long]()\n\
    \        val oddCollatz = mutable.ListBuffer[Long]()\n        val evenList = mutable.ListBuffer[Long]()\n\
    \        val oddList = mutable.ListBuffer[Long]()\n        val evenCollatz = mutable.ListBuffer[Long]()\n\
    \        val oddCollatz = mutable.ListBuffer[Long]()\n        val evenList = mutable.ListBuffer[Long]()\n\
    \        val oddList = mutable.ListBuffer[Long]()\n        val evenCollatz = mutable.ListBuffer[Long]()\n\
    \        val oddCollatz = mutable.ListBuffer[Long]()\n        val evenList = mutable.ListBuffer[Long]()\n\
    \        val oddList = mutable.ListBuffer[Long]()\n        val evenCollatz = mutable.ListBuffer[Long]()\n\
    \        val oddCollatz = mutable.ListBuffer[Long]()\n        val evenList = mutable.ListBuffer[Long]()\n\
    \        val oddList = mutable.ListBuffer[Long]()\n        val evenCollatz = mutable.ListBuffer[Long]()\n\
    \        val oddCollatz = mutable.ListBuffer[Long]()\n        val evenList = mutable.ListBuffer[Long]()\n\
    \        val oddList = mutable.ListBuffer[Long]()\n        val evenCollatz = mutable.ListBuffer[Long]()\n\
    \        val oddCollatz = mutable.ListBuffer[Long]()\n        val evenList = mutable.ListBuffer[Long]()\n\
    \        val oddList = mutable.ListBuffer[Long]()\n        val evenCollatz = mutable.ListBuffer[Long]()\n\
    \        val oddCollatz = mutable.ListBuffer[Long]()\n        val evenList = mutable.ListBuffer[Long]()\n\
    \        val oddList = mutable.ListBuffer[Long]()\n        val evenCollatz = mutable.ListBuffer[Long]()\n\
    \        val oddCollatz = mutable.ListBuffer[Long]()\n        val evenList = mutable.ListBuffer[Long]()",
  "        val odd = mutable.ListBuffer.empty[Long]\n        var current = 1\n   \
    \     while (current <= n) {\n            if (isOdd(current)) {\n            \
    \    odd += current\n                current *= 2\n            } else {\n    \
    \            current *= 3 + 1\n            }\n        }\n        odd.toList",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val collatzSeq\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLen = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLen = mutable.ListBuffer.empty[Long]\n       \
    \ val collatzSeqLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n        val\
    \ collatzSeqLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        ", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val collatzList\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList2 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList3 = mutable.ListBuffer.empty[Long]\n        val collatzList4\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList5 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList6 = mutable.ListBuffer.empty[Long]\n        val collatzList7\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList8 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList9 = mutable.ListBuffer.empty[Long]\n        val collatzList10\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList11 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList12 = mutable.ListBuffer.empty[Long]\n        val collatzList13\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList14 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList15 = mutable.ListBuffer.empty[Long]\n        val collatzList16\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList17 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList18 = mutable.ListBuffer.empty[Long]\n        val collatzList19\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList20 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList21 = mutable.ListBuffer.empty[Long]\n        val collatzList22\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList23 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList24 = mutable.ListBuffer.empty[Long]\n        val collatzList25\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList26 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList27 = mutable.ListBuffer.empty[Long]\n        val collatzList28\
    \ = mutable.ListBuffer.empty[", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val prev = new mutable.ListBuffer[Long]()\n        val next = new mutable.ListBuffer[Long]()\n\
    \        val current = (1l).until(n).reverse\n        current.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                prev += x\n            } else\
    \ {\n                next += x\n            }\n        })\n        val even =\
    \ prev.filter(x => x % 2 == 0)\n        val odd = next.filter(x => x % 2 == 1)\n\
    \        val evenSorted = even.sorted\n        val oddSorted = odd.sorted\n  \
    \      evenSorted.foreach(x => result += x)\n        oddSorted.foreach(x => result\
    \ += x)\n        result.sorted", "        var odds : List[Long] = Nil\n      \
    \  var i : Long = 1\n        while (i <= n) {\n            if (isOdd(i)) {\n \
    \               odds = odds :+ i\n            }\n            i = i * 3 + 1\n \
    \       }\n        odds.sortWith(_.compareTo(_) < 0)", "        val result = mutable.ListBuffer[Long]()\n\
    \        val prev = 0\n        val current = 1\n        while (current <= n) {\n\
    \            val next = current + 1\n            if (next % 2 == 0) {\n      \
    \          result += next\n                current = next\n            } else\
    \ {\n                current = next * 3 + 1\n            }\n        }\n      \
    \  result.sortWith(_ < _)\n        return result.toList", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq = mutable.ListBuffer.empty[Long]\n        val collatzSeq2\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq3 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq4 = mutable.ListBuffer.empty[Long]\n        val collatzSeq5\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq6 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq7 = mutable.ListBuffer.empty[Long]\n        val collatzSeq8\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq9 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq10 = mutable.ListBuffer.empty[Long]\n        val collatzSeq11\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq12 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq13 = mutable.ListBuffer.empty[Long]\n        val collatzSeq14\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq15 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq16 = mutable.ListBuffer.empty[Long]\n        val collatzSeq17\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq18 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq19 = mutable.ListBuffer.empty[Long]\n        val collatzSeq20\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq21 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq22 = mutable.ListBuffer.empty[Long]\n        val collatzSeq23\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq24 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq25 = mutable.ListBuffer.empty[Long]\n        val collatzSeq26\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq27 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq28 = mutable.ListBuffer.empty[Long]\n        val collatzSeq29\
    \ = mutable.", "        var odd_nums = List[Long]()\n        var odd_nums_set\
    \ = scala.collection.mutable.Set[Long]()\n        var odd_nums_set = scala.collection.mutable.Set[Long]()\n\
    \        var odd_nums_set = scala.collection.mutable.Set[Long]()\n        var\
    \ odd_nums_set = scala.collection.mutable.Set[Long]()\n        var odd_nums_set\
    \ = scala.collection.mutable.Set[Long]()\n        var odd_nums_set = scala.collection.mutable.Set[Long]()\n\
    \        var odd_nums_set = scala.collection.mutable.Set[Long]()\n        var\
    \ odd_nums_set = scala.collection.mutable.Set[Long]()\n        var odd_nums_set\
    \ = scala.collection.mutable.Set[Long]()\n        var odd_nums_set = scala.collection.mutable.Set[Long]()\n\
    \        var odd_nums_set = scala.collection.mutable.Set[Long]()\n        var\
    \ odd_nums_set = scala.collection.mutable.Set[Long]()\n        var odd_nums_set\
    \ = scala.collection.mutable.Set[Long]()\n        var odd_nums_set = scala.collection.mutable.Set[Long]()\n\
    \        var odd_nums_set = scala.collection.mutable.Set[Long]()\n        var\
    \ odd_nums_set = scala.collection.mutable.Set[Long]()\n        var odd_nums_set\
    \ = scala.collection.mutable.Set[Long]()\n        var odd_nums_set = scala.collection.mutable.Set[Long]()\n\
    \        var odd_nums_set = scala.collection.mutable.Set[Long]()\n        var\
    \ odd_nums_set = scala.collection.mutable.Set[Long]()\n        var odd_nums_set\
    \ = scala.collection.mutable.Set[Long]()\n        var odd_nums_set = scala.collection.mutable.Set[Long]()\n\
    \        var odd_nums_set = scala.collection.mutable.Set[Long]()\n        var\
    \ odd_nums_set = scala.collection.mutable.Set[Long]()\n        var odd_nums_set\
    \ = scala.collection.mutable.Set[Long]()\n        var odd_nums_set = scala.collection.mutable.Set[Long]()\n\
    \        var odd_nums_set = scala.collection.mutable.Set[Long]()\n        var\
    \ odd_nums_set = scala.collection.mutable.Set[Long]()\n        var odd_nums_set\
    \ = scala.collection.mutable.Set[Long]()\n        var odd_nums_set = scala.collection.",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val temp = mutable.ListBuffer.empty[Long]\n\
    \        val temp2 = mutable.ListBuffer.empty[Long]\n        val temp3 = mutable.ListBuffer.empty[Long]\n\
    \        val temp4 = mutable.ListBuffer.empty[Long]\n        val temp5 = mutable.ListBuffer.empty[Long]\n\
    \        val temp6 = mutable.ListBuffer.empty[Long]\n        val temp7 = mutable.ListBuffer.empty[Long]\n\
    \        val temp8 = mutable.ListBuffer.empty[Long]\n        val temp9 = mutable.ListBuffer.empty[Long]\n\
    \        val temp10 = mutable.ListBuffer.empty[Long]\n        val temp11 = mutable.ListBuffer.empty[Long]\n\
    \        val temp12 = mutable.ListBuffer.empty[Long]\n        val temp13 = mutable.ListBuffer.empty[Long]\n\
    \        val temp14 = mutable.ListBuffer.empty[Long]\n        val temp15 = mutable.ListBuffer.empty[Long]\n\
    \        val temp16 = mutable.ListBuffer.empty[Long]\n        val temp17 = mutable.ListBuffer.empty[Long]\n\
    \        val temp18 = mutable.ListBuffer.empty[Long]\n        val temp19 = mutable.ListBuffer.empty[Long]\n\
    \        val temp20 = mutable.ListBuffer.empty[Long]\n        val temp21 = mutable.ListBuffer.empty[Long]\n\
    \        val temp22 = mutable.ListBuffer.empty[Long]\n        val temp23 = mutable.ListBuffer.empty[Long]\n\
    \        val temp24 = mutable.ListBuffer.empty[Long]\n        val temp25 = mutable.ListBuffer.empty[Long]\n\
    \        val temp26 = mutable.ListBuffer.empty[Long]\n        val temp27 = mutable.ListBuffer.empty[Long]\n\
    \        val temp28 = mutable.ListBuffer.empty[Long]\n        val temp29 = mutable.ListBuffer.empty[Long]\n\
    \        val temp30 = mutable.ListBuffer.empty[Long]\n        val temp31 = mutable.ListBuffer.empty[Long]\n\
    \        val temp32 = mutable.ListBuffer.empty[Long]\n        val temp33 = mutable.ListBuffer.empty[Long]\n\
    \        val temp34 = mutable.ListBuffer.empty[Long]\n        val temp35 = mutable.ListBuffer.",
  "        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val collatzSeq = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLen = mutable.ListBuffer[Long]()\n        val collatzSeqLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLen = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n     \
    \   val collatzSeqLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n       \
    \ val collatzSeqLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n      \
    \  val collatzSeqLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n  \
    \      val collatzSeqLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq", "        var odd_collatz : List[Long] = List()\n   \
    \     var odd_collatz_list : List[Long] = List()\n        var odd_collatz_list\
    \ : List[Long] = List()\n        var odd_collatz_list : List[Long] = List()\n\
    \        var odd_collatz_list : List[Long] = List()\n        var odd_collatz_list\
    \ : List[Long] = List()\n        var odd_collatz_list : List[Long] = List()\n\
    \        var odd_collatz_list : List[Long] = List()\n        var odd_collatz_list\
    \ : List[Long] = List()\n        var odd_collatz_list : List[Long] = List()\n\
    \        var odd_collatz_list : List[Long] = List()\n        var odd_collatz_list\
    \ : List[Long] = List()\n        var odd_collatz_list : List[Long] = List()\n\
    \        var odd_collatz_list : List[Long] = List()\n        var odd_collatz_list\
    \ : List[Long] = List()\n        var odd_collatz_list : List[Long] = List()\n\
    \        var odd_collatz_list : List[Long] = List()\n        var odd_collatz_list\
    \ : List[Long] = List()\n        var odd_collatz_list : List[Long] = List()\n\
    \        var odd_collatz_list : List[Long] = List()\n        var odd_collatz_list\
    \ : List[Long] = List()\n        var odd_collatz_list : List[Long] = List()\n\
    \        var odd_collatz_list : List[Long] = List()\n        var odd_collatz_list\
    \ : List[Long] = List()\n        var odd_collatz_list : List[Long] = List()\n\
    \        var odd_collatz_list : List[Long] = List()\n        var odd_collatz_list\
    \ : List[Long] = List()\n        var odd_collatz_list : List[Long] = List()\n\
    \        var odd_collatz_list : List[Long] = List()\n        var odd_collatz_list\
    \ : List[Long] = List()\n        var odd_collatz_list : List[Long] = List()\n\
    \        var odd_collatz_list : List[Long] = List()\n        var odd_collatz_list\
    \ : List[Long] = List()\n        var odd_collatz_list : List[Long] = List()\n\
    \        var odd_collatz_list : List[Long] = List()\n        var odd_collatz_list\
    \ : List[Long] = List()\n        var odd_collatz_list : List[Long] = List()\n\
    \        var odd_collatz_list : List[Long] = List()\n        var odd_collatz_list\
    \ : List[Long] = List()\n        var odd_collatz_list : List[Long] = List()\n\
    \        var odd_collatz_list : List[Long] = List()\n        var odd_collatz_list\
    \ : List[Long] = List()\n        var odd_collatz_list : List[", "        val odd\
    \ = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val list = mutable.ListBuffer.empty[Long]\n        var curr = n\n   \
    \     while (curr != 1) {\n            if (curr % 2 == 0) {\n                even.append(curr)\n\
    \            } else {\n                odd.append(curr)\n            }\n     \
    \       curr = even.last\n        }\n        odd.toList", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val result = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val collatzSeq = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLen = mutable.ListBuffer[Long]()\n        val collatzSeqLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLen = mutable.ListBuffer[Long]()\n        val\
    \ collatzSeqLenLenLenLenLen = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLen =\
    \ mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLen =\
    \ mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]", "        val list = new mutable.ListBuffer[Long]()\n\
    \        var prev = 0\n        var next = 1\n        while (n != 1) {\n      \
    \      val nextTerm = if (n % 2 == 0) (prev + 1) else (3 * prev + 1)\n       \
    \     prev = next\n            next = nextTerm\n            n -= 1\n         \
    \   list += next\n        }\n        list.sortWith(_ < _)\n        list.toList",
  "        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val list = mutable.ListBuffer[Long]()\n        val result = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val collatzSeq = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq2 = mutable.ListBuffer[Long]()\n        val collatzSeq3\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq4 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq5 = mutable.ListBuffer[Long]()\n        val collatzSeq6\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq7 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq8 = mutable.ListBuffer[Long]()\n        val collatzSeq9\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq10 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq11 = mutable.ListBuffer[Long]()\n        val collatzSeq12\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq13 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq14 = mutable.ListBuffer[Long]()\n        val collatzSeq15\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq16 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq17 = mutable.ListBuffer[Long]()\n        val collatzSeq18\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq19 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq20 = mutable.ListBuffer[Long]()\n        val collatzSeq21\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq22 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq23 = mutable.ListBuffer[Long]()\n        val collatzSeq24\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq25 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq26 = mutable.ListBuffer[Long]()\n        val collatzSeq27\
    \ = mutable.ListBuffer[Long]()\n        ", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val collatzList\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList2 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList3 = mutable.ListBuffer.empty[Long]\n        val collatzList4\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList5 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList6 = mutable.ListBuffer.empty[Long]\n        val collatzList7\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList8 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList9 = mutable.ListBuffer.empty[Long]\n        val collatzList10\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList11 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList12 = mutable.ListBuffer.empty[Long]\n        val collatzList13\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList14 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList15 = mutable.ListBuffer.empty[Long]\n        val collatzList16\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList17 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList18 = mutable.ListBuffer.empty[Long]\n        val collatzList19\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList20 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList21 = mutable.ListBuffer.empty[Long]\n        val collatzList22\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList23 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList24 = mutable.ListBuffer.empty[Long]\n        val collatzList25\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList26 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList27 = mutable.ListBuffer.empty[Long]\n        val collatzList28\
    \ = mutable.ListBuffer.empty[", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq = mutable.ListBuffer.empty[Long]\n        val collatzSeqLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLen = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n    \
    \    val collatzSeqLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n     \
    \   val collatzSeqLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n   \
    \     val collatzSeqLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        ", "        val odd = mutable.ListBuffer.empty[Long]\n        val even\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list = mutable.ListBuffer.empty[Long]\n\
    \        val even_list = mutable.ListBuffer.empty[Long]\n        val odd_list\
    \ = mutable.ListBuffer.empty[Long]\n        val even_list = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list = mutable.ListBuffer.empty[Long]\n        val even_list\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list = mutable.ListBuffer.empty[Long]\n\
    \        val even_list = mutable.ListBuffer.empty[Long]\n        val odd_list\
    \ = mutable.ListBuffer.empty[Long]\n        val even_list = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list = mutable.ListBuffer.empty[Long]\n        val even_list\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list = mutable.ListBuffer.empty[Long]\n\
    \        val even_list = mutable.ListBuffer.empty[Long]\n        val odd_list\
    \ = mutable.ListBuffer.empty[Long]\n        val even_list = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list = mutable.ListBuffer.empty[Long]\n        val even_list\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list = mutable.ListBuffer.empty[Long]\n\
    \        val even_list = mutable.ListBuffer.empty[Long]\n        val odd_list\
    \ = mutable.ListBuffer.empty[Long]\n        val even_list = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list = mutable.ListBuffer.empty[Long]\n        val even_list\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list = mutable.ListBuffer.empty[Long]\n\
    \        val even_list = mutable.ListBuffer.empty[Long]\n        val odd_list\
    \ = mutable.ListBuffer.empty[Long]\n        val even_list = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list = mutable.ListBuffer.empty[Long]\n        val even_list\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list = mutable.ListBuffer.empty[Long]\n\
    \        val even_list = mutable.ListBuffer.empty[Long]\n        val odd_list\
    \ = mutable.ListBuffer.empty[Long]\n        val even_list = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list = mutable.ListBuffer.empty[Long]\n        val even_list\
    \ = mutable.ListBuffer.empty[Long]\n", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        var current = 1\n        while (current < n) {\n            val next\
    \ = current + 1\n            if (next % 2 == 0) {\n                odd += next\n\
    \            }\n            current = next\n        }\n        odd.toList", " \
    \       val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val list = mutable.ListBuffer[Long]()\n        val temp = 0\n       \
    \ while(n > 1) {\n            temp = n % 2\n            if(temp == 0) {\n    \
    \            even += n\n            } else {\n                odd += n\n     \
    \       }\n            n /= 2\n        }\n        odd.toList ++ even.toList",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq = mutable.ListBuffer.empty[Long]\n        val collatzSeq2\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq3 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq4 = mutable.ListBuffer.empty[Long]\n        val collatzSeq5\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq6 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq7 = mutable.ListBuffer.empty[Long]\n        val collatzSeq8\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq9 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq10 = mutable.ListBuffer.empty[Long]\n        val collatzSeq11\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq12 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq13 = mutable.ListBuffer.empty[Long]\n        val collatzSeq14\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq15 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq16 = mutable.ListBuffer.empty[Long]\n        val collatzSeq17\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq18 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq19 = mutable.ListBuffer.empty[Long]\n        val collatzSeq20\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq21 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq22 = mutable.ListBuffer.empty[Long]\n        val collatzSeq23\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq24 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq25 = mutable.ListBuffer.empty[Long]\n        val collatzSeq26\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq27 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq28 = mutable.ListBuffer.empty", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val result = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val collatzSeq = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq2 = mutable.ListBuffer[Long]()\n        val collatzSeq3\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq4 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq5 = mutable.ListBuffer[Long]()\n        val collatzSeq6\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq7 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq8 = mutable.ListBuffer[Long]()\n        val collatzSeq9\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq10 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq11 = mutable.ListBuffer[Long]()\n        val collatzSeq12\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq13 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq14 = mutable.ListBuffer[Long]()\n        val collatzSeq15\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq16 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq17 = mutable.ListBuffer[Long]()\n        val collatzSeq18\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq19 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq20 = mutable.ListBuffer[Long]()\n        val collatzSeq21\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq22 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq23 = mutable.ListBuffer[Long]()\n        val collatzSeq24\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq25 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq26 = mutable.ListBuffer[Long]()\n        val collatzSeq27\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq28 = mutable.ListBuffer[",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val prev = 1\n        while (n > 1) {\n            if (n % 2 == 0) {\n\
    \                even += prev\n                n /= 2\n            } else {\n\
    \                odd += prev\n                n = 3 * prev + 1\n            }\n\
    \            prev += 1\n            collatz ++= n\n        }\n        odd.toList\
    \ ++ even.toList ++ collatz.toList", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val current = 1\n        while(current <= n) {\n            val next\
    \ = (current % 2 == 0) ? current / 2 : 3 * current + 1\n            odd.+= next\n\
    \            even += next\n            collatz.+= next\n            current +=\
    \ 1\n        }\n        odd.toList", "        var odd_list: List[Long] = Nil\n\
    \        var next_list: List[Long] = Nil\n        var next_odd_list: List[Long]\
    \ = Nil\n        var next_next_list: List[Long] = Nil\n        var next_next_odd_list:\
    \ List[Long] = Nil\n        var next_next_next_list: List[Long] = Nil\n      \
    \  var next_next_next_odd_list: List[Long] = Nil\n        var next_next_next_next_list:\
    \ List[Long] = Nil\n        var next_next_next_next_odd_list: List[Long] = Nil\n\
    \        var next_next_next_next_next_list: List[Long] = Nil\n        var next_next_next_next_next_odd_list:\
    \ List[Long] = Nil\n        var next_next_next_next_next_next_list: List[Long]\
    \ = Nil\n        var next_next_next_next_next_next_odd_list: List[Long] = Nil\n\
    \        var next_next_next_next_next_next_next_list: List[Long] = Nil\n     \
    \   var next_next_next_next_next_next_next_odd_list: List[Long] = Nil\n      \
    \  var next_next_next_next_next_next_next_next_list: List[Long] = Nil\n      \
    \  var next_next_next_next_next_next_next_next_odd_list: List[Long] = Nil\n  \
    \      var next_next_next_next_next_next_next_next_next_list: List[Long] = Nil\n\
    \        var next_next_next_next_next_next_next_next_next_odd_list: List[Long]\
    \ = Nil\n        var next_next_next_next_next_next_next_next_next_list: List[Long]\
    \ = Nil\n        var next_next_next_next_next_next_next_next_next_odd_list: List[Long]\
    \ = Nil\n        var next_next_next_next_next_next_next_next_next_list: List[Long]\
    \ = Nil\n        var next_next_next_next_next_next_next_next_next_odd_list: List[Long]\
    \ = Nil\n        var next_next_next_next_next_next_next_next_next_list: List[Long]\
    \ = Nil\n        var next_next_next_next_next_next_next_next_next_odd_list: List[Long]\
    \ = Nil\n        var next_next_next_next_next_next_next_next_next_next_list: List[Long]\
    \ = Nil\n        var next_next_next_next_next_next_next_next_next_odd_list: List[Long]\
    \ = Nil\n        var next_next_next_next_next_next_next_next_next_list: List[Long]\
    \ = Nil\n        var next_next_next_next_next_next_next_next_next_odd_list: List[Long]\
    \ = Nil\n        var next_next_next_next_next_next_next_next_next_list: List[Long]\
    \ = Nil\n        var next_next_next_next_next_next_next_next_next_odd_list: List[Long]\
    \ = Nil\n        var next_next_next_next_next_next_next_next_next_next_list: List[Long]\
    \ = Nil\n        var next_next_next_next_next_next_next_next_next_odd_list: List[Long",
  "        var odd_list : List[Long] = List()\n        var odd_num : Long = 1\n  \
    \      var odd_nums : List[Long] = List()\n        var odd_nums_list : List[Long]\
    \ = List()\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var odd_nums_list_size\
    \ : Long = 0\n        var odd_nums_list_size : Long = 0\n        var ", "    \
    \    val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val temp = mutable.ListBuffer[Long]()\n\
    \        val temp2 = mutable.ListBuffer[Long]()\n        val temp3 = mutable.ListBuffer[Long]()\n\
    \        val temp4 = mutable.ListBuffer[Long]()\n        val temp5 = mutable.ListBuffer[Long]()\n\
    \        val temp6 = mutable.ListBuffer[Long]()\n        val temp7 = mutable.ListBuffer[Long]()\n\
    \        val temp8 = mutable.ListBuffer[Long]()\n        val temp9 = mutable.ListBuffer[Long]()\n\
    \        val temp10 = mutable.ListBuffer[Long]()\n        val temp11 = mutable.ListBuffer[Long]()\n\
    \        val temp12 = mutable.ListBuffer[Long]()\n        val temp13 = mutable.ListBuffer[Long]()\n\
    \        val temp14 = mutable.ListBuffer[Long]()\n        val temp15 = mutable.ListBuffer[Long]()\n\
    \        val temp16 = mutable.ListBuffer[Long]()\n        val temp17 = mutable.ListBuffer[Long]()\n\
    \        val temp18 = mutable.ListBuffer[Long]()\n        val temp19 = mutable.ListBuffer[Long]()\n\
    \        val temp20 = mutable.ListBuffer[Long]()\n        val temp21 = mutable.ListBuffer[Long]()\n\
    \        val temp22 = mutable.ListBuffer[Long]()\n        val temp23 = mutable.ListBuffer[Long]()\n\
    \        val temp24 = mutable.ListBuffer[Long]()\n        val temp25 = mutable.ListBuffer[Long]()\n\
    \        val temp26 = mutable.ListBuffer[Long]()\n        val temp27 = mutable.ListBuffer[Long]()\n\
    \        val temp28 = mutable.ListBuffer[Long]()\n        val temp29 = mutable.ListBuffer[Long]()\n\
    \        val temp30 = mutable.ListBuffer[Long]()\n        val temp31 = mutable.ListBuffer[Long]()\n\
    \        val temp32 = mutable.ListBuffer[Long]()\n        val temp33 = mutable.ListBuffer[Long]()\n\
    \        val temp34 = mutable.ListBuffer[Long]()\n        val temp35 = mutable.ListBuffer",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val odd_collatz\
    \ = mutable.ListBuffer.empty[Long]\n        val evenCollatz = mutable.ListBuffer.empty[Long]\n\
    \        val evenCollatz2 = mutable.ListBuffer.empty[Long]\n        val evenCollatz3\
    \ = mutable.ListBuffer.empty[Long]\n        val evenCollatz4 = mutable.ListBuffer.empty[Long]\n\
    \        val evenCollatz5 = mutable.ListBuffer.empty[Long]\n        val evenCollatz6\
    \ = mutable.ListBuffer.empty[Long]\n        val evenCollatz7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenCollatz8 = mutable.ListBuffer.empty[Long]\n        val evenCollatz9\
    \ = mutable.ListBuffer.empty[Long]\n        val evenCollatz10 = mutable.ListBuffer.empty[Long]\n\
    \        val evenCollatz11 = mutable.ListBuffer.empty[Long]\n        val evenCollatz12\
    \ = mutable.ListBuffer.empty[Long]\n        val evenCollatz13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenCollatz14 = mutable.ListBuffer.empty[Long]\n        val evenCollatz15\
    \ = mutable.ListBuffer.empty[Long]\n        val evenCollatz16 = mutable.ListBuffer.empty[Long]\n\
    \        val evenCollatz17 = mutable.ListBuffer.empty[Long]\n        val evenCollatz18\
    \ = mutable.ListBuffer.empty[Long]\n        val evenCollatz19 = mutable.ListBuffer.empty[Long]\n\
    \        val evenCollatz20 = mutable.ListBuffer.empty[Long]\n        val evenCollatz21\
    \ = mutable.ListBuffer.empty[Long]\n        val evenCollatz22 = mutable.ListBuffer.empty[Long]\n\
    \        val evenCollatz23 = mutable.ListBuffer.empty[Long]\n        val evenCollatz24\
    \ = mutable.ListBuffer.empty[Long]\n        val evenCollatz25 = mutable.ListBuffer.empty[Long]\n\
    \        val evenCollatz26 = mutable.ListBuffer.empty[Long]\n        val evenCollatz27\
    \ = mutable.ListBuffer.empty[Long]\n        val evenCollatz28 = mutable.", " \
    \       val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val prev = 0\n\
    \        while (n != 1) {\n            if (n % 2 == 0) {\n                even\
    \ += n\n            } else {\n                odd += n\n            }\n      \
    \      n /= 2\n        }\n        odd.toList ++ even.toList", "        val odd\
    \ = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq = mutable.ListBuffer.empty[Long]\n        val collatzSeqLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLen = mutable.ListBuffer.empty[Long]\n        val\
    \ collatzSeqLenLenLenLen = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLen =\
    \ mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer.empty[Long", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq = mutable.ListBuffer[Long]()\n        val collatzSeq2\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq3 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq4 = mutable.ListBuffer[Long]()\n        val collatzSeq5\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq6 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq7 = mutable.ListBuffer[Long]()\n        val collatzSeq8\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq9 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq10 = mutable.ListBuffer[Long]()\n        val collatzSeq11\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq12 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq13 = mutable.ListBuffer[Long]()\n        val collatzSeq14\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq15 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq16 = mutable.ListBuffer[Long]()\n        val collatzSeq17\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq18 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq19 = mutable.ListBuffer[Long]()\n        val collatzSeq20\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq21 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq22 = mutable.ListBuffer[Long]()\n        val collatzSeq23\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq24 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq25 = mutable.ListBuffer[Long]()\n        val collatzSeq26\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq27 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq28 = mutable.ListBuffer[Long]()\n        val collatzSeq29\
    \ = ", "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val prev = (n-1).toLong\n        val next = (prev+1).toLong\n       \
    \ while(prev != 1) {\n            if(prev % 2 == 0) {\n                even +=\
    \ prev\n            } else {\n                odd += prev\n            }\n   \
    \         prev = (prev+1).toLong\n            next = (prev+1).toLong\n       \
    \ }\n        odd += prev\n        collatz += even.toList\n        collatz += odd.toList\n\
    \        collatz.sortWith(_ < _)\n        collatz", "        var odds : List[Long]\
    \ = List()\n        var prev : Long = 1\n        var i : Long = 1\n        while(i\
    \ < n) {\n            if((prev % 2) == 0) {\n                odds = odds :+ prev\n\
    \                prev = prev / 2\n            }\n            else {\n        \
    \        prev = prev * 3 + 1 \n            }\n            i = i + 1\n        }\n\
    \        odds = odds :+ prev\n        odds = odds.sortWith(_ < _)\n        return\
    \ odds", "        val odd = mutable.ListBuffer.empty[Long]\n        val even =\
    \ mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 1\n        val next = 1\n       \
    \ val prevEven = 1\n        val nextEven = 1\n        val prevOdd = 1\n      \
    \  val nextOdd = 1\n        while(n > 1) {\n            n match {\n          \
    \      case 1 => collatz ++= List(prev)\n                case 2 => even ++= List(prevEven)\n\
    \                case 3 => odd ++= List(prevOdd)\n                case 4 => even\
    \ ++= List(nextEven)\n                case 5 => odd ++= List(nextOdd)\n      \
    \          case 6 => even ++= List(nextEven)\n                case 7 => odd ++=\
    \ List(nextOdd)\n                case 8 => even ++= List(nextEven)\n         \
    \       case 9 => odd ++= List(nextOdd)\n                case 10 => even ++= List(nextEven)\n\
    \                case 11 => odd ++= List(nextOdd)\n                case 12 =>\
    \ even ++= List(nextEven)\n                case 13 => odd ++= List(nextOdd)\n\
    \                case 14 => even ++= List(nextEven)\n                case 15 =>\
    \ odd ++= List(nextOdd)\n                case 16 => even ++= List(nextEven)\n\
    \                case 17 => odd ++= List(nextOdd)\n                case 18 =>\
    \ even ++= List(nextEven)\n                case 19 => odd ++= List(nextOdd)\n\
    \                case 20 => even ++= List(nextEven)\n                case 21 =>\
    \ odd ++= List(nextOdd)\n                case 22 => even ++= List(nextEven)\n\
    \                case 23 => odd ++= List(nextOdd)\n                case 24 =>\
    \ even ++= List(nextEven)\n                case 25 => odd ++= List(nextOdd)\n\
    \                case 26 => even ++= List(nextEven)\n                case 27 =>\
    \ odd ++= List(nextOdd)\n                case 28 => even ++= List(nextEven)\n\
    \                case 29 => odd ++= List(nextOdd)\n                case 30 =>\
    \ even ++= List(nextEven)\n                case 31 => odd ++= List(nextOdd)\n\
    \                case 32 => even ++= List(nextEven)\n                case 33 =>\
    \ odd ++= List(nextOdd)\n                case 34 => even ++= List(nextEven)\n\
    \                case 35 => odd ++= List(nextOdd)\n                case 36 =>\
    \ even ++= List(nextEven)\n                case 37 ", "        val list = new\
    \ mutable.ListBuffer[Long]()\n        var prev = 1\n        var next = 1\n   \
    \     while(n != 1) {\n            next = if (n % 2 == 0) prev / 2 else prev *\
    \ 3 + 1 \n            prev = next\n            list += prev\n            n = next\n\
    \        }\n        list.sortWith(_ < _)\n        list.toList", "        var odds\
    \ : List[Long] = Nil\n        var i : Long = 1\n        var prev : Long = 1\n\
    \        while (i <= n) {\n            if (i % 2 == 0) {\n                odds\
    \ = odds :+ i\n            } else {\n                prev = i\n              \
    \  i = prev + (prev % 2 == 0 ? 1 : 3)\n            }\n        }\n        odds.sortWith(_\
    \ < _)", "        val odd_list = mutable.ListBuffer.empty[Long]\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 0) {\n \
    \               odd_list += current\n                current /= 2\n          \
    \  } else {\n                current *= 3 + 1\n            }\n        }\n    \
    \    odd_list += current\n        odd_list.sortWith(_ < _)", "        val odd\
    \ = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val list = mutable.ListBuffer.empty[Long]\n        val collatz : List[Long]\
    \ = List(n).map(n => collatz(n))\n        val collatzLength = collatz.length\n\
    \        val collatzLength = collatzLength - 1\n        collatz.foreach { n =>\n\
    \            if (n % 2 == 0) {\n                even += n\n            } else\
    \ {\n                odd += n\n            }\n        }\n        odd.foreach {\
    \ n =>\n            if (n % 2 == 0) {\n                even += n\n           \
    \ } else {\n                odd += n\n            }\n        }\n        odd.foreach\
    \ { n =>\n            if (n % 2 == 0) {\n                even += n\n         \
    \   } else {\n                odd += n\n            }\n        }\n        odd.foreach\
    \ { n =>\n            if (n % 2 == 0) {\n                even += n\n         \
    \   } else {\n                odd += n\n            }\n        }\n        odd.foreach\
    \ { n =>\n            if (n % 2 == 0) {\n                even += n\n         \
    \   } else {\n                odd += n\n            }\n        }\n        odd.foreach\
    \ { n =>\n            if (n % 2 == 0) {\n                even += n\n         \
    \   } else {\n                odd += n\n            }\n        }\n        odd.foreach\
    \ { n =>\n            if (n % 2 == 0) {\n                even += n\n         \
    \   } else {\n                odd += n\n            }\n        }\n        odd.foreach\
    \ { n =>\n            if (n % 2 == 0) {\n                even += n\n         \
    \   } else {\n                odd += n\n            }\n        }\n        odd.foreach\
    \ { n =>\n            if (n % 2 == 0) {\n                even += n\n         \
    \   } else {\n                odd += n\n            }\n        }\n        odd.foreach\
    \ { n =>\n            if (n % 2 == 0) {\n                even += n\n         \
    \   } else {\n                odd += n\n            }\n        }\n        odd.foreach\
    \ { n =>\n            if (n % 2 == 0) {\n                even += n\n         \
    \   } else {\n                odd += n\n            }\n        }\n        odd.foreach\
    \ { n =>\n            if (n % 2 == 0) {\n                even += n\n         \
    \   } else {\n                odd += n\n            }\n        }\n        odd.foreach\
    \ { n =>\n            if (n % 2 == 0) {\n                even += n\n         \
    \   } else {\n                odd += n\n            }\n        }\n        odd.foreach\
    \ { n =>\n            if (n % 2 == 0) {\n                even += n\n         \
    \   } else {\n                odd += n\n            }\n        }\n        odd.foreach\
    \ { n =>\n            if (", "        val odd = mutable.ListBuffer[Long]()\n \
    \       var current = 1\n        while (current <= n) {\n            val next\
    \ = current + 1\n            if (next % 2 == 0) {\n                odd += next\n\
    \            } else {\n                odd += next * 3 + 1\n            }\n  \
    \          current = next\n        }\n        odd.toList", "        val odd =\
    \ mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val prev = 1\n        val next = (prev * 2).toInt\n        val prevNext\
    \ = (prev * 3) + 1\n        val prevNextNext = (prev * 4) + 1\n        val prevNextNextNext\
    \ = (prev * 5) + 1\n        val prevNextNextNextNext = (prev * 6) + 1\n      \
    \  val prevNextNextNextNextNext = (prev * 7) + 1\n        val prevNextNextNextNextNextNext\
    \ = (prev * 8) + 1\n        val prevNextNextNextNextNextNext = (prev * 9) + 1\n\
    \        val prevNextNextNextNextNextNextNext = (prev * 10) + 1\n        val prevNextNextNextNextNextNextNext\
    \ = (prev * 11) + 1\n        val prevNextNextNextNextNextNextNextNext = (prev\
    \ * 12) + 1\n        val prevNextNextNextNextNextNextNextNextNext = (prev * 13)\
    \ + 1\n        val prevNextNextNextNextNextNextNextNextNext = (prev * 14) + 1\n\
    \        val prevNextNextNextNextNextNextNextNextNext = (prev * 15) + 1\n    \
    \    val prevNextNextNextNextNextNextNextNextNextNext = (prev * 16) + 1\n    \
    \    val prevNextNextNextNextNextNextNextNextNextNext = (prev * 17) + 1\n    \
    \    val prevNextNextNextNextNextNextNextNextNextNext = (prev * 18) + 1\n    \
    \    val prevNextNextNextNextNextNextNextNextNextNextNext = (prev * 19) + 1\n\
    \        val prevNextNextNextNextNextNextNextNextNextNextNext = (prev * 20) +\
    \ 1\n        val prevNextNextNextNextNextNextNextNextNextNextNext = (prev * 21)\
    \ + 1\n        val prevNextNextNextNextNextNextNextNextNextNextNext = (prev *\
    \ 22) + 1\n        val prevNextNextNextNextNextNextNextNextNextNextNext = (prev\
    \ * 23) + 1\n        val prevNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = (prev * 24) + 1\n        val prevNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = (prev * 25) + 1\n        val prevNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = (prev * 26) + 1\n        val prevNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = (prev * 27) + 1\n        val prevNextNextNextNextNextNextNextNextNextNextNextNext",
  "        val list = new mutable.ListBuffer[Long]()\n        var prev = 0\n     \
    \   var next = 1\n        while(n != 1) {\n            val temp = next\n     \
    \       next = if (prev % 2 == 0) (prev + 1) else (prev * 3 + 1)\n           \
    \ prev = temp\n            list += next\n            n -= 1\n        }\n     \
    \   list.sortWith(_ < _)\n        list.toList", "        val odd = mutable.ListBuffer[Long]()\n\
    \        var next = 1\n        while (n != 1) {\n            if (n % 2 == 0) {\n\
    \                odd.add(n)\n                next = next / 2\n            } else\
    \ {\n                next = next * 3 + 1 \n            }\n            n = next\n\
    \        }\n        odd.toList", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val prev = 1\n        val next = 1\n        val prevEven = 1\n      \
    \  val nextEven = 1\n        val prevOdd = 1\n        val nextOdd = 1\n      \
    \  while(n > 1) {\n            prevEven = prev\n            prevOdd = prev\n \
    \           nextEven = next\n            nextOdd = next\n            while(prevEven\
    \ > 1) {\n                prevEven = prevEven / 2\n                nextEven =\
    \ nextEven / 2\n            }\n            while(prevOdd > 1) {\n            \
    \    prevOdd = prevOdd * 3 + 1\n                nextOdd = nextOdd * 3 + 1\n  \
    \          }\n            while(nextEven > 1) {\n                nextEven = nextEven\
    \ / 2\n                prevEven = prevEven * 3 + 1\n            }\n          \
    \  while(nextOdd > 1) {\n                nextOdd = nextOdd * 3 + 1\n         \
    \       prevOdd = prevOdd * 3 + 1\n            }\n            collatz ++= List(prevEven,\
    \ prevOdd, nextEven, nextOdd)\n            n -= 1\n        }\n        collatz.foreach(x\
    \ => odd += x)\n        odd.foreach(x => result += x)\n        result.toList",
  "        val list = new mutable.ListBuffer[Long]()\n        val prev = new mutable.ListBuffer[Long]()\n\
    \        val next = new mutable.ListBuffer[Long]()\n        val count = new mutable.ListBuffer[Long]()\n\
    \        val odd = new mutable.ListBuffer[Long]()\n        val even = new mutable.ListBuffer[Long]()\n\
    \        val evenNext = new mutable.ListBuffer[Long]()\n        val oddNext =\
    \ new mutable.ListBuffer[Long]()\n        val evenPrev = new mutable.ListBuffer[Long]()\n\
    \        val oddPrev = new mutable.ListBuffer[Long]()\n        val evenCount =\
    \ new mutable.ListBuffer[Long]()\n        val oddCount = new mutable.ListBuffer[Long]()\n\
    \        val evenPrevCount = new mutable.ListBuffer[Long]()\n        val oddPrevCount\
    \ = new mutable.ListBuffer[Long]()\n        val evenNextCount = new mutable.ListBuffer[Long]()\n\
    \        val oddNextCount = new mutable.ListBuffer[Long]()\n        val evenPrevCount\
    \ = new mutable.ListBuffer[Long]()\n        val oddPrevCount = new mutable.ListBuffer[Long]()\n\
    \        val evenNextCount = new mutable.ListBuffer[Long]()\n        val oddNextCount\
    \ = new mutable.ListBuffer[Long]()\n        val evenPrevCount = new mutable.ListBuffer[Long]()\n\
    \        val oddPrevCount = new mutable.ListBuffer[Long]()\n        val evenNextCount\
    \ = new mutable.ListBuffer[Long]()\n        val oddNextCount = new mutable.ListBuffer[Long]()\n\
    \        val evenPrevCount = new mutable.ListBuffer[Long]()\n        val oddPrevCount\
    \ = new mutable.ListBuffer[Long]()\n        val evenNextCount = new mutable.ListBuffer[Long]()\n\
    \        val oddNextCount = new mutable.ListBuffer[Long]()\n        val evenPrevCount\
    \ = new mutable.ListBuffer[Long]()\n        val oddPrevCount = new mutable.ListBuffer[Long]()\n\
    \        val evenNextCount = new mutable.ListBuffer[Long]()\n        val oddNextCount\
    \ = new mutable.ListBuffer[Long]()\n        val evenPrevCount = new mutable.ListBuffer[Long]()\n\
    \        val oddPrevCount = new mutable.ListBuffer[Long]()\n        val evenNextCount\
    \ = new mutable.ListBuffer[Long]()\n        val oddNext", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val temp = mutable.ListBuffer.empty[Long]\n        val temp2 = mutable.ListBuffer.empty[Long]\n\
    \        val temp3 = mutable.ListBuffer.empty[Long]\n        val temp4 = mutable.ListBuffer.empty[Long]\n\
    \        val temp5 = mutable.ListBuffer.empty[Long]\n        val temp6 = mutable.ListBuffer.empty[Long]\n\
    \        val temp7 = mutable.ListBuffer.empty[Long]\n        val temp8 = mutable.ListBuffer.empty[Long]\n\
    \        val temp9 = mutable.ListBuffer.empty[Long]\n        val temp10 = mutable.ListBuffer.empty[Long]\n\
    \        val temp11 = mutable.ListBuffer.empty[Long]\n        val temp12 = mutable.ListBuffer.empty[Long]\n\
    \        val temp13 = mutable.ListBuffer.empty[Long]\n        val temp14 = mutable.ListBuffer.empty[Long]\n\
    \        val temp15 = mutable.ListBuffer.empty[Long]\n        val temp16 = mutable.ListBuffer.empty[Long]\n\
    \        val temp17 = mutable.ListBuffer.empty[Long]\n        val temp18 = mutable.ListBuffer.empty[Long]\n\
    \        val temp19 = mutable.ListBuffer.empty[Long]\n        val temp20 = mutable.ListBuffer.empty[Long]\n\
    \        val temp21 = mutable.ListBuffer.empty[Long]\n        val temp22 = mutable.ListBuffer.empty[Long]\n\
    \        val temp23 = mutable.ListBuffer.empty[Long]\n        val temp24 = mutable.ListBuffer.empty[Long]\n\
    \        val temp25 = mutable.ListBuffer.empty[Long]\n        val temp26 = mutable.ListBuffer.empty[Long]\n\
    \        val temp27 = mutable.ListBuffer.empty[Long]\n        val temp28 = mutable.ListBuffer.empty[Long]\n\
    \        val temp29 = mutable.ListBuffer.empty[Long]\n        val temp30 = mutable.ListBuffer.empty[Long]\n\
    \        val temp31 = mutable.ListBuffer.empty[Long]\n        val temp32 = mutable.ListBuffer.empty[Long]\n\
    \        val temp33 = mutable.ListBuffer.empty[Long]\n        val temp34 = mutable.ListBuffer.empty[Long]\n\
    \        val temp35 = mutable.ListBuffer.", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        var current = 1\n        while (n != 1) {\n            if (n % 2 == 0)\
    \ {\n                odd += current\n                current *= 2\n          \
    \  } else {\n                current *= 3 + 1\n            }\n            n /=\
    \ 2\n        }\n        odd.toList", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        var current = 0\n        var next = 1\n        while(current < n) {\n\
    \            next = current + next\n            if(next % 2 == 0) {\n        \
    \        even.append(next)\n            } else {\n                odd.append(next)\n\
    \            }\n            current = next\n        }\n        list.+=(odd.toList)\n\
    \        list.+=(even.toList)\n        list.sortWith((x, y) => x < y)\n      \
    \  list.toList", "        var odds : List[Long] = List(1)\n        var currentOdd\
    \ : Long = 1\n        var currentOddIndex : Long = 1\n        var currentOddIndex2\
    \ : Long = 1\n        var currentOddIndex3 : Long = 1\n        var currentOddIndex4\
    \ : Long = 1\n        var currentOddIndex5 : Long = 1\n        var currentOddIndex6\
    \ : Long = 1\n        var currentOddIndex7 : Long = 1\n        var currentOddIndex8\
    \ : Long = 1\n        var currentOddIndex9 : Long = 1\n        var currentOddIndex10\
    \ : Long = 1\n        var currentOddIndex11 : Long = 1\n        var currentOddIndex12\
    \ : Long = 1\n        var currentOddIndex13 : Long = 1\n        var currentOddIndex14\
    \ : Long = 1\n        var currentOddIndex15 : Long = 1\n        var currentOddIndex16\
    \ : Long = 1\n        var currentOddIndex17 : Long = 1\n        var currentOddIndex18\
    \ : Long = 1\n        var currentOddIndex19 : Long = 1\n        var currentOddIndex20\
    \ : Long = 1\n        var currentOddIndex21 : Long = 1\n        var currentOddIndex22\
    \ : Long = 1\n        var currentOddIndex23 : Long = 1\n        var currentOddIndex24\
    \ : Long = 1\n        var currentOddIndex25 : Long = 1\n        var currentOddIndex26\
    \ : Long = 1\n        var currentOddIndex27 : Long = 1\n        var currentOddIndex28\
    \ : Long = 1\n        var currentOddIndex29 : Long = 1\n        var currentOddIndex30\
    \ : Long = 1\n        var currentOddIndex31 : Long = 1\n        var currentOddIndex32\
    \ : Long = 1\n        var currentOddIndex33 : Long = 1\n        var currentOddIndex34\
    \ : Long = 1\n        var currentOddIndex35 : Long = 1\n        var currentOddIndex36\
    \ : Long = 1\n        var currentOddIndex37 : Long = 1\n        var currentOddIndex38\
    \ : Long = 1\n        var currentOddIndex39 : Long = 1\n        var currentOddIndex40\
    \ : Long = 1\n        var currentOddIndex41 : Long = 1\n        var currentOddIndex42\
    \ : Long = 1\n        var currentOddIndex43 : Long = 1\n        var currentOddIndex44\
    \ : Long = 1\n        var currentOddIndex45 : Long = 1\n        var currentOddIndex46\
    \ : Long = 1\n        var currentOddIndex47 : Long = 1\n        var currentOddIndex48\
    \ : Long = 1\n        var currentOddIndex49 : Long = 1\n        var currentOddIndex50\
    \ : ", "        var odd_nums = List[Long]()\n        var odd_nums_set = scala.collection.mutable.Set[Long]()\n\
    \        var odd_nums_set = scala.collection.mutable.Set[Long]()\n        var\
    \ odd_nums_set = scala.collection.mutable.Set[Long]()\n        var odd_nums_set\
    \ = scala.collection.mutable.Set[Long]()\n        var odd_nums_set = scala.collection.mutable.Set[Long]()\n\
    \        var odd_nums_set = scala.collection.mutable.Set[Long]()\n        var\
    \ odd_nums_set = scala.collection.mutable.Set[Long]()\n        var odd_nums_set\
    \ = scala.collection.mutable.Set[Long]()\n        var odd_nums_set = scala.collection.mutable.Set[Long]()\n\
    \        var odd_nums_set = scala.collection.mutable.Set[Long]()\n        var\
    \ odd_nums_set = scala.collection.mutable.Set[Long]()\n        var odd_nums_set\
    \ = scala.collection.mutable.Set[Long]()\n        var odd_nums_set = scala.collection.mutable.Set[Long]()\n\
    \        var odd_nums_set = scala.collection.mutable.Set[Long]()\n        var\
    \ odd_nums_set = scala.collection.mutable.Set[Long]()\n        var odd_nums_set\
    \ = scala.collection.mutable.Set[Long]()\n        var odd_nums_set = scala.collection.mutable.Set[Long]()\n\
    \        var odd_nums_set = scala.collection.mutable.Set[Long]()\n        var\
    \ odd_nums_set = scala.collection.mutable.Set[Long]()\n        var odd_nums_set\
    \ = scala.collection.mutable.Set[Long]()\n        var odd_nums_set = scala.collection.mutable.Set[Long]()\n\
    \        var odd_nums_set = scala.collection.mutable.Set[Long]()\n        var\
    \ odd_nums_set = scala.collection.mutable.Set[Long]()\n        var odd_nums_set\
    \ = scala.collection.mutable.Set[Long]()\n        var odd_nums_set = scala.collection.mutable.Set[Long]()\n\
    \        var odd_nums_set = scala.collection.mutable.Set[Long]()\n        var\
    \ odd_nums_set = scala.collection.mutable.Set[Long]()\n        var odd_nums_set\
    \ = scala.collection.mutable.Set[Long]()\n        var odd_nums_set = scala.collection.mutable.Set[Long]()\n\
    \        var odd_nums_set = scala.collection.", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 1\n        val next = (prev rem 2)\
    \ == 0L ? prev : prev * 3 + 1\n        while(n != 1L) {\n            n match {\n\
    \                case 0 => collatz ++= even\n                case 1 => odd ++=\
    \ next\n                case _ => collatz ++= even\n            }\n          \
    \  prev match {\n                case 0 => next match {\n                    case\
    \ 0 => collatz ++= even\n                    case 1 => odd ++= next\n        \
    \            case _ => collatz ++= even\n                }\n                case\
    \ 1 => next match {\n                    case 0 => collatz ++= even\n        \
    \            case 1 => odd ++= next\n                    case _ => collatz ++=\
    \ even\n                }\n                case _ => next match {\n          \
    \          case 0 => collatz ++= even\n                    case 1 => odd ++= next\n\
    \                    case _ => collatz ++= even\n                }\n         \
    \   }\n        }\n        collatz.sort", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq = mutable.ListBuffer.empty[Long]\n        val collatzSeq2\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq3 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq4 = mutable.ListBuffer.empty[Long]\n        val collatzSeq5\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq6 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq7 = mutable.ListBuffer.empty[Long]\n        val collatzSeq8\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq9 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq10 = mutable.ListBuffer.empty[Long]\n        val collatzSeq11\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq12 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq13 = mutable.ListBuffer.empty[Long]\n        val collatzSeq14\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq15 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq16 = mutable.ListBuffer.empty[Long]\n        val collatzSeq17\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq18 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq19 = mutable.ListBuffer.empty[Long]\n        val collatzSeq20\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq21 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq22 = mutable.ListBuffer.empty[Long]\n        val collatzSeq23\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq24 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq25 = mutable.ListBuffer.empty[Long]\n        val collatzSeq26\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq27 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq28 = mutable.ListBuffer.empty[Long]\n        val collatzSeq29\
    \ = mutable.", "        val list = new mutable.ListBuffer[Long]()\n        var\
    \ prev = 0\n        var next = 1\n        while (n != 1) {\n            val temp\
    \ = prev\n            prev = next\n            next = temp % 2 == 0 ? temp : temp\
    \ + 1\n            list += next\n            n = next\n        }\n        list.sortWith(_\
    \ < _)\n        list.toList", "        val list = new mutable.ListBuffer[Long]()\n\
    \        val prev = new mutable.ListBuffer[Long]()\n        val next = new mutable.ListBuffer[Long]()\n\
    \        val temp = new mutable.ListBuffer[Long]()\n        val temp2 = new mutable.ListBuffer[Long]()\n\
    \        val temp3 = new mutable.ListBuffer[Long]()\n        val temp4 = new mutable.ListBuffer[Long]()\n\
    \        val temp5 = new mutable.ListBuffer[Long]()\n        val temp6 = new mutable.ListBuffer[Long]()\n\
    \        val temp7 = new mutable.ListBuffer[Long]()\n        val temp8 = new mutable.ListBuffer[Long]()\n\
    \        val temp9 = new mutable.ListBuffer[Long]()\n        val temp10 = new\
    \ mutable.ListBuffer[Long]()\n        val temp11 = new mutable.ListBuffer[Long]()\n\
    \        val temp12 = new mutable.ListBuffer[Long]()\n        val temp13 = new\
    \ mutable.ListBuffer[Long]()\n        val temp14 = new mutable.ListBuffer[Long]()\n\
    \        val temp15 = new mutable.ListBuffer[Long]()\n        val temp16 = new\
    \ mutable.ListBuffer[Long]()\n        val temp17 = new mutable.ListBuffer[Long]()\n\
    \        val temp18 = new mutable.ListBuffer[Long]()\n        val temp19 = new\
    \ mutable.ListBuffer[Long]()\n        val temp20 = new mutable.ListBuffer[Long]()\n\
    \        val temp21 = new mutable.ListBuffer[Long]()\n        val temp22 = new\
    \ mutable.ListBuffer[Long]()\n        val temp23 = new mutable.ListBuffer[Long]()\n\
    \        val temp24 = new mutable.ListBuffer[Long]()\n        val temp25 = new\
    \ mutable.ListBuffer[Long]()\n        val temp26 = new mutable.ListBuffer[Long]()\n\
    \        val temp27 = new mutable.ListBuffer[Long]()\n        val temp28 = new\
    \ mutable.ListBuffer[Long]()\n        val temp29 = new mutable.ListBuffer[Long]()\n\
    \        val temp30 = new mutable.ListBuffer[Long]()\n        val temp31 = new\
    \ mutable.ListBuffer[Long]()\n        val temp32 = new mutable.ListBuffer[Long]()\n\
    \        val temp33 = new mutable.ListBuffer[Long]()\n        val temp34 = new\
    \ mutable.ListBuffer[", "        val odd = mutable.ListBuffer[Long]()\n      \
    \  val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        val n = n.toInt\n        val prev = 1\n        while(n > 1) {\n     \
    \       val next = if (n % 2 == 0) prev + 1 else prev * 3 + 1\n            n -=\
    \ 1\n            if (next % 2 == 0) even += next\n            else odd += next\n\
    \            collatz += next\n            prev = next\n        }\n        odd.toList\
    \ ++ even.toList ++ collatz.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val collatz = new mutable.ListBuffer[Long]()\n        var current = 0\n\
    \        var next = 1\n        while (n != 1) {\n            while (next % 2 ==\
    \ 0) {\n                next /= 2\n                collatz += 1\n            }\n\
    \            while (next % 2 == 1) {\n                next *= 3 + 1\n        \
    \        collatz += 1\n            }\n            result += collatz\n        \
    \    n -= 1\n            collatz.clear()\n            next = 1\n        }\n  \
    \      result += collatz\n        result.sortWith((x, y) => x < y)\n        return\
    \ result.toList", "        val odd = mutable.ListBuffer[Long]()\n        val even\
    \ = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        var current = 0\n        while (current < n) {\n            val next\
    \ = (current + 1) / 2\n            if (next % 2 == 0) {\n                even\
    \ += next\n            } else {\n                odd += next\n            }\n\
    \            collatz += next\n            current = next\n        }\n        odd.toList\
    \ ++ even.toList ++ collatz.toList", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val prev = 0\n        val curr = 1\n        val next = 1\n        while\
    \ (curr < n) {\n            if (prev % 2 == 0) {\n                even += curr\n\
    \            } else {\n                odd += curr\n            }\n          \
    \  prev = curr\n            curr = next\n            next = (prev + prev) / 2\n\
    \        }\n        list.+=(even.toList)\n        list.+=(odd.toList)\n      \
    \  list.sortWith(_ < _)\n        list", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        var current = 0\n        while (current < n) {\n            current match\
    \ {\n                case 1 => collatz ++= List(current)\n                case\
    \ _ => {\n                    val next = current / 2\n                    if (next\
    \ % 2 == 0) {\n                        even ++= List(next)\n                 \
    \   } else {\n                        odd ++= List(next)\n                   \
    \ }\n                }\n            }\n            current += 1\n        }\n \
    \       collatz.sortWith((x, y) => x < y)\n        odd.toList ++ even.toList",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq = mutable.ListBuffer.empty[Long]\n        val collatzSeq2\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq3 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq4 = mutable.ListBuffer.empty[Long]\n        val collatzSeq5\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq6 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq7 = mutable.ListBuffer.empty[Long]\n        val collatzSeq8\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq9 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq10 = mutable.ListBuffer.empty[Long]\n        val collatzSeq11\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq12 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq13 = mutable.ListBuffer.empty[Long]\n        val collatzSeq14\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq15 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq16 = mutable.ListBuffer.empty[Long]\n        val collatzSeq17\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq18 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq19 = mutable.ListBuffer.empty[Long]\n        val collatzSeq20\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq21 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq22 = mutable.ListBuffer.empty[Long]\n        val collatzSeq23\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq24 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq25 = mutable.ListBuffer.empty[Long]\n        val collatzSeq26\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq27 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq28 = mutable.ListBuffer.empty", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val temp = 0\n\
    \        val temp2 = 0\n        val temp3 = 0\n        val temp4 = 0\n       \
    \ val temp5 = 0\n        val temp6 = 0\n        val temp7 = 0\n        val temp8\
    \ = 0\n        val temp9 = 0\n        val temp10 = 0\n        val temp11 = 0\n\
    \        val temp12 = 0\n        val temp13 = 0\n        val temp14 = 0\n    \
    \    val temp15 = 0\n        val temp16 = 0\n        val temp17 = 0\n        val\
    \ temp18 = 0\n        val temp19 = 0\n        val temp20 = 0\n        val temp21\
    \ = 0\n        val temp22 = 0\n        val temp23 = 0\n        val temp24 = 0\n\
    \        val temp25 = 0\n        val temp26 = 0\n        val temp27 = 0\n    \
    \    val temp28 = 0\n        val temp29 = 0\n        val temp30 = 0\n        val\
    \ temp31 = 0\n        val temp32 = 0\n        val temp33 = 0\n        val temp34\
    \ = 0\n        val temp35 = 0\n        val temp36 = 0\n        val temp37 = 0\n\
    \        val temp38 = 0\n        val temp39 = 0\n        val temp40 = 0\n    \
    \    val temp41 = 0\n        val temp42 = 0\n        val temp43 = 0\n        val\
    \ temp44 = 0\n        val temp45 = 0\n        val temp46 = 0\n        val temp47\
    \ = 0\n        val temp48 = 0\n        val temp49 = 0\n        val temp50 = 0\n\
    \        val temp51 = 0\n        val temp52 = 0\n        val temp53 = 0\n    \
    \    val temp54 = 0\n        val temp55 = 0\n        val temp56 = 0\n        val\
    \ temp57 = 0\n        val temp58 = 0\n        val temp59 = 0\n        val temp60\
    \ = 0\n        val temp61 = 0\n        val temp62 = 0\n        val temp63 = 0\n\
    \        val temp64 = 0\n        val temp65 = 0\n        val temp66 = 0\n    \
    \    val temp67 = 0\n        val temp68 = 0\n        val temp69 = 0\n        val\
    \ temp70 = 0\n        val temp71 = 0\n        val temp72 = 0\n        val temp73\
    \ = 0\n        val temp74 = 0\n        val temp75 = 0\n        val temp76 = 0\n\
    \        val temp77 = 0", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val temp1 = mutable.ListBuffer.empty[Long]\n        val temp2 = mutable.ListBuffer.empty[Long]\n\
    \        val temp3 = mutable.ListBuffer.empty[Long]\n        val temp4 = mutable.ListBuffer.empty[Long]\n\
    \        val temp5 = mutable.ListBuffer.empty[Long]\n        val temp6 = mutable.ListBuffer.empty[Long]\n\
    \        val temp7 = mutable.ListBuffer.empty[Long]\n        val temp8 = mutable.ListBuffer.empty[Long]\n\
    \        val temp9 = mutable.ListBuffer.empty[Long]\n        val temp10 = mutable.ListBuffer.empty[Long]\n\
    \        val temp11 = mutable.ListBuffer.empty[Long]\n        val temp12 = mutable.ListBuffer.empty[Long]\n\
    \        val temp13 = mutable.ListBuffer.empty[Long]\n        val temp14 = mutable.ListBuffer.empty[Long]\n\
    \        val temp15 = mutable.ListBuffer.empty[Long]\n        val temp16 = mutable.ListBuffer.empty[Long]\n\
    \        val temp17 = mutable.ListBuffer.empty[Long]\n        val temp18 = mutable.ListBuffer.empty[Long]\n\
    \        val temp19 = mutable.ListBuffer.empty[Long]\n        val temp20 = mutable.ListBuffer.empty[Long]\n\
    \        val temp21 = mutable.ListBuffer.empty[Long]\n        val temp22 = mutable.ListBuffer.empty[Long]\n\
    \        val temp23 = mutable.ListBuffer.empty[Long]\n        val temp24 = mutable.ListBuffer.empty[Long]\n\
    \        val temp25 = mutable.ListBuffer.empty[Long]\n        val temp26 = mutable.ListBuffer.empty[Long]\n\
    \        val temp27 = mutable.ListBuffer.empty[Long]\n        val temp28 = mutable.ListBuffer.empty[Long]\n\
    \        val temp29 = mutable.ListBuffer.empty[Long]\n        val temp30 = mutable.ListBuffer.empty[Long]\n\
    \        val temp31 = mutable.ListBuffer.empty[Long]\n        val temp32 = mutable.ListBuffer.empty[Long]\n\
    \        val temp33 = mutable.ListBuffer.empty[Long]\n        val temp34 = mutable.ListBuffer.empty[Long]\n\
    \        val temp35 = mutable.List", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val collatzSeq\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLen = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n    \
    \    val collatzSeqLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n     \
    \   val collatzSeqLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n   \
    \     val collatzSeqLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long",
  "        val odd_collatz = new mutable.ListBuffer[Long]()\n        val collatz =\
    \ new mutable.ListBuffer[Long]()\n        val collatz_seq = new mutable.ListBuffer[Long]()\n\
    \        val odd_collatz_seq = new mutable.ListBuffer[Long]()\n        val odd_collatz_seq_temp\
    \ = new mutable.ListBuffer[Long]()\n        val odd_collatz_seq_temp2 = new mutable.ListBuffer[Long]()\n\
    \        val odd_collatz_seq_temp3 = new mutable.ListBuffer[Long]()\n        val\
    \ odd_collatz_seq_temp4 = new mutable.ListBuffer[Long]()\n        val odd_collatz_seq_temp5\
    \ = new mutable.ListBuffer[Long]()\n        val odd_collatz_seq_temp6 = new mutable.ListBuffer[Long]()\n\
    \        val odd_collatz_seq_temp7 = new mutable.ListBuffer[Long]()\n        val\
    \ odd_collatz_seq_temp8 = new mutable.ListBuffer[Long]()\n        val odd_collatz_seq_temp9\
    \ = new mutable.ListBuffer[Long]()\n        val odd_collatz_seq_temp10 = new mutable.ListBuffer[Long]()\n\
    \        val odd_collatz_seq_temp11 = new mutable.ListBuffer[Long]()\n       \
    \ val odd_collatz_seq_temp12 = new mutable.ListBuffer[Long]()\n        val odd_collatz_seq_temp13\
    \ = new mutable.ListBuffer[Long]()\n        val odd_collatz_seq_temp14 = new mutable.ListBuffer[Long]()\n\
    \        val odd_collatz_seq_temp15 = new mutable.ListBuffer[Long]()\n       \
    \ val odd_collatz_seq_temp16 = new mutable.ListBuffer[Long]()\n        val odd_collatz_seq_temp17\
    \ = new mutable.ListBuffer[Long]()\n        val odd_collatz_seq_temp18 = new mutable.ListBuffer[Long]()\n\
    \        val odd_collatz_seq_temp19 = new mutable.ListBuffer[Long]()\n       \
    \ val odd_collatz_seq_temp20 = new mutable.ListBuffer[Long]()\n        val odd_collatz_seq_temp21\
    \ = new mutable.ListBuffer[Long]()\n        val odd_collatz_seq_temp22 = new mutable.ListBuffer[Long]()\n\
    \        val odd_collat", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 1\n        val next = (prev * 2).toInt\n\
    \        val prev2 = prev * 3\n        val next2 = prev2 + 1\n        while(n\
    \ > 0) {\n            n match {\n                case 0 => collatz ++= List(prev)\n\
    \                case 1 => even ++= List(prev)\n                case 2 => even\
    \ ++= List(prev2)\n                case 3 => even ++= List(next2)\n          \
    \      case 4 => even ++= List(next)\n                case 5 => even ++= List(next)\n\
    \                case 6 => even ++= List(next2)\n                case 7 => even\
    \ ++= List(next)\n                case 8 => even ++= List(next)\n            \
    \    case 9 => even ++= List(next2)\n                case _ => odd ++= List(prev)\n\
    \            }\n            prev = next\n            next = next2\n          \
    \  prev2 = prev2 * 3\n            next2 = prev2 + 1\n        }\n        collatz.sortWith(_\
    \ < _)\n        odd.toList", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = new Collatz(n)\n        while(collatz.hasNext) {\n    \
    \        val next = collatz.next\n            if(next.isEven) {\n            \
    \    even += next.toLong\n            } else {\n                odd += next.toLong\n\
    \            }\n        }\n        odd ++= even\n        odd.toList", "      \
    \  val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val list = mutable.ListBuffer.empty[Long]\n        var current = 1\n\
    \        var prev = 1\n        while (current <= n) {\n            val next =\
    \ current + 1\n            if (next % 2 == 0) {\n                even.append(next)\n\
    \            } else {\n                odd.append(next)\n            }\n     \
    \       current = next\n        }\n        even.foreach(x => list+=x)\n      \
    \  odd.foreach(x => list+=x)\n        list.sortWith((x, y) => x < y)\n       \
    \ list.toList", "        val odd = mutable.ListBuffer.empty[Long]\n        val\
    \ even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val collatzSeq\
    \ = mutable.ListBuffer.empty[Long]\n        val evenSeq = mutable.ListBuffer.empty[Long]\n\
    \        val oddSeq = mutable.ListBuffer.empty[Long]\n        val evenSeq2 = mutable.ListBuffer.empty[Long]\n\
    \        val oddSeq2 = mutable.ListBuffer.empty[Long]\n        val evenSeq3 =\
    \ mutable.ListBuffer.empty[Long]\n        val oddSeq3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenSeq4 = mutable.ListBuffer.empty[Long]\n        val oddSeq4 =\
    \ mutable.ListBuffer.empty[Long]\n        val evenSeq5 = mutable.ListBuffer.empty[Long]\n\
    \        val oddSeq5 = mutable.ListBuffer.empty[Long]\n        val evenSeq6 =\
    \ mutable.ListBuffer.empty[Long]\n        val oddSeq6 = mutable.ListBuffer.empty[Long]\n\
    \        val evenSeq7 = mutable.ListBuffer.empty[Long]\n        val oddSeq7 =\
    \ mutable.ListBuffer.empty[Long]\n        val evenSeq8 = mutable.ListBuffer.empty[Long]\n\
    \        val oddSeq8 = mutable.ListBuffer.empty[Long]\n        val evenSeq9 =\
    \ mutable.ListBuffer.empty[Long]\n        val oddSeq9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenSeq10 = mutable.ListBuffer.empty[Long]\n        val oddSeq10\
    \ = mutable.ListBuffer.empty[Long]\n        val evenSeq11 = mutable.ListBuffer.empty[Long]\n\
    \        val oddSeq11 = mutable.ListBuffer.empty[Long]\n        val evenSeq12\
    \ = mutable.ListBuffer.empty[Long]\n        val oddSeq12 = mutable.ListBuffer.empty[Long]\n\
    \        val evenSeq13 = mutable.ListBuffer.empty[Long]\n        val oddSeq13\
    \ = mutable.ListBuffer.empty[Long]\n        val evenSeq14 = mutable.ListBuffer.empty[Long]\n\
    \        val oddSeq14 = mutable.ListBuffer.empty[Long]\n        val evenSeq15\
    \ = mutable.ListBuffer.empty[Long]\n        val oddSeq15 = mutable.ListBuffer.empty[Long]\n\
    \        val evenSeq16 = mutable.ListBuffer.empty[Long]\n        val odd", " \
    \       val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val list = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list = mutable.ListBuffer.empty[Long]\n        val even_list\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_collatz = mutable.ListBuffer.empty[Long]\n\
    \        val even_collatz = mutable.ListBuffer.empty[Long]\n        val odd_even\
    \ = mutable.ListBuffer.empty[Long]\n        val even_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val even_even =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_even_list = mutable.ListBuffer.empty[Long]\n\
    \        val even_odd_list = mutable.ListBuffer.empty[Long]\n        val odd_odd_list\
    \ = mutable.ListBuffer.empty[Long]\n        val even_even_list = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even_list = mutable.ListBuffer.empty[Long]\n        val even_odd_list\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_odd_list = mutable.ListBuffer.empty[Long]\n\
    \        val even_even_list = mutable.ListBuffer.empty[Long]\n        val odd_even_list\
    \ = mutable.ListBuffer.empty[Long]\n        val even_odd_list = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_list = mutable.ListBuffer.empty[Long]\n        val even_even_list\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_even_list = mutable.ListBuffer.empty[Long]\n\
    \        val even_odd_list = mutable.ListBuffer.empty[Long]\n        val odd_odd_list\
    \ = mutable.ListBuffer.empty[Long]\n        val even_even_list = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even_list = mutable.ListBuffer.empty[Long]\n        val even_odd_list\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_odd_list = mutable.ListBuffer.empty[Long]\n\
    \        val even_even_list = mutable.ListBuffer.empty[Long]\n        val odd_even_list\
    \ = mutable.ListBuffer.empty[Long]\n        val even_odd_list = mutable.ListBuffer.empty[Long]\n",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val prev = 0\n        val next = if (n % 2 == 0) prev + 1 else prev *\
    \ 3 + 1\n        val even = if (next % 2 == 0) next else next * 2\n        val\
    \ odd = if (even % 2 == 0) even else even * 3 + 1\n        while (next != 1) {\n\
    \            collatz ++= next\n            prev = next\n            next = if\
    \ (n % 2 == 0) prev + 1 else prev * 3 + 1\n            even = if (next % 2 ==\
    \ 0) next else next * 2\n            odd = if (even % 2 == 0) even else even *\
    \ 3 + 1\n        }\n        collatz.sortWith(_ < _)", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        var current = 0\n        var next = 1\n        while(current < n) {\n\
    \            next *= 2\n            current += 1\n            while(next > current)\
    \ {\n                collatz += 1\n                next += current\n         \
    \   }\n            odd += current\n            even += next\n        }\n     \
    \   odd.toList ++ even.toList", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        var current = 0\n        while(current < n) {\n            current match\
    \ {\n                case 1 => list += current\n                case _ => {\n\
    \                    if(current % 2 == 0) {\n                        even += current\n\
    \                    } else {\n                        odd += current\n      \
    \              }\n                }\n            }\n            current match\
    \ {\n                case 1 => list += current\n                case _ => {\n\
    \                    if(current % 2 == 0) {\n                        even += current\n\
    \                    } else {\n                        odd += current\n      \
    \              }\n                }\n            }\n        }\n        list +=\
    \ current\n        list.sortWith((a, b) => a < b)\n        odd.toList", "    \
    \    val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.List", "        var odd_nums = List[Long]()\n\
    \        var odd_nums_set = scala.collection.mutable.Set[Long]()\n        var\
    \ odd_nums_map = scala.collection.mutable.Map[Long, Long]()\n        var odd_nums_list_map\
    \ = scala.collection.mutable.Map[Long, List[Long]]()\n        var odd_nums_list_set\
    \ = scala.collection.mutable.Set[List[Long]]()\n        var odd_nums_list_map\
    \ = scala.collection.mutable.Map[List[Long], Long]()\n        var odd_nums_list_set\
    \ = scala.collection.mutable.Set[List[Long]]()\n        var odd_nums_list_map\
    \ = scala.collection.mutable.Map[List[Long], List[Long]]()\n        var odd_nums_list_set\
    \ = scala.collection.mutable.Set[List[Long]]()\n        var odd_nums_list_map\
    \ = scala.collection.mutable.Map[List[Long], List[Long]]()\n        var odd_nums_list_set\
    \ = scala.collection.mutable.Set[List[Long]]()\n        var odd_nums_list_map\
    \ = scala.collection.mutable.Map[List[Long], List[Long]]()\n        var odd_nums_list_set\
    \ = scala.collection.mutable.Set[List[Long]]()\n        var odd_nums_list_map\
    \ = scala.collection.mutable.Map[List[Long], List[Long]]()\n        var odd_nums_list_set\
    \ = scala.collection.mutable.Set[List[Long]]()\n        var odd_nums_list_map\
    \ = scala.collection.mutable.Map[List[Long], List[Long]]()\n        var odd_nums_list_set\
    \ = scala.collection.mutable.Set[List[Long]]()\n        var odd_nums_list_map\
    \ = scala.collection.mutable.Map[List[Long], List[Long]]()\n        var odd_nums_list_set\
    \ = scala.collection.mutable.Set[List[Long]]()\n        var odd_nums_list_map\
    \ = scala.collection.mutable.Map[List[Long], List[Long]]()\n        var odd_nums_list_set\
    \ = scala.collection.mutable.Set[List[Long]]()\n        var odd_nums_list_map\
    \ = scala.collection.mutable.Map[List[Long], List[Long]]()\n        var odd_nums_list_set\
    \ = scala.collection.mutable.Set[List[Long]]()\n        var odd_nums_list_map\
    \ = scala.collection.mutable.Map[List[Long], List[Long]]()\n        var odd_nums_list_set\
    \ = scala.collection.mutable.Set[List[Long]]()\n        var odd_nums_list_map\
    \ = scala.collection.mutable.Map[List[Long], List[Long]]()\n        var odd_nums_list_set\
    \ = scal", "        val odd = mutable.ListBuffer.empty[Long]\n        val even\
    \ = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val collatzList\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList2 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList3 = mutable.ListBuffer.empty[Long]\n        val collatzList4\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList5 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList6 = mutable.ListBuffer.empty[Long]\n        val collatzList7\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList8 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList9 = mutable.ListBuffer.empty[Long]\n        val collatzList10\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList11 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList12 = mutable.ListBuffer.empty[Long]\n        val collatzList13\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList14 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList15 = mutable.ListBuffer.empty[Long]\n        val collatzList16\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList17 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList18 = mutable.ListBuffer.empty[Long]\n        val collatzList19\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList20 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList21 = mutable.ListBuffer.empty[Long]\n        val collatzList22\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList23 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList24 = mutable.ListBuffer.empty[Long]\n        val collatzList25\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList26 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList27 = mutable.ListBuffer.empty[Long]\n        val collatzList28\
    \ = mutable.ListBuffer.empty[", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val temp = mutable.ListBuffer.empty[Long]\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        val temp2 = mutable.ListBuffer.empty[Long]\n        val temp3 = mutable.ListBuffer.empty[Long]\n\
    \        val temp4 = mutable.ListBuffer.empty[Long]\n        val temp5 = mutable.ListBuffer.empty[Long]\n\
    \        val temp6 = mutable.ListBuffer.empty[Long]\n        val temp7 = mutable.ListBuffer.empty[Long]\n\
    \        val temp8 = mutable.ListBuffer.empty[Long]\n        val temp9 = mutable.ListBuffer.empty[Long]\n\
    \        val temp10 = mutable.ListBuffer.empty[Long]\n        val temp11 = mutable.ListBuffer.empty[Long]\n\
    \        val temp12 = mutable.ListBuffer.empty[Long]\n        val temp13 = mutable.ListBuffer.empty[Long]\n\
    \        val temp14 = mutable.ListBuffer.empty[Long]\n        val temp15 = mutable.ListBuffer.empty[Long]\n\
    \        val temp16 = mutable.ListBuffer.empty[Long]\n        val temp17 = mutable.ListBuffer.empty[Long]\n\
    \        val temp18 = mutable.ListBuffer.empty[Long]\n        val temp19 = mutable.ListBuffer.empty[Long]\n\
    \        val temp20 = mutable.ListBuffer.empty[Long]\n        val temp21 = mutable.ListBuffer.empty[Long]\n\
    \        val temp22 = mutable.ListBuffer.empty[Long]\n        val temp23 = mutable.ListBuffer.empty[Long]\n\
    \        val temp24 = mutable.ListBuffer.empty[Long]\n        val temp25 = mutable.ListBuffer.empty[Long]\n\
    \        val temp26 = mutable.ListBuffer.empty[Long]\n        val temp27 = mutable.ListBuffer.empty[Long]\n\
    \        val temp28 = mutable.ListBuffer.empty[Long]\n        val temp29 = mutable.ListBuffer.empty[Long]\n\
    \        val temp30 = mutable.ListBuffer.empty[Long]\n        val temp31 = mutable.ListBuffer.empty[Long]\n\
    \        val temp32 = mutable.ListBuffer.empty[Long]\n        val temp33 = mutable.ListBuffer.empty[Long]\n\
    \        val temp34 = mutable.ListBuffer.empty[", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val prev = new mutable.ListBuffer[Long]()\n        val next = new mutable.ListBuffer[Long]()\n\
    \        val even = new mutable.ListBuffer[Long]()\n        val odd = new mutable.ListBuffer[Long]()\n\
    \        val temp = new mutable.ListBuffer[Long]()\n        val temp2 = new mutable.ListBuffer[Long]()\n\
    \        val temp3 = new mutable.ListBuffer[Long]()\n        val temp4 = new mutable.ListBuffer[Long]()\n\
    \        val temp5 = new mutable.ListBuffer[Long]()\n        val temp6 = new mutable.ListBuffer[Long]()\n\
    \        val temp7 = new mutable.ListBuffer[Long]()\n        val temp8 = new mutable.ListBuffer[Long]()\n\
    \        val temp9 = new mutable.ListBuffer[Long]()\n        val temp10 = new\
    \ mutable.ListBuffer[Long]()\n        val temp11 = new mutable.ListBuffer[Long]()\n\
    \        val temp12 = new mutable.ListBuffer[Long]()\n        val temp13 = new\
    \ mutable.ListBuffer[Long]()\n        val temp14 = new mutable.ListBuffer[Long]()\n\
    \        val temp15 = new mutable.ListBuffer[Long]()\n        val temp16 = new\
    \ mutable.ListBuffer[Long]()\n        val temp17 = new mutable.ListBuffer[Long]()\n\
    \        val temp18 = new mutable.ListBuffer[Long]()\n        val temp19 = new\
    \ mutable.ListBuffer[Long]()\n        val temp20 = new mutable.ListBuffer[Long]()\n\
    \        val temp21 = new mutable.ListBuffer[Long]()\n        val temp22 = new\
    \ mutable.ListBuffer[Long]()\n        val temp23 = new mutable.ListBuffer[Long]()\n\
    \        val temp24 = new mutable.ListBuffer[Long]()\n        val temp25 = new\
    \ mutable.ListBuffer[Long]()\n        val temp26 = new mutable.ListBuffer[Long]()\n\
    \        val temp27 = new mutable.ListBuffer[Long]()\n        val temp28 = new\
    \ mutable.ListBuffer[Long]()\n        val temp29 = new mutable.ListBuffer[Long]()\n\
    \        val temp30 = new mutable.ListBuffer[Long]()\n        val temp31 = new\
    \ mutable.ListBuffer[Long]()\n        val temp32 = new mutable.ListBuffer[Long",
  "        var odds : List[Long] = Nil\n        var i : Long = 1\n        while (i\
    \ <= n) {\n            if (isOdd(i)) {\n                odds = i :: odds\n   \
    \         }\n            i = i * 3 + 1\n        }\n        odds.sortWith(_.compareTo(_)\
    \ == 0)", "        val odd_list = mutable.ListBuffer[Long]()\n        var prev\
    \ = 0\n        var next_prev = 0\n        var next_next = 0\n        var next_next_next\
    \ = 0\n        var next_next_next_next = 0\n        var next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next = 0\n        var next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next_next_next = 0\n        var next_next_next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next_next_next_next_next = 0\n   \
    \     var next_next_next_next_next_next_next_next_next_next_next = 0\n       \
    \ var next_next_next_next_next_next_next_next_next_next_next_next = 0\n      \
    \  var next_next_next_next_next_next_next_next_next_next_next_next = 0\n     \
    \   var next_next_next_next_next_next_next_next_next_next_next_next = 0\n    \
    \    var next_next_next_next_next_next_next_next_next_next_next_next = 0\n   \
    \     var next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n\
    \        var next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        var next_next_next_", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val collatzSeq\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLen = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n    \
    \    val collatzSeqLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n     \
    \   val collatzSeqLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n   \
    \     val collatzSeqLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val prev = (1l).toLong\n        val next = (prev match {\n          \
    \  case 1 => prev\n            case x => prev * x / 2\n        }).toLong\n   \
    \     while (n > 0) {\n            if (n % 2 == 0) {\n                even +=\
    \ next\n                next *= 3\n            } else {\n                odd +=\
    \ next\n                next *= 2\n            }\n            n -= 1\n       \
    \     collatz += prev\n            prev = next\n            next = prev match\
    \ {\n                case 1 => prev\n                case x => prev * x / 2\n\
    \            }\n        }\n        odd.toList ++ even.toList ++ collatz.toList",
  "        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        var prev : Long = 1\n\
    \        while (n != 1) {\n            if (n % 2 == 0) {\n                even\
    \ += prev\n                prev = (prev * 3) + 1\n            } else {\n     \
    \           odd += prev\n                prev = (prev * 2) + 1\n            }\n\
    \            collatz += prev\n            n -= 1\n        }\n        odd.toList\
    \ ++ even.toList ++ collatz.toList", "        var collatz : List[Long] = List()\n\
    \        var prev : Long = 1\n        var i : Long = 1\n        while (i <= n)\
    \ {\n            if (i % 2 == 0) {\n                collatz ::= prev\n       \
    \         prev = prev * 2 + 1\n            } else {\n                collatz ::=\
    \ prev * 3 + 1\n                prev = prev + 1\n            }\n            i\
    \ += 1\n        }\n        collatz.sortWith(_ < _)\n        return collatz", " \
    \       val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val collatzSeq = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq2 = mutable.ListBuffer[Long]()\n        val collatzSeq3\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq4 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq5 = mutable.ListBuffer[Long]()\n        val collatzSeq6\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq7 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq8 = mutable.ListBuffer[Long]()\n        val collatzSeq9\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq10 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq11 = mutable.ListBuffer[Long]()\n        val collatzSeq12\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq13 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq14 = mutable.ListBuffer[Long]()\n        val collatzSeq15\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq16 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq17 = mutable.ListBuffer[Long]()\n        val collatzSeq18\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq19 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq20 = mutable.ListBuffer[Long]()\n        val collatzSeq21\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq22 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq23 = mutable.ListBuffer[Long]()\n        val collatzSeq24\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq25 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq26 = mutable.ListBuffer[Long]()\n        val collatzSeq27\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq28 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq29 = ", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        var next = 1\n        while(n != 1) {\n            next *= n\n      \
    \      n -= 1\n            if(n % 2 == 0) {\n                even += next.toLong\n\
    \            } else {\n                odd += next.toLong\n            }\n   \
    \     }\n        collatz += even.toList\n        collatz += odd.toList\n     \
    \   collatz.sortWith(_ < _)\n        collatz", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        var prev : Long = 1\n        var next = 1\n        while (n != 1) {\n\
    \            if (n % 2 == 0) {\n                odd.append(prev)\n           \
    \     next = prev / 2\n            } else {\n                next = prev * 3 +\
    \ 1 \n            }\n            prev = next\n            n = next\n        }\n\
    \        odd.toList", "        val odd = mutable.ListBuffer.empty[Long]\n    \
    \    val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val current = 0\n        val prev = 0\n        val next = 1\n       \
    \ while (current <= n) {\n            if (current % 2 == 0) {\n              \
    \  even.add(prev)\n                prev = prev * 2 + 1\n            } else {\n\
    \                odd.add(prev)\n                prev = prev * 3 + 1\n        \
    \    }\n            current = next\n            next = prev\n        }\n     \
    \   list.add(prev)\n        list.add(even.toList)\n        list.add(odd.toList)\n\
    \        list.sortWith((x, y) => x < y)\n        list.toList", "        val odd\
    \ = mutable.ListBuffer[Long]()\n        var prev = 1\n        var current = n\n\
    \        while (current != 1) {\n            val next = (prev * 2).toLong\n  \
    \          if (next % 2 == 0) {\n                odd += next\n               \
    \ prev = next\n            } else {\n                odd += prev\n           \
    \     prev = next\n            }\n            current = prev\n        }\n    \
    \    odd.toList", "        var odds : List[Long] = List()\n        var prev :\
    \ Long = 1\n        while (n != 1) {\n            if (n % 2 == 0) {\n        \
    \        odds = odds :+ prev\n                prev = prev * 3 + 1\n          \
    \  } else {\n                prev = prev * 2\n            }\n            n = prev\n\
    \        }\n        odds = odds :+ prev\n        odds = odds.sortWith(_ < _)\n\
    \        return odds", "        val odd = mutable.ListBuffer.empty[Long]\n   \
    \     val even = mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_even =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_even =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_even =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_even =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_even =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_even = ",
  "        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        var prev : Long = 1\n\
    \        var i : Long = 1\n        while (i < n) {\n            val next = if\
    \ (prev % 2 == 0) prev / 2 else 3 * prev + 1\n            odd.add(next)\n    \
    \        even.add(prev)\n            prev = next\n            i += 1\n       \
    \ }\n        odd.toList", "        var result : List[Long] = Nil\n        var\
    \ prev : Long = 1\n        var i : Long = 1\n        while (i <= n) {\n      \
    \      prev = i\n            if (i % 2 == 0) {\n                i = i / 2\n  \
    \          } else {\n                i = 3 * i + 1\n            }\n          \
    \  result = result :+ prev\n        }\n        result.sortWith(_ < _)\n      \
    \  return result", "        val odd = mutable.ListBuffer.empty[Long]\n       \
    \ val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val temp = mutable.ListBuffer.empty[Long]\n        val temp2 = mutable.ListBuffer.empty[Long]\n\
    \        val temp3 = mutable.ListBuffer.empty[Long]\n        val temp4 = mutable.ListBuffer.empty[Long]\n\
    \        val temp5 = mutable.ListBuffer.empty[Long]\n        val temp6 = mutable.ListBuffer.empty[Long]\n\
    \        val temp7 = mutable.ListBuffer.empty[Long]\n        val temp8 = mutable.ListBuffer.empty[Long]\n\
    \        val temp9 = mutable.ListBuffer.empty[Long]\n        val temp10 = mutable.ListBuffer.empty[Long]\n\
    \        val temp11 = mutable.ListBuffer.empty[Long]\n        val temp12 = mutable.ListBuffer.empty[Long]\n\
    \        val temp13 = mutable.ListBuffer.empty[Long]\n        val temp14 = mutable.ListBuffer.empty[Long]\n\
    \        val temp15 = mutable.ListBuffer.empty[Long]\n        val temp16 = mutable.ListBuffer.empty[Long]\n\
    \        val temp17 = mutable.ListBuffer.empty[Long]\n        val temp18 = mutable.ListBuffer.empty[Long]\n\
    \        val temp19 = mutable.ListBuffer.empty[Long]\n        val temp20 = mutable.ListBuffer.empty[Long]\n\
    \        val temp21 = mutable.ListBuffer.empty[Long]\n        val temp22 = mutable.ListBuffer.empty[Long]\n\
    \        val temp23 = mutable.ListBuffer.empty[Long]\n        val temp24 = mutable.ListBuffer.empty[Long]\n\
    \        val temp25 = mutable.ListBuffer.empty[Long]\n        val temp26 = mutable.ListBuffer.empty[Long]\n\
    \        val temp27 = mutable.ListBuffer.empty[Long]\n        val temp28 = mutable.ListBuffer.empty[Long]\n\
    \        val temp29 = mutable.ListBuffer.empty[Long]\n        val temp30 = mutable.ListBuffer.empty[Long]\n\
    \        val temp31 = mutable.ListBuffer.empty[Long]\n        val temp32 = mutable.ListBuffer.empty[Long]\n\
    \        val temp33 = mutable.ListBuffer.empty[Long]\n        val temp34 = mutable.ListBuffer.empty[Long]\n\
    \        val temp35 = mutable.ListBuffer.", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        var current = 0\n        while(current < n) {\n            current match\
    \ {\n                case 1 => list.+=(1)\n                case _ => {\n     \
    \               current match {\n                        case 2 => list.+=(2)\n\
    \                        case _ => {\n                            current match\
    \ {\n                                case 3 => list.+=(3)\n                  \
    \              case _ => {\n                                    current match\
    \ {\n                                        case 4 => list.+=(4)\n          \
    \                              case _ => {\n                                 \
    \           current match {\n                                                case\
    \ 5 => list.+=(5)\n                                                case _ => {\n\
    \                                                    current match {\n       \
    \                                                 case 6 => list.+=(6)\n     \
    \                                                   case _ => {\n            \
    \                                                current match {\n           \
    \                                                     case 7 => list.+=(7)\n \
    \                                                               case _ => {\n\
    \                                                                    current match\
    \ {\n                                                                        case\
    \ 8 => list.+=(8)\n                                                          \
    \              case _ => {\n                                                 \
    \                           current match {\n                                \
    \                                                case 9 => list.+=(9)\n      \
    \                                                                          case\
    \ _ => {\n                                                                   \
    \                 current match {\n                                          \
    \                                              case 10 => list.+=(10)\n      \
    \                                                                            \
    \      case _ => {\n                                                         \
    \                                   current match {\n                        \
    \                                                                        case\
    \ 11 => list.+=(11)\n                                                        \
    \                                        case _ => {\n                       \
    \                                                                            \
    \ current match {\n                                                          \
    \                                              case 12 => list.+=(12)\n      \
    \                                                                            \
    \                      case _ => {\n                                         \
    \                                                                   current match\
    \ {\n                                                                        \
    \                                        case 13 => list.+=(13)\n            \
    \                                                                            \
    \                        case _ => {\n                                       \
    \                                                                            \
    \ current match {\n                                                          \
    \                                                              case 14 => list.+=(14)\n\
    \                                                                            \
    \                                            case _ => {\n                   \
    \                                                                            \
    \                             current match {\n                              \
    \                                                                            \
    \                      case 15 => list.+=(15)\n                              \
    \                                                                            \
    \                      case _ => {\n                                         \
    \                                                                            \
    \               current match {\n                                            \
    \                                                                            \
    \                case 16 => list.+=(16)\n                                    \
    \                                                                            \
    \                        case _ => {\n                                       \
    \                                                                            \
    \                         current match {\n                                  \
    \                                                                            \
    \                                  case 17 => list.+=(17)\n                  \
    \                                                                            \
    \                                                  case _ => {\n             \
    \                                                                            \
    \                                                           current match {\n\
    \                                                                            \
    \                                                                            case\
    \ 18 => list.+=(18)\n                                                        \
    \                                                                            \
    \                    case _ => {\n                                           \
    \                                                                            \
    \                                     current match {\n                      \
    \                                                                            \
    \                                                              case 19 => list.+=(19)\n\
    \                                                                            \
    \                                                                            \
    \        case _ => {\n                                                       \
    \                                                                            \
    \                                 current match {\n                          \
    \                                                                            \
    \                                                                  case 20 =>\
    \ list.+=(20)\n                                                              \
    \                                                                            \
    \                              case _ => {\n                                 \
    \                                                                            \
    \                                                               current match\
    \ {\n                                                                        \
    \                                                                            \
    \                            case 21 => list.+=(21)\n                        \
    \                                                                            \
    \                                                                            case\
    \ _ => {\n                                                                   \
    \                                                                            \
    \                                     current match {\n                      \
    \                                                                            \
    \                                                                            \
    \          case ", "        var odd_list : List[Long] = List()\n        var collatz\
    \ : List[Long] = List()\n        var i : Long = 1\n        while (i <= n) {\n\
    \            if (i % 2 == 0) {\n                collatz ::= i\n            } else\
    \ {\n                odd_list ::= i\n            }\n            i = i + 2\n  \
    \      }\n        odd_list ::= n\n        odd_list ::= collatz.reverse\n     \
    \   odd_list ::= odd_list.sort\n        return odd_list", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        var current = 0\n        while (current < n) {\n            current +=\
    \ 2\n            if (current % 2 == 0) {\n                even += current\n  \
    \          } else {\n                odd += current\n            }\n        }\n\
    \        odd.toList ++ even.toList", "        var odds : List[Long] = List(1)\n\
    \        var i : Long = 1\n        var prev : Long = 1\n        while (i <= n)\
    \ {\n            prev = i\n            if (i % 2 == 0) {\n                odds\
    \ = odds :+ prev\n                i = prev / 2\n            } else {\n       \
    \         i = prev * 3 + 1 \n            }\n        }\n        odds.sortWith((x,\
    \ y) => x < y)\n        return odds", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        val current = 0\n        val next = 1\n        while(current < n) {\n\
    \            val currentEven = if (current % 2 == 0) even else odd\n         \
    \   val currentOdd = if (current % 2 == 1) odd else even\n            val nextEven\
    \ = if (next % 2 == 0) even else odd\n            val nextOdd = if (next % 2 ==\
    \ 1) odd else even\n            current += next\n            next += nextEven\n\
    \            result ++= currentOdd\n            result ++= nextOdd\n        }\n\
    \        result.sortWith(_ < _)", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        var current = 0\n        while (n != 1) {\n            current += 1\n\
    \            n match {\n                case 0 => odd.add(0)\n               \
    \ case 1 => odd.add(1)\n                case _ => {\n                    var next\
    \ = 1\n                    while (next < current) {\n                        next\
    \ *= 2\n                        if (n % next == 0) {\n                       \
    \     odd.add(next)\n                            n /= next\n                 \
    \       }\n                        else {\n                            next +=\
    \ 1\n                        }\n                    }\n                }\n   \
    \         }\n        }\n        odd.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val prev = new mutable.ListBuffer[Long]()\n        val next = new mutable.ListBuffer[Long]()\n\
    \        val temp = new mutable.ListBuffer[Long]()\n        val temp2 = new mutable.ListBuffer[Long]()\n\
    \        val temp3 = new mutable.ListBuffer[Long]()\n        val temp4 = new mutable.ListBuffer[Long]()\n\
    \        val temp5 = new mutable.ListBuffer[Long]()\n        val temp6 = new mutable.ListBuffer[Long]()\n\
    \        val temp7 = new mutable.ListBuffer[Long]()\n        val temp8 = new mutable.ListBuffer[Long]()\n\
    \        val temp9 = new mutable.ListBuffer[Long]()\n        val temp10 = new\
    \ mutable.ListBuffer[Long]()\n        val temp11 = new mutable.ListBuffer[Long]()\n\
    \        val temp12 = new mutable.ListBuffer[Long]()\n        val temp13 = new\
    \ mutable.ListBuffer[Long]()\n        val temp14 = new mutable.ListBuffer[Long]()\n\
    \        val temp15 = new mutable.ListBuffer[Long]()\n        val temp16 = new\
    \ mutable.ListBuffer[Long]()\n        val temp17 = new mutable.ListBuffer[Long]()\n\
    \        val temp18 = new mutable.ListBuffer[Long]()\n        val temp19 = new\
    \ mutable.ListBuffer[Long]()\n        val temp20 = new mutable.ListBuffer[Long]()\n\
    \        val temp21 = new mutable.ListBuffer[Long]()\n        val temp22 = new\
    \ mutable.ListBuffer[Long]()\n        val temp23 = new mutable.ListBuffer[Long]()\n\
    \        val temp24 = new mutable.ListBuffer[Long]()\n        val temp25 = new\
    \ mutable.ListBuffer[Long]()\n        val temp26 = new mutable.ListBuffer[Long]()\n\
    \        val temp27 = new mutable.ListBuffer[Long]()\n        val temp28 = new\
    \ mutable.ListBuffer[Long]()\n        val temp29 = new mutable.ListBuffer[Long]()\n\
    \        val temp30 = new mutable.ListBuffer[Long]()\n        val temp31 = new\
    \ mutable.ListBuffer[Long]()\n        val temp32 = new mutable.ListBuffer[Long]()\n\
    \        val temp33 = new mutable.ListBuffer[Long]()\n        val temp34 = new\
    \ mutable.ListBuffer[", "        val odd = mutable.ListBuffer.empty[Long]\n  \
    \      val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val collatzList\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList2 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList3 = mutable.ListBuffer.empty[Long]\n        val collatzList4\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList5 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList6 = mutable.ListBuffer.empty[Long]\n        val collatzList7\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList8 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList9 = mutable.ListBuffer.empty[Long]\n        val collatzList10\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList11 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList12 = mutable.ListBuffer.empty[Long]\n        val collatzList13\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList14 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList15 = mutable.ListBuffer.empty[Long]\n        val collatzList16\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList17 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList18 = mutable.ListBuffer.empty[Long]\n        val collatzList19\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList20 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList21 = mutable.ListBuffer.empty[Long]\n        val collatzList22\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList23 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList24 = mutable.ListBuffer.empty[Long]\n        val collatzList25\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList26 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList27 = mutable.ListBuffer.empty[Long]\n        val collatzList28\
    \ = mutable.ListBuffer.empty[", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val temp = mutable.ListBuffer.empty[Long]\n        val temp2 = mutable.ListBuffer.empty[Long]\n\
    \        val temp3 = mutable.ListBuffer.empty[Long]\n        val temp4 = mutable.ListBuffer.empty[Long]\n\
    \        val temp5 = mutable.ListBuffer.empty[Long]\n        val temp6 = mutable.ListBuffer.empty[Long]\n\
    \        val temp7 = mutable.ListBuffer.empty[Long]\n        val temp8 = mutable.ListBuffer.empty[Long]\n\
    \        val temp9 = mutable.ListBuffer.empty[Long]\n        val temp10 = mutable.ListBuffer.empty[Long]\n\
    \        val temp11 = mutable.ListBuffer.empty[Long]\n        val temp12 = mutable.ListBuffer.empty[Long]\n\
    \        val temp13 = mutable.ListBuffer.empty[Long]\n        val temp14 = mutable.ListBuffer.empty[Long]\n\
    \        val temp15 = mutable.ListBuffer.empty[Long]\n        val temp16 = mutable.ListBuffer.empty[Long]\n\
    \        val temp17 = mutable.ListBuffer.empty[Long]\n        val temp18 = mutable.ListBuffer.empty[Long]\n\
    \        val temp19 = mutable.ListBuffer.empty[Long]\n        val temp20 = mutable.ListBuffer.empty[Long]\n\
    \        val temp21 = mutable.ListBuffer.empty[Long]\n        val temp22 = mutable.ListBuffer.empty[Long]\n\
    \        val temp23 = mutable.ListBuffer.empty[Long]\n        val temp24 = mutable.ListBuffer.empty[Long]\n\
    \        val temp25 = mutable.ListBuffer.empty[Long]\n        val temp26 = mutable.ListBuffer.empty[Long]\n\
    \        val temp27 = mutable.ListBuffer.empty[Long]\n        val temp28 = mutable.ListBuffer.empty[Long]\n\
    \        val temp29 = mutable.ListBuffer.empty[Long]\n        val temp30 = mutable.ListBuffer.empty[Long]\n\
    \        val temp31 = mutable.ListBuffer.empty[Long]\n        val temp32 = mutable.ListBuffer.empty[Long]\n\
    \        val temp33 = mutable.ListBuffer.empty[Long]\n        val temp34 = mutable.ListBuffer.empty[Long]\n\
    \        val temp35 = mutable.ListBuffer.", "        var list: List[Long] = List()\n\
    \        var prev : Long = 1\n        var next: Long = 1\n        var temp : Long\
    \ = 1\n        var flag : Boolean = false\n        while (n > 1) {\n         \
    \   if (n % 2 == 0) {\n                next = prev * 3 + 1\n                temp\
    \ = prev\n                prev = next\n                next = temp\n         \
    \       temp = prev\n                prev = next\n                next = temp\n\
    \                temp = prev\n                prev = next\n                next\
    \ = temp\n                temp = prev\n                prev = next\n         \
    \       next = temp\n                temp = prev\n                prev = next\n\
    \                next = temp\n                temp = prev\n                prev\
    \ = next\n                next = temp\n                temp = prev\n         \
    \       prev = next\n                next = temp\n                temp = prev\n\
    \                prev = next\n                next = temp\n                temp\
    \ = prev\n                prev = next\n                next = temp\n         \
    \       temp = prev\n                prev = next\n                next = temp\n\
    \                temp = prev\n                prev = next\n                next\
    \ = temp\n                temp = prev\n                prev = next\n         \
    \       next = temp\n                temp = prev\n                prev = next\n\
    \                next = temp\n                temp = prev\n                prev\
    \ = next\n                next = temp\n                temp = prev\n         \
    \       prev = next\n                next = temp\n                temp = prev\n\
    \                prev = next\n                next = temp\n                temp\
    \ = prev\n                prev = next\n                next = temp\n         \
    \       temp = prev\n                prev = next\n                next = temp\n\
    \                temp = prev\n                prev = next\n                next\
    \ = temp\n                temp = prev\n                prev = next\n         \
    \       next = temp\n                temp = prev\n                prev = next\n\
    \                next = temp\n                temp = prev\n                prev\
    \ = next\n                next = temp\n                temp = prev\n         \
    \       prev = next\n                next = temp\n                temp = prev\n\
    \                prev = next\n                next = temp\n                temp\
    \ = prev\n                prev = next\n                next = temp\n         \
    \       temp = prev\n                prev = next\n                next = temp\n\
    \                temp = prev\n                prev = next\n                next\
    \ = temp\n                temp = prev\n                prev = next\n         \
    \       next = temp\n                temp = prev\n                prev = next\n\
    \                next = temp\n                temp = prev\n                prev\
    \ = next\n                next = temp\n                temp = prev\n         \
    \       prev = next\n                next = temp\n                temp = prev\n\
    \                prev = next\n                next = temp\n                temp\
    \ = prev\n                prev = next\n                next = temp\n         \
    \       temp = prev\n                prev = next\n                next = temp\n\
    \                temp = prev\n                prev = next\n                next\
    \ = temp\n                temp = prev\n                prev = next\n         \
    \       next = temp\n                temp = prev\n                prev = next\n\
    \                next = temp\n                temp = prev\n                prev\
    \ = next\n                next = temp\n                temp = prev\n         \
    \       prev = next\n                ", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list = mutable.ListBuffer.empty[Long]\n        val even_list\
    \ = mutable.ListBuffer.empty[Long]\n        val collatz_list = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list_sorted = mutable.ListBuffer.empty[Long]\n        val even_list_sorted\
    \ = mutable.ListBuffer.empty[Long]\n        val collatz_list_sorted = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list_sorted_reverse = mutable.ListBuffer.empty[Long]\n      \
    \  val even_list_sorted_reverse = mutable.ListBuffer.empty[Long]\n        val\
    \ collatz_list_sorted_reverse = mutable.ListBuffer.empty[Long]\n        val odd_list_sorted_reverse_list\
    \ = mutable.ListBuffer.empty[Long]\n        val even_list_sorted_reverse_list\
    \ = mutable.ListBuffer.empty[Long]\n        val collatz_list_sorted_reverse_list\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list_sorted_reverse_list =\
    \ mutable.ListBuffer.empty[Long]\n        val even_list_sorted_reverse_list =\
    \ mutable.ListBuffer.empty[Long]\n        val collatz_list_sorted_reverse_list\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list_sorted_reverse_list =\
    \ mutable.ListBuffer.empty[Long]\n        val even_list_sorted_reverse_list =\
    \ mutable.ListBuffer.empty[Long]\n        val collatz_list_sorted_reverse_list\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list_sorted_reverse_list =\
    \ mutable.ListBuffer.empty[Long]\n        val even_list_sorted_reverse_list =\
    \ mutable.ListBuffer.empty[Long]\n        val collatz_list_sorted_reverse_list\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list_sorted_reverse_list =\
    \ mutable.ListBuffer.empty[Long]\n        val even_list_sorted_reverse_list =\
    \ mutable.ListBuffer.empty[Long]\n        val collatz_list_sorted_reverse_list\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list_sorted_reverse_list =\
    \ mutable.ListBuffer.empty[Long]\n        val even_list_sorted_reverse_list =\
    \ mutable.ListBuffer.empty[Long]\n        val collatz_list_sorted_reverse_list\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list_sorted_reverse_list =\
    \ mutable.ListBuffer.empty[Long]\n", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        var current = 0\n        while (current < n) {\n            val next\
    \ = current + 1\n            if (next % 2 == 0) {\n                even += next\n\
    \            } else {\n                odd += next\n            }\n          \
    \  current += 1\n        }\n        odd.toList ++ even.toList", "        var odd_collatz:\
    \ List[Long] = List()\n        var prev : Long = 1\n        var next_prev : Long\
    \ = 1\n        var next_next : Long = 1\n        while(n > 1) {\n            odd_collatz\
    \ ::= prev\n            prev :: next_prev\n            next_prev :: next_next\n\
    \            next_next :: n\n            n :: odd_collatz\n            prev =\
    \ next_prev\n            next_prev = next_next\n            next_next = n\n  \
    \          n = next_next\n        }\n        odd_collatz ::= prev\n        odd_collatz",
  "        val odd = mutable.ListBuffer.empty[Long]\n        var prev = 0\n      \
    \  var next = 1\n        while (n != 1) {\n            val next = if (n % 2 ==\
    \ 0) prev + 1 else prev * 3 + 1 \n            odd.add(next)\n            prev\
    \ = next\n            n = next\n        }\n        odd.toList", "        val odd\
    \ = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_even =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_even =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_even =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_even =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_even =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_even = ", "        var odd_collatz:\
    \ List[Long] = List()\n        var current_collatz: List[Long] = List()\n    \
    \    var next_collatz: List[Long] = List()\n        var current_odd_num: Long\
    \ = 1\n        var current_odd_num_list: List[Long] = List()\n        var current_odd_num_list1:\
    \ List[Long] = List()\n        var current_odd_num_list2: List[Long] = List()\n\
    \        var current_odd_num_list3: List[Long] = List()\n        var current_odd_num_list4:\
    \ List[Long] = List()\n        var current_odd_num_list5: List[Long] = List()\n\
    \        var current_odd_num_list6: List[Long] = List()\n        var current_odd_num_list7:\
    \ List[Long] = List()\n        var current_odd_num_list8: List[Long] = List()\n\
    \        var current_odd_num_list9: List[Long] = List()\n        var current_odd_num_list10:\
    \ List[Long] = List()\n        var current_odd_num_list11: List[Long] = List()\n\
    \        var current_odd_num_list12: List[Long] = List()\n        var current_odd_num_list13:\
    \ List[Long] = List()\n        var current_odd_num_list14: List[Long] = List()\n\
    \        var current_odd_num_list15: List[Long] = List()\n        var current_odd_num_list16:\
    \ List[Long] = List()\n        var current_odd_num_list17: List[Long] = List()\n\
    \        var current_odd_num_list18: List[Long] = List()\n        var current_odd_num_list19:\
    \ List[Long] = List()\n        var current_odd_num_list20: List[Long] = List()\n\
    \        var current_odd_num_list21: List[Long] = List()\n        var current_odd_num_list22:\
    \ List[Long] = List()\n        var current_odd_num_list23: List[Long] = List()\n\
    \        var current_odd_num_list24: List[Long] = List()\n        var current_odd_num_list25:\
    \ List[Long] = List()\n        var current_odd_num_list26: List[Long] = List()\n\
    \        var current_odd_num_list27: List[Long] = List()\n        var current_odd_num_list28:\
    \ List[Long] = List()\n        var current_odd_num_list29: List[Long] = List()\n\
    \        var current_odd_num_list30: List[Long] = List()\n        var current_odd_num_list31:\
    \ List[Long] = List()\n        var current_odd_num_list32: List[Long] = List()\n\
    \        var current_odd_num_list33: List[Long] = List()\n        var current_odd_num_list34:\
    \ List[Long] = List()\n        var current_odd_num_list35: List[Long] = List()\n\
    \        var current_odd_num_list36: List[Long] = List()\n        var current_odd_num_list37:\
    \ List[Long] = List()\n        var current_odd_num_list38: List[Long] = List()\n\
    \        var current_odd_num_", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val currentNum = n.toLong\n        val currentNum2 = currentNum\n   \
    \     val currentNum3 = currentNum2\n        val currentNum4 = currentNum3\n \
    \       val currentNum5 = currentNum4\n        val currentNum6 = currentNum5\n\
    \        val currentNum7 = currentNum6\n        val currentNum8 = currentNum7\n\
    \        val currentNum9 = currentNum8\n        val currentNum10 = currentNum9\n\
    \        val currentNum11 = currentNum10\n        val currentNum12 = currentNum11\n\
    \        val currentNum13 = currentNum12\n        val currentNum14 = currentNum13\n\
    \        val currentNum15 = currentNum14\n        val currentNum16 = currentNum15\n\
    \        val currentNum17 = currentNum16\n        val currentNum18 = currentNum17\n\
    \        val currentNum19 = currentNum18\n        val currentNum20 = currentNum19\n\
    \        val currentNum21 = currentNum20\n        val currentNum22 = currentNum21\n\
    \        val currentNum23 = currentNum22\n        val currentNum24 = currentNum23\n\
    \        val currentNum25 = currentNum24\n        val currentNum26 = currentNum25\n\
    \        val currentNum27 = currentNum26\n        val currentNum28 = currentNum27\n\
    \        val currentNum29 = currentNum28\n        val currentNum30 = currentNum29\n\
    \        val currentNum31 = currentNum30\n        val currentNum32 = currentNum31\n\
    \        val currentNum33 = currentNum32\n        val currentNum34 = currentNum33\n\
    \        val currentNum35 = currentNum34\n        val currentNum36 = currentNum35\n\
    \        val currentNum37 = currentNum36\n        val currentNum38 = currentNum37\n\
    \        val currentNum39 = currentNum38\n        val currentNum40 = currentNum39\n\
    \        val currentNum41 = currentNum40\n        val currentNum42 = currentNum41\n\
    \        val currentNum43 = currentNum42\n        val currentNum44 = currentNum43\n\
    \        val currentNum45 = currentNum44\n        val currentNum46 = currentNum45\n\
    \        val currentNum47 = currentNum46\n        val currentNum48 = currentNum47\n\
    \        val currentNum49 = current", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        val temp = mutable.ListBuffer[Long]()\n        val temp2 = mutable.ListBuffer[Long]()\n\
    \        val temp3 = mutable.ListBuffer[Long]()\n        val temp4 = mutable.ListBuffer[Long]()\n\
    \        val temp5 = mutable.ListBuffer[Long]()\n        val temp6 = mutable.ListBuffer[Long]()\n\
    \        val temp7 = mutable.ListBuffer[Long]()\n        val temp8 = mutable.ListBuffer[Long]()\n\
    \        val temp9 = mutable.ListBuffer[Long]()\n        val temp10 = mutable.ListBuffer[Long]()\n\
    \        val temp11 = mutable.ListBuffer[Long]()\n        val temp12 = mutable.ListBuffer[Long]()\n\
    \        val temp13 = mutable.ListBuffer[Long]()\n        val temp14 = mutable.ListBuffer[Long]()\n\
    \        val temp15 = mutable.ListBuffer[Long]()\n        val temp16 = mutable.ListBuffer[Long]()\n\
    \        val temp17 = mutable.ListBuffer[Long]()\n        val temp18 = mutable.ListBuffer[Long]()\n\
    \        val temp19 = mutable.ListBuffer[Long]()\n        val temp20 = mutable.ListBuffer[Long]()\n\
    \        val temp21 = mutable.ListBuffer[Long]()\n        val temp22 = mutable.ListBuffer[Long]()\n\
    \        val temp23 = mutable.ListBuffer[Long]()\n        val temp24 = mutable.ListBuffer[Long]()\n\
    \        val temp25 = mutable.ListBuffer[Long]()\n        val temp26 = mutable.ListBuffer[Long]()\n\
    \        val temp27 = mutable.ListBuffer[Long]()\n        val temp28 = mutable.ListBuffer[Long]()\n\
    \        val temp29 = mutable.ListBuffer[Long]()\n        val temp30 = mutable.ListBuffer[Long]()\n\
    \        val temp31 = mutable.ListBuffer[Long]()\n        val temp32 = mutable.ListBuffer[Long]()\n\
    \        val temp33 = mutable.ListBuffer[Long]()\n        val temp34 = mutable.ListBuffer[Long]()\n\
    \        val temp35 = mutable.ListBuffer", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        val temp = 0\n \
    \       val temp2 = 0\n        val temp3 = 0\n        val temp4 = 0\n        val\
    \ temp5 = 0\n        val temp6 = 0\n        val temp7 = 0\n        val temp8 =\
    \ 0\n        val temp9 = 0\n        val temp10 = 0\n        val temp11 = 0\n \
    \       val temp12 = 0\n        val temp13 = 0\n        val temp14 = 0\n     \
    \   val temp15 = 0\n        val temp16 = 0\n        val temp17 = 0\n        val\
    \ temp18 = 0\n        val temp19 = 0\n        val temp20 = 0\n        val temp21\
    \ = 0\n        val temp22 = 0\n        val temp23 = 0\n        val temp24 = 0\n\
    \        val temp25 = 0\n        val temp26 = 0\n        val temp27 = 0\n    \
    \    val temp28 = 0\n        val temp29 = 0\n        val temp30 = 0\n        val\
    \ temp31 = 0\n        val temp32 = 0\n        val temp33 = 0\n        val temp34\
    \ = 0\n        val temp35 = 0\n        val temp36 = 0\n        val temp37 = 0\n\
    \        val temp38 = 0\n        val temp39 = 0\n        val temp40 = 0\n    \
    \    val temp41 = 0\n        val temp42 = 0\n        val temp43 = 0\n        val\
    \ temp44 = 0\n        val temp45 = 0\n        val temp46 = 0\n        val temp47\
    \ = 0\n        val temp48 = 0\n        val temp49 = 0\n        val temp50 = 0\n\
    \        val temp51 = 0\n        val temp52 = 0\n        val temp53 = 0\n    \
    \    val temp54 = 0\n        val temp55 = 0\n        val temp56 = 0\n        val\
    \ temp57 = 0\n        val temp58 = 0\n        val temp59 = 0\n        val temp60\
    \ = 0\n        val temp61 = 0\n        val temp62 = 0\n        val temp63 = 0\n\
    \        val temp64 = 0\n        val temp65 = 0\n        val temp66 = 0\n    \
    \    val temp67 = 0\n        val temp68 = 0\n        val temp69 = 0\n        val\
    \ temp70 = 0\n        val temp71 = 0\n        val temp72 = 0\n        val temp73\
    \ = 0\n        val temp74 = 0\n        val temp75 = 0\n        val temp76 = 0\n\
    \        val temp77 = 0", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        var current = 0\n        while (current <= n) {\n            if (current\
    \ % 2 == 0) {\n                even += current\n            } else {\n       \
    \         odd += current\n            }\n            current += 1\n        }\n\
    \        odd.toList ++ even.toList", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        val prev = 0\n \
    \       val next = 1\n        while(n > 1) {\n            val current = collatz.last\n\
    \            collatz ++= List(prev)\n            prev match {\n              \
    \  case 1 => odd ++= List(current)\n                case _ => even ++= List(current)\n\
    \            }\n            n match {\n                case 1 => result ++= List(current)\n\
    \                case _ => result ++= List(current)\n            }\n         \
    \   n match {\n                case 1 => n match {\n                    case 1\
    \ => result ++= List(current)\n                    case _ => result ++= List(current)\n\
    \                }\n                case _ => n match {\n                    case\
    \ 1 => result ++= List(current)\n                    case _ => result ++= List(current)\n\
    \                }\n            }\n            n match {\n                case\
    \ 1 => n match {\n                    case 1 => result ++= List(current)\n   \
    \                 case _ => result ++= List(current)\n                }\n    \
    \            case _ => n match {\n                    case 1 => result ++= List(current)\n\
    \                    case _ => result ++= List(current)\n                }\n \
    \           }\n            n match {\n                case 1 => n match {\n  \
    \                  case 1 => result ++= List(current)\n                    case\
    \ _ => result ++= List(current)\n                }\n                case _ =>\
    \ n match {\n                    case 1 => result ++= List(current)\n        \
    \            case _ => result ++= List(current)\n                }\n         \
    \   }\n            n match {\n                case 1 => n match {\n          \
    \          case 1 => result ++= List(current)\n                    case _ => result\
    \ ++= List(current)\n                }\n                case _ => n match {\n\
    \                    case 1 => result ++= List(current)\n                    case\
    \ _ => result ++= List(current)\n                }\n            }\n          \
    \  n match {\n                case 1 => n match {\n                    case 1\
    \ => result ++= List(current)\n                    case _ => result ++= List(current)\n\
    \                }\n                case _ => n match {\n                    case\
    \ 1 => result ++= List(current)\n                    case _ => result ++= List(current)\n\
    \                }\n            }\n            n match {\n                case\
    \ 1 => n match {\n                    case 1 => result ++= List(current)\n   \
    \                 case _ => result ++= List(current)\n                }\n    \
    \            case _ => n match {\n                    case 1 => result ++= List(",
  "        val odd_collatz = new mutable.ListBuffer[Long]()\n        var next_n =\
    \ n\n        while(next_n != 1) {\n            odd_collatz ++= List(next_n)\n\
    \            next_n = if (next_n % 2 == 0) next_n / 2 else 3 * next_n + 1 \n \
    \       }\n        odd_collatz.sortWith(_ < _)", "        var collatz : List[Long]\
    \ = List()\n        var prev : Long = 1\n        var i : Long = 1\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                collatz ::= prev\n\
    \                prev = prev / 2\n            } else {\n                prev =\
    \ prev * 3 + 1 \n            }\n            i += 1\n        }\n        collatz\
    \ ::= prev\n        collatz.sortWith(_ < _)\n        return collatz", "      \
    \  val odd = mutable.ListBuffer.empty[Long]\n        var current = 0\n       \
    \ while(current < n) {\n            val next = current + 1\n            val nextOdd\
    \ = if (next % 2 == 0) next / 2 else next * 3 + 1\n            odd.add(nextOdd)\n\
    \            current = next\n        }\n        odd.toList", "        val odd\
    \ = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        val prev = 0\n        val next = 1\n        val prevEven = 1\n      \
    \  val prevOdd = 1\n        val nextEven = 1\n        val nextOdd = 1\n      \
    \  val prevEvenNextEven = 1\n        val prevEvenNextOdd = 1\n        val prevOddNextEven\
    \ = 1\n        val prevOddNextOdd = 1\n        val nextEvenNextEven = 1\n    \
    \    val nextEvenNextOdd = 1\n        val nextOddNextEven = 1\n        val nextOddNextOdd\
    \ = 1\n        val evenNextEven = 1\n        val evenNextOdd = 1\n        val\
    \ oddNextEven = 1\n        val oddNextOdd = 1\n        val evenNextEvenNextEven\
    \ = 1\n        val evenNextEvenNextOdd = 1\n        val evenNextOddNextEven =\
    \ 1\n        val evenNextOddNextOdd = 1\n        val oddNextEvenNextEven = 1\n\
    \        val oddNextEvenNextOdd = 1\n        val oddNextOddNextEven = 1\n    \
    \    val oddNextOddNextOdd = 1\n        val evenNextEvenNextEvenNextEven = 1\n\
    \        val evenNextEvenNextEvenNextOdd = 1\n        val evenNextEvenNextOddNextEven\
    \ = 1\n        val evenNextEvenNextOddNextOdd = 1\n        val evenNextOddNextEvenNextEven\
    \ = 1\n        val evenNextOddNextEvenNextOdd = 1\n        val evenNextOddNextOddNextEven\
    \ = 1\n        val evenNextOddNextOddNextOdd = 1\n        val oddNextEvenNextEvenNextEvenNextEven\
    \ = 1\n        val oddNextEvenNextEvenNextEvenNextOdd = 1\n        val oddNextEvenNextEvenNextOddNextEven\
    \ = 1\n        val oddNextEvenNextEvenNextOddNextOdd = 1\n        val oddNextEvenNextOddNextEvenNextEven\
    \ = 1\n        val oddNextEvenNextOddNextEvenNextOdd = 1\n        val oddNextEvenNextOddNextOddNextEven\
    \ = 1\n        val oddNextEvenNextOddNextOddNextOdd = 1\n        val oddNextOdd",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 1\n        val prevEven = 1\n   \
    \     val prevOdd = 1\n        val nextEven = 1\n        val nextOdd = 1\n   \
    \     val nextEven = nextEven + prevEven\n        val nextOdd = nextOdd * prevOdd\
    \ + prevOdd\n        val nextOdd = nextOdd * prevOdd + prevOdd\n        val nextEven\
    \ = nextEven + prevEven\n        val nextOdd = nextOdd * prevOdd + prevOdd\n \
    \       val nextEven = nextEven + prevEven\n        val nextOdd = nextOdd * prevOdd\
    \ + prevOdd\n        val nextEven = nextEven + prevEven\n        val nextOdd =\
    \ nextOdd * prevOdd + prevOdd\n        val nextEven = nextEven + prevEven\n  \
    \      val nextOdd = nextOdd * prevOdd + prevOdd\n        val nextEven = nextEven\
    \ + prevEven\n        val nextOdd = nextOdd * prevOdd + prevOdd\n        val nextEven\
    \ = nextEven + prevEven\n        val nextOdd = nextOdd * prevOdd + prevOdd\n \
    \       val nextEven = nextEven + prevEven\n        val nextOdd = nextOdd * prevOdd\
    \ + prevOdd\n        val nextEven = nextEven + prevEven\n        val nextOdd =\
    \ nextOdd * prevOdd + prevOdd\n        val nextEven = nextEven + prevEven\n  \
    \      val nextOdd = nextOdd * prevOdd + prevOdd\n        val nextEven = nextEven\
    \ + prevEven\n        val nextOdd = nextOdd * prevOdd + prevOdd\n        val nextEven\
    \ = nextEven + prevEven\n        val nextOdd = nextOdd * prevOdd + prevOdd\n \
    \       val nextEven = nextEven + prevEven\n        val nextOdd = nextOdd * prevOdd\
    \ + prevOdd\n        val nextEven = nextEven + prevEven\n        val nextOdd =\
    \ nextOdd * prevOdd + ", "        val odd = mutable.ListBuffer[Long]()\n     \
    \   var prev = 1\n        while(n > 1) {\n            val next = if (n % 2 ==\
    \ 0) prev + 1 else prev * 3 + 1\n            odd.add(next)\n            prev =\
    \ next\n            n -= 1\n        }\n        odd.toList", "        val odd =\
    \ mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val temp = mutable.ListBuffer.empty[Long]\n\
    \        val temp2 = mutable.ListBuffer.empty[Long]\n        val temp3 = mutable.ListBuffer.empty[Long]\n\
    \        val temp4 = mutable.ListBuffer.empty[Long]\n        val temp5 = mutable.ListBuffer.empty[Long]\n\
    \        val temp6 = mutable.ListBuffer.empty[Long]\n        val temp7 = mutable.ListBuffer.empty[Long]\n\
    \        val temp8 = mutable.ListBuffer.empty[Long]\n        val temp9 = mutable.ListBuffer.empty[Long]\n\
    \        val temp10 = mutable.ListBuffer.empty[Long]\n        val temp11 = mutable.ListBuffer.empty[Long]\n\
    \        val temp12 = mutable.ListBuffer.empty[Long]\n        val temp13 = mutable.ListBuffer.empty[Long]\n\
    \        val temp14 = mutable.ListBuffer.empty[Long]\n        val temp15 = mutable.ListBuffer.empty[Long]\n\
    \        val temp16 = mutable.ListBuffer.empty[Long]\n        val temp17 = mutable.ListBuffer.empty[Long]\n\
    \        val temp18 = mutable.ListBuffer.empty[Long]\n        val temp19 = mutable.ListBuffer.empty[Long]\n\
    \        val temp20 = mutable.ListBuffer.empty[Long]\n        val temp21 = mutable.ListBuffer.empty[Long]\n\
    \        val temp22 = mutable.ListBuffer.empty[Long]\n        val temp23 = mutable.ListBuffer.empty[Long]\n\
    \        val temp24 = mutable.ListBuffer.empty[Long]\n        val temp25 = mutable.ListBuffer.empty[Long]\n\
    \        val temp26 = mutable.ListBuffer.empty[Long]\n        val temp27 = mutable.ListBuffer.empty[Long]\n\
    \        val temp28 = mutable.ListBuffer.empty[Long]\n        val temp29 = mutable.ListBuffer.empty[Long]\n\
    \        val temp30 = mutable.ListBuffer.empty[Long]\n        val temp31 = mutable.ListBuffer.empty[Long]\n\
    \        val temp32 = mutable.ListBuffer.empty[Long]\n        val temp33 = mutable.ListBuffer.empty[Long]\n\
    \        val temp34 = mutable.ListBuffer.empty[Long]\n        val temp35 = mutable.ListBuffer.",
  "        var odd_collatz: List[Long] = Nil\n        var next_collatz: List[Long]\
    \ = Nil\n        var next_odd_collatz: List[Long] = Nil\n        var odd_collatz_length:\
    \ Long = 1\n        var next_collatz_length: Long = 1\n        var next_odd_collatz_length:\
    \ Long = 1\n        var odd_collatz_length_remain: Long = 1\n        var next_collatz_length_remain:\
    \ Long = 1\n        var next_odd_collatz_length_remain: Long = 1\n        var\
    \ odd_collatz_length_remaining_length: Long = 1\n        var next_collatz_length_remaining_length:\
    \ Long = 1\n        var next_odd_collatz_length_remaining_length: Long = 1\n \
    \       var odd_collatz_length_remaining_length_remain: Long = 1\n        var\
    \ next_collatz_length_remaining_length_remain: Long = 1\n        var next_odd_collatz_length_remaining_length_remain:\
    \ Long = 1\n        var odd_collatz_length_remaining_length_remain_length: Long\
    \ = 1\n        var next_collatz_length_remaining_length_remain_length: Long =\
    \ 1\n        var next_odd_collatz_length_remaining_length_remain_length: Long\
    \ = 1\n        var odd_collatz_length_remaining_length_remain_length_remain: Long\
    \ = 1\n        var next_collatz_length_remaining_length_remain_length_remain:\
    \ Long = 1\n        var next_odd_collatz_length_remaining_length_remain_length_remain:\
    \ Long = 1\n        var odd_collatz_length_remaining_length_remain_length_remain_length:\
    \ Long = 1\n        var next_collatz_length_remaining_length_remain_length_remain_length:\
    \ Long = 1\n        var next_odd_collatz_length_remaining_length_remain_length_remain_length:\
    \ Long = 1\n        var odd_collatz_length_remaining_length_remain_length_remain_length_remain:\
    \ Long = 1\n        var next_collatz_length_remaining_length_remain_length_remain_length_remain:\
    \ Long = 1\n        var next_odd_collatz_length_remaining_length_remain_length_remain_length_remain:\
    \ Long = 1\n        var odd_collatz_length_remaining_length_remain_length_remain_length_remain_length:\
    \ Long = 1\n        var next_collatz_length_remaining_length_remain_length_remain_length_remain_length:\
    \ Long = 1\n        var next_odd_collatz_length_remaining_length_remain_length",
  "        var odd_collatz : List[Long] = List()\n        var next_odd : Long = n.toLong\n\
    \        while (next_odd != 1) {\n            if (next_odd % 2 == 0) {\n     \
    \           odd_collatz ::= next_odd.toLong\n                next_odd /= 2\n \
    \           } else {\n                odd_collatz ::= 3 * next_odd.toLong + 1\n\
    \                next_odd *= 3\n            }\n        }\n        odd_collatz.sortWith(_\
    \ < _)\n        return odd_collatz", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        var prev = 0\n        var next = 1\n        while (n != 1) {\n      \
    \      val next = if (n % 2 == 0) prev + 1 else prev * 3 + 1\n            odd.add(next)\n\
    \            prev = next\n            n = next\n        }\n        odd.toList",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val current = n.toLong\n\
    \        while (current != 1) {\n            if (current % 2 == 0) {\n       \
    \         even += current\n            } else {\n                odd += current\n\
    \            }\n            current /= 2\n        }\n        collatz += even\n\
    \        collatz += odd.reverse\n        collatz.toList", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq = mutable.ListBuffer[Long]()\n        val collatzSeqLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLen = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLenLen = mutable.ListBuffer[Long]()\n        val\
    \ collatzSeqLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq", "        val odd_list\
    \ = mutable.ListBuffer[Long]()\n        var current_number = 1\n        var next_number\
    \ = 1\n        while (current_number <= n) {\n            if (current_number %\
    \ 2 == 0) {\n                odd_list += current_number\n            }\n     \
    \       next_number = current_number\n            if (next_number % 2 == 0) {\n\
    \                next_number = next_number / 2\n            } else {\n       \
    \         next_number = next_number * 3 + 1\n            }\n            current_number\
    \ = next_number\n        }\n        odd_list.sortWith((x, y) => x < y)\n     \
    \   return odd_list.toList", "        val list = new mutable.ListBuffer[Long]()\n\
    \        var prev : Long = 1\n        var next = 1\n        while (n != 1) {\n\
    \            if (n % 2 == 0) {\n                next = next / 2\n            }\
    \ else {\n                next = next * 3 + prev\n            }\n            prev\
    \ = next\n            list.add(next)\n            n = prev\n        }\n      \
    \  list.sortWith(_ < _)\n        list.toList", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val i = n\n        while(i > 0) {\n            val temp = i\n       \
    \     i -= 1\n            if(temp % 2 == 0) {\n                even += temp.toLong\n\
    \            } else {\n                odd += temp.toLong\n            }\n   \
    \     }\n        odd.toList ++ even.toList", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        val prev = 0\n \
    \       val current = 0\n        val next = 1\n        val prevEven = 1\n    \
    \    val prevOdd = 1\n        while(current < n) {\n            val next = if\
    \ (prevEven == prevOdd) prevOdd else prevEven\n            prevEven = prevOdd\n\
    \            prevOdd = next\n            current += next\n            collatz\
    \ ++= List(current)\n            if (current % 2 == 0) {\n                even\
    \ += current\n            } else {\n                odd += current\n         \
    \   }\n        }\n        odd.toList ++ even.toList ++ collatz.toList ++ result.toList",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val temp = mutable.ListBuffer.empty[Long]\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        val temp2 = mutable.ListBuffer.empty[Long]\n\
    \        val temp3 = mutable.ListBuffer.empty[Long]\n        val temp4 = mutable.ListBuffer.empty[Long]\n\
    \        val temp5 = mutable.ListBuffer.empty[Long]\n        val temp6 = mutable.ListBuffer.empty[Long]\n\
    \        val temp7 = mutable.ListBuffer.empty[Long]\n        val temp8 = mutable.ListBuffer.empty[Long]\n\
    \        val temp9 = mutable.ListBuffer.empty[Long]\n        val temp10 = mutable.ListBuffer.empty[Long]\n\
    \        val temp11 = mutable.ListBuffer.empty[Long]\n        val temp12 = mutable.ListBuffer.empty[Long]\n\
    \        val temp13 = mutable.ListBuffer.empty[Long]\n        val temp14 = mutable.ListBuffer.empty[Long]\n\
    \        val temp15 = mutable.ListBuffer.empty[Long]\n        val temp16 = mutable.ListBuffer.empty[Long]\n\
    \        val temp17 = mutable.ListBuffer.empty[Long]\n        val temp18 = mutable.ListBuffer.empty[Long]\n\
    \        val temp19 = mutable.ListBuffer.empty[Long]\n        val temp20 = mutable.ListBuffer.empty[Long]\n\
    \        val temp21 = mutable.ListBuffer.empty[Long]\n        val temp22 = mutable.ListBuffer.empty[Long]\n\
    \        val temp23 = mutable.ListBuffer.empty[Long]\n        val temp24 = mutable.ListBuffer.empty[Long]\n\
    \        val temp25 = mutable.ListBuffer.empty[Long]\n        val temp26 = mutable.ListBuffer.empty[Long]\n\
    \        val temp27 = mutable.ListBuffer.empty[Long]\n        val temp28 = mutable.ListBuffer.empty[Long]\n\
    \        val temp29 = mutable.ListBuffer.empty[Long]\n        val temp30 = mutable.ListBuffer.empty[Long]\n\
    \        val temp31 = mutable.ListBuffer.empty[Long]\n        val temp32 = mutable.ListBuffer.empty[Long]\n\
    \        val temp33 = mutable.ListBuffer.empty[Long]\n        val temp34 = mutable.ListBuffer.empty[",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq = mutable.ListBuffer.empty[Long]\n        val collatzSeq2\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq3 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq4 = mutable.ListBuffer.empty[Long]\n        val collatzSeq5\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq6 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq7 = mutable.ListBuffer.empty[Long]\n        val collatzSeq8\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq9 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq10 = mutable.ListBuffer.empty[Long]\n        val collatzSeq11\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq12 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq13 = mutable.ListBuffer.empty[Long]\n        val collatzSeq14\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq15 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq16 = mutable.ListBuffer.empty[Long]\n        val collatzSeq17\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq18 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq19 = mutable.ListBuffer.empty[Long]\n        val collatzSeq20\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq21 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq22 = mutable.ListBuffer.empty[Long]\n        val collatzSeq23\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq24 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq25 = mutable.ListBuffer.empty[Long]\n        val collatzSeq26\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq27 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq28 = mutable.ListBuffer.empty", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        var current = 1\n        while (current <= n) {\n            if (current\
    \ % 2 == 0) {\n                even.clear()\n                even.+=((current\
    \ / 2).toLong)\n                current = even.head\n            } else {\n  \
    \              odd.clear()\n                odd.+=((3 * current + 1).toLong)\n\
    \                current = odd.head\n            }\n            list.+=((current).toLong)\n\
    \        }\n        list.sortWith(_ < _)\n        list.toList", "        val odd\
    \ = mutable.ListBuffer.empty[Long]\n        var next = 1\n        while(n != 1)\
    \ {\n            next *= n\n            if(n % 2 == 0) {\n                odd\
    \ += next\n                n /= 2\n            } else {\n                n = 3\
    \ * n + 1\n            }\n        }\n        odd.toList", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 1\n        val next = (prev rem 2l)\
    \ + 1l\n        while(n != 1l) {\n            n match {\n                case\
    \ 0 => odd.add(prev.toLong)\n                case 1 => even.add(prev.toLong)\n\
    \                case _ => collatz.add(prev.toLong)\n            }\n         \
    \   prev = next\n            next = (prev rem 2l) + 1l\n        }\n        odd.toList\
    \ ++ even.toList ++ collatz.toList", "        var odds : List[Long] = Nil\n  \
    \      var prev : Long = 1\n        var i : Long = 1\n        while (i <= n) {\n\
    \            if (i % 2 == 0) {\n                odds = odds :+ prev\n        \
    \        prev = prev * 3 + 1\n            } else {\n                prev = prev\
    \ * 2\n            }\n            i = i + 1\n        }\n        odds.sortWith(_\
    \ < _)\n        return odds", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val temp = mutable.ListBuffer.empty[Long]\n        val temp2 = mutable.ListBuffer.empty[Long]\n\
    \        val temp3 = mutable.ListBuffer.empty[Long]\n        val temp4 = mutable.ListBuffer.empty[Long]\n\
    \        val temp5 = mutable.ListBuffer.empty[Long]\n        val temp6 = mutable.ListBuffer.empty[Long]\n\
    \        val temp7 = mutable.ListBuffer.empty[Long]\n        val temp8 = mutable.ListBuffer.empty[Long]\n\
    \        val temp9 = mutable.ListBuffer.empty[Long]\n        val temp10 = mutable.ListBuffer.empty[Long]\n\
    \        val temp11 = mutable.ListBuffer.empty[Long]\n        val temp12 = mutable.ListBuffer.empty[Long]\n\
    \        val temp13 = mutable.ListBuffer.empty[Long]\n        val temp14 = mutable.ListBuffer.empty[Long]\n\
    \        val temp15 = mutable.ListBuffer.empty[Long]\n        val temp16 = mutable.ListBuffer.empty[Long]\n\
    \        val temp17 = mutable.ListBuffer.empty[Long]\n        val temp18 = mutable.ListBuffer.empty[Long]\n\
    \        val temp19 = mutable.ListBuffer.empty[Long]\n        val temp20 = mutable.ListBuffer.empty[Long]\n\
    \        val temp21 = mutable.ListBuffer.empty[Long]\n        val temp22 = mutable.ListBuffer.empty[Long]\n\
    \        val temp23 = mutable.ListBuffer.empty[Long]\n        val temp24 = mutable.ListBuffer.empty[Long]\n\
    \        val temp25 = mutable.ListBuffer.empty[Long]\n        val temp26 = mutable.ListBuffer.empty[Long]\n\
    \        val temp27 = mutable.ListBuffer.empty[Long]\n        val temp28 = mutable.ListBuffer.empty[Long]\n\
    \        val temp29 = mutable.ListBuffer.empty[Long]\n        val temp30 = mutable.ListBuffer.empty[Long]\n\
    \        val temp31 = mutable.ListBuffer.empty[Long]\n        val temp32 = mutable.ListBuffer.empty[Long]\n\
    \        val temp33 = mutable.ListBuffer.empty[Long]\n        val temp34 = mutable.ListBuffer.empty[Long]\n\
    \        val temp35 = mutable.ListBuffer.", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        val collatz1 = mutable.ListBuffer[Long]()\n        val collatz2 = mutable.ListBuffer[Long]()\n\
    \        val collatz3 = mutable.ListBuffer[Long]()\n        val collatz4 = mutable.ListBuffer[Long]()\n\
    \        val collatz5 = mutable.ListBuffer[Long]()\n        val collatz6 = mutable.ListBuffer[Long]()\n\
    \        val collatz7 = mutable.ListBuffer[Long]()\n        val collatz8 = mutable.ListBuffer[Long]()\n\
    \        val collatz9 = mutable.ListBuffer[Long]()\n        val collatz10 = mutable.ListBuffer[Long]()\n\
    \        val collatz11 = mutable.ListBuffer[Long]()\n        val collatz12 = mutable.ListBuffer[Long]()\n\
    \        val collatz13 = mutable.ListBuffer[Long]()\n        val collatz14 = mutable.ListBuffer[Long]()\n\
    \        val collatz15 = mutable.ListBuffer[Long]()\n        val collatz16 = mutable.ListBuffer[Long]()\n\
    \        val collatz17 = mutable.ListBuffer[Long]()\n        val collatz18 = mutable.ListBuffer[Long]()\n\
    \        val collatz19 = mutable.ListBuffer[Long]()\n        val collatz20 = mutable.ListBuffer[Long]()\n\
    \        val collatz21 = mutable.ListBuffer[Long]()\n        val collatz22 = mutable.ListBuffer[Long]()\n\
    \        val collatz23 = mutable.ListBuffer[Long]()\n        val collatz24 = mutable.ListBuffer[Long]()\n\
    \        val collatz25 = mutable.ListBuffer[Long]()\n        val collatz26 = mutable.ListBuffer[Long]()\n\
    \        val collatz27 = mutable.ListBuffer[Long]()\n        val collatz28 = mutable.ListBuffer[Long]()\n\
    \        val collatz29 = mutable.ListBuffer[Long]()\n        val collatz30 = mutable.ListBuffer[Long]()\n\
    \        val collat", "        val list = new mutable.ListBuffer[Long]()\n   \
    \     var prev = 0\n        while (n != 1) {\n            if (n % 2 == 0) {\n\
    \                prev = (prev + 2).toLong\n            } else {\n            \
    \    prev = (prev + 1).toLong\n            }\n            list.+=((prev).toLong)\n\
    \            n = prev\n        }\n        list.sortWith(_ < _)\n        list.toList",
  "        val odd = mutable.ListBuffer.empty[Long]\n        var current = 1\n   \
    \     while (current < n) {\n            val next = current + 1\n            if\
    \ (next % 2 == 0) {\n                odd.append(next)\n            }\n       \
    \     else {\n                val nextOdd = next / 2\n                odd.append(nextOdd)\n\
    \                odd.append(nextOdd * 2)\n                odd.append(nextOdd *\
    \ 3)\n            }\n            current = next\n        }\n        odd.toList",
  "        var odd_collatz : List[Long] = List(1)\n        var odd_collatz_list :\
    \ List[Long] = List(1)\n        var odd_collatz_list_temp : List[Long] = List(1)\n\
    \        var odd_collatz_list_temp_temp : List[Long] = List(1)\n        var odd_collatz_list_temp_temp_temp\
    \ : List[Long] = List(1)\n        var odd_collatz_list_temp_temp_temp_temp : List[Long]\
    \ = List(1)\n        var odd_collatz_list_temp_temp_temp_temp_temp : List[Long]\
    \ = List(1)\n        var odd_collatz_list_temp_temp_temp_temp_temp_temp : List[Long]\
    \ = List(1)\n        var odd_collatz_list_temp_temp_temp_temp_temp_temp_temp :\
    \ List[Long] = List(1)\n        var odd_collatz_list_temp_temp_temp_temp_temp_temp_temp_temp\
    \ : List[Long] = List(1)\n        var odd_collatz_list_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ : List[Long] = List(1)\n        var odd_collatz_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ : List[Long] = List(1)\n        var odd_collatz_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ : List[Long] = List(1)\n        var odd_collatz_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ : List[Long] = List(1)\n        var odd_collatz_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ : List[Long] = List(1)\n        var odd_collatz_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ : List[Long] = List(1)\n        var odd_collatz_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ : List[Long] = List(1)\n        var odd_collatz_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ : List[Long] = List(1)\n        var odd_collatz_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ : List[Long] = List(1)\n        var odd_collatz_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ : List[Long] = List(1)\n        var odd_collatz_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ : List[Long] = List(1)\n        var odd_collatz_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ : List[Long] = List(1)\n        var odd_collatz_list_temp_", "        val odd\
    \ = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val list = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq = mutable.ListBuffer.empty[Long]\n        val collatzSeq2\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq3 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq4 = mutable.ListBuffer.empty[Long]\n        val collatzSeq5\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq6 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq7 = mutable.ListBuffer.empty[Long]\n        val collatzSeq8\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq9 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq10 = mutable.ListBuffer.empty[Long]\n        val collatzSeq11\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq12 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq13 = mutable.ListBuffer.empty[Long]\n        val collatzSeq14\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq15 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq16 = mutable.ListBuffer.empty[Long]\n        val collatzSeq17\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq18 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq19 = mutable.ListBuffer.empty[Long]\n        val collatzSeq20\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq21 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq22 = mutable.ListBuffer.empty[Long]\n        val collatzSeq23\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq24 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq25 = mutable.ListBuffer.empty[Long]\n        val collatzSeq26\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq27 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq28 = mutable.ListBuffer.empty", "        val odd = mutable.ListBuffer[Long]()\n\
    \        var current = 1\n        while (n != 1) {\n            val next = current\
    \ * 2\n            if (next % 2 != 0) {\n                odd += current\n    \
    \            current = next\n            } else {\n                odd += current\n\
    \                current = next + 1\n            }\n        }\n        odd.toList",
  "        var odd_collatz: List[Long] = Nil\n        var prev : Long = 1\n      \
    \  var next_prev : Long = 1\n        var next_next : Long = 1\n        var next_next_prev\
    \ : Long = 1\n        var next_next_next : Long = 1\n        var next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next : Long = 1\n        var next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next : Long = 1\n        var next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next : Long = 1\n        var\
    \ next_next_next_next_next_next_prev : Long = 1\n        var next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_prev : Long = 1\n\
    \        var next_next_next_next_next_next_next_next : Long = 1\n        var next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next : Long = 1\n\
    \        var next_next_next_next_next_next_next_next_prev : Long = 1\n       \
    \ var next_next_next_next_next_next_next_next_next : Long = 1\n        var next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next :\
    \ Long = 1\n        var next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_even\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n        val\
    \ odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_odd_odd_even\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n \
    \       val odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n   \
    \     val odd_odd_odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        var current = 0\n        var next = 1\n        while(current < n) {\n\
    \            next += current\n            current += next\n            if(current\
    \ % 2 == 0) {\n                even += current\n            } else {\n       \
    \         odd += current\n            }\n        }\n        list.+=(even.toList)\n\
    \        list.+=(odd.toList)\n        list.sortWith(_ < _)\n        list.toList",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val prev = 1\n        val next = if (prev % 2 == 0) prev / 2 else 3 *\
    \ prev + 1\n        val i = 2\n        while (i <= n) {\n            if (i % 2\
    \ == 0) {\n                even += i\n            } else {\n                odd\
    \ += i\n            }\n            val temp = prev\n            prev = next\n\
    \            next = temp\n            i += 1\n        }\n        collatz += even.toList\n\
    \        collatz += odd.toList\n        collatz.sortWith(_.compareTo(_) < 0)",
  "        var odd_list : List[Long] = List()\n        var collatz : List[Long] =\
    \ List()\n        var i : Long = 1\n        while (i <= n) {\n            if (i\
    \ % 2 == 0) {\n                collatz ::= i\n                odd_list ::= i\n\
    \            }\n            i = i * 3 + 1 // odd number\n        }\n        odd_list\
    \ ::= collatz\n        odd_list.sortWith(_ < _) // sort in increasing order\n\
    \        return odd_list", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val evenCollatz\
    \ = mutable.ListBuffer.empty[Long]\n        val oddCollatz = mutable.ListBuffer.empty[Long]\n\
    \        val evenCollatzList = mutable.ListBuffer.empty[Long]\n        val oddCollatzList\
    \ = mutable.ListBuffer.empty[Long]\n        val evenCollatzList2 = mutable.ListBuffer.empty[Long]\n\
    \        val oddCollatzList2 = mutable.ListBuffer.empty[Long]\n        val evenCollatzList3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddCollatzList3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenCollatzList4 = mutable.ListBuffer.empty[Long]\n        val oddCollatzList4\
    \ = mutable.ListBuffer.empty[Long]\n        val evenCollatzList5 = mutable.ListBuffer.empty[Long]\n\
    \        val oddCollatzList5 = mutable.ListBuffer.empty[Long]\n        val evenCollatzList6\
    \ = mutable.ListBuffer.empty[Long]\n        val oddCollatzList6 = mutable.ListBuffer.empty[Long]\n\
    \        val evenCollatzList7 = mutable.ListBuffer.empty[Long]\n        val oddCollatzList7\
    \ = mutable.ListBuffer.empty[Long]\n        val evenCollatzList8 = mutable.ListBuffer.empty[Long]\n\
    \        val oddCollatzList8 = mutable.ListBuffer.empty[Long]\n        val evenCollatzList9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddCollatzList9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenCollatzList10 = mutable.ListBuffer.empty[Long]\n        val oddCollatzList10\
    \ = mutable.ListBuffer.empty[Long]\n        val evenCollatzList11 = mutable.ListBuffer.empty[Long]\n\
    \        val oddCollatzList11 = mutable.ListBuffer.empty[Long]\n        val evenCollatzList12\
    \ = mutable.ListBuffer.empty[Long]\n        val oddCollatzList12 = mutable.ListBuffer.empty[Long]\n\
    \        val evenCollatzList13 = mutable.ListBuffer.empty[Long]\n        val oddCollatz",
  "        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val temp = mutable.ListBuffer[Long]()\n\
    \        val n = n.toInt\n        val temp1 = mutable.ListBuffer[Long]()\n   \
    \     val temp2 = mutable.ListBuffer[Long]()\n        val temp3 = mutable.ListBuffer[Long]()\n\
    \        val temp4 = mutable.ListBuffer[Long]()\n        val temp5 = mutable.ListBuffer[Long]()\n\
    \        val temp6 = mutable.ListBuffer[Long]()\n        val temp7 = mutable.ListBuffer[Long]()\n\
    \        val temp8 = mutable.ListBuffer[Long]()\n        val temp9 = mutable.ListBuffer[Long]()\n\
    \        val temp10 = mutable.ListBuffer[Long]()\n        val temp11 = mutable.ListBuffer[Long]()\n\
    \        val temp12 = mutable.ListBuffer[Long]()\n        val temp13 = mutable.ListBuffer[Long]()\n\
    \        val temp14 = mutable.ListBuffer[Long]()\n        val temp15 = mutable.ListBuffer[Long]()\n\
    \        val temp16 = mutable.ListBuffer[Long]()\n        val temp17 = mutable.ListBuffer[Long]()\n\
    \        val temp18 = mutable.ListBuffer[Long]()\n        val temp19 = mutable.ListBuffer[Long]()\n\
    \        val temp20 = mutable.ListBuffer[Long]()\n        val temp21 = mutable.ListBuffer[Long]()\n\
    \        val temp22 = mutable.ListBuffer[Long]()\n        val temp23 = mutable.ListBuffer[Long]()\n\
    \        val temp24 = mutable.ListBuffer[Long]()\n        val temp25 = mutable.ListBuffer[Long]()\n\
    \        val temp26 = mutable.ListBuffer[Long]()\n        val temp27 = mutable.ListBuffer[Long]()\n\
    \        val temp28 = mutable.ListBuffer[Long]()\n        val temp29 = mutable.ListBuffer[Long]()\n\
    \        val temp30 = mutable.ListBuffer[Long]()\n        val temp31 = mutable.ListBuffer[Long]()\n\
    \        val temp32 = mutable.ListBuffer[Long]()\n        val temp33 = mutable.ListBuffer[Long]()\n\
    \        val temp", "        var odds : List[Long] = List(1)\n        var currentOdd\
    \ : Long = 1\n        var currentOdds : List[Long] = List(1)\n        var currentOddsIndex\
    \ = 0\n        var currentOddsIndexMax = odds.length\n        while (currentOddsIndex\
    \ < currentOddsIndexMax) {\n            currentOdds = List(currentOdd)\n     \
    \       currentOddsIndex += 1\n            while (currentOddsIndex < currentOddsIndexMax)\
    \ {\n                if (n % 2 == 0) {\n                    currentOdd *= 2\n\
    \                    currentOdds = List(currentOdd)\n                    currentOddsIndex\
    \ += 1\n                } else {\n                    currentOdd += 1\n      \
    \              currentOdds = List(currentOdd)\n                    currentOddsIndex\
    \ += 1\n                }\n            }\n            odds = odds ++ currentOdds\n\
    \        }\n        odds.sortWith((x, y) => x < y)\n        return odds", "  \
    \      val odd = mutable.ListBuffer.empty[Long]\n        var prev : Long = 1\n\
    \        var next = 1\n        while(n > 1) {\n            val nextTerm = if (n\
    \ % 2 == 0) prev else {\n                val next = (prev * 3) + 1\n         \
    \       prev\n            }\n            odd.add(nextTerm)\n            prev =\
    \ next\n            n = nextTerm\n        }\n        odd.toList", "        var\
    \ odds : List[Long] = Nil\n        var i : Long = 1\n        while (i <= n) {\n\
    \            if (isOdd(i)) {\n                odds = odds :+ i\n             \
    \   i = i / 2\n            } else {\n                i = i * 3 + 1 \n        \
    \    }\n        }\n        odds.sort", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq = mutable.ListBuffer.empty[Long]\n        val evenSeq\
    \ = mutable.ListBuffer.empty[Long]\n        val oddSeq = mutable.ListBuffer.empty[Long]\n\
    \        val evenSeq2 = mutable.ListBuffer.empty[Long]\n        val oddSeq2 =\
    \ mutable.ListBuffer.empty[Long]\n        val evenSeq3 = mutable.ListBuffer.empty[Long]\n\
    \        val oddSeq3 = mutable.ListBuffer.empty[Long]\n        val evenSeq4 =\
    \ mutable.ListBuffer.empty[Long]\n        val oddSeq4 = mutable.ListBuffer.empty[Long]\n\
    \        val evenSeq5 = mutable.ListBuffer.empty[Long]\n        val oddSeq5 =\
    \ mutable.ListBuffer.empty[Long]\n        val evenSeq6 = mutable.ListBuffer.empty[Long]\n\
    \        val oddSeq6 = mutable.ListBuffer.empty[Long]\n        val evenSeq7 =\
    \ mutable.ListBuffer.empty[Long]\n        val oddSeq7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenSeq8 = mutable.ListBuffer.empty[Long]\n        val oddSeq8 =\
    \ mutable.ListBuffer.empty[Long]\n        val evenSeq9 = mutable.ListBuffer.empty[Long]\n\
    \        val oddSeq9 = mutable.ListBuffer.empty[Long]\n        val evenSeq10 =\
    \ mutable.ListBuffer.empty[Long]\n        val oddSeq10 = mutable.ListBuffer.empty[Long]\n\
    \        val evenSeq11 = mutable.ListBuffer.empty[Long]\n        val oddSeq11\
    \ = mutable.ListBuffer.empty[Long]\n        val evenSeq12 = mutable.ListBuffer.empty[Long]\n\
    \        val oddSeq12 = mutable.ListBuffer.empty[Long]\n        val evenSeq13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddSeq13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenSeq14 = mutable.ListBuffer.empty[Long]\n        val oddSeq14\
    \ = mutable.ListBuffer.empty[Long]\n        val evenSeq15 = mutable.ListBuffer.empty[Long]\n\
    \        val oddSeq15 = mutable.ListBuffer.empty[Long]\n        val evenSeq16\
    \ = mutable.ListBuffer.empty[Long]\n        val oddSeq16 = mutable.ListBuffer.empty[Long]\n\
    \        val ", "        val odd = mutable.ListBuffer.empty[Long]\n        val\
    \ even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val prev = 0\n        val next = 1\n        while(n != 1) {\n       \
    \     val nextCollatz = if (n % 2 == 0) next * prev else next * prev + 1\n   \
    \         val nextEven = if (n % 2 == 0) next * prev else next * prev + 3\n  \
    \          val nextOdd = if (n % 2 == 0) next * prev + 1 else next * prev + 5\n\
    \            odd.add(nextOdd)\n            even.add(nextEven)\n            collatz.add(nextCollatz)\n\
    \            prev = next\n            next = nextCollatz\n            n = nextCollatz\n\
    \        }\n        collatz.sortWith(_ < _)\n        collatz.toList", "      \
    \  var odds : List[Long] = Nil\n        var i : Long = 1\n        while (i <=\
    \ n) {\n            if (isOdd(i)) {\n                odds = i :: odds\n      \
    \      }\n            i = i * 3 + 1\n        }\n        odds.sortWith(_ < _)",
  "        var odd = List[Long]()\n        var collatz = List[Long]()\n        var\
    \ current = 0\n        while (current < n) {\n            if (n % 2 == 0) {\n\
    \                odd ::= current\n                collatz ::= collatz :+ collatz(current)\n\
    \                current += 1\n            } else {\n                current +=\
    \ 3\n            }\n        }\n        odd.sortWith(_ < _)\n        return odd",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val temp = mutable.ListBuffer.empty[Long]\n\
    \        val temp2 = mutable.ListBuffer.empty[Long]\n        val temp3 = mutable.ListBuffer.empty[Long]\n\
    \        val temp4 = mutable.ListBuffer.empty[Long]\n        val temp5 = mutable.ListBuffer.empty[Long]\n\
    \        val temp6 = mutable.ListBuffer.empty[Long]\n        val temp7 = mutable.ListBuffer.empty[Long]\n\
    \        val temp8 = mutable.ListBuffer.empty[Long]\n        val temp9 = mutable.ListBuffer.empty[Long]\n\
    \        val temp10 = mutable.ListBuffer.empty[Long]\n        val temp11 = mutable.ListBuffer.empty[Long]\n\
    \        val temp12 = mutable.ListBuffer.empty[Long]\n        val temp13 = mutable.ListBuffer.empty[Long]\n\
    \        val temp14 = mutable.ListBuffer.empty[Long]\n        val temp15 = mutable.ListBuffer.empty[Long]\n\
    \        val temp16 = mutable.ListBuffer.empty[Long]\n        val temp17 = mutable.ListBuffer.empty[Long]\n\
    \        val temp18 = mutable.ListBuffer.empty[Long]\n        val temp19 = mutable.ListBuffer.empty[Long]\n\
    \        val temp20 = mutable.ListBuffer.empty[Long]\n        val temp21 = mutable.ListBuffer.empty[Long]\n\
    \        val temp22 = mutable.ListBuffer.empty[Long]\n        val temp23 = mutable.ListBuffer.empty[Long]\n\
    \        val temp24 = mutable.ListBuffer.empty[Long]\n        val temp25 = mutable.ListBuffer.empty[Long]\n\
    \        val temp26 = mutable.ListBuffer.empty[Long]\n        val temp27 = mutable.ListBuffer.empty[Long]\n\
    \        val temp28 = mutable.ListBuffer.empty[Long]\n        val temp29 = mutable.ListBuffer.empty[Long]\n\
    \        val temp30 = mutable.ListBuffer.empty[Long]\n        val temp31 = mutable.ListBuffer.empty[Long]\n\
    \        val temp32 = mutable.ListBuffer.empty[Long]\n        val temp33 = mutable.ListBuffer.empty[Long]\n\
    \        val temp34 = mutable.ListBuffer.empty[Long]\n        val temp35 = mutable.ListBuffer.",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val temp = mutable.ListBuffer.empty[Long]\n\
    \        val temp2 = mutable.ListBuffer.empty[Long]\n        val temp3 = mutable.ListBuffer.empty[Long]\n\
    \        val temp4 = mutable.ListBuffer.empty[Long]\n        val temp5 = mutable.ListBuffer.empty[Long]\n\
    \        val temp6 = mutable.ListBuffer.empty[Long]\n        val temp7 = mutable.ListBuffer.empty[Long]\n\
    \        val temp8 = mutable.ListBuffer.empty[Long]\n        val temp9 = mutable.ListBuffer.empty[Long]\n\
    \        val temp10 = mutable.ListBuffer.empty[Long]\n        val temp11 = mutable.ListBuffer.empty[Long]\n\
    \        val temp12 = mutable.ListBuffer.empty[Long]\n        val temp13 = mutable.ListBuffer.empty[Long]\n\
    \        val temp14 = mutable.ListBuffer.empty[Long]\n        val temp15 = mutable.ListBuffer.empty[Long]\n\
    \        val temp16 = mutable.ListBuffer.empty[Long]\n        val temp17 = mutable.ListBuffer.empty[Long]\n\
    \        val temp18 = mutable.ListBuffer.empty[Long]\n        val temp19 = mutable.ListBuffer.empty[Long]\n\
    \        val temp20 = mutable.ListBuffer.empty[Long]\n        val temp21 = mutable.ListBuffer.empty[Long]\n\
    \        val temp22 = mutable.ListBuffer.empty[Long]\n        val temp23 = mutable.ListBuffer.empty[Long]\n\
    \        val temp24 = mutable.ListBuffer.empty[Long]\n        val temp25 = mutable.ListBuffer.empty[Long]\n\
    \        val temp26 = mutable.ListBuffer.empty[Long]\n        val temp27 = mutable.ListBuffer.empty[Long]\n\
    \        val temp28 = mutable.ListBuffer.empty[Long]\n        val temp29 = mutable.ListBuffer.empty[Long]\n\
    \        val temp30 = mutable.ListBuffer.empty[Long]\n        val temp31 = mutable.ListBuffer.empty[Long]\n\
    \        val temp32 = mutable.ListBuffer.empty[Long]\n        val temp33 = mutable.ListBuffer.empty[Long]\n\
    \        val temp34 = mutable.ListBuffer.empty[Long]\n        val temp35 = mutable.ListBuffer.",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val evens = mutable.ListBuffer.empty[Long]\n\
    \        val odds = mutable.ListBuffer.empty[Long]\n        val n1 = n.toLong\n\
    \        val n2 = n1.toLong\n        val n3 = n2.toLong\n        val n4 = n3.toLong\n\
    \        val n5 = n4.toLong\n        val n6 = n5.toLong\n        val n7 = n6.toLong\n\
    \        val n8 = n7.toLong\n        val n9 = n8.toLong\n        val n10 = n9.toLong\n\
    \        val n11 = n10.toLong\n        val n12 = n11.toLong\n        val n13 =\
    \ n12.toLong\n        val n14 = n13.toLong\n        val n15 = n14.toLong\n   \
    \     val n16 = n15.toLong\n        val n17 = n16.toLong\n        val n18 = n17.toLong\n\
    \        val n19 = n18.toLong\n        val n20 = n19.toLong\n        val n21 =\
    \ n20.toLong\n        val n22 = n21.toLong\n        val n23 = n22.toLong\n   \
    \     val n24 = n23.toLong\n        val n25 = n24.toLong\n        val n26 = n25.toLong\n\
    \        val n27 = n26.toLong\n        val n28 = n27.toLong\n        val n29 =\
    \ n28.toLong\n        val n30 = n29.toLong\n        val n31 = n30.toLong\n   \
    \     val n32 = n31.toLong\n        val n33 = n32.toLong\n        val n34 = n33.toLong\n\
    \        val n35 = n34.toLong\n        val n36 = n35.toLong\n        val n37 =\
    \ n36.toLong\n        val n38 = n37.toLong\n        val n39 = n38.toLong\n   \
    \     val n40 = n39.toLong\n        val n41 = n40.toLong\n        val n42 = n41.toLong\n\
    \        val n43 = n42.toLong\n        val n44 = n43.toLong\n        val n45 =\
    \ n44.toLong\n        val n46 = n45.toLong\n        val n47 = n46.toLong\n   \
    \     val n48 = n47.toLong\n        val n49 = n48.to", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        val result = mutable.ListBuffer[Long]()\n        val prev = 0\n     \
    \   val next = 1\n        val prevEven = 1\n        val prevOdd = 1\n        val\
    \ nextEven = 1\n        val nextOdd = 1\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val evensCount = mutable.ListBuffer[Long]()\n\
    \        val oddsCount = mutable.ListBuffer[Long]()\n        val evensCount2 =\
    \ mutable.ListBuffer[Long]()\n        val oddsCount2 = mutable.ListBuffer[Long]()\n\
    \        val evensCount3 = mutable.ListBuffer[Long]()\n        val oddsCount3\
    \ = mutable.ListBuffer[Long]()\n        val evensCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount4 = mutable.ListBuffer[Long]()\n        val evensCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount5 = mutable.ListBuffer[Long]()\n\
    \        val evensCount6 = mutable.ListBuffer[Long]()\n        val oddsCount6\
    \ = mutable.ListBuffer[Long]()\n        val evensCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount7 = mutable.ListBuffer[Long]()\n        val evensCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount8 = mutable.ListBuffer[Long]()\n\
    \        val evensCount9 = mutable.ListBuffer[Long]()\n        val oddsCount9\
    \ = mutable.ListBuffer[Long]()\n        val evensCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount10 = mutable.ListBuffer[Long]()\n        val evensCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount11 = mutable.ListBuffer[Long]()\n\
    \        val evensCount12 = mutable.ListBuffer[Long]()\n        val oddsCount12\
    \ = mutable.ListBuffer[Long]()\n        val evensCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount13 = mutable.ListBuffer[Long]()\n        val evensCount14",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        val temp = mutable.ListBuffer.empty[Long]\n        val temp2 = mutable.ListBuffer.empty[Long]\n\
    \        val temp3 = mutable.ListBuffer.empty[Long]\n        val temp4 = mutable.ListBuffer.empty[Long]\n\
    \        val temp5 = mutable.ListBuffer.empty[Long]\n        val temp6 = mutable.ListBuffer.empty[Long]\n\
    \        val temp7 = mutable.ListBuffer.empty[Long]\n        val temp8 = mutable.ListBuffer.empty[Long]\n\
    \        val temp9 = mutable.ListBuffer.empty[Long]\n        val temp10 = mutable.ListBuffer.empty[Long]\n\
    \        val temp11 = mutable.ListBuffer.empty[Long]\n        val temp12 = mutable.ListBuffer.empty[Long]\n\
    \        val temp13 = mutable.ListBuffer.empty[Long]\n        val temp14 = mutable.ListBuffer.empty[Long]\n\
    \        val temp15 = mutable.ListBuffer.empty[Long]\n        val temp16 = mutable.ListBuffer.empty[Long]\n\
    \        val temp17 = mutable.ListBuffer.empty[Long]\n        val temp18 = mutable.ListBuffer.empty[Long]\n\
    \        val temp19 = mutable.ListBuffer.empty[Long]\n        val temp20 = mutable.ListBuffer.empty[Long]\n\
    \        val temp21 = mutable.ListBuffer.empty[Long]\n        val temp22 = mutable.ListBuffer.empty[Long]\n\
    \        val temp23 = mutable.ListBuffer.empty[Long]\n        val temp24 = mutable.ListBuffer.empty[Long]\n\
    \        val temp25 = mutable.ListBuffer.empty[Long]\n        val temp26 = mutable.ListBuffer.empty[Long]\n\
    \        val temp27 = mutable.ListBuffer.empty[Long]\n        val temp28 = mutable.ListBuffer.empty[Long]\n\
    \        val temp29 = mutable.ListBuffer.empty[Long]\n        val temp30 = mutable.ListBuffer.empty[Long]\n\
    \        val temp31 = mutable.ListBuffer.empty[Long]\n        val temp32 = mutable.ListBuffer.empty[Long]\n\
    \        val temp33 = mutable.ListBuffer.empty[Long]\n        val temp34 = mutable.ListBuffer.empty[",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        val i = n\n        while(i > 0) {\n            val temp = i\n       \
    \     i -= 1\n            if(temp % 2 == 0) {\n                even += temp.toLong\n\
    \            } else {\n                odd += temp.toLong\n            }\n   \
    \     }\n        while(even.nonEmpty) {\n            collatz += even.head\n  \
    \          even -= 1\n        }\n        while(odd.nonEmpty) {\n            collatz\
    \ += odd.head\n            odd -= 1\n        }\n        result = collatz.sortWith(_\
    \ < _)\n        result", "        val odd = mutable.ListBuffer.empty[Long]\n \
    \       val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 1\n        val next = 1\n       \
    \ val evenNext = 1\n        val oddNext = 1\n        val evenPrev = 1\n      \
    \  val oddPrev = 1 \n        while(n != 1) {\n            n match {\n        \
    \        case 0 => collatz ++= List(prev)\n                case 1 => odd ++= List(prev)\n\
    \                case 2 => even ++= List(prev)\n                case 3 => even\
    \ ++= List(prev)\n                case 4 => even ++= List(prev)\n            \
    \    case 5 => even ++= List(prev)\n                case 6 => even ++= List(prev)\n\
    \                case 7 => even ++= List(prev)\n                case 8 => even\
    \ ++= List(prev)\n                case 9 => even ++= List(prev)\n            \
    \    case 10 => even ++= List(prev)\n                case 11 => even ++= List(prev)\n\
    \                case 12 => even ++= List(prev)\n                case 13 => even\
    \ ++= List(prev)\n                case 14 => even ++= List(prev)\n           \
    \     case 15 => even ++= List(prev)\n                case 16 => even ++= List(prev)\n\
    \                case 17 => even ++= List(prev)\n                case 18 => even\
    \ ++= List(prev)\n                case 19 => even ++= List(prev)\n           \
    \     case 20 => even ++= List(prev)\n                case 21 => even ++= List(prev)\n\
    \                case 22 => even ++= List(prev)\n                case 23 => even\
    \ ++= List(prev)\n                case 24 => even ++= List(prev)\n           \
    \     case 25 => even ++= List(prev)\n                case 26 => even ++= List(prev)\n\
    \                case 27 => even ++= List(prev)\n                case 28 => even\
    \ ++= List(prev)\n                case 29 => even ++= List(prev)\n           \
    \     case 30 => even ++= List(prev)\n                case 31 => even ++= List(prev)\n\
    \                case 32 => even ++= List(prev)\n                case 33 => even\
    \ ++= List(prev)\n                case 34 => even ++= List(prev)\n           \
    \     case 35 => even ++= List(prev)\n                case 36 => even ++= List(prev)\n\
    \                case 37 => even ++= List(prev)\n                case 38 => even\
    \ ++= List(prev)\n                case 39 => even ++= List(prev)\n           \
    \     case 40 => even ++= List(prev)\n                case 41 => ", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val prev = new mutable.ListBuffer[Long]()\n\
    \        val next = new mutable.ListBuffer[Long]()\n        val temp = new mutable.ListBuffer[Long]()\n\
    \        val temp2 = new mutable.ListBuffer[Long]()\n        val temp3 = new mutable.ListBuffer[Long]()\n\
    \        val temp4 = new mutable.ListBuffer[Long]()\n        val temp5 = new mutable.ListBuffer[Long]()\n\
    \        val temp6 = new mutable.ListBuffer[Long]()\n        val temp7 = new mutable.ListBuffer[Long]()\n\
    \        val temp8 = new mutable.ListBuffer[Long]()\n        val temp9 = new mutable.ListBuffer[Long]()\n\
    \        val temp10 = new mutable.ListBuffer[Long]()\n        val temp11 = new\
    \ mutable.ListBuffer[Long]()\n        val temp12 = new mutable.ListBuffer[Long]()\n\
    \        val temp13 = new mutable.ListBuffer[Long]()\n        val temp14 = new\
    \ mutable.ListBuffer[Long]()\n        val temp15 = new mutable.ListBuffer[Long]()\n\
    \        val temp16 = new mutable.ListBuffer[Long]()\n        val temp17 = new\
    \ mutable.ListBuffer[Long]()\n        val temp18 = new mutable.ListBuffer[Long]()\n\
    \        val temp19 = new mutable.ListBuffer[Long]()\n        val temp20 = new\
    \ mutable.ListBuffer[Long]()\n        val temp21 = new mutable.ListBuffer[Long]()\n\
    \        val temp22 = new mutable.ListBuffer[Long]()\n        val temp23 = new\
    \ mutable.ListBuffer[Long]()\n        val temp24 = new mutable.ListBuffer[Long]()\n\
    \        val temp25 = new mutable.ListBuffer[Long]()\n        val temp26 = new\
    \ mutable.ListBuffer[Long]()\n        val temp27 = new mutable.ListBuffer[Long]()\n\
    \        val temp28 = new mutable.ListBuffer[Long]()\n        val temp29 = new\
    \ mutable.ListBuffer[Long]()\n        val temp30 = new mutable.ListBuffer[Long]()\n\
    \        val temp31 = new mutable.ListBuffer[Long]()\n        val temp32 = new\
    \ mutable.ListBuffer[Long]()\n        val temp33 = new mutable.ListBuffer[Long]()\n\
    \        val temp34 = new mutable.ListBuffer[", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val collatzSeq\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLen = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLen\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n    \
    \    val collatzSeqLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n     \
    \   val collatzSeqLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n   \
    \     val collatzSeqLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Long",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        val current = 1\n\
    \        val next = 1\n        while(current <= n) {\n            val next = if\
    \ (current % 2 == 0) current / 2 else 3 * current + 1\n            odd.append(current)\n\
    \            even.append(next)\n            current = next\n        }\n      \
    \  odd.toList ++ even.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val prev = new mutable.ListBuffer[Long]()\n        val next = new mutable.ListBuffer[Long]()\n\
    \        val temp = new mutable.ListBuffer[Long]()\n        val temp2 = new mutable.ListBuffer[Long]()\n\
    \        val temp3 = new mutable.ListBuffer[Long]()\n        val temp4 = new mutable.ListBuffer[Long]()\n\
    \        val temp5 = new mutable.ListBuffer[Long]()\n        val temp6 = new mutable.ListBuffer[Long]()\n\
    \        val temp7 = new mutable.ListBuffer[Long]()\n        val temp8 = new mutable.ListBuffer[Long]()\n\
    \        val temp9 = new mutable.ListBuffer[Long]()\n        val temp10 = new\
    \ mutable.ListBuffer[Long]()\n        val temp11 = new mutable.ListBuffer[Long]()\n\
    \        val temp12 = new mutable.ListBuffer[Long]()\n        val temp13 = new\
    \ mutable.ListBuffer[Long]()\n        val temp14 = new mutable.ListBuffer[Long]()\n\
    \        val temp15 = new mutable.ListBuffer[Long]()\n        val temp16 = new\
    \ mutable.ListBuffer[Long]()\n        val temp17 = new mutable.ListBuffer[Long]()\n\
    \        val temp18 = new mutable.ListBuffer[Long]()\n        val temp19 = new\
    \ mutable.ListBuffer[Long]()\n        val temp20 = new mutable.ListBuffer[Long]()\n\
    \        val temp21 = new mutable.ListBuffer[Long]()\n        val temp22 = new\
    \ mutable.ListBuffer[Long]()\n        val temp23 = new mutable.ListBuffer[Long]()\n\
    \        val temp24 = new mutable.ListBuffer[Long]()\n        val temp25 = new\
    \ mutable.ListBuffer[Long]()\n        val temp26 = new mutable.ListBuffer[Long]()\n\
    \        val temp27 = new mutable.ListBuffer[Long]()\n        val temp28 = new\
    \ mutable.ListBuffer[Long]()\n        val temp29 = new mutable.ListBuffer[Long]()\n\
    \        val temp30 = new mutable.ListBuffer[Long]()\n        val temp31 = new\
    \ mutable.ListBuffer[Long]()\n        val temp32 = new mutable.ListBuffer[Long]()\n\
    \        val temp33 = new mutable.ListBuffer[Long]()\n        val temp34 = new\
    \ mutable.ListBuffer[", "        var odd_collatz : List[Long] = List()\n     \
    \   var collatz : List[Long] = List()\n        var i : Long = 1\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                odd_collatz ::= i\n\
    \            } else {\n                collatz ::= i * 3 + 1\n            }\n\
    \            i += 1\n        }\n        odd_collatz.sortWith(_ < _)\n        collatz.sortWith(_\
    \ < _)\n        odd_collatz.reverse\n        collatz.reverse\n        odd_collatz",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        val temp = 0\n        val temp2 = 0\n        val temp3 = 0\n        val\
    \ temp4 = 0\n        val temp5 = 0\n        val temp6 = 0\n        val temp7 =\
    \ 0\n        val temp8 = 0\n        val temp9 = 0\n        val temp10 = 0\n  \
    \      val temp11 = 0\n        val temp12 = 0\n        val temp13 = 0\n      \
    \  val temp14 = 0\n        val temp15 = 0\n        val temp16 = 0\n        val\
    \ temp17 = 0\n        val temp18 = 0\n        val temp19 = 0\n        val temp20\
    \ = 0\n        val temp21 = 0\n        val temp22 = 0\n        val temp23 = 0\n\
    \        val temp24 = 0\n        val temp25 = 0\n        val temp26 = 0\n    \
    \    val temp27 = 0\n        val temp28 = 0\n        val temp29 = 0\n        val\
    \ temp30 = 0\n        val temp31 = 0\n        val temp32 = 0\n        val temp33\
    \ = 0\n        val temp34 = 0\n        val temp35 = 0\n        val temp36 = 0\n\
    \        val temp37 = 0\n        val temp38 = 0\n        val temp39 = 0\n    \
    \    val temp40 = 0\n        val temp41 = 0\n        val temp42 = 0\n        val\
    \ temp43 = 0\n        val temp44 = 0\n        val temp45 = 0\n        val temp46\
    \ = 0\n        val temp47 = 0\n        val temp48 = 0\n        val temp49 = 0\n\
    \        val temp50 = 0\n        val temp51 = 0\n        val temp52 = 0\n    \
    \    val temp53 = 0\n        val temp54 = 0\n        val temp55 = 0\n        val\
    \ temp56 = 0\n        val temp57 = 0\n        val temp58 = 0\n        val temp59\
    \ = 0\n        val temp60 = 0\n        val temp61 = 0\n        val temp62 = 0\n\
    \        val temp63 = 0\n        val temp64 = 0\n        val temp65 = 0\n    \
    \    val temp66 = 0\n        val temp67 = 0\n        val temp68 = 0\n        val\
    \ temp69 = 0\n        val temp70 = 0\n        val temp71 = 0\n        val temp72\
    \ = 0\n        val temp73 = 0\n        val temp74 = 0\n        val temp75 = 0\n\
    \        val temp76 = 0\n        val temp77 = 0", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        val current = 1\n        val prev = 1\n        while (current <= n) {\n\
    \            if (prev % 2 == 0) {\n                even += prev\n            \
    \    prev *= 2\n            } else {\n                odd += prev\n          \
    \      prev /= 2\n            }\n            collatz += prev\n            current\
    \ += 1\n        }\n        odd.toList ++ even.toList ++ collatz.toList", "   \
    \     val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val list = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 1\n        val next = 1\n       \
    \ val evenNext = 1\n        val oddNext = 1\n        val evenPrev = 1\n      \
    \  val oddPrev = 1\n        val evenNextPrev = 1\n        val oddNextPrev = 1\n\
    \        val evenPrevPrev = 1\n        val oddPrevPrev = 1\n        val evenNextNext\
    \ = 1\n        val oddNextNext = 1\n        val evenNextNextPrev = 1\n       \
    \ val oddNextNextPrev = 1\n        val evenNextNextNext = 1\n        val oddNextNextNext\
    \ = 1\n        val evenNextNextNextPrev = 1\n        val oddNextNextNextPrev =\
    \ 1\n        val evenNextNextNextNext = 1\n        val oddNextNextNextNext = 1\n\
    \        val evenNextNextNextNextPrev = 1\n        val oddNextNextNextNextPrev\
    \ = 1\n        val evenNextNextNextNextNext = 1\n        val oddNextNextNextNextNext\
    \ = 1\n        val evenNextNextNextNextNextPrev = 1\n        val oddNextNextNextNextNextPrev\
    \ = 1\n        val evenNextNextNextNextNextNext = 1\n        val oddNextNextNextNextNextNext\
    \ = 1\n        val evenNextNextNextNextNextNextPrev = 1\n        val oddNextNextNextNextNextNextPrev\
    \ = 1\n        val evenNextNextNextNextNextNextNext = 1\n        val oddNextNextNextNextNextNextNext\
    \ = 1\n        val evenNextNextNextNextNextNextNextPrev = 1\n        val oddNextNextNextNextNextNextNextPrev\
    \ = 1\n        val evenNextNextNextNextNextNextNextNext = 1\n        val oddNextNextNextNextNextNextNextNext\
    \ = 1\n        val evenNextNextNextNextNextNextNextNextPrev = 1\n        val oddNextNextNextNextNextNextNextNextPrev\
    \ = 1\n        val evenNextNextNextNextNextNextNextNextNext = 1\n        val oddNextNextNextNextNextNextNextNextPrev\
    \ = 1\n        val evenNextNextNextNextNextNextNextNextNextPrev = 1\n        val\
    \ oddNextNextNextNextNextNextNextNextNextPrev = 1\n        val evenNextNextNextNextNextNextNextNextNextPrev\
    \ = 1\n        val oddNextNextNextNextNextNextNextNextNextPrev = 1\n        val\
    \ evenNextNextNextNextNextNext", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        val current = 1\n        while (current <= n) {\n            if (current\
    \ % 2 == 0) {\n                even += current\n            } else {\n       \
    \         odd += current\n            }\n            current += 1\n        }\n\
    \        odd.toList ++ even.toList", "        var collatz : List[Long] = List()\n\
    \        var prev : Long = 1\n        var i : Long = 1\n        while (i <= n)\
    \ {\n            if (prev % 2 == 0) {\n                collatz ::= prev\n    \
    \            prev = prev / 2\n            } else {\n                prev = prev\
    \ * 3 + 1 \n            }\n            i += 1\n        }\n        collatz ::=\
    \ prev\n        collatz.sort", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        var current = 0\n        var next = 1\n        while (current < n) {\n\
    \            val nextTerm = next * 2\n            if (nextTerm % 2 == 0) {\n \
    \               odd.add(nextTerm)\n                next += 1\n            } else\
    \ {\n                next *= 3 + 1\n            }\n            current += 1\n\
    \        }\n        odd.toList", "        var odd_nums = List[Long]()\n      \
    \  var odd_nums_set = mutable.Set[Long]()\n        var odd_nums_set = mutable.Set[Long]()\n\
    \        var odd_nums_set = mutable.Set[Long]()\n        var odd_nums_set = mutable.Set[Long]()\n\
    \        var odd_nums_set = mutable.Set[Long]()\n        var odd_nums_set = mutable.Set[Long]()\n\
    \        var odd_nums_set = mutable.Set[Long]()\n        var odd_nums_set = mutable.Set[Long]()\n\
    \        var odd_nums_set = mutable.Set[Long]()\n        var odd_nums_set = mutable.Set[Long]()\n\
    \        var odd_nums_set = mutable.Set[Long]()\n        var odd_nums_set = mutable.Set[Long]()\n\
    \        var odd_nums_set = mutable.Set[Long]()\n        var odd_nums_set = mutable.Set[Long]()\n\
    \        var odd_nums_set = mutable.Set[Long]()\n        var odd_nums_set = mutable.Set[Long]()\n\
    \        var odd_nums_set = mutable.Set[Long]()\n        var odd_nums_set = mutable.Set[Long]()\n\
    \        var odd_nums_set = mutable.Set[Long]()\n        var odd_nums_set = mutable.Set[Long]()\n\
    \        var odd_nums_set = mutable.Set[Long]()\n        var odd_nums_set = mutable.Set[Long]()\n\
    \        var odd_nums_set = mutable.Set[Long]()\n        var odd_nums_set = mutable.Set[Long]()\n\
    \        var odd_nums_set = mutable.Set[Long]()\n        var odd_nums_set = mutable.Set[Long]()\n\
    \        var odd_nums_set = mutable.Set[Long]()\n        var odd_nums_set = mutable.Set[Long]()\n\
    \        var odd_nums_set = mutable.Set[Long]()\n        var odd_nums_set = mutable.Set[Long]()\n\
    \        var odd_nums_set = mutable.Set[Long]()\n        var odd_nums_set = mutable.Set[Long]()\n\
    \        var odd_nums_set = mutable.Set[Long]()\n        var odd_nums_set = mutable.Set[Long]()\n\
    \        var odd_nums_set = mutable.Set[Long]()\n        var odd_nums_set = mutable.Set[Long]",
  "        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val result = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq = mutable.ListBuffer[Long]()\n        val collatzSeq2\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq3 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq4 = mutable.ListBuffer[Long]()\n        val collatzSeq5\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq6 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq7 = mutable.ListBuffer[Long]()\n        val collatzSeq8\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq9 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq10 = mutable.ListBuffer[Long]()\n        val collatzSeq11\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq12 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq13 = mutable.ListBuffer[Long]()\n        val collatzSeq14\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq15 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq16 = mutable.ListBuffer[Long]()\n        val collatzSeq17\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq18 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq19 = mutable.ListBuffer[Long]()\n        val collatzSeq20\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq21 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq22 = mutable.ListBuffer[Long]()\n        val collatzSeq23\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq24 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq25 = mutable.ListBuffer[Long]()\n        val collatzSeq26\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq27 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq28 = mutable.ListBuffer[", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq = mutable.ListBuffer[Long]()\n        val evenSeq = mutable.ListBuffer[Long]()\n\
    \        val oddSeq = mutable.ListBuffer[Long]()\n        val evenSeq2 = mutable.ListBuffer[Long]()\n\
    \        val oddSeq2 = mutable.ListBuffer[Long]()\n        val evenSeq3 = mutable.ListBuffer[Long]()\n\
    \        val oddSeq3 = mutable.ListBuffer[Long]()\n        val evenSeq4 = mutable.ListBuffer[Long]()\n\
    \        val oddSeq4 = mutable.ListBuffer[Long]()\n        val evenSeq5 = mutable.ListBuffer[Long]()\n\
    \        val oddSeq5 = mutable.ListBuffer[Long]()\n        val evenSeq6 = mutable.ListBuffer[Long]()\n\
    \        val oddSeq6 = mutable.ListBuffer[Long]()\n        val evenSeq7 = mutable.ListBuffer[Long]()\n\
    \        val oddSeq7 = mutable.ListBuffer[Long]()\n        val evenSeq8 = mutable.ListBuffer[Long]()\n\
    \        val oddSeq8 = mutable.ListBuffer[Long]()\n        val evenSeq9 = mutable.ListBuffer[Long]()\n\
    \        val oddSeq9 = mutable.ListBuffer[Long]()\n        val evenSeq10 = mutable.ListBuffer[Long]()\n\
    \        val oddSeq10 = mutable.ListBuffer[Long]()\n        val evenSeq11 = mutable.ListBuffer[Long]()\n\
    \        val oddSeq11 = mutable.ListBuffer[Long]()\n        val evenSeq12 = mutable.ListBuffer[Long]()\n\
    \        val oddSeq12 = mutable.ListBuffer[Long]()\n        val evenSeq13 = mutable.ListBuffer[Long]()\n\
    \        val oddSeq13 = mutable.ListBuffer[Long]()\n        val evenSeq14 = mutable.ListBuffer[Long]()\n\
    \        val oddSeq14 = mutable.ListBuffer[Long]()\n        val evenSeq15 = mutable.ListBuffer[Long]()\n\
    \        val oddSeq15 = mutable.ListBuffer[Long]()\n        val evenSeq16 = mutable.ListBuffer[Long]()\n\
    \        val oddSeq16 = mutable.ListBuffer[Long]()\n", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        val temp = 0\n \
    \       val temp2 = 0\n        val temp3 = 0\n        val temp4 = 0\n        val\
    \ temp5 = 0\n        val temp6 = 0\n        val temp7 = 0\n        val temp8 =\
    \ 0\n        val temp9 = 0\n        val temp10 = 0\n        val temp11 = 0\n \
    \       val temp12 = 0\n        val temp13 = 0\n        val temp14 = 0\n     \
    \   val temp15 = 0\n        val temp16 = 0\n        val temp17 = 0\n        val\
    \ temp18 = 0\n        val temp19 = 0\n        val temp20 = 0\n        val temp21\
    \ = 0\n        val temp22 = 0\n        val temp23 = 0\n        val temp24 = 0\n\
    \        val temp25 = 0\n        val temp26 = 0\n        val temp27 = 0\n    \
    \    val temp28 = 0\n        val temp29 = 0\n        val temp30 = 0\n        val\
    \ temp31 = 0\n        val temp32 = 0\n        val temp33 = 0\n        val temp34\
    \ = 0\n        val temp35 = 0\n        val temp36 = 0\n        val temp37 = 0\n\
    \        val temp38 = 0\n        val temp39 = 0\n        val temp40 = 0\n    \
    \    val temp41 = 0\n        val temp42 = 0\n        val temp43 = 0\n        val\
    \ temp44 = 0\n        val temp45 = 0\n        val temp46 = 0\n        val temp47\
    \ = 0\n        val temp48 = 0\n        val temp49 = 0\n        val temp50 = 0\n\
    \        val temp51 = 0\n        val temp52 = 0\n        val temp53 = 0\n    \
    \    val temp54 = 0\n        val temp55 = 0\n        val temp56 = 0\n        val\
    \ temp57 = 0\n        val temp58 = 0\n        val temp59 = 0\n        val temp60\
    \ = 0\n        val temp61 = 0\n        val temp62 = 0\n        val temp63 = 0\n\
    \        val temp64 = 0\n        val temp65 = 0\n        val temp66 = 0\n    \
    \    val temp67 = 0\n        val temp68 = 0\n        val temp69 = 0\n        val\
    \ temp70 = 0\n        val temp71 = 0\n        val temp72 = 0\n        val temp73\
    \ = 0\n        val temp74 = 0\n        val temp75 = 0\n        val temp76 = 0\n\
    \        val temp77 = 0", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val next = mutable.ListBuffer.empty[Long]\n        val prev = (n-1l).toLong\n\
    \        val evenNext = (prev.toLong div 2).toLong\n        val oddNext = (prev.toLong\
    \ div 3).toLong\n        val evenPrev = (prev.toLong div 2).toLong\n        val\
    \ oddPrev = (prev.toLong div 3).toLong\n        val evenNextPrev = (prev.toLong\
    \ div 4).toLong\n        val oddNextPrev = (prev.toLong div 5).toLong\n      \
    \  val evenNextNext = (prev.toLong div 6).toLong\n        val oddNextNext = (prev.toLong\
    \ div 7).toLong\n        val evenNextNextPrev = (prev.toLong div 8).toLong\n \
    \       val oddNextNextPrev = (prev.toLong div 9).toLong\n        val evenNextNextNext\
    \ = (prev.toLong div 10).toLong\n        val oddNextNextNext = (prev.toLong div\
    \ 11).toLong\n        val evenNextNextNextPrev = (prev.toLong div 12).toLong\n\
    \        val oddNextNextNextPrev = (prev.toLong div 13).toLong\n        val evenNextNextNextNext\
    \ = (prev.toLong div 14).toLong\n        val oddNextNextNextNextPrev = (prev.toLong\
    \ div 15).toLong\n        val evenNextNextNextNextNext = (prev.toLong div 16).toLong\n\
    \        val oddNextNextNextNextNextPrev = (prev.toLong div 17).toLong\n     \
    \   val evenNextNextNextNextNextNext = (prev.toLong div 18).toLong\n        val\
    \ oddNextNextNextNextNextNextPrev = (prev.toLong div 19).toLong\n        val evenNextNextNextNextNextNextNext\
    \ = (prev.toLong div 20).toLong\n        val oddNextNextNextNextNextNextNextPrev\
    \ = (prev.toLong div 21).toLong\n        val evenNextNextNextNextNextNextNextNext\
    \ = (prev.toLong div 22).toLong\n        val oddNextNextNextNextNextNextNextNextPrev\
    \ = (prev.toLong div 23).toLong\n        val evenNextNextNextNextNextNextNextNextNext\
    \ = (prev.toLong div 24).toLong\n        val oddNextNextNextNextNextNextNextNextNextPrev\
    \ = (prev.toLong div ", "        val odd = mutable.ListBuffer[Long]()\n      \
    \  val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        var prev = 0\n        var next = 1\n        while (n != 1) {\n      \
    \      if (n % 2 == 0) {\n                even += prev\n                next *=\
    \ 2\n            } else {\n                odd += prev\n                next *=\
    \ 3 + 1\n            }\n            prev = next\n            n /= next\n     \
    \       collatz += next\n        }\n        odd.toList ++ even.toList ++ collatz.toList",
  "        var odd_list : List[Long] = Nil\n        var collatz : List[Long] = Nil\n\
    \        var i : Long = 1\n        while (i <= n) {\n            if (n % 2 ==\
    \ 0) {\n                odd_list ::= i\n                collatz ::= collatz :::\
    \ List(i / 2)\n            } else {\n                odd_list ::= (3 * i + 1)\n\
    \                collatz ::= collatz ::: List((3 * i + 1) / 2)\n            }\n\
    \            i += 1\n        }\n        odd_list ::= 1\n        collatz ::= collatz\
    \ ::: List(1l)\n        odd_list ::= 1\n        collatz ::= collatz ::: List(1l)\n\
    \        odd_list ::= 1\n        collatz ::= collatz ::: List(1l)\n        odd_list\
    \ ::= 1\n        collatz ::= collatz ::: List(1l)\n        odd_list ::= 1\n  \
    \      collatz ::= collatz ::: List(1l)\n        odd_list ::= 1\n        collatz\
    \ ::= collatz ::: List(1l)\n        odd_list ::= 1\n        collatz ::= collatz\
    \ ::: List(1l)\n        odd_list ::= 1\n        collatz ::= collatz ::: List(1l)\n\
    \        odd_list ::= 1\n        collatz ::= collatz ::: List(1l)\n        odd_list\
    \ ::= 1\n        collatz ::= collatz ::: List(1l)\n        odd_list ::= 1\n  \
    \      collatz ::= collatz ::: List(1l)\n        odd_list ::= 1\n        collatz\
    \ ::= collatz ::: List(1l)\n        odd_list ::= 1\n        collatz ::= collatz\
    \ ::: List(1l)\n        odd_list ::= 1\n        collatz ::= collatz ::: List(1l)\n\
    \        odd_list ::= 1\n        collatz ::= collatz ::: List(1l)\n        odd_list\
    \ ::= 1\n        collatz ::= collatz ::: List(1l)\n        odd_list ::= 1\n  \
    \      collatz ::= collatz ::: List(1l)\n        odd_list ::= 1\n        collatz\
    \ ::= collatz ::: List(1l)\n        odd_list ::= 1\n        collatz ::= collatz\
    \ ::", "        val result = new mutable.ListBuffer[Long]()\n        val prev\
    \ = new mutable.ListBuffer[Long]()\n        val next = new mutable.ListBuffer[Long]()\n\
    \        val count = new mutable.ListBuffer[Long]()\n        val temp = new mutable.ListBuffer[Long]()\n\
    \        val temp2 = new mutable.ListBuffer[Long]()\n        val temp3 = new mutable.ListBuffer[Long]()\n\
    \        val temp4 = new mutable.ListBuffer[Long]()\n        val temp5 = new mutable.ListBuffer[Long]()\n\
    \        val temp6 = new mutable.ListBuffer[Long]()\n        val temp7 = new mutable.ListBuffer[Long]()\n\
    \        val temp8 = new mutable.ListBuffer[Long]()\n        val temp9 = new mutable.ListBuffer[Long]()\n\
    \        val temp10 = new mutable.ListBuffer[Long]()\n        val temp11 = new\
    \ mutable.ListBuffer[Long]()\n        val temp12 = new mutable.ListBuffer[Long]()\n\
    \        val temp13 = new mutable.ListBuffer[Long]()\n        val temp14 = new\
    \ mutable.ListBuffer[Long]()\n        val temp15 = new mutable.ListBuffer[Long]()\n\
    \        val temp16 = new mutable.ListBuffer[Long]()\n        val temp17 = new\
    \ mutable.ListBuffer[Long]()\n        val temp18 = new mutable.ListBuffer[Long]()\n\
    \        val temp19 = new mutable.ListBuffer[Long]()\n        val temp20 = new\
    \ mutable.ListBuffer[Long]()\n        val temp21 = new mutable.ListBuffer[Long]()\n\
    \        val temp22 = new mutable.ListBuffer[Long]()\n        val temp23 = new\
    \ mutable.ListBuffer[Long]()\n        val temp24 = new mutable.ListBuffer[Long]()\n\
    \        val temp25 = new mutable.ListBuffer[Long]()\n        val temp26 = new\
    \ mutable.ListBuffer[Long]()\n        val temp27 = new mutable.ListBuffer[Long]()\n\
    \        val temp28 = new mutable.ListBuffer[Long]()\n        val temp29 = new\
    \ mutable.ListBuffer[Long]()\n        val temp30 = new mutable.ListBuffer[Long]()\n\
    \        val temp31 = new mutable.ListBuffer[Long]()\n        val temp32 = new\
    \ mutable.ListBuffer[Long]()\n        val temp33 = new mutable.ListBuffer[Long",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val prev = 1\n        val next = 1\n        while(n > 1) {\n        \
    \    val nextTerm = if (n % 2 == 0) prev * 2 else prev * 3 + 1\n            n\
    \ -= 1\n            if (nextTerm == 1) {\n                even += prev\n     \
    \       } else {\n                odd += prev\n                collatz += nextTerm\n\
    \            }\n            prev = nextTerm\n        }\n        odd.toList", " \
    \       val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val temp = mutable.ListBuffer.empty[Long]\n\
    \        val temp2 = mutable.ListBuffer.empty[Long]\n        val temp3 = mutable.ListBuffer.empty[Long]\n\
    \        val temp4 = mutable.ListBuffer.empty[Long]\n        val temp5 = mutable.ListBuffer.empty[Long]\n\
    \        val temp6 = mutable.ListBuffer.empty[Long]\n        val temp7 = mutable.ListBuffer.empty[Long]\n\
    \        val temp8 = mutable.ListBuffer.empty[Long]\n        val temp9 = mutable.ListBuffer.empty[Long]\n\
    \        val temp10 = mutable.ListBuffer.empty[Long]\n        val temp11 = mutable.ListBuffer.empty[Long]\n\
    \        val temp12 = mutable.ListBuffer.empty[Long]\n        val temp13 = mutable.ListBuffer.empty[Long]\n\
    \        val temp14 = mutable.ListBuffer.empty[Long]\n        val temp15 = mutable.ListBuffer.empty[Long]\n\
    \        val temp16 = mutable.ListBuffer.empty[Long]\n        val temp17 = mutable.ListBuffer.empty[Long]\n\
    \        val temp18 = mutable.ListBuffer.empty[Long]\n        val temp19 = mutable.ListBuffer.empty[Long]\n\
    \        val temp20 = mutable.ListBuffer.empty[Long]\n        val temp21 = mutable.ListBuffer.empty[Long]\n\
    \        val temp22 = mutable.ListBuffer.empty[Long]\n        val temp23 = mutable.ListBuffer.empty[Long]\n\
    \        val temp24 = mutable.ListBuffer.empty[Long]\n        val temp25 = mutable.ListBuffer.empty[Long]\n\
    \        val temp26 = mutable.ListBuffer.empty[Long]\n        val temp27 = mutable.ListBuffer.empty[Long]\n\
    \        val temp28 = mutable.ListBuffer.empty[Long]\n        val temp29 = mutable.ListBuffer.empty[Long]\n\
    \        val temp30 = mutable.ListBuffer.empty[Long]\n        val temp31 = mutable.ListBuffer.empty[Long]\n\
    \        val temp32 = mutable.ListBuffer.empty[Long]\n        val temp33 = mutable.ListBuffer.empty[Long]\n\
    \        val temp34 = mutable.ListBuffer.empty[Long]\n        val temp35 = mutable.ListBuffer."]
stop_tokens:
- "\n    }\n"
