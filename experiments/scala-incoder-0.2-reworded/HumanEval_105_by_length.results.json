{
  "language": "scala",
  "name": "HumanEval_105_by_length",
  "results": [
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortBy(_ - 1).reverse\n        arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).map { x =>\n            val digit = x.toString.toInt\n            val name = if (digit < 10) \"One\" else if (digit < 20) \"Two\" else if (digit < 30) \"Three\" else if (digit < 40) \"Four\" else if (digit < 50) \"Five\" else if (digit < 60) \"Six\" else if (digit < 70) \"Seven\" else if (digit < 80) \"Eight\" else \"Nine\"\n            name + digit.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpv1vuljih.scala:17:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = arr.filter(_ >= \u001b[31m1l\u001b[0m.toLong && _ <= \u001b[31m9l\u001b[0m.toLong).sortBy(_ - \u001b[31m1\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpv1vuljih.scala:18:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        arr.filter(_ >= \u001b[31m1l\u001b[0m.toLong && _ <= \u001b[31m9l\u001b[0m.toLong).map { \u001b[36mx\u001b[0m =>\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Wrong number of parameters, expected: 1\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803829
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong).map(x => One(x))\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong).map(x => Ten(x))\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong).map(x => Hundred(x))\n        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong).map(x => Thousand(x))\n        val hundredsAndOnes = arr.filter(x => x >= 10000l.toLong && x <= 99999l.toLong).map(x => HundredAndOne(x))\n        val hundredsAndTens = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong).map(x => HundredAndTen(x))\n        val hundredsAndHundreds = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong).map(x => HundredAndHundred(x))\n        val hundredsAndThousands = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong).map(x => HundredAndThousand(x))\n        val hundredsAndMillions = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong).map(x => HundredAndMillion(x))\n        val hundredsAndBillions = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong).map(x => HundredAndBillion(x))\n        val hundredsAndTrillions = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong).map(x => HundredAndTrillion(x))\n        val hundredsAndQuadrillions = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong).map(x => HundredAndQuadrillion(x))\n        val hundredsAndQuintillions = arr.filter(x => x >= 100000000000000l.toLong && x <= 9999999999999999999l.toLong).map(x => HundredAndQuintillion(x))\n        val hundredsAndSextillions = arr.filter(x => x >= 10000000000000000l.toLong && x <= 99999999999999999999l.toLong).map(x => HundredAndSextillion(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpj_gy1jcr.scala:29:91 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndQuintillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => HundredAndQuintillion(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj_gy1jcr.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndSextillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => HundredAndSextillion(x))\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj_gy1jcr.scala:30:92 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndSextillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => HundredAndSextillion(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj_gy1jcr.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj_gy1jcr.scala:17:78 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mones\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1l\u001b[0m.toLong && x <= \u001b[31m9l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => One(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      ",
      "stdout": "",
      "timestamp": 1659803834
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val newList = list.sortWith((x, y) => x < y).reverse\n        val newList2 = newList.map(x => if (x < 10) \"One\" else if (x < 20) \"Two\" else if (x < 30) \"Three\" else if (x < 40) \"Four\" else if (x < 50) \"Five\" else if (x < 60) \"Six\" else if (x < 70) \"Seven\" else if (x < 80) \"Eight\" else \"Nine\")\n        newList2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxly5de4j.scala:24)\n\tat Problem.main(tmpxly5de4j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659803834
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ >= 10).toList\n        val tensReversed = tens.reverse\n        val tensReversedString = tensReversed.mkString(\"\")\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpavm3gwfq.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringLength\u001b[0m = tensReversedString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpavm3gwfq.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringLength\u001b[0m = tensReversedString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpavm3gwfq.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringLength\u001b[0m = tensReversedString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpavm3gwfq.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringLength\u001b[0m = tensReversedString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m--",
      "stdout": "",
      "timestamp": 1659803833
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val ones = list.filter(x => x < 9).toList\n        val tens = list.filter(x => x >= 9 && x < 99).toList\n        val hundreds = list.filter(x => x >= 99).toList\n        val tensAndHundreds = tens ++ hundreds\n        val tensAndHundredsAndOnes = tensAndHundreds ++ ones\n        val tensAndHundredsAndOnesAndTensAndHundreds = tensAndHundredsAndOnes ++ tensAndHundreds\n        val tensAndHundredsAndOnesAndTensAndHundredsAndOnes = tensAndHundredsAndOnesAndTensAndHundreds ++ tensAndHundredsAndOnes\n        val tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds = tensAndHundredsAndOnesAndTensAndHundredsAndOnes ++ tensAndHundredsAndOnesAndTensAndHundreds\n        val tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes = tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds ++ tensAndHundredsAndOnesAndTensAndHundredsAndOnes\n        val tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds = tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes ++ tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds\n        val tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes = tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds\n        val tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes = tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes\n        val tensAndH\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx7tuz19k.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx7tuz19k.scala:32:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803832
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val one = list.filter(_ <= 9).toList\n        val two = list.filter(_ <= 99).toList\n        val three = list.filter(_ <= 999).toList\n        val four = list.filter(_ <= 9999).toList\n        val five = list.filter(_ <= 99999).toList\n        val six = list.filter(_ <= 999999).toList\n        val seven = list.filter(_ <= 9999999).toList\n        val eight = list.filter(_ <= 999999999).toList\n        val nine = list.filter(_ <= 99999999999).toList\n        val ten = list.filter(_ <= 9999999998).toList\n        val eleven = list.filter(_ <= 999999999997).toList\n        val twelve = list.filter(_ <= 999999999996).toList\n        val thirteen = list.filter(_ <= 999999999995).toList\n        val fourteen = list.filter(_ <= 999999999994).toList\n        val fifteen = list.filter(_ <= 999999999993).toList\n        val sixteen = list.filter(_ <= 999999999992).toList\n        val seventeen = list.filter(_ <= 999999999991).toList\n        val eighteen = list.filter(_ <= 999999999990).toList\n        val nineteen = list.filter(_ <= 99999999999).toList\n        val twenty = list.filter(_ <= 99999999999).toList\n        val twentyone = list.filter(_ <= 99999999999).toList\n        val twentytwo = list.filter(_ <= 99999999999).toList\n        val twentythree = list.filter(_ <= 99999999999).toList\n        val twentyfour = list.filter(_ <= 99999999999).toList\n        val twentyfive = list.filter(_ <= 99999999999).toList\n        val twentysix = list.filter(_ <= 99999999999).toList\n        val twentyseven = list.filter(_ <= 99999999999).toList\n        val twentyeight = list.filter(_ <= 99999999999).toList\n        val twentynine = list.filter(_ <= 99999999999).toList\n        val thirty = list.filter(_ <= 99999999999).toList\n        val thirtyone = list.filter(_ <= 99999999999).toList\n        val thirtytwo = list.filter(_ <= 99999999999).toList\n        val thirtythree\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_p02uhaf.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_p02uhaf.scala:27:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnine\u001b[0m = list.filter(_ <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_p02uhaf.scala:28:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mten\u001b[0m = list.filter(_ <= \u001b[31m9999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_p02uhaf.scala:29:38 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36meleven\u001b[0m = list.filter(_ <= \u001b[31m999999999997\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_p02uhaf.scala:30:38 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtwelve\u001b[0m = list.filter(_ <= \u001b[31m999999999996\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_p02uhaf.scala:31:40 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthirteen\u001b[0m = list.filter(_ <= \u001b[31m999999999995\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_p02uhaf.scala:32:40 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfourteen\u001b[0m = list.filter(_ <= \u001b[31m99",
      "stdout": "",
      "timestamp": 1659803833
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val ones = list.filter(x => x < 10).toList\n        val tens = list.filter(x => x >= 10 && x < 100).toList\n        val hundreds = list.filter(x => x >= 100).toList\n        val hundredsAndOnes = list.filter(x => x >= 100 && x < 1000).toList\n        val hundredsAndOnesAndTens = list.filter(x => x >= 1000 && x < 10000).toList\n        val hundredsAndOnesAndTensAndOnes = list.filter(x => x >= 10000).toList\n        val hundredsAndOnesAndTensAndOnesAndTens = list.filter(x => x >= 10000 && x < 100000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnes = list.filter(x => x >= 100000 && x < 1000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndTens = list.filter(x => x >= 1000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnes = list.filter(x => x >= 1000000 && x < 10000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndTens = list.filter(x => x >= 10000000 && x < 100000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndTens = list.filter(x => x >= 100000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnes = list.filter(x => x >= 100000000 && x < 1000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = list.filter(x => x >= 1000000000 && x < 10000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = list.filter(x => x >= 10000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = list.filter(x => x >= 10000000000 && x < 100000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = list.filter(x => x >= 100000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = list.filter(x => x >= 100000000000 && x < 1000000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOne\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpaouo9s_g.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpaouo9s_g.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\u001b[0m = list.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mhundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpaouo9s_g.scala:32:119 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\u001b[0m = list.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpaouo9s_g.scala:33:101 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes\u001b[0m = list.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                     ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               ",
      "stdout": "",
      "timestamp": 1659803833
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 9).map(x => s\"One\")\n        val twos = arr.filter(x => x < 18).map(x => s\"Two\")\n        val threes = arr.filter(x => x < 27).map(x => s\"Three\")\n        val fours = arr.filter(x => x < 36).map(x => s\"Four\")\n        val fives = arr.filter(x => x < 45).map(x => s\"Five\")\n        val sixes = arr.filter(x => x < 54).map(x => s\"Six\")\n        val sevens = arr.filter(x => x < 63).map(x => s\"Seven\")\n        val eights = arr.filter(x => x < 72).map(x => s\"Eight\")\n        val nines = arr.filter(x => x < 81).map(x => s\"Nine\")\n        val reversed = arr.reverse\n        val result = reversed.map(x => x match {\n            case x if x < 10 => ones(x)\n            case x if x < 20 => twos(x)\n            case x if x < 30 => threes(x)\n            case x if x < 40 => fours(x)\n            case x if x < 50 => fives(x)\n            case x if x < 60 => sixes(x)\n            case x if x < 70 => sevens(x)\n            case x if x < 80 => eights(x)\n            case x if x < 90 => nines(x)\n            case _ => \"\"\n        }).filter(x => x != \"\")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpylarlieq.scala:28:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            \u001b[33mcase\u001b[0m x \u001b[33mif\u001b[0m x < \u001b[31m10\u001b[0m => ones(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (x : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpylarlieq.scala:29:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mcase\u001b[0m x \u001b[33mif\u001b[0m x < \u001b[31m20\u001b[0m => twos(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (x : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpylarlieq.scala:30:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mcase\u001b[0m x \u001b[33mif\u001b[0m x < \u001b[31m30\u001b[0m => threes(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (x : Long)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpylarlieq.scala:31:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            \u001b[33mcase\u001b[0m x \u001b[33mif\u001b[0m x < \u001b[31m40\u001b[0m => fours(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (x : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpylarlieq.scala:32:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mcase\u001b[0m x \u001b[33mif\u001b[0m x < \u001b[31m50\u001b[0m => fives(x)\n\u001b[31",
      "stdout": "",
      "timestamp": 1659803834
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100).toList\n        val tensAndHundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val onesAndTensAndHundreds = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val onesAndTensAndHundredsAndOnes = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val onesAndTensAndHundredsAndOnesAndTens = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundreds = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes = arr.filter(x => x >= 10000000 && x <= 99999999).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTens = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes = arr.filter(x => x >= 10000000000 && x <= 999999999999).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTens = arr.filter(x => x >= 100000000000 && x <= 999999999999999).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds = arr.filter(x => x >= 1000000000000 && x <= 9999999999999999).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes = arr.filter(x => x >= 10000000000000 && x <= 9999999999999999999).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTens = arr.filter(x \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwb_qksjd.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpwb_qksjd.scala:27:127 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpwb_qksjd.scala:28:115 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpwb_qksjd.scala:28:135 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpwb_qksjd.scala:29:122 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTensAndHundredsAndOnesAndTensAndHundredsAndO",
      "stdout": "",
      "timestamp": 1659803832
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList.sortWith(_ < _)\n        val reversed = list.reverse\n        val result = reversed.map(i => if (i <= 9) s\"${i}\" else s\"${i - 10}\").mkString(\",\")\n        if (result.isEmpty) Nil\n        else result.split(\",\").toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbzclaume.scala:24)\n\tat Problem.main(tmpbzclaume.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659803835
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n        val oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000l.toLong && x <= 9999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000l.toLong && x <= 99999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000l.toLong && x <= 999999999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp1txblk04.scala:28:118 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1txblk04.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1txblk04.scala:29:119 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1txblk04.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1txblk04.scala:30:128 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHund",
      "stdout": "",
      "timestamp": 1659803833
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val ones = list.filter(x => x < 9).toList\n        val tens = list.filter(x => x >= 9 && x < 99).toList\n        val hundreds = list.filter(x => x >= 99).toList\n        val tensAndHundreds = tens.head + hundreds.head\n        val tensAndHundredsAndOnes = tensAndHundreds + ones.head\n        val tensAndHundredsAndOnesAndOnes = tensAndHundredsAndOnes + ones.head + ones.head\n        val tensAndHundredsAndOnesAndOnesAndOnes = tensAndHundredsAndOnesAndOnes + ones.head + ones.head + ones.head\n        val tensAndHundredsAndOnesAndOnesAndOnesAndOnes = tensAndHundredsAndOnesAndOnesAndOnes + ones.head + ones.head + ones.head + ones.head + ones.head\n        val tensAndHundredsAndOnesAndOnesAndOnesAndOnesAndOnes = tensAndHundredsAndOnesAndOnesAndOnesAndOnes + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head\n        val tensAndHundredsAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = tensAndHundredsAndOnesAndOnesAndOnesAndOnesAndOnes + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head\n        val tensAndHundredsAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = tensAndHundredsAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpu93h6tnh.scala:29:738 --------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensAndHundredsAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes\u001b[0m = tensAndHundredsAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu93h6tnh.scala:30:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0",
      "stdout": "",
      "timestamp": 1659803832
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val ones = list.filter(x => x < 9).toList\n        val tens = list.filter(x => x >= 9 && x < 99).toList\n        val hundreds = list.filter(x => x >= 99).toList\n        val reversed = ones + tens + hundreds\n        val reversedList = reversed.reverse\n        val reversedListString = reversedList.toString\n        val reversedListStringList = reversedListString.split(\",\")\n        val reversedListStringListReversed = reversedListStringList.reverse\n        val reversedListStringListReversedString = reversedListStringListReversed.toString\n        val reversedListStringListReversedStringList = reversedListStringListReversedString.split(\",\")\n        val reversedListStringListReversedStringListReversed = reversedListStringListReversedStringList.reverse\n        val reversedListStringListReversedStringListReversedString = reversedListStringListReversedStringListReversedList.toString\n        val reversedListStringListReversedStringListReversedStringListReversedStringListReversed = reversedListStringListReversedStringListReversedStringListReversedStringList.reverse\n        val reversedListStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversed = reversedListStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n        val reversedListStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversed = reversedListStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n        val reversedListStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversed = reversedListStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n        val reversedListStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwmyvk_v6.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwmyvk_v6.scala:22:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwmyvk_v6.scala:30:69 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversedListStringListReversedStringListReversedString\u001b[0m = reversedListStringListReversedStringListReversedList.toString\n\u001b[31m\u001b[31m   |\u001b[0m                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         Not found: reversedListStringListReversedStringListReversedList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwmyvk_v6.scala:31:99 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversedListStringListReversedStringListReversedStringListReversedStringListReversed\u001b[0m = reversedListStringListReversedStringListReversedStringListReversedStringList.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNot found: reversedListStringListReversedStringListReversedStringListReversedStringList\n\u001b[31m   |\u001b",
      "stdout": "",
      "timestamp": 1659803834
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val arr = arr.toList\n        val len = arr.length\n        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x => x < 99).toList\n        val hundreds = arr.filter(x => x < 999).toList\n        val thousands = arr.filter(x => x < 9999).toList\n        val tenThousands = arr.filter(x => x < 999999).toList\n        val oneThousands = arr.filter(x => x < 9999999).toList\n        val oneHundreds = arr.filter(x => x < 999999999).toList\n        val oneThousandThousands = arr.filter(x => x < 99999999999).toList\n        val oneHundredThousands = arr.filter(x => x < 999999999999).toList\n        val oneHundredThousandThousands = arr.filter(x => x < 9999999999999).toList\n        val oneHundredThousandThousands = arr.filter(x => x < 99999999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(x => x < 999999999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(x => x < 999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x < 9999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x < 99999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(x => x < 99999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(x => x < 999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(x => x < 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(x => x < 9999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x < 999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp828p691k.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp828p691k.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x < \u001b[31m99999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp828p691k.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x < \u001b[31m999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp828p691k.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x < \u001b[31m99999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Na",
      "stdout": "",
      "timestamp": 1659803831
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val len = arr.length\n        if (len == 0) Nil\n        else if (len == 1) arr(0) match {\n            case 1l => \"One\"\n            case 2l => \"Two\"\n            case 3l => \"Three\"\n            case 4l => \"Four\"\n            case 5l => \"Five\"\n            case 6l => \"Six\"\n            case 7l => \"Seven\"\n            case 8l => \"Eight\"\n            case 9l => \"Nine\"\n            case _ => \"\"\n        }\n        else arr(0) match {\n            case 1l => \"One\"\n            case 2l => \"Two\"\n            case 3l => \"Three\"\n            case 4l => \"Four\"\n            case 5l => \"Five\"\n            case 6l => \"Six\"\n            case 7l => \"Seven\"\n            case 8l => \"Eight\"\n            case 9l => \"Nine\"\n            case _ => \"\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx2fmx34x.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m1l\u001b[0m => \u001b[31m\"One\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (\u001b[32m\"One\"\u001b[0m : String)\n\u001b[31m   |\u001b[0m                       Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx2fmx34x.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m2l\u001b[0m => \u001b[31m\"Two\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (\u001b[32m\"Two\"\u001b[0m : String)\n\u001b[31m   |\u001b[0m                       Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx2fmx34x.scala:22:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m3l\u001b[0m => \u001b[31m\"Three\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (\u001b[32m\"Three\"\u001b[0m : String)\n\u001b[31m   |\u001b[0m                       Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx2fmx34x.scala:23:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m4l\u001b[0m => \u001b[31m\"Four\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (\u001b[32m\"Four\"\u001b[0m : String)\n\u001b[31m   |\u001b[0m                       Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx2fmx34x.scala:24:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m5l\u001b[0m => \u001b[31m\"Five\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (\u001b[32m\"Five\"\u001b[0m : S",
      "stdout": "",
      "timestamp": 1659803834
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val numsSorted = nums.sortWith(_ < _)\n        val numsReversed = numsSorted.reverse\n        val numsReversedWithOne = numsReversed.map(_ + 10).filter(_ < 10)\n        val numsReversedWithTwo = numsReversed.map(_ + 20).filter(_ < 20)\n        val numsReversedWithThree = numsReversed.map(_ + 30).filter(_ < 30)\n        val numsReversedWithFour = numsReversed.map(_ + 40).filter(_ < 40)\n        val numsReversedWithFive = numsReversed.map(_ + 50).filter(_ < 50)\n        val numsReversedWithSix = numsReversed.map(_ + 60).filter(_ < 60)\n        val numsReversedWithSeven = numsReversed.map(_ + 70).filter(_ < 70)\n        val numsReversedWithEight = numsReversed.map(_ + 80).filter(_ < 80)\n        val numsReversedWithNine = numsReversed.map(_ + 90).filter(_ < 90)\n        numsReversedWithOne.map(_.toString).filter(_ != \"One\").mkString(\",\")\n        numsReversedWithTwo.map(_.toString).filter(_ != \"Two\").mkString(\",\")\n        numsReversedWithThree.map(_.toString).filter(_ != \"Three\").mkString(\",\")\n        numsReversedWithFour.map(_.toString).filter(_ != \"Four\").mkString(\",\")\n        numsReversedWithFive.map(_.toString).filter(_ != \"Five\").mkString(\",\")\n        numsReversedWithSix.map(_.toString).filter(_ != \"Six\").mkString(\",\")\n        numsReversedWithSeven.map(_.toString).filter(_ != \"Seven\").mkString(\",\")\n        numsReversedWithEight.map(_.toString).filter(_ != \"Eight\").mkString(\",\")\n        numsReversedWithNine.map(_.toString).filter(_ != \"Nine\").mkString(\",\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3oan9yq.scala:37:73 --------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        numsReversedWithNine.map(_.toString).filter(_ != \u001b[31m\"Nine\"\u001b[0m).mkString(\u001b[31m\",\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    String\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803833
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val length = list.size\n        val ones = list.filter(x => x < 10).toList\n        val tens = list.filter(x => x >= 10 && x < 100).toList\n        val hundreds = list.filter(x => x >= 100).toList\n        val reversed = ones + tens + hundreds\n        val reversedList = reversed.reverse\n        val reversedStrings = reversedList.map(x => x.toString)\n        val reversedStringsReversed = reversedStrings.reverse\n        val reversedStringsReversedString = reversedStringsReversed.map(x => x.toString)\n        val reversedStringsReversedStringReversed = reversedStringsReversedString.map(x => x.reverse)\n        val reversedStringsReversedStringReversedString = reversedStringsReversedStringReversed.map(x => x.toString)\n        val reversedStringsReversedStringReversedStringReversed = reversedStringsReversedStringReversedString.map(x => x.reverse)\n        val reversedStringsReversedStringReversedStringReversedStringReversed = reversedStringsReversedStringReversedStringReversedString.map(x => x.toString)\n        val reversedStringsReversedStringReversedStringReversedStringReversedStringReversed = reversedStringsReversedStringReversedStringReversedStringReversedString.map(x => x.reverse)\n        val reversedStringsReversedStringReversedStringReversedStringReversedStringReversedStringReversed = reversedStringsReversedStringReversedStringReversedStringReversedStringReversedString.map(x => x.toString)\n        val reversedStringsReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed = reversedStringsReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedString.map(x => x.reverse)\n        val reversedStringsReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed = reversedStringsReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedString.map(x => x.toString)\n        val reversedStringsReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed = reversedStringsReversedString\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk3resdhn.scala:22:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk3resdhn.scala:30:80 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversedStringsReversedStringReversedStringReversedStringReversed\u001b[0m = reversedStringsReversedStringReversedStringReversedString.map(\u001b[36mx\u001b[0m => x.toString)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: reversedStringsReversedStringReversedStringReversedString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk3resdhn.scala:31:94 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversedStringsReversedStringReversedStringReversedStringReversedStringReversed\u001b[0m = reversedStringsReversedStringReversedStringReversedStringReversedString.map(\u001b[36mx\u001b[0m => x.reverse)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNot found: reversedStringsReversedStringReversedStringReversedStringReversedString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk3resdhn.scala:32:1",
      "stdout": "",
      "timestamp": 1659803834
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val len = nums.map(_.toString).map(_.length).max\n        val maxNum = nums.max\n        val minNum = nums.min\n        val ones = nums.filter(x => x == 1l)\n        val tens = nums.filter(x => x == 10l)\n        val hundreds = nums.filter(x => x == 100l)\n        val thousands = nums.filter(x => x == 1000l)\n        val tenThousands = nums.filter(x => x == 10000l)\n        val hundredThousands = nums.filter(x => x == 100000l)\n        val thousandThousands = nums.filter(x => x == 1000000l)\n        val tenThousandThousands = nums.filter(x => x == 10000000l)\n        val hundredThousandThousands = nums.filter(x => x == 100000000l)\n        val thousandThousandThousands = nums.filter(x => x == 1000000000l)\n        val tenThousandThousandThousands = nums.filter(x => x == 10000000000l)\n        val hundredThousandThousandThousands = nums.filter(x => x == 100000000000l)\n        val thousandThousandThousandThousands = nums.filter(x => x == 1000000000000l)\n        val tenThousandThousandThousandThousands = nums.filter(x => x == 10000000000000l)\n        val hundredThousandThousandThousandThousands = nums.filter(x => x == 100000000000000l)\n        val thousandThousandThousandThousandThousands = nums.filter(x => x == 1000000000000000l)\n        val tenThousandThousandThousandThousandThousands = nums.filter(x => x == 10000000000000000l)\n        val hundredThousandThousandThousandThousandThousands = nums.filter(x => x == 100000000000000000l)\n        val thousandThousandThousandThousandThousandThousands = nums.filter(x => x == 1000000000000000000l)\n        val tenThousandThousandThousandThousandThousandThousands = nums.filter(x => x == 10000000000000000000l)\n        val hundredThousandThousandThousandThousandThousandThousands = nums.\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpbn73xmrf.scala:40:89 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousandThousandThousands\u001b[0m = nums.filter(\u001b[36mx\u001b[0m => x == \u001b[31m10000000000000000000l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbn73xmrf.scala:41:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredThousandThousandThousandThousandThousandThousands\u001b[0m = nums.\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbn73xmrf.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbn73xmrf.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659803831
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val result = new mutable.ListBuffer[String]()\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val hundred = List(\"Hundred\", \"Thousand\", \"Million\", \"Billion\", \"Trillion\", \"Quadrillion\", \"Quintillion\", \"Sextillion\", \"Septillion\", \"Octillion\", \"Nonillion\", \"Decillion\", \"Undecillion\", \"Duodecillion\", \"Tredecillion\", \"Quattuordecillion\", \"Quindecillion\", \"Sexdecillion\", \"Septdecillion\", \"Octodecillion\", \"Novemdecillion\", \"Vigintillion\", \"Unvigintillion\", \"Duovigintillion\", \"Trevigintillion\", \"Quattuorvigintillion\", \"Quinvigintillion\", \"Sexvigintillion\", \"Septvigintillion\", \"Octovigintillion\", \"Novemvigintillion\", \"Vigintigintillion\", \"Unvigintigintillion\", \"Duovigintigintillion\", \"Trevigintigintillion\", \"Quattuorvigintigintillion\", \"Quinvigintigintillion\", \"Sexvigintigintillion\", \"Septvigintigintillion\", \"Octovigintigintillion\", \"Novemvigintigintillion\", \"Vigintigintigintillion\", \"Unvigintigintigintillion\", \"Duovigintigintigintillion\", \"Trevigintigintigintillion\", \"Quattuorvigintigintigintillion\", \"Quinvigintigintigintillion\", \"Sexvigintigintigintillion\", \"Septvigintigintigintillion\", \"Octovigintigintigintillion\", \"Novemvigintigintillion\", \"Vigintigintigintigintillion\", \"Unvigintigintiginti\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprkstvud7.scala:21:1098 ---------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundred\u001b[0m = List(\u001b[31m\"Hundred\"\u001b[0m, \u001b[31m\"Thousand\"\u001b[0m, \u001b[31m\"Million\"\u001b[0m, \u001b[31m\"Billion\"\u001b[0m, \u001b[31m\"Trillion\"\u001b[0m, \u001b[31m\"Quadrillion\"\u001b[0m, \u001b[31m\"Quintillion\"\u001b[0m, \u001b[31m\"Sextillion\"\u001b[0m, \u001b[31m\"Septillion\"\u001b[0m, \u001b[31m\"Octillion\"\u001b[0m, \u001b[31m\"Nonillion\"\u001b[0m, \u001b[31m\"Decillion\"\u001b[0m, \u001b[31m\"Undecillion\"\u001b[0m, \u001b[31m\"Duodecillion\"\u001b[0m, \u001b[31m\"Tredecillion\"\u001b[0m, \u001b[31m\"Quattuordecillion\"\u001b[0m, \u001b[31m\"Quindecillion\"\u001b[0m, \u001b[31m\"Sexdecillion\"\u001b[0m, \u001b[31m\"Septdecillion\"\u001b[0m, \u001b[31m\"Octodecillion\"\u001b[0m, \u001b[31m\"Novemdecillion\"\u001b[0m, \u001b[31m\"Vigintillion\"\u001b[0m, \u001b[31m\"Unvigintillion\"\u001b[0m, \u001b[31m\"Duovigintillion\"\u001b[0m, \u001b[31m\"Trevigintillion\"\u001b[0m, \u001b[31m\"Quattuorvigintillion\"\u001b[0m, \u001b[31m\"Quinvigintillion\"\u001b[0m, \u001b[31m\"Sexvigintillion\"\u001b[0m, \u001b[31m\"Septvigintillion\"\u001b[0m, \u001b[31m\"Octovigintillion\"\u001b[0m, \u001b[31m\"Novemvigintillion\"\u001b[0m, \u001b[31m\"Vigintigintillion\"\u001b[0m, \u001b[31m\"Unvigintigintillion\"\u001b[0m, \u001b[31m\"Duovigintigintillion\"\u001b[0m, \u001b[31m\"Trevigintigintillion\"\u001b[0m, \u001b[31m\"Quattuorvigintigintillion\"\u001b[0m, \u001b[31m\"Quinvigintigintillion\"\u001b[0m, \u001b[31m\"Sexvigintigintillion\"\u001b[0m, \u001b[31m\"Septvigintigintillion\"\u001b[0m, \u001b[31m\"Octovigintigintillion\"\u001b[0m, \u001b[31m\"Novemvigintigintillion\"\u001b[0m, \u001b[31m\"Vigintigintigintillion\"\u001b[0m, \u001b[31m\"Unvigintigintigintillion\"\u001b[0m, \u001b[31m\"Duovigintigintigintillion\"\u001b[0m, \u001b[31m\"Trevigintigintigintillion\"\u001b[0m, \u001b[31m\"Quattuorvigintigintigintillion\"\u001b[0m, \u001b[31m\"Quinvigintigintigintillion\"\u001b[0m, \u001b[31m\"Sexvigintigintigintillion\"\u001b[0m, \u001b[31m\"Septvigintigintigintillion\"\u001b[0m, \u001b[31m\"Octovigintigintigintillion\"\u001b[0m, \u001b[31m\"Novemvigintigintillion\"\u001b[0m, \u001b[31m\"Vigintigintigintigintillion\"\u001b[0m, \"Unvigintigintiginti\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                         ",
      "stdout": "",
      "timestamp": 1659803831
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val numsSorted = nums.sortBy(_ % 10)\n        val numsReversed = numsSorted.reverse\n        val numsReversedDigits = numsReversed.map(_.toString.toInt)\n        val numsReversedDigitsReversed = numsReversedDigits.map(_.toString)\n        val numsReversedDigitsReversedMap = numsReversedDigitsReversed.map(x => (x -> \"One\")).toMap\n        val numsReversedDigitsReversedMapReversed = numsReversedDigitsReversedMap.reverse\n        val numsReversedDigitsReversedMapReversedMap = numsReversedDigitsReversedMapReversed.toMap\n        numsReversedDigitsReversedMapReversedMap.toList.map(x => numsReversedDigitsReversedMapReversedMap.get(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnqy3qse1.scala:23:82 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsReversedDigitsReversedMapReversed\u001b[0m = numsReversedDigitsReversedMap.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Map[String, String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordering.ordered\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803834
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val ones = list.filter(x => x < 9).toList\n        val tens = list.filter(x => x >= 9 && x < 99).toList\n        val tensReversed = tens.reverse\n        val tensReversedString = tensReversed.map(x => x.toString).mkString(\"\")\n        val tensReversedStringList = tensReversedString.split(\",\")\n        val tensReversedStringListReversed = tensReversedStringList.reverse\n        val tensReversedStringListReversedString = tensReversedStringListReversed.map(x => x.toString).mkString(\"\")\n        val tensReversedStringListReversedStringList = tensReversedStringListReversedString.split(\",\")\n        val tensReversedStringListReversedStringListReversed = tensReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedString = tensReversedStringListReversedStringListReversed.map(x => x.toString).mkString(\"\")\n        val tensReversedStringListReversedStringListReversedStringList = tensReversedStringListReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedStringListReversed = tensReversedStringListReversedStringListReversedStringListReversed.map(x => x.toString).mkString(\"\")\n        val tensReversedStringListReversedStringListReversedStringListReversedString = tensReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedStringListReversedStringList = tensReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversed = tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversedString = tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversed = tensReversedStringListReversedStringListReversedStringListReversedString\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp0bmscdhw.scala:29:73 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringListReversedStringListReversedStringList\u001b[0m = tensReversedStringListReversedStringListReversedStringList.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringListReversedStringListReversedStringList\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp0bmscdhw.scala:30:81 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringListReversedStringListReversedStringListReversed\u001b[0m = tensReversedStringListReversedStringListReversedStringListReversed.map(\u001b[36mx\u001b[0m => x.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringListReversedStringListReversedStringListReversed\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp0bmscdhw.scala:32:91 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringListReversedStringListReversedStringListReversedStringList\u001b[0m = tensReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  tensReversedStringListReversedStringListReversedStringListReversedStringList\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0bmscdhw.scala:33:99 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStri",
      "stdout": "",
      "timestamp": 1659803832
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n        val oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000l.toLong && x <= 9999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000l.toLong && x <= 99999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000000l.toLong && x <= 999999999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpxjy2bo06.scala:28:119 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxjy2bo06.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxjy2bo06.scala:29:121 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxjy2bo06.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxjy2bo06.scala:30:130 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandTh",
      "stdout": "",
      "timestamp": 1659803833
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.sortWith(_.toInt < _.toInt).reverse\n        val map = Map(\"One\" -> 1, \"Two\" -> 2, \"Three\" -> 3, \"Four\" -> 4, \"Five\" -> 5, \"Six\" -> 6, \"Seven\" -> 7, \"Eight\" -> 8, \"Nine\" -> 9)\n        val result = result.map(x => map.getOrElse(x.toString, x.toString))\n        if (result.isEmpty) Nil\n        else result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp35353r28.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = result.map(\u001b[36mx\u001b[0m => map.getOrElse(x.toString, x.toString))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mresult is already defined as \u001b[33mvalue\u001b[0m \u001b[35mresult\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp35353r28.scala:21:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33melse\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    (result : List[Long])\n\u001b[31m   |\u001b[0m             Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803832
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x => x >= 10 && x < 100).toList\n        val hundreds = arr.filter(x => x >= 100).toList\n        val hundredsAndOnes = arr.filter(x => x >= 100 && x < 1000).toList\n        val hundredsAndOnesAndTens = arr.filter(x => x >= 1000 && x < 10000).toList\n        val hundredsAndOnesAndTensAndOnes = arr.filter(x => x >= 10000).toList\n        val hundredsAndOnesAndTensAndOnesAndTens = arr.filter(x => x >= 10000 && x < 100000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnes = arr.filter(x => x >= 100000 && x < 1000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndTens = arr.filter(x => x >= 1000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnes = arr.filter(x => x >= 1000000 && x < 10000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndTens = arr.filter(x => x >= 10000000 && x < 100000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnes = arr.filter(x => x >= 100000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndTens = arr.filter(x => x >= 100000000 && x < 1000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnes = arr.filter(x => x >= 1000000000 && x < 10000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = arr.filter(x => x >= 10000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = arr.filter(x => x >= 10000000000 && x < 100000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = arr.filter(x => x >= 100000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = arr.filter(x => x >= 100000000000 && x < 1000000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = arr.filter(x => x >= 1000000000000).toList\n        val hundredsAndOnesAndTensAnd\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzbkebe4k.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzbkebe4k.scala:30:111 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzbkebe4k.scala:31:100 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzbkebe4k.scala:32:100 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzbkebe4k.scala:32:119 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ",
      "stdout": "",
      "timestamp": 1659803842
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 0)\n        val tens = arr.filter(x => x % 10 == 1)\n        val hundreds = arr.filter(x => x % 10 == 2)\n        val thousands = arr.filter(x => x % 10 == 3)\n        val tenThousands = arr.filter(x => x % 10 == 4)\n        val oneThousands = arr.filter(x => x % 10 == 5)\n        val hundredThousands = arr.filter(x => x % 10 == 6)\n        val thousandThousands = arr.filter(x => x % 10 == 7)\n        val tenThousandThousands = arr.filter(x => x % 10 == 8)\n        val oneThousandThousands = arr.filter(x => x % 10 == 9)\n        val hundredThousandThousands = arr.filter(x => x % 10 == 0)\n        val thousandThousandThousands = arr.filter(x => x % 10 == 1)\n        val oneThousandThousandThousands = arr.filter(x => x % 10 == 2)\n        val hundredThousandThousandThousands = arr.filter(x => x % 10 == 3)\n        val thousandThousandThousandThousands = arr.filter(x => x % 10 == 4)\n        val oneThousandThousandThousandThousands = arr.filter(x => x % 10 == 5)\n        val hundredThousandThousandThousandThousands = arr.filter(x => x % 10 == 6)\n        val thousandThousandThousandThousandThousands = arr.filter(x => x % 10 == 7)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x % 10 == 8)\n        val hundredThousandThousandThousandThousandThousands = arr.filter(x => x % 10 == 9)\n        val thousandThousandThousandThousandThousandThousands = arr.filter(x => x % 10 == 0)\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x % 10 == 1)\n        val hundredThousandThousandThousandThousandThousandThousands = arr.filter(x => x % 10\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9or0a_sx.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9or0a_sx.scala:39:87 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Found:    Long\n\u001b[31m   |\u001b[0m                                                       Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9or0a_sx.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659803844
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 9).map(x => s\"One\")\n        val tens = arr.filter(x => x >= 9 && x < 99).map(x => s\"Ten\")\n        val hundreds = arr.filter(x => x >= 99).map(x => s\"Hundred\")\n        val hundredsAndOnes = arr.filter(x => x >= 100 && x < 999).map(x => s\"Hundred and One\")\n        val hundredsAndTens = arr.filter(x => x >= 1000 && x < 9999).map(x => s\"Hundred and Ten\")\n        val hundredsAndOnesAndTens = arr.filter(x => x >= 10000 && x < 99999).map(x => s\"Hundred and One and Ten\")\n        val hundredsAndOnesAndTensAndOnes = arr.filter(x => x >= 100000 && x < 999999).map(x => s\"Hundred and One and Ten and One\")\n        val hundredsAndOnesAndTensAndOnesAndTens = arr.filter(x => x >= 1000000 && x < 9999999).map(x => s\"Hundred and One and Ten and One and Ten\")\n        val hundredsAndOnesAndTensAndOnesAndTensAndOnes = arr.filter(x => x >= 10000000 && x < 99999999).map(x => s\"Hundred and One and Ten and One and Ten and One\")\n        val hundredsAndOnesAndTensAndOnesAndTensAndOnesAndTens = arr.filter(x => x >= 100000000 && x < 999999999).map(x => s\"Hundred and One and Ten and One and Ten and One and Ten\")\n        val hundredsAndOnesAndTensAndOnesAndTensAndOnesAndOnesAndTens = arr.filter(x => x >= 1000000000 && x < 99999999999).map(x => s\"Hundred and One and Ten and One and Ten and One and Ten and One\")\n        val hundredsAndOnesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndTens = arr.filter(x => x >= 10000000000 && x < 999999999999).map(x => s\"Hundred and One and Ten and One and Ten and One and Ten and One and Ten\")\n        val hundredsAndOnesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndTens = arr.filter(x => x >= 100000000000 && x < 999999999999999).map(x => s\"Hundred and One and Ten and One and Ten and One and Ten and One and Ten and One\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzl9qifip.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndOnesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndTens\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m999999999999999\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Hundred and One and Ten and One and Ten and One and Ten and One and Ten and One\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mhundredsAndOnesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndTens is already defined as \u001b[33mvalue\u001b[0m \u001b[35mhundredsAndOnesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndTens\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzl9qifip.scala:27:111 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndOnesAndTensAndOnesAndTensAndOnesAndOnesAndTens\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m99999999999\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Hundred and One and Ten and One and Ten and One and Ten and One\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzl9qifip.scala:28:100 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndOnesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndTens\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m999999999999\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Hundred and One and Ten and One and Ten and One and Ten and One and Ten\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ",
      "stdout": "",
      "timestamp": 1659803844
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.sortWith(_ < _)\n        val reversed = result.reverse\n        val replaced = reversed.map(i => if (i < 10) \"One\" else if (i < 20) \"Two\" else if (i < 30) \"Three\" else if (i < 40) \"Four\" else if (i < 50) \"Five\" else if (i < 60) \"Six\" else if (i < 70) \"Seven\" else if (i < 80) \"Eight\" else \"Nine\")\n        reversed.toList ++ replaced\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq6_6hj6c.scala:20:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        reversed.toList ++ replaced\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    List[Matchable]\n\u001b[31m   |\u001b[0m        Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803844
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong).map(x => x.toString)\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong).map(x => x.toString)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong).map(x => x.toString)\n        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong).map(x => x.toString)\n        val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong).map(x => x.toString)\n        val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong).map(x => x.toString)\n        val oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong).map(x => x.toString)\n        val oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong).map(x => x.toString)\n        val oneThousandThousands = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong).map(x => x.toString)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong).map(x => x.toString)\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong).map(x => x.toString)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000l.toLong && x <= 9999999999999999999l.toLong).map(x => x.toString)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000l.toLong && x <= 99999999999999999999l.toLong).map(x => x.toString)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000l.toLong && x <= 99999999999999999999999l.toLong).map(x => x.toString)\n        val oneThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpu3w_8bop.scala:28:103 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => x.toString)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu3w_8bop.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => x.toString)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu3w_8bop.scala:29:106 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => x.toString)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu3w_8bop.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => x.toString)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu3w_8bop.scala:30:114 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousan",
      "stdout": "",
      "timestamp": 1659803845
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val numsLength = nums.size\n        val numsDigits = nums.map(_.toString.length).max\n        val numsDigitsInt = nums.map(_.toString.length).toInt\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpewqazh5k.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsDigitsInt\u001b[0m = numsDigitsInt - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsDigitsInt is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsDigitsInt\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpewqazh5k.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsDigitsInt\u001b[0m = numsDigitsInt - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsDigitsInt is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsDigitsInt\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpewqazh5k.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsDigitsInt\u001b[0m = numsDigitsInt - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsDigitsInt is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsDigitsInt\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpewqazh5k.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsDigitsInt\u001b[0m = numsDigitsInt - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsDigitsInt is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsDigitsInt\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpewqazh5k.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsDigitsInt\u001b[0m = numsDigitsInt - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^",
      "stdout": "",
      "timestamp": 1659803845
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.sortWith(_ < _)\n        val reversed = result.reverse\n        val result = reversed.map(i => if (i < 10) \"One\" else if (i < 20) \"Two\" else if (i < 30) \"Three\" else if (i < 40) \"Four\" else if (i < 50) \"Five\" else if (i < 60) \"Six\" else if (i < 70) \"Seven\" else if (i < 80) \"Eight\" else \"Nine\")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4iifkny4.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reversed.map(\u001b[36mi\u001b[0m => \u001b[33mif\u001b[0m (i < \u001b[31m10\u001b[0m) \u001b[31m\"One\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (i < \u001b[31m20\u001b[0m) \u001b[31m\"Two\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (i < \u001b[31m30\u001b[0m) \u001b[31m\"Three\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (i < \u001b[31m40\u001b[0m) \u001b[31m\"Four\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (i < \u001b[31m50\u001b[0m) \u001b[31m\"Five\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (i < \u001b[31m60\u001b[0m) \u001b[31m\"Six\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (i < \u001b[31m70\u001b[0m) \u001b[31m\"Seven\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (i < \u001b[31m80\u001b[0m) \u001b[31m\"Eight\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mresult is already defined as \u001b[33mvalue\u001b[0m \u001b[35mresult\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4iifkny4.scala:20:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        result\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (result : List[Long])\n\u001b[31m   |\u001b[0m        Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803844
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val m = arr.map(_.toString).map(_.length).max\n        val n = arr.map(_.toString).map(_.length).min\n        val r = arr.map(_.toString).map(_.toChar).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.to\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbfy5hnwd.scala:20:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbfy5hnwd.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr\u001b[0m = arr.map(_.toString).map(_.toChar).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCas",
      "stdout": "",
      "timestamp": 1659803847
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val reversed = list.sortWith(_ < _)\n        val ones = reversed.filter(x => x < 10)\n        val tens = reversed.filter(x => x >= 10 && x < 100)\n        val hundreds = reversed.filter(x => x >= 100)\n        val names = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val result = ones + tens + hundreds\n        result.map(x => names.find(y => y == x.toString).getOrElse(\"Not found\"))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgt3cbnd7.scala:24:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = ones + tens + hundreds\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803846
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortWith(_ < _).reverse.map(x => s\"${x.toInt}\".toUpperCase)\n        if (arr.isEmpty) result\n        else result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp95ejp1y8.scala:17:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = arr.filter(_ >= \u001b[31m1l\u001b[0m.toLong && _ <= \u001b[31m9l\u001b[0m.toLong).sortWith(_ < _).reverse.map(\u001b[36mx\u001b[0m => \u001b[31ms\"\u001b[0m${x.toInt}\u001b[31m\"\u001b[0m.toUpperCase)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Wrong number of parameters, expected: 1\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803841
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ > 0).toList\n        val reversed = result.reverse\n        val ones = reversed.filter(_ < 10)\n        val tens = reversed.filter(_ >= 10 && _ < 100)\n        val hundreds = reversed.filter(_ >= 100)\n        val names = ones + tens + hundreds\n        names.map(name => if (name.length > 1) name else \"One\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpu8j7lp8f.scala:20:35 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtens\u001b[0m = reversed.filter(_ >= \u001b[31m10\u001b[0m && _ < \u001b[31m100\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu8j7lp8f.scala:22:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnames\u001b[0m = ones + tens + hundreds\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803845
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x => x >= 9 && x < 99).toList\n        val hundreds = arr.filter(x => x >= 99).toList\n        val reversed = ones + tens + hundreds\n        val result = reversed.map(x => if (x == 0) \"One\" else if (x == 1) \"Two\" else if (x == 2) \"Three\" else if (x == 3) \"Four\" else if (x == 4) \"Five\" else if (x == 5) \"Six\" else if (x == 6) \"Seven\" else if (x == 7) \"Eight\" else if (x == 8) \"Nine\" else \"Digit\" + x.toString)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfc_z6_bz.scala:20:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803846
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val numsLen = nums.size\n        val numsDigits = nums.map(_.toString.length).max\n        val numsDigitSum = nums.map(_.toString.length).sum\n        val numsDigitSum2 = numsDigitSum * numsLen\n        val numsDigitSum3 = numsDigitSum2 * numsLen\n        val numsDigitSum4 = numsDigitSum3 * numsLen\n        val numsDigitSum5 = numsDigitSum4 * numsLen\n        val numsDigitSum6 = numsDigitSum5 * numsLen\n        val numsDigitSum7 = numsDigitSum6 * numsLen\n        val numsDigitSum8 = numsDigitSum7 * numsLen\n        val numsDigitSum9 = numsDigitSum8 * numsLen\n        val numsDigitSum10 = numsDigitSum9 * numsLen\n        val numsDigitSum11 = numsDigitSum10 * numsLen\n        val numsDigitSum12 = numsDigitSum11 * numsLen\n        val numsDigitSum13 = numsDigitSum12 * numsLen\n        val numsDigitSum14 = numsDigitSum13 * numsLen\n        val numsDigitSum15 = numsDigitSum14 * numsLen\n        val numsDigitSum16 = numsDigitSum15 * numsLen\n        val numsDigitSum17 = numsDigitSum16 * numsLen\n        val numsDigitSum18 = numsDigitSum17 * numsLen\n        val numsDigitSum19 = numsDigitSum18 * numsLen\n        val numsDigitSum20 = numsDigitSum19 * numsLen\n        val numsDigitSum21 = numsDigitSum20 * numsLen\n        val numsDigitSum22 = numsDigitSum21 * numsLen\n        val numsDigitSum23 = numsDigitSum22 * numsLen\n        val numsDigitSum24 = numsDigitSum23 * numsLen\n        val numsDigitSum25 = numsDigitSum24 * numsLen\n        val numsDigitSum26 = numsDigitSum25 * numsLen\n        val numsDigitSum27 = numsDigitSum26 * numsLen\n        val numsDigitSum28 = numsDigitSum\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzmacuhpj.scala:48:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803846
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val len = arr.size\n        val ones = nums.filter(x => x < 9).toList\n        val tens = nums.filter(x => x >= 9 && x < 99).toList\n        val hundreds = nums.filter(x => x >= 99).toList\n        val hundredsReversed = hundreds.reverse\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val tensReversedReversed = tensReversed.reverse\n        val onesReversedReversed = onesReversed.reverse\n        val tensReversedReversedReversed = tensReversedReversed.reverse\n        val onesReversedReversedReversed = onesReversedReversed.reverse\n        val onesReversedReversedReversedReversed = onesReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversedReversed = onesReversedReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n        val onesReversedReversedReverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphk3k6ojw.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphk3k6ojw.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedReversedReversedReversedReversedReversedReversedReversed\u001b[0m = onesReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedReversedReversedReversedReversedReversedReversedReversed is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesReversedReversedReversedReversedReversedReversedReversedReversed\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphk3k6ojw.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\u001b[0m = onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmphk3k6ojw.scala:31:67 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b",
      "stdout": "",
      "timestamp": 1659803846
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x => x >= 10 && x < 20).toList\n        val hundreds = arr.filter(x => x >= 20 && x < 30).toList\n        val thousands = arr.filter(x => x >= 30 && x < 40).toList\n        val hundredsAndThousands = arr.filter(x => x >= 40 && x < 50).toList\n        val hundredsAndHundreds = arr.filter(x => x >= 50 && x < 60).toList\n        val hundredsAndHundredsAndThousands = arr.filter(x => x >= 60 && x < 70).toList\n        val hundredsAndHundredsAndHundreds = arr.filter(x => x >= 70 && x < 80).toList\n        val hundredsAndHundredsAndHundredsAndThousands = arr.filter(x => x >= 80 && x < 90).toList\n        val hundredsAndHundredsAndHundredsAndHundreds = arr.filter(x => x >= 90 && x < 100).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndThousands = arr.filter(x => x >= 100 && x < 1000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundreds = arr.filter(x => x >= 1000 && x < 10000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundredsAndThousands = arr.filter(x => x >= 10000 && x < 100000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundredsAndHundreds = arr.filter(x => x >= 100000 && x < 1000000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundredsAndHundredsAndThousands = arr.filter(x => x >= 1000000 && x < 10000000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundredsAndHundredsAndHundreds = arr.filter(x => x >= 10000000 && x < 100000000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundredsAndHundredsAndHundredsAndThousands = arr.filter(x => x >= 100000000 && x < 1000000000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundredsAndHundredsAndHundred\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvw6sk1wa.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw6sk1wa.scala:35:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803846
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val len = nums.map(_.toString.length).max\n        val maxNum = nums.max\n        val maxNumStr = maxNum.toString\n        val maxNumStr = maxNumStr.substring(0, maxNumStr.length - len)\n        nums.sortWith((a, b) => a < b).reverse.map(num => {\n            val digit = num.toString\n            val digitStr = digit.substring(0, digit.length - len)\n            val digitName = digitStr.charAt(0).toString + digitStr.substring(1)\n            if (digitStr == maxNumStr) {\n                digitName\n            } else {\n                digit\n            }\n        }).filterNot(_.isEmpty)\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5mn29ihw.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxNumStr\u001b[0m = maxNumStr.substring(\u001b[31m0\u001b[0m, maxNumStr.length - len)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxNumStr is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxNumStr\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803842
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.filter(_ > 0).toList\n        val numsSorted = nums.sortBy(_ % 10)\n        val reversed = numsSorted.reverse\n        val reversedString = reversed.map(_ % 10).map(x => x match {\n            case 0 => \"Zero\"\n            case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n            case _ => \"\"\n        }).mkString\n        reversedString.replaceAllIn(reversed, reversedString)\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphnollugr.scala:33:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        reversedString.replaceAllIn(reversed, reversedString)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue replaceAllIn is not a member of String - did you mean reversedString.replaceAll?\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803847
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val len = nums.map(_.toString).map(_.length).max\n        val reversed = nums.reverse\n        val result = reversed.map(x => if (x < 10) {\n            val str = x.toString\n            val index = str.length - 1\n            str.substring(0, index) + s\"${str.substring(index, index)}\" + str.substring(index + 1)\n        } else {\n            val str = x.toString\n            val index = str.length - 1\n            str.substring(0, index) + s\"${str.substring(index, index)}\" + str.substring(index + 1)\n        }).filter(x => x.toString.length == len)\n        val replaced = result.map(x => x.replaceAll(\"\\\\d\", \"One\").replaceAll(\"\\\\D\", \"Two\").replaceAll(\"\\\\b\", \"Three\").replaceAll(\"\\\\B\", \"Four\").replaceAll(\"\\\\s\", \"Five\").replaceAll(\"\\\\S\", \"Six\").replaceAll(\"\\\\w\", \"Seven\").replaceAll(\"\\\\W\", \"Eight\").replaceAll(\"\\\\p\", \"Nine\"))\n        replaced\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0eeyg1ls.scala:33)\n\tat Problem.main(tmp0eeyg1ls.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659803848
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val numsLength = nums.map(_.toString.length).max\n        val numsLengthString = numsLength.toString\n        val numsLengthStringLength = numsLengthString.length\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt143yhdb.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsLengthStringLength\u001b[0m = numsLengthStringLength.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsLengthStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsLengthStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt143yhdb.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsLengthStringLength\u001b[0m = numsLengthStringLength.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsLengthStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsLengthStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt143yhdb.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsLengthStringLength\u001b[0m = numsLengthStringLength.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsLengthStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsLengthStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt143yhdb.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsLengthStringLength\u001b[0m = numsLengthStringLength.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsLengthStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsLengthStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] ",
      "stdout": "",
      "timestamp": 1659803846
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val n = arr.length\n        val m = arr.head\n        val result = new mutable.ListBuffer[String]()\n        val ones = List(1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l)\n        val tens = List(10l, 20l, 30l, 40l, 50l, 60l, 70l, 80l, 90l)\n        val hundreds = List(100l, 200l, 300l, 400l, 500l, 600l, 700l, 800l, 900l)\n        val thousands = List(1000l, 2000l, 3000l, 4000l, 5000l, 6000l, 7000l, 8000l, 9000l)\n        val tenThousands = List(10000l, 20000l, 30000l, 40000l, 50000l, 60000l, 70000l, 80000l, 90000l)\n        val hundredThousands = List(100000l, 200000l, 300000l, 400000l, 500000l, 600000l, 700000l, 800000l, 900000l)\n        val oneThousands = List(1000000l, 2000000l, 3000000l, 4000000l, 5000000l, 6000000l, 7000000l, 8000000l, 9000000l)\n        val tenMillions = List(100000l*10l, 200000l*10l, 300000l*10l, 400000l*10l, 500000l*10l, 600000l*10l, 700000l*10l, 800000l*10l, 900000l*10l)\n        val hundredMillions = List(100000l*100l, 200000l*100l, 300000l*100l, 400000l*100l, 500000l*100l, 600000l*100l, 700000l*100l, 800000l*100l, 900000l*100l)\n        val thousandMillions = List(100000l*1000l, 200000l*1000l, 300000l*1000l, 400000l*1000l, 500000l*1000l, 600000l*1000l, 700000l*1000l, 800000l*1000l, 900000l*1000l)\n        val oneMillion = List(1000000l*1000l)\n        val tenThousand = List(10000l*1000l, 20000l*1000l, 30000l*1000l, 40000l*1000l, 50000l*1000l, 60000l*1000l, 70000l*1000l, 80000l*1000l, 90000l*1000l)\n        val hundredThousand = List(100000l*1000l*100l, 200000l*1000l*100l, 3\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphn937x5k.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphn937x5k.scala:19:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphn937x5k.scala:33:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659803847
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x => x >= 10 && x < 20).toList\n        val teens = arr.filter(x => x >= 20 && x < 30).toList\n        val twenties = arr.filter(x => x >= 30 && x < 40).toList\n        val thirties = arr.filter(x => x >= 40 && x < 50).toList\n        val fourties = arr.filter(x => x >= 50 && x < 60).toList\n        val fifties = arr.filter(x => x >= 60 && x < 70).toList\n        val sixties = arr.filter(x => x >= 70 && x < 80).toList\n        val seventies = arr.filter(x => x >= 80 && x < 90).toList\n        val eighties = arr.filter(x => x >= 90 && x < 100).toList\n        val nineties = arr.filter(x => x >= 100).toList\n        val onesAndTens = ones + tens\n        val onesAndTwenties = ones + twenties\n        val onesAndThirties = ones + thirties\n        val onesAndFourties = ones + fourties\n        val onesAndFifties = ones + fifties\n        val onesAndSixties = ones + sixties\n        val onesAndSeventies = ones + seventies\n        val onesAndEighties = ones + eighties\n        val onesAndNineties = ones + nineties\n        val tensAndTwenties = tens + twenties\n        val tensAndThirties = tens + thirties\n        val tensAndFourties = tens + fourties\n        val tensAndFifties = tens + fifties\n        val tensAndSixties = tens + sixties\n        val tensAndSeventies = tens + seventies\n        val tensAndEighties = tens + eighties\n        val tensAndNineties = tens + nineties\n        val twentiesAndThirties = twenties + thirties\n        val twentiesAndFourties = twenties + fourties\n        val twentiesAndFifties = twenties + fifties\n        val twentiesAndSixties = twenties + sixties\n        val twentiesAndSeventies = twenties + seventies\n        val twentiesAndEighties = twenties + eighties\n        val twenties\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwuwci1ql.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwuwci1ql.scala:28:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTens\u001b[0m = ones + tens\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwuwci1ql.scala:29:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwenties\u001b[0m = ones + twenties\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwuwci1ql.scala:30:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndThirties\u001b[0m = ones + thirties\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import",
      "stdout": "",
      "timestamp": 1659803853
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val one = list.filter(x => x < 10).toList\n        val two = list.filter(x => x >= 10 && x < 20).toList\n        val three = list.filter(x => x >= 20 && x < 30).toList\n        val four = list.filter(x => x >= 30 && x < 40).toList\n        val five = list.filter(x => x >= 40 && x < 50).toList\n        val six = list.filter(x => x >= 50 && x < 60).toList\n        val seven = list.filter(x => x >= 60 && x < 70).toList\n        val eight = list.filter(x => x >= 70 && x < 80).toList\n        val nine = list.filter(x => x >= 80 && x < 90).toList\n        val ten = list.filter(x => x >= 90 && x < 100).toList\n        val ten_one = one.filter(x => x >= 10).toList\n        val ten_two = two.filter(x => x >= 10).toList\n        val ten_three = three.filter(x => x >= 10).toList\n        val ten_four = four.filter(x => x >= 10).toList\n        val ten_five = five.filter(x => x >= 10).toList\n        val ten_six = six.filter(x => x >= 10).toList\n        val ten_seven = seven.filter(x => x >= 10).toList\n        val ten_eight = eight.filter(x => x >= 10).toList\n        val ten_nine = nine.filter(x => x >= 10).toList\n        val ten_ten = ten.filter(x => x >= 10).toList\n        val ten_ten_one = ten_one.filter(x => x >= 10).toList\n        val ten_ten_two = ten_two.filter(x => x >= 10).toList\n        val ten_ten_three = ten_three.filter(x => x >= 10).toList\n        val ten_ten_four = ten_four.filter(x => x >= 10).toList\n        val ten_ten_five = ten_five.filter(x => x >= 10).toList\n        val ten_ten_six = ten_six.filter(x => x >= 10).toList\n        val ten_ten_seven = ten_seven.filter(x => x >= 10).toList\n        val ten_ten_eight = ten_eight.filter(x => x >= 10).toList\n        val ten_ten_nine = ten_nine.filter(\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp9rc79q3z.scala:47:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mten_ten_nine\u001b[0m = ten_nine.filter(\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9rc79q3z.scala:48:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803848
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val m = arr.head\n        val n = arr.last\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ >= 10 && _ < 100).toList\n        val hundreds = arr.filter(_ >= 100).toList\n        val hundredsReversed = hundreds.reverse\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val tensReversedReversed = tensReversed.reverse\n        val onesReversedReversed = onesReversed.reverse\n        val tensReversedReversedReversed = tensReversedReversed.reverse\n        val onesReversedReversedReversed = onesReversedReversed.reverse\n        val tensReversedReversedReversedReversed = tensReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversed = onesReversedReversedReversed.reverse\n        val tensReversedReversedReversedReversedReversed = tensReversedReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversed.reverse\n        val tensReversedReversedReversedReversedReversedReversedReversed = tensReversedReversedReversedReversedReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n        val tensReversedReversedReversedReversedReversedReversedReversedReversedReversed = tensReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n        val tensReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = tensReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = onesReversed\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp5mdxchz0.scala:20:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtens\u001b[0m = arr.filter(_ >= \u001b[31m10\u001b[0m && _ < \u001b[31m100\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5mdxchz0.scala:32:67 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedReversedReversedReversedReversedReversed\u001b[0m = onesReversedReversedReversedReversedReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Not found: onesReversedReversedReversedReversedReversed\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp5mdxchz0.scala:33:75 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedReversedReversedReversedReversedReversedReversed\u001b[0m = tensReversedReversedReversedReversedReversedReversedReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mtensReversedReversedReversedReversedReversedReversedReversed\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp5mdxchz0.scala:34:83 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedReversedReversedReversedReversedReversedReversedReversed\u001b[0m = onesReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35monesReversedReversedReversedReversedReversedReversedReversedReversed\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m",
      "stdout": "",
      "timestamp": 1659803847
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val arr = arr.toList\n        val len = arr.length\n        val reversed = arr.sortWith(_ < _)\n        val result = reversed.reverse.map(i => if (i < 10) \"One\" else if (i < 20) \"Two\" else if (i < 30) \"Three\" else if (i < 40) \"Four\" else if (i < 50) \"Five\" else if (i < 60) \"Six\" else if (i < 70) \"Seven\" else if (i < 80) \"Eight\" else \"Nine\")\n        if (len == 0) result\n        else result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpn7mbaxj_.scala:17:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803850
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val ones = list.filter(_ <= 9).toList\n        val tens = list.filter(_ <= 99).toList\n        val hundreds = list.filter(_ <= 999).toList\n        val thousands = list.filter(_ <= 9999).toList\n        val tenThousands = list.filter(_ <= 999999).toList\n        val hundredThousands = list.filter(_ <= 9999999).toList\n        val thousandThousands = list.filter(_ <= 999999999).toList\n        val oneThousand = list.filter(_ <= 99999999999).toList\n        val oneHundred = list.filter(_ <= 999999999999).toList\n        val oneThousandThousand = list.filter(_ <= 999999999999999).toList\n        val oneHundredThousand = list.filter(_ <= 9999999999999999).toList\n        val oneThousandHundred = list.filter(_ <= 9999999999999999999).toList\n        val oneHundredThousandThousand = list.filter(_ <= 99999999999999999999).toList\n        val oneHundredThousandHundred = list.filter(_ <= 99999999999999999999999).toList\n        val oneThousandHundredThousand = list.filter(_ <= 999999999999999999999999).toList\n        val oneHundredThousandHundredThousand = list.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandHundredThousandHundred = list.filter(_ <= 9999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundred = list.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandHundredThousandHundredThousand = list.filter(_ <= 99999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousand = list.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandHundredThousandHundredThousandHundredThousand = list.filter(_ <= 9999999999999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHund\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpizd2tf3y.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpizd2tf3y.scala:26:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousand\u001b[0m = list.filter(_ <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpizd2tf3y.scala:27:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundred\u001b[0m = list.filter(_ <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpizd2tf3y.scala:28:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousand\u001b[0m = list.filter(_ <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpizd2tf3y.scala:29:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousand\u001b[0m = list.filter(_ <= \u001b[31m9999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpizd2tf3y.scala:30:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundred\u001b[0m = list.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too larg",
      "stdout": "",
      "timestamp": 1659803855
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n        val tensReversedString = tensReversed.map(x => Ten(x))\n        val tensReversedString2 = tensReversed.map(x => Ten(x))\n        val tensReversedString3 = tensReversed.map(x => Ten(x))\n        val tensReversedString4 = tensReversed.map(x => Ten(x))\n        val tensReversedString5 = tensReversed.map(x => Ten(x))\n        val tensReversedString6 = tensReversed.map(x => Ten(x))\n        val tensReversedString7 = tensReversed.map(x => Ten(x))\n        val tensReversedString8 = tensReversed.map(x => Ten(x))\n        val tensReversedString9 = tensReversed.map(x => Ten(x))\n        val tensReversedString10 = tensReversed.map(x => Ten(x))\n        val tensReversedString11 = tensReversed.map(x => Ten(x))\n        val tensReversedString12 = tensReversed.map(x => Ten(x))\n        val tensReversedString13 = tensReversed.map(x => Ten(x))\n        val tensReversedString14 = tensReversed.map(x => Ten(x))\n        val tensReversedString15 = tensReversed.map(x => Ten(x))\n        val tensReversedString16 = tensReversed.map(x => Ten(x))\n        val tensReversedString17 = tensReversed.map(x => Ten(x))\n        val tensReversedString18 = tensReversed.map(x => Ten(x))\n        val tensReversedString19 = tensReversed.map(x => Ten(x))\n        val tensReversedString20 = tensReversed.map(x => Ten(x))\n        val tensReversedString21 = tensReversed.map(x => Ten(x))\n        val tensReversedString22 = tensReversed.map(x => Ten(x))\n        val tensReversedString23 = tensReversed.map(x => Ten(x))\n        val tensReversedString24 = tensReversed.map(x => Ten(x))\n        val tensReverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpplpw0o3e.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpplpw0o3e.scala:21:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => One(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpplpw0o3e.scala:22:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => Ten(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: Ten\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpplpw0o3e.scala:23:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString2\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => Ten(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: Ten\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpplpw0o3e.scala:24:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString3\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => Ten(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: Ten\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error",
      "stdout": "",
      "timestamp": 1659803855
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n        val oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000l.toLong && x <= 9999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000l.toLong && x <= 99999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000l.toLong && x <= 999999999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp1txblk04.scala:28:118 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1txblk04.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1txblk04.scala:29:119 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1txblk04.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1txblk04.scala:30:128 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHund",
      "stdout": "",
      "timestamp": 1659803833
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val newList = list.sortWith((a, b) => a < b).reverse\n        val newLen = newList.size\n        val newList2 = newList.map(x => if (x == 0) \"Zero\" else if (x == 1) \"One\" else if (x == 2) \"Two\" else if (x == 3) \"Three\" else if (x == 4) \"Four\" else if (x == 5) \"Five\" else if (x == 6) \"Six\" else if (x == 7) \"Seven\" else if (x == 8) \"Eight\" else if (x == 9) \"Nine\" else x.toString)\n        val newLen2 = newList2.size\n        if (newLen != len) newList2\n        else if (newLen2 == 0) List()\n        else newList2\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpa3jxmz4_.scala:30)\n\tat Problem.main(tmpa3jxmz4_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659803857
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val ones = list.filter(_ < 10).toList\n        val tens = list.filter(_ >= 10 && _ < 20).toList\n        val teens = list.filter(_ >= 20 && _ < 30).toList\n        val hundreds = list.filter(_ >= 30).toList\n        val thousands = list.filter(_ >= 100).toList\n        val millions = list.filter(_ >= 1000).toList\n        val billions = list.filter(_ >= 10000).toList\n        val trillions = list.filter(_ >= 100000).toList\n        val quadrillions = list.filter(_ >= 1000000).toList\n        val quintillions = list.filter(_ >= 10000000).toList\n        val sextillions = list.filter(_ >= 100000000).toList\n        val septillions = list.filter(_ >= 1000000000).toList\n        val octillions = list.filter(_ >= 10000000000).toList\n        val nonillions = list.filter(_ >= 100000000000).toList\n        val decillions = list.filter(_ >= 1000000000000).toList\n        val undecillions = list.filter(_ >= 10000000000000).toList\n        val duodecillions = list.filter(_ >= 100000000000000).toList\n        val tredecillions = list.filter(_ >= 1000000000000000).toList\n        val quattuordecillions = list.filter(_ >= 10000000000000000).toList\n        val quindecillions = list.filter(_ >= 100000000000000000).toList\n        val sexdecillions = list.filter(_ >= 1000000000000000000).toList\n        val septendecillions = list.filter(_ >= 10000000000000000000).toList\n        val octodecillions = list.filter(_ >= 100000000000000000000).toList\n        val novemdecillions = list.filter(_ >= 1000000000000000000000).toList\n        val vigintillions = list.filter(_ >= 10000000000000000000000).toList\n        val unvigintillions = list.filter(_ >= 100000000000000000000000).toList\n        val duovigintillions = list.filter(_ >= 1000000000000000000000000).toList\n        val trevigintillions = list.filter(_ >= 10000000000000000000000000).toList\n        val quattuorvigintillions = list.filter(_ >= 100000000000000000000000000).toList\n        val quinvigintillions = list.filter(_ >= 1000000000000000000000000000\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwo5zq2b9.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpwo5zq2b9.scala:20:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtens\u001b[0m = list.filter(_ >= \u001b[31m10\u001b[0m && _ < \u001b[31m20\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpwo5zq2b9.scala:21:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mteens\u001b[0m = list.filter(_ >= \u001b[31m20\u001b[0m && _ < \u001b[31m30\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- Error: /tmp/tmpwo5zq2b9.scala:31:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moctillions\u001b[0m = list.filter(_ >= \u001b[31m10000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpwo5zq2b9.scala:32:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnonillions\u001b[0m = list.filter(_ >= \u001b[31m100000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpwo5zq2b9.scala:33:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdecillions\u001b[0m = list.filter(_ >= \u001b[31m1000000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpwo5zq2b9.scala:34:44 --------------------------------",
      "stdout": "",
      "timestamp": 1659803855
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ >= 10 && _ <= 99).toList\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val tensReversedString = tensReversed.mkString(\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val onesReversedString = onesReversed.mkString(\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val onesReversedStringList = onesReversedString.split(\"One\").map(_.toInt)\n        val tensReversedStringList = tensReversedString.split(\"Two\").map(_.toInt)\n        val onesReversedStringList = onesReversedString.split(\"Three\").map(_.toInt)\n        val tensReversedStringList = tensReversedString.split(\"Four\").map(_.toInt)\n        val onesReversedStringList = onesReversedString.split(\"Five\").map(_.toInt)\n        val tensReversedStringList = tensReversedString.split(\"Six\").map(_.toInt)\n        val onesReversedStringList = onesReversedString.split(\"Seven\").map(_.toInt)\n        val tensReversedStringList = tensReversedString.split(\"Eight\").map(_.toInt)\n        val onesReversedStringList = onesReversedString.split(\"Nine\").map(_.toInt)\n        val onesReversedStringList = onesReversedString.split(\"Ten\").map(_.toInt)\n        val tensReversedStringList = tensReversedString.split(\"Eleven\").map(_.toInt)\n        val onesReversedStringList = onesReversedString.split(\"Twelve\").map(_.toInt)\n        val tensReversedStringList = tensReversedString.split(\"Thirteen\").map(_.toInt)\n        val onesReversedStringList = onesReversedString.split(\"Fourteen\").map(_.toInt)\n        val tensReversedStringList = tensReversedString.split(\"Fifteen\").map(_.toInt)\n        val onesReversedStringList = onesReversedString.split(\"Sixteen\").map(_.toInt)\n        val tensReversedStringList = tensReversedString.split(\"Seventeen\").map(_.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsgvib7dr.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringList\u001b[0m = onesReversedString.split(\u001b[31m\"Three\"\u001b[0m).map(_.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedStringList is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesReversedStringList\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsgvib7dr.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringList\u001b[0m = tensReversedString.split(\u001b[31m\"Four\"\u001b[0m).map(_.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringList is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringList\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsgvib7dr.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringList\u001b[0m = onesReversedString.split(\u001b[31m\"Five\"\u001b[0m).map(_.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedStringList is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesReversedStringList\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsgvib7dr.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringList\u001b[0m = tensReversedString.split(\u001b[31m\"Six\"\u001b[0m).map(_.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringList is already defined as \u001b[33mvalue\u001b[0",
      "stdout": "",
      "timestamp": 1659803857
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val len = nums.map(_.toString.length).max\n        val maxNum = nums.max\n        val minNum = nums.min\n        val maxLen = len\n        val minLen = len\n        val maxNumStr = maxNum.toString\n        val minNumStr = minNum.toString\n        val maxLenStr = maxLen.toString\n        val minLenStr = minLen.toString\n        val maxNumLen = maxNumStr.length\n        val minNumLen = minNumStr.length\n        val maxLenLen = maxLenStr.length\n        val minLenLen = minLenStr.length\n        val maxNumDigits = maxNumStr.dropWhile(_ == '0').length\n        val minNumDigits = minNumStr.dropWhile(_ == '0').length\n        val maxLenDigits = maxLenStr.dropWhile(_ == '0').length\n        val minLenDigits = minLenStr.dropWhile(_ == '0').length\n        val maxNumDigitLen = maxNumDigits.toString\n        val minNumDigitLen = minNumDigits.toString\n        val maxLenDigitLen = maxLenDigits.toString\n        val minLenDigitLen = minLenDigits.toString\n        val maxNumDigitLenLen = maxNumDigitLen.toString\n        val minNumDigitLenLen = minNumDigitLen.toString\n        val maxLenDigitLenLen = maxLenDigitLen.toString\n        val minLenDigitLenLen = minLenDigitLen.toString\n        val maxNumDigitLenLen = maxNumDigitLenLen.toString\n        val minNumDigitLenLen = minNumDigitLenLen.toString\n        val maxLenDigitLenLen = maxLenDigitLenLen.toString\n        val minLenDigitLenLen = minLenDigitLenLen.toString\n        val maxNumDigitLenLen = maxNumDigitLenLen.toString\n        val minNumDigitLenLen = minNumDigitLenLen.toString\n        val maxLenDigitLenLen = maxLenDigitLenLen.toString\n        val minLenDigitLenLen = minLenDigitLenLen.toString\n        val maxNumDigitLenLen = maxNumDigitLenLen.toString\n        val minNumDigitLenLen = minNumDigitLenLen.toString\n        val maxLenDigitLenLen = maxLenDigitLenLen.toString\n        val minLenDigitLenLen = minLenDigitLenLen.toString\n        val maxNumDigitLenLen = maxNumDigitLenLen.toString\n        val minNum\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbzpe94zm.scala:57:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbzpe94zm.scala:43:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxNumDigitLenLen\u001b[0m = maxNumDigitLenLen.toString\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxNumDigitLenLen is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxNumDigitLenLen\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbzpe94zm.scala:44:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mminNumDigitLenLen\u001b[0m = minNumDigitLenLen.toString\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mminNumDigitLenLen is already defined as \u001b[33mvalue\u001b[0m \u001b[35mminNumDigitLenLen\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbzpe94zm.scala:45:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenDigitLenLen\u001b[0m = maxLenDigitLenLen.toString\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenDigitLenLen is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenDigitLenLen\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbzpe94zm.scala:46:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mminLenDigitLenLen\u001b[0m = minLenDigitLenLen.toString\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mminLenDigitLenLen is already defined as \u001b[33mvalue\u001b[0m \u001b[35mminLenDigitLenLen\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overlo",
      "stdout": "",
      "timestamp": 1659803857
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x => x >= 9 && x < 99).toList\n        val hundreds = arr.filter(x => x >= 99).toList\n        val hundredsReversed = hundreds.reverse\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesAndTens = onesReversed.zip(tensReversed)\n        val onesAndHundreds = onesAndTens.zip(hundredsReversed)\n        val onesAndHundredsReversed = onesAndHundreds.reverse\n        val onesAndHundredsReversedZipped = onesAndHundredsReversed.zip(onesAndHundredsReversed)\n        val onesAndHundredsReversedZippedReversed = onesAndHundredsReversedZipped.reverse\n        val onesAndHundredsReversedZippedReversedZipped = onesAndHundredsReversedZippedReversed.zip(onesAndHundredsReversedZippedReversed)\n        val onesAndHundredsReversedZippedReversedZippedReversed = onesAndHundredsReversedZippedReversedZipped.reverse\n        val onesAndHundredsReversedZippedReversedZippedReversedZipped = onesAndHundredsReversedZippedReversedZippedReversedZipped.zip(onesAndHundredsReversedZippedReversedZippedReversed)\n        val onesAndHundredsReversedZippedReversedZippedReversedZippedReversed = onesAndHundredsReversedZippedReversedZippedReversedZippedReversed.zip(onesAndHundredsReversedZippedReversedZippedReversedZippedReversed)\n        val onesAndHundredsReversedZippedReversedZippedReversedZippedReversedZipped = onesAndHundredsReversedZippedReversedZippedReversedZippedReversedZippedReversed.zip(onesAndHundredsReversedZippedReversedZippedReversedZippedReversedZipped)\n        val onesAndHundredsReversedZippedReversedZippedReversedZippedReversedZippedReversed = onesAndHundredsReversedZippedReversedZippedReversedZippedReversedZippedReversed.zip(onesAndHundred\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2fzu1qsp.scala:34:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp2fzu1qsp.scala:30:72 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndHundredsReversedZippedReversedZippedReversedZipped\u001b[0m = onesAndHundredsReversedZippedReversedZippedReversedZipped.zip(onesAndHundredsReversedZippedReversedZippedReversed)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35monesAndHundredsReversedZippedReversedZippedReversedZipped\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp2fzu1qsp.scala:31:80 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndHundredsReversedZippedReversedZippedReversedZippedReversed\u001b[0m = onesAndHundredsReversedZippedReversedZippedReversedZippedReversed.zip(onesAndHundredsReversedZippedReversedZippedReversedZippedReversed)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35monesAndHundredsReversedZippedReversedZippedReversedZippedReversed\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp2fzu1qsp.scala:33:94 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndHundredsReversedZippedReversedZippedReversedZippedReversedZippedReversed\u001b[0m = onesAndHundredsReversedZippedReversedZippedReversedZippedReversedZippedReversed.zip(onesAndHundred\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  onesAndHundredsReversedZippedReversedZippedReversedZippedReversedZippedRevers",
      "stdout": "",
      "timestamp": 1659803857
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val arr = arr.toList\n        val len = arr.size\n        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n        val oneThousandThousands = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n        val oneThousandThousandHundredThousands = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999999l.toLong)\n        val oneThousandThousandHundredThousandHundreds = arr.filter(x => x >= 100000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n        val oneThousandThousandHundredThousandHundredThousands = arr.filter(x => x >= 10000000000000000l.toLong && x <= 999999999999999999999999999l.toLong)\n        val oneThousandThousandHundredThousandHundredThousandHundreds = arr.filter(x => x >= 100000000000000000l.toLong && x <= 9999999999999999999999999999999l.toLong)\n        val oneThousandThousandHundredThousandHundredThousandHundredThousands = arr.filter(x => x >= 1000000000000000000l.toLong && x <= 99999999999999999999999999999999999l.toLong)\n        val oneThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpkuv6tbjw.scala:29:101 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkuv6tbjw.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpkuv6tbjw.scala:30:110 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkuv6tbjw.scala:31:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousandHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.toLong && x <= \u001b[31m999999999999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpkuv6tbjw.scala:31:120 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousandHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m",
      "stdout": "",
      "timestamp": 1659803857
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x => x >= 9 && x < 99).toList\n        val tensReversed = tens.reverse\n        val tensReversedString = tensReversed.map(x => x.toString).mkString(\"\")\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => x.toString).mkString(\"\")\n        val tensReversedString = tensReversedString.replaceAll(\"\\\\D\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"\\\\D\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^0\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^1\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^2\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^3\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^4\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^5\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^6\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^7\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^8\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^9\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^10\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^11\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^12\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^13\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^14\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^15\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^16\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^17\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^18\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^19\", \"\")\n        val onesReverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeop1lxlq.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpeop1lxlq.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversedString.replaceAll(\u001b[31m\"\\\\D\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtensReversedString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpeop1lxlq.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversedString.replaceAll(\u001b[31m\"\\\\D\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedString is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesReversedString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpeop1lxlq.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversedString.replaceAll(\u001b[31m\"^0\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedString is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesReversedString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpeop1lxlq.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversedString.replaceAll(\u001b[31m\"^1\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659803857
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ >= 10 && _ <=99).toList\n        val hundreds = arr.filter(_ >= 100 && _ <= 999).toList\n        val thousands = arr.filter(_ >= 1000)\n        val hundredsString = hundreds.map(_ => hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundred\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpntmdfp97.scala:22:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpntmdfp97.scala:18:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtens\u001b[0m = arr.filter(_ >= \u001b[31m10\u001b[0m && _ <=\u001b[31m99\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpntmdfp97.scala:19:34 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundreds\u001b[0m = arr.filter(_ >= \u001b[31m100\u001b[0m && _ <= \u001b[31m999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpntmdfp97.scala:21:64 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsString\u001b[0m = hundreds.map(_ => hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map(hundreds.indexOf(_) + \u001b[31m1\u001b[0m).map",
      "stdout": "",
      "timestamp": 1659803860
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n        val oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000l.toLong && x <= 9999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000l.toLong && x <= 99999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000l.toLong && x <= 999999999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp1txblk04.scala:28:118 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1txblk04.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1txblk04.scala:29:119 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1txblk04.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1txblk04.scala:30:128 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHund",
      "stdout": "",
      "timestamp": 1659803833
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val reversed = list.sortWith(_ < _)\n        val result = reversed.reverse.map(x => if (x < 10) \"One\" else if (x < 100) \"Two\" else if (x < 1000) \"Three\" else if (x < 10000) \"Four\" else \"Five\" else if (x < 100000) \"Six\" else if (x < 1000000) \"Seven\" else \"Eight\" else if (x < 10000000) \"Nine\" else \"Zero\")\n        val finalResult = result.map(x => if (x.toString.length == 1) x else x.toString + \" \" + x)\n        if (finalResult.isEmpty) Nil\n        else finalResult\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp11thgt55.scala:20:155 --------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reversed.reverse.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x < \u001b[31m10\u001b[0m) \u001b[31m\"One\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m100\u001b[0m) \u001b[31m\"Two\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m1000\u001b[0m) \u001b[31m\"Three\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m10000\u001b[0m) \u001b[31m\"Four\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Five\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m100000\u001b[0m) \u001b[31m\"Six\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m1000000\u001b[0m) \u001b[31m\"Seven\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Eight\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m10000000\u001b[0m) \u001b[31m\"Nine\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Zero\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                           ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          ')' expected, but 'else' found\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803854
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList.sortWith(_ < _)\n        val reversed = nums.reverse\n        val result = reversed.map(x => if (x < 10) \"One\" else if (x < 20) \"Two\" else if (x < 30) \"Three\" else if (x < 40) \"Four\" else if (x < 50) \"Five\" else if (x < 60) \"Six\" else if (x < 70) \"Seven\" else if (x < 80) \"Eight\" else \"Nine\")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfbghrmga.scala:23)\n\tat Problem.main(tmpfbghrmga.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659803859
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val len = arr.size\n        if (len == 0) return Nil\n        val min = arr.min\n        val max = arr.max\n        val ones = arr.filter(x => x < min || x > max).map(x => One(x))\n        val tens = arr.filter(x => x >= min && x <= max).map(x => Ten(x))\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val tensReversedString = tensReversed.mkString(\"\")\n        val onesReversedString = onesReversed.mkString(\"\")\n        val onesReversedStringLength = onesReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val onesReversedStringLength = onesReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val onesReversedStringLength = onesReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val onesReversedStringLength = onesReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val onesReversedStringLength = onesReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val onesReversedStringLength = onesReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val onesReversedStringLength = onesReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val onesReversedStringLength = onesReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val onesReversedStringLength = onesReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val onesReversedStringLength = onesReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val onesReversedStringLength = onesReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val onesReversedStringLength = onesReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val onesReversedStringLength = onesReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val onesReversedString\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumxggsyr.scala:54:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpumxggsyr.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringLength\u001b[0m = onesReversedString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesReversedStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpumxggsyr.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringLength\u001b[0m = tensReversedString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpumxggsyr.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringLength\u001b[0m = onesReversedString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesReversedStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpumxggsyr.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringLength\u001b[0m = tensReversedString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringLength is already",
      "stdout": "",
      "timestamp": 1659803858
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val reversed = list.sortWith(_ < _)\n        val ones = reversed.filter(_ < 10)\n        val tens = reversed.filter(_ >= 10)\n        val tensReversed = tens.reverse\n        val tensReversedList = tensReversed.toList\n        val tensReversedLen = tensReversedList.size\n        val tensReversedReversed = tensReversedList.sortWith(_ < _)\n        val tensReversedReversedList = tensReversedReversed.toList\n        val tensReversedReversedLen = tensReversedReversedList.size\n        val tensReversedReversedReversed = tensReversedReversedList.sortWith(_ < _)\n        val tensReversedReversedReversedList = tensReversedReversedReversed.toList\n        val tensReversedReversedReversedLen = tensReversedReversedReversedList.size\n        val tensReversedReversedReversedReversed = tensReversedReversedReversedList.sortWith(_ < _)\n        val tensReversedReversedReversedReversedList = tensReversedReversedReversedReversedReversed.toList\n        val tensReversedReversedReversedReversedLen = tensReversedReversedReversedReversedReversedList.size\n        val tensReversedReversedReversedReversedReversed = tensReversedReversedReversedReversedReversedList.sortWith(_ < _)\n        val tensReversedReversedReversedReversedReversedList = tensReversedReversedReversedReversedReversedReversed.toList\n        val tensReversedReversedReversedReversedReversedLen = tensReversedReversedReversedReversedReversedReversedList.size\n        val tensReversedReversedReversedReversedReversedReversed = tensReversedReversedReversedReversedReversedReversedList.sortWith(_ < _)\n        val tensReversedReversedReversedReversedReversedReversedList = tensReversedReversedReversedReversedReversedReversedReversedReversed.toList\n        val tensReversedReversedReversedReversedReversedReversedLen = tensReversedReversedReversedReversedReversedReversedReversedList.size\n        val ten\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpji2wdyoo.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpji2wdyoo.scala:38:71 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedReversedReversedReversedReversedReversedList\u001b[0m = tensReversedReversedReversedReversedReversedReversedReversedReversed.toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNot found: tensReversedReversedReversedReversedReversedReversedReversedReversed\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpji2wdyoo.scala:39:70 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedReversedReversedReversedReversedReversedLen\u001b[0m = tensReversedReversedReversedReversedReversedReversedReversedList.size\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNot found: tensReversedReversedReversedReversedReversedReversedReversedList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpji2wdyoo.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659803858
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x => x >= 9 && x < 99).toList\n        val hundreds = arr.filter(x => x >= 99).toList\n        val hundredsReversed = hundreds.reverse\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedWithOnes = onesReversed.map(x => if (x == 1) \"One\" else x.toString)\n        val tensReversedWithOnes = tensReversed.map(x => if (x == 1) \"One\" else x.toString)\n        val hundredsReversedWithOnes = hundredsReversed.map(x => if (x == 1) \"One\" else x.toString)\n        val hundredsReversedWithOnesAndTens = hundredsReversed.map(x => if (x == 1) \"One\" else x.toString).zip(tensReversed)\n        val hundredsReversedWithOnesAndTensAndOnes = hundredsReversed.map(x => if (x == 1) \"One\" else x.toString).zip(tensReversed).zip(onesReversed)\n        val hundredsReversedWithOnesAndTensAndOnesAndTens = hundredsReversed.map(x => if (x == 1) \"One\" else x.toString).zip(tensReversed).zip(onesReversed).zip(tensReversed)\n        val hundredsReversedWithOnesAndTensAndOnesAndTensAndOnes = hundredsReversed.map(x => if (x == 1) \"One\" else x.toString).zip(tensReversed).zip(onesReversed).zip(tensReversed).zip(onesReversed)\n        val hundredsReversedWithOnesAndTensAndOnesAndTensAndOnesAndOnes = hundredsReversed.map(x => if (x == 1) \"One\" else x.toString).zip(tensReversed).zip(onesReversed).zip(tensReversed).zip(onesReversed).zip(onesReversed)\n        val hundredsReversedWithOnesAndTensAndOnesAndTensAndOnesAndOnesAndTens = hundredsReversed.map(x => if (x == 1) \"One\" else x.toString).zip(tensReversed).zip(onesReversed).zip(tensReversed).zip(onesReversed).zip(onesReversed).zip(tensReversed)\n        val hundredsReversedWithOnesAndTensAndOnesAndTensAndOnesAndOne\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsshu777o.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsshu777o.scala:33:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803858
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val len = arr.length\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands = arr.filter(_ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_ <= 999999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999999999999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9subr2r3.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9subr2r3.scala:25:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9subr2r3.scala:26:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9subr2r3.scala:27:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9subr2r3.scala:28:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9subr2r3.scala:29:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999999999\u001b[0m).toList\n\u001b[31m",
      "stdout": "",
      "timestamp": 1659803858
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands = arr.filter(_ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_ <= 999999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n        val oneHund\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp27egg173.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp27egg173.scala:24:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp27egg173.scala:25:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp27egg173.scala:26:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp27egg173.scala:27:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp27egg173.scala:28:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999999999\u001b[0m).toList\n\u001b[31m",
      "stdout": "",
      "timestamp": 1659803858
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x => x >= 9 && x < 99).toList\n        val hundreds = arr.filter(x => x >= 99).toList\n        val hundredsReversed = hundreds.reverse\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n        val tensReversedString = tensReversed.map(x => Two(x))\n        val hundredsReversedString = hundredsReversed.map(x => Three(x))\n        val hundredsReversedString2 = hundredsReversed.map(x => Four(x))\n        val hundredsReversedString3 = hundredsReversed.map(x => Five(x))\n        val hundredsReversedString4 = hundredsReversed.map(x => Six(x))\n        val hundredsReversedString5 = hundredsReversed.map(x => Seven(x))\n        val hundredsReversedString6 = hundredsReversed.map(x => Eight(x))\n        val hundredsReversedString7 = hundredsReversed.map(x => Nine(x))\n        val hundredsReversedString8 = hundredsReversed.map(x => Ten(x))\n        val hundredsReversedString9hundredsReversedString10hundredsReversedString11hundredsReversedString12hundredsReversedString13hundredsReversedString14hundredsReversedString15hundredsReversedString16hundredsReversedString17hundredsReversedString18hundredsReversedString19hundredsReversedString20hundredsReversedString21hundredsReversedString22hundredsReversedString23hundredsReversedString24hundredsReversedString25hundredsReversedString26hundredsReversedString27hundredsReversedString28hundredsReversedString29hundredsReversedString30hundredsReversedString31hundredsReversedString32hundredsReversedString33hundredsReversedString34hundredsReversedString35hundredsReversedString36hundredsReversedString37hundredsReversedString38hundredsReversedString39hundredsReversedString40hundredsReversedString41hundredsReversedString42\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4x1lvn1z.scala:34:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4x1lvn1z.scala:23:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => One(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4x1lvn1z.scala:24:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => Two(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: Two\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4x1lvn1z.scala:25:63 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsReversedString\u001b[0m = hundredsReversed.map(\u001b[36mx\u001b[0m => Three(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: Three\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4x1lvn1z.scala:26:64 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsReversedString2\u001b[0m = hundredsReversed.map(\u001b[36mx\u001b[0m => Four(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                         Not found: Four\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-expl",
      "stdout": "",
      "timestamp": 1659803859
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong)\n        if (nums.isEmpty) List()\n        else nums.sortWith(_ < _).reverse.map(_.toString).map(name => s\"${name.toLowerCase()}\").toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpm7ccq2v3.scala:17:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnums\u001b[0m = arr.filter(_ >= \u001b[31m1l\u001b[0m.toLong && _ <= \u001b[31m9l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Wrong number of parameters, expected: 1\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803856
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        var i = 0\n        while (i < arr.length) {\n            val num = arr(i)\n            if (num < 1 || num > 9) {\n                result.clear()\n                return\n            }\n            val digit = num.toString.toInt\n            val name = if (digit == 1) \"One\" else if (digit == 2) \"Two\" else if (digit == 3) \"Three\" else if (digit == 4) \"Four\" else if (digit == 5) \"Five\" else if (digit == 6) \"Six\" else if (digit == 7) \"Seven\" else if (digit == 8) \"Eight\" else if (digit == 9) \"Nine\" else null\n            if (name != null) result += name\n            i += 1\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe0810lty.scala:17:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe0810lty.scala:23:16 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                \u001b[33mreturn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    Unit\n\u001b[31m   |\u001b[0m                Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803859
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 9).map(x => s\"One\")\n        val twos = arr.filter(x => x < 18).map(x => s\"Two\")\n        val threes = arr.filter(x => x < 27).map(x => s\"Three\")\n        val fours = arr.filter(x => x < 36).map(x => s\"Four\")\n        val fives = arr.filter(x => x < 45).map(x => s\"Five\")\n        val sixes = arr.filter(x => x < 54).map(x => s\"Six\")\n        val sevens = arr.filter(x => x < 63).map(x => s\"Seven\")\n        val eights = arr.filter(x => x < 72).map(x => s\"Eight\")\n        val nines = arr.filter(x => x < 81).map(x => s\"Nine\")\n        val reversed = arr.reverse\n        val result = reversed.map(x => x match {\n            case x if x < 10 => ones(x)\n            case x if x < 20 => twos(x)\n            case x if x < 30 => threes(x)\n            case x if x < 40 => fours(x)\n            case x if x < 50 => fives(x)\n            case x if x < 60 => sixes(x)\n            case x if x < 70 => sevens(x)\n            case x if x < 80 => eights(x)\n            case x if x < 90 => nines(x)\n            case _ => \"\"\n        })\n        result.filter(x => x.nonEmpty).map(x => x.mkString(\"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2odtke99.scala:28:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            \u001b[33mcase\u001b[0m x \u001b[33mif\u001b[0m x < \u001b[31m10\u001b[0m => ones(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (x : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2odtke99.scala:29:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mcase\u001b[0m x \u001b[33mif\u001b[0m x < \u001b[31m20\u001b[0m => twos(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (x : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2odtke99.scala:30:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mcase\u001b[0m x \u001b[33mif\u001b[0m x < \u001b[31m30\u001b[0m => threes(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (x : Long)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2odtke99.scala:31:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            \u001b[33mcase\u001b[0m x \u001b[33mif\u001b[0m x < \u001b[31m40\u001b[0m => fours(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (x : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2odtke99.scala:32:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mcase\u001b[0m x \u001b[33mif\u001b[0m x < \u001b[31m50\u001b[0m => fives(x)\n\u001b[31",
      "stdout": "",
      "timestamp": 1659803863
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.sortWith(_ < _)\n        val reversed = result.reverse\n        val reversedStrings = reversed.map(_.toString)\n        val reversedStringsMap = new mutable.HashMap[String, String]()\n        reversedStrings.foreach(s => reversedStringsMap(s.toInt) = s)\n        reversedStrings.map(reversedStringsMap.get(_))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw2dypi9m.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversedStringsMap\u001b[0m = \u001b[33mnew\u001b[0m mutable.HashMap[\u001b[35mString\u001b[0m, \u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803859
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val len = nums.map(_.toString.length).max\n        val numsSorted = nums.sortBy(_.toString.length)\n        val reversed = numsSorted.reverse\n        val result = reversed.map(num => {\n            val digit = num.toString.charAt(len - num.toString.length)\n            val name = if (digit == '1') \"One\" else if (digit == '2') \"Two\" else if (digit == '3') \"Three\" else if (digit == '4') \"Four\" else if (digit == '5') \"Five\" else if (digit == '6') \"Six\" else if (digit == '7') \"Seven\" else if (digit == '8') \"Eight\" else if (digit == '9') \"Nine\" else \"?\"\n            name + digit\n        })\n        if (result.isEmpty) Nil else result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvp8nz78w.scala:29)\n\tat Problem.main(tmpvp8nz78w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659803870
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ >= 1l && _ <= 9l).sortWith(_ < _).reverse\n        val map = Map(\"One\" -> 1l, \"Two\" -> 2l, \"Three\" -> 3l, \"Four\" -> 4l, \"Five\" -> 5l, \"Six\" -> 6l, \"Seven\" -> 7l, \"Eight\" -> 8l, \"Nine\" -> 9l)\n        val result2 = result.map(x => map.getOrElse(x.toString, x))\n        result2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp9c6oxw2a.scala:17:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = arr.filter(_ >= \u001b[31m1l\u001b[0m && _ <= \u001b[31m9l\u001b[0m).sortWith(_ < _).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9c6oxw2a.scala:20:16 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        result2.toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    List[\u001b[1m\u001b[31mLong\u001b[0m]\n\u001b[31m   |\u001b[0m        Required: List[\u001b[1m\u001b[32mString\u001b[0m]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803867
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val arr = arr.toList\n        val len = arr.size\n        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x => x >= 9 && x < 99).toList\n        val hundreds = arr.filter(x => x >= 99).toList\n        val tensReversed = tens.reverse\n        val hundredsReversed = hundreds.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n        val tensReversedString = tensReversed.map(x => Two(x))\n        val hundredsReversedString = hundredsReversed.map(x => Three(x))\n        val hundredsReversedString2 = hundredsReversed.map(x => Four(x))\n        val hundredsReversedString3 = hundredsReversed.map(x => Five(x))\n        val hundredsReversedString4 = hundredsReversed.map(x => Six(x))\n        val hundredsReversedString5 = hundredsReversed.map(x => Seven(x))\n        val hundredsReversedString6 = hundredsReversed.map(x => Eight(x))\n        val hundredsReversedString7 = hundredsReversed.map(x => Nine(x))\n        val hundredsReversedString8 = hundredsReversed.map(x => Ten(x))\n        val hundredsReversedString9hundredsReversedString = hundredsReversed.map(x => Ten(x))\n        val hundredsReversedString10hundredsReversedString = hundredsReversed.map(x => Ten(x))\n        val hundredsReversedString11hundredsReversedString = hundredsReversed.map(x => Ten(x))\n        val hundredsReversedString12hundredsReversedString = hundredsReversed.map(x => Ten(x))\n        val hundredsReversedString13hundredsReversedString = hundredsReversed.map(x => Ten(x))\n        val hundredsReversedString14hundredsReversedString = hundredsReversed.map(x => Ten(x))\n        val hundredsReversedString15hundredsReversedString = hundredsReversed.map(x => Ten(x))\n        val hundredsReversedString16hundredsReversedString = hundredsReversed.map(x => Ten(x))\n        val hundredsReversedString17hundredsReversedString = hundredsReverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp9zdirx0f.scala:17:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9zdirx0f.scala:43:61 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsReversedString17hundredsReversedString\u001b[0m = hundredsReverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Not found: hundredsReverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zdirx0f.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659803868
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x => x < 99).toList\n        val hundreds = arr.filter(x => x < 999).toList\n        val thousands = arr.filter(x => x < 9999).toList\n        val tenThousands = arr.filter(x => x < 999999).toList\n        val oneThousands = arr.filter(x => x < 9999999).toList\n        val oneHundreds = arr.filter(x => x < 999999999).toList\n        val oneThousandThousands = arr.filter(x => x < 99999999999).toList\n        val oneHundredThousands = arr.filter(x => x < 999999999999).toList\n        val oneHundredThousandThousands = arr.filter(x => x < 999999999999999).toList\n        val oneHundredThousandThousands = arr.filter(x => x < 999999999999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(x => x < 999999999999999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(x => x < 9999999999999999999998).toList\n        val oneHundredThousandThousandThousands = arr.filter(x => x < 99999999999999999999987).toList\n        val oneHundredThousandThousandThousands = arr.filter(x => x < 999999999999999999999876).toList\n        val oneHundredThousandThousandThousands = arr.filter(x => x < 99999999999999999999987654).toList\n        val oneHundredThousandThousandThousands = arr.filter(x => x < 999999999999999999999876543).toList\n        val oneHundredThousandThousandThousands = arr.filter(x => x < 9999999999999999999998765432).toList\n        val oneHundredThousandThousandThousands = arr.filter(x => x < 99999999999999999999987654321).toList\n        val oneHundredThousandThousandThousands = arr.filter(x => x < 999999999999999999999876543210).toList\n        val oneHundredThousandThousandThousands = arr.filter(x => x < 9999999999999999999998765432101).toList\n        val oneHundredThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuzbexqy8.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpuzbexqy8.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x < \u001b[31m999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpuzbexqy8.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x < \u001b[31m9999999999999999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpuzbexqy8.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x < \u001b[31m99999999999999999999987\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error",
      "stdout": "",
      "timestamp": 1659803868
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val len = nums.map(_.toString.length).max\n        val maxNum = nums.max\n        val minNum = nums.min\n        val ones = nums.filter(_ < 1).toList\n        val tens = nums.filter(_ < 10).toList\n        val hundreds = nums.filter(_ < 100).toList\n        val thousands = nums.filter(_ < 1000).toList\n        val maxOnes = ones.max\n        val maxTens = tens.max\n        val maxHundreds = hundreds.max\n        val maxThousands = thousands.max\n        val maxNums = maxNum.toString.length\n        val maxOnesNum = maxOnes.toString.length\n        val maxTensNum = maxTens.toString.length\n        val maxHundredsNum = maxHundreds.toString.length\n        val maxThousandsNum = maxThousands.toString.length\n        val maxNumsNum = maxNums.toString.length\n        val onesNum = ones.toString.length\n        val tensNum = tens.toString.length\n        hundreds.reverse.map { x =>\n            val y = x.toString.reverse\n            val z = y.take(maxNumsNum - maxNumsNum - maxOnesNum - maxTensNum - maxHundredsNum - maxThousandsNum - maxNumsNum - onesNum).toList\n            val zStr = z.mkString(\"\")\n            val zNum = zStr.substring(0, maxNumsNum)\n            val zNumStr = zNum.toString.substring(0, maxOnesNum)\n            val zNumNum = zNumStr.substring(0, maxTensNum)\n            val zNumNumStr = zNumNum.toString.substring(0, maxHundredsNum)\n            val zNumNumNum = zNumNumStr.substring(0, maxThousandsNum)\n            val zNumNumNumStr = zNumNumNum.toString.substring(0, maxNumsNum)\n            val zNumNumNumNum = zNumNumNumStr.substring(0, onesNum)\n            val zNumNumNumNumStr = zNumNumNumNum.toString.substring(0, tensNum)\n            val zNumNumNumNumNum = zNumNumNumNumStr.substring(0, hundreds.size)\n            val zNumNumNumNumNumStr = zNumNumNumNumNum\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprkjllw7f.scala:61:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkjllw7f.scala:60:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmprkjllw7f.scala:52:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m52 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803869
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val ones = list.filter(_ <= 9).toList\n        val tens = list.filter(_ <= 99).toList\n        val hundreds = list.filter(_ <= 999).toList\n        val thousands = list.filter(_ <= 9999).toList\n        val tenThousands = list.filter(_ <= 999999).toList\n        val oneThousands = list.filter(_ <= 9999999).toList\n        val oneHundreds = list.filter(_ <= 999999999).toList\n        val oneThousandThousands = list.filter(_ <= 99999999999).toList\n        val oneHundredThousands = list.filter(_ <= 999999999999).toList\n        val oneThousandThousandThousands = list.filter(_ <= 999999999999999).toList\n        val oneHundredThousandThousands = list.filter(_ <= 999999999999999999).toList\n        val oneThousandThousandThousandThousands = list.filter(_ <= 999999999999999999999).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n        val oneThousandThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n        val oneThousandThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n        val oneThousandThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n        val oneThousandThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n        val oneThousandThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n        val oneHundredThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptmsikx7f.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptmsikx7f.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = list.filter(_ <= \u001b[31m999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptmsikx7f.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = list.filter(_ <= \u001b[31m999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptmsikx7f.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = list.filter(_ <= \u001b[31m999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161]",
      "stdout": "",
      "timestamp": 1659803869
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val length = list.size\n        val reversed = list.sortWith(_ < _)\n        val result = reversed.map(x => if (x < 10L) s\"$x\" else s\"${x}${byLength(list.filter(_ < x))}\")\n        if (length == 0) result\n        else result.filter(_ != \"One\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_w4ln53a.scala:25)\n\tat Problem.main(tmp_w4ln53a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659803871
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x => x >= 10 && x < 100).toList\n        val hundreds = arr.filter(x => x >= 100).toList\n        val names = ones + tens + hundreds\n        names.sortWith((x, y) => x < y)\n        names.reverse\n        names.map(x => if (x == 0) \"One\" else if (x == 1) \"Two\" else if (x == 2) \"Three\" else if (x == 3) \"Four\" else if (x == 4) \"Five\" else if (x == 5) \"Six\" else if (x == 6) \"Seven\" else if (x == 7) \"Eight\" else if (x == 8) \"Nine\" else x.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp22ughzsu.scala:20:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnames\u001b[0m = ones + tens + hundreds\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803869
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val len = arr.length\n        if (len == 0) List()\n        else if (len == 1) List(arr(0).asInstanceOf[String])\n        else arr.sortWith(_.toLong < _.toLong).reverse.map(_.asInstanceOf[String]).toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.ClassCastException: class java.lang.Long cannot be cast to class java.lang.String (java.lang.Long and java.lang.String are in module java.base of loader 'bootstrap')\n\tat Problem$.byLength$$anonfun$2(tmp66sb7k9g.scala:20)\n\tat Problem$.byLength$$anonfun$adapted$1(tmp66sb7k9g.scala:20)\n\tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.byLength(tmp66sb7k9g.scala:20)\n\tat Problem$.main(tmp66sb7k9g.scala:23)\n\tat Problem.main(tmp66sb7k9g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659803870
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ >= 10).toList\n        val tensReversed = tens.reverse\n        val tensReversedString = tensReversed.map(_.toString).mkString(\"\")\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(_.toString).mkString(\"\")\n        val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n        val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n        val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n        val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n        val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n        val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n        val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n        val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n        val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n        val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n        val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n        val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n        val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n        val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n        val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n        val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n        val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n        val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n        val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n        val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n        val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n        val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n        val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n        val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpv5ubco_z.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringList\u001b[0m = onesReversedString.split(\u001b[31m\"\\\\D+\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedStringList is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesReversedStringList\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpv5ubco_z.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringList\u001b[0m = tensReversedString.split(\u001b[31m\"\\\\D+\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringList is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringList\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpv5ubco_z.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringList\u001b[0m = onesReversedString.split(\u001b[31m\"\\\\D+\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedStringList is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesReversedStringList\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpv5ubco_z.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringList\u001b[0m = tensReversedString.split(\u001b[31m\"\\\\D+\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringList is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringList\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be de",
      "stdout": "",
      "timestamp": 1659803869
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val ones = list.filter(x => x < 9).toList\n        val tens = list.filter(x => x >= 9 && x < 99).toList\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val tensReversedString = tensReversed.map(x => x.toString).mkString(\"\")\n        val onesReversedString = onesReversed.map(x => x.toString).mkString(\"\")\n        val onesReversedStringWithOne = onesReversedString + onesReversedString\n        val tensReversedStringWithTen = tensReversedString + tensReversedString\n        val onesReversedStringWithTen = onesReversedString + tensReversedStringWithTen\n        val onesReversedStringWithTenAndOne = onesReversedString + tensReversedStringWithTen + onesReversedStringWithOne\n        val onesReversedStringWithTenAndOneAndTen = onesReversedString + tensReversedStringWithTen + onesReversedStringWithOne + tensReversedStringWithTen\n        val onesReversedStringWithTenAndOneAndTenAndFour = onesReversedString + tensReversedStringWithTen + onesReversedStringWithOne + tensReversedStringWithTen + onesReversedStringWithFour\n        val onesReversedStringWithTenAndOneAndTenAndFourAndThree = onesReversedString + tensReversedStringWithTen + onesReversedStringWithOne + tensReversedStringWithTen + onesReversedStringWithFour + tensReversedStringWithThree\n        val onesReversedStringWithTenAndOneAndTenAndFourAndThreeAndTwo = onesReversedString + tensReversedStringWithTen + onesReversedStringWithOne + tensReversedStringWithTen + onesReversedStringWithFour + tensReversedStringWithThree + tensReversedStringWithTwo\n        val onesReversedStringWithTenAndOneAndTenAndFourAndThreeAndTwoAndOne = onesReversedString + tensReversedStringWithTen + onesReversedStringWithOne + tensReversedStringWithTen + onesReversedStringWithFour + \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpqjkwktcr.scala:33:212 --------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringWithTenAndOneAndTenAndFourAndThreeAndTwoAndOne\u001b[0m = onesReversedString + tensReversedStringWithTen + onesReversedStringWithOne + tensReversedStringWithTen + onesReversedStringWithFour + \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqjkwktcr.scala:30:164 -----------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringWithTenAndOneAndTenAndFour\u001b[0m = onesReversedString + tensReversedStringWithTen + onesReversedStringWithOne + tensReversedStringWithTen + onesReversedStringWithFour\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: onesReversedStringWithFour\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqjkwktcr.scala:31:172 -----------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringWithTenAndOneAndTenAndFourAndThree\u001b[0m = onesReversedString + tensReversedStringWithTen + onesReversedStringWithOne + tensReversedStringWithTen + onesReversedStringWithFour + tensReversedStringWithThree\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[",
      "stdout": "",
      "timestamp": 1659803868
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ >= 10).toList\n        val tensReversed = tens.reverse\n        val tensReversedString = tensReversed.map(_.toString).mkString(\"\")\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(_.toString).mkString(\"\")\n        val tensReversedString = tensReversedString.replaceAll(\"\\\\D\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"\\\\D\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^0\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^1\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^2\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^3\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^4\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^5\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^6\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^7\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^8\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^9\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^10\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^11\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^12\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^13\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^14\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^15\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^16\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^17\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^18\", \"\")\n        val onesReversedString = onesReversedString.replaceAll(\"^19\", \"\")\n        val onesReversedString = onesReversedString.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpztb3206h.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversedString.replaceAll(\u001b[31m\"\\\\D\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtensReversedString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpztb3206h.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversedString.replaceAll(\u001b[31m\"\\\\D\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedString is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesReversedString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpztb3206h.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversedString.replaceAll(\u001b[31m\"^0\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedString is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesReversedString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpztb3206h.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversedString.replaceAll(\u001b[31m\"^1\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedString is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesReversedString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that o",
      "stdout": "",
      "timestamp": 1659803870
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val one = list.toSet\n        val two = list.toSet\n        val three = list.toSet\n        val four = list.toSet\n        val five = list.toSet\n        val six = list.toSet\n        val seven = list.toSet\n        val eight = list.toSet\n        val nine = list.toSet\n        val ten = list.toSet\n        val hundred = list.toSet\n        val thousand = list.toSet\n        val tenThousand = list.toSet\n        val oneHundred = list.toSet\n        val oneThousand = list.toSet\n        val oneHundredThousand = list.toSet\n        val oneThousandThousand = list.toSet\n        val oneHundredThousandThousand = list.toSet\n        val oneThousandThousandThousand = list.toSet\n        val oneHundredThousandThousandThousand = list.toSet\n        val oneThousandThousandThousandThousand = list.toSet\n        val oneHundredThousandThousandThousandThousand = list.toSet\n        val oneThousandThousandThousandThousandThousand = list.toSet\n        val oneHundredThousandThousandThousandThousandThousand = list.toSet\n        val oneThousandThousandThousandThousandThousandThousand = list.toSet\n        val oneHundredThousandThousandThousandThousandThousandThousand = list.toSet\n        val oneThousandThousandThousandThousandThousandThousandThousand = list.toSet\n        val oneHundredThousandThousandThousandThousandThousandThousandThousand = list.toSet\n        val oneThousandThousandThousandThousandThousandThousandThousandThousand = list.toSet\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousand = list.toSet\n        val oneThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptvyhd334.scala:50:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptvyhd334.scala:50:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803870
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds = arr.filter(x => x >= 100l.toLong)\n        val tensReversed = tens.reverse\n        val hundredsReversed = hundreds.reverse\n        val onesReversed = ones.reverse\n        val onesReversedWithNames = onesReversed.map(x => onesReversedWithName(x))\n        val tensReversedWithNames = tensReversed.map(x => tensReversedWithName(x))\n        val hundredsReversedWithNames = hundredsReversed.map(x => hundredsReversedWithName(x))\n        val result = onesReversedWithNames ++ tensReversedWithNames ++ hundredsReversedWithNames\n        val resultReversed = result.reverse\n        resultReversed.map(x => resultReversedWithName(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfea8ej54.scala:23:58 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedWithNames\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => onesReversedWithName(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: onesReversedWithName\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfea8ej54.scala:24:58 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedWithNames\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => tensReversedWithName(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: tensReversedWithName\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfea8ej54.scala:25:66 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsReversedWithNames\u001b[0m = hundredsReversed.map(\u001b[36mx\u001b[0m => hundredsReversedWithName(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: hundredsReversedWithName\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfea8ej54.scala:28:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        resultReversed.map(\u001b[36mx\u001b[0m => resultReversedWithName(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: resultReversedWithName\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659803867
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val result = new mutable.ListBuffer[String]()\n        val one = list.toSet\n        val ten = one.toSet\n        val hundred = ten.toSet\n        val thousand = hundred.toSet\n        val tenThousand = thousand.toSet\n        val oneThousand = tenThousand.toSet\n        val tenHundred = oneThousand.toSet\n        val oneHundred = tenHundred.toSet\n        val tenThousandHundred = oneHundred.toSet\n        val oneThousandHundred = tenThousandHundred.toSet\n        val tenHundredThousand = oneThousandHundred.toSet\n        val oneHundredThousand = tenHundredThousand.toSet\n        val tenThousandHundredThousand = oneHundredThousand.toSet\n        val oneThousandHundredThousand = tenThousandHundredThousand.toSet\n        val tenHundredThousandHundred = oneThousandHundredThousand.toSet\n        val oneHundredThousandHundred = tenHundredThousandHundred.toSet\n        val tenThousandHundredThousandHundred = oneHundredThousandHundred.toSet\n        val oneThousandHundredThousandHundred = tenThousandHundredThousandHundred.toSet\n        val tenHundredThousandHundredThousand = oneThousandHundredThousandHundred.toSet\n        val oneHundredThousandHundredThousand = tenHundredThousandHundredThousand.toSet\n        val tenThousandHundredThousandHundredThousand = oneHundredThousandHundredThousandHundred.toSet\n        val oneThousandHundredThousandHundredThousand = tenThousandHundredThousandHundredThousand.toSet\n        val tenHundredThousandHundredThousandHundred\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj20cvxzq.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj20cvxzq.scala:19:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj20cvxzq.scala:40:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandHundredThousandHundredThousand\u001b[0m = oneHundredThousandHundredThousandHundred.toSet\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: oneHundredThousandHundredThousandHundred\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj20cvxzq.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659803869
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val len = nums.map(_.toString.length).max\n        val numsSorted = nums.sortBy(_.toString.length)\n        val reversed = numsSorted.reverse\n        val result = reversed.map(_.toString).map(x => if (x.toString.length == len) x else x.toString.replaceAll(\"[0-9]\", \"One\").replaceAll(\"[0-9]\", \"Two\").replaceAll(\"[0-9]\", \"Three\").replaceAll(\"[0-9]\", \"Four\").replaceAll(\"[0-9]\", \"Five\").replaceAll(\"[0-9]\", \"Six\").replaceAll(\"[0-9]\", \"Seven\").replaceAll(\"[0-9]\", \"Eight\").replaceAll(\"[0-9]\", \"Nine\"))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp174eyyaj.scala:25)\n\tat Problem.main(tmp174eyyaj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659803873
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val hundredsReversed = hundreds.reverse\n        val thousandsReversed = thousands.reverse\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(_ + One).toList\n        val tensReversedString = tensReversed.map(_ + Two).toList\n        val hundredsReversedString = hundredsReversed.map(_ + Three).toList\n        val thousandsReversedString = thousandsReversed.map(_ + Four).toList\n        val hundredsReversedStringReversed = hundredsReversedString.reverse\n        val thousandsReversedStringReversed = thousandsReversedString.reverse\n        val tensReversedStringReversed = tensReversedString.reverse\n        val onesReversedStringReversed = onesReversedString.reverse\n        val onesReversedStringReversedString = onesReversedStringReversed.map(_ + Five).toList\n        val tensReversedStringReversedString = tensReversedStringReversed.map(_ + Six).toList\n        val hundredsReversedStringReversedString = hundredsReversedStringReversed.map(_ + Seven).toList\n        val thousandsReversedStringReversedString = thousandsReversedStringReversed.map(_ + Eight).toList\n        val hundredsReversedStringReversedStringReversed = hundredsReversedStringReversedString.reverse\n        val thousandsReversedStringReversedStringReversed = thousandsReversedStringReversedString.reverse\n        val tensReversedStringReversedStringReversed = tensReversedStringReversedString.reverse\n        val onesReversedStringReversedStringReversed = onesReversedStringReversedString.reverse\n        val onesReversedStringReversedStringReversedString = onesReversedStringReversedStringReversed.map(_ + Nine).toList\n        val tensReversedStringReversedStringReversedString = tensReversedStringReversedStringReversed.map(_ + One).toList\n        val hundredsReversedStringReversedStringReversedString = hundredsReverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2gxgbl8i.scala:25:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(_ + One).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2gxgbl8i.scala:26:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(_ + Two).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: Two\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2gxgbl8i.scala:27:62 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsReversedString\u001b[0m = hundredsReversed.map(_ + Three).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: Three\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2gxgbl8i.scala:28:64 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandsReversedString\u001b[0m = thousandsReversed.map(_ + Four).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                         Not found: Four\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2gxgbl8i.scala:33:80 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringReversedString\u001b[0m = onesReversedStringReversed.map(_ + Fi",
      "stdout": "",
      "timestamp": 1659803875
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val arr = arr.toList\n        val len = arr.length\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands = arr.filter(_ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_ <= 999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 9999999999999999999998).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999987).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999999876).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 9999999999999999999998765).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999987654).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999999876543).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 9999999999999999999998765432).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999987654321).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999999876543210).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyzyg3dk6.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyzyg3dk6.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyzyg3dk6.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyzyg3dk6.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999987\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyzyg3dk6.scala:33:12 --------------------",
      "stdout": "",
      "timestamp": 1659803871
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val tensReversedString = tensReversed.map(x => x.toString.replaceAll(\"\\\\D\", \"\"))\n        val tensReversedStringList = tensReversedString.toList\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => x.toString.replaceAll(\"\\\\D\", \"\"))\n        val onesReversedStringList = onesReversedString.toList\n        val onesReversedStringListWithOnes = onesReversedStringList.zip(onesReversedStringList).filter(_._1 == 1).toList\n        val onesReversedStringListWithOnesReversed = onesReversedStringListWithOnes.reverse\n        val onesReversedStringListWithOnesReversedString = onesReversedStringListWithOnesReversed.map(x => x._2.toString.replaceAll(\"\\\\D\", \"\"))\n        val onesReversedStringListWithOnesReversedStringList = onesReversedStringListWithOnesReversedString.toList\n        val onesReversedStringListWithOnesReversedStringListWithOnes = onesReversedStringListWithOnesReversedStringListWithOnes.reverse\n        val onesReversedStringListWithOnesReversedStringListWithOnesReversed = onesReversedStringListWithOnesReversedStringListWithOnesReversed.map(x => x._2.toString.replaceAll(\"\\\\D\", \"\"))\n        val onesReversedStringListWithOnesReversedStringListWithOnesReversedString = onesReversedStringListWithOnesReversedStringListWithOnesReversedString.toList\n        val onesReversedStringListWithOnesReversedStringListWithOnesReversedStringListWithOnes = onesReversedStringListWithOnesReversedStringListWithOnesReversedStringListWithOnes.reverse\n        val onesReversedStringListWithOnesReversedStringListWithOnesReversedStringListWithOnesReversedStringListWithOnes = onesReversedStringListWithOnesReversedStringListWithOnesReversedStringListWithOnesReversedStringListWithOnes.map(x => x._2.toString.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphkhdr5h_.scala:34:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmphkhdr5h_.scala:25:103 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringListWithOnes\u001b[0m = onesReversedStringList.zip(onesReversedStringList).filter(_._1 == \u001b[31m1\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                       ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         Values of types String and Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmphkhdr5h_.scala:29:71 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringListWithOnesReversedStringListWithOnes\u001b[0m = onesReversedStringListWithOnesReversedStringListWithOnes.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35monesReversedStringListWithOnesReversedStringListWithOnes\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmphkhdr5h_.scala:30:79 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringListWithOnesReversedStringListWithOnesReversed\u001b[0m = onesReversedStringListWithOnesReversedStringListWithOnesReversed.map(\u001b[36mx\u001b[0m => x._2.toString.replaceAll(\u001b[31m\"\\\\D\"\u001b[0m, \u001b[31m\"\"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35monesReversedStringListWithOnesReversedStringListWithOnesReversed\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmphkhdr5h_.scala:31:85 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedS",
      "stdout": "",
      "timestamp": 1659803873
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n        val oneThousandThousands = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n        val oneThousandThousandHundredThousands = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n        val oneThousandThousandHundredThousandHundreds = arr.filter(x => x >= 10000000000000l.toLong && x <= 9999999999999999999l.toLong)\n        val oneThousandThousandHundredThousandHundredThousands = arr.filter(x => x >= 100000000000000l.toLong && x <= 99999999999999999999l.toLong)\n        val oneThousandThousandHundredThousandHundredThousandHundreds = arr.filter(x => x >= 1000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n        val oneThousandThousandHundredThousandHundredThousandHundredThousands = arr.filter(x => x >= 10000000000000000l.toLong && x <= 999999999999999999999999999l.toLong)\n        val oneThousandThousandHundredThousandHundredThousandHundredThousandHundred\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpntrxo1ey.scala:28:109 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpntrxo1ey.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousandHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpntrxo1ey.scala:29:118 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousandHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpntrxo1ey.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousandHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpntrxo1ey.scala:30:126 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousandHundredThousandHundreds\u001b[0m = arr.filter(\u001b[3",
      "stdout": "",
      "timestamp": 1659803872
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong).map(x => x.toString).sorted\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong).map(x => x.toString).sorted\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong).map(x => x.toString).sorted\n        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong).map(x => x.toString).sorted\n        val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong).map(x => x.toString).sorted\n        val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong).map(x => x.toString).sorted\n        val oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong).map(x => x.toString).sorted\n        val oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong).map(x => x.toString).sorted\n        val oneThousandThousands = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong).map(x => x.toString).sorted\n        val oneThousandThousandHundreds = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong).map(x => x.toString).sorted\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong).map(x => x.toString).sorted\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000l.toLong && x <= 9999999999999999999l.toLong).map(x => x.toString).sorted\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000l.toLong && x <= 99999999999999999999l.toLong).map(x => x.toString).sorted\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000l.toLong && x <= 99999999999999999999999l.toLong).map(x => x.toString).sorted\n        val one\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpyj5au351.scala:28:103 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => x.toString).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyj5au351.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => x.toString).sorted\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyj5au351.scala:29:106 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => x.toString).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyj5au351.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => x.toString).sorted\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyj5au351.scala:30:114 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval",
      "stdout": "",
      "timestamp": 1659803872
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedWithTens = onesReversed.zip(tensReversed)\n        val onesReversedWithTensReversed = onesReversedWithTens.reverse\n        val onesReversedWithTensReversedWithOnes = onesReversedWithTensReversed.zip(onesReversed)\n        val onesReversedWithTensReversedWithOnesReversed = onesReversedWithTensReversedWithOnes.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTens = onesReversedWithTensReversedWithOnesReversed.zip(tensReversed)\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversed = onesReversedWithTensReversedWithOnesReversedWithTens.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes = onesReversedWithTensReversedWithOnesReversedWithTensReversed.zip(onesReversed)\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversed = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTens = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversed.zip(tensReversed)\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTens.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed.zip(onesReversed)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3u8inb41.scala:33:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803872
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n        val hundredThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val thousandThousands = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n        val oneThousands = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n        val oneHundreds = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n        val oneThousandThousands = arr.filter(x => x >= 100000000000l.toLong && x <= 999999999999999l.toLong)\n        val oneHundredThousands = arr.filter(x => x >= 100000000000000l.toLong && x <= 9999999999999999999l.toLong)\n        val oneThousandThousandThousands = arr.filter(x => x >= 10000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n        val oneHundredThousandThousands = arr.filter(x => x >= 100000000000000000l.toLong && x <= 999999999999999999999999999l.toLong)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000000l.toLong && x <= 9999999999999999999999999999999l.toLong)\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000000000l.toLong && x <= 99999999999999999999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000000000l.toLong && x <= 999999999999999999999999999999999999999l.toLong)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpdri3z69w.scala:28:87 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdri3z69w.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdri3z69w.scala:29:98 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdri3z69w.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000l\u001b[0m.toLong && x <= \u001b[31m999999999999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdri3z69w.scala:30:98 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000l\u001b[0m.toLong && x <= \u001b[31m999999999999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                            ",
      "stdout": "",
      "timestamp": 1659803876
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedWithTens = onesReversed.zip(tensReversed)\n        val onesReversedWithTensReversed = onesReversedWithTens.reverse\n        val onesReversedWithTensReversedWithOnes = onesReversedWithTensReversed.zip(onesReversed)\n        val onesReversedWithTensReversedWithOnesReversed = onesReversedWithTensReversedWithOnes.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTens = onesReversedWithTensReversedWithOnesReversed.zip(tensReversed)\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversed = onesReversedWithTensReversedWithOnesReversedWithTens.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes = onesReversedWithTensReversedWithOnesReversedWithTensReversed.zip(onesReversed)\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversed = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTens = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversed.zip(tensReversed)\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTens.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed.zip(onesReversed)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3u8inb41.scala:33:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803872
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val len = arr.length\n        if (len == 0) List()\n        else if (len == 1) List(arr(0).toString)\n        else arr.sortWith((x, y) => x < y).reverse.map(x => x.toString).map(x => if (x == 0) \"One\" else if (x == 1) \"Two\" else if (x == 2) \"Three\" else if (x == 3) \"Four\" else if (x == 4) \"Five\" else if (x == 5) \"Six\" else if (x == 6) \"Seven\" else if (x == 7) \"Eight\" else if (x == 8) \"Nine\" else x)\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpznbttz9n.scala:20:85 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33melse\u001b[0m arr.sortWith((x, y) => x < y).reverse.map(x => x.toString).map(x => \u001b[33mif\u001b[0m (x == \u001b[31m0\u001b[0m) \u001b[31m\"One\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m1\u001b[0m) \u001b[31m\"Two\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m2\u001b[0m) \u001b[31m\"Three\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m3\u001b[0m) \u001b[31m\"Four\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m4\u001b[0m) \u001b[31m\"Five\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m5\u001b[0m) \u001b[31m\"Six\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m6\u001b[0m) \u001b[31m\"Seven\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m7\u001b[0m) \u001b[31m\"Eight\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m8\u001b[0m) \u001b[31m\"Nine\"\u001b[0m \u001b[33melse\u001b[0m x)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         Values of types String and Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpznbttz9n.scala:20:108 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33melse\u001b[0m arr.sortWith((x, y) => x < y).reverse.map(x => x.toString).map(x => \u001b[33mif\u001b[0m (x == \u001b[31m0\u001b[0m) \u001b[31m\"One\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m1\u001b[0m) \u001b[31m\"Two\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m2\u001b[0m) \u001b[31m\"Three\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m3\u001b[0m) \u001b[31m\"Four\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m4\u001b[0m) \u001b[31m\"Five\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m5\u001b[0m) \u001b[31m\"Six\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m6\u001b[0m) \u001b[31m\"Seven\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m7\u001b[0m) \u001b[31m\"Eight\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m8\u001b[0m) \u001b[31m\"Nine\"\u001b[0m \u001b[33melse\u001b[0m x)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         Values of types String and Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpznbttz9n.scala:20:131 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33melse\u001b[0m a",
      "stdout": "",
      "timestamp": 1659803880
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        if (len == 0) List()\n        else if (len == 1) List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:651)\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\tat java.base/java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1012)\n\tat java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:150)\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:862)\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:760)\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\tat dotty.tools.dotc.core.Contexts$.$init$$$anonfun$1(Contexts.scala:49)\n\tat dotty.tools.dotc.core.Contexts$Context.printer(Contexts.scala:220)\n\tat dotty.tools.dotc.printing.Showable.show(Showable.scala:23)\n\tat dotty.tools.dotc.printing.Showable.show$(Showable.scala:9)\n\tat dotty.tools.dotc.core.Names$Name.show(Names.scala:33)\n\tat dotty.tools.dotc.parsing.Parsers$ParserCommon.syntaxError(Parsers.scala:141)\n\tat dotty.tools.dotc.parsing.Parsers$Parser.recur$2(Parsers.scala:348)\n\tat dotty.tools.dotc.parsing.Parsers$Parser.statSepOrEnd(Parsers.scala:359)\n\tat dotty.tools.dotc.parsing.Parsers$Parser.blockStatSeq$$anonfun$1(Parsers.scala:3999)\n\tat dotty.tools.dotc.parsing.Parsers$Parser.checkNoEscapingPlaceholders(Parsers.scala:487)\n\tat dotty.tools.dotc.parsing.Parsers$Parser.blockStatSeq(Parsers.scala:4002)\n\tat dotty.tools.dotc.printing.SyntaxHighlighting$.",
      "stdout": "java.lang.StackOverflowError while compiling /tmp/tmps2yv2c3j.scala\n",
      "timestamp": 1659803873
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(x => x >= 1 && x <= 9).sortWith(_ < _).reverse\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n        result.map(x => map.get(x)).filter(_.nonEmpty)\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfpbn75i.scala:19:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        result.map(\u001b[36mx\u001b[0m => map.get(x)).filter(_.nonEmpty)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : Long)\n\u001b[31m   |\u001b[0m                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803882
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 9).map(x => s\"One\")\n        val tens = arr.filter(x => x < 99).map(x => s\"Ten\")\n        val hundreds = arr.filter(x => x < 999).map(x => s\"Hundred\")\n        val thousands = arr.filter(x => x < 9999).map(x => s\"Thousand\")\n        val millions = arr.filter(x => x < 99999).map(x => s\"Million\")\n        val billions = arr.filter(x => x < 999999).map(x => s\"Billion\")\n        val trillions = arr.filter(x => x < 9999999).map(x => s\"Trillion\")\n        val quadrillions = arr.filter(x => x < 999999999).map(x => s\"Quadrillion\")\n        val quintillions = arr.filter(x => x < 99999999999).map(x => s\"Quintillion\")\n        val sextillions = arr.filter(x => x < 999999999999).map(x => s\"Sextillion\")\n        val septillions = arr.filter(x => x < 999999999999999).map(x => s\"Septillion\")\n        val octillions = arr.filter(x => x < 999999999999999999).map(x => s\"Octillion\")\n        val nonillions = arr.filter(x => x < 999999999999999999999).map(x => s\"Nonillion\")\n        val decillions = arr.filter(x => x < 9999999999999999999998).map(x => s\"Decillion\")\n        val undecillions = arr.filter(x => x < 99999999999999999999987).map(x => s\"Undecillion\")\n        val duodecillions = arr.filter(x => x < 9999999999999999999998765).map(x => s\"Duodecillion\")\n        val tredecillions = arr.filter(x => x < 99999999999999999999987654).map(x => s\"Tredecillion\")\n        val quattuordecillions = arr.filter(x => x < 9999999999999999999998765432).map(x => s\"Quattuordecillion\")\n        val quindecillions = arr.filter(x => x < 99999999999999999999987654321).map(x => s\"Quindecillion\")\n        val sexdecillions = arr.filter(x => x < 999999999999999999999876543210).map(x => s\"Sexdecilli\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpo0hpjn34.scala:36:90 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msexdecillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x < \u001b[31m999999999999999999999876543210\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\u001b[0m\"Sexdecilli\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpo0hpjn34.scala:38:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpo0hpjn34.scala:25:47 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mquintillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x < \u001b[31m99999999999\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Quintillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpo0hpjn34.scala:26:46 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msextillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x < \u001b[31m999999999999\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Sextillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpo0hpjn34.scala:27:46 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mseptillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x < \u001b[31m999999999999999\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Septillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              number too large\n\u001b[31m\u001b[31m--",
      "stdout": "",
      "timestamp": 1659803880
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands = arr.filter(_ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_ <= 999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 9999999999999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHund\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi9tu0ozw.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpi9tu0ozw.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpi9tu0ozw.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpi9tu0ozw.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpi9tu0ozw.scala:",
      "stdout": "",
      "timestamp": 1659803880
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(_ <= 9999999998).toList\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999998).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999998).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999998).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999998).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999998).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999998).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999998).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999998).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999998).toList\n        val oneThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmvptdf5y.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmvptdf5y.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmvptdf5y.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmvptdf5y.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousa",
      "stdout": "",
      "timestamp": 1659803881
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(x => x >= 1 && x <= 9).sortWith(_ < _).reverse\n        val map = Map(\"One\" -> 1, \"Two\" -> 2, \"Three\" -> 3, \"Four\" -> 4, \"Five\" -> 5, \"Six\" -> 6, \"Seven\" -> 7, \"Eight\" -> 8, \"Nine\" -> 9)\n        result.map(x => map.getOrElse(x.toString, x.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3fnookt5.scala:19:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        result.map(\u001b[36mx\u001b[0m => map.getOrElse(x.toString, x.toString))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    Matchable\n\u001b[31m   |\u001b[0m                        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803881
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(_ <= 9999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpznh5jm9n.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpznh5jm9n.scala:24:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpznh5jm9n.scala:25:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpznh5jm9n.scala:26:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpznh5jm9n.scala:27:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundre",
      "stdout": "",
      "timestamp": 1659803882
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ >= 1l && _ <= 9l).sortWith(_ < _).reverse\n        val ones = arr.filter(_ >= 1l).map(_ - 1l).mkString(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val tens = arr.filter(_ >= 10l).map(_ - 10l).mkString(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val hundreds = arr.filter(_ >= 100l).map(_ - 100l).mkString(\"Hundred\", \"Thousand\", \"Million\", \"Billion\", \"Trillion\", \"Quadrillion\", \"Quintillion\", \"Sextillion\", \"Septillion\", \"Octillion\", \"Nonillion\", \"Decillion\", \"Undecillion\", \"Duodecillion\", \"Tredecillion\", \"Quattuordecillion\", \"Quindecillion\", \"Sexdecillion\", \"Septdecillion\", \"Octodecillion\", \"Novemdecillion\", \"Vigintillion\", \"Unvigintillion\", \"Duovigintillion\", \"Trevigintillion\", \"Quattuorvigintillion\", \"Quinvigintillion\", \"Sexvigintillion\", \"Septvigintillion\", \"Octovigintillion\", \"Novemvigintillion\", \"Vigintigintillion\", \"Unvigintigintillion\", \"Duovigintigintillion\", \"Trevigintigintillion\", \"Quattuorvigintigintillion\", \"Quinvigintigintillion\", \"Sexvigintigintillion\", \"Septvigintigintillion\", \"Octovigintigintillion\", \"Novemvigintigintillion\", \"Vigintigintigintillion\", \"Unvigintigintigintillion\", \"Duovigintigintigintillion\", \"Trevigintigintigintillion\", \"Quattuorvigintigintigintillion\", \"Quinvigintigintigintillion\", \"Sexvigintigintigintillion\", \"Septvigintigintigintillion\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp_lqmqgwq.scala:20:1022 ---------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundreds\u001b[0m = arr.filter(_ >= \u001b[31m100l\u001b[0m).map(_ - \u001b[31m100l\u001b[0m).mkString(\u001b[31m\"Hundred\"\u001b[0m, \u001b[31m\"Thousand\"\u001b[0m, \u001b[31m\"Million\"\u001b[0m, \u001b[31m\"Billion\"\u001b[0m, \u001b[31m\"Trillion\"\u001b[0m, \u001b[31m\"Quadrillion\"\u001b[0m, \u001b[31m\"Quintillion\"\u001b[0m, \u001b[31m\"Sextillion\"\u001b[0m, \u001b[31m\"Septillion\"\u001b[0m, \u001b[31m\"Octillion\"\u001b[0m, \u001b[31m\"Nonillion\"\u001b[0m, \u001b[31m\"Decillion\"\u001b[0m, \u001b[31m\"Undecillion\"\u001b[0m, \u001b[31m\"Duodecillion\"\u001b[0m, \u001b[31m\"Tredecillion\"\u001b[0m, \u001b[31m\"Quattuordecillion\"\u001b[0m, \u001b[31m\"Quindecillion\"\u001b[0m, \u001b[31m\"Sexdecillion\"\u001b[0m, \u001b[31m\"Septdecillion\"\u001b[0m, \u001b[31m\"Octodecillion\"\u001b[0m, \u001b[31m\"Novemdecillion\"\u001b[0m, \u001b[31m\"Vigintillion\"\u001b[0m, \u001b[31m\"Unvigintillion\"\u001b[0m, \u001b[31m\"Duovigintillion\"\u001b[0m, \u001b[31m\"Trevigintillion\"\u001b[0m, \u001b[31m\"Quattuorvigintillion\"\u001b[0m, \u001b[31m\"Quinvigintillion\"\u001b[0m, \u001b[31m\"Sexvigintillion\"\u001b[0m, \u001b[31m\"Septvigintillion\"\u001b[0m, \u001b[31m\"Octovigintillion\"\u001b[0m, \u001b[31m\"Novemvigintillion\"\u001b[0m, \u001b[31m\"Vigintigintillion\"\u001b[0m, \u001b[31m\"Unvigintigintillion\"\u001b[0m, \u001b[31m\"Duovigintigintillion\"\u001b[0m, \u001b[31m\"Trevigintigintillion\"\u001b[0m, \u001b[31m\"Quattuorvigintigintillion\"\u001b[0m, \u001b[31m\"Quinvigintigintillion\"\u001b[0m, \u001b[31m\"Sexvigintigintillion\"\u001b[0m, \u001b[31m\"Septvigintigintillion\"\u001b[0m, \u001b[31m\"Octovigintigintillion\"\u001b[0m, \u001b[31m\"Novemvigintigintillion\"\u001b[0m, \u001b[31m\"Vigintigintigintillion\"\u001b[0m, \u001b[31m\"Unvigintigintigintillion\"\u001b[0m, \u001b[31m\"Duovigintigintigintillion\"\u001b[0m, \u001b[31m\"Trevigintigintigintillion\"\u001b[0m, \u001b[31m\"Quattuorvigintigintigintillion\"\u001b[0m, \u001b[31m\"Quinvigintigintigintillion\"\u001b[0m, \u001b[31m\"Sexvigintigintigintillion\"\u001b[0m, \"Septvigintigintigintillion\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                                                                                                                ",
      "stdout": "",
      "timestamp": 1659803883
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(x => x >= 1 && x <= 9).map(x => s\"${x}\".toUpperCase).reverse\n        arr.filter(x => x < 1 || x > 9).map(x => s\"${x}\".toUpperCase).reverse\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6y0eokfs.scala:22)\n\tat Problem.main(tmp6y0eokfs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659803884
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val reversed = list.sortWith(_ < _)\n        val reversedString = reversed.map(_ + \"\").reverse.mkString(\"\")\n        val reversedStringList = reversedString.toList\n        val reversedStringListLength = reversedStringList.length\n        val one = \"One\"\n        val two = \"Two\"\n        val three = \"Three\"\n        val four = \"Four\"\n        val five = \"Five\"\n        val six = \"Six\"\n        val seven = \"Seven\"\n        val eight = \"Eight\"\n        val nine = \"Nine\"\n        val ten = \"Ten\"\n        val hundred = \"Hundred\"\n        val thousand = \"Thousand\"\n        val hundredAndOne = \"Hundred and One\"\n        val hundredAndOneAndOne = \"Hundred and One and One\"\n        val hundredAndOneAndOneAndOne = \"Hundred and One and One and One\"\n        val hundredAndOneAndOneAndOneAndOne = \"Hundred and One and One and One and One\"\n        val hundredAndOneAndOneAndOneAndOneAndOne = \"Hundred and One and One and One and One and One\"\n        val hundredAndOneAndOneAndOneAndOneAndOneAndOne = \"Hundred and One and One and One and One and One and One\"\n        val hundredAndOneAndOneAndOneAndOneAndOneAndOneAndOne = \"Hundred and One and One and One and One and One and One and One\"\n        val hundredAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne = \"Hundred and One and One and One and One and One and One and One and One\"\n        val hundredAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne = \"Hundred and One and One and One and One and One and One and One and One\"\n        val hundredAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAnd = \"Hundred and One and One and One and One and One and One and One and One and One\"\n        val hundredAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAnd = \"Hundred and One and One and One and \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnkp6n66n.scala:44:85 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAnd\u001b[0m = \"Hundred and One and One and One and \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnkp6n66n.scala:46:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnkp6n66n.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnkp6n66n.scala:46:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Hundred and One and One and One and def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659803882
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x => x >= 9 && x < 99).toList\n        val hundreds = arr.filter(x => x >= 99).toList\n        val reversed = ones + tens + hundreds\n        reversed.reverse.map(x => if (x < 10) \"One\" else if (x < 100) \"Two\" else if (x < 1000) \"Three\" else \"Four\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpso1zxw8x.scala:20:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803883
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val length = list.size\n        val reversed = list.sortWith(_ < _)\n        val result = reversed.map(i => if (i < 10) {\"One\"} else if (i < 20) {\"Two\"} else if (i < 30) {\"Three\"} else if (i < 40) {\"Four\"} else if (i < 50) {\"Five\"} else if (i < 60) {\"Six\"} else if (i < 70) {\"Seven\"} else if (i < 80) {\"Eight\"} else if (i < 90) {\"Nine\"} else {\"Ten\"})\n        val finalResult = result.map(i => if (i < length) i else length.toString + i)\n        finalResult.toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzp7sobk.scala:21:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfinalResult\u001b[0m = result.map(\u001b[36mi\u001b[0m => \u001b[33mif\u001b[0m (i < length) i \u001b[33melse\u001b[0m length.toString + i)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (length : Int)\n\u001b[31m   |\u001b[0m                                                Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803883
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val ones = list.filter(_ <= 1).toList\n        val tens = list.filter(_ <= 10).toList\n        val hundreds = list.filter(_ <= 100).toList\n        val thousands = list.filter(_ <= 1000).toList\n        val tenThousands = list.filter(_ <= 10000).toList\n        val oneThousands = list.filter(_ <= 100000).toList\n        val oneHundreds = list.filter(_ <= 100000).toList\n        val oneThousandThousands = list.filter(_ <= 1000000).toList\n        val oneThousandThousandThousands = list.filter(_ <= 10000000).toList\n        val oneHundredThousandThousands = list.filter(_ <= 100000000).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 1000000000).toList\n        val oneHundredThousandThousandThousandThousands = list.filter(_ <= 10000000000).toList\n        val oneHundredThousandThousandThousandThousandThousands = list.filter(_ <= 100000000000).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands = list.filter(_ <= 1000000000000).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = list.filter(_ <= 10000000000000).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = list.filter(_ <= 100000000000000).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = list.filter(_ <= 1000000000000000).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = list.filter(_ <= 10000000000000000).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = list.filter(_ <= 100000000000000000).toList\n        val oneHundredThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpip4ap_i2.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpip4ap_i2.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousandThousandThousands\u001b[0m = list.filter(_ <= \u001b[31m1000000000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpip4ap_i2.scala:30:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = list.filter(_ <= \u001b[31m10000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpip4ap_i2.scala:31:83 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousands\u001b[0m = list.filter(_ <= \u001b[31m100000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpip4ap_i2.scala:32:91 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousands",
      "stdout": "",
      "timestamp": 1659803883
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ < 1).toList\n        val tens = arr.filter(_ < 10).toList\n        val hundreds = arr.filter(_ < 100).toList\n        val thousands = arr.filter(_ < 1000).toList\n        val tenThousands = arr.filter(_ < 10000).toList\n        val hundredThousands = arr.filter(_ < 100000).toList\n        val thousandThousands = arr.filter(_ < 1000000).toList\n        val hundredThousandThousands = arr.filter(_ < 10000000).toList\n        val thousandThousandThousands = arr.filter(_ < 100000000).toList\n        val hundredThousandThousandThousands = arr.filter(_ < 1000000000).toList\n        val thousandThousandThousandThousands = arr.filter(_ < 10000000000).toList\n        val hundredThousandThousandThousandThousands = arr.filter(_ < 100000000000).toList\n        val thousandThousandThousandThousandThousands = arr.filter(_ < 1000000000000).toList\n        val hundredThousandThousandThousandThousandThousands = arr.filter(_ < 10000000000000).toList\n        val thousandThousandThousandThousandThousandThousands = arr.filter(_ < 100000000000000).toList\n        val hundredThousandThousandThousandThousandThousandThousands = arr.filter(_ < 1000000000000000).toList\n        val thousandThousandThousandThousandThousandThousandThousands = arr.filter(_ < 10000000000000000).toList\n        val hundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ < 100000000000000000).toList\n        val thousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ < 1000000000000000000).toList\n        val hundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ < 10000000000000000000).toList\n        val thousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ < 100000000000000000000\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsx2urb4o.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpsx2urb4o.scala:27:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandThousandThousandThousands\u001b[0m = arr.filter(_ < \u001b[31m10000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpsx2urb4o.scala:28:70 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredThousandThousandThousandThousands\u001b[0m = arr.filter(_ < \u001b[31m100000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpsx2urb4o.scala:29:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ < \u001b[31m1000000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpsx2urb4o.scala:30:78 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ < \u001b[31m10000000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpsx2urb4o.scala:31:79 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandThousandThousandTho",
      "stdout": "",
      "timestamp": 1659803883
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ >= 10).toList\n        val tensReversed = tens.reverse\n        val tensReversedString = tensReversed.map(_.toString).mkString(\"\")\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength = ten\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbisg2g0i.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringLength\u001b[0m = tensReversedString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbisg2g0i.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringLength\u001b[0m = tensReversedString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbisg2g0i.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringLength\u001b[0m = tensReversedString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbisg2g0i.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringLength\u001b[0m = tensReversedString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m--",
      "stdout": "",
      "timestamp": 1659803884
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val numsLength = nums.size\n        val numsSorted = nums.sortWith(_ < _)\n        val numsReversed = numsSorted.reverse\n        val numsReversedLength = numsReversed.size\n        val numsReversedSorted = numsReversed.sortWith(_ < _)\n        val numsReversedReversed = numsReversedSorted.reverse\n        val numsReversedReversedLength = numsReversedReversed.size\n        val numsReversedReversedSorted = numsReversedReversed.sortWith(_ < _)\n        val numsReversedReversedReversedLength = numsReversedReversedSorted.reverse.size\n        val numsReversedReversedReversedSorted = numsReversedReversedSorted.reverse.sortWith(_ < _)\n        val numsReversedReversedReversedReversedLength = numsReversedReversedReversedSorted.reverse.size\n        val numsReversedReversedReversedReversedSorted = numsReversedReversedReversedSorted.reverse.sortWith(_ < _)\n        val numsReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedSorted.reverse.size\n        val numsReversedReversedReversedReversedReversedSorted = numsReversedReversedReversedReversedSorted.reverse.sortWith(_ < _)\n        val numsReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedSorted.reverse.size\n        val numsReversedReversedReversedReversedReversedSorted = numsReversedReversedReversedReversedSorted.reverse.sortWith(_ < _)\n        val numsReversedReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedReversedReversedSorted.reverse.size\n        val numsReversedReversedReversedReversedReversedReversedSorted = numsReversedReversedReversedReversedReversedReversedSorted.reverse.sortWith(_ < _)\n        val numsReversedReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedReversedReversedSorted.reverse.size\n        val numsReversedReversedReversedReversedReversedReversedSorted = numsReversed\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqnqhdx62.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsReversedReversedReversedReversedReversedLength\u001b[0m = numsReversedReversedReversedReversedSorted.reverse.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsReversedReversedReversedReversedReversedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsReversedReversedReversedReversedReversedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqnqhdx62.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsReversedReversedReversedReversedReversedSorted\u001b[0m = numsReversedReversedReversedReversedSorted.reverse.sortWith(_ < _)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsReversedReversedReversedReversedReversedSorted is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsReversedReversedReversedReversedReversedSorted\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqnqhdx62.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsReversedReversedReversedReversedReversedReversedLength\u001b[0m = numsReversedReversedReversedReversedReversedReversedSorted.reverse.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsReversedReversedReversedReversedReversedReversedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsReversedReversedReversedReversedReversedReversedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must ",
      "stdout": "",
      "timestamp": 1659803885
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList.sortWith(_ < _)\n        val reversed = list.reverse\n        val result = reversed.map(x => if (x < 10) \"One\" else if (x < 20) \"Two\" else if (x < 30) \"Three\" else if (x < 40) \"Four\" else if (x < 50) \"Five\" else if (x < 60) \"Six\" else if (x < 70) \"Seven\" else if (x < 80) \"Eight\" else \"Nine\")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps3i0b4si.scala:23)\n\tat Problem.main(tmps3i0b4si.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659803885
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList.sortBy(_.toInt).reverse\n        val result = list.map(x => if (x < 10) {\n            val str = x.toString.toUpperCase\n            val index = str.indexOf(\"ZERO\")\n            val name = if (index == -1) \"One\" else str.substring(0, index)\n            val digit = str.substring(index + 1, str.length)\n            val index = digit.indexOf(\"ZERO\")\n            val name = if (index == -1) \"One\" else digit.substring(0, index)\n            name + digit\n        } else {\n            val str = x.toString.toUpperCase\n            val index = str.indexOf(\"ZERO\")\n            val name = if (index == -1) \"Two\" else str.substring(0, index)\n            val digit = str.substring(index + 1, str.length)\n            val index = digit.indexOf(\"ZERO\")\n            val name = if (index == -1) \"Two\" else digit.substring(0, index)\n            name + digit\n        })\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsr8pwpof.scala:23:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mindex\u001b[0m = digit.indexOf(\u001b[31m\"ZERO\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mindex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mindex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsr8pwpof.scala:24:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mname\u001b[0m = \u001b[33mif\u001b[0m (index == -\u001b[31m1\u001b[0m) \u001b[31m\"One\"\u001b[0m \u001b[33melse\u001b[0m digit.substring(\u001b[31m0\u001b[0m, index)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mname is already defined as \u001b[33mvalue\u001b[0m \u001b[35mname\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsr8pwpof.scala:31:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mindex\u001b[0m = digit.indexOf(\u001b[31m\"ZERO\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mindex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mindex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsr8pwpof.scala:32:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mname\u001b[0m = \u001b[33mif\u001b[0m (index == -\u001b[31m1\u001b[0m) \u001b[31m\"Two\"\u001b[0m \u001b[33melse\u001b[0m digit.substring(\u001b[31m0\u001b[0m, index)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mname is already defined as \u001b[33mvalue\u001b[0m \u001b[35mname\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659803883
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(x => x >= 1 && x <= 9).map(x => x % 10 + x.toString).reverse\n        arr.filter(x => x != 0l).map(x => x % 10 + x.toString).reverse.map(x => x match {\n            case 0 => \"Zero\"\n            case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n            case x => s\"$x\"\n        }).filter(x => x != \"\").map(x => x match {\n            case 0 => \"Zero\"\n            case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n            case x => s\"$x\"\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp4q97bv8v.scala:19:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m0\u001b[0m => \u001b[31m\"Zero\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m         Values of types Int and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp4q97bv8v.scala:20:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m1\u001b[0m => \u001b[31m\"One\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m         Values of types Int and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp4q97bv8v.scala:21:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m2\u001b[0m => \u001b[31m\"Two\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m         Values of types Int and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp4q97bv8v.scala:22:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m3\u001b[0m => \u001b[31m\"Three\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m         Values of types Int and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp4q97bv8v.scala:23:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m4\u001b[0m => \u001b[31m\"Four\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m         Values of types Int and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp4q97bv8v.scala:24:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m5\u001b[0m => \u001b[31m\"Five\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m         Values of types Int and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp4q97bv8v.scala:25:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m6\u001b[0m => \u001b[31m\"Six\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m         Values of types Int and String cannot be compared",
      "stdout": "",
      "timestamp": 1659803888
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        var i = 0\n        while (i < arr.length) {\n            if (arr(i) > 9) {\n                result.add(\"Nine\")\n                i += 1\n            } else if (arr(i) > 8) {\n                result.add(\"Eight\")\n                i += 1\n            } else if (arr(i) > 7) {\n                result.add(\"Seven\")\n                i += 1\n            } else if (arr(i) > 6) {\n                result.add(\"Six\")\n                i += 1\n            } else if (arr(i) > 5) {\n                result.add(\"Five\")\n                i += 1\n            } else if (arr(i) > 4) {\n                result.add(\"Four\")\n                i += 1\n            } else if (arr(i) > 3) {\n                result.add(\"Three\")\n                i += 1\n            } else if (arr(i) > 2) {\n                result.add(\"Two\")\n                i += 1\n            } else if (arr(i) > 1) {\n                result.add(\"One\")\n                i += 1\n            } else {\n                result.add(arr(i).toString())\n                i += 1\n            }\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp42t1mr6d.scala:17:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803883
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val len = nums.map(_.toString).map(_.length).max\n        val reversed = nums.reverse\n        val result = reversed.map(x => if (x < 10) {\n            s\"$x\"\n        } else {\n            val digit = x - 10\n            val name = if (digit < 1) \"One\" else if (digit < 2) \"Two\" else if (digit < 3) \"Three\" else if (digit < 4) \"Four\" else if (digit < 5) \"Five\" else if (digit < 6) \"Six\" else if (digit < 7) \"Seven\" else if (digit < 8) \"Eight\" else \"Nine\"\n            s\"$name$digit\"\n        })\n        if (len == 0) result else result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzp4kl4da.scala:30)\n\tat Problem.main(tmpzp4kl4da.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659803887
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.sortWith(_ < _).reverse\n        val digits = arr.map(_.toString).mkString(\",\")\n        val names = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val result = names.map(name => if (result.contains(name)) name else digits.indexOf(_))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp60fdospd.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = names.map(\u001b[36mname\u001b[0m => \u001b[33mif\u001b[0m (result.contains(name)) name \u001b[33melse\u001b[0m digits.indexOf(_))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mresult is already defined as \u001b[33mvalue\u001b[0m \u001b[35mresult\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp60fdospd.scala:21:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        result\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (result : List[Long])\n\u001b[31m   |\u001b[0m        Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803887
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ > 0).toList\n        val reversed = result.reverse\n        val ones = reversed.filter(_ < 10)\n        val tens = reversed.filter(_ >= 10 && _ < 100)\n        val hundreds = reversed.filter(_ >= 100)\n        val tensNames = tens.map(x => s\"Ten$x\")\n        val hundredsNames = hundreds.map(x => s\"Hundred$x\")\n        val onesNames = ones.map(x => s\"One$x\")\n        val result = onesNames.++(tensNames).++(hundredsNames)\n        if(result.isEmpty) Nil\n        else result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpn01uhh1_.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = onesNames.++(tensNames).++(hundredsNames)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mresult is already defined as \u001b[33mvalue\u001b[0m \u001b[35mresult\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpn01uhh1_.scala:20:35 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtens\u001b[0m = reversed.filter(_ >= \u001b[31m10\u001b[0m && _ < \u001b[31m100\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn01uhh1_.scala:27:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33melse\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    (result : List[Long])\n\u001b[31m   |\u001b[0m             Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659803889
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortBy(_ - 1).reverse\n        val map = Map(1l.toString -> \"One\", 2l.toString -> \"Two\", 3l.toString -> \"Three\", 4l.toString -> \"Four\", 5l.toString -> \"Five\", 6l.toString -> \"Six\", 7l.toString -> \"Seven\", 8l.toString -> \"Eight\", 9l.toString -> \"Nine\")\n        result.map(map(_.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpcg4mr0gx.scala:17:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = arr.filter(_ >= \u001b[31m1l\u001b[0m.toLong && _ <= \u001b[31m9l\u001b[0m.toLong).sortBy(_ - \u001b[31m1\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpcg4mr0gx.scala:19:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        result.map(map(_.toString))\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$4 of expanded function:\n\u001b[31m   |\u001b[0m   _$4 => _$4.toString.\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803889
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val ones = list.filter(_ <= 9).toList\n        val tens = list.filter(_ <= 99).toList\n        val hundreds = list.filter(_ <= 999).toList\n        val thousands = list.filter(_ <= 9999).toList\n        val tenThousands = list.filter(_ <= 999999).toList\n        val oneThousands = list.filter(_ <= 9999999).toList\n        val oneHundreds = list.filter(_ <= 999999999).toList\n        val oneThousandThousands = list.filter(_ <= 99999999999).toList\n        val oneHundredThousands = list.filter(_ <= 999999999999).toList\n        val oneHundredThousandThousands = list.filter(_ <= 999999999999999).toList\n        val oneHundredThousandThousands = list.filter(_ <= 999999999999999999).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 999999999999999999999).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999999999998).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999999999997).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999999999996).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999999999995).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999999999994).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999999999993).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999999999992).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999999999991).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999999999990).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 999999999999999999999).toList\n        val oneHundredThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz2mt2os0.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpz2mt2os0.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = list.filter(_ <= \u001b[31m999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpz2mt2os0.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = list.filter(_ <= \u001b[31m9999999999999999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpz2mt2os0.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = list.filter(_ <= \u001b[31m9999999999999999999997\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpz2mt2os0.scala:33:12 ----------------",
      "stdout": "",
      "timestamp": 1659803893
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val len = arr.length\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands = arr.filter(_ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_ <= 999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 9999999999999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHund\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpafzl62p4.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpafzl62p4.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpafzl62p4.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpafzl62p4.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpafzl62p4.scala:",
      "stdout": "",
      "timestamp": 1659803893
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x => x >= 9 && x < 99).toList\n        val hundreds = arr.filter(x => x >= 99).toList\n        val hundredsReversed = hundreds.reverse\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesAndTens = ones + tens\n        val onesAndTensReversed = onesReversed + tensReversed\n        val onesAndTensAndHundreds = onesAndTens + hundreds\n        val onesAndTensAndHundredsReversed = onesAndTensReversed + hundredsReversed\n        val onesAndTensAndHundredsAndOnes = onesAndTensAndHundreds + ones\n        val onesAndTensAndHundredsAndOnesReversed = onesAndTensAndHundredsReversed + onesReversed\n        val onesAndTensAndHundredsAndOnesAndTens = onesAndTensAndHundredsAndOnes + tens\n        val onesAndTensAndHundredsAndOnesAndTensReversed = onesAndTensAndHundredsAndOnesReversed + tensReversed\n        val onesAndTensAndHundredsAndOnesAndTensAndHundreds = onesAndTensAndHundredsAndOnesAndTens + hundreds\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsReversed = onesAndTensAndHundredsAndOnesAndTensReversed + hundredsReversed\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes = onesAndTensAndHundredsAndOnesAndTensAndHundreds + ones\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesReversed = onesAndTensAndHundredsAndOnesAndTensAndHundredsReversed + onesReversed\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTens = onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes + tens\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensReversed = onesAndTensAndHundredsAndOnesAndTensAndHundredsReversed \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2fu9bh5_.scala:23:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTens\u001b[0m = ones + tens\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2fu9bh5_.scala:24:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTensReversed\u001b[0m = onesReversed + tensReversed\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2fu9bh5_.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659803895
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val len = nums.map(_.toString).map(_.length).max\n        val ones = nums.filter(_.toString.length == 1)\n        val tens = nums.filter(_.toString.length == 10)\n        val hundreds = nums.filter(_.toString.length == 100)\n        val thousands = nums.filter(_.toString.length == 1000)\n        val tenThousands = nums.filter(_.toString.length == 10000)\n        val hundredThousands = nums.filter(_.toString.length == 100000)\n        val thousandThousands = nums.filter(_.toString.length == 1000000)\n        val oneThousands = nums.filter(_.toString.length == 10000000)\n        val oneHundreds = nums.filter(_.toString.length == 100000000)\n        val oneThousandThousands = nums.filter(_.toString.length == 1000000000)\n        val oneThousandThousandThousands = nums.filter(_.toString.length == 10000000000)\n        val oneHundredThousands = nums.filter(_.toString.length == 100000000000)\n        val oneHundredThousandThousands = nums.filter(_.toString.length == 1000000000000)\n        val oneHundredThousandThousandThousands = nums.filter(_.toString.length == 10000000000000)\n        val oneHundredThousandThousandThousandThousands = nums.filter(_.toString.length == 100000000000000)\n        val oneHundredThousandThousandThousandThousandThousands = nums.filter(_.toString.length == 1000000000000000)\n        val oneHundredThousandThousandThousandThousandThousandThousands = nums.filter(_.toString.length == 10000000000000000)\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = nums.filter(_.toString.length == 100000000000000000)\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = nums.filter(_.toString.length == 1000000000000000000)\n        val oneHundredThousandThousandThousandThousandThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdzxed80r.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdzxed80r.scala:29:76 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousands\u001b[0m = nums.filter(_.toString.length == \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                            ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdzxed80r.scala:30:67 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = nums.filter(_.toString.length == \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdzxed80r.scala:31:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = nums.filter(_.toString.length == \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdzxed80r.scala:32:83 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = nums.filter(_.toString.length == \u001b[31m10000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdzxed80r.scala:33:91 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousan",
      "stdout": "",
      "timestamp": 1659803894
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x => x >= 10 && x < 20).toList\n        val teens = arr.filter(x => x >= 20 && x < 30).toList\n        val hundreds = arr.filter(x => x >= 30 && x < 40).toList\n        val thousands = arr.filter(x => x >= 40 && x < 50).toList\n        val millions = arr.filter(x => x >= 50 && x < 60).toList\n        val billions = arr.filter(x => x >= 60 && x < 70).toList\n        val trillions = arr.filter(x => x >= 70 && x < 80).toList\n        val quadrillions = arr.filter(x => x >= 80 && x < 90).toList\n        val quintillions = arr.filter(x => x >= 90 && x < 100).toList\n        val sextillions = arr.filter(x => x >= 100 && x < 1000).toList\n        val septillions = arr.filter(x => x >= 1000 && x < 10000).toList\n        val octillions = arr.filter(x => x >= 10000 && x < 100000).toList\n        val nonillions = arr.filter(x => x >= 100000 && x < 1000000).toList\n        val decillions = arr.filter(x => x >= 1000000 && x < 10000000).toList\n        val undecillions = arr.filter(x => x >= 10000000 && x < 100000000).toList\n        val duodecillions = arr.filter(x => x >= 100000000 && x < 1000000000).toList\n        val tredecillions = arr.filter(x => x >= 1000000000 && x < 10000000000).toList\n        val quattuordecillions = arr.filter(x => x >= 10000000000 && x < 100000000000).toList\n        val quindecillions = arr.filter(x => x >= 100000000000 && x < 1000000000000).toList\n        val sexdecillions = arr.filter(x => x >= 1000000000000 && x < 10000000000000).toList\n        val septendecillions = arr.filter(x => x >= 10000000000000 && x < 100000000000000).toList\n        val octodecillions = arr.filter(x => x >= 100000000000000 && x < 1000000000000000).toList\n        val novemdecillions = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000).toList\n        val vigintillions = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000).toList\n        val unvigintillions = arr.filter(x => x >= 10000000000000000\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgxabc8he.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgxabc8he.scala:34:67 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtredecillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgxabc8he.scala:35:54 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mquattuordecillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgxabc8he.scala:35:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mquattuordecillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgxabc8he.scala:36:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mquindecillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgxabc8he.scala:36:70 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mquinde",
      "stdout": "",
      "timestamp": 1659803894
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ > 0).toList\n        val reversed = result.reverse\n        val reversedString = reversed.map(_ + \"\").mkString(\"\")\n        val reversedStringList = reversedString.split(\"\\\\W+\")\n        val reversedStringListLength = reversedStringList.length\n        val one = \"One\"\n        val two = \"Two\"\n        val three = \"Three\"\n        val four = \"Four\"\n        val five = \"Five\"\n        val six = \"Six\"\n        val seven = \"Seven\"\n        val eight = \"Eight\"\n        val nine = \"Nine\"\n        val ten = \"Ten\"\n        val hundred = \"Hundred\"\n        val thousand = \"Thousand\"\n        val million = \"Million\"\n        val billion = \"Billion\"\n        val trillion = \"Trillion\"\n        val quadrillion = \"Quadrillion\"\n        val quintillion = \"Quintillion\"\n        val sextillion = \"Sextillion\"\n        val septillion = \"Septillion\"\n        val octillion = \"Octillion\"\n        val nonillion = \"Nonillion\"\n        val decillion = \"Decillion\"\n        val undecillion = \"Undecillion\"\n        val duodecillion = \"Duodecillion\"\n        val tredecillion = \"Tredecillion\"\n        val quattuordecillion = \"Quattuordecillion\"\n        val quindecillion = \"Quindecillion\"\n        val sexdecillion = \"Sexdecillion\"\n        val septendecillion = \"Septendecillion\"\n        val octodecillion = \"Octodecillion\"\n        val novemdecillion = \"Novemdecillion\"\n        val vigintillion = \"Vigintillion\"\n        val unvigintillion = \"Unvigintillion\"\n        val duovigintillion = \"Duovigintillion\"\n        val trevigintillion = \"Trevigintillion\"\n        val quattuorvigintillion = \"Quattuorvigintillion\"\n        val quinvigin\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2n4zaqgf.scala:59:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2n4zaqgf.scala:59:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803894
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n        val oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n        val oneThousandThousands = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000l.toLong && x <= 9999999999999999999l.toLong)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000l.toLong && x <= 99999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000l.toLong && x <= 999999999999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000l.toLong && x <= 9999999999999999999999999999999l.toLong)\n        val oneThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpj66qmx8i.scala:28:102 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj66qmx8i.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj66qmx8i.scala:29:104 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj66qmx8i.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj66qmx8i.scala:30:112 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000l\u001b[0m.toLong && x <= \u001b[31m999999999999999999999",
      "stdout": "",
      "timestamp": 1659803894
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val hundredsAndOnes = arr.filter(_ <= 9999999).toList\n        val hundredsAndTens = arr.filter(_ <= 999999999).toList\n        val hundredsAndHundreds = arr.filter(_ <= 99999999999).toList\n        val hundredsAndThousands = arr.filter(_ <= 999999999999).toList\n        val hundredsAndHundredsAndOnes = arr.filter(_ <= 999999999999999).toList\n        val hundredsAndHundredsAndTens = arr.filter(_ <= 9999999999999999).toList\n        val hundredsAndHundredsAndHundreds = arr.filter(_ <= 9999999999999999999).toList\n        val hundredsAndHundredsAndThousands = arr.filter(_ <= 99999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndOnes = arr.filter(_ <= 99999999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndTens = arr.filter(_ <= 999999999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndHundreds = arr.filter(_ <= 999999999999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndThousands = arr.filter(_ <= 9999999999999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndOnes = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndTens = arr.filter(_ <= 99999999999999999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundreds = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndThousands = arr.filter(_ <= 999999999999999999999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundredsAndOnes = arr.filter(_ <= 999999999999999999999999999999999999999).to\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmposomh__e.scala:23:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmposomh__e.scala:24:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmposomh__e.scala:25:57 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndHundredsAndOnes\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmposomh__e.scala:26:57 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndHundredsAndTens\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmposomh__e.scala:27:61 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndHundredsAndHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmposomh__e.scala:28:62 ---------------------------",
      "stdout": "",
      "timestamp": 1659803895
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n        val oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000l.toLong && x <= 9999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000l.toLong && x <= 99999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000l.toLong && x <= 999999999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp1txblk04.scala:28:118 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1txblk04.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1txblk04.scala:29:119 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1txblk04.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1txblk04.scala:30:128 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHund",
      "stdout": "",
      "timestamp": 1659803833
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortWith(_ < _).reverse\n        val map = new mutable.HashMap[Long, String]()\n        result foreach { x => map.put(x.toLong, map.getOrElse(x, \"One\")) }\n        val result2 = map.values.toList\n        result2.reverse.map(x => x.toString.replaceAll(\"\\\\d\", \"$0\"))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpk93m6a2g.scala:17:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = arr.filter(_ >= \u001b[31m1l\u001b[0m.toLong && _ <= \u001b[31m9l\u001b[0m.toLong).sortWith(_ < _).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk93m6a2g.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmap\u001b[0m = \u001b[33mnew\u001b[0m mutable.HashMap[\u001b[35mLong\u001b[0m, \u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803891
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ >= 10 && _ <=99).toList\n        val hundreds = arr.filter(_ >= 100).toList\n        val hundredsReversed = hundreds.reverse\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(_ + One).mkString(\"\")\n        val tensReversedString = tensReversed.map(_ + Two).mkString(\"\")\n        val hundredsReversedString = hundredsReversed.map(_ + Three).mkString(\"\")\n        val hundredsReversedStringReversed = hundredsReversedString.reverse\n        val tensReversedStringReversed = tensReversedStringReversed.reverse\n        val onesReversedStringReversed = onesReversedStringReversed.reverse\n        val onesReversedStringReversedString = onesReversedStringReversed.map(_ + Four).mkString(\"\")\n        val tensReversedStringReversedString = tensReversedStringReversed.map(_ + Five).mkString(\"\")\n        val hundredsReversedStringReversedString = hundredsReversedStringReversed.map(_ + Six).mkString(\"\")\n        val hundredsReversedStringReversedStringReversed = hundredsReversedStringReversedStringReversed.reverse\n        val tensReversedStringReversedStringReversed = tensReversedStringReversedStringReversed.reverse\n        val onesReversedStringReversedStringReversed = onesReversedStringReversedStringReversed.reverse\n        val onesReversedStringReversedStringReversedString = onesReversedStringReversedStringReversed.map(_ + Seven).mkString(\"\")\n        val tensReversedStringReversedStringReversedString = tensReversedStringReversedStringReversed.map(_ + Eight).mkString(\"\")\n        val hundredsReversedStringReversedStringReversedString = hundredsReversedStringReversedStringReversed.map(_ + Nine).mkString(\"\")\n        val hundredsReversedStringReversedStringReversedStringReversed = hundredsReversedStringReversedStringReversedStringReversed.reverse\n        val tensReversedStringReversedStringReversedStringReversed = tensReversedStringReversedStringReversedStringReversed.reverse\n        val ones\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppqlkvit9.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmppqlkvit9.scala:18:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtens\u001b[0m = arr.filter(_ >= \u001b[31m10\u001b[0m && _ <=\u001b[31m99\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppqlkvit9.scala:23:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(_ + One).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppqlkvit9.scala:24:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(_ + Two).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: Two\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppqlkvit9.scala:25:62 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsReversedString\u001b[0m = hundredsReversed.map(_ + Three).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: Three\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmppqlkvit9.scala:27:41 ---------------------------\u001b[0",
      "stdout": "",
      "timestamp": 1659803896
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x => x >= 10 && x < 20).toList\n        val teens = arr.filter(x => x >= 20 && x < 30).toList\n        val hundreds = arr.filter(x => x >= 30 && x < 40).toList\n        val thousands = arr.filter(x => x >= 40 && x < 50).toList\n        val millions = arr.filter(x => x >= 50 && x < 60).toList\n        val billions = arr.filter(x => x >= 60 && x < 70).toList\n        val trillions = arr.filter(x => x >= 70 && x < 80).toList\n        val quadrillions = arr.filter(x => x >= 80 && x < 90).toList\n        val quintillions = arr.filter(x => x >= 90 && x < 100).toList\n        val thousandands = arr.filter(x => x >= 100 && x < 1000).toList\n        val millionands = arr.filter(x => x >= 1000 && x < 10000).toList\n        val billionands = arr.filter(x => x >= 10000 && x < 100000).toList\n        val trillionands = arr.filter(x => x >= 100000 && x < 1000000).toList\n        val quadrillionands = arr.filter(x => x >= 1000000 && x < 10000000).toList\n        val quintillionands = arr.filter(x => x >= 10000000 && x < 100000000).toList\n        val thousandandands = arr.filter(x => x >= 100000000 && x < 1000000000).toList\n        val millionandands = arr.filter(x => x >= 1000000000 && x < 10000000000).toList\n        val billionandands = arr.filter(x => x >= 10000000000 && x < 100000000000).toList\n        val trillionandands = arr.filter(x => x >= 100000000000 && x < 1000000000000).toList\n        val quadrillionands = arr.filter(x => x >= 1000000000000 && x < 10000000000000).toList\n        val quintillionands = arr.filter(x => x >= 10000000000000 && x < 100000000000000).toList\n        val thousandandands = arr.filter(x => x >= 100000000000000 && x < 1000000000000000).toList\n        val millionandands = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000).toList\n        val billionandands = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000).toList\n        val trillionandands = arr.filter(x => x >= 100000000000000000 && \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp27kz49bw.scala:42:72 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtrillionandands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && \n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp27kz49bw.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mquadrillionands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x < \u001b[31m10000000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mquadrillionands is already defined as \u001b[33mvalue\u001b[0m \u001b[35mquadrillionands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp27kz49bw.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mquintillionands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x < \u001b[31m100000000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mquintillionands is already defined as \u001b[33mvalue\u001b[0m \u001b[35mquintillionands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp27kz49bw.scala:39:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandandands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x < \u001b[31m1000000000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b",
      "stdout": "",
      "timestamp": 1659803895
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n        val oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000l.toLong && x <= 9999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000l.toLong && x <= 99999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000l.toLong && x <= 999999999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp1txblk04.scala:28:118 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1txblk04.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1txblk04.scala:29:119 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1txblk04.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1txblk04.scala:30:128 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHund",
      "stdout": "",
      "timestamp": 1659803833
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(_ <= 9999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmph4a5c29j.scala:24:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmph4a5c29j.scala:25:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmph4a5c29j.scala:26:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmph4a5c29j.scala:27:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmph4a5c29j.scala:28:82 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    ",
      "stdout": "",
      "timestamp": 1659803895
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList.sortWith(_ < _)\n        val reversed = list.reverse\n        val result = reversed.map(i => if (i <= 9) s\"${i}\" else s\"${i - 10}\").mkString\n        if (result.isEmpty) Nil\n        else result.split(\"\\\\D+\").map(i => if (i.isEmpty) \"One\" else i).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg2osalsg.scala:21:72 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33melse\u001b[0m result.split(\u001b[31m\"\\\\D+\"\u001b[0m).map(i => \u001b[33mif\u001b[0m (i.isEmpty) \u001b[31m\"One\"\u001b[0m \u001b[33melse\u001b[0m i).mkString\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    String\n\u001b[31m   |\u001b[0m             Required: \u001b[1m\u001b[32mList\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803896
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands = arr.filter(_ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_ <= 999999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999999999999999999999999999).to\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpubwz3rfk.scala:24:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpubwz3rfk.scala:25:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpubwz3rfk.scala:26:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpubwz3rfk.scala:27:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpubwz3rfk.scala:28:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        num",
      "stdout": "",
      "timestamp": 1659803895
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val one = list.filter(x => x < 9).toList\n        val two = list.filter(x => x >= 9 && x < 18).toList\n        val three = list.filter(x => x >= 18 && x < 27).toList\n        val four = list.filter(x => x >= 27 && x < 36).toList\n        val five = list.filter(x => x >= 36 && x < 45).toList\n        val six = list.filter(x => x >= 45 && x < 54).toList\n        val seven = list.filter(x => x >= 54 && x < 63).toList\n        val eight = list.filter(x => x >= 63 && x < 72).toList\n        val nine = list.filter(x => x >= 72 && x < 81).toList\n        val ten = list.filter(x => x >= 81 && x < 90).toList\n        val hundred = list.filter(x => x >= 90 && x < 100).toList\n        val hundreds = list.filter(x => x >= 100).toList\n        val hundredths = list.filter(x => x >= 100).toList\n        val hundredth = list.filter(x => x >= 100).toList\n        val hundredths = list.filter(x => x >= 100).toList\n        val hundredth = list.filter(x => x >= 100).toList\n        val hundredths = list.filter(x => x >= 100).toList\n        val hundredth = list.filter(x => x >= 100).toList\n        val hundredths = list.filter(x => x >= 100).toList\n        val hundredth = list.filter(x => x >= 100).toList\n        val hundredths = list.filter(x => x >= 100).toList\n        val hundredth = list.filter(x => x >= 100).toList\n        val hundredths = list.filter(x => x >= 100).toList\n        val hundredth = list.filter(x => x >= 100).toList\n        val hundredths = list.filter(x => x >= 100).toList\n        val hundredth = list.filter(x => x >= 100).toList\n        val hundredths = list.filter(x => x >= 100).toList\n        val hundredth = list.filter(x => x >= 100).toList\n        val hundredths = list.filter(x => x >= 100).toList\n        val hundredth = list.filter(x => x >= 100).toList\n        val hundredths = list.filter(x => x >= 100).toList\n        val hundredth = list.filter(x => x >= 100).toList\n        val hundredths = \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp5eriiye1.scala:51:24 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredths\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5eriiye1.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredths\u001b[0m = list.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mhundredths is already defined as \u001b[33mvalue\u001b[0m \u001b[35mhundredths\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5eriiye1.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredth\u001b[0m = list.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mhundredth is already defined as \u001b[33mvalue\u001b[0m \u001b[35mhundredth\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5eriiye1.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredths\u001b[0m = list.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mhundredths is already defined as \u001b[33mvalue\u001b[0m \u001b[35mhundredths\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5eriiye1.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredth\u001b[0m = list.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100\u001b[0m).toList\n\u001b[31m\u001b[31m   ",
      "stdout": "",
      "timestamp": 1659803896
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val ones = nums.filter(x => x < 10).toList\n        val tens = nums.filter(x => x >= 10 && x < 100).toList\n        val hundreds = nums.filter(x => x >= 100).toList\n        val hundredsAndOnes = hundreds.map(x => x + \"One\")\n        val hundredsAndTens = hundreds.map(x => x + \"Ten\")\n        val hundredsAndHundreds = hundreds.map(x => x + \"Hundred\")\n        val hundredsAndOnesAndTens = hundredsAndOnes.map(x => x + \"And\" + tens.map(x => x + \"Ten\"))\n        val hundredsAndOnesAndHundreds = hundredsAndOnes.map(x => x + \"And\" + hundreds.map(x => x + \"Hundred\"))\n        val hundredsAndOnesAndHundredsAndTens = hundredsAndOnesAndHundreds.map(x => x + \"And\" + hundredsAndTens.map(x => x + \"Ten\"))\n        val hundredsAndOnesAndHundredsAndTensAndHundreds = hundredsAndOnesAndHundreds.map(x => x + \"And\" + hundredsAndTens.map(x => x + \"Ten\") + \"And\" + hundreds.map(x => x + \"Hundred\"))\n        val hundredsAndOnesAndHundredsAndTensAndHundredsAndOnes = hundredsAndOnesAndHundreds.map(x => x + \"And\" + hundredsAndTens.map(x => x + \"Ten\") + \"And\" + hundreds.map(x => x + \"Hundred\") + \"And\" + ones.map(x => x + \"One\"))\n        val hundredsAndOnesAndHundredsAndTensAndHundredsAndOnesAndTens = hundredsAndOnesAndHundreds.map(x => x + \"And\" + hundredsAndTens.map(x => x + \"Ten\") + \"And\" + hundreds.map(x => x + \"Hundred\") + \"And\" + ones.map(x => x + \"One\") + \"And\" + tens.map(x => x + \"Ten\"))\n        val hundredsAndOnesAndHundredsAndTensAndHundredsAndOnesAndHundreds = hundredsAndOnesAndHundreds.map(x => x + \"And\" + hundredsAndTens.map(x => x + \"Ten\") + \"And\" + hundreds.map(x => x + \"Hundred\") + \"And\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpkruyc0n2.scala:30:206 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndOnesAndHundredsAndTensAndHundredsAndOnesAndHundreds\u001b[0m = hundredsAndOnesAndHundreds.map(\u001b[36mx\u001b[0m => x + \u001b[31m\"And\"\u001b[0m + hundredsAndTens.map(\u001b[36mx\u001b[0m => x + \u001b[31m\"Ten\"\u001b[0m) + \u001b[31m\"And\"\u001b[0m + hundreds.map(\u001b[36mx\u001b[0m => x + \u001b[31m\"Hundred\"\u001b[0m) + \"And\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpkruyc0n2.scala:32:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkruyc0n2.scala:31:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkruyc0n2.scala:32:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Anddef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659803896
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10).map(x => s\"One\")\n        val tens = arr.filter(x => x >= 10 && x < 100).map(x => s\"Ten\")\n        val hundreds = arr.filter(x => x >= 100 && x < 1000).map(x => s\"Hundred\")\n        val thousands = arr.filter(x => x >= 1000 && x < 10000).map(x => s\"Thousand\")\n        val millions = arr.filter(x => x >= 10000 && x < 100000).map(x => s\"Million\")\n        val billions = arr.filter(x => x >= 100000 && x < 1000000).map(x => s\"Billion\")\n        val trillions = arr.filter(x => x >= 1000000 && x < 10000000).map(x => s\"Trillion\")\n        val quadrillions = arr.filter(x => x >= 10000000 && x < 100000000).map(x => s\"Quadrillion\")\n        val quintillions = arr.filter(x => x >= 100000000 && x < 1000000000).map(x => s\"Quintillion\")\n        val sextillions = arr.filter(x => x >= 1000000000 && x < 10000000000).map(x => s\"Sextillion\")\n        val septillions = arr.filter(x => x >= 10000000000 && x < 100000000000).map(x => s\"Septillion\")\n        val octillions = arr.filter(x => x >= 100000000000 && x < 1000000000000).map(x => s\"Octillion\")\n        val nonillions = arr.filter(x => x >= 1000000000000 && x < 10000000000000).map(x => s\"Nonillion\")\n        val decillions = arr.filter(x => x >= 10000000000000 && x < 100000000000000).map(x => s\"Decillion\")\n        val undecillions = arr.filter(x => x >= 100000000000000 && x < 1000000000000000).map(x => s\"Undecillion\")\n        val duodecillions = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000).map(x => s\"Duodecillion\")\n        val tredecillions = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000).map(x => s\"Tredecillion\")\n        val quattuordecillions = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000).map(x => s\"Quattuordecillion\")\n        val quindecillions = arr.filter(x => x >= \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpu7g354un.scala:35:49 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mquindecillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu7g354un.scala:26:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msextillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Sextillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu7g354un.scala:27:47 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mseptillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Septillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu7g354un.scala:27:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mseptillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Septillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu7g354un.scala:28:46 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moctillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m)",
      "stdout": "",
      "timestamp": 1659803898
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.foldLeft(List[String]()){\n            (acc, x) => acc match {\n                case Nil => List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n                case _ => if (x < 9 && x > 1) List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\") else List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Nine\", \"Nine\", \"Nine\")\n            }\n        }.reverse\n        arr.foldLeft(List[String]()){\n            (acc, x) => acc match {\n                case Nil => List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n                case _ => if (x < 9 && x > 1) List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\") else List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Nine\", \"Nine\", \"Nine\")\n            }\n        }.reverse.foldLeft(List[String]()){\n            (acc, x) => acc match {\n                case Nil => List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n                case _ => if (x < 9 && x > 1) List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\") else List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Nine\", \"Nine\", \"Nine\")\n            }\n        }.reverse.foldLeft(List[String]()){\n            (acc, x) => acc match {\n                case Nil => List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n                case _ => if (x < 9 && x > 1) List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\") else List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Nine\", \"Nine\", \"Nine\")\n            }\n        }.reverse.foldLeft(List[String]()){\n            (acc, x) => acc match {\n\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwwl09pel.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'case' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwwl09pel.scala:51:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwwl09pel.scala:31:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                \u001b[33mcase\u001b[0m _ => \u001b[33mif\u001b[0m (x < \u001b[31m9\u001b[0m && x > \u001b[31m1\u001b[0m) List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \u001b[31m\"Five\"\u001b[0m, \u001b[31m\"Six\"\u001b[0m, \u001b[31m\"Seven\"\u001b[0m, \u001b[31m\"Eight\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m) \u001b[33melse\u001b[0m List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \u001b[31m\"Five\"\u001b[0m, \u001b[31m\"Six\"\u001b[0m, \u001b[31m\"Seven\"\u001b[0m, \u001b[31m\"Eight\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m, \u001b[31m\"Ten\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (\u001b[31m9\u001b[0m : Int)\n\u001b[31m   |\u001b[0m                                  Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwwl09pel.scala:31:43 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                \u001b[33mcase\u001b[0m _ => \u001b[33mif\u001b[0m (x < \u001b[31m9\u001b[0m && x > \u001b[31m1\u001b[0m) List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \u001b[31m\"Five\"\u001b[0m, \u001b[31m\"Six\"\u001b[0m, \u001b[31m\"Seven\"\u001b[0m, \u001b[31m\"Eight\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m) \u001b[33melse\u001b[0m List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \u001b[31m\"Five\"\u001b[0m, \u001b[31m\"Six\"\u001b[0m, \u001b[31m\"Seven\"\u001b[0m, \u001b[31m\"Eight\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m, \u001b[31m\"Ten\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (\u001b[31m1\u001b[0m : Int)\n\u001b[31m   |\u001b[0m                                           ",
      "stdout": "",
      "timestamp": 1659803899
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong).map(x => s\"One\")\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong).map(x => s\"Ten\")\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong).map(x => s\"Hundred\")\n        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong).map(x => s\"Thousand\")\n        val millions = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong).map(x => s\"Million\")\n        val billions = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong).map(x => s\"Billion\")\n        val trillions = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong).map(x => s\"Trillion\")\n        val quadrillions = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong).map(x => s\"Quadrillion\")\n        val quintillions = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong).map(x => s\"Quintillion\")\n        val sextillions = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong).map(x => s\"Sextillion\")\n        val septillions = arr.filter(x => x >= 10000000000000l.toLong && x <= 9999999999999999l.toLong).map(x => s\"Septillion\")\n        val octillions = arr.filter(x => x >= 1000000000000000l.toLong && x <= 9999999999999999999l.toLong).map(x => s\"Octillion\")\n        val nonillions = arr.filter(x => x >= 10000000000000000l.toLong && x <= 99999999999999999999l.toLong).map(x => s\"Nonillion\")\n        val decillions = arr.filter(x => x >= 100000000000000000l.toLong && x <= 99999999999999999999999l.toLong).map(x => s\"Decillion\")\n        val undecillions = arr.filter(x => x >= 100000000000000000.0l.toLong && x <= 99999999999999999999999l.toLong).map(x => s\"Undecillion\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp47govsbp.scala:28:79 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moctillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Octillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp47govsbp.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnonillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Nonillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp47govsbp.scala:29:80 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnonillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Nonillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp47govsbp.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdecillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Decillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp47govsbp.scala:30:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdecillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m.toLong).",
      "stdout": "",
      "timestamp": 1659803900
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(_ <= 9999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp909dtbiw.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp909dtbiw.scala:24:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp909dtbiw.scala:25:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp909dtbiw.scala:26:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp909dtbiw.scala:27:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp909dtbiw.scala:28:82 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b",
      "stdout": "",
      "timestamp": 1659803900
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val ones = list.filter(_ <= 9).toList\n        val tens = list.filter(_ <= 99).toList\n        val hundreds = list.filter(_ <= 999).toList\n        val thousands = list.filter(_ <= 9999).toList\n        val tenThousands = list.filter(_ <= 999999).toList\n        val oneThousands = list.filter(_ <= 9999999).toList\n        val oneHundreds = list.filter(_ <= 999999999).toList\n        val oneThousandThousands = list.filter(_ <= 99999999999).toList\n        val oneHundredThousands = list.filter(_ <= 999999999999).toList\n        val oneHundredThousandThousands = list.filter(_ <= 999999999999999).toList\n        val oneHundredThousandThousands = list.filter(_ <= 999999999999999999).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 99999999999998).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 999999999999987).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999876).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 99999999999998765).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 999999999999987654).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999876543).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 99999999999998765432).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 999999999999987654321).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999876543211).toList\n        val oneHundredThousandThousandThousands = list.filter(_ <= 99999999999998765432111).toList\n        val oneHundredThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyckqdbv2.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyckqdbv2.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = list.filter(_ <= \u001b[31m999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyckqdbv2.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = list.filter(_ <= \u001b[31m99999999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyckqdbv2.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = list.filter(_ <= \u001b[31m999999999999987\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyckqdbv2.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b",
      "stdout": "",
      "timestamp": 1659803900
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val ones = list.filter(_ <= 9).toList\n        val tens = list.filter(_ >= 10 && _ <=99).toList\n        val hundreds = list.filter(_ >= 100).toList\n        val hundredsReversed = hundreds.reverse\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val tensReversedReversed = tensReversed.reverse\n        val onesReversedReversed = onesReversed.reverse\n        val tensReversedReversedReversed = tensReversedReversed.reverse\n        val onesReversedReversedReversed = onesReversedReversed.reverse\n        val tensReversedReversedReversedReversed = tensReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversed = onesReversedReversedReversed.reverse\n        val tensReversedReversedReversedReversedReversed = tensReversedReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversed.reverse\n        val tensReversedReversedReversedReversedReversedReversedReversed = tensReversedReversedReversedReversedReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n        val tensReversedReversedReversedReversedReversedReversedReversedReversedReversed = tensReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n        val tensReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = tensReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgow_m6ji.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpgow_m6ji.scala:20:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtens\u001b[0m = list.filter(_ >= \u001b[31m10\u001b[0m && _ <=\u001b[31m99\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgow_m6ji.scala:32:67 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedReversedReversedReversedReversedReversed\u001b[0m = onesReversedReversedReversedReversedReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Not found: onesReversedReversedReversedReversedReversed\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpgow_m6ji.scala:33:75 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedReversedReversedReversedReversedReversedReversed\u001b[0m = tensReversedReversedReversedReversedReversedReversedReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mtensReversedReversedReversedReversedReversedReversedReversed\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpgow_m6ji.scala:34:83 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedReversedReversedReversedReversedReversedReversedReversed\u001b[0m = onesReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ",
      "stdout": "",
      "timestamp": 1659803902
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands = arr.filter(_ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_ <= 999999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n        val oneHund\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp27egg173.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp27egg173.scala:24:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp27egg173.scala:25:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp27egg173.scala:26:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp27egg173.scala:27:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp27egg173.scala:28:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999999999\u001b[0m).toList\n\u001b[31m",
      "stdout": "",
      "timestamp": 1659803858
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val len = arr.length\n        val reversed = arr.sortWith(_ < _)\n        val result = reversed.map(i => if (i < 1l.toLong || i > 9l.toLong) \"\" else i.toString).reverse\n        val named = result.map(i => if (i < 1l.toLong || i > 9l.toLong) \"\" else i.toString).map(i => if (i < 1l.toLong || i > 9l.toLong) \"\" else i.toString.replaceAll(\"[0-9]\", \"One\").replaceAll(\"[0-9]\", \"Two\").replaceAll(\"[0-9]\", \"Three\").replaceAll(\"[0-9]\", \"Four\").replaceAll(\"[0-9]\", \"Five\").replaceAll(\"[0-9]\", \"Six\").replaceAll(\"[0-9]\", \"Seven\").replaceAll(\"[0-9]\", \"Eight\").replaceAll(\"[0-9]\", \"Nine\"))\n        if (len == 0) named.toList\n        else named\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvmbvjcqm.scala:20:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnamed\u001b[0m = result.map(\u001b[36mi\u001b[0m => \u001b[33mif\u001b[0m (i < \u001b[31m1l\u001b[0m.toLong || i > \u001b[31m9l\u001b[0m.toLong) \u001b[31m\"\"\u001b[0m \u001b[33melse\u001b[0m i.toString).map(\u001b[36mi\u001b[0m => \u001b[33mif\u001b[0m (i < \u001b[31m1l\u001b[0m.toLong || i > \u001b[31m9l\u001b[0m.toLong) \u001b[31m\"\"\u001b[0m \u001b[33melse\u001b[0m i.toString.replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"One\"\u001b[0m).replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m).replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m).replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m).replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"Five\"\u001b[0m).replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"Six\"\u001b[0m).replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"Seven\"\u001b[0m).replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"Eight\"\u001b[0m).replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    Long\n\u001b[31m   |\u001b[0m                                            Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvmbvjcqm.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnamed\u001b[0m = result.map(\u001b[36mi\u001b[0m => \u001b[33mif\u001b[0m (i < \u001b[31m1l\u001b[0m.toLong || i > \u001b[31m9l\u001b[0m.toLong) \u001b[31m\"\"\u001b[0m \u001b[33melse\u001b[0m i.toString).map(\u001b[36mi\u001b[0m => \u001b[33mif\u001b[0m (i < \u001b[31m1l\u001b[0m.toLong || i > \u001b[31m9l\u001b[0m.toLong) \u001b[31m\"\"\u001b[0m \u001b[33melse\u001b[0m i.toString.replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"One\"\u001b[0m).replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m).replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m).replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m).replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"Five\"\u001b[0m).replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"Six\"\u001b[0m).replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"Seven\"\u001b[0m).replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"Eight\"\u001b[0m).replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              ",
      "stdout": "",
      "timestamp": 1659803904
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val reversed = list.sortWith(_ < _)\n        val result = reversed.map(i => if (i < 10) {\n            val str = i.toString\n            val index = str.indexOf(\"0\")\n            val name = if (index == -1) \"One\" else str.substring(0, index)\n            name else str\n        }\n        else i.toString)\n        if (result.isEmpty) List()\n        else result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpe8if2bkl.scala:24:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            name \u001b[33melse\u001b[0m str\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 end of statement expected but 'else' found\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803899
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9).toList\n        val tens = arr.filter(x => x > 9).toList\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n        val tensReversedString = tensReversed.map(x => Two(x))\n        val tensReversedString2 = tensReversed.map(x => Three(x))\n        val tensReversedString3 = tensReversed.map(x => Four(x))\n        val tensReversedString4 = tensReversed.map(x => Five(x))\n        val tensReversedString5 = tensReversed.map(x => Six(x))\n        val tensReversedString6 = tensReversed.map(x => Seven(x))\n        val tensReversedString7 = tensReversed.map(x => Eight(x))\n        val tensReversedString8 = tensReversed.map(x => Nine(x))\n        val tensReversedString9 = tensReversed.map(x => Ten(x))\n        val tensReversedString10 = tensReversed.map(x => Eleven(x))\n        val tensReversedString11 = tensReversed.map(x => Twelve(x))\n        val tensReversedString12 = tensReversed.map(x => Thirteen(x))\n        val tensReversedString13 = tensReversed.map(x => Fourteen(x))\n        val tensReversedString14 = tensReversed.map(x => Fifteen(x))\n        val tensReversedString15 = tensReversed.map(x => Sixteen(x))\n        val tensReversedString16 = tensReversed.map(x => Seventeen(x))\n        val tensReversedString17 = tensReversed.map(x => Eighteen(x))\n        val tensReversedString18 = tensReversed.map(x => Nineteen(x))\n        val tensReversedString19 = tensReversed.map(x => Twenty(x))\n        val tensReversedString20 = tensReversed.map(x => TwentyOne(x))\n        val tensReversedString21 = tensReversed.map(x => TwentyTwo(x))\n        val tensReversedString22 = tensReversed.map(x => TwentyThree(x))\n        val tensReversedString23 = tensReversed.map(\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpbhv6rhyj.scala:44:52 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString23\u001b[0m = tensReversed.map(\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbhv6rhyj.scala:21:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => One(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbhv6rhyj.scala:22:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => Two(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: Two\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbhv6rhyj.scala:23:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString2\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => Three(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: Three\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbhv6rhyj.scala:24:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString3\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => Four(x))\n\u001b[31m\u001b[31m   |\u001b[0m             ",
      "stdout": "",
      "timestamp": 1659803904
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val maxLen = len / 10\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpjyml4eyb.scala:65:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLen47\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjyml4eyb.scala:66:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803906
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.filter(_ >= 1l && _ <= 9l)\n        val reversed = nums.reverse\n        val result = reversed.map(i => s\"${i % 10}${byName(i)}\").filter(_.nonEmpty)\n        if (result.isEmpty) Nil else result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmps58bbu2u.scala:17:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnums\u001b[0m = arr.filter(_ >= \u001b[31m1l\u001b[0m && _ <= \u001b[31m9l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps58bbu2u.scala:19:52 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reversed.map(\u001b[36mi\u001b[0m => \u001b[31ms\"\u001b[0m${i % \u001b[31m10\u001b[0m}${byName(i)}\u001b[31m\"\u001b[0m).filter(_.nonEmpty)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Not found: byName\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803902
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.filter(_ > 0).toList\n        val numsLength = nums.length\n        if (numsLength == 0) List()\n        else if (numsLength == 1) List(nums(0).toString)\n        else {\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = nums.length\n            val numsLength = \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpynxrvlqk.scala:80:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnumsLength\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpynxrvlqk.scala:91:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpynxrvlqk.scala:23:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnumsLength\u001b[0m = nums.length\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpynxrvlqk.scala:24:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnumsLength\u001b[0m = nums.length\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpynxrvlqk.scala:25:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnumsLength\u001b[0m = nums.length\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpynxrvlqk.scala:26:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnumsLength\u001b[0m = nums.length\n\u001b[31m\u001b[31m   |\u001b[",
      "stdout": "",
      "timestamp": 1659803906
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortWith(_ < _).reverse\n        val map = new mutable.HashMap[String, String]()\n        map.put(\"One\", \"1\")\n        map.put(\"Two\", \"2\")\n        map.put(\"Three\", \"3\")\n        map.put(\"Four\", \"4\")\n        map.put(\"Five\", \"5\")\n        map.put(\"Six\", \"6\")\n        map.put(\"Seven\", \"7\")\n        map.put(\"Eight\", \"8\")\n        map.put(\"Nine\", \"9\")\n        result.map(x => map.get(x)).filter(x => x != null)\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpjts8xhds.scala:17:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = arr.filter(_ >= \u001b[31m1l\u001b[0m.toLong && _ <= \u001b[31m9l\u001b[0m.toLong).sortWith(_ < _).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjts8xhds.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmap\u001b[0m = \u001b[33mnew\u001b[0m mutable.HashMap[\u001b[35mString\u001b[0m, \u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803902
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val ones = list.filter(_ <= 9).toList\n        val tens = list.filter(_ >= 10 && _ < 19).toList\n        val hundreds = list.filter(_ >= 20 && _ < 99).toList\n        val thousands = list.filter(_ >= 100 && _ < 999).toList\n        val hundredsReversed = hundreds.reverse\n        val thousandsReversed = thousands.reverse\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.mkString(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val tensReversedString = tensReversed.mkString(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val hundredsReversedString = hundredsReversed.mkString(\"Hundred\", \"Thousand\", \"Hundred\", \"Hundred\", \"Hundred\", \"Hundred\", \"Hundred\", \"Hundred\", \"Hundred\", \"Hundred\")\n        val thousandsReversedString = thousandsReversed.mkString(\"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\")\n        val hundredsReversedStringList = List(hundredsReversedString)\n        val thousandsReversedStringList = List(thousandsReversedString)\n        val hundredsReversedStringListString = hundredsReversedStringList.mkString(\"Hundred\", \"Thousand\", \"Hundred\", \"Hundred\", \"Hundred\", \"Hundred\", \"Hundred\", \"Hundred\", \"Hundred\", \"Hundred\", \"Hundred\")\n        val thousandsReversedStringListString = thousandsReversedStringList.mkString(\"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\")\n        val hundredsReversedStringListStringList = List(hundredsReversedStringListString)\n        val thousandsReversedStringListStringList = List(thousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_4pdz4a8.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp_4pdz4a8.scala:20:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtens\u001b[0m = list.filter(_ >= \u001b[31m10\u001b[0m && _ < \u001b[31m19\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp_4pdz4a8.scala:21:35 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundreds\u001b[0m = list.filter(_ >= \u001b[31m20\u001b[0m && _ < \u001b[31m99\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp_4pdz4a8.scala:22:36 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousands\u001b[0m = list.filter(_ >= \u001b[31m100\u001b[0m && _ < \u001b[31m999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_4pdz4a8.scala:27:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.mkString(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \u001b[31m\"Five\"\u001b[0m, \u001b[31m\"Six\"\u001b[0m, \u001b[31m\"Seven\"\u001b[0m, \u001b[31m\"Eight\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    (String, String, String, String, String, String, String, String, String)\n\u001b[31m   |\u001b[0mRequired: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_4pdz",
      "stdout": "",
      "timestamp": 1659803908
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList.sortWith(_ < _)\n        val reversed = list.reverse\n        val result = reversed.map(i => if (i < 10) \"One\" else if (i < 20) \"Two\" else if (i < 30) \"Three\" else if (i < 40) \"Four\" else if (i < 50) \"Five\" else if (i < 60) \"Six\" else if (i < 70) \"Seven\" else if (i < 80) \"Eight\" else \"Nine\")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_h4_zubm.scala:23)\n\tat Problem.main(tmp_h4_zubm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659803909
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val numsLen = nums.size\n        val numsLenStr = numsLen.toString\n        val numsLenStrLen = numsLenStr.length\n        val numsLenStrLen2 = numsLenStrLen + 2\n        val numsLenStrLen3 = numsLenStrLen + 3\n        val numsLenStrLen4 = numsLenStrLen + 4\n        val numsLenStrLen5 = numsLenStrLen + 5\n        val numsLenStrLen6 = numsLenStrLen + 6\n        val numsLenStrLen7 = numsLenStrLen + 7\n        val numsLenStrLen8 = numsLenStrLen + 8\n        val numsLenStrLen9 = numsLenStrLen + 9\n        val numsLenStrLen10 = numsLenStrLen + 10\n        val numsLenStrLen11 = numsLenStrLen + 11\n        val numsLenStrLen12 = numsLenStrLen + 12\n        val numsLenStrLen13 = numsLenStrLen + 13\n        val numsLenStrLen14 = numsLenStrLen + 14\n        val numsLenStrLen15 = numsLenStrLen + 15\n        val numsLenStrLen16 = numsLenStrLen + 16\n        val numsLenStrLen17 = numsLenStrLen + 17\n        val numsLenStrLen18 = numsLenStrLen + 18\n        val numsLenStrLen19 = numsLenStrLen + 19\n        val numsLenStrLen20 = numsLenStrLen + 20\n        val numsLenStrLen21 = numsLenStrLen + 21\n        val numsLenStrLen22 = numsLenStrLen + 22\n        val numsLenStrLen23 = numsLenStrLen + 23\n        val numsLenStrLen24 = numsLenStrLen + 24\n        val numsLenStrLen25 = numsLenStrLen + 25\n        val numsLenStrLen26 = numsLenStrLen + 26\n        val numsLenStrLen27 = numsLenStrLen + 27\n        val numsLenStrLen28 = numsLenStrLen + 28\n        val numsLenStrLen29 = numsLenStrLen + 29\n        val numsLen\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1es4sanu.scala:50:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1es4sanu.scala:50:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803907
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong).map(x => x.toString)\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong).map(x => x.toString)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong).map(x => x.toString)\n        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong).map(x => x.toString)\n        val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong).map(x => x.toString)\n        val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong).map(x => x.toString)\n        val oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong).map(x => x.toString)\n        val oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong).map(x => x.toString)\n        val oneThousandThousands = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong).map(x => x.toString)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong).map(x => x.toString)\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong).map(x => x.toString)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000l.toLong && x <= 9999999999999999999l.toLong).map(x => x.toString)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000l.toLong && x <= 99999999999999999999l.toLong).map(x => x.toString)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000l.toLong && x <= 99999999999999999999999l.toLong).map(x => x.toString)\n        val oneThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpu3w_8bop.scala:28:103 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => x.toString)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu3w_8bop.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => x.toString)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu3w_8bop.scala:29:106 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => x.toString)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu3w_8bop.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => x.toString)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu3w_8bop.scala:30:114 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousan",
      "stdout": "",
      "timestamp": 1659803845
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        if (len == 0) return Nil\n        val min = list.min\n        val max = list.max\n        val digits = list.map(_.toString.toInt)\n        val reversed = digits.reverse\n        val ones = reversed.takeWhile(_ < 10)\n        val tens = reversed.dropWhile(_ < 10).takeWhile(_ >= 10)\n        val tensMap = tens.map(_.toString.toInt)\n        val tensReversed = tensMap.reverse\n        val tensOnes = tensReversed.takeWhile(_ < 10)\n        val tensTens = tensReversed.dropWhile(_ < 10).takeWhile(_ >= 10)\n        val tensTensMap = tensTens.map(_.toString.toInt)\n        val tensTensReversed = tensTensMap.reverse\n        val tensOnesReversed = tensOnes.reverse\n        val tensOnesReversedMap = tensOnesReversed.map(_.toString.toInt)\n        val tensOnesReversedReversed = tensOnesReversedMap.reverse\n        val tensOnesReversedReversedMap = tensOnesReversedReversed.map(_.toString.toInt)\n        val tensOnesReversedReversedReversedMap = tensOnesReversedReversedMap.reverse\n        val tensOnesReversedReversedReversedMap = tensOnesReversedReversedMap.reverse\n        val tensOnesReversedReversedReversedReversedMap = tensOnesReversedReversedReversedMap.reverse\n        val tensOnesReversedReversedReversedReversedReversedMap = tensOnesReversedReversedReversedReversedMap.reverse\n        val tensOnesReversedReversedReversedReversedReversedReversedMap = tensOnesReversedReversedReversedReversedReversedMap.reverse\n        val tensOnesReversedReversedReversedReversedReversedReversedReversedMap = tensOnesReversedReversedReversedReversedReversedReversedMap.reverse\n        val tensOnesReversedReversedReversedReversedReversedReversedReversedReversedMap = tensOnesReversedReversedReversedReversedReversedReversedReversedMap.reverse\n        val tensOnesReversedReversedReversedReversedReversedReversedReversed\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpatly9aub.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpatly9aub.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensOnesReversedReversedReversedMap\u001b[0m = tensOnesReversedReversedMap.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensOnesReversedReversedReversedMap is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtensOnesReversedReversedReversedMap\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpatly9aub.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659803908
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val n = arr.size\n        val list = arr.toList\n        val ones = list.filter(x => x < 10).toList\n        val tens = list.filter(x => x >= 10 && x < 20).toList\n        val hundreds = list.filter(x => x >= 20 && x < 30).toList\n        val thousands = list.filter(x => x >= 30 && x < 40).toList\n        val hundredsAndOnes = list.filter(x => x >= 40 && x < 50).toList\n        val hundredsAndTens = list.filter(x => x >= 50 && x < 60).toList\n        val hundredsAndHundreds = list.filter(x => x >= 60 && x < 70).toList\n        val hundredsAndThousands = list.filter(x => x >= 70 && x < 80).toList\n        val hundredsAndHundredsAndOnes = list.filter(x => x >= 80 && x < 90).toList\n        val hundredsAndHundredsAndTens = list.filter(x => x >= 90 && x < 100).toList\n        val hundredsAndHundredsAndHundreds = list.filter(x => x >= 100 && x < 1000).toList\n        val hundredsAndHundredsAndThousands = list.filter(x => x >= 1000 && x < 10000).toList\n        val hundredsAndHundredsAndHundredsAndOnes = list.filter(x => x >= 10000 && x < 100000).toList\n        val hundredsAndHundredsAndHundredsAndTens = list.filter(x => x >= 100000 && x < 1000000).toList\n        val hundredsAndHundredsAndHundredsAndHundreds = list.filter(x => x >= 1000000 && x < 10000000).toList\n        val hundredsAndHundredsAndHundredsAndThousands = list.filter(x => x >= 10000000 && x < 100000000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndOnes = list.filter(x => x >= 100000000 && x < 1000000000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndTens = list.filter(x => x >= 1000000000 && x < 10000000000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundreds = list.filter(x => x >= 10000000000 && x < 100000000000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndThousands = list.filter(x => x >= 100000000000 && x < 1000000000000).toList\n        val hundredsAndHundred\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpovu99m23.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpovu99m23.scala:36:103 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndHundredsAndHundredsAndHundredsAndTens\u001b[0m = list.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpovu99m23.scala:37:89 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndHundredsAndHundredsAndHundredsAndHundreds\u001b[0m = list.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpovu99m23.scala:37:108 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndHundredsAndHundredsAndHundredsAndHundreds\u001b[0m = list.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpovu99m23.scala:38:90 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndHundredsAndHundredsAndHundredsAndThousands\u001b[0m = list.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                     ",
      "stdout": "",
      "timestamp": 1659803908
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val reversed = list.sortWith(_ < _)\n        val result = reversed.reverse.map(x => if (x < 10) \"One\" else if (x < 100) \"Two\" else if (x < 1000) \"Three\" else if (x < 10000) \"Four\" else if (x < 100000) \"Five\" else if (x < 1000000) \"Six\" else if (x < 10000000) \"Seven\" else \"Eight\" else if (x < 100000000) \"Nine\")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4h32_31l.scala:20:243 --------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reversed.reverse.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x < \u001b[31m10\u001b[0m) \u001b[31m\"One\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m100\u001b[0m) \u001b[31m\"Two\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m1000\u001b[0m) \u001b[31m\"Three\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m10000\u001b[0m) \u001b[31m\"Four\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m100000\u001b[0m) \u001b[31m\"Five\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m1000000\u001b[0m) \u001b[31m\"Six\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m10000000\u001b[0m) \u001b[31m\"Seven\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Eight\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m100000000\u001b[0m) \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          ')' expected, but 'else' found\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803904
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(_ <= 9999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpznh5jm9n.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpznh5jm9n.scala:24:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpznh5jm9n.scala:25:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpznh5jm9n.scala:26:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpznh5jm9n.scala:27:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundre",
      "stdout": "",
      "timestamp": 1659803882
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.sortWith(_.toLong < _.toLong)\n        val reversed = result.reverse\n        reversed.map(_.toString).filterNot(_.equals(\"0\")).map(name => s\"${name.toUpperCase()}\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4u8p91q2.scala:22)\n\tat Problem.main(tmp4u8p91q2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659803908
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong).map(x => x.toString.toUpperCase)\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong).map(x => x.toString.toUpperCase)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong).map(x => x.toString.toUpperCase)\n        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong).map(x => x.toString.toUpperCase)\n        val hundredths = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong).map(x => x.toString.toUpperCase)\n        val thousandths = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong).map(x => x.toString.toUpperCase)\n        val tenths = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong).map(x => x.toString.toUpperCase)\n        val oneths = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong).map(x => x.toString.toUpperCase)\n        val oneth = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong).map(x => x.toString.toUpperCase)\n        val tenth = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong).map(x => x.toString.toUpperCase)\n        val hundredth = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong).map(x => x.toString.toUpperCase)\n        val thousandth = arr.filter(x => x >= 100000000000000l.toLong && x <= 9999999999999999999l.toLong).map(x => x.toString.toUpperCase)\n        val onehundredth = arr.filter(x => x >= 1000000000000000l.toLong && x <= 99999999999999999999l.toLong).map(x => x.toString.toUpperCase)\n        val onethousandth = arr.filter(x => x >= 10000000000000000l.toLong && x <= 99999999999999999999999l.toLong).map(x => x.toString.toUpperCase)\n        val onehundredthousandth = arr.filter(x => x >= 100000000000000000l.toLong && x <= 999999999999999999999999l.toLong).map(x => \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp2kfgtzc3.scala:28:78 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandth\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => x.toString.toUpperCase)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2kfgtzc3.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monehundredth\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => x.toString.toUpperCase)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2kfgtzc3.scala:29:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monehundredth\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => x.toString.toUpperCase)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2kfgtzc3.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monethousandth\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => x.toString.toUpperCase)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2kfgtzc3.scala:30:83 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monethousandth\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m",
      "stdout": "",
      "timestamp": 1659803908
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ > 0l).sortWith(_ < _).reverse.map(i => i.toString).map(i => i.replaceAll(\"\\\\D\", \"\"))\n        if (result.isEmpty) List()\n        else result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph7zcsi1m.scala:22)\n\tat Problem.main(tmph7zcsi1m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659803910
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9).toList\n        val tens = arr.filter(x => x > 9).toList\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n        val tensReversedString = tensReversed.map(x => Two(x))\n        val tensReversedStringReversed = tensReversedString.reverse\n        val tensReversedStringReversedString = tensReversedStringReversed.map(x => Three(x))\n        val tensReversedStringReversedStringReversed = tensReversedStringReversedString.reverse\n        val tensReversedStringReversedStringReversedString = tensReversedStringReversedStringReversed.map(x => Four(x))\n        val tensReversedStringReversedStringReversedStringReversed = tensReversedStringReversedStringReversedString.reverse\n        val tensReversedStringReversedStringReversedStringReversedString = tensReversedStringReversedStringReversedStringReversed.map(x => Five(x))\n        val tensReversedStringReversedStringReversedStringReversedStringReversed = tensReversedStringReversedStringReversedStringReversedStringReversed.map(x => Six(x))\n        val tensReversedStringReversedStringReversedStringReversedStringReversedString = tensReversedStringReversedStringReversedStringReversedStringReversedString.map(x => Seven(x))\n        val tensReversedStringReversedStringReversedStringReversedStringReversedStringReversed = tensReversedStringReversedStringReversedStringReversedStringReversedStringReversed.map(x => Eight(x))\n        val tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed = tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedString.map(x => Nine(x))\n        val tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedString = tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed.map(x => Ten(x))\n        val tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed = tensReversedStringReversedStringReversedStringReversedString\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8s7w77lu.scala:21:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => One(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8s7w77lu.scala:22:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => Two(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: Two\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8s7w77lu.scala:24:83 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringReversedString\u001b[0m = tensReversedStringReversed.map(\u001b[36mx\u001b[0m => Three(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: Three\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8s7w77lu.scala:26:111 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringReversedStringReversedString\u001b[0m = tensReversedStringReversedStringReversed.map(\u001b[36mx\u001b[0m => Four(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                         Not found: Four\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8s7w77l",
      "stdout": "",
      "timestamp": 1659803909
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val arr = arr.toList\n        val len = arr.length\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n        val hundredThousands = arr.filter(_ <= 9999999).toList\n        val thousandThousands = arr.filter(_ <= 999999999).toList\n        val oneThousands = arr.filter(_ <= 99999999999).toList\n        val oneHundreds = arr.filter(_ <= 9999999998).toList\n        val oneThousandThousands = arr.filter(_ <= 999999999999).toList\n        val oneThousandHundreds = arr.filter(_ <= 9999999999998).toList\n        val oneHundredThousands = arr.filter(_ <= 999999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).toList\n        val oneHundredThousandHundreds = arr.filter(_ <= 99999999999999999999999).toList\n        val oneHundredThousandHundredThousands = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousands = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousandThousands = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousandHundredThousands = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousandHundredTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5_wobflf.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp5_wobflf.scala:17:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_wobflf.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659803910
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val numsLength = nums.length\n        val numsReversed = nums.reverse\n        val numsReversedLength = numsReversed.length\n        val numsReversedReversed = numsReversed.reverse\n        val numsReversedReversedLength = numsReversedReversed.length\n        val numsReversedReversedReversedLength = numsReversedReversedReversed.length\n        val numsReversedReversedReversedReversedLength = numsReversedReversedReversedReversed.length\n        val numsReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedReversed.length\n        val numsReversedReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedReversedReversed.length\n        val numsReversedReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedReversedReversed.length\n        val numsReversedReversedReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedReversedReversedReversed.length\n        val numsReversedReversedReversedReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedReversedReversedReversedReversed.length\n        val numsReversedReversedReversedReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedReversedReversedReversedReversed.length\n        val numsReversedReversedReversedReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedReversedReversedReversedReversedReversed.length\n        val numsReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.length\n        val numsReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.length\n        val numsReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpev2kz98z.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsReversedReversedReversedReversedReversedReversedLength\u001b[0m = numsReversedReversedReversedReversedReversedReversed.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsReversedReversedReversedReversedReversedReversedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsReversedReversedReversedReversedReversedReversedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpev2kz98z.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsReversedReversedReversedReversedReversedReversedReversedReversedLength\u001b[0m = numsReversedReversedReversedReversedReversedReversedReversedReversed.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsReversedReversedReversedReversedReversedReversedReversedReversedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsReversedReversedReversedReversedReversedReversedReversedReversedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpev2kz98z.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsReversedReversedReversedReversedReversedReversedReversedReversedLength\u001b[0m = numsReversedReversedReversedReversedReversedReversedReversedReversedReversed.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsReversedRev",
      "stdout": "",
      "timestamp": 1659803911
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val reversed = list.sortWith(_ < _)\n        val result = reversed.map(x => if (x < 10L) x else x.toString.replaceFirst(\"^0*\", \"\"))\n        if (len > 0) result else List()\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm_6yslsl.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mif\u001b[0m (len > \u001b[31m0\u001b[0m) result \u001b[33melse\u001b[0m List()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (result : List[Matchable])\n\u001b[31m   |\u001b[0m                     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803910
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val len = nums.map(_.toString.length).max\n        val numsSorted = nums.sortBy(_.toString.length)\n        val reversed = numsSorted.reverse\n        val digits = reversed.map(_.toString)\n        val names = \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n        val result = reversed.map(x => digits(x-1) + names(x))\n        if (result.isEmpty) List()\n        else result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpodojj6sb.scala:22:25 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnames\u001b[0m = \u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \u001b[31m\"Five\"\u001b[0m, \u001b[31m\"Six\"\u001b[0m, \u001b[31m\"Seven\"\u001b[0m, \u001b[31m\"Eight\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         end of statement expected but ',' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpodojj6sb.scala:23:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reversed.map(\u001b[36mx\u001b[0m => digits(x-\u001b[31m1\u001b[0m) + names(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    Long\n\u001b[31m   |\u001b[0m                                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpodojj6sb.scala:23:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reversed.map(\u001b[36mx\u001b[0m => digits(x-\u001b[31m1\u001b[0m) + names(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (x : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659803913
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val one = arr.filter(x => x < 10).map(x => s\"One\")\n        val two = arr.filter(x => x < 20).map(x => s\"Two\")\n        val three = arr.filter(x => x < 30).map(x => s\"Three\")\n        val four = arr.filter(x => x < 40).map(x => s\"Four\")\n        val five = arr.filter(x => x < 50).map(x => s\"Five\")\n        val six = arr.filter(x => x < 60).map(x => s\"Six\")\n        val seven = arr.filter(x => x < 70).map(x => s\"Seven\")\n        val eight = arr.filter(x => x < 80).map(x => s\"Eight\")\n        val nine = arr.filter(x => x < 90).map(x => s\"Nine\")\n        val ten = arr.filter(x => x >= 10).map(x => s\"Ten\")\n        val hundred = arr.filter(x => x >= 100).map(x => s\"Hundred\")\n        val thousand = arr.filter(x => x >= 1000).map(x => s\"Thousand\")\n        val million = arr.filter(x => x >= 1000000).map(x => s\"Million\")\n        val billion = arr.filter(x => x >= 1000000000).map(x => s\"Billion\")\n        val trillion = arr.filter(x => x >= 1000000000000).map(x => s\"Trillion\")\n        val quadrillion = arr.filter(x => x >= 1000000000000000).map(x => s\"Quadrillion\")\n        val quintillion = arr.filter(x => x >= 1000000000000000000).map(x => s\"Quintillion\")\n        val sextillion = arr.filter(x => x >= 1000000000000000000000).map(x => s\"Sextillion\")\n        val septillion = arr.filter(x => x >= 1000000000000000000000000).map(x => s\"Septillion\")\n        val octillion = arr.filter(x => x >= 100000000000000000000000000).map(x => s\"Octillion\")\n        val nonillion = arr.filter(x => x >= 1000000000000000000000000000).map(x => s\"Nonillion\")\n        val decillion = arr.filter(x => x >= 1000000000000000000000000000000).map(x => s\"Decillion\")\n        val undecillion = arr.filter(x => x >= 100000000000000000000000000000000).map(x => s\"Undecillion\")\n        val duo\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvt5yq2dl.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvt5yq2dl.scala:17:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvt5yq2dl.scala:32:44 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtrillion\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Trillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvt5yq2dl.scala:33:47 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mquadrillion\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Quadrillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvt5yq2dl.scala:34:47 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mquintillion\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Quintillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvt5yq2dl.scala:35:46 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msextillion\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000000",
      "stdout": "",
      "timestamp": 1659803912
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x => x >= 9 && x < 99).toList\n        val hundreds = arr.filter(x => x >= 99).toList\n        val hundredsReversed = hundreds.reverse\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n        val tensReversedString = tensReversed.map(x => Two(x))\n        val hundredsReversedString = hundredsReversed.map(x => Three(x))\n        val hundredsReversedStringReversed = hundredsReversedString.reverse\n        val tensReversedStringReversed = tensReversedStringReversed.reverse\n        val onesReversedStringReversed = onesReversedStringReversed.reverse\n        val onesReversedStringReversedString = onesReversedStringReversed.map(x => Four(x))\n        val tensReversedStringReversedString = tensReversedStringReversed.map(x => Five(x))\n        val hundredsReversedStringReversedString = hundredsReversedStringReversedString.reverse\n        val hundredsReversedStringReversedStringReversed = hundredsReversedStringReversedStringReversed.reverse\n        val tensReversedStringReversedStringReversed = tensReversedStringReversedStringReversed.reverse\n        val onesReversedStringReversedStringReversed = onesReversedStringReversedStringReversed.reverse\n        val onesReversedStringReversedStringReversedString = onesReversedStringReversedStringReversedString.map(x => Six(x))\n        val tensReversedStringReversedStringReversedString = tensReversedStringReversedStringReversedString.map(x => Seven(x))\n        val hundredsReversedStringReversedStringReversedString = hundredsReversedStringReversedStringReversedStringReversed.map(x => Eight(x))\n        val hundredsReversedStringReversedStringReversedStringReversed = hundredsReversedStringReversedStringReversedStringReversedString.map(x => Nine(x))\n        val onesReversedStringReversedStringReversedStringReversedString = onesReversedStringReversedStringReversedStringReversedString.map(x => Ten(x))\n        val onesReversedStringReversedStringReversedStringReversedStringReverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpts01vjqz.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpts01vjqz.scala:23:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => One(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpts01vjqz.scala:24:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => Two(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: Two\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpts01vjqz.scala:25:63 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsReversedString\u001b[0m = hundredsReversed.map(\u001b[36mx\u001b[0m => Three(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: Three\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpts01vjqz.scala:27:41 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringReversed\u001b[0m = tensReversedStringReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringReversed\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31",
      "stdout": "",
      "timestamp": 1659803912
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val len = arr.length\n        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x => x >= 9 && x < 99).toList\n        val hundreds = arr.filter(x => x >= 99).toList\n        val reversed = ones + tens + hundreds\n        val reversedList = reversed.reverse\n        val oneToTen = reversedList.map(x => if (x < 10) \"One\" else \"Ten\")\n        val tenToHundred = reversedList.map(x => if (x < 100) \"Ten\" else \"Hundred\")\n        val hundredToOne = reversedList.map(x => if (x < 1000) \"Hundred\" else \"One\")\n        val result = oneToTen ++ tenToHundred ++ hundredToOne\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqzf0xa3i.scala:21:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803917
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10l.toLong)\n        val tens = arr.filter(x => x >= 10l.toLong && x < 100l.toLong)\n        val hundreds = arr.filter(x => x >= 100l.toLong)\n        val onesAndTens = ones + tens\n        val onesAndHundreds = ones + hundreds\n        val onesAndOnesAndTens = onesAndTens.filter(x => x < 100l.toLong)\n        val onesAndOnesAndHundreds = onesAndHundreds.filter(x => x < 100l.toLong)\n        val onesAndOnesAndOnesAndTens = onesAndOnesAndTens.filter(x => x < 100l.toLong)\n        val onesAndOnesAndOnesAndHundreds = onesAndOnesAndHundreds.filter(x => x < 100l.toLong)\n        val onesAndOnesAndOnesAndOnesAndTens = onesAndOnesAndOnesAndTens.filter(x => x < 100l.toLong)\n        val onesAndOnesAndOnesAndOnesAndHundreds = onesAndOnesAndOnesAndHundreds.filter(x => x < 100l.toLong)\n        val onesAndOnesAndOnesAndOnesAndOnesAndTens = onesAndOnesAndOnesAndOnesAndTens.filter(x => x < 100l.toLong)\n        val onesAndOnesAndOnesAndOnesAndOnesAndHundreds = onesAndOnesAndOnesAndOnesAndHundreds.filter(x => x < 100l.toLong)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = onesAndOnesAndOnesAndOnesAndOnesAndTens.filter(x => x < 100l.toLong)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds = onesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds.filter(x => x < 100l.toLong)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens.filter(x => x < 100l.toLong)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds = onesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds.filter(x => x < 100l.toLong)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds = onesAndOnesAndOne\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_5gsijsl.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds\u001b[0m = onesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds.filter(\u001b[36mx\u001b[0m => x < \u001b[31m100l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_5gsijsl.scala:20:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTens\u001b[0m = ones + tens\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_5gsijsl.scala:21:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndHundreds\u001b[0m = ones + hundreds\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[",
      "stdout": "",
      "timestamp": 1659803917
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x => x >= 9 && x < 99).toList\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedWithTens = onesReversed.zip(tensReversed)\n        val onesReversedWithTensReversed = onesReversedWithTens.reverse\n        val onesReversedWithTensReversedWithOnes = onesReversedWithTensReversed.zip(onesReversed)\n        val onesReversedWithTensReversedWithOnesReversed = onesReversedWithTensReversedWithOnes.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTens = onesReversedWithTensReversedWithOnesReversed.zip(tensReversed)\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversed = onesReversedWithTensReversedWithOnesReversedWithTens.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes = onesReversedWithTensReversedWithOnesReversedWithTensReversed.zip(onesReversed)\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversed = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTens = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversed.zip(tensReversed)\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTens.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed.zip(onesReversed)\n\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7rifbfbc.scala:33:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803914
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val ones = list.filter(x => x < 9).toList\n        val tens = list.filter(x => x >= 9 && x < 99).toList\n        val hundreds = list.filter(x => x >= 99).toList\n        val reversed = ones + tens + hundreds\n        val oneNames = List(One, Two, Three, Four, Five, Six, Seven, Eight, Nine)\n        val tenNames = List(Ten, Eleven, Twelve, Thirteen, Fourteen, Fifteen, Sixteen, Seventeen, Eighteen, Nineteen)\n        val hundredNames = List(One, Two, Three, Four, Five, Six, Seven, Eight, Nine)\n        val reversedNames = List(One, Two, Three, Four, Five, Six, Seven, Eight, Nine)\n        val reversedTens = tens.map(x => reversedNames.find(y => x == y).getOrElse(Ten))\n        val reversedHundreds = hundreds.map(x => reversedNames.find(y => x == y).getOrElse(One))\n        val reversedOnes = ones.map(x => reversedNames.find(y => x == y).getOrElse(One))\n        val reversedList = reversedOnes + reversedTens + reversedHundreds\n        reversedList.map(x => x.toString.replaceAll(\"\\\\D\", \"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpelfvxyxj.scala:22:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelfvxyxj.scala:23:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneNames\u001b[0m = List(One, Two, Three, Four, Five, Six, Seven, Eight, Nine)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelfvxyxj.scala:23:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneNames\u001b[0m = List(One, Two, Three, Four, Five, Six, Seven, Eight, Nine)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: Two\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelfvxyxj.scala:23:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneNames\u001b[0m = List(One, Two, Three, Four, Five, Six, Seven, Eight, Nine)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Three\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelfvxyxj.scala:23:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b",
      "stdout": "",
      "timestamp": 1659803919
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong).map(x => x.toString.toUpperCase)\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong).map(x => x.toString.toUpperCase)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong).map(x => x.toString.toUpperCase)\n        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong).map(x => x.toString.toUpperCase)\n        val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong).map(x => x.toString.toUpperCase)\n        val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong).map(x => x.toString.toUpperCase)\n        val oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong).map(x => x.toString.toUpperCase)\n        val oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong).map(x => x.toString.toUpperCase)\n        val oneThousandThousands = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong).map(x => x.toString.toUpperCase)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong).map(x => x.toString.toUpperCase)\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000000l.toLong && x <= 999999999999999999l.toLong).map(x => x.toString.toUpperCase)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000l.toLong && x <= 9999999999999999999l.toLong).map(x => x.toString.toUpperCase)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000l.toLong && x <= 99999999999999999999l.toLong).map(x => x.toString.toUpperCase)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000l.\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmphgnpljy7.scala:28:103 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => x.toString.toUpperCase)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphgnpljy7.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => x.toString.toUpperCase)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmphgnpljy7.scala:29:105 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong).map(\u001b[36mx\u001b[0m => x.toString.toUpperCase)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphgnpljy7.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphgnpljy7.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31",
      "stdout": "",
      "timestamp": 1659803917
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val m = arr.length\n        if (m == 0) List()\n        else if (m == 1) List(arr(0))\n        else if (m == 2) List(arr(0), arr(1))\n        else if (m == 3) List(arr(0), arr(1), arr(2))\n        else if (m == 4) List(arr(0), arr(1), arr(2), arr(3))\n        else if (m == 5) List(arr(0), arr(1), arr(2), arr(3), arr(4))\n        else if (m == 6) List(arr(0), arr(1), arr(2), arr(3), arr(4), arr(5))\n        else if (m == 7) List(arr(0), arr(1), arr(2), arr(3), arr(4), arr(5), arr(6))\n        else if (m == 8) List(arr(0), arr(1), arr(2), arr(3), arr(4), arr(5), arr(6), arr(7))\n        else if (m == 9) List(arr(0), arr(1), arr(2), arr(3), arr(4), arr(5), arr(6), arr(7), arr(8))\n        else List()\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy4qrijnv.scala:19:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (m == \u001b[31m1\u001b[0m) List(arr(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    Long\n\u001b[31m   |\u001b[0m                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy4qrijnv.scala:20:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (m == \u001b[31m2\u001b[0m) List(arr(\u001b[31m0\u001b[0m), arr(\u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    Long\n\u001b[31m   |\u001b[0m                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy4qrijnv.scala:20:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (m == \u001b[31m2\u001b[0m) List(arr(\u001b[31m0\u001b[0m), arr(\u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    Long\n\u001b[31m   |\u001b[0m                                      Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy4qrijnv.scala:21:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (m == \u001b[31m3\u001b[0m) List(arr(\u001b[31m0\u001b[0m), arr(\u001b[31m1\u001b[0m), arr(\u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    Long\n\u001b[31m   |\u001b[0m                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy4qrijnv.scala:21:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (m == ",
      "stdout": "",
      "timestamp": 1659803920
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val hundredsAndOnes = arr.filter(_ <= 9999999).toList\n        val hundredsAndTens = arr.filter(_ <= 999999999).toList\n        val hundredsAndHundreds = arr.filter(_ <= 99999999999).toList\n        val hundredsAndThousands = arr.filter(_ <= 999999999999).toList\n        val hundredsAndHundredsAndOnes = arr.filter(_ <= 999999999999999).toList\n        val hundredsAndHundredsAndTens = arr.filter(_ <= 9999999999999999).toList\n        val hundredsAndHundredsAndHundreds = arr.filter(_ <= 9999999999999999999).toList\n        val hundredsAndHundredsAndThousands = arr.filter(_ <= 99999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndOnes = arr.filter(_ <= 99999999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndTens = arr.filter(_ <= 999999999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndHundreds = arr.filter(_ <= 999999999999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndThousands = arr.filter(_ <= 9999999999999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndOnes = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndTens = arr.filter(_ <= 99999999999999999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundreds = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndThousands = arr.filter(_ <= 999999999999999999999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundredsAndOnes = arr.filter(_ <= 999999999999999999999999999999999999999).to\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmposomh__e.scala:23:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmposomh__e.scala:24:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmposomh__e.scala:25:57 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndHundredsAndOnes\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmposomh__e.scala:26:57 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndHundredsAndTens\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmposomh__e.scala:27:61 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsAndHundredsAndHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmposomh__e.scala:28:62 ---------------------------",
      "stdout": "",
      "timestamp": 1659803895
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x => x >= 10 && x < 20).toList\n        val hundreds = arr.filter(x => x >= 20 && x < 30).toList\n        val thousands = arr.filter(x => x >= 30 && x < 40).toList\n        val tenThousands = arr.filter(x => x >= 40 && x < 50).toList\n        val hundredThousands = arr.filter(x => x >= 50 && x < 60).toList\n        val thousandThousands = arr.filter(x => x >= 60 && x < 70).toList\n        val hundredThousandThousands = arr.filter(x => x >= 70 && x < 80).toList\n        val thousandThousandThousands = arr.filter(x => x >= 80 && x < 90).toList\n        val hundredThousandThousandThousands = arr.filter(x => x >= 90 && x < 100).toList\n        val thousandThousandThousandThousands = arr.filter(x => x >= 100 && x < 1000).toList\n        val hundredThousandThousandThousandThousands = arr.filter(x => x >= 1000 && x < 10000).toList\n        val thousandThousandThousandThousandThousands = arr.filter(x => x >= 10000 && x < 100000).toList\n        val hundredThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000 && x < 1000000).toList\n        val thousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000 && x < 10000000).toList\n        val hundredThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000 && x < 100000000).toList\n        val thousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000 && x < 1000000000).toList\n        val hundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000 && x < 10000000000).toList\n        val thousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000 && x < 100000000000).toList\n        val hundredThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkcc4unko.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpkcc4unko.scala:34:118 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredThousandThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                      ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpkcc4unko.scala:35:109 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandThousandThousandThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpkcc4unko.scala:35:128 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandThousandThousandThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkcc4unko.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m",
      "stdout": "",
      "timestamp": 1659803919
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000000 && x <= 999999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 99999999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000001 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000002 && x <= 9999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000003 && x <= 9999999999999999999999999999999).toList\n        val oneTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp_9dqym0.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpp_9dqym0.scala:24:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpp_9dqym0.scala:25:56 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpp_9dqym0.scala:25:76 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpp_9dqym0.scala:26:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpp_9dqym0.scala:26:84 ---------------------------------",
      "stdout": "",
      "timestamp": 1659803919
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ >= 10).toList\n        val tensReversed = tens.reverse\n        val tensReversedString = tensReversed.map(_.toString).mkString(\"\")\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(_.toString).mkString(\"\")\n        val onesReversedStringWithOnes = onesReversedString + onesReversedString\n        val tensReversedStringWithOnes = tensReversedStringWithOnes + tensReversedString\n        val tensReversedStringWithOnesAndTens = tensReversedStringWithOnes + tensReversedString\n        val tensReversedStringWithOnesAndTensAndOnes = tensReversedStringWithOnesAndTens + tensReversedStringWithOnes\n        val tensReversedStringWithOnesAndTensAndOnesAndTens = tensReversedStringWithOnesAndTensAndOnes + tensReversedStringWithOnesAndTens\n        val tensReversedStringWithOnesAndTensAndOnesAndTensAndOnes = tensReversedStringWithOnesAndTensAndOnesAndTens + tensReversedStringWithOnesAndTensAndOnes\n        val tensReversedStringWithOnesAndTensAndOnesAndTensAndOnesAndTens = tensReversedStringWithOnesAndTensAndOnesAndTensAndOnes + tensReversedStringWithOnesAndTensAndOnesAndTens\n        val tensReversedStringWithOnesAndTensAndOnesAndTensAndOnesAndTensAndOnes = tensReversedStringWithOnesAndTensAndOnesAndTensAndOnesAndTens + tensReversedStringWithOnesAndTensAndOnesAndTensAndOnes\n        val tensReversedStringWithOnesAndTensAndOnesAndTensAndOnesAndTensAndOnesAndTens = tensReversedStringWithOnesAndTensAndOnesAndTensAndOnesAndTensAndOnes + tensReversedStringWithOnesAndTensAndOnesAndTensAndOnesAndTens\n        val tensReversedStringWithOnesAndTensAndOnesAndTensAndOnesAndTensAndOnesAndTensAndOnes = tensReversedStringWithOnesAndTensAndOnesAndTensAndOnesAndTensAndOnesAndTens + tensReversedStringWithOnesAndTensAndOnesAndTensAndOnesAndTensAndOnes\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpyfdikcn8.scala:33:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpyfdikcn8.scala:24:41 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringWithOnes\u001b[0m = tensReversedStringWithOnes + tensReversedString\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringWithOnes\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyfdikcn8.scala:34:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659803920
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n        val tenHundreds = arr.filter(_ <= 999999999).toList\n        val oneHundreds = arr.filter(_ <= 99999999999).toList\n        val tenThousandHundreds = arr.filter(_ <= 9999999998).toList\n        val oneThousandHundreds = arr.filter(_ <= 999999999998).toList\n        val tenThousandHundredThousands = arr.filter(_ <= 99999999987).toList\n        val oneThousandHundredThousands = arr.filter(_ <= 9999999999987).toList\n        val tenThousandHundredThousandsOnes = arr.filter(_ <= 999999999874).toList\n        val oneThousandHundredThousandsOnes = arr.filter(_ <= 99999999999874).toList\n        val tenThousandHundredThousandsOnesTens = arr.filter(_ <= 9999999998743).toList\n        val oneThousandHundredThousandsOnesTens = arr.filter(_ <= 999999999998743).toList\n        val tenThousandHundredThousandsOnesTensHundreds = arr.filter(_ <= 99999999987432).toList\n        val oneThousandHundredThousandsOnesTensHundreds = arr.filter(_ <= 9999999999987432).toList\n        val tenThousandHundredThousandsOnesTensHundredsThousands = arr.filter(_ <= 999999999874323).toList\n        val oneThousandHundredThousandsOnesTensHundredsThousands = arr.filter(_ <= 99999999999874323).toList\n        val tenThousandHundredThousandsOnesTensHundredsThousandsOnes = arr.filter(_ <= 9999999998743231).toList\n        val oneThousandHund\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9oh7hyre.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9oh7hyre.scala:17:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9oh7hyre.scala:25:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9oh7hyre.scala:26:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9oh7hyre.scala:27:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9oh7hyre.scala:28:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999987\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      ",
      "stdout": "",
      "timestamp": 1659803920
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortWith(_ < _).reverse.map(x => x.toString).map(x => x match {\n            case x if x.startsWith(\"1\") => \"One\"\n            case x if x.startsWith(\"2\") => \"Two\"\n            case x if x.startsWith(\"3\") => \"Three\"\n            case x if x.startsWith(\"4\") => \"Four\"\n            case x if x.startsWith(\"5\") => \"Five\"\n            case x if x.startsWith(\"6\") => \"Six\"\n            case x if x.startsWith(\"7\") => \"Seven\"\n            case x if x.startsWith(\"8\") => \"Eight\"\n            case x if x.startsWith(\"9\") => \"Nine\"\n            case _ => x\n        })\n        if (result.isEmpty) Nil\n        else result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp2nez7kv1.scala:17:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = arr.filter(_ >= \u001b[31m1l\u001b[0m.toLong && _ <= \u001b[31m9l\u001b[0m.toLong).sortWith(_ < _).reverse.map(\u001b[36mx\u001b[0m => x.toString).map(\u001b[36mx\u001b[0m => x \u001b[33mmatch\u001b[0m {\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Wrong number of parameters, expected: 1\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803917
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x => x >= 9 && x < 99).toList\n        val hundreds = arr.filter(x => x >= 99).toList\n        val reversed = ones + tens + hundreds.reverse\n        val result = reversed.map(x => x match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n            case _ => \"\"\n        }).distinct\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoz5fqce5.scala:20:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803921
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val ones = list.filter(_ <= 9).toList\n        val tens = list.filter(_ <= 99).toList\n        val hundreds = list.filter(_ <= 999).toList\n        val thousands = list.filter(_ <= 9999).toList\n        val tenThousands = list.filter(_ <= 999999).toList\n        val oneThousands = list.filter(_ <= 9999999).toList\n        val oneHundreds = list.filter(_ <= 999999999).toList\n        val oneThousandHundreds = list.filter(_ <= 99999999999).toList\n        val oneThousandThousandHundreds = list.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandHundreds = list.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = list.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = list.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = list.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = list.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = list.filter(_ <= 999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = list.filter(_ <= 9999999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = list.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4m9kh_1o.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp4m9kh_1o.scala:26:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = list.filter(_ <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp4m9kh_1o.scala:27:59 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = list.filter(_ <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp4m9kh_1o.scala:28:67 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = list.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp4m9kh_1o.scala:29:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundreds\u001b[0m = list.filter(_ <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp4m9kh_1o.scala:30:83 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m ",
      "stdout": "",
      "timestamp": 1659803920
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ <= 9).sortWith(_ < _).reverse\n        val digits = arr.filter(_ <= 9).map(_.toString)\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n        result.map(d => digits(d) -> map(digits(d)))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6uqxsz3b.scala:20:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        result.map(\u001b[36md\u001b[0m => digits(d) -> map(digits(d)))\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (d : Long)\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6uqxsz3b.scala:20:48 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        result.map(\u001b[36md\u001b[0m => digits(d) -> map(digits(d)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (d : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803922
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands = arr.filter(_ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_ <= 999999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n        val oneHund\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp27egg173.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp27egg173.scala:24:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp27egg173.scala:25:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp27egg173.scala:26:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp27egg173.scala:27:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp27egg173.scala:28:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999999999\u001b[0m).toList\n\u001b[31m",
      "stdout": "",
      "timestamp": 1659803858
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val ones = list.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val tens = list.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds = list.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val thousands = list.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands = list.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands = list.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val oneHundreds = list.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n        val oneThousandHundreds = list.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n        val oneThousandThousands = list.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n        val oneThousandThousandHundreds = list.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n        val oneThousandThousandThousands = list.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n        val oneThousandThousandThousandHundreds = list.filter(x => x >= 100000000000000l.toLong && x <= 9999999999999999999l.toLong)\n        val oneThousandThousandThousandThousands = list.filter(x => x >= 10000000000000000l.toLong && x <= 99999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandHundreds = list.filter(x => x >= 100000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousands = list.filter(x => x >= 1000000000000000000l.toLong && x <= 999999999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds = list.filter(x => x >= 10000000000000000000l.toLong && x <= 999999999999999999999999999l.to\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp9shyqf_z.scala:30:104 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = list.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9shyqf_z.scala:31:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = list.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9shyqf_z.scala:31:107 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = list.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9shyqf_z.scala:32:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundreds\u001b[0m = list.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9shyqf_z.scala:32:115 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundreds\u001b[0m = list.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000l\u001b[0m.toLong && x <= \u001b[31m99",
      "stdout": "",
      "timestamp": 1659803921
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ <= 9).sortWith(_ < _).reverse\n        val result2 = result.map(i => if (i <= 9) s\"$i\" else s\"$i${'One'}\")\n        result2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpw51pyvt0.scala:18:67 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult2\u001b[0m = result.map(\u001b[36mi\u001b[0m => \u001b[33mif\u001b[0m (i <= \u001b[31m9\u001b[0m) \u001b[31ms\"\u001b[0m$i\u001b[31m\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31ms\"\u001b[0m$i${\u001b[31m'One\u001b[0m'}\")\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0msymbol literal 'One is no longer supported,\n\u001b[31m   |\u001b[0muse a string literal \"One\" or an application Symbol(\"One\") instead,\n\u001b[31m   |\u001b[0mor enclose in braces '{One} if you want a quoted expression.\n\u001b[31m   |\u001b[0mFor now, you can also `import language.deprecated.symbolLiterals` to accept\n\u001b[31m   |\u001b[0mthe idiom, but this possibility might no longer be available in the future.\n\u001b[31m\u001b[31m-- Error: /tmp/tmpw51pyvt0.scala:18:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult2\u001b[0m = result.map(\u001b[36mi\u001b[0m => \u001b[33mif\u001b[0m (i <= \u001b[31m9\u001b[0m) \u001b[31ms\"\u001b[0m$i\u001b[31m\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31ms\"\u001b[0m$i${\u001b[31m'One\u001b[0m'}\")\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                              unclosed character literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpw51pyvt0.scala:18:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult2\u001b[0m = result.map(\u001b[36mi\u001b[0m => \u001b[33mif\u001b[0m (i <= \u001b[31m9\u001b[0m) \u001b[31ms\"\u001b[0m$i\u001b[31m\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31ms\"\u001b[0m$i${\u001b[31m'One\u001b[0m'}\")\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpw51pyvt0.scala:20:5 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     unclosed string literal\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpw51pyvt0.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[",
      "stdout": "",
      "timestamp": 1659803921
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ > 0l).sortWith(_ < _)\n        val reversed = result.reverse\n        reversed.map(x => if (x < 10) \"One\" else if (x < 20) \"Two\" else if (x < 30) \"Three\" else if (x < 40) \"Four\" else if (x < 50) \"Five\" else if (x < 60) \"Six\" else if (x < 70) \"Seven\" else if (x < 80) \"Eight\" else \"Nine\").toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp37lli837.scala:22)\n\tat Problem.main(tmp37lli837.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659803923
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ >= 1l && _ <= 9l).sortWith(_ < _).reverse\n        val map = Map(\"One\" -> 1l, \"Two\" -> 2l, \"Three\" -> 3l, \"Four\" -> 4l, \"Five\" -> 5l, \"Six\" -> 6l, \"Seven\" -> 7l, \"Eight\" -> 8l, \"Nine\" -> 9l)\n        result.map(x => map.getOrElse(x.toString, x.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpm39mtp4o.scala:17:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = arr.filter(_ >= \u001b[31m1l\u001b[0m && _ <= \u001b[31m9l\u001b[0m).sortWith(_ < _).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm39mtp4o.scala:19:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        result.map(\u001b[36mx\u001b[0m => map.getOrElse(x.toString, x.toString))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    Matchable\n\u001b[31m   |\u001b[0m                        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803923
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ < 10).sortWith(_ < _).reverse\n        val digits = arr.filter(_ >= 10).map(_ % 10).sorted\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n        val result = result.map(i => digits(i) -> map.get(i))\n        if (result.isEmpty) Nil\n        else result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpeivvun_5.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = result.map(\u001b[36mi\u001b[0m => digits(i) -> map.get(i))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mresult is already defined as \u001b[33mvalue\u001b[0m \u001b[35mresult\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeivvun_5.scala:22:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33melse\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    (result : List[Long])\n\u001b[31m   |\u001b[0m             Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803923
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.sortWith(_.toLong < _.toLong)\n        val reversed = result.reverse\n        val digits = reversed.map(_.toString)\n        val names = Seq(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val result = reversed.map(i => digits(i) -> names(i))\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbee3kwub.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reversed.map(\u001b[36mi\u001b[0m => digits(i) -> names(i))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mresult is already defined as \u001b[33mvalue\u001b[0m \u001b[35mresult\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbee3kwub.scala:22:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        result.toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    List[\u001b[1m\u001b[31mLong\u001b[0m]\n\u001b[31m   |\u001b[0m        Required: List[\u001b[1m\u001b[32mString\u001b[0m]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803923
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n        val hundredThousands = arr.filter(_ <= 9999999).toList\n        val thousandThousands = arr.filter(_ <= 999999999).toList\n        val oneThousands = arr.filter(_ <= 99999999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999999).toList\n        val oneThousandThousands = arr.filter(_ <= 999999999999999).toList\n        val oneHundredThousands = arr.filter(_ <= 9999999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_ <= 99999999999999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2ucxao2y.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2ucxao2y.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2ucxao2y.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2ucxao2y.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Err",
      "stdout": "",
      "timestamp": 1659803923
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.sortWith(_ < _)\n        val reversed = result.reverse\n        val result = reversed.map(x => if (x < 10) \"One\" else if (x < 20) \"Two\" else if (x < 30) \"Three\" else if (x < 40) \"Four\" else if (x < 50) \"Five\" else if (x < 60) \"Six\" else if (x < 70) \"Seven\" else if (x < 80) \"Eight\" else \"Nine\")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbe6dvp_4.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reversed.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x < \u001b[31m10\u001b[0m) \u001b[31m\"One\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m20\u001b[0m) \u001b[31m\"Two\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m30\u001b[0m) \u001b[31m\"Three\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m40\u001b[0m) \u001b[31m\"Four\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m50\u001b[0m) \u001b[31m\"Five\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m60\u001b[0m) \u001b[31m\"Six\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m70\u001b[0m) \u001b[31m\"Seven\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m80\u001b[0m) \u001b[31m\"Eight\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mresult is already defined as \u001b[33mvalue\u001b[0m \u001b[35mresult\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbe6dvp_4.scala:20:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        result\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (result : List[Long])\n\u001b[31m   |\u001b[0m        Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659803923
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.foldLeft(List[String]())((acc, x) => {\n            val digit = x.toString.toInt\n            val name = if (digit < 10) \"One\" else if (digit < 20) \"Two\" else if (digit < 30) \"Three\" else if (digit < 40) \"Four\" else if (digit < 50) \"Five\" else if (digit < 60) \"Six\" else if (digit < 70) \"Seven\" else if (digit < 80) \"Eight\" else \"Nine\"\n            acc :+ name\n        })\n        val reversed = result.reverse\n        reversed.foldLeft(List[String]())((acc, x) => {\n            val digit = x.toString.toInt\n            val name = if (digit < 10) \"One\" else if (digit < 20) \"Two\" else if (digit < 30) \"Three\" else if (digit < 40) \"Four\" else if (digit < 50) \"Five\" else if (digit < 60) \"Six\" else if (digit < 70) \"Seven\" else if (digit < 80) \"Eight\" else \"Nine\"\n            acc :+ name\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.NumberFormatException: For input string: \"One\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.byLength$$anonfun$1(tmp2gtnf22x.scala:24)\n\tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:169)\n\tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:165)\n\tat scala.collection.immutable.List.foldLeft(List.scala:79)\n\tat Problem$.byLength(tmp2gtnf22x.scala:27)\n\tat Problem$.main(tmp2gtnf22x.scala:30)\n\tat Problem.main(tmp2gtnf22x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659803924
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val len = list.size\n        val ones = list.filter(x => x < 9).toList\n        val tens = list.filter(x => x >= 9 && x < 99).toList\n        val hundreds = list.filter(x => x >= 99).toList\n        val tensReversed = tens.reverse\n        val hundredsReversed = hundreds.reverse\n        val onesReversed = ones.reverse\n        val result = onesReversed.zip(tensReversed).zip(hundredsReversed).map(x => x._1 + \" \" + x._2 + \" \" + x._3)\n        if (result.isEmpty) Nil\n        else result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqg0u4fe4.scala:25:88 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = onesReversed.zip(tensReversed).zip(hundredsReversed).map(\u001b[36mx\u001b[0m => x._1 + \u001b[31m\" \"\u001b[0m + x._2 + \u001b[31m\" \"\u001b[0m + x._3)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of (Long, Long), but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1659803924
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(_ <= 9999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmph4a5c29j.scala:24:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmph4a5c29j.scala:25:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmph4a5c29j.scala:26:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmph4a5c29j.scala:27:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmph4a5c29j.scala:28:82 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    ",
      "stdout": "",
      "timestamp": 1659803895
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x => x >= 10 && x < 100).toList\n        val hundreds = arr.filter(x => x >= 100).toList\n        val tensReversed = tens.reverse\n        val hundredsReversed = hundreds.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n        val tensReversedString = tensReversed.map(x => Two(x))\n        val hundredsReversedString = hundredsReversed.map(x => Three(x))\n        val hundredsReversedString2 = hundredsReversed.map(x => Four(x))\n        val hundredsReversedString3 = hundredsReversed.map(x => Five(x))\n        val hundredsReversedString4 = hundredsReversed.map(x => Six(x))\n        val hundredsReversedString5 = hundredsReversed.map(x => Seven(x))\n        val hundredsReversedString6 = hundredsReversed.map(x => Eight(x))\n        val hundredsReversedString7 = hundredsReversed.map(x => Nine(x))\n        val hundredsReversedString8 = hundredsReversed.map(x => Ten(x))\n        val hundredsReversedString9 = hundredsReversed.map(x => Eleven(x))\n        val hundredsReversedString10 = hundredsReversed.map(x => Twelve(x))\n        val hundredsReversedString11 = hundredsReversed.map(x => Thirteen(x))\n        val hundredsReversedString12 = hundredsReversed.map(x => Fourteen(x))\n        val hundredsReversedString13 = hundredsReversed.map(x => Fifteen(x))\n        val hundredsReversedString14 = hundredsReversed.map(x => Sixteen(x))\n        val hundredsReversedString15 = hundredsReversed.map(x => Seventeen(x))\n        val hundredsReversedString16 = hundredsReversed.map(x => Eighteen(x))\n        val hundredsReversedString17 = hundredsReversed.map(x => Nineteen(x))\n        val hundredsReversedString18 = hundredsReversed.map(x => Twenty(x))\n        val hundredsReversedString19 = hundredsReversed.\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprmnik6vb.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprmnik6vb.scala:23:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => One(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprmnik6vb.scala:24:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => Two(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: Two\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprmnik6vb.scala:25:63 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsReversedString\u001b[0m = hundredsReversed.map(\u001b[36mx\u001b[0m => Three(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: Three\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprmnik6vb.scala:26:64 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsReversedString2\u001b[0m = hundredsReversed.map(\u001b[36mx\u001b[0m => Four(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                         Not found: Four\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling w",
      "stdout": "",
      "timestamp": 1659803925
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val tenMillions = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n        val oneMillions = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n        val tenBillions = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n        val oneBillions = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n        val tenTrillions = arr.filter(x => x >= 1000000000000l.toLong && x <= 999999999999999999l.toLong)\n        val oneTrillions = arr.filter(x => x >= 100000000000000l.toLong && x <= 999999999999999999999l.toLong)\n        val tenQuadrillions = arr.filter(x => x >= 1000000000000000000l.toLong && x <= 9999999999999999999998l.toLong)\n        val oneQuadrillions = arr.filter(x => x >= 10000000000000000000l.toLong && x <= 99999999999999999999987l.toLong)\n        val tenQuintillions = arr.filter(x => x >= 100000000000000000000l.toLong && x <= 9999999999999999999998765l.toLong)\n        val oneQuintillions = arr.filter(x => x >= 1000000000000000000000l.toLong && x <= 999999999999999999999876543l.toLong)\n        val tenSextillions = arr.filter(x => x >= 10000000000000000000000l.toLong && x <= 99999999999999999999987654321l.toLong)\n        val oneSextillions = arr.filter(x => x >= 100000000000000000000000l.toLong && x <= 9999999999999999999998765432109l.toLong)\n        val ten\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpaxm389po.scala:29:80 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneTrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000l\u001b[0m.toLong && x <= \u001b[31m999999999999999999999l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpaxm389po.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenQuadrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999998l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpaxm389po.scala:30:87 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenQuadrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000000l\u001b[0m.toLong && x <= \u001b[31m9999999999999999999998l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpaxm389po.scala:31:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneQuadrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999987l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpaxm389po.scala:31:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneQuadrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000000l\u001b[0m.toLong && x <= \u001b[31m99999999999999999999987l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 ",
      "stdout": "",
      "timestamp": 1659803925
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(x => x >= 1 && x <= 9).sortWith(_ < _).reverse\n        result.map(x => if (x == 0) \"Zero\" else if (x == 1) \"One\" else if (x == 2) \"Two\" else if (x == 3) \"Three\" else if (x == 4) \"Four\" else if (x == 5) \"Five\" else if (x == 6) \"Six\" else if (x == 7) \"Seven\" else if (x == 8) \"Eight\" else if (x == 9) \"Nine\" else \"???\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659803925
    }
  ]
}