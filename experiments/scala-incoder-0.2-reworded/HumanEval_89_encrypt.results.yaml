language: scala
name: HumanEval_89_encrypt
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    b\")\n        val rotatedAlphabet3 = rotatedAlphabet2.map(x => x + \"c\")\n  \
    \      val rotatedAlphabet4 = rotatedAlphabet3.map(x => x + \"d\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet4.map(x => x + \"e\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet5.map(x => x + \"f\")\n        val rotatedAlphabet7 = rotatedAlphabet6.map(x\
    \ => x + \"g\")\n        val rotatedAlphabet8 = rotatedAlphabet7.map(x => x +\
    \ \"h\")\n        val rotatedAlphabet9 = rotatedAlphabet8.map(x => x + \"i\")\n\
    \        val rotatedAlphabet10 = rotatedAlphabet9.map(x => x + \"j\")\n      \
    \  val rotatedAlphabet11 = rotatedAlphabet10.map(x => x + \"k\")\n        val\
    \ rotatedAlphabet12 = rotatedAlphabet11.map(x => x + \"l\")\n        val rotatedAlphabet13\
    \ = rotatedAlphabet12.map(x => x + \"m\")\n        val rotatedAlphabet14 = rotatedAlphabet13.map(x\
    \ => x + \"n\")\n        val rotatedAlphabet15 = rotatedAlphabet14.map(x => x\
    \ + \"o\")\n        val rotatedAlphabet16 = rotatedAlphabet15.map(x => x + \"\
    p\")\n        val rotatedAlphabet17 = rotatedAlphabet16.map(x => x + \"q\")\n\
    \        val rotatedAlphabet18 = rotatedAlphabet17.map(x => x + \"r\")\n     \
    \   val rotatedAlphabet19 = rotatedAlphabet18.map(x => x + \"s\")\n        val\
    \ rotatedAlphabet20 = rotatedAlphabet19.map(x => x + \"t\")\n        val rotatedAlphabet21\
    \ = rotatedAlphabet20.map(x => x + \"u\")\n        val rotatedAlphabet22 = rotatedAlphabet21.map(x\
    \ => x + \"v\")\n        val rotatedAlphabet23 = rotatedAlphabet22.map(x => x\
    \ + \"w\")\n        \n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1u7mchvf.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\").map(x => x + \"a\")\n        val rotatedString\
    \ = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n        rotatedString.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\"\
    )).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$28(tmp9oug8g2l.scala:20)\n\tat Problem$.$anonfun$adapted$1(tmp9oug8g2l.scala:20)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmp9oug8g2l.scala:20)\n\
    \tat Problem$.main(tmp9oug8g2l.scala:24)\n\tat Problem.main(tmp9oug8g2l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\").map(x => x + \"a\").map(x => x + \"b\").map(x\
    \ => x + \"c\").map(x => x + \"d\").map(x => x + \"e\").map(x => x + \"f\").map(x\
    \ => x + \"g\").map(x => x + \"h\").map(x => x + \"i\").map(x => x + \"j\").map(x\
    \ => x + \"k\").map(x => x + \"l\").map(x => x + \"m\").map(x => x + \"n\").map(x\
    \ => x + \"o\").map(x => x + \"p\").map(x => x + \"q\").map(x => x + \"r\").map(x\
    \ => x + \"s\").map(x => x + \"t\").map(x => x + \"u\").map(x => x + \"v\").map(x\
    \ => x + \"w\").map(x => x + \"x\").map(x => x + \"y\").map(x => x + \"z\")\n\
    \        val newString = s.toUpperCase.map(x => newAlphabet(alphabet.indexOf(x)\
    \ + 2))\n        newString.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqajqsgfw.scala:21:18\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        newString.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e\
    [0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet2 = List(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val alphabet3 = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val alphabet4 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet5 =\
    \ List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet6 = List(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val alphabet7 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet8 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet9 = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val alphabet10 = List(\"a\", \"b\", \"c\",\
    \ \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\")\n        val alphabet11 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbpz9r4fj.scala:28:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36malphabet11\e[0m = List(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                             \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                               unclosed string literal\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpbpz9r4fj.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x => x + \"i\").map(x\
    \ => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x\
    \ => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpniyf6uof.scala:19:1204 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [3"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet2\
    \ = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet3 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet4 = alphabet.map(x => (x + 2).toChar)\n\
    \        val newAlphabet5 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet6\
    \ = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet7 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet8 = alphabet.map(x => (x + 2).toChar)\n\
    \        val newAlphabet9 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet10\
    \ = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet11 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet12 = alphabet.map(x => (x + 2).toChar)\n\
    \        val newAlphabet13 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet14\
    \ = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet15 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet16 = alphabet.map(x => (x + 2).toChar)\n\
    \        val newAlphabet17 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet18\
    \ = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet19 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet20 = alphabet.map(x => (x + 2).toChar)\n\
    \        val newAlphabet21 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet22\
    \ = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet23 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet24 = alphabet.map(x => (x + 2).toChar)\n\
    \        val newAlphabet25 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet26\
    \ = alphabet.map(x => (x + 2).toChar\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoy34d7h7.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpoy34d7h7.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    y\")\n        val rotatedAlphabet3 = rotatedAlphabet2.map(x => x + \"x\")\n  \
    \      val rotatedAlphabet4 = rotatedAlphabet3.map(x => x + \"w\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet4.map(x => x + \"v\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet5.map(x => x + \"u\")\n        val rotatedAlphabet7 = rotatedAlphabet6.map(x\
    \ => x + \"t\")\n        val rotatedAlphabet8 = rotatedAlphabet7.map(x => x +\
    \ \"s\")\n        val rotatedAlphabet9 = rotatedAlphabet8.map(x => x + \"r\")\n\
    \        val rotatedAlphabet10 = rotatedAlphabet9.map(x => x + \"q\")\n      \
    \  val rotatedAlphabet11 = rotatedAlphabet10.map(x => x + \"p\")\n        val\
    \ rotatedAlphabet12 = rotatedAlphabet11.map(x => x + \"o\")\n        val rotatedAlphabet13\
    \ = rotatedAlphabet12.map(x => x + \"n\")\n        val rotatedAlphabet14 = rotatedAlphabet13.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet15 = rotatedAlphabet14.map(x => x\
    \ + \"l\")\n        val rotatedAlphabet16 = rotatedAlphabet15.map(x => x + \"\
    k\")\n        val rotatedAlphabet17 = rotatedAlphabet16.map(x => x + \"j\")\n\
    \        val rotatedAlphabet18 = rotatedAlphabet17.map(x => x + \"i\")\n     \
    \   val rotatedAlphabet19 = rotatedAlphabet18.map(x => x + \"h\")\n        val\
    \ rotatedAlphabet20 = rotatedAlphabet19.map(x => x + \"g\")\n        val rotatedAlphabet21\
    \ = rotatedAlphabet20.map(x => x + \"f\")\n        val rotatedAlphabet22 = rotatedAlphabet21.map(x\
    \ => x + \"e\")\n        val rotatedAlphabet23 = rotatedAlphabet22.map(x => x\
    \ + \"d\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpraiuhah_.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x\
    \ => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x\
    \ => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x\
    \ => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x\
    \ => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x\
    \ => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x\
    \ => x + \"k\").map(x => x + \"j\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb_plg0v7.scala:19:1204 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [3"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      val index = alphabet.indexOf(c)\n            val newIndex = index - 2\n\
    \            if(newIndex < 0){\n                newIndex += alphabet.length\n\
    \            }\n            result.append(alphabet(newIndex))\n        }\n   \
    \     return result.toString()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy46gkfqv.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                newIndex += alphabet.length\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value\
    \ += is not a member of Int - did you mean newIndex.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val\
    \ newAlphabet2 = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x\
    \ => x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n   \
    \     val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n      \
    \  val newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet11 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet12 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet13 = alphabet.map(x => x + \"m\")\n        val newAlphabet14\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet15 = alphabet.map(x =>\
    \ x + \"o\")\n        val newAlphabet16 = alphabet.map(x => x + \"p\")\n     \
    \   val newAlphabet17 = alphabet.map(x => x + \"q\")\n        val newAlphabet18\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet19 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet20 = alphabet.map(x => x + \"t\")\n     \
    \   val newAlphabet21 = alphabet.map(x => x + \"u\")\n        val newAlphabet22\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet23 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet24 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet25 = alphabet.map(x => x + \"y\")\n        val newAlphabet26\
    \ = alphabet.map(x => x + \"z\")\n        val newAlphabet27 = alphabet.map(x =>\
    \ x + \"aa\")\n        val newAlphabet28 = alphabet.map(x => \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkit461mt.scala:46:45 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet28\e[0m = alphabet.map(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \     ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpkit461mt.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet2 = List(\"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\", \"a\", \"b\")\n        val alphabet3 = List(\"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\"\
    , \"c\")\n        val alphabet4 = List(\"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\")\n    \
    \    val alphabet5 = List(\"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\")\n        val alphabet6\
    \ = List(\"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    , \"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\n        val alphabet7 = List(\"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\")\n        val alphabet8 = List(\"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\")\n        val alphabet9 = List(\"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    )\n        val alphabet10 = List(\"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\")\n        val\
    \ alphabet11 = List(\"k\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7p0n4689.scala:28:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36malphabet11\e[0m = List(\"\
    k\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m\
    \                              unclosed string literal\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp7p0n4689.scala:30:34 -----------------------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                           \
    \       ^\e[0m\n\e[31m   |\e[0m                                 end of statement\
    \ expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7p0n4689.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7p0n4689.scala:30:4\
    \ -------------------------\e[0m\e[0m\n\e[31m30 |\e[0m    \e[33mdef\e[0m \e[36mmain\e\
    [0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m  \
    \ |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    Not found: kdef\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val index = alphabet.indexOf(s.charAt(i))\n\
    \            val newIndex = index - 2\n            val newChar = alphabet(newIndex)\n\
    \            result.append(newChar)\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.encrypt$$anonfun$1(tmpo11ji0uz.scala:23)\n\tat Problem$.encrypt$$anonfun$adapted$1(tmpo11ji0uz.scala:25)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.encrypt(tmpo11ji0uz.scala:25)\n\
    \tat Problem$.main(tmpo11ji0uz.scala:29)\n\tat Problem.main(tmpo11ji0uz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 2)))\n        val newAlphabet2 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 2)))\n        val newAlphabet3 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 4)))\n        val newAlphabet4 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 4)))\n        val newAlphabet5 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 8)))\n        val newAlphabet6 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 8)))\n        val newAlphabet7 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 12)))\n        val newAlphabet8 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 12)))\n        val newAlphabet9 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 16)))\n        val newAlphabet10 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 16)))\n        val newAlphabet11 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 20)))\n        val newAlphabet12 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 20)))\n        val newAlphabet13 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 24)))\n        val newAlphabet14 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 24)))\n        val newAlphabet15 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 28)))\n        val newAlphabet16 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 28)))\n        val newAlphabet17 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 32)))\n        val newAlphabet18 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 32)))\n        val newAlphabet19 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 36)))\n        val newAlphabet20 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8xq0u_fa.scala:38:82 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet20\e[0m = alphabet.map(\e\
    [36mx\e[0m => (x -> alphabet(alphabet.indexOf(x) - \n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8xq0u_fa.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    y\")\n        val rotatedAlphabet3 = rotatedAlphabet2.map(x => x + \"x\")\n  \
    \      val rotatedAlphabet4 = rotatedAlphabet3.map(x => x + \"w\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet4.map(x => x + \"v\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet5.map(x => x + \"u\")\n        val rotatedAlphabet7 = rotatedAlphabet6.map(x\
    \ => x + \"t\")\n        val rotatedAlphabet8 = rotatedAlphabet7.map(x => x +\
    \ \"s\")\n        val rotatedAlphabet9 = rotatedAlphabet8.map(x => x + \"r\")\n\
    \        val rotatedAlphabet10 = rotatedAlphabet9.map(x => x + \"q\")\n      \
    \  val rotatedAlphabet11 = rotatedAlphabet10.map(x => x + \"p\")\n        val\
    \ rotatedAlphabet12 = rotatedAlphabet11.map(x => x + \"o\")\n        val rotatedAlphabet13\
    \ = rotatedAlphabet12.map(x => x + \"n\")\n        val rotatedAlphabet14 = rotatedAlphabet13.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet15 = rotatedAlphabet14.map(x => x\
    \ + \"l\")\n        val rotatedAlphabet16 = rotatedAlphabet15.map(x => x + \"\
    k\")\n        val rotatedAlphabet17 = rotatedAlphabet16.map(x => x + \"j\")\n\
    \        val rotatedAlphabet18 = rotatedAlphabet17.map(x => x + \"i\")\n     \
    \   val rotatedAlphabet19 = rotatedAlphabet18.map(x => x + \"h\")\n        val\
    \ rotatedAlphabet20 = rotatedAlphabet19.map(x => x + \"g\")\n        val rotatedAlphabet21\
    \ = rotatedAlphabet20.map(x => x + \"f\")\n        val rotatedAlphabet22 = rotatedAlphabet21.map(x\
    \ => x + \"e\")\n        val rotatedAlphabet23 = rotatedAlphabet22.map(x => x\
    \ + \"d\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpraiuhah_.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\")\n        val newAlphabet2 = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\")\n        val newAlphabet3 = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsdoee4im.scala:21:224 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet3\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \                                                                            \
    \                                                                            \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \                  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsdoee4im.scala:22:5 ---------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 2)))\n        val newAlphabet2 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 2)))\n        val newAlphabet3 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 4)))\n        val newAlphabet4 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 4)))\n        val newAlphabet5 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 8)))\n        val newAlphabet6 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 8)))\n        val newAlphabet7 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 12)))\n        val newAlphabet8 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 12)))\n        val newAlphabet9 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 16)))\n        val newAlphabet10 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 16)))\n        val newAlphabet11 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 20)))\n        val newAlphabet12 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 20)))\n        val newAlphabet13 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 24)))\n        val newAlphabet14 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 24)))\n        val newAlphabet15 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 28)))\n        val newAlphabet16 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 28)))\n        val newAlphabet17 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 32)))\n        val newAlphabet18 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 32)))\n        val newAlphabet19 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 36)))\n        val newAlphabet20 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8xq0u_fa.scala:38:82 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet20\e[0m = alphabet.map(\e\
    [36mx\e[0m => (x -> alphabet(alphabet.indexOf(x) - \n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8xq0u_fa.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val index = alphabet.indexOf(s.charAt(i))\n\
    \            val newIndex = index * 2\n            val newChar = alphabet(newIndex)\n\
    \            result.append(newChar)\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -2\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.encrypt$$anonfun$1(tmpozs2f_vi.scala:23)\n\tat Problem$.encrypt$$anonfun$adapted$1(tmpozs2f_vi.scala:25)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.encrypt(tmpozs2f_vi.scala:25)\n\
    \tat Problem$.main(tmpozs2f_vi.scala:29)\n\tat Problem.main(tmpozs2f_vi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val rotatedAlphabet = alphabet.map(x => alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        rotatedString.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpsyimvcwf.scala:19)\n\tat Problem$.$anonfun$adapted$1(tmpsyimvcwf.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpsyimvcwf.scala:19)\n\
    \tat Problem$.main(tmpsyimvcwf.scala:24)\n\tat Problem.main(tmpsyimvcwf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    b\")\n        val rotatedAlphabet3 = rotatedAlphabet2.map(x => x + \"c\")\n  \
    \      val rotatedAlphabet4 = rotatedAlphabet3.map(x => x + \"d\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet4.map(x => x + \"e\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet5.map(x => x + \"f\")\n        val rotatedAlphabet7 = rotatedAlphabet6.map(x\
    \ => x + \"g\")\n        val rotatedAlphabet8 = rotatedAlphabet7.map(x => x +\
    \ \"h\")\n        val rotatedAlphabet9 = rotatedAlphabet8.map(x => x + \"i\")\n\
    \        val rotatedAlphabet10 = rotatedAlphabet9.map(x => x + \"j\")\n      \
    \  val rotatedAlphabet11 = rotatedAlphabet10.map(x => x + \"k\")\n        val\
    \ rotatedAlphabet12 = rotatedAlphabet11.map(x => x + \"l\")\n        val rotatedAlphabet13\
    \ = rotatedAlphabet12.map(x => x + \"m\")\n        val rotatedAlphabet14 = rotatedAlphabet13.map(x\
    \ => x + \"n\")\n        val rotatedAlphabet15 = rotatedAlphabet14.map(x => x\
    \ + \"o\")\n        val rotatedAlphabet16 = rotatedAlphabet15.map(x => x + \"\
    p\")\n        val rotatedAlphabet17 = rotatedAlphabet16.map(x => x + \"q\")\n\
    \        val rotatedAlphabet18 = rotatedAlphabet17.map(x => x + \"r\")\n     \
    \   val rotatedAlphabet19 = rotatedAlphabet18.map(x => x + \"s\")\n        val\
    \ rotatedAlphabet20 = rotatedAlphabet19.map(x => x + \"t\")\n        val rotatedAlphabet21\
    \ = rotatedAlphabet20.map(x => x + \"u\")\n        val rotatedAlphabet22 = rotatedAlphabet21.map(x\
    \ => x + \"v\")\n        val rotatedAlphabet23 = rotatedAlphabet22.map(x => x\
    \ + \"w\")\n        \n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1u7mchvf.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet2 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet3 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet4 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet5 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet6 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet7 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet8 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3di_swfe.scala:26:84 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet8\e[0m = List(\e\
    [31m'a'\e[0m,\e[31m'b'\e[0m,\e[31m'c'\e[0m,\e[31m'd'\e[0m,\e[31m'e'\e[0m,\e[31m'f'\e\
    [0m,\e[31m'g'\e[0m,\e[31m'h'\e[0m,\e[31m'i'\e[0m,\e[31m'j'\e[0m,\e[31m'k'\e[0m,\e\
    [31m'l'\e[0m,\e[31m'm'\e[0m,\e[31m'n\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0msymbol literal 'n is no longer supported,\n\e[31m   |\e[0muse a\
    \ string literal \"n\" or an application Symbol(\"n\") instead,\n\e[31m   |\e\
    [0mor enclose in braces '{n} if you want a quoted expression.\n\e[31m   |\e[0mFor\
    \ now, you can also `import language.deprecated.symbolLiterals` to accept\n\e\
    [31m   |\e[0mthe idiom, but this possibility might no longer be available in the\
    \ future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3di_swfe.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp3di_swfe.scala:27:5 ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val newAlphabet2 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 1))\n        val newAlphabet3 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 0))\n        val newAlphabet4 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 1))\n        val newAlphabet5 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val newAlphabet6 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 3))\n        val newAlphabet7 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 4))\n        val newAlphabet8 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 5))\n        val newAlphabet9 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 6))\n        val newAlphabet10 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 7))\n        val newAlphabet11 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 8))\n        val newAlphabet12 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 9))\n        val newAlphabet13 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 10))\n        val newAlphabet14 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 11))\n        val newAlphabet15 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 12))\n        val newAlphabet16 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 13))\n        val newAlphabet17 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 14))\n        val newAlphabet18 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 15))\n        val newAlphabet19 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 16))\n        val newAlphabet20 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 17))\n        val newAlphabet21 = alphab\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1gd16ixk.scala:39:28 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet21\e[0m = alphab\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: alphab\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1gd16ixk.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x => x + \"i\").map(x\
    \ => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x\
    \ => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzq25e3_4.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzq25e3_4.scala:20:5 ---------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 2)))\n        val newString = s.map(x\
    \ => newAlphabet(alphabet.indexOf(x)))\n        newString.mkString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpx_yiq2ps.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpx_yiq2ps.scala:19)\n\tat Problem$.main(tmpx_yiq2ps.scala:24)\n\
    \tat Problem.main(tmpx_yiq2ps.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => (x -> alphabet(alphabet.indexOf(x)\
    \ + 2)))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        val newString2 = newString.map(x => x._1 + x._2)\n        newString2.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\"\
    )).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpf88odyms.scala:19)\n\tat Problem$.$anonfun$adapted$1(tmpf88odyms.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpf88odyms.scala:19)\n\
    \tat Problem$.main(tmpf88odyms.scala:25)\n\tat Problem.main(tmpf88odyms.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val rotatedString = s.map(x\
    \ => rotatedAlphabet(alphabet.indexOf(x)))\n        rotatedString.mkString(\"\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpopxqbbiv.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpopxqbbiv.scala:19)\n\tat Problem$.main(tmpopxqbbiv.scala:24)\n\
    \tat Problem.main(tmpopxqbbiv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val rotatedString = s.map(x\
    \ => rotatedAlphabet(alphabet.indexOf(x)))\n        rotatedString.map(x => x.mkString).mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpspnip38x.scala:21:33 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        rotatedString.map(\e[36mx\e[0m => x.mkString).mkString\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue mkString is not a member of (String, String) - did you mean x.toString?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x => x + \"i\").map(x\
    \ => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x\
    \ => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpniyf6uof.scala:19:1204 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [3"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    b\")\n        val rotatedAlphabet3 = rotatedAlphabet.map(x => x + \"c\")\n   \
    \     val rotatedAlphabet4 = rotatedAlphabet.map(x => x + \"d\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet.map(x => x + \"e\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet.map(x => x + \"f\")\n        val rotatedAlphabet7 = rotatedAlphabet.map(x\
    \ => x + \"g\")\n        val rotatedAlphabet8 = rotatedAlphabet.map(x => x + \"\
    h\")\n        val rotatedAlphabet9 = rotatedAlphabet.map(x => x + \"i\")\n   \
    \     val rotatedAlphabet10 = rotatedAlphabet.map(x => x + \"j\")\n        val\
    \ rotatedAlphabet11 = rotatedAlphabet.map(x => x + \"k\")\n        val rotatedAlphabet12\
    \ = rotatedAlphabet.map(x => x + \"l\")\n        val rotatedAlphabet13 = rotatedAlphabet.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet14 = rotatedAlphabet.map(x => x +\
    \ \"n\")\n        val rotatedAlphabet15 = rotatedAlphabet.map(x => x + \"o\")\n\
    \        val rotatedAlphabet16 = rotatedAlphabet.map(x => x + \"p\")\n       \
    \ val rotatedAlphabet17 = rotatedAlphabet.map(x => x + \"q\")\n        val rotatedAlphabet18\
    \ = rotatedAlphabet.map(x => x + \"r\")\n        val rotatedAlphabet19 = rotatedAlphabet.map(x\
    \ => x + \"s\")\n        val rotatedAlphabet20 = rotatedAlphabet.map(x => x +\
    \ \"t\")\n        val rotatedAlphabet21 = rotatedAlphabet.map(x => x + \"u\")\n\
    \        val rotatedAlphabet22 = rotatedAlphabet.map(x => x + \"v\")\n       \
    \ val rotatedAlphabet23 = rotatedAlphabet.map(x => x + \"w\")\n        val rotatedAlphabet24\
    \ = rotatedAlphabet.map(x => x + \"x\")\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpjirjk6ib.scala:43:11 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjirjk6ib.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"m\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"o\")\n        val newAlphabet18 = alphabet.map(x => x + \"p\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"q\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet22 = alphabet.map(x => x + \"t\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"u\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet26 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"y\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"z\")\n        val new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7c9lgb0p.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7c9lgb0p.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x + 'z' - 'a' + 1)\n        val newAlphabet2\
    \ = alphabet.map(x => x + 'z' - 'a' + 2)\n        val newAlphabet3 = alphabet.map(x\
    \ => x + 'z' - 'a' + 3)\n        val newAlphabet4 = alphabet.map(x => x + 'z'\
    \ - 'a' + 4)\n        val newAlphabet5 = alphabet.map(x => x + 'z' - 'a' + 5)\n\
    \        val newAlphabet6 = alphabet.map(x => x + 'z' - 'a' + 6)\n        val\
    \ newAlphabet7 = alphabet.map(x => x + 'z' - 'a' + 7)\n        val newAlphabet8\
    \ = alphabet.map(x => x + 'z' - 'a' + 8)\n        val newAlphabet9 = alphabet.map(x\
    \ => x + 'z' - 'a' + 9)\n        val newAlphabet10 = alphabet.map(x => x + 'z'\
    \ - 'a' + 10)\n        val newAlphabet11 = alphabet.map(x => x + 'z' - 'a' + 11)\n\
    \        val newAlphabet12 = alphabet.map(x => x + 'z' - 'a' + 12)\n        val\
    \ newAlphabet13 = alphabet.map(x => x + 'z' - 'a' + 13)\n        val newAlphabet14\
    \ = alphabet.map(x => x + 'z' - 'a' + 14)\n        val newAlphabet15 = alphabet.map(x\
    \ => x + 'z' - 'a' + 15)\n        val newAlphabet16 = alphabet.map(x => x + 'z'\
    \ - 'a' + 16)\n        val newAlphabet17 = alphabet.map(x => x + 'z' - 'a' + 17)\n\
    \        val newAlphabet18 = alphabet.map(x => x + 'z' - 'a' + 18)\n        val\
    \ newAlphabet19 = alphabet.map(x => x + 'z' - 'a' + 19)\n        val newAlphabet20\
    \ = alphabet.map(x => x + 'z' - 'a' + 20)\n        val newAlphabet21 = alphabet.map(x\
    \ => x + 'z' - 'a' + 21)\n        val newAlphabet22 = alphabet.map(x => x + 'z'\
    \ - 'a' + 22)\n        val \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpb67a2a00.scala:41:11 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb67a2a00.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    y\")\n        val rotatedAlphabet3 = rotatedAlphabet2.map(x => x + \"x\")\n  \
    \      val rotatedAlphabet4 = rotatedAlphabet3.map(x => x + \"w\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet4.map(x => x + \"v\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet5.map(x => x + \"u\")\n        val rotatedAlphabet7 = rotatedAlphabet6.map(x\
    \ => x + \"t\")\n        val rotatedAlphabet8 = rotatedAlphabet7.map(x => x +\
    \ \"s\")\n        val rotatedAlphabet9 = rotatedAlphabet8.map(x => x + \"r\")\n\
    \        val rotatedAlphabet10 = rotatedAlphabet9.map(x => x + \"q\")\n      \
    \  val rotatedAlphabet11 = rotatedAlphabet10.map(x => x + \"p\")\n        val\
    \ rotatedAlphabet12 = rotatedAlphabet11.map(x => x + \"o\")\n        val rotatedAlphabet13\
    \ = rotatedAlphabet12.map(x => x + \"n\")\n        val rotatedAlphabet14 = rotatedAlphabet13.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet15 = rotatedAlphabet14.map(x => x\
    \ + \"l\")\n        val rotatedAlphabet16 = rotatedAlphabet15.map(x => x + \"\
    k\")\n        val rotatedAlphabet17 = rotatedAlphabet16.map(x => x + \"j\")\n\
    \        val rotatedAlphabet18 = rotatedAlphabet17.map(x => x + \"i\")\n     \
    \   val rotatedAlphabet19 = rotatedAlphabet18.map(x => x + \"h\")\n        val\
    \ rotatedAlphabet20 = rotatedAlphabet19.map(x => x + \"g\")\n        val rotatedAlphabet21\
    \ = rotatedAlphabet20.map(x => x + \"f\")\n        val rotatedAlphabet22 = rotatedAlphabet21.map(x\
    \ => x + \"e\")\n        val rotatedAlphabet23 = rotatedAlphabet22.map(x => x\
    \ + \"d\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpraiuhah_.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 2)))\n        val newString = s.map(x\
    \ => newAlphabet(alphabet.indexOf(x)))\n        newString.mkString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpx_yiq2ps.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpx_yiq2ps.scala:19)\n\tat Problem$.main(tmpx_yiq2ps.scala:24)\n\
    \tat Problem.main(tmpx_yiq2ps.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"m\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"o\")\n        val newAlphabet18 = alphabet.map(x => x + \"p\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"q\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet22 = alphabet.map(x => x + \"t\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"u\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet26 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"y\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"z\")\n        val new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7c9lgb0p.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7c9lgb0p.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = newAlphabet.map(x => x + \"y\")\n\
    \        val newAlphabet3 = newAlphabet2.map(x => x + \"x\")\n        val newAlphabet4\
    \ = newAlphabet3.map(x => x + \"w\")\n        val newAlphabet5 = newAlphabet4.map(x\
    \ => x + \"v\")\n        val newAlphabet6 = newAlphabet5.map(x => x + \"u\")\n\
    \        val newAlphabet7 = newAlphabet6.map(x => x + \"t\")\n        val newAlphabet8\
    \ = newAlphabet7.map(x => x + \"s\")\n        val newAlphabet9 = newAlphabet8.map(x\
    \ => x + \"r\")\n        val newAlphabet10 = newAlphabet9.map(x => x + \"q\")\n\
    \        val newAlphabet11 = newAlphabet10.map(x => x + \"p\")\n        val newAlphabet12\
    \ = newAlphabet11.map(x => x + \"o\")\n        val newAlphabet13 = newAlphabet12.map(x\
    \ => x + \"n\")\n        val newAlphabet14 = newAlphabet13.map(x => x + \"m\"\
    )\n        val newAlphabet15 = newAlphabet14.map(x => x + \"l\")\n        val\
    \ newAlphabet16 = newAlphabet15.map(x => x + \"k\")\n        val newAlphabet17\
    \ = newAlphabet16.map(x => x + \"j\")\n        val newAlphabet18 = newAlphabet17.map(x\
    \ => x + \"i\")\n        val newAlphabet19 = newAlphabet18.map(x => x + \"h\"\
    )\n        val newAlphabet20 = newAlphabet19.map(x => x + \"g\")\n        val\
    \ newAlphabet21 = newAlphabet20.map(x => x + \"f\")\n        val newAlphabet22\
    \ = newAlphabet21.map(x => x + \"e\")\n        val newAlphabet23 = newAlphabet22.map(x\
    \ => x + \"d\")\n        val newAlphabet24 = newAlphabet23.map(x => x + \"c\"\
    )\n        val newAlphabet25 = newAlphabet24.map(x => x + \"b\")\n        val\
    \ newAlphabet26 = newAlphabet25.map(x => x + \"a\")\n        val new\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsfomlp1m.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsfomlp1m.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    y\")\n        val rotatedAlphabet3 = rotatedAlphabet2.map(x => x + \"x\")\n  \
    \      val rotatedAlphabet4 = rotatedAlphabet3.map(x => x + \"w\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet4.map(x => x + \"v\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet5.map(x => x + \"u\")\n        val rotatedAlphabet7 = rotatedAlphabet6.map(x\
    \ => x + \"t\")\n        val rotatedAlphabet8 = rotatedAlphabet7.map(x => x +\
    \ \"s\")\n        val rotatedAlphabet9 = rotatedAlphabet8.map(x => x + \"r\")\n\
    \        val rotatedAlphabet10 = rotatedAlphabet9.map(x => x + \"q\")\n      \
    \  val rotatedAlphabet11 = rotatedAlphabet10.map(x => x + \"p\")\n        val\
    \ rotatedAlphabet12 = rotatedAlphabet11.map(x => x + \"o\")\n        val rotatedAlphabet13\
    \ = rotatedAlphabet12.map(x => x + \"n\")\n        val rotatedAlphabet14 = rotatedAlphabet13.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet15 = rotatedAlphabet14.map(x => x\
    \ + \"l\")\n        val rotatedAlphabet16 = rotatedAlphabet15.map(x => x + \"\
    k\")\n        val rotatedAlphabet17 = rotatedAlphabet16.map(x => x + \"j\")\n\
    \        val rotatedAlphabet18 = rotatedAlphabet17.map(x => x + \"i\")\n     \
    \   val rotatedAlphabet19 = rotatedAlphabet18.map(x => x + \"h\")\n        val\
    \ rotatedAlphabet20 = rotatedAlphabet19.map(x => x + \"g\")\n        val rotatedAlphabet21\
    \ = rotatedAlphabet20.map(x => x + \"f\")\n        val rotatedAlphabet22 = rotatedAlphabet21.map(x\
    \ => x + \"e\")\n        val rotatedAlphabet23 = rotatedAlphabet22.map(x => x\
    \ + \"d\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpraiuhah_.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet2 = List(\"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\")\n        val alphabet3 = List(\"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet4 = List(\"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val alphabet5 = List(\"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet6 = List(\"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet7 =\
    \ List(\"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet8 = List(\"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n \
    \       val alphabet9 = List(\"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\",\
    \ \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val alphabet10 = List(\"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n \
    \       val alphabet11 = List(\"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet12 = List(\"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet13 = List(\"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5f7onm79.scala:30:60 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36malphabet13\e[0m = List(\e\
    [31m\"m\"\e[0m, \e[31m\"n\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"p\"\e[0m, \e[31m\"\
    q\"\e[0m, \e[31m\"r\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                        \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                                unclosed string literal\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5f7onm79.scala:31:5 ---------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n            result.append(alphabet(s.charAt(i)\
    \ - 2))\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 102\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.encrypt$$anonfun$1(tmp_pdk8toz.scala:21)\n\tat Problem$.encrypt$$anonfun$adapted$1(tmp_pdk8toz.scala:21)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.encrypt(tmp_pdk8toz.scala:21)\n\
    \tat Problem$.main(tmp_pdk8toz.scala:25)\n\tat Problem.main(tmp_pdk8toz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x\
    \ => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x\
    \ => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x\
    \ => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x\
    \ => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x\
    \ => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x\
    \ => x + \"k\").map(x => x + \"j\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbvn0jxan.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbvn0jxan.scala:20:5 ---------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\")\n        val newAlphabet2 = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\")\n        val newAlphabet3 = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsdoee4im.scala:21:224 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet3\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \                                                                            \
    \                                                                            \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \                  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsdoee4im.scala:22:5 ---------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet2 = List(\"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\")\n        val alphabet3 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet4 = List(\"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet5 = List(\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
    x\", \"y\", \"z\")\n        val alphabet6 = List(\"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet7 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet8 = List(\"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
    x\", \"y\", \"z\")\n        val alphabet9 = List(\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n \
    \       val alphabet10 = List(\"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet11 = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphk64ia6_.scala:28:90 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36malphabet11\e[0m = List(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \e[31m\"k\"\e[0m, \e[31m\"l\"\e[0m, \"m\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \                  unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmphk64ia6_.scala:30:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m30 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphk64ia6_.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmphk64ia6_.scala:30:4 -------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: mdef\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n            result.append(alphabet(s.charAt(i)\
    \ - 2))\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 102\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.encrypt$$anonfun$1(tmp_pdk8toz.scala:21)\n\tat Problem$.encrypt$$anonfun$adapted$1(tmp_pdk8toz.scala:21)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.encrypt(tmp_pdk8toz.scala:21)\n\
    \tat Problem$.main(tmp_pdk8toz.scala:25)\n\tat Problem.main(tmp_pdk8toz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x + \"a\"))\n        val newAlphabet2 = alphabet.map(x => (x + \"b\"))\n\
    \        val newAlphabet3 = alphabet.map(x => (x + \"c\"))\n        val newAlphabet4\
    \ = alphabet.map(x => (x + \"d\"))\n        val newAlphabet5 = alphabet.map(x\
    \ => (x + \"e\"))\n        val newAlphabet6 = alphabet.map(x => (x + \"f\"))\n\
    \        val newAlphabet7 = alphabet.map(x => (x + \"g\"))\n        val newAlphabet8\
    \ = alphabet.map(x => (x + \"h\"))\n        val newAlphabet9 = alphabet.map(x\
    \ => (x + \"i\"))\n        val newAlphabet10 = alphabet.map(x => (x + \"j\"))\n\
    \        val newAlphabet11 = alphabet.map(x => (x + \"k\"))\n        val newAlphabet12\
    \ = alphabet.map(x => (x + \"l\"))\n        val newAlphabet13 = alphabet.map(x\
    \ => (x + \"m\"))\n        val newAlphabet14 = alphabet.map(x => (x + \"n\"))\n\
    \        val newAlphabet15 = alphabet.map(x => (x + \"o\"))\n        val newAlphabet16\
    \ = alphabet.map(x => (x + \"p\"))\n        val newAlphabet17 = alphabet.map(x\
    \ => (x + \"q\"))\n        val newAlphabet18 = alphabet.map(x => (x + \"r\"))\n\
    \        val newAlphabet19 = alphabet.map(x => (x + \"s\"))\n        val newAlphabet20\
    \ = alphabet.map(x => (x + \"t\"))\n        val newAlphabet21 = alphabet.map(x\
    \ => (x + \"u\"))\n        val newAlphabet22 = alphabet.map(x => (x + \"v\"))\n\
    \        val newAlphabet23 = alphabet.map(x => (x + \"w\"))\n        val newAlphabet24\
    \ = alphabet.map(x => (x + \"x\"))\n        val newAlphabet25 = alphabet.map(x\
    \ => (x + \"y\"))\n        val newAlphabet26 = alphabet.map(x => (x + \"z\"))\n\
    \        val newAlphabet27 = alphabet.map(x => (x + \"a\"))\n        val newAlphabet28\
    \ = alphabet.map(x => (x + \"b\"))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps80ike28.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 2)))\n        val newString = s.map(x\
    \ => newAlphabet(alphabet.indexOf(x)))\n        newString.mkString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpx_yiq2ps.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpx_yiq2ps.scala:19)\n\tat Problem$.main(tmpx_yiq2ps.scala:24)\n\
    \tat Problem.main(tmpx_yiq2ps.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    y\")\n        val rotatedAlphabet3 = rotatedAlphabet2.map(x => x + \"x\")\n  \
    \      val rotatedAlphabet4 = rotatedAlphabet3.map(x => x + \"w\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet4.map(x => x + \"v\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet5.map(x => x + \"u\")\n        val rotatedAlphabet7 = rotatedAlphabet6.map(x\
    \ => x + \"t\")\n        val rotatedAlphabet8 = rotatedAlphabet7.map(x => x +\
    \ \"s\")\n        val rotatedAlphabet9 = rotatedAlphabet8.map(x => x + \"r\")\n\
    \        val rotatedAlphabet10 = rotatedAlphabet9.map(x => x + \"q\")\n      \
    \  val rotatedAlphabet11 = rotatedAlphabet10.map(x => x + \"p\")\n        val\
    \ rotatedAlphabet12 = rotatedAlphabet11.map(x => x + \"o\")\n        val rotatedAlphabet13\
    \ = rotatedAlphabet12.map(x => x + \"n\")\n        val rotatedAlphabet14 = rotatedAlphabet13.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet15 = rotatedAlphabet14.map(x => x\
    \ + \"l\")\n        val rotatedAlphabet16 = rotatedAlphabet15.map(x => x + \"\
    k\")\n        val rotatedAlphabet17 = rotatedAlphabet16.map(x => x + \"j\")\n\
    \        val rotatedAlphabet18 = rotatedAlphabet17.map(x => x + \"i\")\n     \
    \   val rotatedAlphabet19 = rotatedAlphabet18.map(x => x + \"h\")\n        val\
    \ rotatedAlphabet20 = rotatedAlphabet19.map(x => x + \"g\")\n        val rotatedAlphabet21\
    \ = rotatedAlphabet20.map(x => x + \"f\")\n        val rotatedAlphabet22 = rotatedAlphabet21.map(x\
    \ => x + \"e\")\n        val rotatedAlphabet23 = rotatedAlphabet22.map(x => x\
    \ + \"d\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpraiuhah_.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = newAlphabet.map(x => x + \"y\")\n\
    \        val newAlphabet3 = newAlphabet2.map(x => x + \"x\")\n        val newAlphabet4\
    \ = newAlphabet3.map(x => x + \"w\")\n        val newAlphabet5 = newAlphabet4.map(x\
    \ => x + \"v\")\n        val newAlphabet6 = newAlphabet5.map(x => x + \"u\")\n\
    \        val newAlphabet7 = newAlphabet6.map(x => x + \"t\")\n        val newAlphabet8\
    \ = newAlphabet7.map(x => x + \"s\")\n        val newAlphabet9 = newAlphabet8.map(x\
    \ => x + \"r\")\n        val newAlphabet10 = newAlphabet9.map(x => x + \"q\")\n\
    \        val newAlphabet11 = newAlphabet10.map(x => x + \"p\")\n        val newAlphabet12\
    \ = newAlphabet11.map(x => x + \"o\")\n        val newAlphabet13 = newAlphabet12.map(x\
    \ => x + \"n\")\n        val newAlphabet14 = newAlphabet13.map(x => x + \"m\"\
    )\n        val newAlphabet15 = newAlphabet14.map(x => x + \"l\")\n        val\
    \ newAlphabet16 = newAlphabet15.map(x => x + \"k\")\n        val newAlphabet17\
    \ = newAlphabet16.map(x => x + \"j\")\n        val newAlphabet18 = newAlphabet17.map(x\
    \ => x + \"i\")\n        val newAlphabet19 = newAlphabet18.map(x => x + \"h\"\
    )\n        val newAlphabet20 = newAlphabet19.map(x => x + \"g\")\n        val\
    \ newAlphabet21 = newAlphabet20.map(x => x + \"f\")\n        val newAlphabet22\
    \ = newAlphabet21.map(x => x + \"e\")\n        val newAlphabet23 = newAlphabet22.map(x\
    \ => x + \"d\")\n        val newAlphabet24 = newAlphabet23.map(x => x + \"c\"\
    )\n        val newAlphabet25 = newAlphabet24.map(x => x + \"b\")\n        val\
    \ newAlphabet26 = newAlphabet25.map(x => x + \"a\")\n        val new\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsfomlp1m.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsfomlp1m.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797756
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder()\n\
    \        for(i <- 0 until s.length){\n            val index = alphabet.indexOf(s.charAt(i))\n\
    \            val newIndex = index + 2\n            if(newIndex < alphabet.length){\n\
    \                result.append(alphabet(newIndex))\n            }\n        }\n\
    \        return result.toString()\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2thabf7.scala:30)\n\tat Problem.main(tmpw2thabf7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val\
    \ newAlphabet2 = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x\
    \ => x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n   \
    \     val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x =>\
    \ x + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n      \
    \  val newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet11 = alphabet.map(x =>\
    \ x + \"p\")\n        val newAlphabet12 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet13 = alphabet.map(x => x + \"n\")\n        val newAlphabet14\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet15 = alphabet.map(x =>\
    \ x + \"l\")\n        val newAlphabet16 = alphabet.map(x => x + \"k\")\n     \
    \   val newAlphabet17 = alphabet.map(x => x + \"j\")\n        val newAlphabet18\
    \ = alphabet.map(x => x + \"i\")\n        val newAlphabet19 = alphabet.map(x =>\
    \ x + \"h\")\n        val newAlphabet20 = alphabet.map(x => x + \"g\")\n     \
    \   val newAlphabet21 = alphabet.map(x => x + \"f\")\n        val newAlphabet22\
    \ = alphabet.map(x => x + \"e\")\n        val newAlphabet23 = alphabet.map(x =>\
    \ x + \"d\")\n        val newAlphabet24 = alphabet.map(x => x + \"c\")\n     \
    \   val newAlphabet25 = alphabet.map(x => x + \"b\")\n        val newAlphabet26\
    \ = alphabet.map(x => x + \"a\")\n        val newAlphabet27 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet28 = alphabet.map(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpysnm2_2m.scala:46:45 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet28\e[0m = alphabet.map(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \     ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpysnm2_2m.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => alphabet(alphabet.indexOf(x) + 2))\n        val rotatedString = s.map(x =>\
    \ rotatedAlphabet(rotatedAlphabet.indexOf(x)))\n        rotatedString.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpsf8kmmsq.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpsf8kmmsq.scala:19)\n\tat Problem$.main(tmpsf8kmmsq.scala:24)\n\
    \tat Problem.main(tmpsf8kmmsq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(c\
    \ => c -> alphabet(alphabet.indexOf(c) + 2))\n        val rotatedString = s.map(c\
    \ => rotatedAlphabet(c))\n        rotatedString.mkString(\"\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpt8udzkt_.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpt8udzkt_.scala:19)\n\tat Problem$.main(tmpt8udzkt_.scala:24)\n\
    \tat Problem.main(tmpt8udzkt_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797759
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        for (letter <- s) {\n            val index = alphabet.indexOf(letter)\n\
    \            val newIndex = index + 2\n            if (newIndex < alphabet.length)\
    \ {\n                result.append(alphabet(newIndex))\n            } else {\n\
    \                result.append(alphabet(0))\n            }\n        }\n      \
    \  return result.toString()\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph2qkvaad.scala:32)\n\tat Problem.main(tmph2qkvaad.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    b\")\n        val rotatedAlphabet3 = rotatedAlphabet.map(x => x + \"c\")\n   \
    \     val rotatedAlphabet4 = rotatedAlphabet.map(x => x + \"d\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet.map(x => x + \"e\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet.map(x => x + \"f\")\n        val rotatedAlphabet7 = rotatedAlphabet.map(x\
    \ => x + \"g\")\n        val rotatedAlphabet8 = rotatedAlphabet.map(x => x + \"\
    h\")\n        val rotatedAlphabet9 = rotatedAlphabet.map(x => x + \"i\")\n   \
    \     val rotatedAlphabet10 = rotatedAlphabet.map(x => x + \"j\")\n        val\
    \ rotatedAlphabet11 = rotatedAlphabet.map(x => x + \"k\")\n        val rotatedAlphabet12\
    \ = rotatedAlphabet.map(x => x + \"l\")\n        val rotatedAlphabet13 = rotatedAlphabet.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet14 = rotatedAlphabet.map(x => x +\
    \ \"n\")\n        val rotatedAlphabet15 = rotatedAlphabet.map(x => x + \"o\")\n\
    \        val rotatedAlphabet16 = rotatedAlphabet.map(x => x + \"p\")\n       \
    \ val rotatedAlphabet17 = rotatedAlphabet.map(x => x + \"q\")\n        val rotatedAlphabet18\
    \ = rotatedAlphabet.map(x => x + \"r\")\n        val rotatedAlphabet19 = rotatedAlphabet.map(x\
    \ => x + \"s\")\n        val rotatedAlphabet20 = rotatedAlphabet.map(x => x +\
    \ \"t\")\n        val rotatedAlphabet21 = rotatedAlphabet.map(x => x + \"u\")\n\
    \        val rotatedAlphabet22 = rotatedAlphabet.map(x => x + \"v\")\n       \
    \ val rotatedAlphabet23 = rotatedAlphabet.map(x => x + \"w\")\n        val rotatedAlphabet24\
    \ = rotatedAlphabet.map(x => x + \"x\")\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpjirjk6ib.scala:43:11 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjirjk6ib.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet2 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet3 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet4 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet5 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet6 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet7 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet8 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet9 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0oql04z9.scala:26:113 ----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36malphabet9\e[0m = List(\e\
    [31m'a'\e[0m,\e[31m'b'\e[0m,\e[31m'c'\e[0m,\e[31m'd'\e[0m,\e[31m'e'\e[0m,\e[31m'f'\e\
    [0m,\e[31m'g'\e[0m,\e[31m'h'\e[0m,\e[31m'i'\e[0m,\e[31m'j'\e[0m,\e[31m'k'\e[0m,\e\
    [31m'l'\e[0m,\e[31m'm'\e[0m,\e[31m'n'\e[0m,\e[31m'o'\e[0m,\e[31m'p'\e[0m,\e[31m'q'\e\
    [0m,\e[31m'r'\e[0m,\e[31m's'\e[0m,\e[31m't'\e[0m,\e[31m'u'\e[0m,\e[31m'v\e[0m\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0msymbol literal 'v is no longer supported,\n\e[31m   |\e[0muse a string literal\
    \ \"v\" or an application Symbol(\"v\") instead,\n\e[31m   |\e[0mor enclose in\
    \ braces '{v} if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can\
    \ also `import language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe\
    \ idiom, but this possibility might no longer be available in the future.\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp0oql04z9.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0oql04z9.scala:27:5 ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = newAlphabet.map(x => x + \"y\")\n\
    \        val newAlphabet3 = newAlphabet2.map(x => x + \"x\")\n        val newAlphabet4\
    \ = newAlphabet3.map(x => x + \"w\")\n        val newAlphabet5 = newAlphabet4.map(x\
    \ => x + \"v\")\n        val newAlphabet6 = newAlphabet5.map(x => x + \"u\")\n\
    \        val newAlphabet7 = newAlphabet6.map(x => x + \"t\")\n        val newAlphabet8\
    \ = newAlphabet7.map(x => x + \"s\")\n        val newAlphabet9 = newAlphabet8.map(x\
    \ => x + \"r\")\n        val newAlphabet10 = newAlphabet9.map(x => x + \"q\")\n\
    \        val newAlphabet11 = newAlphabet10.map(x => x + \"p\")\n        val newAlphabet12\
    \ = newAlphabet11.map(x => x + \"o\")\n        val newAlphabet13 = newAlphabet12.map(x\
    \ => x + \"n\")\n        val newAlphabet14 = newAlphabet13.map(x => x + \"m\"\
    )\n        val newAlphabet15 = newAlphabet14.map(x => x + \"l\")\n        val\
    \ newAlphabet16 = newAlphabet15.map(x => x + \"k\")\n        val newAlphabet17\
    \ = newAlphabet16.map(x => x + \"j\")\n        val newAlphabet18 = newAlphabet17.map(x\
    \ => x + \"i\")\n        val newAlphabet19 = newAlphabet18.map(x => x + \"h\"\
    )\n        val newAlphabet20 = newAlphabet19.map(x => x + \"g\")\n        val\
    \ newAlphabet21 = newAlphabet20.map(x => x + \"f\")\n        val newAlphabet22\
    \ = newAlphabet21.map(x => x + \"e\")\n        val newAlphabet23 = newAlphabet22.map(x\
    \ => x + \"d\")\n        val newAlphabet24 = newAlphabet23.map(x => x + \"c\"\
    )\n        val newAlphabet25 = newAlphabet24.map(x => x + \"b\")\n        val\
    \ newAlphabet26 = newAlphabet25.map(x => x + \"a\")\n        val new\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsfomlp1m.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsfomlp1m.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\")\n        val rotatedAlphabet2 = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\")\n        val rotatedAlphabet3 = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpidv76vwj.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpidv76vwj.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        val len = s.length\n        for(i <- 0 until len) {\n            val\
    \ c = s.charAt(i)\n            val index = alphabet.indexOf(c)\n            val\
    \ newIndex = index - 2\n            if(newIndex < 0) newIndex += alphabet.length\n\
    \            result.append(alphabet(newIndex))\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3w10zsyh.scala:25:38 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m(newIndex < \e[31m0\e[0m) newIndex\
    \ += alphabet.length\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value += is not a member of Int - did you mean\
    \ newIndex.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659797759
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val index = alphabet.indexOf(s.charAt(i))\n\
    \            val newIndex = index + 2\n            if(newIndex < alphabet.length){\n\
    \                result.append(alphabet(newIndex))\n            }\n        }\n\
    \        return result.toString()\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_62lw0v7.scala:30)\n\tat Problem.main(tmp_62lw0v7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"m\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"o\")\n        val newAlphabet18 = alphabet.map(x => x + \"p\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"q\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet22 = alphabet.map(x => x + \"t\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"u\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet26 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"y\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"z\")\n        val new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7c9lgb0p.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7c9lgb0p.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet2 = List(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val alphabet3 = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val alphabet4 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet5 =\
    \ List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet6 = List(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val alphabet7 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet8 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet9 = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val alphabet10 = List(\"a\", \"b\", \"c\",\
    \ \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\")\n        val alphabet11 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbpz9r4fj.scala:28:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36malphabet11\e[0m = List(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                             \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                               unclosed string literal\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpbpz9r4fj.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x => x + \"i\").map(x\
    \ => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x\
    \ => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzq25e3_4.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzq25e3_4.scala:20:5 ---------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 2)))\n        val newString = s.map(x\
    \ => newAlphabet(alphabet.indexOf(x)))\n        newString.mkString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpx_yiq2ps.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpx_yiq2ps.scala:19)\n\tat Problem$.main(tmpx_yiq2ps.scala:24)\n\
    \tat Problem.main(tmpx_yiq2ps.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = newAlphabet.map(x => x + \"b\")\n\
    \        val newAlphabet3 = newAlphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = newAlphabet.map(x => x + \"d\")\n        val newAlphabet5 = newAlphabet.map(x\
    \ => x + \"e\")\n        val newAlphabet6 = newAlphabet.map(x => x + \"f\")\n\
    \        val newAlphabet7 = newAlphabet.map(x => x + \"g\")\n        val newAlphabet8\
    \ = newAlphabet.map(x => x + \"h\")\n        val newAlphabet9 = newAlphabet.map(x\
    \ => x + \"i\")\n        val newAlphabet10 = newAlphabet.map(x => x + \"j\")\n\
    \        val newAlphabet11 = newAlphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = newAlphabet.map(x => x + \"l\")\n        val newAlphabet13 = newAlphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet14 = newAlphabet.map(x => x + \"n\")\n\
    \        val newAlphabet15 = newAlphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = newAlphabet.map(x => x + \"p\")\n        val newAlphabet17 = newAlphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet18 = newAlphabet.map(x => x + \"r\")\n\
    \        val newAlphabet19 = newAlphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = newAlphabet.map(x => x + \"t\")\n        val newAlphabet21 = newAlphabet.map(x\
    \ => x + \"u\")\n        val newAlphabet22 = newAlphabet.map(x => x + \"v\")\n\
    \        val newAlphabet23 = newAlphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = newAlphabet.map(x => x + \"x\")\n        val newAlphabet25 = newAlphabet.map(x\
    \ => x + \"y\")\n        val newAlphabet26 = newAlphabet.map(x => x + \"z\")\n\
    \        val newAlphabet27 = newAlphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = newAlphabet.map(\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4e_ltvx4.scala:46:44 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet28\e[0m = newAlphabet.map(\n\
    \e[31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4e_ltvx4.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\")\n        val alphabet2 = List(\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"\
    h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"\
    u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\")\n        val alphabet3 = List(\"c\",\"\
    d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"\
    q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\")\n     \
    \   val alphabet4 = List(\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\"\
    ,\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\"\
    ,\"z\",\"a\",\"b\",\"c\")\n        val alphabet5 = List(\"e\",\"f\",\"g\",\"h\"\
    ,\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\"\
    ,\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\")\n        val alphabet6\
    \ = List(\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"\
    q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"\
    d\",\"e\")\n        val alphabet7 = List(\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"\
    m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"\
    z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\")\n        val alphabet8 = List(\"h\",\"\
    i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"\
    v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\")\n     \
    \   val alphabet9 = List(\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\"\
    ,\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2xbu4b5f.scala:26:105 ----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36malphabet9\e[0m = List(\e\
    [31m\"i\"\e[0m,\e[31m\"j\"\e[0m,\e[31m\"k\"\e[0m,\e[31m\"l\"\e[0m,\e[31m\"m\"\e\
    [0m,\e[31m\"n\"\e[0m,\e[31m\"o\"\e[0m,\e[31m\"p\"\e[0m,\e[31m\"q\"\e[0m,\e[31m\"\
    r\"\e[0m,\e[31m\"s\"\e[0m,\e[31m\"t\"\e[0m,\e[31m\"u\"\e[0m,\e[31m\"v\"\e[0m,\e\
    [31m\"w\"\e[0m,\e[31m\"x\"\e[0m,\e[31m\"y\"\e[0m,\e[31m\"z\"\e[0m,\e[31m\"a\"\e\
    [0m,\"\n\e[31m\e[31m   |\e[0m                                                \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                                 unclosed string literal\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2xbu4b5f.scala:27:5 ---------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = newAlphabet.map(x => x + \"y\")\n\
    \        val newAlphabet3 = newAlphabet2.map(x => x + \"x\")\n        val newAlphabet4\
    \ = newAlphabet3.map(x => x + \"w\")\n        val newAlphabet5 = newAlphabet4.map(x\
    \ => x + \"v\")\n        val newAlphabet6 = newAlphabet5.map(x => x + \"u\")\n\
    \        val newAlphabet7 = newAlphabet6.map(x => x + \"t\")\n        val newAlphabet8\
    \ = newAlphabet7.map(x => x + \"s\")\n        val newAlphabet9 = newAlphabet8.map(x\
    \ => x + \"r\")\n        val newAlphabet10 = newAlphabet9.map(x => x + \"q\")\n\
    \        val newAlphabet11 = newAlphabet10.map(x => x + \"p\")\n        val newAlphabet12\
    \ = newAlphabet11.map(x => x + \"o\")\n        val newAlphabet13 = newAlphabet12.map(x\
    \ => x + \"n\")\n        val newAlphabet14 = newAlphabet13.map(x => x + \"m\"\
    )\n        val newAlphabet15 = newAlphabet14.map(x => x + \"l\")\n        val\
    \ newAlphabet16 = newAlphabet15.map(x => x + \"k\")\n        val newAlphabet17\
    \ = newAlphabet16.map(x => x + \"j\")\n        val newAlphabet18 = newAlphabet17.map(x\
    \ => x + \"i\")\n        val newAlphabet19 = newAlphabet18.map(x => x + \"h\"\
    )\n        val newAlphabet20 = newAlphabet19.map(x => x + \"g\")\n        val\
    \ newAlphabet21 = newAlphabet20.map(x => x + \"f\")\n        val newAlphabet22\
    \ = newAlphabet21.map(x => x + \"e\")\n        val newAlphabet23 = newAlphabet22.map(x\
    \ => x + \"d\")\n        val newAlphabet24 = newAlphabet23.map(x => x + \"c\"\
    )\n        val newAlphabet25 = newAlphabet24.map(x => x + \"b\")\n        val\
    \ newAlphabet26 = newAlphabet25.map(x => x + \"a\")\n        val new\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsfomlp1m.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsfomlp1m.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 2)))\n        val newAlphabet2 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 2)))\n        val newAlphabet3 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 4)))\n        val newAlphabet4 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 4)))\n        val newAlphabet5 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 8)))\n        val newAlphabet6 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 8)))\n        val newAlphabet7 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 12)))\n        val newAlphabet8 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 12)))\n        val newAlphabet9 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 16)))\n        val newAlphabet10 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 16)))\n        val newAlphabet11 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 20)))\n        val newAlphabet12 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 20)))\n        val newAlphabet13 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 24)))\n        val newAlphabet14 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 24)))\n        val newAlphabet15 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 28)))\n        val newAlphabet16 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 28)))\n        val newAlphabet17 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 32)))\n        val newAlphabet18 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 32)))\n        val newAlphabet19 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 36)))\n        val newAlphabet20 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8xq0u_fa.scala:38:82 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet20\e[0m = alphabet.map(\e\
    [36mx\e[0m => (x -> alphabet(alphabet.indexOf(x) - \n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8xq0u_fa.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    y\")\n        val rotatedAlphabet3 = rotatedAlphabet2.map(x => x + \"x\")\n  \
    \      val rotatedAlphabet4 = rotatedAlphabet3.map(x => x + \"w\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet4.map(x => x + \"v\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet5.map(x => x + \"u\")\n        val rotatedAlphabet7 = rotatedAlphabet6.map(x\
    \ => x + \"t\")\n        val rotatedAlphabet8 = rotatedAlphabet7.map(x => x +\
    \ \"s\")\n        val rotatedAlphabet9 = rotatedAlphabet8.map(x => x + \"r\")\n\
    \        val rotatedAlphabet10 = rotatedAlphabet9.map(x => x + \"q\")\n      \
    \  val rotatedAlphabet11 = rotatedAlphabet10.map(x => x + \"p\")\n        val\
    \ rotatedAlphabet12 = rotatedAlphabet11.map(x => x + \"o\")\n        val rotatedAlphabet13\
    \ = rotatedAlphabet12.map(x => x + \"n\")\n        val rotatedAlphabet14 = rotatedAlphabet13.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet15 = rotatedAlphabet14.map(x => x\
    \ + \"l\")\n        val rotatedAlphabet16 = rotatedAlphabet15.map(x => x + \"\
    k\")\n        val rotatedAlphabet17 = rotatedAlphabet16.map(x => x + \"j\")\n\
    \        val rotatedAlphabet18 = rotatedAlphabet17.map(x => x + \"i\")\n     \
    \   val rotatedAlphabet19 = rotatedAlphabet18.map(x => x + \"h\")\n        val\
    \ rotatedAlphabet20 = rotatedAlphabet19.map(x => x + \"g\")\n        val rotatedAlphabet21\
    \ = rotatedAlphabet20.map(x => x + \"f\")\n        val rotatedAlphabet22 = rotatedAlphabet21.map(x\
    \ => x + \"e\")\n        val rotatedAlphabet23 = rotatedAlphabet22.map(x => x\
    \ + \"d\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpraiuhah_.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val newAlphabet2 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 1))\n        val newAlphabet3 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 2))\n        val newAlphabet4 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 1))\n        val newAlphabet5 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 1))\n        val newAlphabet6 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 2))\n        val newAlphabet7 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 1))\n        val newAlphabet8 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val newAlphabet9 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 2))\n        val newAlphabet10 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 1))\n        val newAlphabet11 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 1))\n        val newAlphabet12 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 2))\n        val newAlphabet13 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 1))\n        val newAlphabet14 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val newAlphabet15 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 2))\n        val newAlphabet16 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 1))\n        val newAlphabet17 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val newAlphabet18 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 2))\n        val newAlphabet19 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 1))\n        val newAlphabet20 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val newAlphabet21 = alphabet.map(x\
    \ => x -> alphabet\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppudc5_yy.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmppudc5_yy.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797768
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 2)))\n        val newString = s.toList.map(x\
    \ => newAlphabet(x)).mkString(\"\")\n        newString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpr0012d23.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpr0012d23.scala:19)\n\tat Problem$.main(tmpr0012d23.scala:24)\n\
    \tat Problem.main(tmpr0012d23.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        val len = s.length\n        var i = 0\n        while (i < len) {\n  \
    \          val c = s.charAt(i)\n            val index = alphabet.indexOf(c)\n\
    \            if (index != -1) {\n                val newIndex = index + 2\n  \
    \              if (newIndex < alphabet.length) {\n                    result.append(alphabet(newIndex))\n\
    \                }\n            }\n            i += 1\n        }\n        return\
    \ result.toString()\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvxxwxvq8.scala:36)\n\tat Problem.main(tmpvxxwxvq8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabetLength = alphabet.length\n\
    \        val alphabetLength = alphabetLength / 2\n        val alphabetLength =\
    \ alphabetLength * 2\n        val alphabetLength = alphabetLength + alphabetLength\n\
    \        val alphabetLength = alphabetLength * 2\n        val alphabetLength =\
    \ alphabetLength + alphabetLength\n        val alphabetLength = alphabetLength\
    \ * 2\n        val alphabetLength = alphabetLength + alphabetLength\n        val\
    \ alphabetLength = alphabetLength * 2\n        val alphabetLength = alphabetLength\
    \ + alphabetLength\n        val alphabetLength = alphabetLength * 2\n        val\
    \ alphabetLength = alphabetLength + alphabetLength\n        val alphabetLength\
    \ = alphabetLength * 2\n        val alphabetLength = alphabetLength + alphabetLength\n\
    \        val alphabetLength = alphabetLength * 2\n        val alphabetLength =\
    \ alphabetLength + alphabetLength\n        val alphabetLength = alphabetLength\
    \ * 2\n        val alphabetLength = alphabetLength + alphabetLength\n        val\
    \ alphabetLength = alphabetLength * 2\n        val alphabetLength = alphabetLength\
    \ + alphabetLength\n        val alphabetLength = alphabetLength * 2\n        val\
    \ alphabetLength = alphabetLength + alphabetLength\n        val alphabetLength\
    \ = alphabetLength * 2\n        val alphabetLength = alphabetLength + alphabetLength\n\
    \        val alphabetLength = alphabetLength * 2\n        val alphabetLength =\
    \ alphabetLength + alphabetLength\n        val alphabetLength = alphabetLength\
    \ * 2\n        val alphabetLength = alphabetLength + alphabetLength\n        val\
    \ alphabetLength = alphabetLength * 2\n        val alphabetLength = alphabetLength\
    \ + alphabetLength\n        val alphabetLength = alphabetLength * 2\n        val\
    \ alphabetLength = alphabetLength + alphabetLength\n        val alphabetLength\
    \ = alphabetLength * 2\n        val alphabetLength = alphabetLength + alphabetLength\n\
    \        val alphabetLength = alphabetLength * 2\n        val alphabetLength =\
    \ alphabetLength + alphabetLength\n        val alphabetLength = alphabetLength\
    \ * 2\n        val alphabetLength = alphabetLength + alphabetLength\n        val\
    \ alphabetLength = alphabetLength * 2\n        val alphabetLength = alphabetLength\
    \ + alphabetLength\n        val alphabetLength = alphabetLength * 2\n        val\
    \ alphabetLength = alphabetLength + alphabetLength\n        val alphabetLength\
    \ = alphabetLength * 2\n        val alphabetLength = alphabetLength + alphabetLength\n\
    \        val alphabetLength = alphabetLength * 2\n        val alphabetLength =\
    \ alphabetLength + alphabetLength\n        val alphabetLength = alphabetLength\
    \ * 2\n        val alphabetLength = alphabetLength + alphabetLength\n        val\
    \ alphabetLength = alphabetLength * 2\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp51bqxmh7.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp51bqxmh7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp51bqxmh7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ + alphabetLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp51bqxmh7.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp51bqxmh7.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ +"
  stdout: ''
  timestamp: 1659797768
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val index = alphabet.indexOf(s.charAt(i))\n\
    \            val newIndex = index + 2\n            if(newIndex < alphabet.length){\n\
    \                result.append(alphabet(newIndex))\n            } else {\n   \
    \             result.append(alphabet(alphabet.length - 1))\n            }\n  \
    \      }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6so5e_cd.scala:32)\n\tat Problem.main(tmp6so5e_cd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    b\")\n        val rotatedAlphabet3 = rotatedAlphabet2.map(x => x + \"c\")\n  \
    \      val rotatedAlphabet4 = rotatedAlphabet3.map(x => x + \"d\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet4.map(x => x + \"e\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet5.map(x => x + \"f\")\n        val rotatedAlphabet7 = rotatedAlphabet6.map(x\
    \ => x + \"g\")\n        val rotatedAlphabet8 = rotatedAlphabet7.map(x => x +\
    \ \"h\")\n        val rotatedAlphabet9 = rotatedAlphabet8.map(x => x + \"i\")\n\
    \        val rotatedAlphabet10 = rotatedAlphabet9.map(x => x + \"j\")\n      \
    \  val rotatedAlphabet11 = rotatedAlphabet10.map(x => x + \"k\")\n        val\
    \ rotatedAlphabet12 = rotatedAlphabet11.map(x => x + \"l\")\n        val rotatedAlphabet13\
    \ = rotatedAlphabet12.map(x => x + \"m\")\n        val rotatedAlphabet14 = rotatedAlphabet13.map(x\
    \ => x + \"n\")\n        val rotatedAlphabet15 = rotatedAlphabet14.map(x => x\
    \ + \"o\")\n        val rotatedAlphabet16 = rotatedAlphabet15.map(x => x + \"\
    p\")\n        val rotatedAlphabet17 = rotatedAlphabet16.map(x => x + \"q\")\n\
    \        val rotatedAlphabet18 = rotatedAlphabet17.map(x => x + \"r\")\n     \
    \   val rotatedAlphabet19 = rotatedAlphabet18.map(x => x + \"s\")\n        val\
    \ rotatedAlphabet20 = rotatedAlphabet19.map(x => x + \"t\")\n        val rotatedAlphabet21\
    \ = rotatedAlphabet20.map(x => x + \"u\")\n        val rotatedAlphabet22 = rotatedAlphabet21.map(x\
    \ => x + \"v\")\n        val rotatedAlphabet23 = rotatedAlphabet22.map(x => x\
    \ + \"w\")\n        \n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1u7mchvf.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet2 = List(\"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet3 = List(\"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet4 = List(\"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet5 = List(\"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet6 = List(\"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet7 = List(\"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpc3mfhpm1.scala:24:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36malphabet7\e[0m = List(\e\
    [31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    f\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                                          \
    \            ^\e[0m\n\e[31m   |\e[0m                                         \
    \        unclosed string literal\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc3mfhpm1.scala:25:5\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x\
    \ => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x\
    \ => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x\
    \ => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x\
    \ => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x\
    \ => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x\
    \ => x + \"k\").map(x => x + \"j\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbvn0jxan.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbvn0jxan.scala:20:5 ---------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\").map(x => x + \"a\")\n        val newString\
    \ = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n        newString.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$28(tmpkyikgofo.scala:20)\n\tat Problem$.$anonfun$adapted$1(tmpkyikgofo.scala:20)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpkyikgofo.scala:20)\n\
    \tat Problem$.main(tmpkyikgofo.scala:24)\n\tat Problem.main(tmpkyikgofo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = newAlphabet.map(x => x + \"b\")\n\
    \        val newAlphabet3 = newAlphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = newAlphabet.map(x => x + \"d\")\n        val newAlphabet5 = newAlphabet.map(x\
    \ => x + \"e\")\n        val newAlphabet6 = newAlphabet.map(x => x + \"f\")\n\
    \        val newAlphabet7 = newAlphabet.map(x => x + \"g\")\n        val newAlphabet8\
    \ = newAlphabet.map(x => x + \"h\")\n        val newAlphabet9 = newAlphabet.map(x\
    \ => x + \"i\")\n        val newAlphabet10 = newAlphabet.map(x => x + \"j\")\n\
    \        val newAlphabet11 = newAlphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = newAlphabet.map(x => x + \"l\")\n        val newAlphabet13 = newAlphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet14 = newAlphabet.map(x => x + \"n\")\n\
    \        val newAlphabet15 = newAlphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = newAlphabet.map(x => x + \"p\")\n        val newAlphabet17 = newAlphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet18 = newAlphabet.map(x => x + \"r\")\n\
    \        val newAlphabet19 = newAlphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = newAlphabet.map(x => x + \"t\")\n        val newAlphabet21 = newAlphabet.map(x\
    \ => x + \"u\")\n        val newAlphabet22 = newAlphabet.map(x => x + \"v\")\n\
    \        val newAlphabet23 = newAlphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = newAlphabet.map(x => x + \"x\")\n        val newAlphabet25 = newAlphabet.map(x\
    \ => x + \"y\")\n        val newAlphabet26 = newAlphabet.map(x => x + \"z\")\n\
    \        val newAlphabet27 = newAlphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = newAlphabet.map(\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4e_ltvx4.scala:46:44 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet28\e[0m = newAlphabet.map(\n\
    \e[31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4e_ltvx4.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    b\")\n        val rotatedAlphabet3 = rotatedAlphabet.map(x => x + \"c\")\n   \
    \     val rotatedAlphabet4 = rotatedAlphabet.map(x => x + \"d\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet.map(x => x + \"e\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet.map(x => x + \"f\")\n        val rotatedAlphabet7 = rotatedAlphabet.map(x\
    \ => x + \"g\")\n        val rotatedAlphabet8 = rotatedAlphabet.map(x => x + \"\
    h\")\n        val rotatedAlphabet9 = rotatedAlphabet.map(x => x + \"i\")\n   \
    \     val rotatedAlphabet10 = rotatedAlphabet.map(x => x + \"j\")\n        val\
    \ rotatedAlphabet11 = rotatedAlphabet.map(x => x + \"k\")\n        val rotatedAlphabet12\
    \ = rotatedAlphabet.map(x => x + \"l\")\n        val rotatedAlphabet13 = rotatedAlphabet.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet14 = rotatedAlphabet.map(x => x +\
    \ \"n\")\n        val rotatedAlphabet15 = rotatedAlphabet.map(x => x + \"o\")\n\
    \        val rotatedAlphabet16 = rotatedAlphabet.map(x => x + \"p\")\n       \
    \ val rotatedAlphabet17 = rotatedAlphabet.map(x => x + \"q\")\n        val rotatedAlphabet18\
    \ = rotatedAlphabet.map(x => x + \"r\")\n        val rotatedAlphabet19 = rotatedAlphabet.map(x\
    \ => x + \"s\")\n        val rotatedAlphabet20 = rotatedAlphabet.map(x => x +\
    \ \"t\")\n        val rotatedAlphabet21 = rotatedAlphabet.map(x => x + \"u\")\n\
    \        val rotatedAlphabet22 = rotatedAlphabet.map(x => x + \"v\")\n       \
    \ val rotatedAlphabet23 = rotatedAlphabet.map(x => x + \"w\")\n        val rotatedAlphabet24\
    \ = rotatedAlphabet.map(x => x + \"x\")\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpjirjk6ib.scala:43:11 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjirjk6ib.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val rotatedString = s.map(x\
    \ => rotatedAlphabet(alphabet.indexOf(x)))\n        rotatedString.map(x => x._1\
    \ + x._2).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpqubu8zgk.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpqubu8zgk.scala:19)\n\tat Problem$.main(tmpqubu8zgk.scala:24)\n\
    \tat Problem.main(tmpqubu8zgk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\").map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\").map(x => x + \"a\")\n        val newAlphabet3\
    \ = alphabet.map(x => x + \"c\").map(x => x + \"d\").map(x => x + \"e\").map(x\
    \ => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x => x + \"i\").map(x\
    \ => x + \"j\").map(x => x + \"k\").map(x => x + \"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpdjo8ezq7.scala:21:211 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet3\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e[36mx\e[0m => x + \"\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                                            \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                                 unclosed string\
    \ literal\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdjo8ezq7.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797770
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val index = alphabet.indexOf(s.charAt(i))\n\
    \            val newIndex = index + (index % 2)\n            result.append(alphabet(newIndex))\n\
    \        }\n        result.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -2\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.encrypt$$anonfun$1(tmp64wqhtoo.scala:23)\n\tat Problem$.encrypt$$anonfun$adapted$1(tmp64wqhtoo.scala:24)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.encrypt(tmp64wqhtoo.scala:24)\n\
    \tat Problem$.main(tmp64wqhtoo.scala:28)\n\tat Problem.main(tmp64wqhtoo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet2 = List(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val alphabet3 = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val alphabet4 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet5 =\
    \ List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet6 = List(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val alphabet7 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet8 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet9 = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val alphabet10 = List(\"a\", \"b\", \"c\",\
    \ \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\")\n        val alphabet11 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbpz9r4fj.scala:28:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36malphabet11\e[0m = List(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                             \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                               unclosed string literal\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpbpz9r4fj.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet2 = List(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val alphabet3 = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val alphabet4 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet5 =\
    \ List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet6 = List(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val alphabet7 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet8 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet9 = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val alphabet10 = List(\"a\", \"b\", \"c\",\
    \ \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\")\n        val alphabet11 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbpz9r4fj.scala:28:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36malphabet11\e[0m = List(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                             \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                               unclosed string literal\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpbpz9r4fj.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\")\n        val newAlphabet2 = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\")\n        val newAlphabet3 = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsdoee4im.scala:21:224 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet3\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \                                                                            \
    \                                                                            \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \                  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsdoee4im.scala:22:5 ---------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"m\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"o\")\n        val newAlphabet18 = alphabet.map(x => x + \"p\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"q\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet22 = alphabet.map(x => x + \"t\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"u\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet26 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"y\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"z\")\n        val new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7c9lgb0p.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7c9lgb0p.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    y\")\n        val rotatedAlphabet3 = rotatedAlphabet2.map(x => x + \"x\")\n  \
    \      val rotatedAlphabet4 = rotatedAlphabet3.map(x => x + \"w\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet4.map(x => x + \"v\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet5.map(x => x + \"u\")\n        val rotatedAlphabet7 = rotatedAlphabet6.map(x\
    \ => x + \"t\")\n        val rotatedAlphabet8 = rotatedAlphabet7.map(x => x +\
    \ \"s\")\n        val rotatedAlphabet9 = rotatedAlphabet8.map(x => x + \"r\")\n\
    \        val rotatedAlphabet10 = rotatedAlphabet9.map(x => x + \"q\")\n      \
    \  val rotatedAlphabet11 = rotatedAlphabet10.map(x => x + \"p\")\n        val\
    \ rotatedAlphabet12 = rotatedAlphabet11.map(x => x + \"o\")\n        val rotatedAlphabet13\
    \ = rotatedAlphabet12.map(x => x + \"n\")\n        val rotatedAlphabet14 = rotatedAlphabet13.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet15 = rotatedAlphabet14.map(x => x\
    \ + \"l\")\n        val rotatedAlphabet16 = rotatedAlphabet15.map(x => x + \"\
    k\")\n        val rotatedAlphabet17 = rotatedAlphabet16.map(x => x + \"j\")\n\
    \        val rotatedAlphabet18 = rotatedAlphabet17.map(x => x + \"i\")\n     \
    \   val rotatedAlphabet19 = rotatedAlphabet18.map(x => x + \"h\")\n        val\
    \ rotatedAlphabet20 = rotatedAlphabet19.map(x => x + \"g\")\n        val rotatedAlphabet21\
    \ = rotatedAlphabet20.map(x => x + \"f\")\n        val rotatedAlphabet22 = rotatedAlphabet21.map(x\
    \ => x + \"e\")\n        val rotatedAlphabet23 = rotatedAlphabet22.map(x => x\
    \ + \"d\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpraiuhah_.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val newString = s.map(x\
    \ => newAlphabet(alphabet.indexOf(x)).swap)\n        newString.mkString(\"\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpxqgtw5gs.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpxqgtw5gs.scala:19)\n\tat Problem$.main(tmpxqgtw5gs.scala:24)\n\
    \tat Problem.main(tmpxqgtw5gs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString(\"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmp3n518xne.scala:19)\n\tat Problem$.$anonfun$adapted$1(tmp3n518xne.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmp3n518xne.scala:19)\n\
    \tat Problem$.main(tmp3n518xne.scala:24)\n\tat Problem.main(tmp3n518xne.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val\
    \ newAlphabet2 = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x\
    \ => x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n   \
    \     val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x =>\
    \ x + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n      \
    \  val newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet11 = alphabet.map(x =>\
    \ x + \"p\")\n        val newAlphabet12 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet13 = alphabet.map(x => x + \"n\")\n        val newAlphabet14\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet15 = alphabet.map(x =>\
    \ x + \"l\")\n        val newAlphabet16 = alphabet.map(x => x + \"k\")\n     \
    \   val newAlphabet17 = alphabet.map(x => x + \"j\")\n        val newAlphabet18\
    \ = alphabet.map(x => x + \"i\")\n        val newAlphabet19 = alphabet.map(x =>\
    \ x + \"h\")\n        val newAlphabet20 = alphabet.map(x => x + \"g\")\n     \
    \   val newAlphabet21 = alphabet.map(x => x + \"f\")\n        val newAlphabet22\
    \ = alphabet.map(x => x + \"e\")\n        val newAlphabet23 = alphabet.map(x =>\
    \ x + \"d\")\n        val newAlphabet24 = alphabet.map(x => x + \"c\")\n     \
    \   val newAlphabet25 = alphabet.map(x => x + \"b\")\n        val newAlphabet26\
    \ = alphabet.map(x => x + \"a\")\n        val newAlphabet27 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet28 = alphabet.map(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpysnm2_2m.scala:46:45 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet28\e[0m = alphabet.map(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \     ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpysnm2_2m.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x => x + \"i\").map(x\
    \ => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x\
    \ => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpniyf6uof.scala:19:1204 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [3"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => (x - 'a' + 2) % 26 + 'a')\n     \
    \   val newString = s.map(x => newAlphabet(alphabet.indexOf(x) + 1))\n       \
    \ newString.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1jf8a7ki.scala:24)\n\tat Problem.main(tmp1jf8a7ki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x + 2)\n        val newAlphabet2\
    \ = alphabet.map(x => x + 1)\n        val newAlphabet3 = alphabet.map(x => x -\
    \ 1)\n        val newAlphabet4 = alphabet.map(x => x - 2)\n        val newAlphabet5\
    \ = alphabet.map(x => x - 3)\n        val newAlphabet6 = alphabet.map(x => x -\
    \ 4)\n        val newAlphabet7 = alphabet.map(x => x - 5)\n        val newAlphabet8\
    \ = alphabet.map(x => x - 6)\n        val newAlphabet9 = alphabet.map(x => x -\
    \ 7)\n        val newAlphabet10 = alphabet.map(x => x - 8)\n        val newAlphabet11\
    \ = alphabet.map(x => x - 9)\n        val newAlphabet12 = alphabet.map(x => x\
    \ - 10)\n        val newAlphabet13 = alphabet.map(x => x - 11)\n        val newAlphabet14\
    \ = alphabet.map(x => x - 12)\n        val newAlphabet15 = alphabet.map(x => x\
    \ - 13)\n        val newAlphabet16 = alphabet.map(x => x - 14)\n        val newAlphabet17\
    \ = alphabet.map(x => x - 15)\n        val newAlphabet18 = alphabet.map(x => x\
    \ - 16)\n        val newAlphabet19 = alphabet.map(x => x - 17)\n        val newAlphabet20\
    \ = alphabet.map(x => x - 18)\n        val newAlphabet21 = alphabet.map(x => x\
    \ - 19)\n        val newAlphabet22 = alphabet.map(x => x - 20)\n        val newAlphabet23\
    \ = alphabet.map(x => x - 21)\n        val newAlphabet24 = alphabet.map(x => x\
    \ - 22)\n        val newAlphabet25 = alphabet.map(x => x - 23)\n        val newAlphabet26\
    \ = alphabet.map(x => x - 24)\n        val newAlphabet27 = alphabet.map(x => x\
    \ - 25)\n        val newAlphabet28 = alphabet.map(x => x - 26)\n        val newAlphabet29\
    \ = alphabet.map(x => x - 27)\n        val newAlphabet30 = alphabet.map(x => x\
    \ - 28)\n        val newAlphabet31 = alphabet.map(x \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpntiwm3ud.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpntiwm3ud.scala:49:41\
    \ ------------------------\e[0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e\
    [36mnewAlphabet31\e[0m = alphabet.map(x \n\e[31m\e[31m   |\e[0m              \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \               Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpntiwm3ud.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabetLength = alphabet.length\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\"\
    )).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvwc22a7f.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvwc22a7f.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvwc22a7f.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvwc22a7f.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvwc22a7f.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659797769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 2)))\n        val newString = s.map(x\
    \ => newAlphabet(alphabet.indexOf(x)))\n        newString.mkString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpx_yiq2ps.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpx_yiq2ps.scala:19)\n\tat Problem$.main(tmpx_yiq2ps.scala:24)\n\
    \tat Problem.main(tmpx_yiq2ps.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val rotatedAlphabet2 = alphabet.map(x => x + \"y\")\n\
    \        val rotatedAlphabet3 = alphabet.map(x => x + \"x\")\n        val rotatedAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val rotatedAlphabet5 = alphabet.map(x\
    \ => x + \"v\")\n        val rotatedAlphabet6 = alphabet.map(x => x + \"u\")\n\
    \        val rotatedAlphabet7 = alphabet.map(x => x + \"t\")\n        val rotatedAlphabet8\
    \ = alphabet.map(x => x + \"s\")\n        val rotatedAlphabet9 = alphabet.map(x\
    \ => x + \"r\")\n        val rotatedAlphabet10 = alphabet.map(x => x + \"q\")\n\
    \        val rotatedAlphabet11 = alphabet.map(x => x + \"p\")\n        val rotatedAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val rotatedAlphabet13 = alphabet.map(x\
    \ => x + \"n\")\n        val rotatedAlphabet14 = alphabet.map(x => x + \"m\")\n\
    \        val rotatedAlphabet15 = alphabet.map(x => x + \"l\")\n        val rotatedAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val rotatedAlphabet17 = alphabet.map(x\
    \ => x + \"j\")\n        val rotatedAlphabet18 = alphabet.map(x => x + \"i\")\n\
    \        val rotatedAlphabet19 = alphabet.map(x => x + \"h\")\n        val rotatedAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val rotatedAlphabet21 = alphabet.map(x\
    \ => x + \"f\")\n        val rotatedAlphabet22 = alphabet.map(x => x + \"e\")\n\
    \        val rotatedAlphabet23 = alphabet.map(x => x + \"d\")\n        val rotatedAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val rotatedAlphabet25 = alphabet.map(x\
    \ => x + \"b\")\n        val rotatedAlphabet26 = alphabet.map(x => x + \"a\")\n\
    \        val rotatedAlphabet27 = alphabet.map(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjylp2p99.scala:45:49 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet27\e[0m =\
    \ alphabet.map(\e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m                       \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \            expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjylp2p99.scala:46:5 ---------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x => x + \"i\").map(x\
    \ => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x\
    \ => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzq25e3_4.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzq25e3_4.scala:20:5 ---------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val rotatedAlphabet = alphabet.map(x => alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        rotatedString.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpsyimvcwf.scala:19)\n\tat Problem$.$anonfun$adapted$1(tmpsyimvcwf.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpsyimvcwf.scala:19)\n\
    \tat Problem$.main(tmpsyimvcwf.scala:24)\n\tat Problem.main(tmpsyimvcwf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    y\")\n        val rotatedAlphabet3 = rotatedAlphabet2.map(x => x + \"x\")\n  \
    \      val rotatedAlphabet4 = rotatedAlphabet3.map(x => x + \"w\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet4.map(x => x + \"v\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet5.map(x => x + \"u\")\n        val rotatedAlphabet7 = rotatedAlphabet6.map(x\
    \ => x + \"t\")\n        val rotatedAlphabet8 = rotatedAlphabet7.map(x => x +\
    \ \"s\")\n        val rotatedAlphabet9 = rotatedAlphabet8.map(x => x + \"r\")\n\
    \        val rotatedAlphabet10 = rotatedAlphabet9.map(x => x + \"q\")\n      \
    \  val rotatedAlphabet11 = rotatedAlphabet10.map(x => x + \"p\")\n        val\
    \ rotatedAlphabet12 = rotatedAlphabet11.map(x => x + \"o\")\n        val rotatedAlphabet13\
    \ = rotatedAlphabet12.map(x => x + \"n\")\n        val rotatedAlphabet14 = rotatedAlphabet13.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet15 = rotatedAlphabet14.map(x => x\
    \ + \"l\")\n        val rotatedAlphabet16 = rotatedAlphabet15.map(x => x + \"\
    k\")\n        val rotatedAlphabet17 = rotatedAlphabet16.map(x => x + \"j\")\n\
    \        val rotatedAlphabet18 = rotatedAlphabet17.map(x => x + \"i\")\n     \
    \   val rotatedAlphabet19 = rotatedAlphabet18.map(x => x + \"h\")\n        val\
    \ rotatedAlphabet20 = rotatedAlphabet19.map(x => x + \"g\")\n        val rotatedAlphabet21\
    \ = rotatedAlphabet20.map(x => x + \"f\")\n        val rotatedAlphabet22 = rotatedAlphabet21.map(x\
    \ => x + \"e\")\n        val rotatedAlphabet23 = rotatedAlphabet22.map(x => x\
    \ + \"d\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpraiuhah_.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet2 = List(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val alphabet3 = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val alphabet4 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet5 =\
    \ List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet6 = List(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val alphabet7 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet8 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet9 = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val alphabet10 = List(\"a\", \"b\", \"c\",\
    \ \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\")\n        val alphabet11 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbpz9r4fj.scala:28:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36malphabet11\e[0m = List(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                             \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                               unclosed string literal\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpbpz9r4fj.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabetLength = alphabet.length\n\
    \        val result = new StringBuilder\n        val length = s.length\n     \
    \   var i = 0\n        while (i < length) {\n            val c = s.charAt(i)\n\
    \            val index = alphabet.indexOf(c)\n            if (index != -1) {\n\
    \                val newIndex = index + 2\n                if (newIndex < alphabetLength)\
    \ {\n                    result.append(alphabet(newIndex))\n                }\
    \ else {\n                    result.append(alphabet(alphabetLength - 1))\n  \
    \              }\n            } else {\n                result.append(c)\n   \
    \         }\n            i += 1\n        }\n        return result.toString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptakad9id.scala:41)\n\tat Problem.main(tmptakad9id.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = newAlphabet.map(x => x + \"b\")\n\
    \        val newAlphabet3 = newAlphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = newAlphabet.map(x => x + \"d\")\n        val newAlphabet5 = newAlphabet.map(x\
    \ => x + \"e\")\n        val newAlphabet6 = newAlphabet.map(x => x + \"f\")\n\
    \        val newAlphabet7 = newAlphabet.map(x => x + \"g\")\n        val newAlphabet8\
    \ = newAlphabet.map(x => x + \"h\")\n        val newAlphabet9 = newAlphabet.map(x\
    \ => x + \"i\")\n        val newAlphabet10 = newAlphabet.map(x => x + \"j\")\n\
    \        val newAlphabet11 = newAlphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = newAlphabet.map(x => x + \"l\")\n        val newAlphabet13 = newAlphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet14 = newAlphabet.map(x => x + \"n\")\n\
    \        val newAlphabet15 = newAlphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = newAlphabet.map(x => x + \"p\")\n        val newAlphabet17 = newAlphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet18 = newAlphabet.map(x => x + \"r\")\n\
    \        val newAlphabet19 = newAlphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = newAlphabet.map(x => x + \"t\")\n        val newAlphabet21 = newAlphabet.map(x\
    \ => x + \"u\")\n        val newAlphabet22 = newAlphabet.map(x => x + \"v\")\n\
    \        val newAlphabet23 = newAlphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = newAlphabet.map(x => x + \"x\")\n        val newAlphabet25 = newAlphabet.map(x\
    \ => x + \"y\")\n        val newAlphabet26 = newAlphabet.map(x => x + \"z\")\n\
    \        val newAlphabet27 = newAlphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = newAlphabet.map(\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4e_ltvx4.scala:46:44 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet28\e[0m = newAlphabet.map(\n\
    \e[31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4e_ltvx4.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val\
    \ newAlphabet2 = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x\
    \ => x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n   \
    \     val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n      \
    \  val newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet11 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet12 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet13 = alphabet.map(x => x + \"m\")\n        val newAlphabet14\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet15 = alphabet.map(x =>\
    \ x + \"o\")\n        val newAlphabet16 = alphabet.map(x => x + \"p\")\n     \
    \   val newAlphabet17 = alphabet.map(x => x + \"q\")\n        val newAlphabet18\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet19 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet20 = alphabet.map(x => x + \"t\")\n     \
    \   val newAlphabet21 = alphabet.map(x => x + \"u\")\n        val newAlphabet22\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet23 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet24 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet25 = alphabet.map(x => x + \"y\")\n        val newAlphabet26\
    \ = alphabet.map(x => x + \"z\")\n        val newAlphabet27 = alphabet.map(x =>\
    \ x + \"aa\")\n        val newAlphabet28 = alphabet.map(x => \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkit461mt.scala:46:45 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet28\e[0m = alphabet.map(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \     ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpkit461mt.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val index = alphabet.indexOf(s.charAt(i))\n\
    \            val newIndex = index + (index * 2)\n            val newChar = alphabet(newIndex)\n\
    \            result.append(newChar)\n        }\n        return result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.encrypt$$anonfun$1(tmpnl1mth6i.scala:23)\n\tat Problem$.encrypt$$anonfun$adapted$1(tmpnl1mth6i.scala:25)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.encrypt(tmpnl1mth6i.scala:25)\n\
    \tat Problem$.main(tmpnl1mth6i.scala:29)\n\tat Problem.main(tmpnl1mth6i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x + \"a\"))\n        val newAlphabet2 = alphabet.map(x => (x + \"b\"))\n\
    \        val newAlphabet3 = alphabet.map(x => (x + \"c\"))\n        val newAlphabet4\
    \ = alphabet.map(x => (x + \"d\"))\n        val newAlphabet5 = alphabet.map(x\
    \ => (x + \"e\"))\n        val newAlphabet6 = alphabet.map(x => (x + \"f\"))\n\
    \        val newAlphabet7 = alphabet.map(x => (x + \"g\"))\n        val newAlphabet8\
    \ = alphabet.map(x => (x + \"h\"))\n        val newAlphabet9 = alphabet.map(x\
    \ => (x + \"i\"))\n        val newAlphabet10 = alphabet.map(x => (x + \"j\"))\n\
    \        val newAlphabet11 = alphabet.map(x => (x + \"k\"))\n        val newAlphabet12\
    \ = alphabet.map(x => (x + \"l\"))\n        val newAlphabet13 = alphabet.map(x\
    \ => (x + \"m\"))\n        val newAlphabet14 = alphabet.map(x => (x + \"n\"))\n\
    \        val newAlphabet15 = alphabet.map(x => (x + \"o\"))\n        val newAlphabet16\
    \ = alphabet.map(x => (x + \"p\"))\n        val newAlphabet17 = alphabet.map(x\
    \ => (x + \"q\"))\n        val newAlphabet18 = alphabet.map(x => (x + \"r\"))\n\
    \        val newAlphabet19 = alphabet.map(x => (x + \"s\"))\n        val newAlphabet20\
    \ = alphabet.map(x => (x + \"t\"))\n        val newAlphabet21 = alphabet.map(x\
    \ => (x + \"u\"))\n        val newAlphabet22 = alphabet.map(x => (x + \"v\"))\n\
    \        val newAlphabet23 = alphabet.map(x => (x + \"w\"))\n        val newAlphabet24\
    \ = alphabet.map(x => (x + \"x\"))\n        val newAlphabet25 = alphabet.map(x\
    \ => (x + \"y\"))\n        val newAlphabet26 = alphabet.map(x => (x + \"z\"))\n\
    \        val newAlphabet27 = alphabet.map(x => (x + \"a\"))\n        val newAlphabet28\
    \ = alphabet.map(x => (x + \"b\"))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps80ike28.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x => x + \"i\").map(x\
    \ => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x\
    \ => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpniyf6uof.scala:19:1204 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [3"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x\
    \ => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x\
    \ => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x\
    \ => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x\
    \ => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x\
    \ => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x\
    \ => x + \"k\").map(x => x + \"j\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb_plg0v7.scala:19:1204 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [3"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = newAlphabet.map(x => x + \"y\")\n\
    \        val newAlphabet3 = newAlphabet2.map(x => x + \"x\")\n        val newAlphabet4\
    \ = newAlphabet3.map(x => x + \"w\")\n        val newAlphabet5 = newAlphabet4.map(x\
    \ => x + \"v\")\n        val newAlphabet6 = newAlphabet5.map(x => x + \"u\")\n\
    \        val newAlphabet7 = newAlphabet6.map(x => x + \"t\")\n        val newAlphabet8\
    \ = newAlphabet7.map(x => x + \"s\")\n        val newAlphabet9 = newAlphabet8.map(x\
    \ => x + \"r\")\n        val newAlphabet10 = newAlphabet9.map(x => x + \"q\")\n\
    \        val newAlphabet11 = newAlphabet10.map(x => x + \"p\")\n        val newAlphabet12\
    \ = newAlphabet11.map(x => x + \"o\")\n        val newAlphabet13 = newAlphabet12.map(x\
    \ => x + \"n\")\n        val newAlphabet14 = newAlphabet13.map(x => x + \"m\"\
    )\n        val newAlphabet15 = newAlphabet14.map(x => x + \"l\")\n        val\
    \ newAlphabet16 = newAlphabet15.map(x => x + \"k\")\n        val newAlphabet17\
    \ = newAlphabet16.map(x => x + \"j\")\n        val newAlphabet18 = newAlphabet17.map(x\
    \ => x + \"i\")\n        val newAlphabet19 = newAlphabet18.map(x => x + \"h\"\
    )\n        val newAlphabet20 = newAlphabet19.map(x => x + \"g\")\n        val\
    \ newAlphabet21 = newAlphabet20.map(x => x + \"f\")\n        val newAlphabet22\
    \ = newAlphabet21.map(x => x + \"e\")\n        val newAlphabet23 = newAlphabet22.map(x\
    \ => x + \"d\")\n        val newAlphabet24 = newAlphabet23.map(x => x + \"c\"\
    )\n        val newAlphabet25 = newAlphabet24.map(x => x + \"b\")\n        val\
    \ newAlphabet26 = newAlphabet25.map(x => x + \"a\")\n        val new\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsfomlp1m.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsfomlp1m.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet2 = List(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val alphabet3 = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val alphabet4 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet5 =\
    \ List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet6 = List(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val alphabet7 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet8 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet9 = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val alphabet10 = List(\"a\", \"b\", \"c\",\
    \ \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\")\n        val alphabet11 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbpz9r4fj.scala:28:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36malphabet11\e[0m = List(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                             \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                               unclosed string literal\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpbpz9r4fj.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 2)))\n        val newString = s.map(x\
    \ => newAlphabet(alphabet.indexOf(x)))\n        newString.mkString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpx_yiq2ps.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpx_yiq2ps.scala:19)\n\tat Problem$.main(tmpx_yiq2ps.scala:24)\n\
    \tat Problem.main(tmpx_yiq2ps.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 2)))\n        val newString = s.map(x\
    \ => newAlphabet(alphabet.indexOf(x)))\n        newString.mkString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpx_yiq2ps.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpx_yiq2ps.scala:19)\n\tat Problem$.main(tmpx_yiq2ps.scala:24)\n\
    \tat Problem.main(tmpx_yiq2ps.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 2)))\n        val newAlphabet2 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 4)))\n        val newAlphabet3 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 6)))\n        val newAlphabet4 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 8)))\n        val newAlphabet5 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 10)))\n        val newAlphabet6 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 12)))\n        val newAlphabet7 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 14)))\n        val newAlphabet8 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 16)))\n        val newAlphabet9 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 18)))\n        val newAlphabet10 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 20)))\n        val newAlphabet11 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 22)))\n        val newAlphabet12 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 24)))\n        val newAlphabet13 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 26)))\n        val newAlphabet14 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 28)))\n        val newAlphabet15 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 30)))\n        val newAlphabet16 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 32)))\n        val newAlphabet17 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 34)))\n        val newAlphabet18 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 36)))\n        val newAlphabet19 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 38)))\n        val newAlphabet20 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyj1x3v03.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyj1x3v03.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\")\n        val result =\
    \ s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n        val result = result.map(x\
    \ => x.reverse)\n        val result = result.map(x => x.reverse)\n        val\
    \ result = result.map(x => x.reverse)\n        val result = result.map(x => x.reverse)\n\
    \        val result = result.map(x => x.reverse)\n        val result = result.map(x\
    \ => x.reverse)\n        val result = result.map(x => x.reverse)\n        val\
    \ result = result.map(x => x.reverse)\n        val result = result.map(x => x.reverse)\n\
    \        val result = result.map(x => x.reverse)\n        val result = result.map(x\
    \ => x.reverse)\n        val result = result.map(x => x.reverse)\n        val\
    \ result = result.map(x => x.reverse)\n        val result = result.map(x => x.reverse)\n\
    \        val result = result.map(x => x.reverse)\n        val result = result.map(x\
    \ => x.reverse)\n        val result = result.map(x => x.reverse)\n        val\
    \ result = result.map(x => x.reverse)\n        val result = result.map(x => x.reverse)\n\
    \        val result = result.map(x => x.reverse)\n        val result = result.map(x\
    \ => x.reverse)\n        val result = result.map(x => x.reverse)\n        val\
    \ result = result.map(\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2prlrvx2.scala:43:32 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.map(\n\
    \e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m \
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2prlrvx2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mresult\e[0m = result.map(\e[36mx\e[0m => x.reverse)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mresult\
    \ is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2prlrvx2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mresult\e[0m = result.map(\e[36mx\e[0m => x.reverse)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mresult\
    \ is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2prlrvx2.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mresult\e[0m = result.map(\e[36mx\e[0m => x.reverse)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mresult\
    \ is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2prlrvx2.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mresult\e[0m = result.map(\e[36mx\e[0m => x.reverse)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mresult\
    \ is already defined as \e[33mvalue"
  stdout: ''
  timestamp: 1659797770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x + \"a\"))\n        val newAlphabet2 = alphabet.map(x => (x + \"b\"))\n\
    \        val newAlphabet3 = alphabet.map(x => (x + \"c\"))\n        val newAlphabet4\
    \ = alphabet.map(x => (x + \"d\"))\n        val newAlphabet5 = alphabet.map(x\
    \ => (x + \"e\"))\n        val newAlphabet6 = alphabet.map(x => (x + \"f\"))\n\
    \        val newAlphabet7 = alphabet.map(x => (x + \"g\"))\n        val newAlphabet8\
    \ = alphabet.map(x => (x + \"h\"))\n        val newAlphabet9 = alphabet.map(x\
    \ => (x + \"i\"))\n        val newAlphabet10 = alphabet.map(x => (x + \"j\"))\n\
    \        val newAlphabet11 = alphabet.map(x => (x + \"k\"))\n        val newAlphabet12\
    \ = alphabet.map(x => (x + \"l\"))\n        val newAlphabet13 = alphabet.map(x\
    \ => (x + \"m\"))\n        val newAlphabet14 = alphabet.map(x => (x + \"n\"))\n\
    \        val newAlphabet15 = alphabet.map(x => (x + \"o\"))\n        val newAlphabet16\
    \ = alphabet.map(x => (x + \"p\"))\n        val newAlphabet17 = alphabet.map(x\
    \ => (x + \"q\"))\n        val newAlphabet18 = alphabet.map(x => (x + \"r\"))\n\
    \        val newAlphabet19 = alphabet.map(x => (x + \"s\"))\n        val newAlphabet20\
    \ = alphabet.map(x => (x + \"t\"))\n        val newAlphabet21 = alphabet.map(x\
    \ => (x + \"u\"))\n        val newAlphabet22 = alphabet.map(x => (x + \"v\"))\n\
    \        val newAlphabet23 = alphabet.map(x => (x + \"w\"))\n        val newAlphabet24\
    \ = alphabet.map(x => (x + \"x\"))\n        val newAlphabet25 = alphabet.map(x\
    \ => (x + \"y\"))\n        val newAlphabet26 = alphabet.map(x => (x + \"z\"))\n\
    \        val newAlphabet27 = alphabet.map(x => (x + \"a\"))\n        val newAlphabet28\
    \ = alphabet.map(x => (x + \"b\"))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps80ike28.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet2 = List(\"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\")\n        val alphabet3 = List(\"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet4 = List(\"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val alphabet5 = List(\"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet6 = List(\"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet7 =\
    \ List(\"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet8 = List(\"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n \
    \       val alphabet9 = List(\"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\",\
    \ \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val alphabet10 = List(\"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n \
    \       val alphabet11 = List(\"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet12 = List(\"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet13 = List(\"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5f7onm79.scala:30:60 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36malphabet13\e[0m = List(\e\
    [31m\"m\"\e[0m, \e[31m\"n\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"p\"\e[0m, \e[31m\"\
    q\"\e[0m, \e[31m\"r\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                        \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                                unclosed string literal\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5f7onm79.scala:31:5 ---------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    y\")\n        val rotatedAlphabet3 = rotatedAlphabet2.map(x => x + \"x\")\n  \
    \      val rotatedAlphabet4 = rotatedAlphabet3.map(x => x + \"w\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet4.map(x => x + \"v\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet5.map(x => x + \"u\")\n        val rotatedAlphabet7 = rotatedAlphabet6.map(x\
    \ => x + \"t\")\n        val rotatedAlphabet8 = rotatedAlphabet7.map(x => x +\
    \ \"s\")\n        val rotatedAlphabet9 = rotatedAlphabet8.map(x => x + \"r\")\n\
    \        val rotatedAlphabet10 = rotatedAlphabet9.map(x => x + \"q\")\n      \
    \  val rotatedAlphabet11 = rotatedAlphabet10.map(x => x + \"p\")\n        val\
    \ rotatedAlphabet12 = rotatedAlphabet11.map(x => x + \"o\")\n        val rotatedAlphabet13\
    \ = rotatedAlphabet12.map(x => x + \"n\")\n        val rotatedAlphabet14 = rotatedAlphabet13.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet15 = rotatedAlphabet14.map(x => x\
    \ + \"l\")\n        val rotatedAlphabet16 = rotatedAlphabet15.map(x => x + \"\
    k\")\n        val rotatedAlphabet17 = rotatedAlphabet16.map(x => x + \"j\")\n\
    \        val rotatedAlphabet18 = rotatedAlphabet17.map(x => x + \"i\")\n     \
    \   val rotatedAlphabet19 = rotatedAlphabet18.map(x => x + \"h\")\n        val\
    \ rotatedAlphabet20 = rotatedAlphabet19.map(x => x + \"g\")\n        val rotatedAlphabet21\
    \ = rotatedAlphabet20.map(x => x + \"f\")\n        val rotatedAlphabet22 = rotatedAlphabet21.map(x\
    \ => x + \"e\")\n        val rotatedAlphabet23 = rotatedAlphabet22.map(x => x\
    \ + \"d\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpraiuhah_.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet2 = List(\"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet3 = List(\"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    , \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\")\n        val alphabet4 = List(\"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val alphabet5 = List(\"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val alphabet6 = List(\"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
    x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet7 = List(\"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprz_ov6q7.scala:24:74 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36malphabet7\e[0m = List(\e\
    [31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"j\"\e[0m, \e[31m\"\
    k\"\e[0m, \e[31m\"l\"\e[0m, \e[31m\"m\"\e[0m, \e[31m\"n\"\e[0m, \e[31m\"o\"\e\
    [0m, \"\n\e[31m\e[31m   |\e[0m                                               \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                       unclosed string literal\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprz_ov6q7.scala:25:5 ---------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val rotatedString = s.map(x\
    \ => rotatedAlphabet(alphabet.indexOf(x)))\n        rotatedString.mkString(\"\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpopxqbbiv.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpopxqbbiv.scala:19)\n\tat Problem$.main(tmpopxqbbiv.scala:24)\n\
    \tat Problem.main(tmpopxqbbiv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\").map(x => x + \"aa\").map(x => x + \"bb\").map(x\
    \ => x + \"cc\").map(x => x + \"dd\").map(x => x + \"ee\").map(x => x + \"ff\"\
    ).map(x => x + \"gg\").map(x => x + \"hh\").map(x => x + \"ii\").map(x => x +\
    \ \"jj\").map(x => x + \"kk\").map(x => x + \"ll\").map(x => x + \"mm\").map(x\
    \ => x + \"nn\").map(x => x + \"oo\").map(x => x + \"pp\").map(x => x + \"qq\"\
    ).map(x => x + \"rr\").map(x => x + \"ss\").map(x => x + \"tt\").map(x => x +\
    \ \"uu\").map(x => x + \"vv\").map(x => x + \"ww\").map(x => x + \"xx\").map(x\
    \ => x + \"yy\").map(x => x + \"zz\").map(x => x + \"aaa\").map(x => x + \"bbb\"\
    ).map(x => x + \"ccc\").map(x => x + \"ddd\").map(x => x + \"eee\").map(x => x\
    \ + \"fff\").map(x => x + \"ggg\").map(x => x + \"hhh\").map(x => x + \"iii\"\
    ).map(x => x + \"jjj\").map(x => x + \"kkk\").map(x => x + \"\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_7s_ajlo.scala:19:1230 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"aa\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"bb\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"cc\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"dd\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"ee\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"ff\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"gg\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"hh\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"ii\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"jj\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"kk\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"ll\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"mm\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"nn\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"oo\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"pp\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"qq\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"rr\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"ss\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"tt\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"uu\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"vv\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"ww\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"xx\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"yy\"\e[0m).map(\e[36mx\e[0m => x + "
  stdout: ''
  timestamp: 1659797770
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val newString = s.map(x\
    \ => newAlphabet(alphabet.indexOf(x) + 1))\n        newString.mkString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpqy4pi91f.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpqy4pi91f.scala:19)\n\tat Problem$.main(tmpqy4pi91f.scala:24)\n\
    \tat Problem.main(tmpqy4pi91f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = newAlphabet.map(x => x + \"b\")\n\
    \        val newAlphabet3 = newAlphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = newAlphabet.map(x => x + \"d\")\n        val newAlphabet5 = newAlphabet.map(x\
    \ => x + \"e\")\n        val newAlphabet6 = newAlphabet.map(x => x + \"f\")\n\
    \        val newAlphabet7 = newAlphabet.map(x => x + \"g\")\n        val newAlphabet8\
    \ = newAlphabet.map(x => x + \"h\")\n        val newAlphabet9 = newAlphabet.map(x\
    \ => x + \"i\")\n        val newAlphabet10 = newAlphabet.map(x => x + \"j\")\n\
    \        val newAlphabet11 = newAlphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = newAlphabet.map(x => x + \"l\")\n        val newAlphabet13 = newAlphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet14 = newAlphabet.map(x => x + \"n\")\n\
    \        val newAlphabet15 = newAlphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = newAlphabet.map(x => x + \"p\")\n        val newAlphabet17 = newAlphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet18 = newAlphabet.map(x => x + \"r\")\n\
    \        val newAlphabet19 = newAlphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = newAlphabet.map(x => x + \"t\")\n        val newAlphabet21 = newAlphabet.map(x\
    \ => x + \"u\")\n        val newAlphabet22 = newAlphabet.map(x => x + \"v\")\n\
    \        val newAlphabet23 = newAlphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = newAlphabet.map(x => x + \"x\")\n        val newAlphabet25 = newAlphabet.map(x\
    \ => x + \"y\")\n        val newAlphabet26 = newAlphabet.map(x => x + \"z\")\n\
    \        val newAlphabet27 = newAlphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = newAlphabet.map(\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4e_ltvx4.scala:46:44 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet28\e[0m = newAlphabet.map(\n\
    \e[31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4e_ltvx4.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val rotatedString = s.map(x\
    \ => rotatedAlphabet(alphabet.indexOf(x)))\n        rotatedString.map(x => x._1).mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\"\
    )).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpqvuj1dic.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpqvuj1dic.scala:19)\n\tat Problem$.main(tmpqvuj1dic.scala:24)\n\
    \tat Problem.main(tmpqvuj1dic.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 2)))\n        val newString = s.map(x\
    \ => newAlphabet(alphabet.indexOf(x)))\n        newString.mkString(\"\")\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpl4buq0vm.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpl4buq0vm.scala:19)\n\tat Problem$.main(tmpl4buq0vm.scala:24)\n\
    \tat Problem.main(tmpl4buq0vm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
