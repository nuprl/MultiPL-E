name: HumanEval_69_search
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n    // zero, and has a frequency greater than or\
  \ equal to the value of the integer itself. \n    // The frequency of an integer\
  \ is the number of times it appears in the list.\n    // If no such a value exist,\
  \ return -1.\n    // Examples:\n    // >>> search((List[Long](4l.toLong, 1l.toLong,\
  \ 2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong)))\n    // (2l)\n    // >>> search((List[Long](1l.toLong,\
  \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 4l.toLong)))\n\
  \    // (3l)\n    // >>> search((List[Long](5l.toLong, 5l.toLong, 4l.toLong, 4l.toLong,\
  \ 4l.toLong)))\n    // (-1l)\n    def search(lst : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](5l.toLong,\
  \ 5l.toLong, 5l.toLong, 5l.toLong, 1l.toLong))) == (1l));\n    assert(search((List[Long](4l.toLong,\
  \ 1l.toLong, 4l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](3l.toLong,\
  \ 3l.toLong))) == (-1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 8l.toLong,\
  \ 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](2l.toLong,\
  \ 3l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](2l.toLong,\
  \ 7l.toLong, 8l.toLong, 8l.toLong, 4l.toLong, 8l.toLong, 7l.toLong, 3l.toLong, 9l.toLong,\
  \ 6l.toLong, 5l.toLong, 10l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong,\
  \ 1l.toLong, 7l.toLong, 4l.toLong, 10l.toLong, 8l.toLong, 1l.toLong))) == (1l));\n\
  \    assert(search((List[Long](3l.toLong, 2l.toLong, 8l.toLong, 2l.toLong))) ==\
  \ (2l));\n    assert(search((List[Long](6l.toLong, 7l.toLong, 1l.toLong, 8l.toLong,\
  \ 8l.toLong, 10l.toLong, 5l.toLong, 8l.toLong, 5l.toLong, 3l.toLong, 10l.toLong)))\
  \ == (1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 3l.toLong, 6l.toLong,\
  \ 5l.toLong, 6l.toLong, 4l.toLong))) == (-1l));\n    assert(search((List[Long](6l.toLong,\
  \ 9l.toLong, 6l.toLong, 7l.toLong, 1l.toLong, 4l.toLong, 7l.toLong, 1l.toLong, 8l.toLong,\
  \ 8l.toLong, 9l.toLong, 8l.toLong, 10l.toLong, 10l.toLong, 8l.toLong, 4l.toLong,\
  \ 10l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 9l.toLong, 5l.toLong,\
  \ 7l.toLong, 9l.toLong))) == (1l));\n    assert(search((List[Long](1l.toLong, 9l.toLong,\
  \ 10l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(search((List[Long](6l.toLong,\
  \ 9l.toLong, 7l.toLong, 5l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 3l.toLong, 7l.toLong,\
  \ 5l.toLong, 10l.toLong, 10l.toLong, 3l.toLong, 6l.toLong, 10l.toLong, 2l.toLong,\
  \ 8l.toLong, 6l.toLong, 5l.toLong, 4l.toLong, 9l.toLong, 5l.toLong, 3l.toLong, 10l.toLong)))\
  \ == (5l));\n    assert(search((List[Long](1l.toLong))) == (1l));\n    assert(search((List[Long](8l.toLong,\
  \ 8l.toLong, 10l.toLong, 6l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 8l.toLong,\
  \ 2l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 4l.toLong, 6l.toLong, 10l.toLong,\
  \ 4l.toLong, 2l.toLong, 1l.toLong, 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
  \ 5l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong, 10l.toLong, 4l.toLong,\
  \ 8l.toLong, 2l.toLong, 10l.toLong, 5l.toLong, 1l.toLong, 2l.toLong, 9l.toLong,\
  \ 5l.toLong, 5l.toLong, 6l.toLong, 3l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 10l.toLong)))\
  \ == (2l));\n    assert(search((List[Long](1l.toLong, 6l.toLong, 10l.toLong, 1l.toLong,\
  \ 6l.toLong, 9l.toLong, 10l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 7l.toLong,\
  \ 3l.toLong))) == (1l));\n    assert(search((List[Long](9l.toLong, 2l.toLong, 4l.toLong,\
  \ 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 2l.toLong, 5l.toLong, 7l.toLong, 7l.toLong,\
  \ 7l.toLong, 3l.toLong, 10l.toLong, 1l.toLong, 5l.toLong, 4l.toLong, 2l.toLong,\
  \ 8l.toLong, 4l.toLong, 1l.toLong, 9l.toLong, 10l.toLong, 7l.toLong, 10l.toLong,\
  \ 2l.toLong, 8l.toLong, 10l.toLong, 9l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong,\
  \ 6l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 6l.toLong, 4l.toLong,\
  \ 10l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 7l.toLong, 8l.toLong, 8l.toLong,\
  \ 3l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 2l.toLong, 10l.toLong, 7l.toLong)))\
  \ == (4l));\n    assert(search((List[Long](9l.toLong, 8l.toLong, 6l.toLong, 10l.toLong,\
  \ 2l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 7l.toLong, 8l.toLong, 10l.toLong,\
  \ 3l.toLong, 8l.toLong, 2l.toLong, 6l.toLong, 2l.toLong, 3l.toLong, 1l.toLong)))\
  \ == (2l));\n    assert(search((List[Long](5l.toLong, 5l.toLong, 3l.toLong, 9l.toLong,\
  \ 5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 5l.toLong, 6l.toLong, 10l.toLong,\
  \ 10l.toLong, 6l.toLong, 8l.toLong, 4l.toLong, 10l.toLong, 7l.toLong, 7l.toLong,\
  \ 10l.toLong, 8l.toLong))) == (-1l));\n    assert(search((List[Long](10l.toLong)))\
  \ == (-1l));\n    assert(search((List[Long](9l.toLong, 7l.toLong, 7l.toLong, 2l.toLong,\
  \ 4l.toLong, 7l.toLong, 2l.toLong, 10l.toLong, 9l.toLong, 7l.toLong, 5l.toLong,\
  \ 7l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](5l.toLong, 4l.toLong,\
  \ 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 3l.toLong, 6l.toLong,\
  \ 1l.toLong, 8l.toLong))) == (1l));\n    assert(search((List[Long](7l.toLong, 9l.toLong,\
  \ 9l.toLong, 9l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 1l.toLong,\
  \ 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 7l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 6l.toLong, 7l.toLong, 7l.toLong, 6l.toLong))) == (1l));\n    assert(search((List[Long](3l.toLong,\
  \ 10l.toLong, 10l.toLong, 9l.toLong, 2l.toLong))) == (-1l));\n    }\n\n}\n"
completions: ["        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n\
    \        val maxFreq = freq.maxBy(_._2)._2\n        if(maxFreq >= max) max else\
    \ -1", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += (x -> freq.getOrElse(x, 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max >= 0l) {\n            return max\n        }\n        return -1l",
  "        val freq = mutable.HashMap.empty[Long, Int]\n        val max = -1\n   \
    \     lst.foreach{ x =>\n            freq += x -> freq.getOrElse(x, 0) + 1\n \
    \           if (freq.getOrElse(x, 0) > max) {\n                max = freq.getOrElse(x,\
    \ 0)\n            }\n        }\n        if (max > 0) max else -1", "        val\
    \ freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val max = freq.maxBy(_._2)._1\n        val freqMax = freq.filter(_._2\
    \ == max).length\n        if (max > 0 && freqMax >= freq.getOrElse(max, 0))\n\
    \            max\n        else\n            -1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        for(i <- 0 until lst.size) {\n            freq += (lst.apply(i)\
    \ -> freq.getOrElse(lst.apply(i), 0) + 1)\n        }\n        val maxFreq = freq.maxBy(_._2)\n\
    \        if(maxFreq._2 >= freq.size)\n            -1\n        else\n         \
    \   maxFreq._1", "        val freq = mutable.HashMap.empty[Long, Int]\n      \
    \  for (i <- 0 until lst.size) {\n            freq += (lst.apply(i) -> 1)\n  \
    \      }\n        val max = freq.maxBy(_._2)\n        if (max != 0) {\n      \
    \      max._1\n        } else {\n            -1\n        }", "        var max\
    \ = 0\n        var maxFreq = 0\n        var maxIndex = 0\n        for (i <- 0\
    \ until lst.size) {\n            val freq = lst.count(_ == lst(i))\n         \
    \   if (freq > maxFreq) {\n                max = lst(i)\n                maxFreq\
    \ = freq\n                maxIndex = i\n            } else if (freq == maxFreq)\
    \ {\n                if (lst(i) > max) {\n                    max = lst(i)\n \
    \                   maxFreq = freq\n                    maxIndex = i\n       \
    \         }\n            }\n        }\n        if (maxFreq == 0) -1\n        else\
    \ max", "        var max = 0\n        var maxFreq = 0\n        var maxIndex =\
    \ 0\n        for (i <- 0 until lst.size) {\n            val freq = lst(i)\n  \
    \          if (freq > maxFreq) {\n                max = lst(i)\n             \
    \   maxFreq = freq\n                maxIndex = i\n            } else if (freq\
    \ == maxFreq) {\n                if (lst(i) > max) {\n                    max\
    \ = lst(i)\n                    maxIndex = i\n                }\n            }\n\
    \        }\n        if (maxFreq == 0) -1\n        else max", "        val freq\
    \ = mutable.Map[Long, Int]()\n        val maxFreq = mutable.Map[Long, Long]()\n\
    \        for(i <- 0 until lst.size) {\n            freq += (lst(i) -> 1)\n   \
    \         if(freq(lst(i)) == 0) {\n                maxFreq += (lst(i) -> -1)\n\
    \            } else {\n                maxFreq += (lst(i) -> freq(lst(i)))\n \
    \           }\n        }\n        val maxKey = maxFreq.keys.max\n        if(maxFreq(maxKey)\
    \ == 0) {\n            return -1\n        } else {\n            return maxKey\n\
    \        }", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += (x -> freq.getOrElse(x, 0) + 1l))\n        val max = freq.maxBy(_._2)\n\
    \        max match {\n            case (k, v) => k\n            case _ => -1\n\
    \        }", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1l)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n        val max\
    \ = freq.maxBy(_._2)\n        max match {\n            case Some((x, freq)) =>\
    \ if (freq >= freq.getOrElse(x, 0l)) x else -1l\n            case None => -1l\n\
    \        }", "        var max = 0\n        var freq = 0\n        var maxFreq =\
    \ -1\n        lst.foreach{ x =>\n            freq = freq + 1\n            if (freq\
    \ > maxFreq) {\n                max = x\n                maxFreq = freq\n    \
    \        }\n        }\n        if (maxFreq == -1) -1\n        else max", "   \
    \     val freq = mutable.HashMap[Long, Int]()\n        val res = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until lst.size) {\n            val v = lst(i)\n         \
    \   freq += (v -> freq(v) + 1)\n        }\n        for (i <- 0 until freq.size)\
    \ {\n            if (freq(i) >= freq(lst(i))) {\n                res.add(freq(i))\n\
    \            }\n        }\n        if (res.isEmpty) {\n            -1\n      \
    \  } else {\n            res.max\n        }", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n   \
    \     val maxFreq = freq.maxBy(_._2)._1\n        val maxFreqValue = freq.maxBy(_._2)._2\n\
    \        if(maxFreqValue == 0l) -1\n        else maxFreqValue", "        val freq\
    \ = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        lst.maxBy(x => freq.getOrElse(x, 0l))", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val res = mutable.HashMap.empty[Long, Long]\n        lst.foreach{\
    \ x =>\n            freq += x -> freq.getOrElse(x, 0) + 1\n        }\n       \
    \ lst.foreach{ x =>\n            if (freq.getOrElse(x, 0) > 0) {\n           \
    \     res.put(x, freq.getOrElse(x, 0))\n            }\n        }\n        res.values.max",
  "        val freq = mutable.HashMap[Long, Int]()\n        val max = -1\n       \
    \ lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1l)\n        lst.foreach(x\
    \ => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x, 0))\n        max",
  "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x\
    \ -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n        val\
    \ maxFreq = freq.maxBy(_._2)._2\n        if (maxFreq >= max) max else -1", " \
    \       val freq = mutable.HashMap.empty[Long, Int]\n        for (i <- 0 until\
    \ lst.size) {\n            freq += (lst(i) -> freq(lst(i))+1)\n        }\n   \
    \     val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "    \
    \    var max = 0\n        var maxCount = 0\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i) > 0) {\n                val count = lst.count(_ ==\
    \ lst(i))\n                if(count > maxCount) {\n                    max = lst(i)\n\
    \                    maxCount = count\n                }\n            }\n    \
    \    }\n        if(maxCount == 0) {\n            return -1\n        }\n      \
    \  return max", "        val freq = mutable.HashMap[Long, Int]()\n        for\
    \ (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n        }\n\
    \        val max = freq.maxBy(_._2)._1\n        if (max > 0) {\n            return\
    \ max\n        }\n        return -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n        val max\
    \ = freq.maxBy(_._2)._1\n        val freqMax = freq.filter(_._2 == max).length\n\
    \        if (max > 0 && freqMax >= freq.getOrElse(max, 0l)) {\n            max\n\
    \        } else {\n            -1\n        }", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0)\
    \ + 1\n        }\n        val max = freq.maxBy(_._2)\n        if (max._2 >= freq.size)\n\
    \            -1\n        else\n            max._1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n     \
    \   val max = freq.maxBy(_._2)._1\n        val freqMax = freq.filter(_._2 == max).length\n\
    \        if (max > 0 && freqMax >= freq.getOrElse(max, 0l)) {\n            return\
    \ max\n        } else {\n            return -1\n        }", "        var max =\
    \ 0\n        var maxCount = 0\n        var maxFreq = 0\n        var maxIndex =\
    \ 0\n        for (i <- 0 until lst.size) {\n            if (lst(i) > 0) {\n  \
    \              if (lst(i) == max) {\n                    maxCount += 1\n     \
    \               if (maxCount > maxFreq) {\n                        maxFreq = maxCount\n\
    \                        maxIndex = i\n                    }\n               \
    \ }\n                else {\n                    maxCount = 1\n              \
    \      max = lst(i)\n                    maxFreq = 1\n                    maxIndex\
    \ = i\n                }\n            }\n        }\n        if (maxCount == 0)\
    \ {\n            return -1\n        }\n        return max", "        var max =\
    \ 0\n        var maxFreq = -1\n        var maxIndex = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val freq = lst(i).toLong\n            if(freq > maxFreq)\
    \ {\n                max = lst(i)\n                maxFreq = freq\n          \
    \      maxIndex = i\n            }\n        }\n        if(maxFreq == -1) return\
    \ -1\n        lst(maxIndex)", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n   \
    \     val max = freq.maxBy(_._2)._1\n        val maxFreq = freq.filter(x => x._2\
    \ == max).length\n        if (maxFreq >= freq.filter(x => x._2 == max).length)\
    \ max else -1", "        val freq = mutable.HashMap[Long, Int]()\n        val\
    \ max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n\
    \        val maxFreq = freq.maxBy(_._2)\n        if (maxFreq >= 0) maxFreq else\
    \ -1", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n  \
    \      val maxFreq = freq.maxBy(_._2)._2\n        val maxFreqValue = freq.maxBy(_._1)._1\n\
    \        if(maxFreqValue >= maxFreq) maxFreqValue else -1", "        var max =\
    \ 0\n        var maxFreq = 0\n        var maxIndex = 0\n        for (i <- 0 until\
    \ lst.size) {\n            if (lst(i) > 0) {\n                val freq = lst.count(_\
    \ == lst(i))\n                if (freq > maxFreq) {\n                    max =\
    \ lst(i)\n                    maxFreq = freq\n                    maxIndex = i\n\
    \                }\n            }\n        }\n        if (maxIndex == lst.size)\
    \ {\n            -1\n        } else {\n            max\n        }", "        val\
    \ freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n\
    \        max match {\n            case x if freq.getOrElse(x, 0l) >= x => x\n\
    \            case _ => -1\n        }", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        for(i <- lst) {\n            freq(i) = freq.getOrElse(i, 0)\
    \ + 1\n        }\n        val max = freq.maxBy(_._2)._1\n        if(max > 0) max\
    \ else -1", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        val maxFreq = freq.maxBy(_._2)._2\n\
    \        val maxFreqValue = freq.maxBy(_._2)._1\n        if (maxFreqValue >= 0l)\
    \ {\n            val maxFreqValue = freq.maxBy(_._2)._1\n            if (maxFreqValue\
    \ >= 0l) {\n                val maxFreqValue = freq.maxBy(_._2)._1\n         \
    \       if (maxFreqValue >= 0l) {\n                    val maxFreqValue = freq.maxBy(_._2)._1\n\
    \                    if (maxFreqValue >= 0l) {\n                        val maxFreqValue\
    \ = freq.maxBy(_._2)._1\n                        if (maxFreqValue >= 0l) {\n \
    \                           val maxFreqValue = freq.maxBy(_._2)._1\n         \
    \                   if (maxFreqValue >= 0l) {\n                              \
    \  val maxFreqValue = freq.maxBy(_._2)._1\n                                if\
    \ (maxFreqValue >= 0l) {\n                                    val maxFreqValue\
    \ = freq.maxBy(_._2)._1\n                                    if (maxFreqValue\
    \ >= 0l) {\n                                        val maxFreqValue = freq.maxBy(_._2)._1\n\
    \                                        if (maxFreqValue >= 0l) {\n         \
    \                                   val maxFreqValue = freq.maxBy(_._2)._1\n \
    \                                           if (maxFreqValue >= 0l) {\n      \
    \                                          val maxFreqValue = freq.maxBy(_._2)._1\n\
    \                                                if (maxFreqValue >= 0l) {\n \
    \                                                   val maxFreqValue = freq.maxBy(_._2)._1\n\
    \                                                    if (maxFreqValue >= 0l) {\n\
    \                                                        val maxFreqValue = freq.maxBy(_._2)._1\n\
    \                                                        if (maxFreqValue >= 0l)\
    \ {\n                                                            val maxFreqValue\
    \ = freq.maxBy(_._2)._1\n                                                    \
    \        if (maxFreqValue >= 0l) {\n                                         \
    \                       val maxFreqValue = freq.maxBy(_._2)._1\n             \
    \                                                   if (maxFreqValue >= 0l) {\n\
    \                                                                    val maxFreqValue\
    \ = freq.maxBy(_._2)._1\n                                                    \
    \                if (maxFreqValue >= 0l) {\n                                 \
    \                                       val maxFreqValue = freq.maxBy(_._2)._1\n\
    \                                                                        if (maxFreqValue\
    \ >= 0l) {\n                                                                 \
    \           val maxFreqValue = freq.maxBy(_._2)._1\n                         \
    \                                                   if (maxFreqValue >= 0l) {\n\
    \                                                                            \
    \    val maxFreqValue = freq.maxBy(_._2)._1\n", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n     \
    \   val max = freq.maxBy(_._2)\n        if (max._2 >= freq.filter(x => x._2 >=\
    \ max._2).length) max._1 else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n    \
    \    val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "     \
    \   val freq = mutable.Map[Long, Int]()\n        val res = mutable.Map[Long, Long]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n        lst.foreach(x\
    \ => res += x -> freq.getOrElse(x, 0l))\n        res.maxBy(_._2)._1", "      \
    \  val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq += (x\
    \ -> freq.getOrElse(x, 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n    \
    \    if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 0 until lst.size) {\n            freq += (lst(i) ->\
    \ 1)\n        }\n        val max = freq.maxBy(_._2)._1\n        val res = freq.filter(_._2\
    \ >= max).maxBy(_._1)._1\n        if (res == -1L) -1L\n        else res", "  \
    \      val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq\
    \ += (x -> freq.getOrElse(x, 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n\
    \        val maxFreq = freq.maxBy(_._2)._2\n        if (maxFreq >= max) max else\
    \ -1", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x =>\
    \ freq += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1l)\n \
    \       val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "  \
    \      val freq = mutable.HashMap.empty[Long, Int]\n        val maxFreq = mutable.Long.MinValue\n\
    \        for(i <- 0 until lst.size) {\n            freq += lst(i) -> freq(i) +\
    \ 1\n            if(freq(i) > maxFreq) {\n                maxFreq = freq(i)\n\
    \            }\n        }\n        if(maxFreq == Long.MinValue) -1\n        else\
    \ maxFreq", "        var max = 0\n        var maxCount = 0\n        var maxFreq\
    \ = 0\n        var maxFreqCount = 0\n        var maxFreqFreq = 0\n        var\
    \ maxFreqFreqCount = 0\n        var maxFreqFreqFreq = 0\n        var maxFreqFreqFreqCount\
    \ = 0\n        var maxFreqFreqFreqFreq = 0\n        var maxFreqFreqFreqFreqCount\
    \ = 0\n        var maxFreqFreqFreqFreqFreq = 0\n        var maxFreqFreqFreqFreqFreqCount\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreq = 0\n        var maxFreqFreqFreqFreqFreqFreqCount\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreq = 0\n        var maxFreqFreqFreqFreqFreqFreqCount\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreq = 0\n        var maxFreqFreqFreqFreqFreqFreqCount\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreq = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqCount\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreq = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqCount\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreq = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqCount\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreq = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqCount\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreq = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqCount\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreq = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqCount\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreq = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqCount\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreq = 0\n        var maxFreq",
  "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq\
    \ += (x -> freq.getOrElse(x, 0) + 1))\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max >= 0) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq(i) = freq.getOrElse(i, 0)\
    \ + 1\n        }\n        val max = freq.maxBy(_._2)._1\n        if (max > 0)\
    \ {\n            return max\n        }\n        return -1", "        val freq\
    \ = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x,\
    \ 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max >= freq.maxBy(_._1)._1) -1\n        else max", "        val freq\
    \ = mutable.HashMap.empty[Long, Int]\n        for (i <- 0 until lst.size) {\n\
    \            freq += (lst(i) -> freq.getOrElse(lst(i), 0) + 1)\n        }\n  \
    \      val max = freq.maxBy(_._2)._1\n        if (max >= 0) max else -1", "  \
    \      val freq = mutable.HashMap.empty[Long, Int]\n        val max = -1\n   \
    \     lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val maxFreq\
    \ = freq.maxBy(_._2)\n        if (maxFreq >= 0) maxFreq else -1", "        val\
    \ freq = mutable.Map[Long, Int]()\n        val maxFreq = mutable.Map[Long, Int]()\n\
    \        for (i <- 0 until lst.size) {\n            freq += (lst(i) -> freq.getOrElse(lst(i),\
    \ 0) + 1l)\n            maxFreq += (lst(i) -> freq.getOrElse(lst(i), 0) + 1l)\n\
    \        }\n        val maxFreqVal = maxFreq.values.max\n        if (maxFreqVal\
    \ > 0) maxFreqVal.max\n        else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n       \
    \ val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val\
    \ freq = mutable.HashMap[Long, Int]()\n        for (i <- 0 until lst.size) {\n\
    \            freq += (lst(i) -> freq(lst(i)))\n        }\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) {\n            max\n        } else {\n            -1\n \
    \       }", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        for(i <- lst) {\n            freq(i) += 1\n        }\n     \
    \   val maxFreq = freq.maxBy(_._1)._1\n        val maxFreqValue = freq.maxBy(_._1)._2\n\
    \        if(maxFreqValue == 0) -1\n        else maxFreqValue", "        val freq\
    \ = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x,\
    \ 0) + 1l))\n        val maxFreq = freq.maxBy(_._2)\n        if (maxFreq._2 >=\
    \ freq.head._2) -1\n        else maxFreq._1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n     \
    \   val max = freq.maxBy(_._2)\n        max match {\n            case Some((x,\
    \ freq)) if freq >= lst.count(_ == x) => (x).toLong\n            case _ => -1l\n\
    \        }", "        val freq = mutable.Map[Long, Int]()\n        for (i <- lst)\
    \ {\n            freq += i -> freq.getOrElse(i, 0) + 1\n        }\n        val\
    \ max = freq.maxBy(_._2)\n        if (max._2 >= freq.size)\n            max._1\n\
    \        else\n            -1", "        val freq = mutable.HashMap[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n        val max\
    \ = freq.maxBy(_._2)\n        if (max != -1l) {\n            freq.filter(_._2\
    \ > max._2).maxBy(_._1)._1\n        } else {\n            -1l\n        }", " \
    \       val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l))\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n     \
    \   val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n   \
    \     if (max > 0) max else -1", "        var max = 0\n        var maxCount =\
    \ 0\n        var maxFreq = 0\n        var maxIndex = 0\n        var i = 0\n  \
    \      while(i < lst.size) {\n            val freq = lst(i)\n            val index\
    \ = lst.indexOf(i)\n            if(index > -1) {\n                val newFreq\
    \ = freq + 1\n                if(newFreq > maxFreq) {\n                    max\
    \ = i\n                    maxCount = newFreq\n                    maxFreq = newFreq\n\
    \                    maxIndex = index\n                }\n            }\n    \
    \        i += 1\n        }\n        if(maxCount == 0) {\n            return -1\n\
    \        }\n        val maxFreqIndex = lst.indexOf(max)\n        if(maxFreqIndex\
    \ > -1) {\n            val newFreq = maxFreq + 1\n            if(newFreq > maxFreq)\
    \ {\n                max = maxIndex\n                maxCount = newFreq\n    \
    \            maxFreq = newFreq\n            }\n        }\n        return max",
  "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n    \
    \    if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach{x => freq += x -> freq.getOrElse(x, 0)}\n        val maxFreq\
    \ = freq.maxBy(_._2)\n        if (maxFreq._2 >= freq.size)\n            -1\n \
    \       else\n            maxFreq._1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        val max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1l)\n        lst.foreach(x => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x,\
    \ 0))\n        max", "        val freq = mutable.HashMap.empty[Long, Int]\n  \
    \      val max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0)\
    \ + 1l)\n        val maxFreq = freq.maxBy(_._2)._2\n        if(maxFreq >= freq.maxBy(_._1)._2)\
    \ max\n        else -1", "        var max = 0\n        var maxCount = 0\n    \
    \    var maxFreq = 0\n        var maxIndex = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val count = lst.count(_ == i)\n            if(count > maxCount)\
    \ {\n                max = i\n                maxCount = count\n             \
    \   maxFreq = lst.count(_ == i)\n                maxIndex = i\n            }\n\
    \        }\n        if(maxCount == 0) {\n            return -1\n        }\n  \
    \      if(maxFreq == maxCount) {\n            return max\n        }\n        return\
    \ -1", "        val freq = mutable.Map[Long, Int]()\n        for(i <- 0 until\
    \ lst.size) {\n            freq += (lst(i) -> freq(lst(i)) +1)\n        }\n  \
    \      val maxFreq = freq.maxBy(_._2)\n        if(maxFreq._2 > 0) maxFreq._1 else\
    \ -1", "        val freq = mutable.HashMap.empty[Long, Int]\n        val max =\
    \ -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1l)\n     \
    \   lst.foreach(x => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x, 0))\n\
    \        max", "        val freq = mutable.HashMap.empty[Long, Int]\n        for\
    \ (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n        }\n\
    \        val max = freq.maxBy(_._2)\n        if (max._2 >= 0) max._1 else -1",
  "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += (x\
    \ -> freq.getOrElse(x, 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n    \
    \    if (max >= 0l) {\n            freq.filter(_._2 >= max).maxBy(_._1)._1\n \
    \       } else {\n            -1l\n        }", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        for(i <- 0 until lst.size) {\n            freq += (lst(i) ->\
    \ freq(lst(i))+1)\n        }\n        val max = freq.maxBy(_._2)._1\n        if(max\
    \ > 0) max else -1", "        var max = 0\n        var maxFreq = 0\n        var\
    \ i = 0\n        while(i < lst.length) {\n            if(lst(i) > 0) {\n     \
    \           val freq = lst(i).toLong\n                if(freq > maxFreq) {\n \
    \                   max = lst(i)\n                    maxFreq = freq\n       \
    \         }\n            }\n            i += 1\n        }\n        if(maxFreq\
    \ == 0) -1\n        else max", "        var max = 0\n        var maxCount = 0\n\
    \        var maxFreq = 0\n        for(i <- 0 until lst.size) {\n            val\
    \ freq = lst(i).toLong\n            val count = freq\n            if(freq > maxFreq)\
    \ {\n                max = lst(i)\n                maxCount = count\n        \
    \        maxFreq = freq\n            }\n        }\n        if(maxCount > maxFreq)\
    \ {\n            return -1\n        }\n        return max", "        val freq\
    \ = mutable.HashMap.empty[Long, Int]\n        for (i <- 0 until lst.size) {\n\
    \            freq += (lst(i) -> freq(lst(i)))\n        }\n        freq.maxBy(_._2)._1",
  "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n    \
    \    val maxFreq = freq.maxBy(_._2)._2\n        if (maxFreq >= max) max else -1",
  "        val freq = mutable.Map[Long, Int]()\n        for (i <- lst) {\n       \
    \     freq(i) = freq(i) + 1\n        }\n        val max = freq.maxBy(_._2)\n \
    \       if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach{x => freq += x -> freq.getOrElse(x, 0) + 1} \n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val freq\
    \ = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n   \
    \     lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1l))\n        val\
    \ maxFreq = freq.maxBy(_._2)._2\n        val maxFreqValue = freq.maxBy(_._1)._1\n\
    \        if (maxFreqValue >= maxFreq) {\n            return maxFreqValue\n   \
    \     }\n        return -1", "        var max = 0\n        var maxFreq = -1\n\
    \        var i = 0\n        while (i < lst.size) {\n            if (lst(i) > 0)\
    \ {\n                if (lst(i) == max) {\n                    maxFreq = lst(i)\
    \ + 1\n                }\n                else {\n                    if (lst(i)\
    \ > max) {\n                        max = lst(i)\n                        maxFreq\
    \ = lst(i) + 1\n                    }\n                }\n            }\n    \
    \        i += 1\n        }\n        if (maxFreq == -1) {\n            return -1\n\
    \        }\n        else {\n            return max\n        }", "        val freq\
    \ = mutable.HashMap.empty[Long, Int]\n        for (i <- 0 until lst.size) {\n\
    \            freq += (lst(i) -> freq.getOrElse(lst(i), 0) + 1)\n        }\n  \
    \      val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "   \
    \     val freq = mutable.Map[Long, Int]()\n        for (i <- lst) {\n        \
    \    freq += i -> freq.getOrElse(i, 0) + 1\n        }\n        val max = freq.maxBy(_._2)\n\
    \        if (max._2 >= freq.size)\n            -1\n        else\n            max._1",
  "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x\
    \ -> freq.getOrElse(x, 0l))\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 2)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 3)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 4)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 5)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 6)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 7)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 8)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 9)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 10)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 11)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 12)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 13)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 14)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 15)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 16)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 17)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 18)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 19)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 20)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 21)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 22)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 23)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + ", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        for(i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n        }\n        val max = freq.maxBy(_._2)._1\n        if(max > 0)\
    \ max else -1", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += (x -> freq.getOrElse(x, 0) + 1l))\n        lst.foreach(x => freq\
    \ += (x -> freq.getOrElse(x, 0) - 1l))\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0) > 0) x else -1l)", "        val freq = mutable.HashMap[Long, Int]()\n   \
    \     lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1l)\n        val max\
    \ = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val freq\
    \ = mutable.HashMap[Long, Int]()\n        val max = -1L\n        lst.foreach{\
    \ x =>\n            freq += x -> freq.getOrElse(x, 0) + 1\n            if (freq.getOrElse(x,\
    \ 0) > max) max = freq.getOrElse(x, 0)\n        }\n        if (max > 0) max else\
    \ -1L", "        val freq = mutable.Map[Long, Int]()\n        val max = -1\n \
    \       lst.foreach{x => freq += x -> freq.getOrElse(x, 0) + 1} \n        val\
    \ maxFreq = freq.maxBy(_._2)\n        if(maxFreq >= freq.maxBy(_._1)._2){\n  \
    \          return maxFreq\n        }\n        return -1", "        val freq =\
    \ mutable.HashMap.empty[Long, Int]\n        val max = -1\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val maxFreq = freq.filter(_._2\
    \ >= max).maxBy(_._2)._2\n        val maxFreqIndex = freq.filter(_._2 >= max).maxBy(_._2)._1\n\
    \        max match {\n            case -1 => -1\n            case x if freq.getOrElse(x,\
    \ 0) == maxFreq => x\n            case x if freq.getOrElse(x, 0) > maxFreq =>\
    \ -1\n            case x if freq.getOrElse(x, 0) > maxFreqIndex => x\n       \
    \ }", "        val freq = mutable.Map[Long, Int]()\n        for (i <- 0 until\
    \ lst.size) {\n            freq += (lst(i) -> freq.getOrElse(lst(i), 0) + 1)\n\
    \        }\n        freq.maxBy(_._2)._1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        val max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n   \
    \     lst.foreach(x => if (freq.getOrElse(x, 0l) >= max) max = freq.getOrElse(x,\
    \ 0l))\n        max", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += (x -> freq.getOrElse(x, 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n    \
    \    val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "     \
    \   val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0) + 1l)\n        val max = freq.maxBy(_._2)._1\n   \
    \     val maxFreq = freq.maxBy(_._2)._2\n        if (maxFreq >= max) max else\
    \ -1", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += (x -> freq.getOrElse(x, 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 0 until lst.size) {\n            freq += lst(i) -> freq(lst(i))+1\n\
    \        }\n        val max = freq.maxBy(_._2)._1\n        if (max >= freq.maxBy(_._1)._1)\
    \ -1\n        else max", "        var max = 0\n        var maxFreq = 0\n     \
    \   var maxIndex = 0\n        for (i <- 0 until lst.size) {\n            val freq\
    \ = lst(i).toLong\n            if (freq > maxFreq) {\n                max = lst(i)\n\
    \                maxFreq = freq\n                maxIndex = i\n            }\n\
    \        }\n        if (maxFreq == 0) -1\n        else max", "        val freq\
    \ = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        val max = freq.maxBy(_._2)\n        if (max._2 >= freq.keys.toSet.size)\n\
    \            -1\n        else\n            max._1", "        var max = 0\n   \
    \     var maxFreq = 0\n        var maxIndex = 0\n        for (i <- 0 until lst.size)\
    \ {\n            if (lst(i) > 0) {\n                val freq = lst(i).toLong\n\
    \                if (freq > maxFreq) {\n                    max = lst(i)\n   \
    \                 maxFreq = freq\n                    maxIndex = i\n         \
    \       }\n            }\n        }\n        if (maxFreq > 0) {\n            return\
    \ max\n        } else {\n            return -1\n        }", "        val freq\
    \ = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        val freq = mutable.HashMap.empty[Long, Int]\n        for(i <-\
    \ 0 until lst.size) {\n            freq += (lst(i) -> 1)\n        }\n        val\
    \ max = freq.maxBy(_._2)._1\n        if(max >= 0) max else -1", "        val freq\
    \ = mutable.Map[Long, Int]()\n        for (i <- lst) {\n            freq += i\
    \ -> freq.getOrElse(i, 0) + 1\n        }\n        val max = freq.maxBy(_._2)\n\
    \        if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        for (i <- lst) {\n            freq(i) = freq(i) + 1\n        }\n    \
    \    val max = freq.maxBy(_._1)._1\n        if (max > 0) {\n            freq.filter(_._2\
    \ >= max).maxBy(_._1)._1\n        } else {\n            -1\n        }", "    \
    \    val freq = mutable.Map[Long, Int]()\n        for (i <- 0 until lst.size)\
    \ {\n            freq += (lst(i) -> freq(lst(i)) +1)\n        }\n        val max\
    \ = freq.maxBy(_._2)._1\n        if (max >= 0) {\n            return max\n   \
    \     } else {\n            return -1\n        }", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1l))\n\
    \        val max = freq.maxBy(_._2)._1\n        if (max >= freq.maxBy(_._1)._1)\
    \ -1l else max", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        lst.foreach(x => freq += x ->\
    \ freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n", "      \
    \  val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += (x ->\
    \ freq.getOrElse(x, 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n       \
    \ if (max >= freq.maxBy(_._1)._1) -1l else max", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 0 until lst.size) {\n            freq += (lst.apply(i)\
    \ -> 1)\n        }\n        val max = freq.maxBy(_._2)\n        if (max != 0)\
    \ {\n            max._1\n        } else {\n            -1\n        }", "     \
    \   val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x ->\
    \ freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)\n        if (max._2\
    \ >= freq.size)\n            -1\n        else\n            max._1", "        val\
    \ freq = mutable.HashMap[Long, Int]()\n        for (i <- lst) {\n            freq(i)\
    \ += 1\n        }\n        val max = freq.maxBy(_._2)._1\n        if (max > 0)\
    \ {\n            return max\n        }\n        return -1", "        var max =\
    \ 0\n        var maxFreq = -1\n        var i = 0\n        while (i < lst.length)\
    \ {\n            if (lst(i) > 0) {\n                val freq = lst(i).toLong\n\
    \                if (freq > maxFreq) {\n                    max = lst(i)\n   \
    \                 maxFreq = freq\n                }\n            }\n         \
    \   i += 1\n        }\n        if (maxFreq == -1) {\n            return -1\n \
    \       }\n        return max", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n        val max\
    \ = freq.maxBy(_._2)\n        val max = freq.maxBy(_._2)\n        if (max != -1l)\
    \ {\n            freq.filter(_._2 > max).maxBy(_._1)._1\n        } else {\n  \
    \          -1l\n        }", "        var max = 0\n        var maxCount = 0\n \
    \       var maxFreq = 0\n        for(i <- 0 until lst.size) {\n            val\
    \ freq = lst(i).toLong\n            val count = freq.toInt\n            if(freq\
    \ > maxFreq) {\n                max = lst(i)\n                maxCount = count\n\
    \                maxFreq = freq\n            }\n        }\n        if(maxCount\
    \ == 0) {\n            return -1\n        }\n        return max", "        val\
    \ freq = mutable.Map[Long, Int]()\n        val max = -1\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1l)\n        val maxFreq = freq.maxBy(_._2)\n\
    \        if (maxFreq >= freq.head._2) max\n        else -1", "        val freq\
    \ = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        val max = freq.maxBy(_._2)._1\n        val maxFreq = freq.maxBy(_._2)._2\n\
    \        if (maxFreq >= max) max else -1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n     \
    \   lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n", "        val freq = mutable.HashMap.empty[Long, Int]\n        val\
    \ max = -1\n        lst.foreach{x => freq += x -> freq.getOrElse(x, 0)}\n    \
    \    lst.foreach{x => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x,\
    \ 0)}\n        max", "        val freq = mutable.HashMap.empty[Long, Int]\n  \
    \      lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1l)\n        val maxFreq\
    \ = freq.maxBy(_._2)._2\n        val maxFreqValue = freq.maxBy(_._1)._1\n    \
    \    if(maxFreqValue == 0) -1\n        else maxFreqValue + 1", "        val freq\
    \ = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x,\
    \ 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        var max = 0\n        var maxCount = 0\n        var maxFreq = 0\n\
    \        var maxVal = -1L\n        for(i <- 0 until lst.size) {\n            val\
    \ freq = lst(i).toLong\n            val val = lst(i).toLong\n            if(val\
    \ > maxVal) {\n                maxVal = val\n                maxCount = freq\n\
    \                maxFreq = freq\n                max = val\n            }\n  \
    \          else if(val == maxVal && freq > maxFreq) {\n                maxFreq\
    \ = freq\n                max = val\n            }\n        }\n        if(maxCount\
    \ == 0) {\n            return -1L\n        }\n        return max", "        val\
    \ freq = mutable.HashMap.empty[Long, Int]\n        val max = -1\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1l)\n        val res = freq.filter(_._2\
    \ >= freq.map(_._1).sum).maxBy(_._1)._1\n        if(res == -1l) -1\n        else\
    \ res", "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1l)\n        val max = freq.maxBy(_._2)\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        val max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        lst.foreach(x => if (freq.getOrElse(x, 0l) >= freq.getOrElse(x,\
    \ 1l)) max = x)\n        max", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1l)\n   \
    \     val max = freq.maxBy(_._2)\n        if (max._2 >= freq.size)\n         \
    \   -1\n        else\n            max._1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n    \
    \    val maxFreq = freq.maxBy(_._2)._2\n        val maxFreqKey = freq.maxBy(_._1)._1\n\
    \        if (maxFreqKey > 0) maxFreqKey else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        lst.foreach(x => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x,\
    \ 0))\n        max", "        val freq = mutable.HashMap.empty[Long, Int]\n  \
    \      for (i <- 0 until lst.size) {\n            freq += (lst(i) -> freq(lst(i))+1)\n\
    \        }\n        val max = freq.maxBy(_._2)\n        if (max._2 >= freq(max._1))\
    \ max._1 else -1", "        val freq = mutable.Map[Long, Int]()\n        for (i\
    \ <- lst) {\n            freq += i -> freq(i) + 1\n        }\n        val max\
    \ = freq.maxBy(_._2)\n        if (max._2 >= freq(max._1)) max._1 else -1", " \
    \       val freq = mutable.HashMap.empty[Long, Int]\n        for (i <- 0 until\
    \ lst.size) {\n            freq += (lst(i) -> freq(lst(i)))\n        }\n     \
    \   val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "      \
    \  val freq = mutable.HashMap[Long, Int]()\n        for (i <- lst) {\n       \
    \     freq(i) = freq.getOrElse(i, 0) + 1\n        }\n        val max = freq.maxBy(_._2)._1\n\
    \        val maxFreq = freq.filter(x => x._2 == max).length\n        if (maxFreq\
    \ >= freq.filter(x => x._2 == max).length) max else -1", "        var max = 0\n\
    \        var maxFreq = 0\n        var maxIndex = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val freq = lst(i).toLong\n            if(freq >= maxFreq) {\n\
    \                max = lst(i)\n                maxFreq = freq\n              \
    \  maxIndex = i\n            }\n        }\n        if(maxFreq == 0) -1\n     \
    \   else max", "        var max = 0\n        var freq = 0\n        var maxFreq\
    \ = 0\n        var maxFreqIndex = 0\n        var i = 0\n        var j = 0\n  \
    \      while (i < lst.size) {\n            freq = lst(i).toLong\n            while\
    \ (j < lst.size && lst(j) < freq) {\n                j += 1\n            }\n \
    \           if (j == lst.size) {\n                max = lst(i)\n             \
    \   maxFreq = freq\n                maxFreqIndex = i\n            } else {\n \
    \               if (lst(i) > max) {\n                    max = lst(i)\n      \
    \              maxFreq = freq\n                    maxFreqIndex = i\n        \
    \        }\n                j = 0\n            }\n            i += 1\n       \
    \ }\n        if (maxFreq == 0) return -1\n        return max", "        val freq\
    \ = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n   \
    \     lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach{x => freq += (x -> freq.getOrElse(x, 0) + 1)}\n        val\
    \ max = freq.maxBy(_._2)._1\n        val maxFreq = freq.maxBy(_._2)._2\n     \
    \   if (maxFreq >= max) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val maxFreq = mutable.Long.MinValue\n        for(i <- 0 until\
    \ lst.size) {\n            freq += lst(i) -> freq.getOrElse(lst(i), 0) + 1\n \
    \           if(freq.getOrElse(lst(i), 0) > maxFreq) {\n                maxFreq\
    \ = freq.getOrElse(lst(i), 0)\n            }\n        }\n        if(maxFreq ==\
    \ Long.MinValue) -1\n        else maxFreq", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        lst.foreach(x => if (freq.getOrElse(x, 0l) >= freq.getOrElse(x,\
    \ 1l)) max = x)\n        max", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 0 until lst.size) {\n            freq += (lst(i) ->\
    \ freq(lst(i)))\n        }\n        val max = freq.maxBy(_._2)\n        if (max\
    \ > 0) max._1 else -1", "        val freq = mutable.HashMap.empty[Long, Int]\n\
    \        for (i <- lst) {\n            freq(i) = freq(i) + 1\n        }\n    \
    \    val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "     \
    \   var max = 0\n        var maxFreq = 0\n        var maxIndex = 0\n        for\
    \ (i <- 0 until lst.size) {\n            if (lst(i) > 0) {\n                val\
    \ freq = lst(i).toLong\n                if (freq > maxFreq) {\n              \
    \      max = lst(i)\n                    maxFreq = freq\n                    maxIndex\
    \ = i\n                }\n            }\n        }\n        if (maxFreq == 0)\
    \ -1\n        else max", "        val freq = mutable.HashMap[Long, Long]()\n \
    \       lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 2)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 3)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 4)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 5)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 6)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 7)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 8)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 9)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 10)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 11)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 12)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 13)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 14)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 15)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 16)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 17)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 18)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 19)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 20)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 21)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 22)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 23)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l", "  \
    \      val freq = mutable.Map[Long, Int]()\n        lst.foreach{x => freq += x\
    \ -> freq.getOrElse(x, 0)}\n        val max = freq.maxBy(_._2)\n        if (max._2\
    \ >= freq.size)\n            -1\n        else\n            max._1", "        val\
    \ freq = mutable.Map[Long, Int]()\n        for (i <- lst) {\n            freq\
    \ += i -> freq.getOrElse(i, 0) + 1\n        }\n        val maxFreq = freq.maxBy(_._2)\n\
    \        if (maxFreq >= freq.head._2) {\n            maxFreq\n        } else {\n\
    \            -1\n        }", "        val freq = mutable.Map[Long, Int]()\n  \
    \      val maxFreq = mutable.Map[Long, Long]()\n        val maxVal = mutable.Map[Long,\
    \ Long]()\n        val maxFreqVal = mutable.Map[Long, Long]()\n        val maxValVal\
    \ = mutable.Map[Long, Long]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0L) + 1)\n        lst.foreach(x => maxFreq += x -> freq.getOrElse(x, 0L).max)\n\
    \        lst.foreach(x => maxVal += x -> freq.getOrElse(x, 0L).max)\n        lst.foreach(x\
    \ => maxFreqVal += x -> freq.getOrElse(x, 0L).max)\n        lst.foreach(x => maxValVal\
    \ += x -> freq.getOrElse(x, 0L).max)\n        lst.foreach(x => maxFreqVal += x\
    \ -> freq.getOrElse(x, 0L).max)\n        lst.foreach(x => maxValVal += x -> freq.getOrElse(x,\
    \ 0L).max)\n        lst.foreach(x => maxFreqVal += x -> freq.getOrElse(x, 0L).max)\n\
    \        lst.foreach(x => maxValVal += x -> freq.getOrElse(x, 0L).max)\n     \
    \   lst.foreach(x => maxFreqVal += x -> freq.getOrElse(x, 0L).max)\n        lst.foreach(x\
    \ => maxValVal += x -> freq.getOrElse(x, 0L).max)\n        lst.foreach(x => maxFreqVal\
    \ += x -> freq.getOrElse(x, 0L).max)\n        lst.foreach(x => maxValVal += x\
    \ -> freq.getOrElse(x, 0L).max)\n        lst.foreach(x => maxFreqVal += x -> freq.getOrElse(x,\
    \ 0L).max)\n        lst.foreach(x => maxValVal += x -> freq.getOrElse(x, 0L).max)\n\
    \        lst.foreach(x => maxFreqVal += x -> freq.getOrElse(x, 0L).max)\n    \
    \    lst.foreach(x => maxValVal += x -> freq.getOrElse(x, 0L).max)\n        lst.foreach(x\
    \ => maxFreqVal += x -> freq.getOrElse(x, 0L).max)\n        lst.foreach(x => maxValVal\
    \ += x -> freq.getOrElse(x, 0L).max)\n        lst.foreach(x => maxFreqVal += x\
    \ -> freq.getOrElse", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += (x -> freq.getOrElse(x, 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val maxFreq = mutable.HashMap.empty[Long, Int]\n        for(i\
    \ <- 0 until lst.size) {\n            freq += (lst(i) -> 1)\n            if(freq(lst(i))\
    \ == 0) {\n                maxFreq += (lst(i) -> 1)\n            } else {\n  \
    \              maxFreq += (lst(i) -> freq(lst(i)))\n            }\n        }\n\
    \        if(maxFreq.size == 0) -1\n        else {\n            val maxKey = maxFreq.keys.max\n\
    \            val maxValue = maxFreq(maxKey)\n            for(i <- 0 until lst.size)\
    \ {\n                if(freq(lst(i)) == maxValue) {\n                    if(maxFreq(lst(i))\
    \ == maxValue) i\n                    else -1\n                }\n           \
    \ }\n        }", "        val freq = mutable.HashMap.empty[Long, Int]\n      \
    \  for (i <- 0 until lst.size) {\n            freq += (lst(i) -> 1)\n        }\n\
    \        val max = freq.maxBy(_._2)\n        if (max != 0) {\n            freq.filter(_._2\
    \ > 0).maxBy(_._1)._1\n        } else {\n            -1\n        }", "       \
    \ val freq = mutable.Map[Long, Int]()\n        for (i <- lst) {\n            freq\
    \ += i -> freq.getOrElse(i, 0) + 1\n        }\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1l))\n        val\
    \ max = freq.maxBy(_._2)._1\n        val maxFreq = freq.maxBy(_._2)._2\n     \
    \   if (maxFreq >= max) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val\
    \ max = freq.maxBy(_._2)._1\n        max match {\n            case x if freq.getOrElse(x,\
    \ 0) >= freq.getOrElse(max, 0) => x\n            case _ => -1\n        }", " \
    \       val freq = mutable.HashMap.empty[Long, Int]\n        val max = -1\n  \
    \      lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1l)\n        lst.foreach(x\
    \ => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x, 0))\n        max",
  "        val freq = mutable.HashMap.empty[Long, Int]\n        val max = -1\n   \
    \     lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1l)\n        lst.foreach(x\
    \ => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x, 0))\n        max",
  "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq\
    \ += (x -> freq.getOrElse(x, 0) + 1l))\n        val maxFreq = freq.maxBy(_._2)._2\n\
    \        val maxFreqIndex = freq.indexWhere(_._2 == maxFreq)\n        if (maxFreqIndex\
    \ == -1L) -1L\n        else lst(maxFreqIndex)", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        freq.foreach(x => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x,\
    \ 0))\n        max", "        val freq = mutable.Map[Long, Int]()\n        for\
    \ (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n        }\n\
    \        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", " \
    \       val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq +=\
    \ (x -> freq.getOrElse(x, 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n \
    \       if (max >= 0l) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1l))\n\
    \        val max = freq.maxBy(_._2)._1\n        if (max >= freq.maxBy(_._1)._1)\
    \ -1l else max", "        val freq = mutable.HashMap[Long, Int]()\n        val\
    \ max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1l)\n\
    \        lst.foreach(x => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x,\
    \ 0))\n        max", "        val freq = mutable.HashMap[Long, Int]()\n      \
    \  for (i <- lst) {\n            freq(i) += 1\n        }\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l))\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) - 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n   \
    \     lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        lst.foreach(x => freq += x ->\
    \ freq.getOrElse(x, 0l) - 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n   \
    \     lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) - 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l))\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n   \
    \     lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) - 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        lst.foreach(x => freq += x ->\
    \ freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) - 1)\n   \
    \     lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l))\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) - 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n   \
    \     lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + ", "        val freq\
    \ = mutable.HashMap.empty[Long, Int]\n        for(i <- 0 until lst.size) {\n \
    \           freq += (lst(i) -> freq(lst(i)))\n        }\n        val max = freq.maxBy(_._2)._1\n\
    \        if(max >= freq(max)) {\n            -1\n        } else {\n          \
    \  max\n        }", "        val freq = mutable.HashMap.empty[Long, Int]\n   \
    \     lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n        val max =\
    \ freq.maxBy(_._2)._1\n        if(max > 0) max else -1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n        }\n        val max = freq.maxBy(_._2)\n        if (max._2 >=\
    \ freq.size)\n            max._1\n        else\n            -1", "        val\
    \ freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x,\
    \ 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max >= 0l) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1l)\n        lst.foreach(x => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x,\
    \ 0))\n        max", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1l)\n        val max = freq.maxBy(_._2)\n\
    \        if (max._2 >= freq.head._2) -1\n        else max._1", "        val freq\
    \ = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1l)\n        val max = freq.maxBy(_._2)\n        if (max._2 >= freq.size)\n\
    \            -1\n        else\n            max._1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n       \
    \ lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + ", "        val freq = mutable.HashMap.empty[Long, Int]\n        for (i\
    \ <- 0 until lst.size) {\n            freq += (lst(i) -> 1)\n        }\n     \
    \   val maxFreq = freq.maxBy(_._2)._1\n        val maxFreqIndex = freq.maxBy(_._2)._2\n\
    \        if (maxFreqIndex >= lst.size) {\n            -1\n        } else {\n \
    \           lst(maxFreqIndex)\n        }", "        val freq = mutable.Map[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n        }\n        val max = freq.maxBy(_._2)\n        if (max._2 >=\
    \ freq.head._2) {\n            max._1\n        } else {\n            -1\n    \
    \    }", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach{x =>\
    \ freq += x -> freq.getOrElse(x, 0)}\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        if(max > 0) max else -1", "  \
    \      val freq = mutable.HashMap.empty[Long, Int]\n        for (i <- 0 until\
    \ lst.size) {\n            freq += (lst(i) -> freq.getOrElse(lst(i), 0) + 1)\n\
    \        }\n        val max = freq.maxBy(_._2)\n        if (max > 0) max\n   \
    \     else -1", "        val freq = mutable.HashMap.empty[Long, Int]\n       \
    \ for (i <- 0 until lst.size) {\n            freq += (lst(i) -> freq(lst(i)))\n\
    \        }\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        val freq = mutable.HashMap.empty[Long, Int]\n        val max =\
    \ -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n      \
    \  lst.foreach(x => if (freq.getOrElse(x, 0) >= max) max = x)\n        max", " \
    \       val freq = mutable.Map[Long, Int]()\n        for (i <- 0 until lst.size)\
    \ {\n            freq += (lst(i) -> freq(lst(i)) +1)\n        }\n        val max\
    \ = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val freq\
    \ = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n        val max\
    \ = freq.maxBy(_._2)._1\n        val maxFreq = freq.maxBy(_._2)._2\n        if\
    \ (maxFreq >= max) max else -1", "        var max = 0\n        var maxCount =\
    \ 0\n        var maxFreq = 0\n        var maxIndex = 0\n        var i = 0\n  \
    \      while(i < lst.size) {\n            val freq = lst(i).toLong\n         \
    \   val index = lst.indexOf(i)\n            val newMax = if (freq > maxFreq) freq\
    \ else max\n            val newMaxCount = if (freq > maxCount) freq else maxCount\n\
    \            val newMaxFreq = if (freq > maxFreq) freq else maxFreq\n        \
    \    val newMaxIndex = if (freq > maxIndex) freq else maxIndex\n            max\
    \ = newMax\n            maxCount = newMaxCount\n            maxFreq = newMaxFreq\n\
    \            maxIndex = newMaxIndex\n            i += 1\n        }\n        if\
    \ (maxCount == 0) -1\n        else max", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        val max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1l)\n        val max = freq.filter(_._2 >= freq.head._2).maxBy(_._1)._2\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1l))\n\
    \        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", " \
    \       val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x =>\
    \ freq += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n\
    \        max match {\n            case x if freq.contains(x) => x\n          \
    \  case _ => -1\n        }", "        val freq = mutable.Map[Long, Int]()\n  \
    \      for (i <- 0 until lst.size) {\n            freq += (lst(i) -> freq(lst(i)\
    \ + 1))\n        }\n        val max = freq.maxBy(_._2)._1\n        if (max > 0)\
    \ {\n            return max\n        } else {\n            return -1\n       \
    \ }", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n \
    \       val freqMax = freq.filter(_._2 == max).length\n        if (max > 0 &&\
    \ freqMax >= freq.getOrElse(max, 0))\n            max\n        else\n        \
    \    -1", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max >= 0l) {\n            return max\n        }\n        -1l", " \
    \       val freq = mutable.HashMap[Long, Int]()\n        val max = -1\n      \
    \  lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1l)\n        lst.foreach(x\
    \ => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x, 0))\n        max",
  "        val freq = mutable.Map[Long, Int]()\n        for (i <- lst) {\n       \
    \     freq += i -> (freq.getOrElse(i, 0) + 1)\n        }\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1l))\n        lst.foreach(x\
    \ => freq += (x -> freq.getOrElse(x, 0) - 1l))\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0) > 0) x else -1l)", "        val freq = mutable.HashMap.empty[Long, Int]\n\
    \        lst.foreach{x => freq += x -> freq.getOrElse(x, 0)}\n        val maxFreq\
    \ = freq.maxBy(_._2)\n        if(maxFreq._2 >= freq.size)\n            -1\n  \
    \      else\n            maxFreq._1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0)\
    \ + 1\n        }\n        val max = freq.maxBy(_._2)\n        if (max._2 >= freq.head._2)\
    \ {\n            max._1\n        } else {\n            -1\n        }", "     \
    \   val freq = mutable.Map[Long, Int]()\n        val maxFreq = mutable.Map[Long,\
    \ Int]()\n        for(i <- lst) {\n            freq(i) = freq.getOrElse(i, 0)\
    \ + 1\n            maxFreq(i) = maxFreq.getOrElse(i, 0)\n            if(maxFreq(i)\
    \ < freq(i)) {\n                maxFreq(i) = freq(i)\n            }\n        }\n\
    \        val maxKey = maxFreq.keys.max\n        if(maxFreq(maxKey) == 0) {\n \
    \           return -1\n        }\n        val maxValue = maxFreq(maxKey)\n   \
    \     val maxKeyValue = maxFreq.filter(_._2 == maxValue).keys.max\n        if(maxKeyValue\
    \ == maxKey) {\n            return maxValue\n        }\n        val maxKeyValueValue\
    \ = maxFreq.filter(_._2 == maxValue).filter(_._2 == maxKeyValue).keys.max\n  \
    \      if(maxKeyValueValue == maxKeyValue) {\n            return maxKeyValue\n\
    \        }\n        -1", "        var max = 0\n        var maxCount = 0\n    \
    \    var maxFreq = 0\n        var maxIndex = 0\n        var i = 0\n        while(i\
    \ < lst.length) {\n            val freq = lst(i).toLong\n            val index\
    \ = lst(i).toLong\n            val newMax = if (freq > maxFreq) {\n          \
    \      max = freq\n                maxCount = freq\n                maxFreq =\
    \ freq\n                maxIndex = index\n            } else if (freq == maxFreq)\
    \ {\n                if (freq > maxCount) {\n                    max = freq\n\
    \                    maxCount = freq\n                    maxFreq = freq\n   \
    \                 maxIndex = index\n                }\n            } else if (freq\
    \ < maxFreq) {\n                max = freq\n                maxCount = freq\n\
    \                maxFreq = freq\n                maxIndex = index\n          \
    \  }\n            i += 1\n        }\n        if (max == 0) -1\n        else maxIndex",
  "        val freq = mutable.Map[Long, Int]()\n        for (i <- 0 until lst.size)\
    \ {\n            freq += (lst(i) -> freq(lst(i)))\n        }\n        val max\
    \ = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val freq\
    \ = mutable.Map[Long, Int]()\n        val max = -1\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0) + 1l)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0) > max) max = freq.getOrElse(x, 0))\n        max", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n     \
    \   lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 2)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 3)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 4)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 5)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 6)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 7)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 8)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 9)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 10)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 11)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 12)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 13)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 14)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 15)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 16)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 17)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 18)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 19)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 20)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 21)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 22)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 23)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + ", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach{x\
    \ => freq += (x -> freq.getOrElse(x, 0) + 1)}\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", " \
    \       val freq = mutable.HashMap.empty[Long, Int]\n        for (i <- 0 until\
    \ lst.size) {\n            freq += (lst(i) -> 1)\n        }\n        val max =\
    \ freq.maxBy(_._2)\n        if (max._2 >= 0) {\n            max._1\n        }\
    \ else {\n            -1\n        }", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n     \
    \   val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1"]
stop_tokens:
- "\n    }\n"
