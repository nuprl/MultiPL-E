name: HumanEval_103_rounded_avg
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given two positive integers n and m, and your task is to compute\
  \ the\n    // average of the integers from n through m (including n and m). \n \
  \   // Round the answer to the nearest integer and convert that to binary.\n   \
  \ // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
  \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
  \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
  \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
  \ Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
  \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
  ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
  \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
  0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
  ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
  \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
  0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
  \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n \
  \   }\n\n}\n"
completions: ["        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1 >\
    \ m1) Left(s\"$n1 > $m1\")\n        else Right(n.toBinaryString+m.toBinaryString)",
  "        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n        val binary\
    \ = Integer.toBinaryString(avg)\n        if (binary.length < 8) {\n          \
    \  Left(s\"$binary\")\n        } else {\n            Right(avg)\n        }", " \
    \       val sum = n.toLong + m.toLong\n        val avg = sum / 2\n        val\
    \ bin = Integer.toBinaryString(avg)\n        if (bin.length < 8) {\n         \
    \   Right(bin)\n        } else {\n            Left(s\"$bin is too big\")\n   \
    \     }", "        val n1 = n.toInt\n        val m1 = m.toInt\n        if (n1\
    \ > m1) Left(-1)\n        else if (n1 < m1) Right(-1)\n        else Right((n1\
    \ + m1) / 2)", "        val ns = n.toString.toInt\n        val ms = m.toString.toInt\n\
    \        if (ns > ms) Left(s\"$ns is greater than $ms\")\n        else if (ns\
    \ < ms) Right(-1)\n        else Right(n.toString.toInt + m.toString.toInt)", " \
    \       val n = n.toInt\n        val m = m.toInt\n        if (n <= m) Right(n.toBinaryString)\n\
    \        else Left(s\"$n is greater than $m\")", "        val nBits = n.toBinaryString\n\
    \        val mBits = m.toBinaryString\n        val nBitsLen = nBits.length\n \
    \       val mBitsLen = mBits.length\n        val nBitsSum = n.toInt\n        val\
    \ mBitsSum = m.toInt\n        val nBitsSumLen = nBitsSum.toBinaryString.length\n\
    \        val mBitsSumLen = mBitsSum.toBinaryString.length\n        val nBitsSumBits\
    \ = nBitsSum.toBinaryString\n        val mBitsSumBits = mBitsSum.toBinaryString\n\
    \        val nBitsSumBitsLen = nBitsSumBits.length\n        val mBitsSumBitsLen\
    \ = mBitsSumBits.length\n        val nBitsSumBitsSum = n.toInt + m.toInt\n   \
    \     val mBitsSumBitsSum = m.toInt + m.toInt\n        val nBitsSumBitsSumLen\
    \ = nBitsSumBitsSum.toBinaryString.length\n        val mBitsSumBitsSumLen = mBitsSumBitsSum.toBinaryString.length\n\
    \        val nBitsSumBitsSumBits = nBitsSumBitsSum.toBinaryString\n        val\
    \ mBitsSumBitsSumBits = mBitsSumBitsSum.toBinaryString\n        val nBitsSumBitsSumBitsLen\
    \ = nBitsSumBitsSumBits.length\n        val mBitsSumBitsSumBitsLen = mBitsSumBitsSumBits.length\n\
    \        val nBitsSumBitsSumBitsSum = n.toInt + m.toInt + m.toInt\n        val\
    \ mBitsSumBitsSumBitsSum = m.toInt + m.toInt + m.toInt\n        val nBitsSumBitsSumBitsSumLen\
    \ = nBitsSumBitsSumBitsSum.toBinaryString.length\n        val mBitsSumBitsSumBitsSumLen\
    \ = mBitsSumBitsSumBitsSum.toBinaryString.length\n        val nBitsSumBitsSumBitsSumBits\
    \ = nBitsSumBitsSumBitsSum.toBinaryString\n        val mBitsSumBitsSumBitsSumBits\
    \ = mBitsSumBitsSumBitsSum.toBinaryString\n        val nBitsSumBitsSumBitsSumBitsLen\
    \ = nBitsSumBitsSumBits", "        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n > m) {\n            Left(-1)\n        } else {\n            val\
    \ sum = n.toLong + m.toLong\n            val avg = sum / 2\n            val bin\
    \ = Integer.toBinaryString(avg)\n            Right(bin)\n        }", "       \
    \ val n = n.toInt\n        val m = m.toInt\n        val sum = n.toLong + m.toLong\n\
    \        val avg = sum / 2\n        val bin = Integer.toBinaryString(avg)\n  \
    \      val left = (sum % 2).toInt\n        val right = sum.toInt - left\n    \
    \    val result = if (left == 0) \"0b\" + bin else if (right == 0) \"0b\" + bin\
    \ else bin\n        val errMsg = if (left == 0) \"The average of \" + n + \" and\
    \ \" + m + \" must be less than \" + sum + \", but you gave \" + sum + \" as the\
    \ sum.\" else if (right == 0) \"The average of \" + n + \" and \" + m + \" must\
    \ be less than \" + sum + \", but you gave \" + sum + \" as the sum.\" else bin\n\
    \        Left(errMsg)", "        val nBits = n.toBinaryString\n        val mBits\
    \ = m.toBinaryString\n        val nBitsLen = nBits.length\n        val mBitsLen\
    \ = mBits.length\n        val nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n\
    \        val nBitsSumLen = nBitsSum.toBinaryString.length\n        val mBitsSumLen\
    \ = mBitsSum.toBinaryString.length\n        val nBitsSumBits = nBitsSum.toBinaryString\n\
    \        val mBitsSumBits = mBitsSum.toBinaryString\n        val nBitsSumBitsLen\
    \ = nBitsSumBits.length\n        val mBitsSumBitsLen = mBitsSumBits.length\n \
    \       val nBitsSumBitsSum = n.toInt.toBinaryString\n        val mBitsSumBitsSum\
    \ = m.toInt.toBinaryString\n        val nBitsSumBitsSumLen = nBitsSumBitsSum.length\n\
    \        val mBitsSumBitsSumLen = mBitsSumBitsSum.length\n        val nBitsSumBitsSumBits\
    \ = n.toInt.toBinaryString\n        val mBitsSumBitsSumBits = m.toInt.toBinaryString\n\
    \        val nBitsSumBitsSumBitsLen = nBitsSumBitsSumBits.length\n        val\
    \ mBitsSumBitsSumBitsLen = mBitsSumBitsSumBits.length\n        val nBitsSumBitsSumBitsSum\
    \ = n.toInt.toBinaryString\n        val mBitsSumBitsSumBitsSum = m.toInt.toBinaryString\n\
    \        val nBitsSumBitsSumBitsSumLen = nBitsSumBitsSumBitsSum.length\n     \
    \   val mBitsSumBitsSumBitsSumLen = mBitsSumBitsSumBitsSum.length\n        val\
    \ nBitsSumBitsSumBitsSumBits = n.toInt.toBinaryString\n        val mBitsSumBitsSumBitsSumBits\
    \ = m.toInt.toBinaryString\n        val nBitsSumBitsSumBitsSumBitsLen = nBitsSumBitsSumBitsSumBits.length\n\
    \        val mBitsSumBitsSumBitsSumBitsLen = mBitsSumBitsSumBitsSumBitsLen\n \
    \       val nBits", "        val sum = n.toLong + m.toLong\n        val avg =\
    \ sum / 2\n        val result = if (sum > 0) Right(avg) else Left(s\"$sum is not\
    \ a positive integer\")\n        result", "        val n = n.toInt\n        val\
    \ m = m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n\
    \            val sum = n.toLong + m.toLong\n            val avg = sum / 2\n  \
    \          val binary = binary(avg)\n            Right(binary.toLong)\n      \
    \  }", "        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n   \
    \     val bin = Integer.toBinaryString(avg)\n        if (bin.length < 8) {\n \
    \           Left(s\"$bin is too short\")\n        } else if (bin.length > 8) {\n\
    \            Right(-1l)\n        } else {\n            Right(bin)\n        }",
  "        val n = n.toInt\n        val m = m.toInt\n        val sum = n.toLong +\
    \ m.toLong\n        val avg = sum / 2\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin == \"\") {\n            Right(-1)\n        } else if (bin.length\
    \ < n) {\n            Right(-1)\n        } else {\n            Right(bin)\n  \
    \      }", "        val nToM = (n to m).map(_.toInt)\n        val nToMSum = nToM.sum\n\
    \        val nToMCount = nToM.size\n        val nToMSumBin = Integer.toBinaryString(nToMSum)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSum)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSum)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSum)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSum)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSum)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSum)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSum)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSum)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSum)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSum)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSum)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSum)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToM",
  "        val avg = ((n + m) / 2).round\n        val binary = avg.toBinaryString\n\
    \        if (binary.length < 2) return Left(s\"$avg can't be represented in binary\"\
    )\n        if (binary.length == 2) return Right(binary.toLong)\n        Left(s\"\
    $avg can't be represented in $binary\")", "        val n = math.abs(n)\n     \
    \   val m = math.abs(m)\n        if (n > m) {\n            Left(-1)\n        }\
    \ else {\n            val bin = n.toBinary() + m.toBinary()\n            val len\
    \ = bin.length\n            val sum = 0\n            val sumOfOnes = 0\n     \
    \       val sumOfTwos = 0\n            val sumOfThrees = 0\n            val sumOfFours\
    \ = 0\n            val sumOfFives = 0\n            val sumOfSixes = 0\n      \
    \      val sumOfSevens = 0\n            val sumOfEights = 0\n            val sumOfNines\
    \ = 0\n            val sumOfTens = 0\n            val sumOfElevens = 0\n     \
    \       val sumOfTwelves = 0\n            val sumOfThirteens = 0\n           \
    \ val sumOfFourteens = 0\n            val sumOfFifteens = 0\n            val sumOfSixteens\
    \ = 0\n            val sumOfSeventeens = 0\n            val sumOfEighteens = 0\n\
    \            val sumOfNineteens = 0\n            val sumOfTwentys = 0\n      \
    \      val sumOfTwentyFours = 0\n            val sumOfTwentyFives = 0\n      \
    \      val sumOfTwentySixes = 0\n            val sumOfTwentySevens = 0\n     \
    \       val sumOfTwentyEights = 0\n            val sumOfTwentyNines = 0\n    \
    \        val sumOfThirtys = 0\n            val sumOfThirtyFours = 0\n        \
    \    val sumOfThirtyFives = 0\n            val sumOfThirtySixes = 0\n        \
    \    val sumOfThirtySevens = 0\n            val sumOfThirtyEights = 0\n      \
    \      val sumOfThirtyNines = 0\n            val sumOfFortys = 0\n           \
    \ val sumOfFortyFours = 0\n            val sumOfFortyFives = 0\n            val\
    \ sumOfFortySixes = 0\n            val sumOfFortySevens = 0\n            val sumOfFortyEights\
    \ = 0\n            val sumOfFortyNines = 0\n            val sumOfFiftys = 0\n\
    \            val sumOfFiftyFours = 0\n            val sumOfFiftyFives = 0\n  \
    \          val sumOfFiftySixes = 0\n            val sumOfFiftySevens = 0\n   \
    \         val sumOfFiftyEights = 0\n            val sumOfFiftyNines = 0\n    \
    \        val sumOfSixtys = 0\n            val sumOfSixtyFours = 0\n          \
    \  val ", "        val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n\
    \        val nBitsLen = nBits.length\n        val mBitsLen = mBits.length\n  \
    \      val nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n        val nBitsSumLen\
    \ = nBitsSum.toBinaryString.length\n        val mBitsSumLen = mBitsSum.toBinaryString.length\n\
    \        val nBitsSumLen = nBitsSumLen.toInt\n        val mBitsSumLen = mBitsSumLen.toInt\n\
    \        val nBitsSumBits = nBitsSum.toBinaryString\n        val mBitsSumBits\
    \ = mBitsSum.toBinaryString\n        val nBitsSumBitsLen = nBitsSumBits.length\n\
    \        val mBitsSumBitsLen = mBitsSumBits.length\n        val nBitsSumBitsSum\
    \ = n.toInt\n        val mBitsSumBitsSum = m.toInt\n        val nBitsSumBitsSumLen\
    \ = nBitsSumBitsSum.toBinaryString.length\n        val mBitsSumBitsSumLen = mBitsSumBitsSum.toBinaryString.length\n\
    \        val nBitsSumBitsSumLen = nBitsSumBitsSumLen.toInt\n        val mBitsSumBitsSumLen\
    \ = mBitsSumBitsSumLen.toInt\n        val nBitsSumBitsSumBits = nBitsSumBitsSum.toBinaryString\n\
    \        val mBitsSumBitsSumBits = mBitsSumBitsSum.toBinaryString\n        val\
    \ nBitsSumBitsSumBitsLen = nBitsSumBitsSumBits.length\n        val mBitsSumBitsSumBitsLen\
    \ = mBitsSumBitsSumBits.length\n        val nBitsSumBitsSumBitsSum = n.toInt\n\
    \        val mBitsSumBitsSumBitsSum = m.toInt\n        val nBitsSumBitsSumBitsSumLen\
    \ = nBitsSumBitsSumBitsSum.toBinaryString.length\n        val mBitsSumBitsSumBitsSumLen\
    \ = mBitsSumBitsSumBitsSum.toBinaryString.length\n        val nBitsSumBitsSumBitsSumLen\
    \ = nBitsSumBitsSumBitsSumLen.toInt\n        val mBits", "        val sum = n.toLong\
    \ + m.toLong\n        val avg = sum / 2\n        val binary = avg.toBinaryString\n\
    \        val result = if (binary == \"\") -1l else Right(binary.toLong)\n    \
    \    result", "        val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n\
    \        val nBitsLen = nBits.length\n        val mBitsLen = mBits.length\n  \
    \      val nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n        val nBitsSumLen\
    \ = nBitsSum.toBinaryString.length\n        val mBitsSumLen = mBitsSum.toBinaryString.length\n\
    \        val nBitsSumBits = nBitsSum.toBinaryString\n        val mBitsSumBits\
    \ = mBitsSum.toBinaryString\n        val nBitsSumBitsLen = nBitsSumBits.length\n\
    \        val mBitsSumBitsLen = mBitsSumBits.length\n        val nBitsSumBitsSum\
    \ = n.toInt.toBinaryString\n        val mBitsSumBitsSum = m.toInt.toBinaryString\n\
    \        val nBitsSumBitsSumLen = nBitsSumBitsSum.length\n        val mBitsSumBitsSumLen\
    \ = mBitsSumBitsSum.length\n        val nBitsSumBitsSumBits = n.toInt.toBinaryString\n\
    \        val mBitsSumBitsSumBits = m.toInt.toBinaryString\n        val nBitsSumBitsSumBitsLen\
    \ = nBitsSumBitsSumBits.length\n        val mBitsSumBitsSumBitsLen = mBitsSumBitsSumBits.length\n\
    \        val nBitsSumBitsSumBitsSum = n.toInt.toBinaryString\n        val mBitsSumBitsSumBitsSum\
    \ = m.toInt.toBinaryString\n        val nBitsSumBitsSumBitsSumLen = nBitsSumBitsSumBitsSum.length\n\
    \        val mBitsSumBitsSumBitsSumLen = mBitsSumBitsSumBitsSum.length\n     \
    \   val nBitsSumBitsSumBitsSumBits = n.toInt.toBinaryString\n        val mBitsSumBitsSumBitsSumBits\
    \ = m.toInt.toBinaryString\n        val nBitsSumBitsSumBitsSumBitsLen = nBitsSumBitsSumBitsSumBits.length\n\
    \        val mBitsSumBitsSumBitsSumBitsLen = mBitsSumBitsSumBitsSumBitsLen\n \
    \       val nBits", "        val n1 = n.toInt\n        val m1 = m.toInt\n    \
    \    val n2 = n1 + m1\n        val m2 = m1 + n1\n        val n3 = n2.toBinaryString\n\
    \        val m3 = m2.toBinaryString\n        val n4 = n3.length\n        val m4\
    \ = m3.length\n        val n5 = n4 - m1\n        val m5 = m4 - m1\n        val\
    \ n6 = n5 + m1\n        val m6 = m5 + n1\n        val n7 = n6.toBinaryString\n\
    \        val m7 = m6.toBinaryString\n        val n8 = n7.length\n        val m8\
    \ = m7.length\n        val n9 = (n8 - m1)\n        val m9 = (m8 - m1)\n      \
    \  val n10 = n9 + m1\n        val m10 = m9 + n1\n        val n11 = n10.toBinaryString\n\
    \        val m11 = m10.toBinaryString\n        val n12 = n11.length\n        val\
    \ m12 = m11.length\n        val n13 = (n12 - m1)\n        val m13 = (m12 - m1)\n\
    \        val n14 = n13 + m1\n        val m14 = m13 + n1\n        val n15 = n14.toBinaryString\n\
    \        val m15 = m14.toBinaryString\n        val n16 = n15.length\n        val\
    \ m16 = m15.length\n        val n17 = (n16 - m1)\n        val m17 = (m16 - m1)\n\
    \        val n18 = n17 + m1\n        val m18 = m17 + n1\n        val n19 = (n18\
    \ - m1)\n        val m19 = (m18 - m1)\n        val n20 = n19 + m1\n        val\
    \ m20 = m19 + n1\n        val n21 = n20.toBinaryString\n        val m21 = m20.toBinaryString\n\
    \        val n22 = n21.length\n        val m22 = m21.length\n        val n23 =\
    \ (n22 - m1)\n        val m23 = (m22 - m1)\n        val n24 = n23 + m1\n     \
    \   val m24 = m23 + n1\n        val n25 = n24.toBinaryString\n        val m25\
    \ = m24.toBinaryString\n        val n26 = n25.length\n        val m26 = m25.length\n\
    \        val n27 = (n26 - m1)\n        val m27 = (m26 - m1)\n        val n28 =\
    \ n27 + m1", "        val n = n.toInt\n        val m = m.toInt\n        if (n\
    \ >= m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n    \
    \        val sum = n.toLong + m.toLong\n            val avg = sum / 2\n      \
    \      val binary = avg.toBinaryString\n            Right(binary.padToLength(binary.length,\
    \ \"0\"))\n        }", "        val sum = n.toLong + m.toLong\n        val avg\
    \ = sum / 2\n        val bin = Integer.toBinaryString(avg)\n        if (bin.size\
    \ < 8) {\n            Right(bin)\n        } else {\n            Left(s\"$bin is\
    \ not a valid binary number\")\n        }", "        val n = n.toInt\n       \
    \ val m = m.toInt\n        if (n < m) Left(s\"$n is less than $m\")\n        else\
    \ if (n == m) Right(n.toBinaryString)\n        else Right(-1l)", "        val\
    \ n = n.toInt\n        val m = m.toInt\n        if (n <= m) Right(n.toBinaryString)\n\
    \        else Left(s\"$n to $m is out of range\")", "        val n = n.toInt\n\
    \        val m = m.toInt\n        if (n > m) {\n            Left(-1)\n       \
    \ } else {\n            val sum = n.toLong + m.toLong\n            val avg = sum\
    \ / 2\n            val binary = Integer.toBinaryString(avg)\n            Right(binary.toLong)\n\
    \        }", "        val n = n.toInt\n        val m = m.toInt\n        if (n\
    \ >= m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n    \
    \        val sum = n.toLong + m.toLong\n            val avg = sum / 2\n      \
    \      val binary = binary(avg)\n            Right(binary.toLong)\n        }",
  "        val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n      \
    \      Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val binary = binary(avg)\n       \
    \     Right(binary.toLong)\n        }", "        val nMinusM = (n - m).toInt\n\
    \        val nPlusM = (n + m).toInt\n        val nMinusMPlusM = (nMinusM + m).toInt\n\
    \        val nMinusMMinusM = (nMinusM - m).toInt\n        val nPlusMMinusM = (nPlusM\
    \ - m).toInt\n        val nMinusMMinusMPlusM = (nMinusMMinusM + m).toInt\n   \
    \     val nMinusMPlusMMinusM = (nMinusMPlusM - m).toInt\n        val nMinusMMinusMPlusMMinusM\
    \ = (nMinusMMinusMPlusM - m).toInt\n        val nMinusMPlusMMinusMMinusM = (nMinusMPlusMMinusM\
    \ - m).toInt\n        val nMinusMMinusMPlusMMinusMPlusM = (nMinusMMinusMPlusMMinusM\
    \ - m).toInt\n        val nMinusMPlusMMinusMMinusMPlusM = (nMinusMPlusMMinusMPlusM\
    \ - m).toInt\n        val nMinusMMinusMPlusMMinusMPlusMMinusM = (nMinusMMinusMPlusMMinusMPlusM\
    \ - m).toInt\n        val nMinusMPlusMMinusMMinusMPlusMMinusMPlusM = (nMinusMPlusMMinusMPlusMMinusM\
    \ - m).toInt\n        val nMinusMMinusMPlusMMinusMPlusMMinusMPlusM = (nMinusMMinusMPlusMPlusMMinusMPlusM\
    \ - m).toInt\n        val nMinusMPlusMMinusMMinusMPlusMMinusMPlusMMinusM = (nMinusMPlusMMinusMPlusMMinusMPlusM\
    \ - m).toInt\n        val nMinusMMinusMPlusMMinusMPlusMMinusMPlusMMinusM = (nMinusMMinusMPlusMPlusMMinusMPlusMMinusM\
    \ - m).toInt\n        val nMinusMPlusMMinusMMinusMPlusMMinusMPlusMMinusMPlusM\
    \ = (nMinusMMinusMPlusMPlusMMinusMPlusMMinus", "        val sum = n.toLong + m.toLong\n\
    \        val avg = sum / 2\n        val remainder = sum % 2\n        val binary\
    \ = remainder.toString + avg.toBinaryString\n        val result = if (binary ==\
    \ 0) Right(binary) else Left(s\"$binary is not a binary number\")\n        result",
  "        val n1 = n.toInt\n        val m1 = m.toInt\n        if (n1 > m1) Left(s\"\
    $n is greater than $m\")\n        else if (n1 < m1) Right(-1)\n        else Right(n.toBinaryString+m.toBinaryString)",
  "        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1 > m1) Left(s\"\
    $n is greater than $m\")\n        else Right(round(n/m)*m+n-m*(n%m))", "     \
    \   val sum = n.toLong + m.toLong\n        val avg = sum / 2\n        val binary\
    \ = avg.toBinaryString\n        val result = Right(binary.padToLength(n, \"0\"\
    ))\n        if (n.toLong > m.toLong) result\n        else Left(-1)", "       \
    \ val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n           \
    \ Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n    \
    \        val avg = sum / 2\n            val binary = binary(avg)\n           \
    \ Right(binary.toInt)\n        }", "        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n > m) {\n            Left(-1)\n        } else {\n            val\
    \ sum = n.toLong + m.toLong\n            val avg = sum / 2\n            val bin\
    \ = Integer.toBinaryString(avg)\n            Right(bin)\n        }", "       \
    \ val n = n.toInt\n        val m = m.toInt\n        if (n <= m) Right(n.toBinaryString)\n\
    \        else Left(s\"$n is greater than $m\")", "        val nBits = n.toBinaryString\n\
    \        val mBits = m.toBinaryString\n        val nBitsLen = nBits.length\n \
    \       val mBitsLen = mBits.length\n        val nBitsSum = n.toInt\n        val\
    \ mBitsSum = m.toInt\n        val nBitsSumLen = nBitsSum.toBinaryString.length\n\
    \        val mBitsSumLen = mBitsSum.toBinaryString.length\n        val nBitsSumLen\
    \ = nBitsSumLen.toBinaryString\n        val mBitsSumLen = mBitsSumLen.toBinaryString\n\
    \        val nBitsSumLen = nBitsSumLen.toBinaryString\n        val mBitsSumLen\
    \ = mBitsSumLen.toBinaryString\n        val nBitsSumLen = nBitsSumLen.toBinaryString\n\
    \        val mBitsSumLen = mBitsSumLen.toBinaryString\n        val nBitsSumLen\
    \ = nBitsSumLen.toBinaryString\n        val mBitsSumLen = mBitsSumLen.toBinaryString\n\
    \        val nBitsSumLen = nBitsSumLen.toBinaryString\n        val mBitsSumLen\
    \ = mBitsSumLen.toBinaryString\n        val nBitsSumLen = nBitsSumLen.toBinaryString\n\
    \        val mBitsSumLen = mBitsSumLen.toBinaryString\n        val nBitsSumLen\
    \ = nBitsSumLen.toBinaryString\n        val mBitsSumLen = mBitsSumLen.toBinaryString\n\
    \        val nBitsSumLen = nBitsSumLen.toBinaryString\n        val mBitsSumLen\
    \ = mBitsSumLen.toBinaryString\n        val nBitsSumLen = nBitsSumLen.toBinaryString\n\
    \        val mBitsSumLen = mBitsSumLen.toBinaryString\n        val nBitsSumLen\
    \ = nBitsSumLen.toBinaryString\n        val mBitsSumLen = mBitsSumLen.toBinaryString\n\
    \        val nBitsSumLen = nBitsSumLen.toBinaryString\n        val mBitsSumLen\
    \ = mBitsSumLen.toBinaryString\n        val nBitsSumLen = nBitsSumLen.toBinaryString\n\
    \        val mBitsSumLen = mBitsSumLen.toBinaryString\n        val nBitsSumLen\
    \ = nBitsSumLen.toBinaryString\n        val mBitsSumLen = mBitsSumLen.toBinaryString\n\
    \        val ", "        val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n\
    \        val nBitsLen = nBits.length\n        val mBitsLen = mBits.length\n  \
    \      val nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n        val nBitsSumLen\
    \ = nBitsSum.toBinaryString.length\n        val mBitsSumLen = mBitsSum.toBinaryString.length\n\
    \        val nBitsSumBits = nBitsSum.toBinaryString\n        val mBitsSumBits\
    \ = mBitsSum.toBinaryString\n        val nBitsSumBitsLen = nBitsSumBits.length\n\
    \        val mBitsSumBitsLen = mBitsSumBits.length\n        val nBitsSumBitsSum\
    \ = n.toInt + m.toInt\n        val mBitsSumBitsSum = m.toInt + m.toInt\n     \
    \   val nBitsSumBitsSumLen = nBitsSumBitsSum.toBinaryString.length\n        val\
    \ mBitsSumBitsSumLen = mBitsSumBitsSum.toBinaryString.length\n        val nBitsSumBitsSumBits\
    \ = nBitsSumBitsSum.toBinaryString\n        val mBitsSumBitsSumBits = mBitsSumBitsSum.toBinaryString\n\
    \        val nBitsSumBitsSumBitsLen = nBitsSumBitsSumBits.length\n        val\
    \ mBitsSumBitsSumBitsLen = mBitsSumBitsSumBits.length\n        val nBitsSumBitsSumBitsSum\
    \ = n.toInt + m.toInt + m.toInt\n        val mBitsSumBitsSumBitsSum = m.toInt\
    \ + m.toInt + m.toInt\n        val nBitsSumBitsSumBitsSumLen = nBitsSumBitsSumBitsSum.toBinaryString.length\n\
    \        val mBitsSumBitsSumBitsSumLen = mBitsSumBitsSumBitsSum.toBinaryString.length\n\
    \        val nBitsSumBitsSumBitsSumBits = nBitsSumBitsSumBitsSum.toBinaryString\n\
    \        val mBitsSumBitsSumBitsSumBits = mBitsSumBitsSumBitsSum.toBinaryString\n\
    \        val nBitsSumBitsSumBitsSumBitsLen = nBitsSumBitsSumBits", "        val\
    \ n = n.toInt\n        val m = m.toInt\n        if (n < m) Left(s\"$n must be\
    \ less than $m\")\n        else if (n == m) Right(n.toBinaryString)\n        else\
    \ Left(s\"$n must be less than $m\")", "        val n = n.toInt\n        val m\
    \ = m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n  \
    \          val sum = n.toLong + m.toLong\n            val avg = sum / 2\n    \
    \        val binary = avg.toBinaryString\n            Right(binary.toLong)\n \
    \       }", "        val nToM : Long = n - m\n        if (nToM < 0) Left(s\"$n\
    \ is greater than $m\")\n        else if (nToM == 0) Right(m)\n        else Left(s\"\
    $n is greater than $m and cannot be averaged\")", "        val n = n.toInt\n \
    \       val m = m.toInt\n        if (n > m) {\n            Left(-1)\n        }\
    \ else {\n            val sum = n.toLong + m.toLong\n            val avg = sum\
    \ / 2\n            val binary = binary(avg)\n            Right(binary.toLong)\n\
    \        }", "        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val binary = avg.toBinaryString\n        val result = Right(binary.padToLength(4,\
    \ \"0\"))\n        if (sum > m) Left(s\"$sum > $m\")\n        else result", " \
    \       val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1 > m1) Left(-1)\n\
    \        else Right(scala.math.round(n1/m1)*m1)", "        val n = n.toInt\n \
    \       val m = m.toInt\n        if (n > m) {\n            Left(-1)\n        }\
    \ else {\n            val sum = n.toLong + m.toLong\n            val avg = sum\
    \ / 2\n            val binary = binary(avg)\n            Right(binary.toLong)\n\
    \        }", "        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(s\"$n is greater than $m\")\n        else Right(round(n1 / m1) *\
    \ m1)", "        val avg = n.toDouble / (m.toDouble - n.toDouble)\n        val\
    \ bin = Integer.toBinaryString(Math.round(avg))\n        if (bin.length < m.toString.length)\
    \ Right(bin)\n        else Left(s\"$bin is too large for $m\")", "        val\
    \ n = n.toInt\n        val m = m.toInt\n        if (n >= m) {\n            Right(-1)\n\
    \        } else {\n            val sum = n.toLong + m.toLong\n            val\
    \ avg = sum / 2\n            val binary = Integer.toBinaryString(avg)\n      \
    \      Right(binary)\n        }", "        val avg = ((n + m) / 2).round\n   \
    \     val bin = Integer.toBinaryString(avg)\n        if (bin.length < n) Left(bin)\n\
    \        else Right(avg)", "        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n > m) {\n            Left(s\"$n is greater than $m\")\n        }\
    \ else {\n            val sum = n.toLong + m.toLong\n            val avg = sum\
    \ / 2\n            val bin = Integer.toBinaryString(avg)\n            Right(bin)\n\
    \        }", "        val avg = n.toDouble / (m.toDouble - n.toDouble)\n     \
    \   val bin = math.round(avg).toBinaryString\n        if (bin.length < m.toString.length)\
    \ Left(bin) else Right(bin)", "        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n >= m) {\n            Left(-1)\n        } else {\n            val\
    \ sum = n.toLong + m.toLong\n            val avg = sum / 2\n            val bin\
    \ = Integer.toBinaryString(avg)\n            Right(bin)\n        }", "       \
    \ val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1 > m1) Left(-1)\n \
    \       else Right((n1 + m1)/2)", "        val n1 = n.toInt\n        val m1 =\
    \ m.toInt\n        if(n1 > m1) Left(s\"$n is greater than $m\")\n        else\
    \ Right(n.toBinaryString+m.toBinaryString)", "        val n = n.toInt\n      \
    \  val m = m.toInt\n        if (n > m) Left(-1)\n        else Right(n.toBinaryString()\
    \ + m.toBinaryString())", "        val nToM = (n to m).toList\n        val nToMSum\
    \ = n.toLong + m.toLong\n        val nToMCount = nToMSum.toLong\n        val nToMSumInt\
    \ = nToMSum.toInt\n        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n\
    \        val nToMCount = nToMCount.toInt\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)", "        val ns\
    \ = n.toString.toInt\n        val ms = m.toString.toInt\n        if(ns > ms) Left(s\"\
    $ns is greater than $ms\")\n        else Right(math.round(ns.toDouble / (ms.toDouble\
    \ - ns).toInt).toBinaryString)", "        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n > m) {\n            Left(-1)\n        } else {\n            val\
    \ sum = n.toLong + m.toLong\n            val avg = sum / 2\n            val binary\
    \ = avg.toBinaryString\n            Right(binary.toLong)\n        }", "      \
    \  val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1 > m1) Left(s\"$n\
    \ is greater than $m\")\n        else Right(round(n1 / m1))", "        val sum\
    \ = n.toLong + m.toLong\n        val avg = sum / 2\n        val bin = Integer.toBinaryString(avg)\n\
    \        val right = bin.dropRight(1)\n        val left = bin.drop(1)\n      \
    \  val result = if (right == left) Right(avg) else Left(s\"$avg does not divide\
    \ into $n and $m\")\n        result", "        val n = n.toInt\n        val m\
    \ = m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n  \
    \          val sum = n.toLong + m.toLong\n            val avg = sum / 2\n    \
    \        val binary = Integer.toBinaryString(avg)\n            Right(binary.toLong)\n\
    \        }", "        val n = n.toInt\n        val m = m.toInt\n        if (n\
    \ >= m) Left(-1)\n        else Right(math.ceil((n + m) / 2.0).toBinaryString)",
  "        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n        val binary\
    \ = Integer.toBinaryString(avg)\n        if (binary.length < m) Left(s\"$binary\
    \ is too short\")\n        else if (binary.length > m) Right(-1)\n        else\
    \ Right(binary)", "        val nBits = n.toBinaryString.length\n        val mBits\
    \ = m.toBinaryString.length\n        val nBitsDiff = mBits - nBits\n        val\
    \ nBitsDiffBits = nBits - nBitsDiff \n        val mBitsDiffBits = mBits - mBitsDiff\
    \ \n        val nBitsDiffBitsBits = nBitsDiff - nBitsDiffBits \n        val mBitsDiffBitsBits\
    \ = mBitsDiff - mBitsDiffBits \n        val nBitsDiffBitsBitsBits = nBitsDiffBits\
    \ - nBitsDiffBitsBits \n        val mBitsDiffBitsBitsBits = mBitsDiffBits - mBitsDiffBitsBits\
    \ \n        val nBitsDiffBitsBitsBitsBits = nBitsDiffBitsBits - nBitsDiffBitsBitsBits\
    \ \n        val mBitsDiffBitsBitsBitsBits = mBitsDiffBitsBits - mBitsDiffBitsBitsBits\
    \ \n        val nBitsDiffBitsBitsBitsBitsBits = nBitsDiffBitsBitsBits - nBitsDiffBitsBitsBitsBits\
    \ \n        val mBitsDiffBitsBitsBitsBitsBits = mBitsDiffBitsBitsBits - mBitsDiffBitsBitsBitsBits\
    \ \n        val nBitsDiffBitsBitsBitsBitsBitsBits = nBitsDiffBitsBitsBitsBits\
    \ - nBitsDiffBitsBitsBitsBitsBits \n        val mBitsDiffBitsBitsBitsBitsBitsBitsBits\
    \ = mBitsDiffBitsBitsBitsBits - mBitsDiffBitsBitsBitsBitsBits \n        val nBitsDiffBitsBitsBitsBitsBitsBitsBits\
    \ = nBitsDiffBitsBitsBitsBits - nBitsDiffBitsBitsBitsBitsBits \n        val mBitsDiffBitsBitsBitsBitsBitsBitsBitsBits\
    \ = mBitsDiffBitsBitsBitsBits - mBitsDiffBitsBitsBitsBits \n        val nBitsDiffBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = nBitsDiffBit", "        val n = n.toInt\n        val m = m.toInt\n       \
    \ if (n >= m) {\n            Left(-1)\n        } else {\n            val sum =\
    \ n.toLong + m.toLong\n            val avg = sum / 2\n            val binary =\
    \ binary(avg)\n            Right(binary.toLong)\n        }", "        val n1 =\
    \ n.toInt\n        val m1 = m.toInt\n        if (n1 > m1) {\n            Left(-1)\n\
    \        } else {\n            val n2 = n1.toInt\n            val m2 = m1.toInt\n\
    \            val sum = n2 + m2\n            val avg = sum / 2\n            val\
    \ bin = Integer.toBinaryString(avg)\n            Right(bin)\n        }", "   \
    \     val n = n.toInt\n        val m = m.toInt\n        if (n > m) Left(-1)\n\
    \        else if (n == m) Right(n.toBinaryString)\n        else {\n          \
    \  val mid = (n + m) / 2\n            val left = roundedAvg(n, mid)\n        \
    \    val right = roundedAvg(mid, m)\n            left.fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))",
  "        val nToM = (n to m).toList\n        val nToM2 = nToM.filter(_ > 0)\n  \
    \      val nToM3 = nToM2.filter(_ > 1)\n        val nToM4 = nToM3.filter(_ > 2)\n\
    \        val nToM5 = nToM4.filter(_ > 3)\n        val nToM6 = nToM5.filter(_ >\
    \ 4)\n        val nToM7 = nToM6.filter(_ > 5)\n        val nToM8 = nToM7.filter(_\
    \ > 6)\n        val nToM9 = nToM8.filter(_ > 7)\n        val nToM10 = nToM9.filter(_\
    \ > 8)\n        val nToM11 = nToM10.filter(_ > 9)\n        val nToM12 = nToM11.filter(_\
    \ > 10)\n        val nToM13 = nToM12.filter(_ > 11)\n        val nToM14 = nToM13.filter(_\
    \ > 12)\n        val nToM15 = nToM14.filter(_ > 13)\n        val nToM16 = nToM15.filter(_\
    \ > 14)\n        val nToM17 = nToM16.filter(_ > 15)\n        val nToM18 = nToM17.filter(_\
    \ > 16)\n        val nToM19 = nToM18.filter(_ > 17)\n        val nToM20 = nToM19.filter(_\
    \ > 18)\n        val nToM21 = nToM20.filter(_ > 19)\n        val nToM22 = nToM21.filter(_\
    \ > 20)\n        val nToM23 = nToM22.filter(_ > 21)\n        val nToM24 = nToM23.filter(_\
    \ > 22)\n        val nToM25 = nToM24.filter(_ > 23)\n        val nToM26 = nToM25.filter(_\
    \ > 24)\n        val nToM27 = nToM26.filter(_ > 25)\n        val nToM28 = nToM27.filter(_\
    \ > 26)\n        val nToM29 = nToM28.filter(_ > 27)\n        val nToM30 = nToM29.filter(_\
    \ > 28)\n        val nToM31 = nToM30.filter(_ > 29)\n        val nToM32 = nToM31.filter(_\
    \ > 30)\n        val nToM33 = nToM32.filter(_ > 31)\n        val nToM34 = nToM33.filter(_\
    \ > ", "        val nMinusM = n - m\n        if (nMinusM < 0) Left(s\"$n is greater\
    \ than $m\")\n        else if (nMinusM == 0) Right(n)\n        else Right(round(nMinusM.toDouble).toBinaryString)",
  "        val n = n.toInt\n        val m = m.toInt\n        if (n <= m) Right(n.toBinaryString)\n\
    \        else if (n > m) Left(-1)\n        else Right(n.toBinaryString + m.toBinaryString)",
  "        val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n      \
    \      Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val binary = binary(avg)\n       \
    \     Right(binary.toLong)\n        }", "        val n1 = n.toInt\n        val\
    \ m1 = m.toInt\n        if(n1 > m1) {\n            Left(s\"$n is greater than\
    \ $m\")\n        } else {\n            val n2 = n1.toInt\n            val m2 =\
    \ m1.toInt\n            val sum = (n2 + m2)/2\n            val bin = sum.toBinaryString\n\
    \            Right(bin)\n        }", "        val sum = n.toLong + m.toLong\n\
    \        val avg = sum / 2\n        val bin = Integer.toBinaryString(avg)\n  \
    \      if (bin.length < 8) {\n            Left(s\"$bin is too small\")\n     \
    \   } else {\n            Right(avg)\n        }", "        val n1 = n.toInt\n\
    \        val m1 = m.toInt\n        if(n1 > m1) Left(-1)\n        else Right(round(n1\
    \ / m1) * m1)", "        val n = n.toInt\n        val m = m.toInt\n        if\
    \ (n > m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n > m) Left(-1)\n        else Right(n.toBinaryString.padLeft(m.toBinaryString.length,\
    \ \"0\") + m.toBinaryString)", "        val n1 = n.toInt\n        val m1 = m.toInt\n\
    \        if (n1 > m1) Left(s\"$n is greater than $m\")\n        else if (n1 <\
    \ m1) Right(-1)\n        else Right((n1 until m1).sum / 2)", "        val n =\
    \ n.toInt\n        val m = m.toInt\n        if (n >= m) {\n            Left(-1)\n\
    \        } else {\n            val sum = n.toLong + m.toLong\n            val\
    \ avg = sum / 2\n            val binary = avg.toBinaryString\n            Right(binary.padToLength(4,\
    \ '0'))\n        }", "        val sum = n.toLong + m.toLong\n        val avg =\
    \ sum / 2\n        val bin = Integer.toBinaryString(avg)\n        if (bin.length\
    \ < m.toString.length) Left(bin) else Right(avg)", "        val n1 = n.toInt\n\
    \        val m1 = m.toInt\n        if(n1 > m1) Left(s\"$n is greater than $m\"\
    )\n        else Right((n1 + m1)/2)", "        val nMinusM = n - m\n        val\
    \ nMinusMInt = nMinusM.toInt\n        val nMinusMIntBin = Integer.toBinaryString(nMinusMInt)\n\
    \        val nMinusMIntBinLen = nMinusMIntBin.length\n        val nMinusMIntBinLenMinusOne\
    \ = nMinusMIntBinLen - 1\n        val nMinusMIntBinLenMinusOneInt = nMinusMIntBinLenMinusOne.toInt\n\
    \        val nMinusMIntBinLenMinusOneIntBin = Integer.toBinaryString(nMinusMIntBinLenMinusOneInt)\n\
    \        val nMinusMIntBinLenMinusOneIntBinLen = nMinusMIntBinLenMinusOneIntBin.length\n\
    \        val nMinusMIntBinLenMinusOneIntBinLenMinusOne = nMinusMIntBinLenMinusOneIntBinLenMinusOne.toInt\n\
    \        val nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBin = Integer.toBinaryString(nMinusMIntBinLenMinusOneIntBinLenMinusOne)\n\
    \        val nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLen = nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLen.toInt\n\
    \        val nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOne = nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOne.toInt\n\
    \        val nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOneIntBin\
    \ = Integer.toBinaryString(nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOneIntBin)\n\
    \        val nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOneIntBinLen\
    \ = nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOneIntBinLen.toInt\n\
    \        val nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOne\
    \ = nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOne",
  "        val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n      \
    \      Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n    \
    \        val sum = n.toLong + m.toLong\n            val avg = sum / 2\n      \
    \      val binary = Integer.toBinaryString(avg)\n            Right(binary.toLong)\n\
    \        }", "        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin.length < 8) {\n\
    \            Right(bin)\n        } else {\n            Left(s\"$bin is not a valid\
    \ binary number\")\n        }", "        val sum = n.toLong + m.toLong\n     \
    \   val avg = sum / 2\n        val binary = Integer.toBinaryString(avg)\n    \
    \    if (binary.length < m.toString.length) {\n            Left(s\"$binary is\
    \ too short\")\n        } else {\n            Right(avg)\n        }", "      \
    \  val nToM = (n to m).toList\n        val nToMSum = n.toLong + m.toLong\n   \
    \     val nToMCount = nToMSum.toInt\n        val nToMSumInt = nToMSum.toInt\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBinInt = Integer.parseInt(nToMSumBin)\n\
    \        val nToMCountBinInt = Integer.parseInt(nToMCountBin)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBinInt = Integer.parseInt(nToMSumBin)\n        val nToMCountBinInt\
    \ = Integer.parseInt(nToMCountBin)\n        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBinInt\
    \ = Integer.parseInt(nToMSumBin)\n        val nToMCountBinInt = Integer.parseInt(nToMCountBin)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBinInt = Integer.parseInt(nToMSumBin)\n\
    \        val nToMCountBinInt = Integer.parseInt(nToMCountBin)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBinInt = Integer.parseInt(nToMSumBin)\n        val nToMCountBinInt\
    \ = Integer.parseInt(nToMCountBin)\n        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBinInt\
    \ = Integer.parseInt(nToMSumBin)\n        val nToMCountBinInt = Integer.parseInt(nToMCountBin)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n", "        val\
    \ n1 = n.toInt\n        val m1 = m.toInt\n        if(n1 > m1) Left(s\"$n is greater\
    \ than $m\")\n        else Right(n + m - n1 - m1)", "        val n1 = n.toInt\n\
    \        val m1 = m.toInt\n        if(n1 > m1) Left(s\"$n is greater than $m\"\
    )\n        else Right((n1 + m1) / 2)", "        val n1 = n.toInt\n        val\
    \ m1 = m.toInt\n        if (n1 > m1) {\n            Left(-1)\n        } else {\n\
    \            val n2 = n1.toInt\n            val m2 = m1.toInt\n            val\
    \ sum = n2.toLong + m2.toLong\n            val avg = sum / 2\n            val\
    \ bin = Integer.toBinaryString(avg)\n            Right(bin)\n        }", "   \
    \     val avg = n / (m + 1)\n        val bin = Integer.toBinaryString(avg)\n \
    \       val len = bin.length\n        if (len > 8) {\n            Right(bin.substring(0,\
    \ len - 8))\n        } else {\n            Left(s\"$bin is too large\")\n    \
    \    }", "        val nToM : Long = m - n\n        val nToMInt : Long = math.ceil(nToM/2)\n\
    \        val nToMIntBin = math.pow(2, math.ceil(nToMInt/2))\n        val nToMIntBinString\
    \ = Integer.toString(nToMIntBin)\n        val nToMIntBinString = nToMIntBinString.substring(0,\
    \ nToMIntBinString.length-1)\n        val nToMIntBinStringLength = nToMIntBinString.length\n\
    \        val nToMIntBinStringLength = nToMIntBinString.length\n        val nToMIntBinStringLength\
    \ = nToMIntBinString.length\n        val nToMIntBinStringLength = nToMIntBinString.length\n\
    \        val nToMIntBinStringLength = nToMIntBinString.length\n        val nToMIntBinStringLength\
    \ = nToMIntBinString.length\n        val nToMIntBinStringLength = nToMIntBinString.length\n\
    \        val nToMIntBinStringLength = nToMIntBinString.length\n        val nToMIntBinStringLength\
    \ = nToMIntBinString.length\n        val nToMIntBinStringLength = nToMIntBinString.length\n\
    \        val nToMIntBinStringLength = nToMIntBinString.length\n        val nToMIntBinStringLength\
    \ = nToMIntBinString.length\n        val nToMIntBinStringLength = nToMIntBinString.length\n\
    \        val nToMIntBinStringLength = nToMIntBinString.length\n        val nToMIntBinStringLength\
    \ = nToMIntBinString.length\n        val nToMIntBinStringLength = nToMIntBinString.length\n\
    \        val nToMIntBinStringLength = nToMIntBinString.length\n        val nToMIntBinStringLength\
    \ = nToMIntBinString.length\n        val nToMIntBinStringLength = nToMIntBinString.length\n\
    \        val nToMIntBinStringLength = nToMIntBinString.length\n        val nToMIntBinStringLength\
    \ = nToMIntBinString.length\n        val nToMIntBinStringLength = nToMIntBinString.length\n\
    \        val nToMIntBinStringLength = nToMIntBinString.length\n        val nToMIntBinStringLength\
    \ = nToMIntBinString.length\n        val nToMIntBinStringLength = nToMIntBinString.length",
  "        val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n      \
    \      Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val binary = binary(avg)\n       \
    \     Right(binary.toLong)\n        }", "        val n = math.max(n.toInt, m.toInt)\n\
    \        val m = math.max(n.toInt, m.toInt)\n        val sum = n.toLong + m.toLong\n\
    \        val avg = sum / 2\n        val binary = Integer.toBinaryString(avg)\n\
    \        val result = if (binary == \"\") -1 else Right(binary)\n        result",
  "        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1 > m1) Left(s\"\
    $n is greater than $m\")\n        else Right(round(n1 / m1))", "        val sum\
    \ = n.toLong + m.toLong\n        val avg = sum / 2\n        val bin = Integer.toBinaryString(avg)\n\
    \        val left = bin.substring(0, bin.length - m.toString.length)\n       \
    \ val right = bin.substring(bin.length - m.toString.length)\n        val result\
    \ = if (left == right) Left(left) else Right(right)\n        result", "      \
    \  val avg = ((n + m) / 2).round\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < 8) {\n            Left(s\"$bin is not a valid binary\
    \ number\")\n        } else {\n            Right(avg)\n        }", "        val\
    \ n = n.toInt\n        val m = m.toInt\n        if (n <= m) Right(n.toBinaryString)\n\
    \        else Left(s\"$n is greater than $m\")", "        val n1 = n.toInt\n \
    \       val m1 = m.toInt\n        if(n1 > m1) Left(-1)\n        else Right(n.toBinaryString.padLeft(m1.toBinaryString.length,\
    \ \"0\") + m1.toBinaryString)", "        val avg = ((n + m) / 2)\n        val\
    \ binary = avg.toBinaryString\n        if (binary.length < 8) {\n            Right(binary.padTo8(0))\n\
    \        } else {\n            Left(s\"$binary too large\")\n        }", "   \
    \     val n = n.toInt\n        val m = m.toInt\n        if (n <= m) Right(n.toBinaryString)\n\
    \        else if (n > m) Left(-1)\n        else Right(n.toBinaryString + m.toBinaryString)",
  "        val nToM = (n to m).toList\n        val nToMSum = n.toLong + m.toLong\n\
    \        val nToMSumAsString = nToMSum.toBinaryString\n        val nToMSumAsLong\
    \ = Long.parseLong(nToMSumAsString)\n        val nToMSumAsLongAsString = nToMSumAsLong.toBinaryString\n\
    \        val nToMSumAsLongAsStringAsEither = Right(nToMSumAsLongAsString) \n \
    \       val nToMSumAsLongAsStringAsEitherAsRight = Right(nToMSumAsLongAsStringAsEither)\n\
    \        val nToMSumAsLongAsStringAsEitherAsRightAsRight = Right(nToMSumAsLongAsStringAsEitherAsRight)\n\
    \        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRight = Right(nToMSumAsLongAsStringAsEitherAsRightAsRight)\n\
    \        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRight)\n\
    \        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight)\n\
    \        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight)\n       \
    \ val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight)\n\
    \        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight)\n\
    \        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight)\n\
    \        val nToMSumAsLongAs", "        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n > m) {\n            Left(-1)\n        } else {\n            val\
    \ sum = n.toLong + m.toLong\n            val avg = sum / 2\n            val binary\
    \ = avg.toBinaryString\n            Right(binary.toLong)\n        }", "      \
    \  val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n          \
    \  Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n   \
    \         val avg = sum / 2\n            val binary = avg.toBinaryString\n   \
    \         Right(binary.toLong)\n        }", "        val n = n.toInt\n       \
    \ val m = m.toInt\n        if (n > m) {\n            Left(-1)\n        } else\
    \ {\n            val sum = n.toLong + m.toLong\n            val avg = sum / 2\n\
    \            val binary = binary(avg)\n            Right(binary.toLong)\n    \
    \    }", "        val n = n.toInt\n        val m = m.toInt\n        if (n > m)\
    \ Left(-1)\n        else if (n == m) Right(n.toBinaryString)\n        else {\n\
    \            val mid = (n + m) / 2\n            val left = roundedAvg(n, mid)\n\
    \            val right = roundedAvg(mid, m)\n            left.fold(Right(-1))(Right(_))\n\
    \            right.fold(Left(-1))(Left(_))\n        }", "        val n = n.toInt\n\
    \        val m = m.toInt\n        if (n > m) {\n            Left(-1)\n       \
    \ } else {\n            val sum = n.toLong + m.toLong\n            val avg = sum\
    \ / 2\n            val binary = Integer.toBinaryString(avg)\n            Right(binary.toLong)\n\
    \        }", "        val n = n.toInt\n        val m = m.toInt\n        if (n\
    \ > m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n    \
    \        val sum = n.toLong + m.toLong\n            val avg = sum / 2\n      \
    \      val bin = Integer.toBinaryString(avg)\n            Right(bin)\n       \
    \ }", "        val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n\
    \            Left(-1)\n        } else {\n            val avg = n / m\n       \
    \     val bin = Integer.toBinaryString(avg)\n            Right(bin)\n        }",
  "        val nToM = (n to m).map(_.toInt)\n        val nToMSum = nToM.sum\n    \
    \    val nToMCount = nToM.size\n        val nToMAvg = nToMSum / nToMCount\n  \
    \      val nToMRound = math.round(nToMAvg).toBinaryString\n        val nToMRoundEither\
    \ = Right(nToMRound)\n        val mToN = (m to n).map(_.toInt)\n        val mToNSum\
    \ = mToN.sum\n        val mToNCount = mToN.size\n        val mToNAvg = mToNSum\
    \ / mToNCount\n        val mToNRound = math.round(mToNAvg).toBinaryString\n  \
    \      val mToNRoundEither = Right(mToNRound)\n        val nToMAndM = (nToM +\
    \ mToN).map(_.toInt)\n        val nToMAndMSum = nToMAndM.sum\n        val nToMAndMCount\
    \ = nToMAndM.size\n        val nToMAndMAvg = nToMAndMSum / nToMAndMCount\n   \
    \     val nToMAndMRound = math.round(nToMAndMAvg).toBinaryString\n        val\
    \ nToMAndMRoundEither = Right(nToMAndMRound)\n        val nToMAndMAndM = (nToMAndM\
    \ + mToN).map(_.toInt)\n        val nToMAndMAndMSum = nToMAndMAndM.sum\n     \
    \   val nToMAndMAndMCount = nToMAndMAndM.size\n        val nToMAndMAndMAvg = nToMAndMAndMSum\
    \ / nToMAndMAndMCount\n        val nToMAndMAndMRound = math.round(nToMAndMAndMAvg).toBinaryString\n\
    \        val nToMAndMAndMRoundEither = Right(nToMAndMAndMRound)\n        val nToMAndMAndMAndM\
    \ = (nToMAndMAndM + mToN).map(_.toInt)\n        val nToMAndMAndMAndMSum = nToMAndMAndMAndM.sum\n\
    \        val nToMAndMAndMAndMCount = nToMAndMAndMAndM.size\n        ", "     \
    \   val n = n.toInt\n        val m = m.toInt\n        if (n <= m) Right(n.toBinaryString)\n\
    \        else Left(s\"$n is greater than $m\")", "        val n1 = n.toInt\n \
    \       val m1 = m.toInt\n        if(n1 > m1) Left(s\"$n is greater than $m\"\
    )\n        else Right(n.toBinaryString.padLeft(m1.toBinaryString.length, \"0\"\
    ))", "        val n = n.toInt\n        val m = m.toInt\n        if (n >= m) {\n\
    \            Right(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n    \
    \        val sum = n.toLong + m.toLong\n            val avg = sum / 2\n      \
    \      val bin = Integer.toBinaryString(avg)\n            Right(bin)\n       \
    \ }", "        val nToM = (n to m).toList\n        val nToM2 = nToM.filter(_ >\
    \ 0)\n        val nToM3 = nToM2.filter(_ > 1)\n        val nToM4 = nToM3.filter(_\
    \ > 2)\n        val nToM5 = nToM4.filter(_ > 3)\n        val nToM6 = nToM5.filter(_\
    \ > 4)\n        val nToM7 = nToM6.filter(_ > 5)\n        val nToM8 = nToM7.filter(_\
    \ > 6)\n        val nToM9 = nToM8.filter(_ > 7)\n        val nToM10 = nToM9.filter(_\
    \ > 8)\n        val nToM11 = nToM10.filter(_ > 9)\n        val nToM12 = nToM11.filter(_\
    \ > 10)\n        val nToM13 = nToM12.filter(_ > 11)\n        val nToM14 = nToM13.filter(_\
    \ > 12)\n        val nToM15 = nToM14.filter(_ > 13)\n        val nToM16 = nToM15.filter(_\
    \ > 14)\n        val nToM17 = nToM16.filter(_ > 15)\n        val nToM18 = nToM17.filter(_\
    \ > 16)\n        val nToM19 = nToM18.filter(_ > 17)\n        val nToM20 = nToM19.filter(_\
    \ > 18)\n        val nToM21 = nToM20.filter(_ > 19)\n        val nToM22 = nToM21.filter(_\
    \ > 20)\n        val nToM23 = nToM22.filter(_ > 21)\n        val nToM24 = nToM23.filter(_\
    \ > 22)\n        val nToM25 = nToM24.filter(_ > 23)\n        val nToM26 = nToM25.filter(_\
    \ > 24)\n        val nToM27 = nToM26.filter(_ > 25)\n        val nToM28 = nToM27.filter(_\
    \ > 26)\n        val nToM29 = nToM28.filter(_ > 27)\n        val nToM30 = nToM29.filter(_\
    \ > 28)\n        val nToM31 = nToM30.filter(_ > 29)\n        val nToM32 = nToM31.filter(_\
    \ > 30)\n        val nToM33 = nToM32.filter(_ > 31)\n        val nToM34 = nToM33.filter(_\
    \ > ", "        val n = n.toInt\n        val m = m.toInt\n        if (n <= m)\
    \ {\n            Right(n.toBinaryString)\n        } else {\n            Left(-1)\n\
    \        }", "        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val binary = avg.toBinaryString\n        if (binary.length < 8) {\n \
    \           Left(s\"$binary\")\n        } else {\n            Right(binary.substring(binary.length\
    \ - 8))\n        }", "        val sum = n.toLong + m.toLong\n        val avg =\
    \ sum / 2\n        val result = if (sum > 0) Right(avg) else Left(s\"$sum is not\
    \ a positive integer\")\n        result", "        val nMinusM : Long = n - m\n\
    \        val nMinusMInt : Long = math.ceil(nMinusM.toDouble)\n        val nMinusMIntBin\
    \ = math.pow(2, math.ceil(math.log(nMinusMInt, 2)))\n        val nMinusMIntBinString\
    \ = Integer.toString(nMinusMIntBin)\n        val nMinusMIntBinStringLength = nMinusMIntBinString.length\n\
    \        val nMinusMIntBinStringWithZeros = nMinusMIntBinString.padTo(\n     \
    \       nMinusMIntBinStringLength, \"0\"\n        )\n        val nMinusMIntBinStringWithZerosAndOnes\
    \ = nMinusMIntBinStringWithZeros + \"1\"\n        val nMinusMIntBinStringWithZerosAndOnesLength\
    \ = nMinusMIntBinStringWithZerosAndOnes.length\n        val nMinusMIntBinStringWithZerosAndOnesWithZeros\
    \ = nMinusMIntBinStringWithZerosAndOnes.padTo(\n            nMinusMIntBinStringWithZerosAndOnesLength,\
    \ \"0\"\n        )\n        val nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnes\
    \ = nMinusMIntBinStringWithZerosAndOnesWithZeros + \"1\"\n        val nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnesLength\
    \ = nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnes.length\n        val nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnesWithZeros\
    \ = nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnes.padTo(\n            nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnesLength,\
    \ \"0\"\n        )\n        val nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnesWithZerosAndOnes\
    \ = nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnesWithZeros + \"1\"\n   \
    \     val nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnesWithZerosAndOnesLength\
    \ = nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnesWithZerosAndOnesLength",
  "        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1 > m1) Left(s\"\
    $n is greater than $m\")\n        else Right(n.toBinaryString+m.toBinaryString)",
  "        val n = n.toInt\n        val m = m.toInt\n        if (n < m) Left(-1)\n\
    \        else {\n            val sum = n.toLong + m.toLong\n            val avg\
    \ = sum / 2\n            val bin = Integer.toBinaryString(avg)\n            Right(bin)\n\
    \        }", "        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(-1)\n        else Right(math.round(n/m)*m)", "        val n = n.toInt\n\
    \        val m = m.toInt\n        if (n > m) {\n            Left(-1)\n       \
    \ } else {\n            val sum = n.toLong + m.toLong\n            val avg = sum\
    \ / 2\n            val bin = Integer.toBinaryString(avg)\n            Right(bin)\n\
    \        }", "        val n = n.toInt\n        val m = m.toInt\n        if (n\
    \ >= m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n    \
    \        val sum = (n + m) / 2\n            val bin = sum.toBinaryString\n   \
    \         val len = bin.length\n            val result = bin.take(len)\n     \
    \       Right(result)\n        }", "        val ns = n.toString.toInt\n      \
    \  val ms = m.toString.toInt\n        if(ns > ms) Left(-1)\n        else Right(scala.math.round(ns.toDouble/ms))",
  "        val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n      \
    \      Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val binary = avg.toBinaryString\n\
    \            Right(binary.toLong)\n        }", "        val nMinusM = (n - m).toInt\n\
    \        if (nMinusM < 0) Left(s\"$n is greater than $m\")\n        else if (nMinusM\
    \ == 0) Right(m)\n        else Left(s\"$n is greater than $m, but $nMinusM does\
    \ not divide $m\")", "        val n = math.abs(n)\n        val m = math.abs(m)\n\
    \        if (n > m) {\n            Left(-1)\n        } else {\n            val\
    \ sum = n.toLong + m.toLong\n            val avg = sum / 2\n            val bin\
    \ = math.pow(10, math.ceil(math.log10(avg)))\n            Right(bin.toLong)\n\
    \        }", "        val n = math.abs(n)\n        val m = math.abs(m)\n     \
    \   val sum = n to m by -1\n        val avg = sum.sum / sum.length\n        val\
    \ bin = math.pow(2,math.ceil(math.log2(avg)))\n        val rounded = math.round(avg\
    \ * bin) / bin\n        val result = Right(rounded)\n        if (n >= m) Left(-1)\n\
    \        else result", "        val n = n.toInt\n        val m = m.toInt\n   \
    \     if (n > m) {\n            Left(-1)\n        } else {\n            val sum\
    \ = n.toLong + m.toLong\n            val avg = sum / 2\n            val bin =\
    \ Integer.toBinaryString(avg)\n            Right(bin)\n        }", "        val\
    \ nToM = (n to m).toList\n        val nToMSum = nToM.foldLeft(0l){ (sum, elem)\
    \ => sum + elem}\n        val nToMCount = nToM.size\n        val nToMAvg = nToMSum\
    \ / nToMCount\n        val nToMBin = Integer.toBinaryString(nToMCount)\n     \
    \   val nToMBinAvg = Integer.toBinaryString(nToMAvg)\n        val nToMBinSum =\
    \ Integer.toBinaryString(nToMSum)\n        val nToMBinCount = Integer.toBinaryString(nToMCount)\n\
    \        val nToMBinBin = Integer.toBinaryString(nToMCount)\n        val nToMBinBinAvg\
    \ = Integer.toBinaryString(nToMAvg)\n        val nToMBinBinSum = Integer.toBinaryString(nToMSum)\n\
    \        val nToMBinBinCount = Integer.toBinaryString(nToMCount)\n        val\
    \ nToMBinBinBin = Integer.toBinaryString(nToMCount)\n        val nToMBinBinBinAvg\
    \ = Integer.toBinaryString(nToMAvg)\n        val nToMBinBinBinSum = Integer.toBinaryString(nToMSum)\n\
    \        val nToMBinBinBinCount = Integer.toBinaryString(nToMCount)\n        val\
    \ nToMBinBinBinBin = Integer.toBinaryString(nToMCount)\n        val nToMBinBinBinAvg\
    \ = Integer.toBinaryString(nToMAvg)\n        val nToMBinBinBinSum = Integer.toBinaryString(nToMSum)\n\
    \        val nToMBinBinBinCount = Integer.toBinaryString(nToMCount)\n        val\
    \ nToMBinBinBinBin = Integer.toBinaryString(nToMCount)\n        val nToMBinBinBinAvg\
    \ = Integer.toBinaryString(nToMAvg)\n        val nToMBinBinBinSum = Integer.toBinaryString(nToMSum)\n\
    \        val nToMBinBinBinCount = Integer.toBinaryString(nToMCount)\n        val\
    \ nToMBinBinBinBin = Integer.toBinaryString(nToMCount)\n        val nToMBinBinBinAvg\
    \ = Integer.toBinaryString(nToMAvg)\n        val nToMBinBinBinSum = Integer.toBinaryString(nToMSum)\n\
    \        val nToM", "        val n = n.toInt\n        val m = m.toInt\n      \
    \  if (n > m) {\n            Left(s\"$n is greater than $m\")\n        } else\
    \ {\n            val sum = n.toLong + m.toLong\n            val avg = sum / 2\n\
    \            val bin = Integer.toBinaryString(avg)\n            Right(bin)\n \
    \       }", "        val nToM : Long = m - n\n        val nToMInt : Long = math.ceil(nToM.toDouble)\n\
    \        val nToMBin = Integer.toBinaryString(nToMInt)\n        val nToMBinLen\
    \ = nToMBin .length\n        val nToMBinLenMinusOne = nToMBinLen - 1\n       \
    \ val nToMBinLenMinusOneDouble = nToMBinLenMinusOne * 2.0\n        val nToMBinLenMinusOneDoubleDouble\
    \ = nToMBinLenMinusOneDouble * 2.0\n        val nToMBinLenMinusOneDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDoubleDouble * 2.0\n        val nToMBinLenMinusOneDoubleDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDoubleDoubleDouble * 2.0\n        val nToMBinLenMinusOneDoubleDoubleDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDoubleDoubleDoubleDouble * 2.0\n        val nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDouble * 2.0\n        val\
    \ nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDouble = nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ * 2.0\n        val nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble * 2.0\n\
    \        val nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble *\
    \ 2.0\n        val nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble *\
    \ 2.0\n        val nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ * 2.0\n        val nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ * 2.0\n        val nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDouble", "        val avg = ((n + m) / 2).round\n\
    \        val binary = avg.toBinaryString\n        if (binary.length < 8) {\n \
    \           Left(s\"$binary\")\n        } else {\n            Right(avg)\n   \
    \     }", "        val n = math.ceil(n)\n        val m = math.ceil(m)\n      \
    \  if (n > m) {\n            Left(s\"$n is greater than $m\")\n        } else\
    \ {\n            val avg = n + (m - n) / 2\n            Right(math.ceil(avg).toBinaryString)\n\
    \        }", "        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val binary = binary(avg)\n        val result = if (sum > 0) Right(binary)\
    \ else Left(s\"$sum is not a positive integer\")\n        result", "        val\
    \ sum = n.toLong + m.toLong\n        val avg = sum / 2\n        val bin = Integer.toBinaryString(avg)\n\
    \        val result = if (bin.length == 1) \"0b\" + bin else bin\n        Right(result)",
  "        val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n      \
    \      Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val binary = avg.toBinaryString\n\
    \            Right(binary.padToLength(n + m.toInt, 0).toLong)\n        }", " \
    \       val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n     \
    \       Left(-1)\n        } else {\n            val sum = (n to m).map(i => i.toLong).sum\n\
    \            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val ns = n.toString.toInt\n    \
    \    val ms = m.toString.toInt\n        if(ns > ms) Left(s\"$ns is greater than\
    \ $ms\")\n        else Right(math.round(n/m)*m)", "        val n = n.toInt\n \
    \       val m = m.toInt\n        if (n > m) {\n            Left(-1)\n        }\
    \ else {\n            val sum = n.toLong + m.toLong\n            val avg = sum\
    \ / 2\n            val bin = Integer.toBinaryString(avg)\n            Right(bin)\n\
    \        }", "        val avg = n.toDouble / (m.toDouble - n.toDouble)\n     \
    \   val bin = math.round(avg).toBinaryString\n        if (bin.length < m.toString.length)\
    \ Left(bin) else Right(bin)", "        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n > m) {\n            Left(-1)\n        } else {\n            val\
    \ avg = ((n + m) / 2).round\n            val binary = binary(avg)\n          \
    \  Right(binary.toLong)\n        }", "        val sum = n.toLong + m.toLong\n\
    \        val avg = sum / 2\n        val bin = Integer.toBinaryString(avg)\n  \
    \      if (bin.charAt(bin.length - 1) == '1') Right(avg) else Left(s\"$sum is\
    \ not a multiple of 2\")", "        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n < m) Left(s\"$n is less than $m\")\n        else if (n == m) Right(n.toBinaryString)\n\
    \        else Left(s\"$n is greater than $m\")", "        val n = n.toInt\n  \
    \      val m = m.toInt\n        if (n > m) {\n            Left(-1)\n        }\
    \ else {\n            val sum = n.toLong + m.toLong\n            val avg = sum\
    \ / 2\n            val bin = Integer.toBinaryString(avg)\n            Right(bin)\n\
    \        }", "        val nToM = (n to m).toList\n        val nToMSum = n.toLong\
    \ + m.toLong\n        val nToMSumAsString = nToMSum.toBinaryString\n        val\
    \ nToMSumAsLong = Long.parseLong(nToMSumAsString)\n        val nToMSumAsLongAsString\
    \ = nToMSumAsLong.toBinaryString\n        val nToMSumAsLongAsStringAsEither =\
    \ Right(nToMSumAsLongAsString) \n        val nToMSumAsLongAsStringAsEitherAsRight\
    \ = Right(nToMSumAsLongAsStringAsEither)\n        val nToMSumAsLongAsStringAsEitherAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRight)\n        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRight)\n        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRight)\n        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight)\n       \
    \ val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight)\n\
    \        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight)\n\
    \        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight)\n\
    \        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight)\n\
    \        val nToMSumAsLongAs", "        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n > m) {\n            Left(-1)\n        } else {\n            val\
    \ sum = n.toLong + m.toLong\n            val avg = sum / 2\n            val bin\
    \ = Integer.toBinaryString(avg)\n            Right(bin)\n        }", "       \
    \ val nMinusM = n - m\n        val nPlusM = n + m\n        val nMinusMPlusM =\
    \ nMinusM + nPlusM\n        val nMinusMPlusMMinusM = nMinusM - nPlusM - m\n  \
    \      val nMinusMPlusMMinusMPlusM = nMinusM - nPlusM - m - m\n        val nMinusMPlusMMinusMPlusMMinusM\
    \ = nMinusM - nPlusM - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusM\
    \ = nMinusM - nPlusM - m - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusM\
    \ = nMinusM - nPlusM - m - m - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusM\
    \ = nMinusM - nPlusM - m - m - m - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusM\
    \ = nMinusM - nPlusM - m - m - m - m - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusM\
    \ = nMinusM - nPlusM - m - m - m - m - m - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusM\
    \ = nMinusM - nPlusM - m - m - m - m - m - m - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusM\
    \ = nMinusM - nPlusM - m - m - m - m - m - m - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusM\
    \ = nMinusM - nPlusM - m - m - m - m - m - m - m - m - m - m - m\n        val\
    \ nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusM\
    \ = nMin", "        val n = n.toInt\n        val m = m.toInt\n        if (n <=\
    \ m) Right(n.toBinaryString)\n        else Left(s\"$n is greater than $m\")",
  "        val n = n.toInt\n        val m = m.toInt\n        if (n < m) Left(s\"$n\
    \ is less than $m\")\n        else if (n == m) Right(n.toBinaryString)\n     \
    \   else Right(-1l)", "        val nMinusM = (n - m).toInt\n        val nPlusM\
    \ = (n + m).toInt\n        val nMinusMPlusM = (nMinusM + m).toInt\n        val\
    \ nMinusMPlusMMinusM = (nMinusM - m).toInt\n        val nMinusMPlusMMinusMPlusM\
    \ = (nMinusM - m + m).toInt\n        val nMinusMPlusMMinusMPlusMMinusM = (nMinusM\
    \ - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinusM = (nMinusM\
    \ - m - m - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinusMMinusM\
    \ = (nMinusM - m - m - m - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinusMMinusM\
    \ = (nMinusM - m - m - m - m - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinusMMinusM\
    \ = (nMinusM - m - m - m - m - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinusMMinusM\
    \ = (nMinusM - m - m - m - m - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinusMMinusM\
    \ = (nMinusM - m - m - m - m - m - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinusMMinusM\
    \ = (nMinusM - m - m - m - m - m - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinusMMinusM\
    \ = (nMinusM - m - m - m - m - m - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinusMMinusM\
    \ = (nMinusM - m - m - m - m - m - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinusMMinusM\
    \ = (nMinusM - m - m - m - m - m - m - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinus",
  "        val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n      \
    \      Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val binary = binary(avg)\n       \
    \     Right(binary.toLong)\n        }", "        val n = math.max(n.toInt, m.toInt)\n\
    \        val m = math.min(n.toInt, m.toInt)\n        val sum = n.toLong + m.toLong\n\
    \        val avg = sum / 2\n        val bin = Integer.toBinaryString(avg)\n  \
    \      val right = bin.dropRight(1)\n        val left = bin.drop(1)\n        val\
    \ result = if (right == left) Right(avg) else Left(s\"$n $m\")\n        result",
  "        val avg = ((n + m) / 2.0).toInt\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < 8) {\n            Right(bin)\n        } else {\n   \
    \         Left(s\"$bin is not a valid binary number\")\n        }", "        val\
    \ n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n            Left(-1)\n\
    \        } else {\n            val sum = n.toLong + m.toLong\n            val\
    \ avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n         \
    \   Right(bin)\n        }", "        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n >= m) {\n            Left(-1)\n        } else {\n            val\
    \ sum = n.toLong + m.toLong\n            val avg = sum / 2\n            val bin\
    \ = Integer.toBinaryString(avg)\n            Right(bin)\n        }", "       \
    \ val avg = ((n + m) / 2).round\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < 8) {\n            Left(s\"$bin is too short\")\n   \
    \     } else if (bin.length > 8) {\n            Right(s\"$bin is too long\")\n\
    \        } else {\n            Right(avg)\n        }", "        val nMinusM =\
    \ (n - m).toInt\n        if (nMinusM < 0) Left(s\"$n is greater than $m\")\n \
    \       else if (nMinusM == 0) Right(m)\n        else Left(s\"$n is greater than\
    \ $m, but $nMinusM integers skipped\")", "        val avg = ((n + m) / 2).round\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin.length < m) Left(s\"\
    $avg cannot be represented as a binary string of length $m\")\n        else if\
    \ (bin.length > m) Right(-1)\n        else Right(bin)", "        val n = n.toInt\n\
    \        val m = m.toInt\n        if (n <= m) Right(n.toBinaryString)\n      \
    \  else Left(s\"$n is greater than $m\")", "        val n1 = n.toInt\n       \
    \ val m1 = m.toInt\n        if(n1 > m1) Left(-1)\n        else Right(n.toString.reverse.foldLeft(0)((sum,\
    \ digit) => sum + digit.toInt)/m1)", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n < m) Left(-1)\n        else {\n            val sum =\
    \ n.toLong + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n > m) {\n            Left(s\"$n is greater than $m\")\n\
    \        } else {\n            val sum = (n to m).sum\n            val avg = sum\
    \ / 2\n            val bin = Integer.toBinaryString(avg)\n            Right(bin)\n\
    \        }", "        val n = n.toInt\n        val m = m.toInt\n        if (n\
    \ >= m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n    \
    \        val sum = (n to m).sum\n            val avg = sum / 2\n            val\
    \ bin = Integer.toBinaryString(avg)\n            Right(bin)\n        }", "   \
    \     val n = math.abs(n)\n        val m = math.abs(m)\n        if (n > m) {\n\
    \            Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val bin = math.pow(10, math.ceil(math.log10(avg)))\n\
    \            Right(bin.toLong)\n        }", "        val n = n.toInt\n       \
    \ val m = m.toInt\n        if (n > m) {\n            Left(-1)\n        } else\
    \ {\n            val sum = n.toLong + m.toLong\n            val avg = sum / 2\n\
    \            val bin = Integer.toBinaryString(avg)\n            Right(bin)\n \
    \       }", "        val n = n.toInt\n        val m = m.toInt\n        val sum\
    \ = n + m\n        val avg = sum / 2\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin == \"\") {\n            Right(bin)\n        } else if (bin ==\
    \ \"0\") {\n            Right(bin)\n        } else if (bin == \"1\") {\n     \
    \       Right(bin)\n        } else {\n            Left(s\"$bin is not a valid\
    \ binary number\")\n        }", "        val nToM = (n to m).toList\n        val\
    \ nToM2 = (nToM zip nToM).filter(_._2 > 0).map(_._1)\n        val nToM3 = nToM2.foldLeft(0l)\
    \ { (sum, v) => sum + v }\n        val nToM4 = nToM3 / 2\n        val nToM5 =\
    \ nToM4 / 2\n        val nToM6 = nToM5 / 2\n        val nToM7 = nToM6 / 2\n  \
    \      val nToM8 = nToM7 / 2\n        val nToM9 = nToM8 / 2\n        val nToM10\
    \ = nToM9 / 2\n        val nToM11 = nToM10 / 2\n        val nToM12 = nToM11 /\
    \ 2\n        val nToM13 = nToM12 / 2\n        val nToM14 = nToM13 / 2\n      \
    \  val nToM15 = nToM14 / 2\n        val nToM16 = nToM15 / 2\n        val nToM17\
    \ = nToM16 / 2\n        val nToM18 = nToM17 / 2\n        val nToM19 = nToM18 /\
    \ 2\n        val nToM20 = nToM19 / 2\n        val nToM21 = nToM20 / 2\n      \
    \  val nToM22 = nToM21 / 2\n        val nToM23 = nToM22 / 2\n        val nToM24\
    \ = nToM23 / 2\n        val nToM25 = nToM24 / 2\n        val nToM26 = nToM25 /\
    \ 2\n        val nToM27 = nToM26 / 2\n        val nToM28 = nToM27 / 2\n      \
    \  val nToM29 = nToM28 / 2\n        val nToM30 = nToM29 / 2\n        val nToM31\
    \ = nToM30 / 2\n        val nToM32 = nToM31 / 2\n        val nToM33 = nToM32 /\
    \ 2\n        val nToM34 = nToM33 / 2\n        val nToM35 = nToM34 / 2\n      \
    \  val nToM36 = nToM35 / 2\n        val nToM37 = nToM36 / 2\n        val nToM38\
    \ = n", "        val avg = ((n + m) / 2)\n        val binary = avg.toBinaryString\n\
    \        if (binary.length < 2) Right(binary.padToLength(2, \"0\"))\n        else\
    \ Left(s\"$binary\")", "        val n = math.abs(n)\n        val m = math.abs(m)\n\
    \        val sum = n + m\n        val avg = sum / 2\n        val bin = math.pow(2,math.ceil(math.log2(avg)))\n\
    \        val result = math.round(avg * bin)\n        val result = math.abs(result)\n\
    \        if (result > m) Left(-1)\n        else Right(result)", "        val n\
    \ = n.toInt\n        val m = m.toInt\n        if (n >= m) {\n            Left(-1)\n\
    \        } else {\n            val sum = n.toLong + m.toLong\n            val\
    \ avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n         \
    \   Right(bin)\n        }", "        val nBits = n.toBinaryString\n        val\
    \ mBits = m.toBinaryString\n        val nBitsLen = nBits.length\n        val mBitsLen\
    \ = mBits.length\n        val nBitsLenMinusOne = nBitsLen - 1\n        val mBitsLenMinusOne\
    \ = mBitsLen - 1\n        val nBitsLenMinusOneBits = nBitsLen - 1 - 1\n      \
    \  val mBitsLenMinusOneBits = mBitsLen - 1 - 1\n        val nBitsLenMinusOneBitsBits\
    \ = nBitsLen - 1 - 1 - 1\n        val mBitsLenMinusOneBitsBits = mBitsLen - 1\
    \ - 1 - 1\n        val nBitsLenMinusOneBitsBitsBits = nBitsLen - 1 - 1 - 1 - 1\n\
    \        val mBitsLenMinusOneBitsBitsBits = mBitsLen - 1 - 1 - 1 - 1\n       \
    \ val nBitsLenMinusOneBitsBitsBitsBits = nBitsLen - 1 - 1 - 1 - 1 - 1 - 1\n  \
    \      val mBitsLenMinusOneBitsBitsBitsBits = mBitsLen - 1 - 1 - 1 - 1 - 1 - 1\n\
    \        val nBitsLenMinusOneBitsBitsBitsBitsBits = nBitsLen - 1 - 1 - 1 - 1 -\
    \ 1 - 1 - 1 - 1\n        val mBitsLenMinusOneBitsBitsBitsBitsBits = mBitsLen -\
    \ 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val nBitsLenMinusOneBitsBitsBitsBitsBitsBits\
    \ = nBitsLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val mBitsLenMinusOneBitsBitsBitsBitsBitsBitsBits\
    \ = mBitsLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val nBitsLenMinusOneBitsBitsBitsBitsBitsBitsBitsBits\
    \ = nBitsLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val mBitsLenMinusOneBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = mBitsLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val\
    \ nBitsLenMinusOneBitsBitsBitsBitsBitsBit", "        val n = n.toInt\n       \
    \ val m = m.toInt\n        if (n <= m) Right(n.toBinaryString)\n        else Left(s\"\
    $n is greater than $m\")", "        val nMinusM = (n - m).toInt\n        val nPlusM\
    \ = (n + m).toInt\n        val nMinusMPlusM = (nMinusM + m).toInt\n        val\
    \ nMinusMPlusMPlusM = (nMinusMPlusM + m).toInt\n        val nMinusMPlusMPlusMPlusM\
    \ = (nMinusMPlusMPlusM + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusM = (nMinusMPlusMPlusMPlusM\
    \ + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusM = (nMinusMPlusMPlusMPlusM\
    \ + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusM = (nMinusMPlusMPlusMPlusM\
    \ + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusM = (nMinusMPlusMPlusMPlusM\
    \ + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM = (nMinusMPlusMPlusMPlusM\
    \ + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM = (nMinusMPlusMPlusMPlusM\
    \ + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM = (nMinusMPlusMPlusMPlusM\
    \ + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM = (nMinusMPlusMPlusMPlusM\
    \ + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM\
    \ = (nMinusMPlusMPlusMPlusM + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM\
    \ = (nMinusMPlusMPlusMPlusM + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM\
    \ = (nMinusMPlusMPlusMPlusM + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM\
    \ = (", "        val sum = n + m\n        val avg = sum / 2\n        val binary\
    \ = binary(avg)\n        if (binary == -1l) Left(s\"$avg cannot be represented\
    \ in binary\")\n        else Right(binary)", "        val n = n.toInt\n      \
    \  val m = m.toInt\n        val avg = ((n + m) / 2)\n        val binary = avg.toBinaryString\n\
    \        val result = Right(binary.toLong)\n        if (n > m) {\n           \
    \ Left(s\"$n $m $avg\")\n        } else {\n            result\n        }", " \
    \       val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n     \
    \       Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val binary = Integer.toBinaryString(avg)\n\
    \            Right(binary)\n        }", "        val n = n.toInt\n        val\
    \ m = m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n\
    \            val sum = n.toLong + m.toLong\n            val avg = sum / 2\n  \
    \          val binary = Integer.toBinaryString(avg)\n            Right(binary.toLong)\n\
    \        }", "        val n = n.toInt\n        val m = m.toInt\n        if (n\
    \ > m) {\n            Left(-1)\n        } else {\n            val sum = (n to\
    \ m).foldLeft(0l){ (sum, num) => sum + num }\n            val avg = sum / m.toInt\n\
    \            val bin = Integer.toBinaryString(avg)\n            Right(bin)\n \
    \       }", "        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n    \
    \        val sum = n.toLong + m.toLong\n            val avg = sum / 2\n      \
    \      val binary = avg.toBinaryString\n            Right(binary.toLong)\n   \
    \     }", "        val n = n.toInt\n        val m = m.toInt\n        if (n > m)\
    \ {\n            Left(-1)\n        } else {\n            val sum = n.toLong +\
    \ m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n    \
    \        val avg = n.toDouble / m.toDouble\n            val bin = math.ceil(avg).toBinaryString\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n    \
    \        val sum = n.toLong + m.toLong\n            val avg = sum / 2\n      \
    \      val binary = binary(avg)\n            Right(binary.toInt)\n        }",
  "        val n = n.toInt\n        val m = m.toInt\n        val sum = n.toLong +\
    \ m.toLong\n        val avg = sum / 2\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin == \"\") Right(avg)\n        else Left(bin)", "        val n\
    \ = n.toInt\n        val m = m.toInt\n        if (n >= m) Left(-1)\n        else\
    \ Right((n+m)/2)", "        val n = n.toInt\n        val m = m.toInt\n       \
    \ if (n > m) Left(-1)\n        else Right(n.toBinaryString() + m.toBinaryString().reverse)",
  "        val nToM = (n+m)/2\n        val nToMBin = Integer.toBinaryString(nToM)\n\
    \        val nToMBinLen = nToMBin .length\n        val mToNBin = Integer.toBinaryString(m)\n\
    \        val mToNBinLen = mToNBin .length\n        val nToMBinLen = nToMBinLen\
    \ - mToNBinLen\n        val nToMBin = if (nToMBinLen < 0) \"0\" + nToMBin else\
    \ nToMBin\n        val mToNBin = if (mToNBinLen < 0) \"0\" + mToNBin else mToNBin\n\
    \        val nToMBin = if (nToMBinLen < 0) \"0\" + nToMBin else nToMBin\n    \
    \    val mToNBin = if (mToNBinLen < 0) \"0\" + mToNBin else mToNBin\n        val\
    \ nToMBin = if (nToMBinLen < 0) \"0\" + nToMBin else nToMBin\n        val mToNBin\
    \ = if (mToNBinLen < 0) \"0\" + mToNBin else mToNBin\n        val nToMBin = if\
    \ (nToMBinLen < 0) \"0\" + nToMBin else nToMBin\n        val mToNBin = if (mToNBinLen\
    \ < 0) \"0\" + mToNBin else mToNBin\n        val nToMBin = if (nToMBinLen < 0)\
    \ \"0\" + nToMBin else nToMBin\n        val mToNBin = if (mToNBinLen < 0) \"0\"\
    \ + mToNBin else mToNBin\n        val nToMBin = if (nToMBinLen < 0) \"0\" + nToMBin\
    \ else nToMBin\n        val mToNBin = if (mToNBinLen < 0) \"0\" + mToNBin else\
    \ mToNBin\n        val nToMBin = if (nToMBinLen < 0) \"0\" + nToMBin else nToMBin\n\
    \        val mToNBin = if (mToNBinLen < 0) \"0\" + mToNBin else mToNBin\n    \
    \    val nToMBin = if (nToMBinLen < 0) \"0\" + nToMBin else nToMBin\n        val\
    \ mToNBin = ", "        val n = n.toInt\n        val m = m.toInt\n        if (n\
    \ > m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val nMinusM = (n - m).toInt\n  \
    \      if (nMinusM < 0) Left(s\"$n is greater than $m\")\n        else if (nMinusM\
    \ == 0) Right(m)\n        else Left(s\"$n is greater than $m and cannot be averaged\"\
    )", "        val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n\
    \            Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n1 = n.toInt\n        val m1\
    \ = m.toInt\n        if(n1 > m1) Left(-1)\n        else Right(scala.math.round(n1/m1)*m1)",
  "        val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n  \
    \      val nBitsLen = nBits.length\n        val mBitsLen = mBits.length\n    \
    \    val nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n        val nBitsSumLen\
    \ = nBitsSum.toBinaryString.length\n        val mBitsSumLen = mBitsSum.toBinaryString.length\n\
    \        val nBitsSumBits = nBitsSum.toBinaryString\n        val mBitsSumBits\
    \ = mBitsSum.toBinaryString\n        val nBitsSumBitsLen = nBitsSumBits.length\n\
    \        val mBitsSumBitsLen = mBitsSumBits.length\n        val nBitsSumBitsSum\
    \ = n.toInt.toBinaryString\n        val mBitsSumBitsSum = m.toInt.toBinaryString\n\
    \        val nBitsSumBitsSumLen = nBitsSumBitsSum.length\n        val mBitsSumBitsSumLen\
    \ = mBitsSumBitsSum.length\n        val nBitsSumBitsSumBits = n.toInt.toBinaryString\n\
    \        val mBitsSumBitsSumBits = m.toInt.toBinaryString\n        val nBitsSumBitsSumBitsLen\
    \ = nBitsSumBitsSumBits.length\n        val mBitsSumBitsSumBitsLen = mBitsSumBitsSumBits.length\n\
    \        val nBitsSumBitsSumBitsSum = n.toInt.toBinaryString\n        val mBitsSumBitsSumBitsSum\
    \ = m.toInt.toBinaryString\n        val nBitsSumBitsSumBitsSumLen = nBitsSumBitsSumBitsSum.length\n\
    \        val mBitsSumBitsSumBitsSumLen = mBitsSumBitsSumBitsSum.length\n     \
    \   val nBitsSumBitsSumBitsSumBits = n.toInt.toBinaryString\n        val mBitsSumBitsSumBitsSumBits\
    \ = m.toInt.toBinaryString\n        val nBitsSumBitsSumBitsSumBitsLen = nBitsSumBitsSumBitsSumBits.length\n\
    \        val mBitsSumBitsSumBitsSumBitsLen = mBitsSumBitsSumBitsSumBitsLen\n \
    \       val nBits", "        val n1 = n.toInt\n        val m1 = m.toInt\n    \
    \    if (n1 > m1) {\n            Left(-1)\n        } else {\n            val n2\
    \ = n1.toInt\n            val m2 = m1.toInt\n            val sum = n2 +  m2\n\
    \            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = math.abs(n)\n        val\
    \ m = math.abs(m)\n        if (n > m) {\n            Left(-1)\n        } else\
    \ {\n            val sum = (n+m)/2\n            val binary = sum.toBinaryString\n\
    \            Right(binary.padToLength(binary.length, \"0\"))\n        }"]
stop_tokens:
- "\n    }\n"
