name: HumanEval_31_is_prime
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return true if a given number is prime, and false otherwise.\n    // >>>\
  \ isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n   \
  \ // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    // (true)\n\
  \    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n    // (false)\n\
  \    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n : Long) : Boolean =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) ==\
  \ (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) ==\
  \ (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
  \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) ==\
  \ (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) ==\
  \ (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) ==\
  \ (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
  \ == (false));\n    }\n\n}\n"
completions: ["        val primes = mutable.ArrayBuffer.empty[Long]\n        for (i\
    \ <- 2 to Math.sqrt(n)) {\n            if (n % i == 0) {\n                primes\
    \ += i\n            }\n        }\n        primes.forall(n => n % n == 0)", " \
    \       val isPrime = (2l) until (n) contains n\n        n match {\n         \
    \   case 0 => false\n            case _ => isPrime\n        }", "        val primes\
    \ = mutable.ArrayBuffer(2l) ++\n            mutable.ArrayBuffer(3l) ++\n     \
    \       mutable.ArrayBuffer(5l) ++\n            mutable.ArrayBuffer(7l) ++\n \
    \           mutable.ArrayBuffer(11l) ++\n            mutable.ArrayBuffer(13l)\
    \ ++\n            mutable.ArrayBuffer(17l) ++\n            mutable.ArrayBuffer(19l)\
    \ ++\n            mutable.ArrayBuffer(23l) ++\n            mutable.ArrayBuffer(29l)\
    \ ++\n            mutable.ArrayBuffer(31l) ++\n            mutable.ArrayBuffer(37l)\
    \ ++\n            mutable.ArrayBuffer(41l) ++\n            mutable.ArrayBuffer(43l)\
    \ ++\n            mutable.ArrayBuffer(47l) ++\n            mutable.ArrayBuffer(53l)\
    \ ++\n            mutable.ArrayBuffer(59l) ++\n            mutable.ArrayBuffer(61l)\
    \ ++\n            mutable.ArrayBuffer(67l) ++\n            mutable.ArrayBuffer(71l)\
    \ ++\n            mutable.ArrayBuffer(73l) ++\n            mutable.ArrayBuffer(79l)\
    \ ++\n            mutable.ArrayBuffer(83l) ++\n            mutable.ArrayBuffer(89l)\
    \ ++\n            mutable.ArrayBuffer(97l) ++\n            mutable.ArrayBuffer(101l)\
    \ ++\n            mutable.ArrayBuffer(103l) ++\n            mutable.ArrayBuffer(107l)\
    \ ++\n            mutable.ArrayBuffer(109l) ++\n            mutable.ArrayBuffer(117l)\
    \ ++\n            mutable.ArrayBuffer(121l) ++\n            mutable.ArrayBuffer(123l)\
    \ ++\n            mutable.ArrayBuffer(127l) ++\n            mutable.ArrayBuffer(129l)\
    \ ++\n            mutable.ArrayBuffer(131l) ++\n            mutable.ArrayBuffer(137l)\
    \ ++\n            mutable.ArrayBuffer(139l) ++\n            mutable.ArrayBuffer(147l)\
    \ ++\n            mutable.ArrayBuffer(151l) ++\n            mutable.ArrayBuffer(157l)\
    \ ++\n            mutable.ArrayBuffer(163l) ++\n            mutable.ArrayBuffer(167l)\
    \ ++\n            mutable.ArrayBuffer(169l) ++\n            mutable.ArrayBuffer(173l)\
    \ ++\n            mutable.ArrayBuffer(179l) ++\n            mutable.ArrayBuffer(181l)\
    \ ++\n            mutable.ArrayBuffer(191l) ++\n            mutable.ArrayBuffer(193l)\
    \ ++\n            mutable.ArrayBuffer(197l) ++\n            mutable.ArrayBuffer(199l)\
    \ ++\n            mut", "        val isPrime = (2l) until n map (n => n % _ ==\
    \ 0) reduceLeft (_ || _)\n        isPrime", "        val isPrime = (2l) until\
    \ n map (x => if (n % x == 0) false else true) reduceLeft (_ || _)\n        isPrime",
  "        val sqrtN = math.sqrt(n)\n        val isPrime = true\n        for (i <-\
    \ 2 to sqrtN) {\n            if (n % i == 0) {\n                isPrime = false\n\
    \                break\n            }\n        }\n        return isPrime", " \
    \       val isPrime = (2l) until (n) contains n\n        val primes = mutable.ArrayBuffer(2l)\n\
    \        primes.+=(n/2)\n        primes.+=(n/3)\n        primes.+=(n/5)\n    \
    \    primes.+=(n/7)\n        primes.+=(n/11)\n        primes.+=(n/13)\n      \
    \  primes.+=(n/17)\n        primes.+=(n/19)\n        primes.+=(n/23)\n       \
    \ primes.+=(n/29)\n        primes.+=(n/31)\n        primes.+=(n/37)\n        primes.+=(n/39)\n\
    \        primes.+=(n/47)\n        primes.+=(n/59)\n        primes.+=(n/61)\n \
    \       primes.+=(n/67)\n        primes.+=(n/71)\n        primes.+=(n/73)\n  \
    \      primes.+=(n/79)\n        primes.+=(n/83)\n        primes.+=(n/89)\n   \
    \     primes.+=(n/97)\n        primes.+=(n/101)\n        primes.+=(n/103)\n  \
    \      primes.+=(n/107)\n        primes.+=(n/109)\n        primes.+=(n/113)\n\
    \        primes.+=(n/127)\n        primes.+=(n/131)\n        primes.+=(n/137)\n\
    \        primes.+=(n/139)\n        primes.+=(n/149)\n        primes.+=(n/151)\n\
    \        primes.+=(n/157)\n        primes.+=(n/163)\n        primes.+=(n/167)\n\
    \        primes.+=(n/173)\n        primes.+=(n/179)\n        primes.+=(n/181)\n\
    \        primes.+=(n/191)\n        primes.+=(n/193)\n        primes.+=(n/197)\n\
    \        primes.+=(n/19)\n        primes.+=(n/23)\n        primes.+=(n/29)\n \
    \       primes.+=(n/31)\n        primes.+=(n/37)\n        primes.+=(n/39)\n  \
    \      primes.+=(n/47)\n        primes.+=(n/59)\n        primes.+=(n/61)\n   \
    \     primes.+=(n/67)\n        primes.+=(n/71)\n        primes.+=(n/73)\n", " \
    \       val isPrime = n <= 1l\n        if(isPrime) true\n        else {\n    \
    \        val sqrt = (1l+n).toInt\n            for(i <- 2l to sqrt) {\n       \
    \         if(n % i == 0) false\n            }\n            true\n        }", " \
    \       val isPrime = (2l) until (n) forall {\n            x => n % x == 0\n \
    \       }\n        isPrime", "        val i = 2l\n        val s = 2l\n       \
    \ while (i <= n / 2) {\n            if (n % i == 0) {\n                s = i\n\
    \            }\n            i += 1\n        }\n        if (s == 2l) {\n      \
    \      true\n        } else {\n            false\n        }", "        val isPrime\
    \ = n <= 1l\n        if (isPrime) true\n        else { \n            val sqrt\
    \ = (1l+n)/2l\n            val isPrime2 = isPrime(sqrt)\n            if (isPrime2)\
    \ true\n            else { \n                val sqrt2 = sqrt * sqrt\n       \
    \         val isPrime3 = isPrime(sqrt2)\n                if (isPrime3) true\n\
    \                else false\n            }\n        }", "        val sqrt = (1l*Math.sqrt(n)).toInt\n\
    \        val primes = mutable.ArrayBuffer(2l)\n        val primeFactors = mutable.ArrayBuffer(2l)\n\
    \        val isPrime = true\n        for (i <- 2l to sqrt) {\n            if (n\
    \ % i == 0) {\n                primes += i\n                primeFactors += i\n\
    \            }\n        }\n        primes.forall(x => primeFactors.contains(x))",
  "        val primes = mutable.ArrayBuffer(2l)\n        val isPrime = true\n    \
    \    for(i <- 2l to Math.sqrt(n).toInt) {\n            if(n % i == 0) {\n    \
    \            isPrime = false\n                break\n            }\n         \
    \   primes += i\n        }\n        isPrime", "        val isPrime = (2l) until\
    \ (n) contains n\n        n match {\n            case x if isPrime => true\n \
    \           case x => false\n        }", "        val isPrime = (2l) until (n)\
    \ contains n\n        val primes = mutable.Set[Long]()\n        primes.add(2l)\n\
    \        primes.add(3l)\n        primes.add(5l)\n        primes.add(7l)\n    \
    \    primes.add(11l)\n        primes.add(13441l)\n        primes.add(61l)\n  \
    \      primes.add(4l)\n        primes.add(1l)\n        primes.contains(n)", " \
    \       val i = 2l\n        var isPrime = true\n        while (i * i <= n) {\n\
    \            if (n % i == 0) {\n                isPrime = false\n            \
    \    break\n            }\n            i += 1\n        }\n        isPrime", " \
    \       val isPrime = (2l) until n map (x => if (n % x == 0) false else true)\
    \ reduceLeft (_ || _)\n        isPrime", "        val isPrime = (2l) until n.toInt\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        primes += 2l\n\
    \        primes += 3l\n        primes += 5l\n        primes += 7l\n        primes\
    \ += 11l\n        primes += 13l\n        primes += 17l\n        primes += 19l\n\
    \        primes += 23l\n        primes += 29l\n        primes += 31l\n       \
    \ primes += 37l\n        primes += 41l\n        primes += 43l\n        primes\
    \ += 47l\n        primes += 53l\n        primes += 59l\n        primes += 61l\n\
    \        primes += 67l\n        primes += 71l\n        primes += 73l\n       \
    \ primes += 79l\n        primes += 83l\n        primes += 89l\n        primes\
    \ += 97l\n        primes += 101l\n        primes += 103l\n        primes += 107l\n\
    \        primes += 109l\n        primes += 113l\n        primes += 127l\n    \
    \    primes += 131l\n        primes += 137l\n        primes += 139l\n        primes\
    \ += 147l\n        primes += 151l\n        primes += 157l\n        primes += 163l\n\
    \        primes += 167l\n        primes += 173l\n        primes += 179l\n    \
    \    primes += 181l\n        primes += 191l\n        primes += 193l\n        primes\
    \ += 197l\n        primes += 199l\n        primes += 211l\n        primes += 223l\n\
    \        primes += 227l\n        primes += 229l\n        primes += 233l\n    \
    \    primes += 239l\n        primes += 241l\n        primes += 247l\n        primes\
    \ += 251l\n        primes += 257l\n        primes += 263l\n        primes += 269l\n\
    \        primes += 271l\n        primes += 277l\n        primes += 281l\n    \
    \    primes += 283l\n        primes += 293l\n        primes += 307l\n        primes\
    \ += 311l\n        primes += 313l\n        primes += 317l\n        primes += 321l\n\
    \        primes += 327l\n        primes += 331l\n        primes += 337l\n    \
    \    primes += 347l\n        primes += 349l\n        primes += 353l\n        primes\
    \ += 359l\n        primes += 367l\n        primes += 373l\n        primes += 379",
  "        val primes = mutable.Set[Long]()\n        val divisors = mutable.Set[Long]()\n\
    \        divisors.add(2l)\n        divisors.add(3l)\n        divisors.add(5l)\n\
    \        divisors.add(7l)\n        divisors.add(11l)\n        divisors.add(13l)\n\
    \        divisors.add(17l)\n        divisors.add(19l)\n        divisors.add(23l)\n\
    \        divisors.add(29l)\n        divisors.add(31l)\n        divisors.add(37l)\n\
    \        divisors.add(41l)\n        divisors.add(43l)\n        divisors.add(47l)\n\
    \        divisors.add(53l)\n        divisors.add(59l)\n        divisors.add(61l)\n\
    \        divisors.add(67l)\n        divisors.add(71l)\n        divisors.add(73l)\n\
    \        divisors.add(79l)\n        divisors.add(83l)\n        divisors.add(89l)\n\
    \        divisors.add(97l)\n        divisors.add(101l)\n        divisors.add(103l)\n\
    \        divisors.add(107l)\n        divisors.add(109l)\n        divisors.add(113l)\n\
    \        divisors.add(127l)\n        divisors.add(131l)\n        divisors.add(137l)\n\
    \        divisors.add(139l)\n        divisors.add(147l)\n        divisors.add(151l)\n\
    \        divisors.add(157l)\n        divisors.add(163l)\n        divisors.add(167l)\n\
    \        divisors.add(173l)\n        divisors.add(179l)\n        divisors.add(181l)\n\
    \        divisors.add(191l)\n        divisors.add(193l)\n        divisors.add(197l)\n\
    \        divisors.add(199l)\n        divisors.add(211l)\n        divisors.add(223l)\n\
    \        divisors.add(227l)\n        divisors.add(229l)\n        divisors.add(233l)\n\
    \        divisors.add(239l)\n        divisors.add(241l)\n        divisors.add(251l)\n\
    \        divisors.add(257l)\n        divisors.add(263l)\n        divisors.add(269l)\n\
    \        divisors.add(271l)\n        divisors.add(277l)\n        divisors.add(281l)\n\
    \        divisors.add(283l)\n        divisors.add(293l)\n        divisors.add(307l)\n\
    \        divisors.add(311l)\n        divisors.add(313l)\n        divisors.add(317l)\n\
    \        divisors.add(331l)\n        divisors.add(337l)\n        divisors.add(347l)\n\
    \        divisors.add(349l)\n        divisors.add(353l)\n        divisors.add(359l)\n\
    \        divisors.add(367l)\n        divisors.add(373l)\n        divisors.add(379l)\n\
    \        divisors.add(383l)\n        divisors.add(389l)\n        divisors.add(397l)\n\
    \        ", "        val i = 2l\n        val s = 2l\n        while (i <= n / 2)\
    \ {\n            if (n % i == 0) {\n                return false\n           \
    \ }\n            s += i\n            i += 2l\n        }\n        return true",
  "        val primes = mutable.ArrayBuffer(2l)\n        val isPrime = mutable.ArrayBuffer(2l)\n\
    \        val isNotPrime = mutable.ArrayBuffer(2l)\n        val isPrimeIter = Iterator.continually(primes.takeWhile(_\
    \ <= n).last)\n        val isNotPrimeIter = Iterator.continually(isNotPrime.takeWhile(_\
    \ <= n).last)\n        val isPrimeIter2 = Iterator.continually(isPrime.takeWhile(_\
    \ <= n).last)\n        val isNotPrimeIter2 = Iterator.continually(isNotPrime.takeWhile(_\
    \ <= n).last)\n        val isPrimeIter3 = Iterator.continually(isPrime.takeWhile(_\
    \ <= n).last)\n        val isNotPrimeIter3 = Iterator.continually(isNotPrime.takeWhile(_\
    \ <= n).last)\n        val isPrimeIter4 = Iterator.continually(isPrime.takeWhile(_\
    \ <= n).last)\n        val isNotPrimeIter4 = Iterator.continually(isNotPrime.takeWhile(_\
    \ <= n).last)\n        val isPrimeIter5 = Iterator.continually(isPrime.takeWhile(_\
    \ <= n).last)\n        val isNotPrimeIter5 = Iterator.continually(isNotPrime.takeWhile(_\
    \ <= n).last)\n        val isPrimeIter6 = Iterator.continually(isPrime.takeWhile(_\
    \ <= n).last)\n        val isNotPrimeIter6 = Iterator.continually(isNotPrime.takeWhile(_\
    \ <= n).last)\n        val isPrimeIter7 = Iterator.continually(isPrime.takeWhile(_\
    \ <= n).last)\n        val isNotPrimeIter7 = Iterator.continually(isNotPrime.takeWhile(_\
    \ <= n).last)\n        val isPrimeIter8 = Iterator.continually(isPrime.takeWhile(_\
    \ <= n).last)\n        val isNotPrimeIter8 = Iterator.continually(isNotPrime.takeWhile(_\
    \ <= n).last)\n        val isPrimeIter9 = Iterator.continually(isPrime.takeWhile(_\
    \ <= n).last)\n        val isNotPrimeIter9 = Iterator.continually(isNotPrime.takeWhile(_\
    \ <= n).last)\n        val isPrimeIter10 = Iterator.continually(isPrime.takeWhile(_\
    \ <= n).last)\n        ", "        val isPrime = (2l) until n map (x => if (n\
    \ % x == 0) false else true) reduceLeft (_ || _)\n        isPrime", '        val
    isPrime = (2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l',
  "        val primes = mutable.ArrayBuffer(2l)\n        val isPrime = mutable.ArrayBuffer(true)\n\
    \        for (i <- 2l until n by 2) {\n            if (n % i == 0) {\n       \
    \         primes += i\n                isPrime += false\n            }\n     \
    \   }\n        isPrime.last", "        val isPrime = n <= 1l\n        if (isPrime)\
    \ {\n            val isPrime = n <= 1l\n            if (isPrime) {\n         \
    \       val isPrime = n <= 1l\n                if (isPrime) {\n              \
    \      val isPrime = n <= 1l\n                    if (isPrime) {\n           \
    \             val isPrime = n <= 1l\n                        if (isPrime) {\n\
    \                            val isPrime = n <= 1l\n                         \
    \   if (isPrime) {\n                                val isPrime = n <= 1l\n  \
    \                              if (isPrime) {\n                              \
    \      val isPrime = n <= 1l\n                                    if (isPrime)\
    \ {\n                                        val isPrime = n <= 1l\n         \
    \                               if (isPrime) {\n                             \
    \               val isPrime = n <= 1l\n                                      \
    \      if (isPrime) {\n                                                val isPrime\
    \ = n <= 1l\n                                                if (isPrime) {\n\
    \                                                    val isPrime = n <= 1l\n \
    \                                                   if (isPrime) {\n         \
    \                                               val isPrime = n <= 1l\n      \
    \                                                  if (isPrime) {\n          \
    \                                                  val isPrime = n <= 1l\n   \
    \                                                         if (isPrime) {\n   \
    \                                                             val isPrime = n\
    \ <= 1l\n                                                                if (isPrime)\
    \ {\n                                                                    val isPrime\
    \ = n <= 1l\n                                                                \
    \    if (isPrime) {\n                                                        \
    \                val isPrime = n <= 1l\n                                     \
    \                                   if (isPrime) {\n                         \
    \                                                   val isPrime = n <= 1l\n  \
    \                                                                          if\
    \ (isPrime) {\n                                                              \
    \                  val isPrime = n <= 1l\n                                   \
    \                                             if (isPrime) {\n               \
    \                                                                     val isPrime\
    \ = n <= 1l\n                                                                \
    \                    if (isPrime) {\n                                        \
    \                                                val isPrime = n <= 1l\n     \
    \                                                                            \
    \       if (isPrime) {\n                                                     \
    \                                       val isPrime = n <= 1l\n              \
    \                                                                            \
    \  if (isPrime) {\n                                                          \
    \                                      val isPrime = n <= 1l\n               \
    \                                                                            \
    \     if (isPrime) {\n                                                       \
    \                                             val isPrime = n <= 1l\n        \
    \                                                                            \
    \                if (isPrime) {\n                                            \
    \                                                            val isPrime = n <=\
    \ 1l\n                                                                       \
    \                                 if (isPrime) {\n                           \
    \                                                                            \
    \     val isPrime = n <= 1l\n                                                \
    \                                                            if (isPrime) {\n\
    \                                                                            \
    \                                    val isPrime = n <= 1l\n                 \
    \                                                                            \
    \                   if (isPrime) {\n                                         \
    \                                                                           val\
    \ isPrime = n <= 1l\n                                                        \
    \                                                            ", "        val isPrime\
    \ = (2l) until (n) contains n\n        val isPrime2 = isPrime filter (_ % 2 ==\
    \ 0)\n        val isPrime3 = isPrime filter (_ % 3 == 0)\n        val isPrime4\
    \ = isPrime filter (_ % 4 == 0)\n        val isPrime5 = isPrime filter (_ % 5\
    \ == 0)\n        val isPrime6 = isPrime filter (_ % 6 == 0)\n        val isPrime7\
    \ = isPrime filter (_ % 7 == 0)\n        val isPrime8 = isPrime filter (_ % 8\
    \ == 0)\n        val isPrime9 = isPrime filter (_ % 9 == 0)\n        val isPrime10\
    \ = isPrime filter (_ % 10 == 0)\n        val isPrime11 = isPrime filter (_ %\
    \ 11 == 0)\n        val isPrime12 = isPrime filter (_ % 12 == 0)\n        val\
    \ isPrime13 = isPrime filter (_ % 13 == 0)\n        val isPrime14 = isPrime filter\
    \ (_ % 14 == 0)\n        val isPrime15 = isPrime filter (_ % 15 == 0)\n      \
    \  val isPrime16 = isPrime filter (_ % 16 == 0)\n        val isPrime17 = isPrime\
    \ filter (_ % 17 == 0)\n        val isPrime18 = isPrime filter (_ % 18 == 0)\n\
    \        val isPrime19 = isPrime filter (_ % 19 == 0)\n        val isPrime20 =\
    \ isPrime filter (_ % 20 == 0)\n        val isPrime21 = isPrime filter (_ % 21\
    \ == 0)\n        val isPrime22 = isPrime filter (_ % 22 == 0)\n        val isPrime23\
    \ = isPrime filter (_ % 23 == 0)\n        val isPrime24 = isPrime filter (_ %\
    \ 24 == 0)\n        val isPrime25 = isPrime filter (_ % 25 == 0)\n        val\
    \ isPrime26 = isPrime filter (_ % 26 == 0)\n        val isPrime27 = isPrime filter\
    \ (_ % 27 == 0)\n        val isPrime28 = isPrime filter (_ % 28 == 0)\n      \
    \  val isPrime29 = isPrime filter (_ % 29 == 0)\n        val isPrime30 = isPrime\
    \ filter (_ % 30 == 0)\n        val isPri", "        val isPrime = (2l) until\
    \ n map (x => n % x == 0) reduceLeft (_ || _)\n        n <= 2l", "        val\
    \ primes = mutable.ArrayBuffer(2l) ++\n            mutable.ArrayBuffer(3l) ++\n\
    \            mutable.ArrayBuffer(5l) ++\n            mutable.ArrayBuffer(7l) ++\n\
    \            mutable.ArrayBuffer(11l) ++\n            mutable.ArrayBuffer(13l)\
    \ ++\n            mutable.ArrayBuffer(17l) ++\n            mutable.ArrayBuffer(19l)\
    \ ++\n            mutable.ArrayBuffer(23l) ++\n            mutable.ArrayBuffer(29l)\
    \ ++\n            mutable.ArrayBuffer(31l) ++\n            mutable.ArrayBuffer(37l)\
    \ ++\n            mutable.ArrayBuffer(41l) ++\n            mutable.ArrayBuffer(43l)\
    \ ++\n            mutable.ArrayBuffer(47l) ++\n            mutable.ArrayBuffer(53l)\
    \ ++\n            mutable.ArrayBuffer(59l) ++\n            mutable.ArrayBuffer(61l)\
    \ ++\n            mutable.ArrayBuffer(67l) ++\n            mutable.ArrayBuffer(71l)\
    \ ++\n            mutable.ArrayBuffer(73l) ++\n            mutable.ArrayBuffer(79l)\
    \ ++\n            mutable.ArrayBuffer(83l) ++\n            mutable.ArrayBuffer(89l)\
    \ ++\n            mutable.ArrayBuffer(97l) ++\n            mutable.ArrayBuffer(101l)\
    \ ++\n            mutable.ArrayBuffer(103l) ++\n            mutable.ArrayBuffer(107l)\
    \ ++\n            mutable.ArrayBuffer(109l) ++\n            mutable.ArrayBuffer(117l)\
    \ ++\n            mutable.ArrayBuffer(121l) ++\n            mutable.ArrayBuffer(123l)\
    \ ++\n            mutable.ArrayBuffer(127l) ++\n            mutable.ArrayBuffer(129l)\
    \ ++\n            mutable.ArrayBuffer(131l) ++\n            mutable.ArrayBuffer(137l)\
    \ ++\n            mutable.ArrayBuffer(139l) ++\n            mutable.ArrayBuffer(149l)\
    \ ++\n            mutable.ArrayBuffer(151l) ++\n            mutable.ArrayBuffer(157l)\
    \ ++\n            mutable.ArrayBuffer(163l) ++\n            mutable.ArrayBuffer(167l)\
    \ ++\n            mutable.ArrayBuffer(169l) ++\n            mutable.ArrayBuffer(173l)\
    \ ++\n            mutable.ArrayBuffer(179l) ++\n            mutable.ArrayBuffer(181l)\
    \ ++\n            mutable.ArrayBuffer(191l) ++\n            mutable.ArrayBuffer(193l)\
    \ ++\n            mutable.ArrayBuffer(197l) ++\n            mutable.ArrayBuffer(199l)\
    \ ++\n            mut", "        val primes = mutable.ArrayBuffer(2l)\n      \
    \  val limit = (2l * n).toInt\n        var i = 2l\n        while (i <= limit)\
    \ {\n            if (n % i == 0) {\n                primes += i\n            }\n\
    \            i += 1\n        }\n        primes.contains(n)", "        val isPrime\
    \ = (2l) until (n) contains n\n        n match {\n            case 0 | 1 => true\n\
    \            case _ => isPrime\n        }", "        val primes = mutable.ArrayBuffer(2l)\
    \ ++\n            mutable.ArrayBuffer(3l) ++\n            mutable.ArrayBuffer(5l)\
    \ ++\n            mutable.ArrayBuffer(7l) ++\n            mutable.ArrayBuffer(11l)\
    \ ++\n            mutable.ArrayBuffer(13l) ++\n            mutable.ArrayBuffer(17l)\
    \ ++\n            mutable.ArrayBuffer(19l) ++\n            mutable.ArrayBuffer(23l)\
    \ ++\n            mutable.ArrayBuffer(29l) ++\n            mutable.ArrayBuffer(31l)\
    \ ++\n            mutable.ArrayBuffer(37l) ++\n            mutable.ArrayBuffer(41l)\
    \ ++\n            mutable.ArrayBuffer(43l) ++\n            mutable.ArrayBuffer(47l)\
    \ ++\n            mutable.ArrayBuffer(53l) ++\n            mutable.ArrayBuffer(59l)\
    \ ++\n            mutable.ArrayBuffer(61l) ++\n            mutable.ArrayBuffer(67l)\
    \ ++\n            mutable.ArrayBuffer(71l) ++\n            mutable.ArrayBuffer(73l)\
    \ ++\n            mutable.ArrayBuffer(79l) ++\n            mutable.ArrayBuffer(83l)\
    \ ++\n            mutable.ArrayBuffer(89l) ++\n            mutable.ArrayBuffer(97l)\
    \ ++\n            mutable.ArrayBuffer(101l) ++\n            mutable.ArrayBuffer(103l)\
    \ ++\n            mutable.ArrayBuffer(107l) ++\n            mutable.ArrayBuffer(109l)\
    \ ++\n            mutable.ArrayBuffer(117l) ++\n            mutable.ArrayBuffer(121l)\
    \ ++\n            mutable.ArrayBuffer(123l) ++\n            mutable.ArrayBuffer(127l)\
    \ ++\n            mutable.ArrayBuffer(131l) ++\n            mutable.ArrayBuffer(137l)\
    \ ++\n            mutable.ArrayBuffer(139l) ++\n            mutable.ArrayBuffer(149l)\
    \ ++\n            mutable.ArrayBuffer(151l) ++\n            mutable.ArrayBuffer(157l)\
    \ ++\n            mutable.ArrayBuffer(163l) ++\n            mutable.ArrayBuffer(167l)\
    \ ++\n            mutable.ArrayBuffer(173l) ++\n            mutable.ArrayBuffer(179l)\
    \ ++\n            mutable.ArrayBuffer(181l) ++\n            mutable.ArrayBuffer(191l)\
    \ ++\n            mutable.ArrayBuffer(193l) ++\n            mutable.ArrayBuffer(197l)\
    \ ++\n            mutable.ArrayBuffer(199l) ++\n            mutable.ArrayBuffer(211l)\
    \ ++\n            mutable.ArrayBuffer(223l) ++\n            ", "        val sqrt\
    \ = (1l*Math.sqrt(n).toInt).toInt\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = (n : Long) => {\n            val i = 2l\n            while\
    \ (i <= sqrt) {\n                if (n % i == 0) {\n                    return\
    \ false\n                }\n                i += 1\n            }\n          \
    \  primes += n\n            true\n        }\n        for (i <- 2l until sqrt)\
    \ {\n            if (isPrime(i)) {\n                return true\n            }\n\
    \        }\n        primes.toSet.size == 0", "        val isPrime = (2l) until\
    \ (n) contains n\n        n match {\n            case 0 => true\n            case\
    \ _ => isPrime\n        }", "        val isPrime = (2l) until n.toInt\n      \
    \  val primes = mutable.Set[Long]()\n        for (i <- isPrime) {\n          \
    \  if (n % i == 0) {\n                primes.add(i)\n            }\n        }\n\
    \        primes.size == n.toInt", "        val isPrime = (2l) until n map (x =>\
    \ n % x != 0) reduceLeft (_ || _)\n        n <= 2l", "        val isPrime = (2l)\
    \ until n map (n => n % _ == 0) reduceLeft (_ || _)\n        isPrime", "     \
    \   val isPrime = n <= 1l\n        if(isPrime) true\n        else { \n       \
    \     val sqrt = (1l to n).foldLeft(1l) { (x, y) => math.pow(x, y) / y }\n   \
    \         val isPrime2 = sqrt.toSet.size == sqrt.toSet.size\n            if(isPrime2)\
    \ true\n            else false\n        }", "        val i = 2l\n        val s\
    \ = 2l\n        val p = 2l\n        while (i <= n / p) {\n            if (n %\
    \ i == 0) {\n                s = i\n            }\n            p += 1\n      \
    \      i += 1\n        }\n        if (s == 2l) {\n            true\n        }\
    \ else {\n            false\n        }", "        val isPrime = (2l) until Math.sqrt(n).toInt\n\
    \        val primes = mutable.Set[Long]()\n        for (i <- isPrime) {\n    \
    \        if (n % i == 0) {\n                primes.add(i)\n            }\n   \
    \     }\n        primes.size == isPrime.size", "        val isPrime = (2l) until\
    \ n map (n => n % _ == 0) reduceLeft (_ || _)\n        isPrime", "        val\
    \ isPrime = (2l) until (n) contains n\n        n match {\n            case 0 =>\
    \ false\n            case 1 => true\n            case _ => isPrime\n        }",
  "        val isPrime = n <= 1l\n        if (isPrime) {\n            val sqrtN =\
    \ math.sqrt(n)\n            val isPrime2 = sqrtN.toInt <= n\n            if (isPrime2)\
    \ {\n                val isPrime3 = n % 2l == 0l\n                if (isPrime3)\
    \ {\n                    true\n                } else {\n                    false\n\
    \                }\n            } else {\n                false\n            }\n\
    \        } else {\n            false\n        }", "        val i = 2l\n      \
    \  val s = 2l\n        while (i <= n / 2) {\n            if (n % i == 0) {\n \
    \               s = s * i\n            }\n            i += 1\n        }\n    \
    \    if (s == n) true\n        else false", "        val primes = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Long]()\n        val isNotPrime = mutable.Set[Long]()\n\
    \        val isPrime2 = mutable.Set[Long]()\n        val isNotPrime2 = mutable.Set[Long]()\n\
    \        val isPrime3 = mutable.Set[Long]()\n        val isNotPrime3 = mutable.Set[Long]()\n\
    \        val isPrime4 = mutable.Set[Long]()\n        val isNotPrime4 = mutable.Set[Long]()\n\
    \        val isPrime5 = mutable.Set[Long]()\n        val isNotPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isNotPrime6 = mutable.Set[Long]()\n\
    \        val isPrime7 = mutable.Set[Long]()\n        val isNotPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isNotPrime8 = mutable.Set[Long]()\n\
    \        val isPrime9 = mutable.Set[Long]()\n        val isNotPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isNotPrime10 = mutable.Set[Long]()\n\
    \        val isPrime11 = mutable.Set[Long]()\n        val isNotPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isNotPrime12 = mutable.Set[Long]()\n\
    \        val isPrime13 = mutable.Set[Long]()\n        val isNotPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isNotPrime14 = mutable.Set[Long]()\n\
    \        val isPrime15 = mutable.Set[Long]()\n        val isNotPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isNotPrime16 = mutable.Set[Long]()\n\
    \        val isPrime17 = mutable.Set[Long]()\n        val isNotPrime17 = mutable.Set[Long",
  "        val isPrime = n <= 1l\n        if (isPrime) {\n            val sqrt = (1l+n).toInt\n\
    \            val isPrime = sqrt <= 1l\n            if (isPrime) {\n          \
    \      val isPrime = sqrt % 2l == 0l\n                if (isPrime) {\n       \
    \             val isPrime = sqrt % 3l == 0l\n                    if (isPrime)\
    \ {\n                        val isPrime = sqrt % 5l == 0l\n                 \
    \       if (isPrime) {\n                            val isPrime = sqrt % 7l ==\
    \ 0l\n                            if (isPrime) {\n                           \
    \     val isPrime = sqrt % 11l == 0l\n                                if (isPrime)\
    \ {\n                                    val isPrime = sqrt % 13l == 0l\n    \
    \                                if (isPrime) {\n                            \
    \            val isPrime = sqrt % 17l == 0l\n                                \
    \        if (isPrime) {\n                                            val isPrime\
    \ = sqrt % 19l == 0l\n                                            if (isPrime)\
    \ {\n                                                val isPrime = sqrt % 23l\
    \ == 0l\n                                                if (isPrime) {\n    \
    \                                                val isPrime = sqrt % 29l == 0l\n\
    \                                                    if (isPrime) {\n        \
    \                                                val isPrime = sqrt % 31l == 0l\n\
    \                                                        if (isPrime) {\n    \
    \                                                        val isPrime = sqrt %\
    \ 37l == 0l\n                                                            if (isPrime)\
    \ {\n                                                                val isPrime\
    \ = sqrt % 41l == 0l\n                                                       \
    \         if (isPrime) {\n                                                   \
    \                 val isPrime = sqrt % 43l == 0l\n                           \
    \                                         if (isPrime) {\n                   \
    \                                                     val isPrime = sqrt % 47l\
    \ == 0l\n                                                                    \
    \    if (isPrime) {\n                                                        \
    \                    val isPrime = sqrt % 53l == 0l\n                        \
    \                                                    if (isPrime) {\n        \
    \                                                                        val isPrime\
    \ = sqrt % 59l == 0l\n                                                       \
    \                         if (isPrime) {\n                                   \
    \                                                 val isPrime = sqrt % 61l ==\
    \ 0l\n                                                                       \
    \             if (isPrime) {\n                                               \
    \                                         val isPrime = sqrt % 67l == 0l\n   \
    \                                                                            \
    \         if (isPrime) {\n                                                   \
    \                                         val isPrime = sqrt % 71l == 0l\n   \
    \                                                                            \
    \             if (isPrime) {\n                                               \
    \                                                 val isPrime = sqrt % 73l ==\
    \ 0l\n                                                                       \
    \                         if (isPrime) {\n                                   \
    \                                                                 val isPrime\
    \ = sqrt % 79l == 0l\n                                                       \
    \                                             if (is", '        val isPrime =
    (2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l',
  "        val i = 2l\n        while (i <= n / i) {\n            if (n % i == 0l)\
    \ false\n            else i = i + 1l\n        }\n        true", "        val isPrime\
    \ = (2l) until n match {\n            case n if n % _ == 0 => false\n        \
    \    case n => true\n        }\n        val primes = mutable.ListBuffer[Long]()\n\
    \        for (i <- 2l until n) {\n            if (isPrime(i)) {\n            \
    \    primes += i\n            }\n        }\n        primes.forall(n => n % n ==\
    \ 0)", "        val isPrime = (2l) until (n) contains n\n        n match {\n \
    \           case 0 => false\n            case _ => isPrime\n        }", "    \
    \    val i = 2l\n        val limit = n.toInt\n        while (i <= limit) {\n \
    \           if (n % i == 0l) false\n            else i = i + 1l\n        }\n \
    \       true", "        val isPrime = (2l) until n.toInt\n        val primes =\
    \ mutable.ArrayBuffer.empty[Long]\n        for (i <- isPrime) {\n            if\
    \ (n % i == 0) {\n                primes += i\n            }\n        }\n    \
    \    primes.isEmpty", "        val isPrime = (2l) until n forall { x =>\n    \
    \        val y = math.floor(x * Math.sqrt(x).toInt)\n            x % y == 0\n\
    \        }\n        isPrime", "        val i = 2l\n        val primes = mutable.ArrayBuffer(2l)\n\
    \        while (i <= n) {\n            if (n % i == 0) {\n                primes\
    \ += i\n            }\n            i += 1\n        }\n        primes.contains(n)",
  "        val primes = mutable.ArrayBuffer.empty[Long]\n        val limit = (2l*(n-1))\
    \ toLong\n        val i = 3l\n        while (i <= limit) {\n            if (n\
    \ % i == 0) {\n                primes += i\n            }\n            i += 2l\n\
    \        }\n        primes.forall(x => n % x == 0)", "        if (n == 1l) true\n\
    \        else if (n % 2 == 0) false\n        else if (n % 3 == 0) false\n    \
    \    else if (n % 5 == 0) false\n        else { val i = 3l; while (i <= n) { if\
    \ (n % i == 0) return false; i += 1; }}\n        true", "        val i = 2l\n\
    \        val m = n.toInt\n        while (i <= m) {\n            if (n % i == 0l)\
    \ false\n            i += 1\n        }\n        true", "        val sqrt = (1l*Math.sqrt(n)).toInt\n\
    \        val i = 2\n        while (i <= sqrt) {\n            if (n % i == 0) {\n\
    \                return false\n            }\n            i += 1\n        }\n\
    \        return true", "        val isPrime = (2l) until (n) contains n\n    \
    \    n match {\n            case 0 => true\n            case _ => isPrime\n  \
    \      }", "        val isPrime = (2l) until n.toInt\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- isPrime) {\n            if (n % i == 0) {\n               \
    \ primes += i\n            }\n        }\n        primes.forall(n => n % n == 0)",
  "        val isPrime = (2l) until n map (x => if (n % x == 0) false else true) reduceLeft\
    \ (_ || _)\n        isPrime", "        val isPrime = (2l) until (n) forall {\n\
    \            i => n % i == 0\n        }\n        isPrime", "        val i = 2l\n\
    \        val l = n.toInt\n        while(i <= l) {\n            if(n % i == 0)\
    \ {\n                return false\n            }\n            i += 1\n       \
    \ }\n        return true", "        val primes = mutable.ListBuffer(2l)\n    \
    \    val isPrime = true\n        for (i <- 3l to Math.sqrt(n).toInt) {\n     \
    \       if (n % i == 0) {\n                isPrime = false\n                break\n\
    \            }\n            primes += i\n        }\n        isPrime", "      \
    \  val isPrime = (2l) until (n) contains n\n        n match {\n            case\
    \ 0 => true\n            case _ => isPrime\n        }", '        val isPrime =
    (2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l',
  "        val m = 2l\n        val i = 2l\n        val s = 2l\n        while (i <=\
    \ n) {\n            if (n % i == 0) {\n                return false\n        \
    \    }\n            i += 1\n        }\n        return true", "        val sqrt\
    \ = (math.sqrt(n).toInt).toLong\n        val i = 2l\n        val primes = mutable.ArrayBuffer(2l)\n\
    \        while (i <= sqrt) {\n            if (n % i == 0) {\n                primes\
    \ += i\n            }\n            i += 1\n        }\n        primes.contains(n)",
  "        val isPrime = (2l) until n map (x => if (n % x == 0) false else true) reduceLeft\
    \ (_ || _)\n        isPrime", "        val isPrime = n <= 1l\n        if(isPrime)\
    \ true\n        else {\n            val sqrt = (1l+n)/2l\n            val isPrime2\
    \ = isPrime(sqrt)\n            if(isPrime2) isPrime\n            else false\n\
    \        }", "        val i = 2l\n        val d = 2l\n        val r = n\n    \
    \    while (i <= r) {\n            if (n % i == 0) {\n                return false\n\
    \            }\n            i += d\n            d += 2l\n        }\n        true",
  "        val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isNotPrime = mutable.Set[Long]()\n        val isPrimeFactor = mutable.Set[Long]()\n\
    \        val isNotPrimeFactor = mutable.Set[Long]()\n        val isPrimeDivisor\
    \ = mutable.Set[Long]()\n        val isNotPrimeDivisor = mutable.Set[Long]()\n\
    \        val isPrimeDivisorAndNotPrimeDivisor = mutable.Set[Long]()\n        val\
    \ isNotPrimeDivisorAndPrimeDivisor = mutable.Set[Long]()\n        val isPrimeDivisorAndPrimeDivisor\
    \ = mutable.Set[Long]()\n        val isPrimeDivisorAndNotPrimeDivisorAndPrimeDivisor\
    \ = mutable.Set[Long]()\n        val isNotPrimeDivisorAndNotPrimeDivisorAndPrimeDivisor\
    \ = mutable.Set[Long]()\n        val isPrimeDivisorAndNotPrimeDivisorAndNotPrimeDivisor\
    \ = mutable.Set[Long]()\n        val isNotPrimeDivisorAndPrimeDivisorAndPrimeDivisor\
    \ = mutable.Set[Long]()\n        val isPrimeDivisorAndPrimeDivisorAndPrimeDivisor\
    \ = mutable.Set[Long]()\n        val isPrimeDivisorAndNotPrimeDivisorAndNotPrimeDivisorAndPrimeDivisor\
    \ = mutable.Set[Long]()\n        val isNotPrimeDivisorAndNotPrimeDivisorAndPrimeDivisorAndPrimeDivisor\
    \ = mutable.Set[Long]()\n        val isPrimeDivisorAndPrimeDivisorAndNotPrimeDivisorAndNotPrimeDivisorAndPrimeDivisor\
    \ = mutable.Set[Long]()\n        val isNotPrimeDivisorAndNotPrimeDivisorAndPrimeDivisorAndNotPrimeDivisorAndPrimeDivisor\
    \ = mutable.Set[Long]()\n        val isPrimeDivisorAndPrimeDivisorAndPrimeDivisorAndNotPrimeDivisorAndNotPrimeDivisorAndPrimeDivisor\
    \ = mutable.Set[Long]()\n        val isNotPrimeDivisorAndNotPrimeDivisorAndNotPrimeDivisor",
  "        val i = 2l\n        val l = n.toInt\n        while (i <= l) {\n       \
    \     if (n % i == 0l) false\n            else i = i + 1l\n        }\n       \
    \ true", "        val i = 2l\n        val s = 2l\n        while (i <= n / 2) {\n\
    \            if (n % i == 0) {\n                s = i\n            }\n       \
    \     i += 1\n        }\n        if (s == 2l) {\n            true\n        } else\
    \ {\n            false\n        }", "        val isPrime = (2l) until n map (n\
    \ => n % _ == 0) reduceLeft (_ || _)\n        n <= 1l && isPrime", "        val\
    \ isPrime = (2l) until (n) contains n\n        n match {\n            case 0 =>\
    \ true\n            case _ => isPrime\n        }", "        val isPrime = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val primes = mutable.ArrayBuffer(2l)\n        val isPrime2 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime3 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime4 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime5 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime6 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime7 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime8 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime9 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime10 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime11 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime12 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime13 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime14 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime15 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime16 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime17 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime18 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime19 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime20 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime21 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime22 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime23 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime24 = mutable.BitSet(math.ceil(math.sqrt(n).toInt).toInt)\n\
    \        val isPrime25 = mutable.", "        val isPrime = (2l) until (n) contains\
    \ n\n        n match {\n            case 0 => true\n            case _ => isPrime\n\
    \        }", "        val isPrime = (2l) until n map (x => if (n % x == 0) false\
    \ else true) reduceLeft (_ || _)\n        isPrime", "        val primes = mutable.ArrayBuffer(2l)\n\
    \        val isPrime = mutable.ArrayBuffer(2l)\n        val isNotPrime = mutable.ArrayBuffer(2l)\n\
    \        val isPrime2 = mutable.ArrayBuffer(2l)\n        val isNotPrime2 = mutable.ArrayBuffer(2l)\n\
    \        val isPrime3 = mutable.ArrayBuffer(2l)\n        val isNotPrime3 = mutable.ArrayBuffer(2l)\n\
    \        val isPrime4 = mutable.ArrayBuffer(2l)\n        val isNotPrime4 = mutable.ArrayBuffer(2l)\n\
    \        val isPrime5 = mutable.ArrayBuffer(2l)\n        val isNotPrime5 = mutable.ArrayBuffer(2l)\n\
    \        val isPrime6 = mutable.ArrayBuffer(2l)\n        val isNotPrime6 = mutable.ArrayBuffer(2l)\n\
    \        val isPrime7 = mutable.ArrayBuffer(2l)\n        val isNotPrime7 = mutable.ArrayBuffer(2l)\n\
    \        val isPrime8 = mutable.ArrayBuffer(2l)\n        val isNotPrime8 = mutable.ArrayBuffer(2l)\n\
    \        val isPrime9 = mutable.ArrayBuffer(2l)\n        val isNotPrime9 = mutable.ArrayBuffer(2l)\n\
    \        val isPrime10 = mutable.ArrayBuffer(2l)\n        val isNotPrime10 = mutable.ArrayBuffer(2l)\n\
    \        val isPrime11 = mutable.ArrayBuffer(2l)\n        val isNotPrime11 = mutable.ArrayBuffer(2l)\n\
    \        val isPrime12 = mutable.ArrayBuffer(2l)\n        val isNotPrime12 = mutable.ArrayBuffer(2l)\n\
    \        val isPrime13 = mutable.ArrayBuffer(2l)\n        val isNotPrime13 = mutable.ArrayBuffer(2l)\n\
    \        val isPrime14 = mutable.ArrayBuffer(2l)\n        val isNotPrime14 = mutable.ArrayBuffer(2l)\n\
    \        val isPrime15 = mutable.ArrayBuffer(2l)\n        val isNotPrime15 = mutable.ArrayBuffer(2l)\n\
    \        val isPrime16 = mutable.ArrayBuffer(2l)\n        val isNotPrime16 = mutable.ArrayBuffer(2l)\n\
    \        val isPrime17 = mutable.ArrayBuffer(2l)\n        val isNotPrime17 = mutable.ArrayBuffer(2l)\n\
    \        val isPrime18 = mutable.ArrayBuffer(2l)\n        val isNotPrime18 = mutable.ArrayBuffer(2l)\n\
    \        val is", "        val isPrime = (2l) until (n) contains n\n        n\
    \ match {\n            case 0 => true\n            case _ => isPrime\n       \
    \ }", "        val isPrime = (2l) until (n) contains n\n        val isPrime2 =\
    \ isPrime filter (_ % 2) == 0\n        val isPrime3 = isPrime filter (_ % 3) ==\
    \ 0\n        val isPrime4 = isPrime filter (_ % 4) == 0\n        val isPrime5\
    \ = isPrime filter (_ % 5) == 0\n        val isPrime6 = isPrime filter (_ % 6)\
    \ == 0\n        val isPrime7 = isPrime filter (_ % 7) == 0\n        val isPrime8\
    \ = isPrime filter (_ % 8) == 0\n        val isPrime9 = isPrime filter (_ % 9)\
    \ == 0\n        val isPrime10 = isPrime filter (_ % 10) == 0\n        val isPrime11\
    \ = isPrime filter (_ % 11) == 0\n        val isPrime12 = isPrime filter (_ %\
    \ 12) == 0\n        val isPrime13 = isPrime filter (_ % 13) == 0\n        val\
    \ isPrime14 = isPrime filter (_ % 14) == 0\n        val isPrime15 = isPrime filter\
    \ (_ % 15) == 0\n        val isPrime16 = isPrime filter (_ % 16) == 0\n      \
    \  val isPrime17 = isPrime filter (_ % 17) == 0\n        val isPrime18 = isPrime\
    \ filter (_ % 18) == 0\n        val isPrime19 = isPrime filter (_ % 19) == 0\n\
    \        val isPrime20 = isPrime filter (_ % 20) == 0\n        val isPrime21 =\
    \ isPrime filter (_ % 21) == 0\n        val isPrime22 = isPrime filter (_ % 22)\
    \ == 0\n        val isPrime23 = isPrime filter (_ % 23) == 0\n        val isPrime24\
    \ = isPrime filter (_ % 24) == 0\n        val isPrime25 = isPrime filter (_ %\
    \ 25) == 0\n        val isPrime26 = isPrime filter (_ % 26) == 0\n        val\
    \ isPrime27 = isPrime filter (_ % 27) == 0\n        val isPrime28 = isPrime filter\
    \ (_ % 28) == 0\n        val isPrime29 = isPrime filter (_ % 29) == 0\n      \
    \  val isPrime30 = isPrime filter (_ % 30) == 0\n        val isPrime31 = isPrime\
    \ filter (_ % 31) == 0\n        val isPrime32 = isPrime filter (_ % 32", "   \
    \     val isPrime = (2l) until n forall {\n            i => n % i == 0\n     \
    \   }\n        isPrime", "        val isPrime = (2l) until (n) forall {\n    \
    \        i => n % i == 0\n        }\n        isPrime", "        if (n == 1l) true\n\
    \        else if (n % 2 == 0) false\n        else if (n % 3 == 0) false\n    \
    \    else if (n % 5 == 0) false\n        else { \n            val sqrt = (sqrt(n).toInt).toLong\n\
    \            val primes = mutable.ArrayBuffer(2l, 3l, 5l)\n            while (primes.size\
    \ < sqrt) primes += primes.last\n            primes.takeWhile(p => n % p == 0).forall(p\
    \ => primes -= p)\n        }", "        val i = 2l\n        val d = 2l\n     \
    \   val s = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n    \
    \            return false\n            }\n            d += 2l\n            s +=\
    \ 2l\n            i += 1\n        }\n        return true", "        val primes\
    \ = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n      \
    \  for (i <- 2 to Math.sqrt(n)) {\n            if (n % i == 0) {\n           \
    \     primes += i\n                isPrime += false\n            }\n        }\n\
    \        primes.forall(n => isPrime += true)", "        if (n == 1l) false\n \
    \       else if (n % 2 == 0) false\n        else if (n % 3 == 0) false\n     \
    \   else if (n % 5 == 0) false\n        else { \n            val sqrt = (sqrt(n).toLong).toInt\n\
    \            val primes = mutable.ArrayBuffer.empty[Long]\n            val primesCount\
    \ = mutable.ArrayBuffer.empty[Int]\n            val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \            val isPrimeCount = mutable.ArrayBuffer.empty[Int]\n            val\
    \ isPrimeSquare = mutable.ArrayBuffer.empty[Boolean]\n            val isPrimeSquareCount\
    \ = mutable.ArrayBuffer.empty[Int]\n            val isPrimeSquareRoot = mutable.ArrayBuffer.empty[Boolean]\n\
    \            val isPrimeSquareRootCount = mutable.ArrayBuffer.empty[Int]\n   \
    \         val isPrimeSquareRootRemainder = mutable.ArrayBuffer.empty[Boolean]\n\
    \            val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \            val isPrimeSquareRootRemainderRemainder = mutable.ArrayBuffer.empty[Boolean]\n\
    \            val isPrimeSquareRootRemainderRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \            val isPrimeSquareRootRemainderRemainderRemainder = mutable.ArrayBuffer.empty[Boolean]\n\
    \            val isPrimeSquareRootRemainderRemainderRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \            val isPrimeSquareRootRemainderRemainderRemainderRemainder = mutable.ArrayBuffer.empty[Boolean]\n\
    \            val isPrimeSquareRootRemainderRemainderRemainderRemainderCount =\
    \ mutable.ArrayBuffer.empty[Int]\n            val isPrimeSquareRootRemainderRemainderRemainderRemainderRemainder\
    \ = mutable.ArrayBuffer.empty[Boolean]\n            val isPrimeSquareRootRemainderRemainderRemainderRemainderRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n            val isPrimeSquareRootRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = mutable.ArrayBuffer.empty[Boolean]\n            val isPrimeSquareRootRemainderRemainderRemainderRemainderRemainderRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n            val isPrimeSquareRootRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = mutable.ArrayBuffer.empty[Boolean]\n            val isPrimeSquareRootRemainderRemainderRemainderRemainderRemainderRemainderRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n            val isPrimeSquare", "        val\
    \ isPrime = (2l) until (n) contains n\n        val isNotPrime = (2l) until (n)\
    \ contains n + 1\n        val isPrime2 = isPrime filter (_ % 2 == 0)\n       \
    \ val isNotPrime2 = isNotPrime filter (_ % 2 == 0)\n        val isPrime3 = isPrime\
    \ filter (_ % 3 == 0)\n        val isNotPrime3 = isNotPrime filter (_ % 3 == 0)\n\
    \        val isPrime4 = isPrime filter (_ % 4 == 0)\n        val isNotPrime4 =\
    \ isNotPrime filter (_ % 4 == 0)\n        val isPrime5 = isPrime filter (_ % 5\
    \ == 0)\n        val isNotPrime5 = isNotPrime filter (_ % 5 == 0)\n        val\
    \ isPrime6 = isPrime filter (_ % 6 == 0)\n        val isNotPrime6 = isNotPrime\
    \ filter (_ % 6 == 0)\n        val isPrime7 = isPrime filter (_ % 7 == 0)\n  \
    \      val isNotPrime7 = isNotPrime filter (_ % 7 == 0)\n        val isPrime8\
    \ = isPrime filter (_ % 8 == 0)\n        val isNotPrime8 = isNotPrime filter (_\
    \ % 8 == 0)\n        val isPrime9 = isPrime filter (_ % 9 == 0)\n        val isNotPrime9\
    \ = isNotPrime filter (_ % 9 == 0)\n        val isPrime10 = isPrime filter (_\
    \ % 10 == 0)\n        val isNotPrime10 = isNotPrime filter (_ % 10 == 0)\n   \
    \     val isPrime11 = isPrime filter (_ % 11 == 0)\n        val isNotPrime11 =\
    \ isNotPrime filter (_ % 11 == 0)\n        val isPrime12 = isPrime filter (_ %\
    \ 12 == 0)\n        val isNotPrime12 = isNotPrime filter (_ % 12 == 0)\n     \
    \   val isPrime13 = isPrime filter (_ % 13 == 0)\n        val isNotPrime13 = isNotPrime\
    \ filter (_ % 13 == 0)\n        val isPrime14 = isPrime filter (_ % 14 == 0)\n\
    \        val isNotPrime14 = isNotPrime filter (_ % 14 == 0)\n        val isPrime15\
    \ = isPrime filter (_ % 15", "        val isPrime = (2l) until (n) contains n\n\
    \        n match {\n            case x if x == 0 => false\n            case x\
    \ if x == 1 => true\n            case x if x == n => true\n            case x\
    \ if n % x == 0 => false\n            case _ => isPrime\n        }", "       \
    \ val isPrime = (2l) until Math.sqrt(n).toInt\n        val primes = mutable.ArrayBuffer(2l)\n\
    \        for (i <- isPrime) {\n            if (n % i == 0) {\n               \
    \ primes += i\n            }\n        }\n        primes.forall(n => n % n == 0)",
  '        val isPrime = (2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l',
  "        val primes = mutable.Set[Long]()\n        val isPrime = (n : Long) => {\n\
    \            if (primes.contains(n)) {\n                primes.contains(n)\n \
    \           } else {\n                val isPrime = (n : Long) => {\n        \
    \            if (n % 2 == 0) {\n                        primes.add(n)\n      \
    \                  isPrime(n / 2)\n                    } else {\n            \
    \            primes.add(n)\n                        false\n                  \
    \  }\n                }\n                isPrime(n / 2)\n            }\n     \
    \   }\n        isPrime(n)", "        val isPrime = (2l) until (n) forall { i =>\n\
    \            val j = (i + n) until (n) forall { j =>\n                if (i %\
    \ j == 0) false\n                else true\n            }\n        }\n       \
    \ isPrime", "        val isPrime = (2l) until n map (n => n % _ == 0) reduceLeft\
    \ (_ || _)\n        isPrime", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val divisors = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isDivisor = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor2 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeDivisor3 = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor4\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor5 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeDivisor6 = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor7\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor8 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeDivisor9 = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor10\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor11 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeDivisor12 = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor13\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor14 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeDivisor15 = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor16\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor17 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeDivisor18 = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor19\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor20 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeDivisor21 = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor22\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor23 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeDivisor24 = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor25\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor26 = mutable.ListBuffer[Boolean]()\n",
  "        val isPrime = (2l) until n map (n => n % _ == 0) reduceLeft (_ || _)\n\
    \        isPrime", "        val isPrime = (2l) until (n) contains n\n        n\
    \ match {\n            case 0 | 1 => true\n            case _ => isPrime\n   \
    \     }", "        val i = 2l\n        while (i <= n / i) {\n            if (n\
    \ % i == 0)\n                return false\n            i += 1\n        }\n   \
    \     true", "        val isPrime = (2l) until (n) contains n\n        n match\
    \ {\n            case 0 => false\n            case _ => isPrime\n        }", " \
    \       val isPrime = (2l) until n map (x => if (n % x == 0) false else true)\
    \ reduceLeft (_ || _)\n        isPrime", "        val isPrime = (2l) until n map\
    \ (n => n % _ == 0) reduceLeft (_ || _)\n        isPrime", "        val isPrime\
    \ = (2l) until (n) contains n\n        n match {\n            case 0 => false\n\
    \            case _ => isPrime\n        }", "        val i = 2l\n        val primes\
    \ = mutable.ArrayBuffer.empty[Long]\n        while (i <= n && primes.isEmpty)\
    \ {\n            if (n % i == 0l) primes += i\n            i += 2l\n        }\n\
    \        primes.forall(n => n % n == 0l)", "        val isPrime = (2l) until (n)\
    \ contains n\n        val primes = mutable.ArrayBuffer.empty[Long]\n        for\
    \ (i <- 2l until n) {\n            if (isPrime(i)) {\n                primes +=\
    \ i\n            }\n        }\n        primes.forall(n => n % n == 0)", "    \
    \    val isPrime = (2l) until (n) contains n\n        val primes = mutable.ArrayBuffer(2l)\n\
    \        for (i <- isPrime) {\n            primes += i\n        }\n        primes.contains(n)",
  "        val primes = mutable.ArrayBuffer(2l)\n        val divisors = mutable.ArrayBuffer(2l)\n\
    \        val isPrime = true\n        for(i <- 2l to n){\n            divisors\
    \ += i\n            primes += i\n            for(d <- divisors.iterator){\n  \
    \              if(n % d == 0){\n                    isPrime = false\n        \
    \            break\n                }\n            }\n        }\n        isPrime",
  "        val isPrime = (2l) until (n) contains n\n        n match {\n          \
    \  case x if isPrime => true\n            case _ => false\n        }", "     \
    \   if (n == 1l) true\n        else if (n % 2 == 0) false\n        else if (n\
    \ % 3 == 0) false\n        else if (n % 5 == 0) false\n        else { \n     \
    \       val i = 3l\n            while (i <= n / 2l) { \n                if (n\
    \ % i == 0) false\n                else i += 2l\n            }\n            true\n\
    \        }", "        val isPrime = (2l) until (n) contains n\n        val isNotPrime\
    \ = (2l) until (n) contains n + 1\n        val isNotPrime2 = isPrime filter (_\
    \ != n + 1)\n        val isNotPrime3 = isNotPrime2 filter (_ != n + 1)\n     \
    \   val isNotPrime4 = isNotPrime3 filter (_ != n + 1)\n        val isNotPrime5\
    \ = isNotPrime4 filter (_ != n + 1)\n        val isNotPrime6 = isNotPrime5 filter\
    \ (_ != n + 1)\n        val isNotPrime7 = isNotPrime6 filter (_ != n + 1)\n  \
    \      val isNotPrime8 = isNotPrime7 filter (_ != n + 1)\n        val isNotPrime9\
    \ = isNotPrime8 filter (_ != n + 1)\n        val isNotPrime10 = isNotPrime9 filter\
    \ (_ != n + 1)\n        val isNotPrime11 = isNotPrime10 filter (_ != n + 1)\n\
    \        val isNotPrime12 = isNotPrime11 filter (_ != n + 1)\n        val isNotPrime13\
    \ = isNotPrime12 filter (_ != n + 1)\n        val isNotPrime14 = isNotPrime13\
    \ filter (_ != n + 1)\n        val isNotPrime15 = isNotPrime14 filter (_ != n\
    \ + 1)\n        val isNotPrime16 = isNotPrime15 filter (_ != n + 1)\n        val\
    \ isNotPrime17 = isNotPrime16 filter (_ != n + 1)\n        val isNotPrime18 =\
    \ isNotPrime17 filter (_ != n + 1)\n        val isNotPrime19 = isNotPrime18 filter\
    \ (_ != n + 1)\n        val isNotPrime20 = isNotPrime19 filter (_ != n + 1)\n\
    \        val isNotPrime21 = isNotPrime20 filter (_ != n + 1)\n        val isNotPrime22\
    \ = isNotPrime21 filter (_ != n + 1)\n        val isNotPrime23 = isNotPrime22\
    \ filter (_ != n + 1)\n        val isNotPrime24 = isNotPrime23 filter (_ != n\
    \ + 1)\n        val isNotPrime25 = isNotPrime24 filter (_ != n + 1)\n        val\
    \ isNotPrime26 = isNotPrime25 filter (_ != n + 1)\n        val isNot", "     \
    \   val isPrime = (2l) until n map (x => if (n % x == 0) false else true) reduceLeft\
    \ (_ || _)\n        isPrime", "        val isPrime = n <= 1l\n        if (isPrime)\
    \ true\n        else {\n            val sqrt = (1l to n).toList\n            val\
    \ primes = mutable.Set[Long]()\n            val isPrime = sqrt.forall(n => primes.contains(n)\
    \ && isPrime(n))\n            if (isPrime) true\n            else false\n    \
    \    }", "        val sqrt = (1l*Math.sqrt(n)).toInt\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = (n : Long) => {\n            val i = 2l\n            while\
    \ (i <= sqrt) {\n                if (n % i == 0) {\n                    return\
    \ false\n                }\n                i += 1\n            }\n          \
    \  primes += n\n            true\n        }\n        val isNotPrime = (n : Long)\
    \ => {\n            val i = 2l\n            while (i <= sqrt) {\n            \
    \    if (n % i == 0) {\n                    return true\n                }\n \
    \               i += 1\n            }\n            false\n        }\n        val\
    \ isPrimes = primes.toList.isEmpty && isPrime(2l)\n        val isNotPrimes = primes.toList.isEmpty\
    \ && isNotPrime(2l)\n        val isPrime = primes.toList.isEmpty && isPrime(n)\n\
    \        val isNotPrime = primes.toList.isEmpty && isNotPrime(n)\n        val\
    \ isPrimes = primes.toList.isEmpty && isPrimes.toList.isEmpty && isPrime(2l)\n\
    \        val isNotPrimes = primes.toList.isEmpty && isNotPrimes.toList.isEmpty\
    \ && isNotPrime(2l)\n        val isPrime = primes.toList.isEmpty && isPrimes.toList.isEmpty\
    \ && isPrime(n)\n        val isNotPrime = primes.toList.isEmpty && isNotPrimes.toList.isEmpty\
    \ && isNotPrime(n)\n        val isPrimes = primes.toList.isEmpty && isPrimes.toList.isEmpty\
    \ && isPrimes(2l)\n        val isNotPrimes = primes.toList.isEmpty && isNotPrimes.toList.isEmpty\
    \ && isNotPrimes(2l)\n        val isPrime = primes.toList.isEmpty && isPrimes.toList.isEmpty\
    \ && isPrime(n)\n        val isNotPrime = primes.toList.isEmpty && isNotPrimes.toList.isEmpty\
    \ && isNotPrime(n)\n        val isPrimes = primes.toList.isEmpty && isPrimes.toList.isEmpty\
    \ && isPrimes(n)\n        val isNotPrimes = primes.toList.isEmpty && isNotPrimes.toList.isEmpty\
    \ && isNotPrimes(n)\n        val isPrime = primes.toList.isEmpty && isPrimes.toList",
  "        val isPrime = n <= 1l\n        if (isPrime)\n            return true\n\
    \        val sqrt = (1l to n).toList\n        val primes = mutable.Set[Long]()\n\
    \        for (i <- sqrt) {\n            if (n % i == 0)\n                primes.add(i)\n\
    \        }\n        primes.size == sqrt.size", "        val isPrime = (2l) until\
    \ (n) contains n\n        val isNotPrime = (2l) until (n) contains n + 1\n   \
    \     val isNotPrime2 = (n) until (2l) contains n + 1\n        val isNotPrime3\
    \ = (n) until (2l) contains n + 1\n        val isNotPrime4 = (n) until (2l) contains\
    \ n + 1\n        val isNotPrime5 = (n) until (2l) contains n + 1\n        val\
    \ isNotPrime6 = (n) until (2l) contains n + 1\n        val isNotPrime7 = (n) until\
    \ (2l) contains n + 1\n        val isNotPrime8 = (n) until (2l) contains n + 1\n\
    \        val isNotPrime9 = (n) until (2l) contains n + 1\n        val isNotPrime10\
    \ = (n) until (2l) contains n + 1\n        val isNotPrime11 = (n) until (2l) contains\
    \ n + 1\n        val isNotPrime12 = (n) until (2l) contains n + 1\n        val\
    \ isNotPrime13 = (n) until (2l) contains n + 1\n        val isNotPrime14 = (n)\
    \ until (2l) contains n + 1\n        val isNotPrime15 = (n) until (2l) contains\
    \ n + 1\n        val isNotPrime16 = (n) until (2l) contains n + 1\n        val\
    \ isNotPrime17 = (n) until (2l) contains n + 1\n        val isNotPrime18 = (n)\
    \ until (2l) contains n + 1\n        val isNotPrime19 = (n) until (2l) contains\
    \ n + 1\n        val isNotPrime20 = (n) until (2l) contains n + 1\n        val\
    \ isNotPrime21 = (n) until (2l) contains n + 1\n        val isNotPrime22 = (n)\
    \ until (2l) contains n + 1\n        val isNotPrime23 = (n) until (2l) contains\
    \ n + 1\n        val isNotPrime24 = (n) until (2l) contains n + 1\n        val\
    \ isNotPrime25 = (n) until (2l) contains n + 1\n        val isNotPrime26 = (n)\
    \ until (2l) contains n + 1\n        val isNot", "        val i = 2l\n       \
    \ while (i <= n / i) {\n            if (n % i == 0l) false\n            else i\
    \ = i + 1l\n        }\n        true", "        val isPrime = (2l) until n map\
    \ (x => if (n % x == 0) false else true) reduceLeft (_ || _)\n        isPrime",
  "        val primes = mutable.ArrayBuffer(2l) ++ (2l to (Math.sqrt(n).toLong))\n\
    \        primes.find(_ % _ == 0).isDefined", "        val primes = mutable.Set[Long]()\n\
    \        val isPrime = (n : Long) => {\n            if (primes.contains(n)) {\n\
    \                primes += n\n                true\n            } else {\n   \
    \             val root = math.sqrt(n)\n                val i = 2\n           \
    \     while (i <= root) {\n                    if (n % i == 0) {\n           \
    \             return false\n                    }\n                    i += 1\n\
    \                }\n                primes += n\n                true\n      \
    \      }\n        }\n        val isPrime2 = {\n            val primes = mutable.Set[Long]()\n\
    \            val isPrime = (n : Long) => {\n                if (primes.contains(n))\
    \ {\n                    primes += n\n                    true\n             \
    \   } else {\n                    val root = math.sqrt(n)\n                  \
    \  val i = 2\n                    while (i <= root) {\n                      \
    \  if (n % i == 0) {\n                            return false\n             \
    \           }\n                        i += 1\n                    }\n       \
    \             primes += n\n                    true\n                }\n     \
    \       }\n            val isPrime2 = {\n                val primes = mutable.Set[Long]()\n\
    \                val isPrime = (n : Long) => {\n                    if (primes.contains(n))\
    \ {\n                        primes += n\n                        true\n     \
    \               } else {\n                        val root = math.sqrt(n)\n  \
    \                      val i = 2\n                        while (i <= root) {\n\
    \                            if (n % i == 0) {\n                             \
    \   return false\n                            }\n                            i\
    \ += 1\n                        }\n                        primes += n\n     \
    \                   true\n                    }\n                }\n         \
    \       val isPrime2 = {\n                    val primes = mutable.Set[Long]()\n\
    \                    val isPrime = (n : Long) => {\n                        if\
    \ (primes.contains(n)) {\n                            primes += n\n          \
    \                  true\n                        } else {\n                  \
    \          val root = math.sqrt(n)\n                            val i = 2\n  \
    \                          while (i <= root) {\n                             \
    \   if (n % i == 0) {\n                                    return false\n    \
    \                            }\n                                i += 1\n     \
    \                       }\n                            primes += n\n         \
    \                   true\n                        }\n                    }\n \
    \                   val isPrime2 = {\n                        val primes = mutable.Set[Long]()\n\
    \                        val isPrime = (n : Long) => {\n                     \
    \       if (primes.contains(n)) {\n                                primes += n\n\
    \                                true\n                            } else {\n\
    \                                val root = math.sqrt(n)\n                   \
    \             val i = 2\n                                while (i <= root) {\n\
    \                                    if (n % i == 0) {\n                     \
    \                   return false\n                                    }\n    \
    \                                i += 1\n                                }\n \
    \                               primes += n\n                                true\n\
    \                            }\n                        }\n                  \
    \      val isPrime2 = {\n                            val primes = mutable.Set[Long]()\n\
    \                            val isPrime = (n : Long) => {\n                 \
    \               if (primes.contains(n)) {\n                                  \
    \  primes += ", "        val primes = mutable.ArrayBuffer(2l)\n        var i =\
    \ 2l\n        while (i < n) {\n            if (n % i == 0) {\n               \
    \ primes += i\n                i += 2l\n            }\n            else {\n  \
    \              i += 1\n            }\n        }\n        primes.contains(n)",
  "        val isPrime = (2l) until (n) forall { x =>\n            x % n == 0\n  \
    \      }\n        isPrime", "        val i = 2l\n        while (i <= n / i) {\n\
    \            if (n % i == 0l) false\n            else i = i + 1l\n        }\n\
    \        true", "        val primes = mutable.Set[Long]()\n        val i = 2l\n\
    \        while (i <= n / i) {\n            if (n % i == 0) {\n               \
    \ primes += i\n            }\n            i += 1\n        }\n        primes.size\
    \ == n", "        val m = math.max(2, math.floor(math.sqrt(n)))\n        val primes\
    \ = mutable.ArrayBuffer(2l)\n        for (i <- 3l to m) primes += i\n        primes.contains(n)",
  "        val isPrime = n <= 1l\n        if (isPrime) true\n        else (2l*n <=\
    \ n) match {\n            case true => false\n            case false => isPrime(n\
    \ - 2l)\n        }", "        val isPrime = (2l*2l).until(n / 2l).forall(n =>\
    \ n % _ == 0)\n        if (isPrime) true\n        else false", "        val isPrime\
    \ = n <= 1l\n        if(isPrime)\n            return true\n        val sqrt =\
    \ (1l+n).toInt\n        for(i <- 2l to sqrt) {\n            if((n % i) == 0)\n\
    \                return false\n        }\n        return true", "        val isPrime\
    \ = (2l) until n map (n => n % _ == 0) reduceLeft (_ || _)\n        isPrime",
  "        val m = math.ceil(math.sqrt(n)).toInt\n        var i = 2\n        val primes\
    \ = mutable.ArrayBuffer.empty[Long]\n        while (i <= m) {\n            if\
    \ (n % i == 0) {\n                primes += i\n            }\n            i +=\
    \ 1\n        }\n        primes.forall(p => n % p == 0)", "        val sqrtN =\
    \ math.sqrt(n)\n        val isPrime = true\n        for (i <- 2 to sqrtN) {\n\
    \            if (n % i == 0) {\n                isPrime = false\n            \
    \    break\n            }\n        }\n        return isPrime", "        if (n\
    \ == 1l) true\n        else if (n % 2 == 0) false\n        else if (n % 3 == 0)\
    \ false\n        else if (n % 5 == 0) false\n        else { val i = 5\n      \
    \      while (i <= Math.sqrt(n)) {\n                if (n % i == 0) false\n  \
    \              else i += 2\n            }\n            true\n        }", "   \
    \     val i = 2l\n        val l = n.toInt\n        while (i < l) {\n         \
    \   if (n % i == 0) {\n                return false\n            }\n         \
    \   i += 1\n        }\n        return true", "        val isPrime = (2l) until\
    \ (n) contains n\n        val isPrime2 = isPrime filter (_ % 2 == 0)\n       \
    \ val isPrime3 = isPrime2 filter (_ % 3 == 0)\n        val isPrime4 = isPrime3\
    \ filter (_ % 4 == 0)\n        val isPrime5 = isPrime4 filter (_ % 5 == 0)\n \
    \       val isPrime6 = isPrime5 filter (_ % 6 == 0)\n        val isPrime7 = isPrime6\
    \ filter (_ % 7 == 0)\n        val isPrime8 = isPrime7 filter (_ % 8 == 0)\n \
    \       val isPrime9 = isPrime8 filter (_ % 9 == 0)\n        val isPrime10 = isPrime9\
    \ filter (_ % 10 == 0)\n        val isPrime11 = isPrime10 filter (_ % 11 == 0)\n\
    \        val isPrime12 = isPrime11 filter (_ % 12 == 0)\n        val isPrime13\
    \ = isPrime12 filter (_ % 13 == 0)\n        val isPrime14 = isPrime13 filter (_\
    \ % 14 == 0)\n        val isPrime15 = isPrime14 filter (_ % 15 == 0)\n       \
    \ val isPrime16 = isPrime15 filter (_ % 16 == 0)\n        val isPrime17 = isPrime16\
    \ filter (_ % 17 == 0)\n        val isPrime18 = isPrime17 filter (_ % 18 == 0)\n\
    \        val isPrime19 = isPrime18 filter (_ % 19 == 0)\n        val isPrime20\
    \ = isPrime19 filter (_ % 20 == 0)\n        val isPrime21 = isPrime20 filter (_\
    \ % 21 == 0)\n        val isPrime22 = isPrime21 filter (_ % 22 == 0)\n       \
    \ val isPrime23 = isPrime22 filter (_ % 23 == 0)\n        val isPrime24 = isPrime23\
    \ filter (_ % 24 == 0)\n        val isPrime25 = isPrime24 filter (_ % 25 == 0)\n\
    \        val isPrime26 = isPrime25 filter (_ % 26 == 0)\n        val isPrime27\
    \ = isPrime26 filter (_ % 27 == 0)\n        val isPrime28 = isPrime27 filter (_\
    \ % 28 == 0)\n        val isPrime29 = isPrime28 filter (", "        val isPrime\
    \ = (2l) until (n) contains n\n        n match {\n            case n if isPrime\
    \ => true\n            case n => false\n        }", "        val i = 2l\n    \
    \    while (i <= n / i) {\n            if (n % i == 0) {\n                return\
    \ false\n            }\n            i += 1\n        }\n        return true", " \
    \       val primes = mutable.ArrayBuffer(2l)\n        val isPrime = mutable.ArrayBuffer(true)\n\
    \        for (i <- 2l until n by 2l) {\n            if (n % i == 0) {\n      \
    \          primes += i\n                isPrime += false\n            }\n    \
    \    }\n        isPrime(primes.toSet)", "        val isPrime = (2l) until (n)\
    \ forall { x =>\n            val y = math.floor(x * Math.sqrt(x).toInt)\n    \
    \        x % y == 0\n        }\n        isPrime", '        val isPrime = (2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l',
  "        val isPrime = (2l) until (n) contains n\n        val isNotPrime = (2l)\
    \ until (n) contains n + 1\n        val isNotPrime2 = isPrime diff isNotPrime\n\
    \        val isNotPrime3 = isNotPrime2 diff isNotPrime\n        val isNotPrime4\
    \ = isNotPrime3 diff isNotPrime\n        val isNotPrime5 = isNotPrime4 diff isNotPrime\n\
    \        val isNotPrime6 = isNotPrime5 diff isNotPrime\n        val isNotPrime7\
    \ = isNotPrime6 diff isNotPrime\n        val isNotPrime8 = isNotPrime7 diff isNotPrime\n\
    \        val isNotPrime9 = isNotPrime8 diff isNotPrime\n        val isNotPrime10\
    \ = isNotPrime9 diff isNotPrime\n        val isNotPrime11 = isNotPrime10 diff\
    \ isNotPrime\n        val isNotPrime12 = isNotPrime11 diff isNotPrime\n      \
    \  val isNotPrime13 = isNotPrime12 diff isNotPrime\n        val isNotPrime14 =\
    \ isNotPrime13 diff isNotPrime\n        val isNotPrime15 = isNotPrime14 diff isNotPrime\n\
    \        val isNotPrime16 = isNotPrime15 diff isNotPrime\n        val isNotPrime17\
    \ = isNotPrime16 diff isNotPrime\n        val isNotPrime18 = isNotPrime17 diff\
    \ isNotPrime\n        val isNotPrime19 = isNotPrime18 diff isNotPrime\n      \
    \  val isNotPrime20 = isNotPrime19 diff isNotPrime\n        val isNotPrime21 =\
    \ isNotPrime20 diff isNotPrime\n        val isNotPrime22 = isNotPrime21 diff isNotPrime\n\
    \        val isNotPrime23 = isNotPrime22 diff isNotPrime\n        val isNotPrime24\
    \ = isNotPrime23 diff isNotPrime\n        val isNotPrime25 = isNotPrime24 diff\
    \ isNotPrime\n        val isNotPrime26 = isNotPrime25 diff isNotPrime\n      \
    \  val isNotPrime27 = isNotPrime26 diff isNotPrime\n        val isNotPrime28 =\
    \ isNotPrime", "        val primes = mutable.ArrayBuffer(2l) ++ (2l..n).filter(x\
    \ => isPrime(x))\n        primes.contains(n)", "        val isPrime = (2l) until\
    \ n map (x => if (n % x == 0) false else true) reduceLeft (_ || _)\n        isPrime",
  "        if (n == 1l) false\n        else if (n % 2 == 0) false\n        else if\
    \ (n % 3 == 0) false\n        else if (n % 5 == 0) false\n        else if (n %\
    \ 7 == 0) false\n        else { \n            val sq = math.sqrt(n)\n        \
    \    val i = 3l\n            while (i <= sq) {\n                if (n % i == 0)\
    \ false\n                i += 2l\n            }\n            true\n        }",
  "        val isPrime = mutable.BitSet(2l..n).forall(x => n % x == 0)\n        n\
    \ match {\n            case x if x == 0 => true\n            case x if x == 1\
    \ => false\n            case x if x == n => isPrime\n            case _ => isPrime\n\
    \        }", "        val isPrime = n <= 1l\n        if (isPrime) {\n        \
    \    val isPrime = n <= 1l\n        }\n        return isPrime", "        val isPrime\
    \ = (2l) until n map (x => if (n % x == 0) false else true) reduceLeft (_ || _)\n\
    \        isPrime", "        val sqrtN = math.sqrt(n)\n        val isPrime = true\n\
    \        for (i <- 2 to sqrtN) {\n            if (n % i == 0) {\n            \
    \    isPrime = false\n                break\n            }\n        }\n      \
    \  return isPrime", "        val isPrime = (2l) until (n) forall {\n         \
    \   i => n % i == 0\n        }\n        isPrime", "        val isPrime = n <=\
    \ 1l\n        if (isPrime) {\n            val sqrt = (1l to n).map(n => math.pow(n,\
    \ 2l))\n            val isPrime = sqrt.forall(x => n % x == 0)\n        }\n  \
    \      isPrime", "        val isPrime = n <= 1l\n        if (isPrime) {\n    \
    \        true\n        } else {\n            val sqrt = (1l to n).foldLeft(1l)\
    \ {\n                case (acc, x) => if (x % acc != 0) acc + 1 else acc\n   \
    \         }\n            if (sqrt <= n) isPrime\n            else false\n    \
    \    }", "        val isPrime = n <= 1l\n        if(isPrime) true\n        else\
    \ {\n            val sqrt = (1l+n).toInt\n            for(i <- 2l to sqrt) {\n\
    \                if(n % i == 0) false\n            }\n            true\n     \
    \   }", "        val isPrime = scala.math.BigInt(n).isProbablePrime\n        if\
    \ (isPrime) true\n        else false", "        val i = 2l\n        val s = 2l\n\
    \        while (i <= n) {\n            if (n % i == 0) {\n                return\
    \ false\n            }\n            s += i\n            i += 1\n        }\n  \
    \      return true", "        val primes = mutable.ArrayBuffer.empty[Long]\n \
    \       val limit = (2l*n.toInt).toInt\n        for (i <- 2l to limit) {\n   \
    \         if (n % i == 0) {\n                primes += i\n            }\n    \
    \    }\n        primes.nonEmpty", "        val primes = mutable.ArrayBuffer(2l)\
    \ ++ (2l..n) map (n => if (n % _ == 0) n else false)\n        primes.exists(_\
    \ == true)", "        val isPrime = (2l) until n map (x => n % x != 0) reduceLeft\
    \ (_ || _)\n        isPrime", "        val isPrime = (2l) until (n) forall {\n\
    \            x => n % x == 0\n        }\n        isPrime", "        val isPrime\
    \ = mutable.Set[Long]()\n        val isNotPrime = mutable.Set[Long]()\n      \
    \  val isPrimeFactors = mutable.Set[Long]()\n        val isNotPrimeFactors = mutable.Set[Long]()\n\
    \        val isPrimeDivisors = mutable.Set[Long]()\n        val isNotPrimeDivisors\
    \ = mutable.Set[Long]()\n        val isPrimeDivisorsSet = mutable.Set[Long]()\n\
    \        val isNotPrimeDivisorsSet = mutable.Set[Long]()\n        val isPrimeDivisorsSet2\
    \ = mutable.Set[Long]()\n        val isNotPrimeDivisorsSet2 = mutable.Set[Long]()\n\
    \        val isPrimeDivisorsSet3 = mutable.Set[Long]()\n        val isNotPrimeDivisorsSet3\
    \ = mutable.Set[Long]()\n        val isPrimeDivisorsSet4 = mutable.Set[Long]()\n\
    \        val isNotPrimeDivisorsSet4 = mutable.Set[Long]()\n        val isPrimeDivisorsSet5\
    \ = mutable.Set[Long]()\n        val isNotPrimeDivisorsSet5 = mutable.Set[Long]()\n\
    \        val isPrimeDivisorsSet6 = mutable.Set[Long]()\n        val isNotPrimeDivisorsSet6\
    \ = mutable.Set[Long]()\n        val isPrimeDivisorsSet7 = mutable.Set[Long]()\n\
    \        val isNotPrimeDivisorsSet7 = mutable.Set[Long]()\n        val isPrimeDivisorsSet8\
    \ = mutable.Set[Long]()\n        val isNotPrimeDivisorsSet8 = mutable.Set[Long]()\n\
    \        val isPrimeDivisorsSet9 = mutable.Set[Long]()\n        val isNotPrimeDivisorsSet9\
    \ = mutable.Set[Long]()\n        val isPrimeDivisorsSet10 = mutable.Set[Long]()\n\
    \        val isNotPrimeDivisorsSet10 = mutable.Set[Long]()\n        val isPrimeDivisorsSet11\
    \ = mutable.Set[Long]()\n        val isNotPrimeDivisorsSet11 = mutable.Set[Long]()\n\
    \        val isPrimeDivisorsSet12 = mutable.", "        val primes = mutable.Set[Long]()\n\
    \        val limit = (2l*n)\n        for (i <- 2l to limit) {\n            if\
    \ (n % i == 0) {\n                primes.add(i)\n            }\n        }\n  \
    \      primes.size == n", "        val i = 2l\n        while (i <= n / i) {\n\
    \            if (n % i == 0) {\n                return false\n            }\n\
    \            i += 1\n        }\n        return true", "        val i = 2l\n  \
    \      while (i <= Math.sqrt(n)) {\n            if (n % i == 0l) false\n     \
    \       else i := i + 1l\n        }\n        true", '        val sqrt = (1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1',
  "        val i = 2l\n        var isPrime = true\n        while (i <= n / i) {\n\
    \            if (n % i == 0) {\n                isPrime = false\n            \
    \    break\n            }\n            i += 1\n        }\n        isPrime", '        val
    primes = mutable.ArrayBuffer(2l).++(mutable.ArrayBuffer(3l).++(mutable.ArrayBuffer(5l).++(mutable.ArrayBuffer(7l).++(mutable.ArrayBuffer(11l).++(mutable.ArrayBuffer(13l).++(mutable.ArrayBuffer(17l).++(mutable.ArrayBuffer(19l).++(mutable.ArrayBuffer(23l).++(mutable.ArrayBuffer(29l).++(mutable.ArrayBuffer(31l).++(mutable.ArrayBuffer(37l).++(mutable.ArrayBuffer(41l).++(mutable.ArrayBuffer(43l).++(mutable.ArrayBuffer(47l).++(mutable.ArrayBuffer(53l).++(mutable.ArrayBuffer(59l).++(mutable.ArrayBuffer(61l).++(mutable.ArrayBuffer(67l).++(mutable.ArrayBuffer(71l).++(mutable.ArrayBuffer(73l).++(mutable.ArrayBuffer(79l).++(mutable.ArrayBuffer(83l).++(mutable.ArrayBuffer(89l).++(mutable.ArrayBuffer(97l).++(mutable.ArrayBuffer(101l).++(mutable.ArrayBuffer(103l).++(mutable.ArrayBuffer(107l).++(mutable.ArrayBuffer(109l).++(mutable.ArrayBuffer(117l).++(mutable.ArrayBuffer(121l).++(mutable.ArrayBuffer(123l).++(mutable.ArrayBuffer(127l).++(mutable.ArrayBuffer(131l).++(mutable.ArrayBuffer(137l).++(mutable.ArrayBuffer(139l).++(mutable.ArrayBuffer(149l).++(mutable.ArrayBuffer(151l).++(mutable.ArrayBuffer(157l).++(mutable.ArrayBuffer(163l).++(mutable.ArrayBuffer(167l).++(mutable.ArrayBuffer(173l).++(mutable.ArrayBuffer(179l).++(mutable.ArrayBuffer(181l).++(mutable.ArrayBuffer(191l).++(mutable.ArrayBuffer(193l).++(mutable.ArrayBuffer(197l).++(mutable.ArrayBuffer(199l).++(mutable.ArrayBuffer(211l).++(mutable.ArrayBuffer(223l).++(mutable.ArrayBuffer(227l).++(mutable.ArrayBuffer(229l).++(mutable.ArrayBuffer(233l).++(mutable.ArrayBuffer(239l).++(mutable.ArrayBuffer(241l).++(mutable.ArrayBuffer(',
  "        val sqrt = (1l+n)/2l\n        val primes = mutable.ArrayBuffer(2l,3l,5l,7l,11l,13l,17l,19l,23l,29l,31l,37l,41l,43l,47l,53l,59l,61l,67l,71l,73l,79l,83l,89l,97l)\n\
    \        primes.find(_ % _ == 0).isDefined", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val divisors = mutable.ArrayBuffer.empty[Long]\n        divisors += 2l\n\
    \        divisors += 3l\n        divisors += 5l\n        divisors += 7l\n    \
    \    divisors += 11l\n        divisors += 13l\n        divisors += 17l\n     \
    \   divisors += 19l\n        divisors += 23l\n        divisors += 29l\n      \
    \  divisors += 31l\n        divisors += 37l\n        divisors += 41l\n       \
    \ divisors += 43l\n        divisors += 47l\n        divisors += 53l\n        divisors\
    \ += 59l\n        divisors += 61l\n        divisors += 67l\n        divisors +=\
    \ 71l\n        divisors += 73l\n        divisors += 79l\n        divisors += 83l\n\
    \        divisors += 89l\n        divisors += 97l\n        divisors += 101l\n\
    \        divisors += 103l\n        divisors += 107l\n        divisors += 109l\n\
    \        divisors += 113l\n        divisors += 127l\n        divisors += 131l\n\
    \        divisors += 137l\n        divisors += 139l\n        divisors += 147l\n\
    \        divisors += 151l\n        divisors += 157l\n        divisors += 163l\n\
    \        divisors += 167l\n        divisors += 173l\n        divisors += 179l\n\
    \        divisors += 181l\n        divisors += 191l\n        divisors += 197l\n\
    \        divisors += 199l\n        divisors += 211l\n        divisors += 223l\n\
    \        divisors += 227l\n        divisors += 229l\n        divisors += 233l\n\
    \        divisors += 239l\n        divisors += 241l\n        divisors += 247l\n\
    \        divisors += 251l\n        divisors += 257l\n        divisors += 263l\n\
    \        divisors += 269l\n        divisors += 271l\n        divisors += 277l\n\
    \        divisors += 281l\n        divisors += 283l\n        divisors += 293l\n\
    \        divisors += 307l\n        divisors += 311l\n        divisors += 313l\n\
    \        divisors += 317l\n        divisors += 323l\n        divisors += 329l\n\
    \        divisors += 331l\n        divisors += 337l\n        divisors += 347l\n\
    \        divisors += 351l\n        divisors += 359l\n        divisors += 367l\n\
    \        divisors += 373l\n        divisors += 379l\n        divisors += 383l\n\
    \        divisors += 389l", "        if (n == 1l) true\n        else if ((n %\
    \ 2l) == 0) false\n        else if ((n % 3l) == 0) false\n        else if ((n\
    \ % 5l) == 0) false\n        else if ((n % 7l) == 0) false\n        else if ((n\
    \ % 11l) == 0) false\n        else if ((n % 13l) == 0) false\n        else if\
    \ ((n % 17l) == 0) false\n        else if ((n % 19l) == 0) false\n        else\
    \ if ((n % 23l) == 0) false\n        else if ((n % 29l) == 0) false\n        else\
    \ if ((n % 31l) == 0) false\n        else if ((n % 37l) == 0) false\n        else\
    \ if ((n % 41l) == 0) false\n        else if ((n % 43l) == 0) false\n        else\
    \ if ((n % 47l) == 0) false\n        else if ((n % 53l) == 0) false\n        else\
    \ if ((n % 59l) == 0) false\n        else if ((n % 61l) == 0) false\n        else\
    \ if ((n % 67l) == 0) false\n        else if ((n % 71l) == 0) false\n        else\
    \ if ((n % 73l) == 0) false\n        else if ((n % 79l) == 0) false\n        else\
    \ if ((n % 83l) == 0) false\n        else if ((n % 89l) == 0) false\n        else\
    \ if ((n % 97l) == 0) false\n        else if ((n % 101l) == 0) false\n       \
    \ else if ((n % 103l) == 0) false\n        else if ((n % 107l) == 0) false\n \
    \       else if ((n % 109l) == 0) false\n        else if ((n % 113l) == 0) false\n\
    \        else if ((n % 117l) == 0) false\n        else if ((n % 121l) == 0) false\n\
    \        else if ((n % 123l) == 0) false\n        else if ((n % 127l) == 0) false\n\
    \        else if ((n % 131l) == 0) false\n        else if ((n % 137l) == 0) false\n\
    \        else if ((n % 141l) == 0) false\n        else if ((n % 147l) == 0) false\n\
    \        else if ((n % 151l) == 0) false\n        else if ((n % 157l) == 0) false\n\
    \        else if ((n % 161l) == 0) false\n        else if ((n % 163l) == 0) false\n\
    \        else if ((n % 167l) == 0) false\n        else if ((n % 173l) == 0) false\n\
    \        else if ((n % 177l) == 0) false\n        else if ((n % 181l) == 0) false\n\
    \        else if ((n % 187l) == 0) false\n        else if ((n % 191l) == 0) false\n\
    \        else if ((n % 197l) == 0) false\n        else if ((n % 201l) == 0) false\n\
    \        else if ((n % 207l) == 0) false\n        else if ((n % 211l) == 0) false\n\
    \        else if ((n % 217l) == 0) false\n        else if ((n % 223l) == 0) false\n\
    \        else if ((n % 227l) == 0) false\n", "        val sqrt = (sqrt(n).toInt).toLong\n\
    \        val primes = mutable.ArrayBuffer(2l)\n        for(i <- 3l to sqrt) {\n\
    \            if(n % i == 0) {\n                primes += i\n            }\n  \
    \      }\n        primes.forall(n => n % n == 0)", "        val isPrime = (2l)\
    \ until n match {\n            case n if n % _ == 0 => false\n            case\
    \ n => true\n        }\n        !isPrime", "        val isPrime = (2l) until n\
    \ map (x => if (n % x == 0) false else true) reduceLeft (_ || _)\n        isPrime"]
stop_tokens:
- "\n    }\n"
