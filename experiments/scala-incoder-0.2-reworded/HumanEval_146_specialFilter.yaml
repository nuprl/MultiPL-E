name: HumanEval_146_specialFilter
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes a list of numbers as input and returns \n  \
  \  // the number of elements in the list that are greater than 10 and both \n  \
  \  // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n\
  \    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong)))\n\
  \    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong,\
  \ 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n    def specialFilter(nums\
  \ : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
  \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
  \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
  \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n   \
  \ assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
  \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
  \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n   \
  \ assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
  \ == (0l));\n    }\n\n}\n"
completions: ['        nums.filter(x => x > 10 && x.toString.take(1).forall(y => y
    % 2 == 1)).size ', "        val numsCopy = nums.toList\n        numsCopy.filter(_\
    \ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (i <- 0 until numsCopy.size) {\n         \
    \   if (numsCopy(i) > 10) {\n                if (numsCopy(i) %% 2 == 1) {\n  \
    \                  if (numsCopy(i) < (numsCopy(i) / 2)) count += 1\n         \
    \       }\n            }\n        }\n        count", '        nums.filter(num
    => num > 10 && num % 2 == 1 && num % 2 == 0).length', "        val numsCopy =\
    \ nums.toList\n        var count = 0\n        for (i <- 0 until numsCopy.size)\
    \ {\n            if (numsCopy(i) > 10) {\n                if (numsCopy(i) %% 2\
    \ == 1) {\n                    if (numsCopy(i) < (10 * numsCopy(i))) {\n     \
    \                   count += 1\n                    }\n                }\n   \
    \         }\n        }\n        count", '        nums.filter(_ > 10).filter(_
    % 2 == 1).length', "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 ==\
    \ 1)\n        numsCopy3.size", "        val numsCopy = nums.toList\n        numsCopy.filter(_\
    \ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(x => if (x > 10 && x % 2 == 1 && x % 2 == 0) numsCopy.remove(x))\n\
    \        numsCopy.size", "        val numsCopy = nums.toList\n        numsCopy.filter(x\
    \ => x > 10 && numsCopy.head % 2 == 1 && numsCopy.last % 2 == 1).length", "  \
    \      val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.size",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10).filter(_ % 2 == 1)\n        numsCopy2.length", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.length", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 != 0)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.size", "       \
    \ val numsCopy = nums.toList\n        numsCopy.foreach(n => {\n            if\
    \ (n > 10 && n % 2 == 1 && n % 2 == 0) {\n                numsCopy.remove(n)\n\
    \            }\n        })\n        numsCopy.size", "        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (i <- 0 until numsCopy.size) {\n         \
    \   if (numsCopy(i) > 10) {\n                if (numsCopy(i) %% 2 == 1) {\n  \
    \                  if (numsCopy(i) < (numsCopy(i) / 2)) {\n                  \
    \      count += 1\n                    }\n                }\n            }\n \
    \       }\n        count", '        nums.filter(x => x > 10).count(x => x.toString.charAt(0).toInt
    == 1 && x.toString.charAt(1).toInt == 1)', "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  '        nums.count(x => x > 10 && x.toString.charAt(0) % 2 != 0 && x.toString.charAt(nums.length
    - 1) % 2 != 0)', "        val numsCopy = nums.toList\n        numsCopy.foreach(x\
    \ => if (x > 10 && numsCopy.head % 2 == 1 && numsCopy.last % 2 == 1) numsCopy.remove(x))\n\
    \        numsCopy.size", "        val numsCopy = nums.toList\n        var count\
    \ = 0\n        var lastDigit = 0\n        var firstDigit = 0\n        for(i <-\
    \ 0 until numsCopy.size) {\n            val num = numsCopy(i)\n            if(num\
    \ > 10) {\n                if(firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n \
    \                   count += 1\n                }\n                firstDigit\
    \ = 0\n                lastDigit = 0\n            } else {\n                firstDigit\
    \ += 1\n                lastDigit += 1\n            }\n        }\n        count",
  '        nums.count(x => x > 10 && x % 2 == 1 && x % 2 == 0)', "        val numsCopy\
    \ = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        numsCopy4.size", "        val numsCopy = nums.toList\n  \
    \      numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size", " \
    \       val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ %\
    \ 2 == 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n    \
    \    val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.size", "        val numsCopy = nums.toList\n  \
    \      numsCopy.foreach(x => {\n            val firstDigit = x % 10\n        \
    \    val lastDigit = x % 10\n            val firstOdd = x % 2 == 1\n         \
    \   val lastOdd = x % 2 == 1\n            if (firstDigit > 10 && lastDigit > 10\
    \ && firstOdd && lastOdd) {\n                numsCopy.remove(x)\n            }\n\
    \        })\n        numsCopy.size", '        nums.filter(_ > 10).filter(_ % 2
    == 1).length', "        val numsCopy = nums.toList\n        var count = 0\n  \
    \      for(i <- 0 until numsCopy.size) {\n            if(numsCopy(i) > 10) {\n\
    \                if(numsCopy(i) %% 2 == 1) {\n                    count += 1\n\
    \                }\n            }\n        }\n        count", "        val numsCopy\
    \ = nums.toList\n        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ %\
    \ 2 == 1).size", '        nums.filter(num => num > 10 && num.asDigit(0) % 2 ==
    1 && num.asDigit(-1) % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.charAt(0).toChar
    % 2 == 1 && x.toString.charAt(x.toString.length - 1).toChar % 2 == 1).length',
  "        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ %\
    \ 2 == 1).filter(_ % 2 == 1).length", '        nums.count(_ > 10) && (nums.takeWhile(_
    % 2 == 1).takeWhile(_ % 2 == 1).length == nums.length)', "        val numsCopy\
    \ = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.size", "       \
    \ var count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 ==\
    \ 1 && i % 2 != 0) {\n                count += 1\n            }\n        }\n \
    \       count", "        val numsCopy = nums.toList\n        numsCopy.filter(x\
    \ => x > 10 && numsCopy.head % 2 == 1 && numsCopy.last % 2 == 1).length", '        nums.count(x
    => x > 10 && x.toString.charAt(0).toInt == 1 && x.toString.charAt(x.toString.length
    - 1).toInt == 1)', "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 ==\
    \ 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.size",
  "        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ %\
    \ 2 == 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n    \
    \    var count = 0\n        for (ns <- numsCopy) {\n            if (ns > 10) {\n\
    \                if (ns % 2 == 1 && ns % 3 == 1) {\n                    count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ % 2 ==\
    \ 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n        numsCopy.filter(_\
    \ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size", "        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 != 0)\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \       val numsCopy = nums.toList\n        var count = 0\n        for ( n <-\
    \ numsCopy) {\n            if ( n > 10 && n % 2 == 1 && n % 2 == 0) {\n      \
    \          count += 1\n            }\n        }\n        count", "        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_\
    \ % 2 == 0).size", '        nums.filter(x => x > 10 && x % 2 != 0 && x % 2 !=
    1).length', '        nums.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 1).length',
  "        val numsCopy = nums.toList\n        numsCopy.foreach(num => {\n       \
    \     if (num > 10) {\n                if (num % 2 == 1) {\n                 \
    \   if (numsCopy.head % 2 == 1 && numsCopy.last % 2 == 1) {\n                \
    \        numsCopy.head += 1\n                        numsCopy.last -= 1\n    \
    \                }\n                }\n            }\n        })\n        numsCopy.count",
  "        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ %\
    \ 2 == 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n    \
    \    var count = 0\n        for(i <- 0 until numsCopy.size) {\n            val\
    \ num = numsCopy(i)\n            if(num > 10) {\n                if(num % 2 ==\
    \ 1 && num % 2 == 0) {\n                    count += 1\n                }\n  \
    \          }\n        }\n        count", '        nums.count(x => x > 10 && x
    % 2 == 1 && x % 2 == 0)', "        var count = 0\n        for (i <- nums) {\n\
    \            if (i > 10 && i % 2 == 1 && i % 2 == 0) {\n                count\
    \ += 1\n            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size",
  "        val numsCopy = nums.toList\n        numsCopy.foreach(num => {\n       \
    \     if (num > 10) {\n                if (numsCopy.head % 2 == 1 && numsCopy.last\
    \ % 2 == 1)\n                    numsCopy.remove(0)\n            }\n        })\n\
    \        numsCopy.size", "        var count = 0\n        var lastDigit = 0\n \
    \       var firstDigit = 0\n        for (i <- nums) {\n            if (i > 10)\
    \ {\n                count += 1\n                lastDigit = i\n            }\n\
    \            if (i % 2 == 0) {\n                firstDigit = i\n            }\n\
    \        }\n        if (count > 0 && lastDigit % 2 == 1 && firstDigit % 2 == 1)\
    \ {\n            count\n        } else {\n            0\n        }", '        nums.filter(x
    => x > 10 && x.toString.charAt(0).toChar % 2 == 1 && x.toString.charAt(x.toString.length-1).toChar
    % 2 == 1).length', "        val numsMap = nums.toMap\n        val numsMapKeys\
    \ = numsMap.keys\n        val numsMapValues = numsMap.values.toList\n        val\
    \ numsMapValuesLength = numsMapValues.length\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toLong\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength", "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 !=\
    \ 0)\n        numsCopy3.length", "        val numsMap = nums.toMap\n        numsMap.values.filter(x\
    \ => x > 10 && numsMap(x).isOdd && numsMap(x).isOdd).length", "        val numsCopy\
    \ = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size", "        val numsCopy = nums.toList\n  \
    \      val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        numsCopy3.length", "     \
    \   val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10).filter(_\
    \ % 2 == 1)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        numsCopy3.size",
  "        val numsCopy = nums.toList\n        numsCopy.foreach(num => {\n       \
    \     if (num > 10) {\n                if (numsCopy.head % 2 == 1 && numsCopy.last\
    \ % 2 == 1) {\n                    numsCopy.foreach(x => numsCopy.remove(x))\n\
    \                }\n            }\n        })\n        numsCopy.size", "     \
    \   var count = 0\n        for (i <- nums) {\n            if (i > 10) {\n    \
    \            if (i % 2 == 1) {\n                    if (i % 2 == 0) {\n      \
    \                  if (i % 2 == 1) {\n                            if (i % 2 ==\
    \ 0) {\n                                count += 1\n                         \
    \   }\n                        }\n                    }\n                }\n \
    \           }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_ % 2 != 0)\n        numsCopy4.size",
  '        nums.count(x => x > 10 && x.toString.charAt(0).toInt == 1 && x.toString.charAt(nums.length
    - 1).toInt == 1)', "        val numsMap = nums.groupBy(x => x % 10).mapValues(_.size)\n\
    \        numsMap.getOrElse(10, 0l) + numsMap.getOrElse(9, 0l)", "        val numsCopy\
    \ = nums.toList\n        numsCopy.filter( x => x > 10 && numsCopy.head % 2 ==\
    \ 1 && numsCopy.last % 2 == 1 )", "        val numsCopy = nums.toList\n      \
    \  val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_ % 2 != 0)\n        val\
    \ numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        numsCopy5.size", "       \
    \ val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n\
    \        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 =\
    \ numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.length", "        val numsCopy\
    \ = nums.toList\n        var count = 0\n        var firstOdd = 0\n        var\
    \ lastOdd = 0\n        var firstEven = 0\n        var lastEven = 0\n        for(i\
    \ <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n           \
    \ val firstDigit = num / 10\n            val lastDigit = num % 10\n          \
    \  if(firstDigit % 2 == 1) {\n                firstEven = firstEven+1\n      \
    \      }\n            if(lastDigit % 2 == 1) {\n                lastEven = lastEven+1\n\
    \            }\n            if(firstDigit > 10) {\n                firstOdd =\
    \ firstOdd+1\n            }\n            if(lastDigit > 10) {\n              \
    \  lastOdd = lastOdd+1\n            }\n        }\n        count = firstOdd + lastOdd\
    \ + firstEven + lastEven\n        count", "        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size",
  '        nums.filter(x => x > 10 && x.toString.charAt(0).toChar % 2 == 1 && x.toString.charAt(x.toString.length
    - 1).toChar % 2 == 1).length', "        val numsCopy = nums.toList\n        val\
    \ numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val numsCopy3\
    \ = numsCopy2.filter(_ % 2 == 0)\n        val numsCopy4 = numsCopy3.filter(_ >\
    \ 10).filter(_ % 2 == 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2 == 0)\n\
    \        numsCopy5.size", "        var count = 0\n        for (i <- nums) {\n\
    \            if (i > 10 && i % 2 == 1 && i % 2 != 0) {\n                count\
    \ += 1\n            }\n        }\n        count", '        nums.count(_ > 10)
    && (nums.takeWhile(_ % 2 == 1).lastOption.isOdd && nums.takeWhile(_ % 2 == 1).headOption.isOdd)',
  "        val numsCopy = nums.toList\n        var count = 0\n        for (i <- 0\
    \ until numsCopy.size) {\n            val num = numsCopy(i)\n            if (num\
    \ > 10) {\n                val firstDigit = num / 10\n                val lastDigit\
    \ = num % 10\n                if (firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \        count", "        var count = 0\n        for (i <- nums) {\n         \
    \   if (i > 10 && i % 2 == 1 && i % 2 != 0) {\n                count += 1\n  \
    \          }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (i <- 0 until numsCopy.size) {\n         \
    \   if (numsCopy(i) > 10) {\n                if (numsCopy(i) %% 2 == 1) {\n  \
    \                  if (numsCopy(i) < (numsCopy(i) / 2)) {\n                  \
    \      count += 1\n                    }\n                }\n            }\n \
    \       }\n        count", "        var count = 0\n        for (i <- nums) {\n\
    \            if (i > 10 && i % 2 == 1 && i % 2 != 0) {\n                count\
    \ += 1\n            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2 ==\
    \ 0)\n        val numsCopy6 = numsCopy5.filter(_ > 10).filter(_ % 2 == 1)\n  \
    \      val numsCopy7 = numsCopy6.filter(_ % 2 == 0)\n        val numsCopy8 = numsCopy7.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        val numsCopy9 = numsCopy8.filter(_ % 2 ==\
    \ 0)\n        val numsCopy10 = numsCopy9.filter(_ > 10).filter(_ % 2 == 1)\n \
    \       numsCopy10.size", "        var count = 0\n        for (i <- nums) {\n\
    \            if (i > 10 && i % 2 == 1 && i % 2 != 0) {\n                count\
    \ += 1\n            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        numsCopy3.size", "       \
    \ val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10).filter(_\
    \ % 2 == 1)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        numsCopy3.size",
  '        nums.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size', "    \
    \    val numsCopy = nums.toList\n        var count = 0\n        for(i <- 0 until\
    \ numsCopy.size) {\n            if(numsCopy(i) > 10) {\n                if(numsCopy(i)\
    \ % 2 == 1) {\n                    if(numsCopy(i) < 10) {\n                  \
    \      if(numsCopy(i + 1) < 10) {\n                            if(numsCopy(i +\
    \ 2) > 10) {\n                                count += 1\n                   \
    \         }\n                        }\n                    }\n              \
    \  }\n            }\n        }\n        count", '        nums.filter(x => x >
    10 && x.toString.charAt(0).toChar % 2 == 1 && x.toString.charAt(x.toString.length
    - 1).toChar % 2 == 1).length', "        val numsCopy = nums.toList\n        val\
    \ numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val numsCopy3\
    \ = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ >\
    \ 10).filter(_ % 2 == 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2 == 1)\n\
    \        numsCopy5.size", "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 0)\n        numsCopy3.size", "        val numsCopy = nums.toList\n  \
    \      val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.length", '        nums.count(x => x > 10 && x.toString.charAt(0)
    % 2 == 1 && x.toString.charAt(nums.length - 1) % 2 == 1)', "        val numsCopy\
    \ = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2\
    \ == 1).filter(_ % 2 == 0)\n        numsCopy2.length", "        val numsCopy =\
    \ nums.toList\n        val evens = numsCopy.filter(x => x % 2 == 0)\n        val\
    \ odds = numsCopy.filter(x => x % 2 != 0)\n        val firstOdds = evens.filter(x\
    \ => x % 2 == 1)\n        val lastOdds = evens.filter(x => x % 2 == 0)\n     \
    \   val firstEvens = odds.filter(x => x % 2 == 1)\n        val lastEvens = odds.filter(x\
    \ => x % 2 == 0)\n        val firstOddsEvens = firstOdds.filter(x => x % 2 ==\
    \ 1)\n        val lastOddsEvens = lastOdds.filter(x => x % 2 == 0)\n        val\
    \ firstEvensOdds = firstEvens.filter(x => x % 2 == 1)\n        val lastEvensOdds\
    \ = lastEvens.filter(x => x % 2 == 0)\n        val firstOddsEvensOdds = firstOddsEvens.filter(x\
    \ => x % 2 == 1)\n        val lastOddsEvensOdds = lastOddsEvens.filter(x => x\
    \ % 2 == 0)\n        val firstEvensOddsEvens = firstEvensOdds.filter(x => x %\
    \ 2 == 1)\n        val lastEvensOddsEvens = lastEvensOdds.filter(x => x % 2 ==\
    \ 0)\n        val firstOddsEvensOddsEvens = firstOddsEvensOdds.filter(x => x %\
    \ 2 == 1)\n        val lastOddsEvensOddsEvens = lastOddsEvensOdds.filter(x =>\
    \ x % 2 == 0)\n        val firstEvensOddsEvensOdds = firstEvensOddsEvens.filter(x\
    \ => x % 2 == 1)\n        val lastEvensOddsEvensOdds = lastEvensOddsEvens.filter(x\
    \ => x % 2 == 0)\n        val firstOddsEvensOddsEvensOdds = firstOddsEvensOddsEvens.filter(x\
    \ => x % 2 == 1)\n        val lastOddsEvensOddsEvensOdds = lastOddsEvensOddsEvens.filter(x\
    \ => x % 2 == 0)\n        val firstEvensOddsEvensOddsEvensOdds = firstEvensOddsEvensOddsEvens.filter(x\
    \ => x % 2 == 1)\n        val last", "        val numsCopy = nums.toList\n   \
    \     numsCopy.foreach(num => {\n            if (num > 10) {\n               \
    \ if (numsCopy.head % 2 == 1 && numsCopy.last % 2 == 1) {\n                  \
    \  numsCopy.clear()\n                }\n            }\n        })\n        numsCopy.size",
  '        nums.count(x => x > 10 && x.toString.charAt(0).toInt == 1 && x.toString.charAt(x.toString.length-1).toInt
    == 1)', "        var count = 0\n        var lastDigit = 0\n        var firstDigit\
    \ = 0\n        for (i <- nums) {\n            if (i > 10) {\n                count\
    \ += 1\n                lastDigit = i\n            } else if (i % 2 == 1) {\n\
    \                count += 1\n                firstDigit = i\n            }\n \
    \       }\n        if (count == 0) {\n            return 0\n        }\n      \
    \  if (lastDigit % 2 == 1) {\n            count += 1\n        }\n        if (firstDigit\
    \ % 2 == 1) {\n            count += 1\n        }\n        if (count == 0) {\n\
    \            return 0\n        }\n        return count", "        var count =\
    \ 0\n        for (i<- nums) {\n            if (i > 10 && i % 2 != 0 && i % 2 !=\
    \ 1) {\n                count += 1\n            }\n        }\n        count",
  "        var count = 0\n        for (i <- nums) {\n            if (i > 10 && i %\
    \ 2 == 1 && i % 2 != 0) {\n                count += 1\n            }\n       \
    \ }\n        count", '        nums.filter(_ > 10).filter(_ % 2 == 1).filter(_
    % 2 == 0).size', "        var count = 0\n        for (i <- nums) {\n         \
    \   if (i > 10) {\n                if (i % 2 == 1) {\n                    if (i\
    \ % 2 == 0) {\n                        if (i % 2 == 1) {\n                   \
    \         count += 1\n                        }\n                    }\n     \
    \           }\n            }\n        }\n        count", "        val numsCopy\
    \ = nums.toList\n        var count = 0\n        for (i <- 0 until numsCopy.size)\
    \ {\n            if (numsCopy(i) > 10) {\n                if (numsCopy(i) %% 2\
    \ == 1) {\n                    if (numsCopy(i) < (numsCopy(i) / 2)) count += 1\n\
    \                }\n            }\n        }\n        count", "        val numsCopy\
    \ = nums.toList\n        var count = 0\n        for (i<- 0 until numsCopy.size)\
    \ {\n            val num = numsCopy(i)\n            if (num > 10) {\n        \
    \        if (numsCopy(i-1) % 2 == 1 && numsCopy(i+1) % 2 == 1) {\n           \
    \         count += 1\n                }\n            }\n        }\n        count",
  "        val numsCopy = nums.toList\n        var count = 0\n        for (i <- 0\
    \ until numsCopy.size) {\n            if (numsCopy(i) > 10) {\n              \
    \  if (numsCopy(i) %% 2 == 1) {\n                    if (numsCopy(i) < (10 * numsCopy(i)))\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        var count = 0\n        var firstOdd = 0\n        var lastOdd = 0\n  \
    \      for(i <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n\
    \            if(num > 10) {\n                if(num % 2 == 0) {\n            \
    \        count += 1\n                    if(num % 2 == 1) {\n                \
    \        firstOdd += 1\n                    }\n                } else {\n    \
    \                lastOdd += 1\n                }\n            }\n        }\n \
    \       (count * 2l) + (firstOdd * 1l) + (lastOdd * 1l)", "        var count =\
    \ 0\n        for (n <- nums) {\n            if (n > 10 && n.toString.charAt(0).toChar\
    \ % 2 == 1 && n.toString.charAt(n.toString.length-1).toChar % 2 == 1) {\n    \
    \            count += 1\n            }\n        }\n        count", "        val\
    \ numsCopy = nums.toList\n        var count = 0\n        for (i <- 0 until numsCopy.size)\
    \ {\n            val num = numsCopy(i)\n            if (num > 10) {\n        \
    \        if (numsCopy(i-1) % 2 == 1 && numsCopy(i+1) % 2 == 1) {\n           \
    \         count += 1\n                }\n            }\n        }\n        count",
  "        val numsMap = nums.toMap\n        val numsMapKeys = numsMap.keys\n    \
    \    val numsMapValues = numsMap.values.toList\n        val numsMapValuesSum =\
    \ numsMapValues.sum\n        val numsMapValuesSum2 = numsMapValuesSum * numsMapValuesSum\n\
    \        val numsMapValuesSum3 = numsMapValuesSum2 * numsMapValuesSum\n      \
    \  val numsMapValuesSum4 = numsMapValuesSum3 * numsMapValuesSum\n        val numsMapValuesSum5\
    \ = numsMapValuesSum4 * numsMapValuesSum\n        val numsMapValuesSum6 = numsMapValuesSum5\
    \ * numsMapValuesSum\n        val numsMapValuesSum7 = numsMapValuesSum6 * numsMapValuesSum\n\
    \        val numsMapValuesSum8 = numsMapValuesSum7 * numsMapValuesSum\n      \
    \  val numsMapValuesSum9 = numsMapValuesSum8 * numsMapValuesSum\n        val numsMapValuesSum10\
    \ = numsMapValuesSum9 * numsMapValuesSum\n        val numsMapValuesSum11 = numsMapValuesSum10\
    \ * numsMapValuesSum\n        val numsMapValuesSum12 = numsMapValuesSum11 * numsMapValuesSum\n\
    \        val numsMapValuesSum13 = numsMapValuesSum12 * numsMapValuesSum\n    \
    \    val numsMapValuesSum14 = numsMapValuesSum13 * numsMapValuesSum\n        val\
    \ numsMapValuesSum15 = numsMapValuesSum14 * numsMapValuesSum\n        val numsMapValuesSum16\
    \ = numsMapValuesSum15 * numsMapValuesSum\n        val numsMapValuesSum17 = numsMapValuesSum16\
    \ * numsMapValuesSum\n        val numsMapValuesSum18 = numsMapValuesSum17 * numsMapValuesSum\n\
    \        val numsMapValuesSum19 = numsMapValuesSum18 * numsMapValuesSum\n    \
    \    val numsMapValuesSum20 = numsMapValuesSum19 * numsMapValuesSum\n        val\
    \ numsMapValuesSum21 = numsMapValuesSum20 * numsMapValuesSum\n        val numsMapValuesSum22\
    \ = numsMapValuesSum21 * numsMapValuesSum\n        val numsMapValuesSum23 = numsMapValuesSum22\
    \ * ", "        var count = 0\n        for (i <- nums) {\n            if (i >\
    \ 10 && i % 2 == 1 && i % 2 == 0) {\n                count += 1\n            }\n\
    \        }\n        count", "        val numsCopy = nums.toList\n        var count\
    \ = 0\n        for (i <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n\
    \            if (num > 10) {\n                if (numsCopy(i).isOdd) {\n     \
    \               if (numsCopy(i).isOdd && numsCopy(i).isOdd) {\n              \
    \          count += 1\n                    }\n                }\n            }\n\
    \        }\n        count", "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 ==\
    \ 1)\n        numsCopy3.length", '        nums.filter(x => x > 10 && x.toString.charAt(0).toChar
    % 2 == 1 && x.toString.charAt(x.toString.length - 1).toChar % 2 == 1).length',
  "        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ %\
    \ 2 == 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n    \
    \    val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val numsCopy3\
    \ = numsCopy2.filter(_ % 2 == 0)\n        val numsCopy4 = numsCopy3.filter(_ >\
    \ 10).filter(_ % 2 == 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2 == 0)\n\
    \        val numsCopy6 = numsCopy5.filter(_ > 10).filter(_ % 2 == 1)\n       \
    \ val numsCopy7 = numsCopy6.filter(_ % 2 == 0)\n        val numsCopy8 = numsCopy7.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        val numsCopy9 = numsCopy8.filter(_ % 2 ==\
    \ 0)\n        val numsCopy10 = numsCopy9.filter(_ > 10).filter(_ % 2 == 1)\n \
    \       numsCopy10.size", "        val numsCopy = nums.toList\n        var count\
    \ = 0\n        var lastOdd = false\n        var firstOdd = false\n        for\
    \ (i <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n        \
    \    if (num > 10) {\n                if (lastOdd && firstOdd) {\n           \
    \         count += 1\n                }\n                lastOdd = num % 2 !=\
    \ 0\n                firstOdd = num % 2 != 1\n            } else {\n         \
    \       lastOdd = false\n                firstOdd = false\n            }\n   \
    \     }\n        count", '        nums.filter(_ > 10).filter(_ % 2 == 1).filter(_
    % 2 == 0).size', "        val numsCopy = nums.toList\n        var count = 0\n\
    \        for (i <- 0 until numsCopy.size) {\n            if (numsCopy(i) > 10)\
    \ {\n                if (numsCopy(i) %% 2 == 1) {\n                    if (numsCopy(i)\
    \ < (numsCopy(i) / 2)) {\n                        count += 1\n               \
    \     }\n                }\n            }\n        }\n        count", "      \
    \  val numsCopy = nums.toList\n        var count = 0\n        for (i <- 0 until\
    \ numsCopy.size) {\n            if (numsCopy(i) > 10) {\n                if (numsCopy(i)\
    \ mod 2 != 0) {\n                    if (numsCopy(i) mod 2 != 1) {\n         \
    \               count += 1\n                    }\n                }\n       \
    \     }\n        }\n        count", "        val numsCopy = nums.toList\n    \
    \    numsCopy.filter(num => num > 10).count(num => num % 2 == 1 && num % 3 ==\
    \ 0)", "        var count = 0\n        for (i <- nums) {\n            if (i >\
    \ 10) {\n                if (i % 2 == 1) {\n                    if (i % 2 == 0)\
    \ {\n                        if (i % 2 == 1) {\n                            count\
    \ += 1\n                        }\n                    }\n                }\n\
    \            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        numsCopy3.size", "        val numsCopy = nums.toList\n  \
    \      numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size", " \
    \       val numsCopy = nums.toList\n        numsCopy.filter(x => x > 10 && numsCopy.head\
    \ % 2 == 1 && numsCopy.last % 2 == 1).length", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        val odd = numsSorted.filter(_ % 2 == 1)\n        val even = numsSorted.filter(_\
    \ % 2 == 0)\n        val first = even.head\n        val last = even.last\n   \
    \     val firstOdd = odd.filter(x => x % 2 == 1)\n        val lastOdd = odd.filter(x\
    \ => x % 2 == 0)\n        val firstEven = even.filter(x => x % 2 == 0)\n     \
    \   val lastEven = even.filter(x => x % 2 == 1)\n        val firstOddEven = firstOdd.filter(x\
    \ => x % 2 == 0)\n        val lastOddEven = lastOdd.filter(x => x % 2 == 0)\n\
    \        val firstOddEvenLastOdd = firstOddEven.last\n        val lastOddEvenLastOdd\
    \ = lastOddEven.last\n        val firstEvenLastOdd = firstEven.last\n        val\
    \ lastEvenLastOdd = lastEven.last\n        val firstEvenLastOddEven = firstEvenLastOdd.filter(x\
    \ => x % 2 == 0)\n        val lastEvenLastOddEven = lastEvenLastOdd.filter(x =>\
    \ x % 2 == 0)\n        val firstEvenLastOddEvenLastOdd = firstEvenLastOddEven.last\n\
    \        val lastEvenLastOddEvenLastOdd = lastEvenLastOddEven.last\n        val\
    \ firstEvenLastOddEvenLastOddEven = firstEvenLastOddEvenLastOdd.filter(x => x\
    \ % 2 == 0)\n        val lastEvenLastOddEvenLastOddEven = lastEvenLastOddEvenLastOdd.filter(x\
    \ => x % 2 == 0)\n        val firstEvenLastOddEvenLastOddEvenLastOdd = firstEvenLastOddEvenLastOddEven.last\n\
    \        val lastEvenLastOddEvenLastOddEvenLastOdd = lastEvenLastOddEvenLastOddEven.last\n\
    \        val firstEvenLastOddEvenLastOddEvenLastOddEven = firstEvenLastOddEvenLastOddEvenLastOdd.filter(x\
    \ => x % 2 == 0)\n        val lastEvenLastOddEvenLastOddEvenLastOddEven = lastEvenLastOddEvenLastOddEvenLastOddEven.last\n\
    \        val firstEvenLastOddEvenLastOddEvenLastO", "        var count = 0\n \
    \       var lastDigit = 0\n        var firstDigit = 0\n        for (i <- nums)\
    \ {\n            if (i > 10) {\n                count += 1\n                if\
    \ (lastDigit % 2 == 1) {\n                    count += 1\n                }\n\
    \                if (firstDigit % 2 == 1) {\n                    count += 1\n\
    \                }\n            }\n            lastDigit = i\n            firstDigit\
    \ = i\n        }\n        count", '        nums.count(x => x > 10 && x.toString.charAt(0).toChar
    % 2 == 1 && x.toString.charAt(x.toString.length - 1).toChar % 2 == 1)', '        nums.count(x
    => x > 10 && nums(x) % 2 == 1 && nums(x) % 2 == 0)', "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_ % 2 != 0)\n        numsCopy4.size",
  "        var count = 0\n        var firstOdd = false\n        var lastOdd = false\n\
    \        for (i <- nums) {\n            if (i > 10) {\n                count +=\
    \ 1\n                if (i % 2 == 1) {\n                    firstOdd = true\n\
    \                }\n                if (i % 2 == 0) {\n                    lastOdd\
    \ = true\n                }\n            }\n        }\n        if (firstOdd &&\
    \ lastOdd) {\n            count += 1\n        }\n        count", '        nums.count(x
    => x > 10 && x % 2 == 1 && x % 2 == 0)', "        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(x => {\n            if (x > 10 && x % 2 == 1 && x %\
    \ 2 == 0) {\n                numsCopy.remove(x)\n            }\n        })\n \
    \       numsCopy.size", "        val numsCopy = nums.toList\n        var count\
    \ = 0\n        var firstOdd = 0\n        var lastOdd = 0\n        var firstEven\
    \ = 0\n        var lastEven = 0\n        for (i <- 0 until numsCopy.size) {\n\
    \            val num = numsCopy(i)\n            if (num > 10) {\n            \
    \    count += 1\n                if (num % 2 == 0) {\n                    if (num\
    \ % 2 == 1) {\n                        firstEven += 1\n                    } else\
    \ {\n                        lastEven += 1\n                    }\n          \
    \      } else {\n                    if (num % 2 == 1) {\n                   \
    \     firstOdd += 1\n                    } else {\n                        lastOdd\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \       (count * (firstOdd + lastOdd) + (firstEven + lastEven))", "        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 &&\
    \ i % 2 == 0) {\n                count += 1\n            }\n        }\n      \
    \  count", '        nums.filter(x => x > 10 && x.toString.charAt(0) % 2 != 0 &&
    x.toString.charAt(nums.length - 1) % 2 != 0).length', "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val odds = numsSorted.filter(x => x.toString.toInt%2\
    \ == 1)\n        val evens = numsSorted.filter(x => x.toString.toInt%2 == 0)\n\
    \        val firstOdds = evens.filter(x => x.toString.toInt%2 == 1)\n        val\
    \ firstEvens = odds.filter(x => x.toString.toInt%2 == 0)\n        val firstOddsEvens\
    \ = firstOdds.filter(x => x.toString.toInt%2 == 1)\n        val firstOddsOdds\
    \ = firstEvens.filter(x => x.toString.toInt%2 == 0)\n        val firstOddsEvensOdds\
    \ = firstOddsEvens.filter(x => x.toString.toInt%2 == 1)\n        val firstOddsEvensEvens\
    \ = firstOddsOdds.filter(x => x.toString.toInt%2 == 0)\n        val firstOddsEvensOddsEvens\
    \ = firstOddsEvensOdds.filter(x => x.toString.toInt%2 == 1)\n        val firstOddsEvensEvensOdds\
    \ = firstOddsEvensEvens.filter(x => x.toString.toInt%2 == 0)\n        val firstOddsEvensEvensEvensOdds\
    \ = firstOddsEvensEvensOdds.filter(x => x.toString.toInt%2 == 1)\n        val\
    \ firstOddsEvensEvensEvensEvensOdds = firstOddsEvensEvensEvensOdds.filter(x =>\
    \ x.toString.toInt%2 == 0)\n        val firstOddsEvensEvensEvensEvensEvensOdds\
    \ = firstOddsEvensEvensEvensEvensOdds.filter(x => x.toString.toInt%2 == 1)\n \
    \       val firstOddsEvensEvensEvensEvensEvensEvensOdds = firstOddsEvensEvensEvensEvensEvensOdds.filter(x\
    \ => x.toString.toInt%2 == 0)\n        val firstOddsEvensEvensEvensEvensEvensEvensEvensOdds\
    \ = firstOddsEvensEvensEvensEvensEvensEvensOdds.filter(x => x.toString.toInt%2\
    \ == 1)\n        val firstOddsEvensEvensEvensEvensEven", "        val numsMap\
    \ = nums.toMap\n        val numsMapKeys = numsMap.keys\n        val numsMapValues\
    \ = numsMap.values.toList\n        val numsMapValuesLength = numsMapValues.length\n\
    \        val numsMapValuesLength = numsMapValuesLength.toLong\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength", "        val numsCopy\
    \ = nums.toList\n        var count = 0\n        for (i <- 0 until numsCopy.size)\
    \ {\n            if (numsCopy(i) > 10) {\n                if (numsCopy(i) % 2\
    \ == 1) {\n                    if (numsCopy(i-1) % 2 == 1) {\n               \
    \         count += 1\n                    }\n                }\n            }\n\
    \        }\n        count", "        var count = 0\n        for (i <- nums) {\n\
    \            if (i > 10 && i % 2 == 1 && i % 2 == 0) {\n                count\
    \ += 1\n            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.size", "        var count = 0\n        for(i <-\
    \ 0 until nums.size) {\n            if(nums(i) > 10) {\n                if(nums(i)\
    \ % 2 == 1 && nums(i) != nums(i).floor) {\n                    count += 1\n  \
    \              }\n            }\n        }\n        count", "        val numsCopy\
    \ = nums.toList\n        numsCopy.foreach(num => {\n            val firstDigit\
    \ = num / 10\n            val lastDigit = num % 10\n            if (firstDigit\
    \ % 2 == 1 && lastDigit % 2 == 1) {\n                numsCopy.remove(num)\n  \
    \          }\n        })\n        numsCopy.size", '        nums.count(x => x >
    10 && x.toString.take(1).forall(x => x % 2 == 1))', "        val numsCopy = nums.toList\n\
    \        numsCopy.filter( x => x > 10 && numsCopy.head % 2 == 1 && numsCopy.last\
    \ % 2 == 1 )", '        nums.count(x => x > 10) && (nums.headOption.map(x => x
    % 2 == 1).getOrElse(false) && nums.lastOption.map(x => x % 2 == 1).getOrElse(false))',
  "        var count = 0\n        for (i <- nums) {\n            if (i > 10 && i %\
    \ 2 == 1 && i % 2 != 0) {\n                count += 1\n            }\n       \
    \ }\n        count", "        val numsCopy = nums.toList\n        numsCopy.filter(_\
    \ > 10).filter(_ % 2 == 1).filter(_ % 2 == 1).size", "        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(x => {\n            val firstDigit = x % 10\n      \
    \      val lastDigit = x % 10\n            val firstOdd = x % 2\n            val\
    \ lastOdd = x % 2\n            if (firstDigit > 10 && lastDigit > 10 && firstOdd\
    \ && lastOdd) {\n                numsCopy.remove(x)\n            }\n        })\n\
    \        numsCopy.size", "        val numsCopy = nums.toList\n        numsCopy.foreach(n\
    \ => {\n            val firstDigit = n.toString.charAt(0)\n            val lastDigit\
    \ = n.toString.charAt(n.toString.length - 1)\n            val firstDigitOdd =\
    \ firstDigit % 2 == 1\n            val lastDigitOdd = lastDigit % 2 == 1\n   \
    \         if (firstDigitOdd && lastDigitOdd) {\n                numsCopy.remove(n)\n\
    \            }\n        })\n        numsCopy.size", "        val numsSorted =\
    \ nums.sortWith((a, b) => a < b)\n        val even = numsSorted.filter(_ % 2 ==\
    \ 0)\n        val odd = numsSorted.filter(_ % 2 != 0)\n        val firstOdd =\
    \ odd.takeWhile(_ < 10)\n        val lastOdd = odd.drop(10).reverse\n        val\
    \ firstEven = even.takeWhile(_ < 10)\n        val lastEven = even.drop(10).reverse\n\
    \        val firstOddAndLastEven = firstOdd ++ lastEven\n        val firstEvenAndLastOdd\
    \ = firstEven ++ lastOdd\n        val firstOddAndLastOddAndFirstEven = firstOdd\
    \ ++ lastOdd ++ firstEven\n        val firstOddAndLastOddAndFirstEvenAndLastOdd\
    \ = firstOdd ++ lastOdd ++ firstEven ++ lastOdd\n        val firstOddAndLastOddAndFirstEvenAndLastOddAndFirstEven\
    \ = firstOdd ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven\n        val firstOddAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOdd\
    \ = firstOdd ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven ++ lastOdd\n    \
    \    val firstOddAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOddAndFirstEven\
    \ = firstOdd ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven\n\
    \        val firstOddAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOdd\
    \ = firstOdd ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven\
    \ ++ lastOdd\n        val firstOddAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOddAndFirstEven\
    \ = firstOdd ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven\
    \ ++ lastOdd ++ firstEven\n        val firstOddAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOdd\
    \ = firstOdd ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven ",
  "        val numsCopy = nums.toList\n        var count = 0\n        for(i <- 0 until\
    \ numsCopy.size) {\n            val num = numsCopy(i)\n            if(num > 10)\
    \ {\n                val first = num / 10\n                val last = num % 10\n\
    \                if(first % 2 == 1 && last % 2 == 1) {\n                    count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n\
    \        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 =\
    \ numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size", "        val numsCopy\
    \ = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.length", "     \
    \   val numsCopy = nums.toList\n        numsCopy.foreach(num => {\n          \
    \  if (num > 10) {\n                if (num % 2 == 0) {\n                    if\
    \ (numsCopy.head % 2 == 0 && numsCopy.last % 2 == 1) {\n                     \
    \   numsCopy.head += 1\n                        numsCopy.last -= 1\n         \
    \           }\n                }\n            }\n        })\n        numsCopy.size",
  "        val numsCopy = nums.toList\n        var count = 0\n        for (i <- 0\
    \ until numsCopy.size) {\n            if (numsCopy(i) > 10) {\n              \
    \  if (numsCopy(i) % 2 == 1 && numsCopy(i-1) % 2 == 1) {\n                   \
    \ count += 1\n                }\n            }\n        }\n        count", " \
    \       var count = 0\n        for(i <- nums) {\n            if(i.toString.length\
    \ > 1 && i.toString.charAt(0).toInt == 1 && i.toString.charAt(i).toInt == 1) {\n\
    \                count += 1\n            }\n        }\n        count", '        nums.count(x
    => x > 10 && x.toString.charAt(0) % 2 != 0 && x.toString.charAt(nums.size - 1)
    % 2 != 0)', "        var count = 0\n        var lastDigit = 0\n        var firstDigit\
    \ = 0\n        for(i <- 0 until nums.size) {\n            val num = nums(i)\n\
    \            if(num > 10) {\n                if(lastDigit % 2 == 1) {\n      \
    \              count += 1\n                }\n                if(firstDigit %\
    \ 2 == 1) {\n                    count += 1\n                }\n            }\n\
    \            lastDigit = num % 10\n            firstDigit = num / 10\n       \
    \ }\n        count", "        var count = 0\n        for (i <- nums) {\n     \
    \       if (i > 10 && i % 2 == 1 && i % 2 != 0) {\n                count += 1\n\
    \            }\n        }\n        count", '        nums.filter(x => x > 10 &&
    x.toString.charAt(0).toChar % 2 == 1 && x.toString.charAt(x.toString.length -
    1).toChar % 2 == 1).length', "        val numsCopy = nums.toList\n        var\
    \ count = 0\n        for (i <- 0 until numsCopy.size) {\n            if (numsCopy(i)\
    \ > 10) {\n                if (numsCopy(i) %% 2 == 1) {\n                    if\
    \ (numsCopy(i) < (numsCopy(i) / 2)) count += 1\n                }\n          \
    \  }\n        }\n        count", "        val numsCopy = nums.toList\n       \
    \ val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val numsCopy3\
    \ = numsCopy2.filter(_ % 2 == 0)\n        val numsCopy4 = numsCopy3.filter(_ >\
    \ 10).filter(_ % 2 == 1)\n        numsCopy4.size", '        nums.count(_ > 10)
    && (nums.takeWhile(_ % 2 == 1).takeWhile(_ % 2 == 1).forall(x => x % 2 == 1))',
  '        nums.filter(num => num > 10 && num.first % 2 == 1 && num.last % 2 == 1).length',
  "        val numsCopy = nums.toList\n        var count = 0\n        for (i <- 0\
    \ until numsCopy.size) {\n            val num = numsCopy(i)\n            if (num\
    \ > 10) {\n                if (num % 2 == 1 && num % 10 == 1) {\n            \
    \        count += 1\n                }\n            }\n        }\n        count",
  "        var count = 0\n        for (i <- nums) {\n            if (i > 10 && i %\
    \ 2 == 1 && i % 2 != 0) {\n                count += 1\n            }\n       \
    \ }\n        count", "        var count = 0\n        var lastDigit = 0\n     \
    \   var firstDigit = 0\n        for (i <- nums) {\n            if (i > 10) {\n\
    \                count += 1\n                lastDigit = i\n            } else\
    \ {\n                if (i % 2 == 0) {\n                    firstDigit = i\n \
    \               }\n            }\n        }\n        if (firstDigit == 0 && lastDigit\
    \ == 0) {\n            count += 1\n        }\n        count", "        var count\
    \ = 0\n        var firstOdd = 0\n        var lastOdd = 0\n        for (i <- nums)\
    \ {\n            if (i > 10) {\n                count += 1\n                if\
    \ (i % 2 == 1) {\n                    firstOdd += 1\n                }\n     \
    \           if (i % 2 == 0) {\n                    lastOdd += 1\n            \
    \    }\n            }\n        }\n        (count * 2l) + (firstOdd * 1l) + (lastOdd\
    \ * 1l)", "        val numsCopy = nums.toList\n        numsCopy.foreach(x => {\n\
    \            if (x > 10 && numsCopy.head % 2 == 1 && numsCopy.last % 2 == 1) numsCopy.remove(x)\n\
    \        })\n        numsCopy.size", "        val numsCopy = nums.toList\n   \
    \     val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2 ==\
    \ 0)\n        numsCopy5.length", "        val numsCopy = nums.toList\n       \
    \ numsCopy.filter(x => x > 10 && numsCopy.head % 2 == 1 && numsCopy.last % 2 ==\
    \ 1).length", "        val numsCopy = nums.toList\n        numsCopy.filter(_ >\
    \ 10).filter(_ % 2 == 1).filter(_ % 2 == 1).size", "        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(x => {\n            if (x > 10 && x % 2 == 1 && x %\
    \ 2 == 0) {\n                numsCopy.remove(x)\n            }\n        })\n \
    \       numsCopy.size", "        var count = 0\n        for (i <- nums) {\n  \
    \          if (i > 10 && i % 2 == 1 && i % 2 == 0) {\n                count +=\
    \ 1\n            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        numsCopy.filter(x => x > 10).count(x => x.toString.charAt(0).toInt ==\
    \ 1 && (x.toString.charAt(1).toInt == 1 || x.toString.charAt(1).toInt == 3))",
  "        val numsCopy = nums.toList\n        var count = 0\n        for(i <- 0 until\
    \ numsCopy.size) {\n            val num = numsCopy(i)\n            if(num > 10)\
    \ {\n                if(num % 2 == 1 && num % 2 == 0) {\n                    count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n\
    \        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.size",
  "        val numsCopy = nums.toList\n        var count = 0\n        var firstOdd\
    \ = 0\n        var lastOdd = 0\n        var firstEven = 0\n        var lastEven\
    \ = 0\n        for (i <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n\
    \            if (num > 10) {\n                count += 1\n                if (num\
    \ % 2 == 0) {\n                    firstEven += 1\n                } else {\n\
    \                    firstOdd += 1\n                }\n                if (num\
    \ % 2 == 0) {\n                    lastEven += 1\n                } else {\n \
    \                   lastOdd += 1\n                }\n            }\n        }\n\
    \        (count * 2)", "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 ==\
    \ 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.size",
  "        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ %\
    \ 2 == 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n    \
    \    val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.length", '        nums.filter(num => num > 10 &&
    num % 2 == 1 && num % 2 == 0).length', "        val numsCopy = nums.toList\n \
    \       var count = 0\n        var firstOdd = 0\n        var lastOdd = 0\n   \
    \     var firstEven = 0\n        var lastEven = 0\n        for(i <- 0 until numsCopy.size)\
    \ {\n            val num = numsCopy(i)\n            if(num > 10) {\n         \
    \       if(num % 2 == 0) {\n                    firstEven = num\n            \
    \    } else {\n                    lastEven = num\n                }\n       \
    \     } else {\n                if(num % 2 == 0) {\n                    firstOdd\
    \ = num\n                } else {\n                    lastOdd = num\n       \
    \         }\n            }\n        }\n        count = firstOdd + lastOdd + firstEven\
    \ + lastEven\n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n", "        val numsCopy = nums.toList\n        var count = 0\n     \
    \   var lastOdd = false\n        var firstOdd = false\n        var lastEven =\
    \ false\n        var firstEven = false\n        var lastEvenOdd = false\n    \
    \    var firstEvenOdd = false\n        var lastOddEven = false\n        var firstOddEven\
    \ = false\n        var lastOddOdd = false\n        var firstOddOdd = false\n \
    \       var lastEvenOddEven = false\n        var firstEvenOddEven = false\n  \
    \      var lastEvenOddOdd = false\n        var firstEvenOddOdd = false\n     \
    \   var lastOddEvenOdd = false\n        var firstOddEvenOdd = false\n        var\
    \ lastOddOddEven = false\n        var firstOddOddEven = false\n        var lastEvenOddEvenOdd\
    \ = false\n        var firstEvenOddEvenOdd = false\n        var lastEvenOddOddEven\
    \ = false\n        var firstEvenOddOddEven = false\n        var lastOddEvenOddEven\
    \ = false\n        var firstOddEvenOddEven = false\n        var lastOddOddEvenOdd\
    \ = false\n        var firstOddOddEvenOdd = false\n        var lastEvenOddEvenOddEven\
    \ = false\n        var firstEvenOddEvenOddEven = false\n        var lastEvenOddOddOdd\
    \ = false\n        var firstEvenOddOddOdd = false\n        var lastOddEvenOddOdd\
    \ = false\n        var firstOddEvenOddOdd = false\n        var lastOddOddEvenOdd\
    \ = false\n        var firstOddOddEvenOdd = false\n        var lastEvenOddEvenOddEven\
    \ = false\n        var firstEvenOddEvenOddEven = false\n        var lastEvenOddOddEvenOdd\
    \ = false\n        var firstEvenOddOddEvenOdd = false\n        var lastOddEvenOddEvenOdd\
    \ = false\n        var firstOddEvenOddEvenOdd = false\n        var lastOddOddEvenOddEven\
    \ = false\n        var firstOddOddEvenOddEven = false\n        var lastEvenOddEvenOddEvenOdd\
    \ = false\n        var firstEvenOddEvenOddEvenOdd = false\n        var lastOddEvenOddOdd\
    \ = false\n        var firstOddEvenOddOdd = false\n        var lastOddOddEvenOdd\
    \ = false\n        var firstOddOddEvenOdd = ", '        nums.count(x => x > 10
    && x.toString.take(1).forall(x => x % 2 == 1))', "        var count = 0\n    \
    \    for (i <- nums) {\n            if (i > 10) {\n                if (i % 2 ==\
    \ 1) {\n                    if (i % 2 == 0) {\n                        if (i %\
    \ 2 == 1) {\n                            if (i % 2 == 0) {\n                 \
    \               count += 1\n                            }\n                  \
    \      }\n                    }\n                }\n            }\n        }\n\
    \        count", "        var count = 0\n        for (i <- nums) {\n         \
    \   if (i > 10) {\n                if (i % 2 == 1) {\n                    if (i\
    \ % 2 != 0) {\n                        count += 1\n                    }\n   \
    \             }\n            }\n        }\n        count", '        nums.filter(x
    => x > 10 && x.toString.substring(0,1).toInt == 1 && x.toString.substring(0,2).toInt
    == 1).length', "        val numsCopy = nums.toList\n        numsCopy.filter(x\
    \ => x > 10 && numsCopy.head % 2 == 1 && numsCopy.last % 2 == 1).length", "  \
    \      var count = 0\n        var lastDigit = 0\n        var firstDigit = 0\n\
    \        for (i <- nums) {\n            if (i > 10) {\n                count +=\
    \ 1\n                lastDigit = i\n            } else {\n                if (i\
    \ % 2 == 1) {\n                    firstDigit = i\n                }\n       \
    \     }\n        }\n        if (firstDigit == 0 && lastDigit == 0) {\n       \
    \     count += 1\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(x => {\n            if (x > 10) {\n                if\
    \ (x % 2 == 1 && x % 10 == 1) {\n                    numsCopy.remove(x)\n    \
    \            }\n            }\n        })\n        numsCopy.size", '        nums.count(x
    => x > 10 && x.toString.charAt(0).toInt == 1 && x.toString.charAt(x.toString.length-1).toInt
    == 1)', "        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_\
    \ % 2 == 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n  \
    \      val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        numsCopy3.size", '        nums.filter(_
    > 10).filter(_ % 2 == 1).length', "        val numsCopy = nums.toList\n      \
    \  val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_ % 2 != 0)\n        numsCopy4.size",
  '        nums.filter(x => x > 10 && x % 2 != 0 && x % 2 != 1).length', "       \
    \ val numsCopy = nums.toList\n        numsCopy.foreach(n => {\n            if\
    \ (n > 10 && n % 2 == 1 && n % 2 == 0) {\n                numsCopy.remove(n)\n\
    \            }\n        })\n        numsCopy.size", "        var count = 0\n \
    \       var firstOdd = 0\n        var lastOdd = 0\n        for (i <- nums) {\n\
    \            if (i > 10) {\n                count += 1\n                if (i\
    \ % 2 == 1) {\n                    firstOdd += 1\n                }\n        \
    \        if (i % 2 == 0) {\n                    lastOdd += 1\n               \
    \ }\n            }\n        }\n        if (firstOdd > 0 && lastOdd > 0) {\n  \
    \          count += firstOdd * lastOdd\n        }\n        count"]
stop_tokens:
- "\n    }\n"
