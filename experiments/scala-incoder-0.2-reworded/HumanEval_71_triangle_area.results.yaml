language: scala
name: HumanEval_71_triangle_area
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        (a1 + b2 + c2 + a3 + b3 + c3 +\
    \ a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c6 +\n            a7 + b7 + c7)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp687yppjy.scala:40)\n\tat Problem.main(tmp687yppjy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c3 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16\
    \ + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val\
    \ a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8pp331uy.scala:23:17 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mc3\e[0m = c3 + a3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp8pp331uy.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp8pp331uy.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp8pp331uy.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp8pp331uy.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp8pp331uy.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16\
    \ + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val\
    \ a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = b - a\n        val\
    \ a2 = c - a\n        val a3 = b - c\n        val a4 = c - b\n        val a5 =\
    \ b - a\n        val a6 = c - a\n        val a7 = b - c\n        val a8 = c -\
    \ b\n        val a9 = b - a\n        val a10 = c - a\n        val a11 = c - b\n\
    \        val a12 = c - a\n        val a13 = b - a\n        val a14 = c - a\n \
    \       val a15 = b - c\n        val a16 = c - b\n        val a17 = b - a\n  \
    \      val a18 = c - a\n        val a19 = b - c\n        val a20 = c - b\n   \
    \     val a21 = b - a\n        val a22 = c - a\n        val a23 = b - c\n    \
    \    val a24 = c - b\n        val a25 = b - a\n        val a26 = c - a\n     \
    \   val a27 = b - c\n        val a28 = c - b\n        val a29 = b - a\n      \
    \  val a30 = c - a\n        val a31 = b - c\n        val a32 = c - b\n       \
    \ val a33 = b - a\n        val a34 = c - a\n        val a35 = b - c\n        val\
    \ a36 = c - b\n        val a37 = b - a\n        val a38 = c - a\n        val a39\
    \ = b - c\n        val a40 = c - b\n        val a41 = b - a\n        val a42 =\
    \ c - a\n        val a43 = b - c\n        val a44 = c - b\n        val a45 = b\
    \ - a\n        val a46 = c - a\n        val a47 = b - c\n        val a48 = c -\
    \ b\n        val a49 = b - a\n        val a50 = c - a\n        val a51 = b - c\n\
    \        val a52 = c - b\n        val a53 = b - a\n        val a54 = c - a\n \
    \       val a55 = b - c\n        val a56 = c - b\n        val a57 = b - a\n  \
    \      val a58 = c - a\n        val a59 = b - c\n        val a60 = c - b\n   \
    \     val a61 = b - a\n        val a62 = c - a\n        val a63 = b - c\n    \
    \    val a64 = c - b\n        val a65 = b - a\n        val a66 = c - a\n     \
    \   val a67 = b - c\n        val a68 = c - b\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnf62zcuq.scala:83:5\
    \ ---------------------\e[0m\e[0m\n\e[31m83 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n        val b9\
    \ = b8 + c8\n        val c9 = c8 + a8\n        (a9 * b9) - (a9 * c9) + (a9 * b8)\
    \ + (a9 * b7) - (a9 * b6) + (a9 * b5) - (a9 * b4) + (a9 * b3) - (a9 * b2) + (a9\
    \ * b1) - (a9 * a1) + (a9 * a2) - (a9 * a3) - (a9 * a4) + (a9 * a5) + (a9 * a6)\
    \ + (a9 * a7) + (a9 * a8) + (a9 * a9) == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr3h1k0rc.scala:42:8\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m        (a9 * b9) - (a9 * c9)\
    \ + (a9 * b8) + (a9 * b7) - (a9 * b6) + (a9 * b5) - (a9 * b4) + (a9 * b3) - (a9\
    \ * b2) + (a9 * b1) - (a9 * a1) + (a9 * a2) - (a9 * a3) - (a9 * a4) + (a9 * a5)\
    \ + (a9 * a6) + (a9 * a7) + (a9 * a8) + (a9 * a9) == \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Boolean\n\e[31m   |\e[0m        Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805014
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        if (a + b > c) {\n        \
    \    val d = b * b - 4 * a * c\n            if (d > 0) {\n                val\
    \ root = (-b + Math.sqrt(d)) / (2 * a)\n                if (root >= 0) {\n   \
    \                 return root.toFloat\n                }\n            }\n    \
    \    }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplw2rgkr3.scala:27)\n\tat Problem.main(tmplw2rgkr3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        (a1 + b1 + c1 + a2 + b2 + c2 +\
    \ a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c6 +\n            a7\
    \ + b7 + c7 +\n            a8 + b8 + c8)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps6ekvyij.scala:44)\n\tat Problem.main(tmps6ekvyij.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c3 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + a3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + a4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + a5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + a6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b7 + a8\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b8 + a9\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b9 + a10\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b10 + a11\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b11 + a12\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b12 + a13\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b13 + a14\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b14 + a15\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b15\
    \ + a16\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b16 + a17\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b17 + a18\n        val c18 = c17 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b18 + a19\n        val c19 = c18 + a19\n        val\
    \ a20 = a19 + b19\n        val b20 = b19\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo9o7dfci.scala:23:17 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mc3\e[0m = c3 + a3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpo9o7dfci.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + a3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpo9o7dfci.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpo9o7dfci.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpo9o7dfci.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpo9o7dfci.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        (a1 + b1 + c1 + a2 + b2 + c2 +\
    \ a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c6 +\n         a7 + b7\
    \ + c7)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuap7rgdk.scala:40)\n\tat Problem.main(tmpuap7rgdk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16\
    \ + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val\
    \ a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16\
    \ + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val\
    \ a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val area1 = side1 * side2\n        val area2\
    \ = side3 * side4\n        val area3 = side1 + side2 + side3\n        val area4\
    \ = side1 + side2 + side4\n        if (area1 + area2 + area3 == area4) {\n   \
    \         area\n        } else {\n            -1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb1iuujy6.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb1iuujy6.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val s = (a + b +\
    \ c) / 2\n        val area = if (s > a) s * (b - s) else s * (c - s)\n       \
    \ val rounded = math.round(area * 100) / 100\n        if (rounded == area) rounded\
    \ else -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpoz0w8e51.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpoz0w8e51.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpoz0w8e51.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(b - a)\n\
    \        val bc = math.abs(c - b)\n        val ac = math.abs(c - a)\n        val\
    \ s = ab + bc + ac\n        if (s > 0) {\n            val area = math.sqrt(s *\
    \ (s - ab) * (s - bc) * (s - ac))\n            (area / 2).toFloat\n        } else\
    \ {\n            -1\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyg2oc802.scala:27)\n\tat Problem.main(tmpyg2oc802.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val side5 = math.sqrt(a * a + b * b)\n \
    \       val side6 = math.sqrt(c * c + d * d)\n        val side7 = math.sqrt(a\
    \ * a + c * c)\n        val side8 = math.sqrt(b * b + d * d)\n        val side9\
    \ = math.sqrt(a * a + b * b)\n        val side10 = math.sqrt(c * c + d * d)\n\
    \        val side11 = math.sqrt(a * a + c * c)\n        val side12 = math.sqrt(b\
    \ * b + d * d)\n        val side13 = math.sqrt(a * a + c * c)\n        val side14\
    \ = math.sqrt(b * b + d * d)\n        val side15 = math.sqrt(a * a + b * b)\n\
    \        val side16 = math.sqrt(c * c + d * d)\n        val side17 = math.sqrt(a\
    \ * a + c * c)\n        val side18 = math.sqrt(b * b + d * d)\n        val side19\
    \ = math.sqrt(a * a + b * b)\n        val side20 = math.sqrt(c * c + d * d)\n\
    \        val side21 = math.sqrt(a * a + c * c)\n        val side22 = math.sqrt(b\
    \ * b + d * d)\n        val side23 = math.sqrt(a * a + c * c)\n        val side24\
    \ = math.sqrt(b * b + d * d)\n        val side25 = math.sqrt(a * a + b * b)\n\
    \        val side26 = math.sqrt(c * c + d * d)\n        val side27 = math.sqrt(a\
    \ * a + c * c)\n        val side28 = math.sqrt(b * b + d * d)\n        val side29\
    \ = math.sqrt(a * a + b * b)\n        val side30 = math.sqrt(c * c + d * d)\n\
    \        val side31 = math.sqrt(a * a + c * c)\n        val side32 = math.sqrt(b\
    \ * b + d * d)\n        val side33 = math.sqrt(a * a + c * c)\n        val side34\
    \ = math.sqrt(b * b + d * d)\n        val side35 = math.sqrt(a * a + b * b)\n\
    \        val side36 = math.sqrt(c * c + d * d)\n        val side37 = math.sqrt(a\
    \ * a + c * c)\n        val side38 = math.sqrt(b * b + d * d)\n        val side39\
    \ = math.sqrt(a * a + c * c)\n        val side40 = math.sqrt(b * b + d * d)\n\
    \        val side41 = math.sqrt(a * a + b * b)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo5k5h7f3.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo5k5h7f3.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo5k5h7f3.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mside6\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo5k5h7f3.scala:23:38 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mside8\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo5k5h7f3.scala:25:39 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mside10\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                       ^\e\
    [0m\n\e[31m   |\e[0m                                       Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo5k5h7f3.scala:27:39 ------------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val sum = a + b\
    \ + c\n        if (sum > c) {\n            val d = math.min(a + b, c)\n      \
    \      val area = d * (d - a) * (d - b) * (d - c)\n            (area / sum).toFloat\n\
    \        } else {\n            -1.0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmmzmrgck.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmmzmrgck.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmmzmrgck.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b2 + c2 > a3 + b3 + c3 &&\
    \ a1 + b2 + c2 > a4 + b4 + c4 && a1 + b2 + c2 > a5 + b5 + c5 && a1 + b2 + c2 >\
    \ a6 + b6 + c6 ? a1 * b1 * c1 + a2 * b1 * c2 + a3 * b1 * c3 + a4 * b1 * c4 + a5\
    \ * b1 * c5 + a6 * b1 * c6 : -1l)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy6siknty.scala:33:130 -----------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        (a1 + b2 + c2 > a3 + b3 + c3 && a1 + b2 + c2\
    \ > a4 + b4 + c4 && a1 + b2 + c2 > a5 + b5 + c5 && a1 + b2 + c2 > a6 + b6 + c6\
    \ ? a1 * b1 * c1 + a2 * b1 * c2 + a3 * b1 * c3 + a4 * b1 * c4 + a5 * b1 * c5 +\
    \ a6 * b1 * c6 : -\e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \                                                                            \
    \                             ^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                    value ? is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b2 = b + c\n        val a3 = a1 + a2\n        val b3\
    \ = b1 + b2\n        val c3 = b2 + a3\n        val a4 = a1 + a3\n        val b4\
    \ = b1 + b4\n        val c4 = b2 + b4\n        val a5 = a2 + b4\n        val b5\
    \ = b2 + a5\n        val c5 = a3 + a5\n        val a6 = a3 + b5\n        val b6\
    \ = b5 + a6\n        val c6 = b5 + b6\n        val a7 = a4 + b6\n        val b7\
    \ = b4 + a6\n        val c7 = b6 + a7\n        val a8 = a5 + b6\n        val b8\
    \ = b5 + a8\n        val c8 = b5 + b8\n        val a9 = a5 + b8\n        val b9\
    \ = b5 + a9\n        val c9 = a8 + b9\n        val a10 = a8 + b9\n        val\
    \ b10 = b8 + a10\n        val c10 = b8 + b10\n        val a11 = a10 + b10\n  \
    \      val b11 = b8 + a11\n        val c11 = b8 + b11\n        val a12 = a11 +\
    \ b11\n        val b12 = b8 + a12\n        val c12 = b8 + b12\n        val a13\
    \ = a12 + b12\n        val b13 = b8 + a13\n        val c13 = b8 + b13\n      \
    \  val a14 = a13 + b13\n        val b14 = b8 + a14\n        val c14 = b8 + b14\n\
    \        val a15 = a14 + b14\n        val b15 = b8 + a15\n        val c15 = b8\
    \ + b15\n        val a16 = a15 + b15\n        val b16 = b8 + a16\n        val\
    \ c16 = b8 + b16\n        val a17 = a16 + b16\n        val b17 = b8 + a17\n  \
    \      val c17 = b8 + b17\n        val a18 = a17 + b17\n        val b18 = b8 +\
    \ a18\n        val c18 = b8 + b18\n        val a19 = a18 + b18\n        val b19\
    \ = b8 + a19\n        val c19 = b8 + b19\n        val a20 = a19 + b19\n      \
    \  val b20 = b8 + a20\n        val c20 = b8 + b20\n        val a21 = a20\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7j_emae.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mb3\e[0m = b1 + b2\n\e[31m\e\
    [31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7j_emae.scala:22:17\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mb4\e[0m = b1 + b4\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpp7j_emae.scala:73:5 ---------------------\e[0m\e\
    [0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3\
    \ + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4\
    \ + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5\
    \ + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6\
    \ + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n        (a1 + b1 +\
    \ c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6\
    \ + b6 + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpare56r1_.scala:39)\n\tat Problem.main(tmpare56r1_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val side5 = math.sqrt(a * a + b * b)\n \
    \       val side6 = math.sqrt(c * c + d * d)\n        val side7 = math.sqrt(a\
    \ * a + c * c)\n        val side8 = math.sqrt(b * b + d * d)\n        val side9\
    \ = math.sqrt(a * a + b * b)\n        val side10 = math.sqrt(c * c + d * d)\n\
    \        val side11 = math.sqrt(a * a + c * c)\n        val side12 = math.sqrt(b\
    \ * b + d * d)\n        val side13 = math.sqrt(a * a + c * c)\n        val side14\
    \ = math.sqrt(b * b + d * d)\n        val side15 = math.sqrt(a * a + c * c)\n\
    \        val side16 = math.sqrt(b * b + d * d)\n        val side17 = math.sqrt(a\
    \ * a + c * c)\n        val side18 = math.sqrt(b * b + d * d)\n        val side19\
    \ = math.sqrt(a * a + c * c)\n        val side20 = math.sqrt(b * b + d * d)\n\
    \        val side21 = math.sqrt(a * a + c * c)\n        val side22 = math.sqrt(b\
    \ * b + d * d)\n        val side23 = math.sqrt(a * a + c * c)\n        val side24\
    \ = math.sqrt(b * b + d * d)\n        val side25 = math.sqrt(a * a + c * c)\n\
    \        val side26 = math.sqrt(b * b + d * d)\n        val side27 = math.sqrt(a\
    \ * a + c * c)\n        val side28 = math.sqrt(b * b + d * d)\n        val side29\
    \ = math.sqrt(a * a + c * c)\n        val side30 = math.sqrt(b * b + d * d)\n\
    \        val side31 = math.sqrt(a * a + c * c)\n        val side32 = math.sqrt(b\
    \ * b + d * d)\n        val side33 = math.sqrt(a * a + c * c)\n        val side34\
    \ = math.sqrt(b * b + d * d)\n        val side35 = math.sqrt(a * a + c * c)\n\
    \        val side36 = math.sqrt(b * b + d * d)\n        val side37 = math.sqrt(a\
    \ * a + c * c)\n        val side38 = math.sqrt(b * b + d * d)\n        val side39\
    \ = math.sqrt(a * a + c * c)\n        val side40 = math.sqrt(b * b + d * d)\n\
    \        val side41 = math.sqrt(a * a + c * c)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmqexom7.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmqexom7.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmqexom7.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mside6\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmqexom7.scala:23:38 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mside8\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmqexom7.scala:25:39 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mside10\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                       ^\e\
    [0m\n\e[31m   |\e[0m                                       Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmqexom7.scala:27:39 ------------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1659805015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val b2 = b + a\n        val c1 =\
    \ c + a\n        val c2 = c + b\n        val d1 = b2 - b1\n        val d2 = c2\
    \ - c1\n        val d3 = a2 - a1\n        val area = if (d1 > 0 && d2 > 0 && d3\
    \ > 0) (d1 * d2 * d3) / 2 else -1\n        area\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa_jdlpft.scala:28)\n\tat Problem.main(tmpa_jdlpft.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = b - a\n        val\
    \ a2 = c - a\n        val b1 = c - b\n        val b2 = a - b\n        val c1 =\
    \ a - c\n        val c2 = b - c\n        val ab1 = b1 * a1\n        val ab2 =\
    \ b2 * a2\n        val bc1 = c1 * b1\n        val bc2 = c2 * b2\n        val abc1\
    \ = ab1 * ab1\n        val abc2 = ab2 * ab2\n        val bc12 = bc1 * bc1\n  \
    \      val bc22 = bc2 * bc2\n        val abc12 = abc1 * abc2\n        val bc123\
    \ = bc12 * bc12\n        val bc212 = bc22 * bc22\n        val abc123 = abc12 *\
    \ abc12\n        val abc213 = abc12 * abc21\n        val abc213 = abc12 * abc21\n\
    \        val bc1213 = bc123 * bc12\n        val bc1213 = bc123 * bc12\n      \
    \  val bc21213 = bc212 * bc12\n        val bc21213 = bc212 * bc12\n        val\
    \ abc1213 = abc123 * abc12\n        val abc1213 = abc123 * abc12\n        val\
    \ abc21313 = abc213 * abc12\n        val abc21313 = abc213 * abc12\n        val\
    \ bc12213 = bc1213 * bc12\n        val bc12213 = bc1213 * bc12\n        val bc212213\
    \ = bc21213 * bc12\n        val bc212213 = bc21213 * bc12\n        val abc12213\
    \ = abc1213 * abc12\n        val abc12213 = abc1213 * abc12\n        val abc21313\
    \ = abc21313 * abc12\n        val abc21313 = abc21313 * abc12\n        val bc12213\
    \ = bc12213 * bc12\n        val bc12213 = bc12213 * bc12\n        val bc212213\
    \ = bc212213 * bc12\n        val bc212213 = bc212213 * bc12\n        val abc12213\
    \ = abc12213 * abc12\n        val abc12213 = abc12213 * abc12\n        val abc21313\
    \ = abc21313 * abc12\n        val abc21313 = abc21313 * abc12\n        val bc12213\
    \ = bc12213 * bc12\n        val bc12213 = bc12213 * bc12\n        val bc212213\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpb76l8vaa.scala:61:22 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \e[36mbc212213\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpb76l8vaa.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mabc213\e[0m = abc12 * abc21\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mabc213\
    \ is already defined as \e[33mvalue\e[0m \e[35mabc213\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb76l8vaa.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbc1213\e[0m = bc123 * bc12\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbc1213 is already defined as \e[33mvalue\e[0m \e[35mbc1213\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb76l8vaa.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mbc21213\e[0m = bc212 * bc12\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbc21213 is\
    \ already defined as \e[33mvalue\e[0m \e[35mbc21213\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb76l8vaa.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mabc1213\e[0m = abc123 * abc12\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mabc1213 is already defined as \e[33mvalue\e[0m \e[35mabc1213\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Nami"
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        if (side1\
    \ + side2 > side3) {\n            area\n        } else {\n            -1\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxc6633rw.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        (a1 + b1 + c1) *\
    \ (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6\
    \ + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpend4ugbz.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpend4ugbz.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpend4ugbz.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpend4ugbz.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpend4ugbz.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpend4ugbz.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + a1\n        val b2\
    \ = b1 + b1\n        val c2 = c1 + c1\n        val a3 = a2 + a2\n        val b3\
    \ = b2 + b2\n        val c3 = c3 + c3\n        val a4 = a3 + a3\n        val b4\
    \ = b4 + b4\n        val c4 = c4 + c4\n        val a5 = a4 + a4\n        val b5\
    \ = b5 + b5\n        val c5 = c5 + c5\n        val a6 = a5 + a5\n        val b6\
    \ = b6 + b6\n        val c6 = c6 + c6\n        val a7 = a6 + a6\n        val b7\
    \ = b7 + b7\n        val c7 = c7 + c7\n        val a8 = a7 + a7\n        val b8\
    \ = b8 + b8\n        val c8 = c8 + c8\n        val a9 = a7 + a7\n        val b9\
    \ = b9 + b9\n        val c9 = c9 + c9\n        val a10 = a9 + a9\n        val\
    \ b10 = b9 + b9\n        val c10 = c9 + c9\n        val a11 = a10 + a10\n    \
    \    val b11 = b10 + b10\n        val c11 = c10 + c10\n        val a12 = a11 +\
    \ a11\n        val b12 = b11 + b11\n        val c12 = c11 + c11\n        val a13\
    \ = a12 + a12\n        val b13 = b12 + b12\n        val c13 = c12 + c12\n    \
    \    val a14 = a13 + a13\n        val b14 = b13 + b13\n        val c14 = c13 +\
    \ c13\n        val a15 = a14 + a14\n        val b15 = b14 + b14\n        val c15\
    \ = c14 + c14\n        val a16 = a15 + a15\n        val b16 = b15 + b15\n    \
    \    val c16 = c15 + c15\n        val a17 = a16 + a16\n        val b17 = b16 +\
    \ b16\n        val c17 = c16 + c16\n        val a18 = a17 + a17\n        val b18\
    \ = b17 + b17\n        val c18 = c17 + c17\n        val a19 = a18 + a18\n    \
    \    val b19 = b18 + b18\n        val c19 = c18 + c18\n        val a20 = a19 +\
    \ a19\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:23:17 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mc3\e[0m = c3 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + b4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + b5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + b6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16\
    \ + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val\
    \ a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val sum = a + b\
    \ + c\n        if (sum > c) {\n            return sum.toFloat\n        } else\
    \ {\n            return -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplcz3j50e.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplcz3j50e.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplcz3j50e.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        if (side1\
    \ + side2 > side3) {\n            area\n        } else {\n            -1\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxc6633rw.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n        val b9\
    \ = b8 + c8\n        val c9 = c8 + a8\n        val a10 = a9 + b9\n        val\
    \ b10 = b9 + c9\n        val c10 = c9 + a9\n        val a11 = a10 + b10\n    \
    \    val b11 = b10 + c10\n        val c11 = c10 + a10\n        val a12 = a11 +\
    \ b11\n        val b12 = b11 + c11\n        val c12 = c11 + a11\n        val a13\
    \ = a12 + b12\n        val b13 = b12 + c12\n        val c13 = c12 + a12\n    \
    \    val a14 = a13 + b13\n        val b14 = b13 + c13\n        val c14 = c13 +\
    \ a13\n        val a15 = a14 + b14\n        val b15 = b14 + c14\n        val c15\
    \ = c14 + a14\n        val a16 = a15 + b15\n        val b16 = b15 + c15\n    \
    \    val c16 = c15 + a15\n        val a17 = a16 + b16\n        val b17 = b16 +\
    \ c16\n        val c17 = c16 + a16\n        val a18 = a17 + b17\n        val b18\
    \ = b17 + c17\n        val c18 = c17 + a17\n        val a19 = a18 + b18\n    \
    \    val b19 = b18 + c18\n        val c19 = c18 + a18\n        val a20 = a19 +\
    \ b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplo_81317.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805021
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val isTriangle = (a + b > c) && (a + c > b) && (b + c > a)\n        if\
    \ (isTriangle) {\n            area\n        } else {\n            -1\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvqz69pb.scala:26)\n\tat Problem.main(tmpuvqz69pb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805024
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val isValid = (a * b + c) >= a\n        val isValid2 = (b * c + a) >=\
    \ b\n        val isValid3 = (a * c + b) >= c\n        if (isValid) {\n       \
    \     area\n        } else if (isValid2) {\n            area\n        } else if\
    \ (isValid3) {\n            area\n        } else {\n            -1\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqy3jiebz.scala:31)\n\tat Problem.main(tmpqy3jiebz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805023
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b1 + c1) * (a2 + b2 + c2)\
    \ * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6 + c6)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2jgrhsqu.scala:36)\n\tat Problem.main(tmp2jgrhsqu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2.0\n        val\
    \ b1 = b / 2.0\n        val c1 = c / 2.0\n        val a2 = a1 + a1\n        val\
    \ b2 = b1 + b1\n        val c2 = c1 + c1\n        val a3 = a2 + a2\n        val\
    \ b3 = b2 + b2\n        val c3 = c2 + c2\n        val a4 = a3 + a3\n        val\
    \ b4 = b3 + b3\n        val c4 = c3 + c3\n        val a5 = a4 + a4\n        val\
    \ b5 = b5 + b5\n        val c5 = c5 + c5\n        val a6 = a6 + a6\n        val\
    \ b6 = b6 + b6\n        val c6 = c6 + c6\n        val a7 = a7 + a7\n        val\
    \ b7 = b7 + b7\n        val c7 = c7 + c7\n        val a8 = a8 + a8\n        val\
    \ b8 = b8 + b8\n        val c8 = c8 + c8\n        val a9 = a9 + a9\n        val\
    \ b9 = b9 + b9\n        val c9 = c9 + c9\n        val a10 = a10 + a10\n      \
    \  val b10 = b10 + b10\n        val c10 = c10 + c10\n        val a11 = a11 + a11\n\
    \        val b11 = b11 + b11\n        val c11 = c11 + c11\n        val a12 = a12\
    \ + a12\n        val b12 = b12 + b12\n        val c12 = c12 + c12\n        val\
    \ a13 = a13 + a13\n        val b13 = b13 + b13\n        val c13 = c13 + c13\n\
    \        val a14 = a14 + a14\n        val b14 = b14 + b14\n        val c14 = c14\
    \ + c14\n        val a15 = a15 + a15\n        val b15 = b15 + b15\n        val\
    \ c15 = c15 + c15\n        val a16 = a16 + a16\n        val b16 = b16 + b16\n\
    \        val c16 = c16 + c16\n        val a17 = a17 + a17\n        val b17 = b17\
    \ + b17\n        val c17 = c17 + c17\n        val a18 = a18 + a18\n        val\
    \ b18 = b18 + b18\n        val c18 = c18 + c18\n        val a19 = a19 + a19\n\
    \        val b19 = b19 + b19\n        val c19 = c19 + c19\n        val a20 = a20\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwwsfqv7l.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + b5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpwwsfqv7l.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpwwsfqv7l.scala:30:17 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36ma6\e[0m = a6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35ma6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpwwsfqv7l.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + b6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpwwsfqv7l.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + c6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpwwsfqv7l.scala:33:17 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36ma7\e[0m = a7 + a7\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val isValid = side1 + side2 > side3\n  \
    \      val rounded = if (isValid) area * 100f / side1 else -1\n        rounded\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmponj4gzzz.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmponj4gzzz.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmponj4gzzz.scala:22:8 ---------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        rounded\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (rounded : Double)\n\e[31m   |\e[0m    \
    \    Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val b2 = b + a\n        val c1 =\
    \ c + a\n        val c2 = c + b\n        val d1 = b2 - b1\n        val d2 = c2\
    \ - c1\n        val d3 = a2 - a1\n        val d4 = d1 * d1 * d1\n        val d5\
    \ = d2 * d2 * d2\n        val d6 = d3 * d3 * d3\n        val d7 = d4 * d4 * d4\n\
    \        val d8 = d5 * d5 * d5\n        val d9 = d6 * d6 * d6\n        val d10\
    \ = d7 * d7 * d7\n        val d11 = d8 * d8 * d8\n        val d12 = d9 * d9 *\
    \ d9\n        val d13 = d10 * d10 * d10\n        val d14 = d11 * d11 * d11\n \
    \       val d15 = d12 * d12 * d12\n        val d16 = d13 * d13 * d13\n       \
    \ val d17 = d14 * d14 * d14\n        val d18 = d15 * d15 * d15\n        val d19\
    \ = d16 * d16 * d16\n        val d20 = d17 * d17 * d17\n        val d21 = d18\
    \ * d18 * d18\n        val d22 = d19 * d19 * d19\n        val d23 = d20 * d20\
    \ * d20\n        val d24 = d21 * d21 * d21\n        val d25 = d22 * d22 * d22\n\
    \        val d26 = d23 * d23 * d23\n        val d27 = d24 * d24 * d24\n      \
    \  val d28 = d25 * d25 * d25\n        val d29 = d26 * d26 * d26\n        val d30\
    \ = d27 * d27 * d27\n        val d31 = d28 * d28 * d28\n        val d32 = d29\
    \ * d29 * d29\n        val d33 = d30 * d30 * d30\n        val d34 = d31 * d31\
    \ * d31\n        val d35 = d32 * d32 * d32\n        val d36 = d33 * d33 * d33\n\
    \        val d37 = d34 * d34 * d34\n        val d38 = d35 * d35 * d35\n      \
    \  val d39 = d36 * d36 * d36\n        val d40 = d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpct86v5o6.scala:60:18 ------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36md40\e[0m = d\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpct86v5o6.scala:61:5\
    \ ---------------------\e[0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val sum = a1 + b1 +\
    \ c1\n        if (sum > 0) {\n            val a2 = a1 - b1 - c1\n            val\
    \ b2 = b1 - a1 - c1\n            val c2 = c1 - a1 - b1\n            val a3 = a1\
    \ - b2 - c2\n            val b3 = b1 - a2 - c2\n            val c3 = c1 - a2 -\
    \ b2\n            val a4 = a1 - b3 - c3\n            val b4 = b1 - a3 - c3\n \
    \           val c4 = c1 - a3 - b3\n            val a5 = a1 - b4 - c4\n       \
    \     val b5 = b1 - a4 - c4\n            val c5 = c1 - a4 - b4\n            val\
    \ a6 = a1 - b5 - c5\n            val b6 = b1 - a6 - c5\n            val c6 = c1\
    \ - a6 - b5\n            val a7 = a1 - b6 - c6\n            val b7 = b1 - a7 -\
    \ c6\n            val c7 = c1 - a7 - b6\n            val a8 = a1 - b7 - c7\n \
    \           val b8 = b1 - a8 - c7\n            val c8 = c1 - a8 - b7\n       \
    \     val a9 = a1 - b8 - c8\n            val b9 = b1 - a9 - c8\n            val\
    \ c9 = c1 - a9 - b8\n            val a10 = a1 - b9 - c9\n            val b10 =\
    \ b1 - a10 - c9\n            val c10 = c1 - a10 - b9\n            val a11 = a1\
    \ - b10 - c10\n            val b11 = b1 - a11 - c10\n            val c11 = c1\
    \ - a11 - b10\n            val a12 = a1 - b11 - c11\n            val b12 = b1\
    \ - a12 - c11\n            val c12 = c1 - a12 - b11\n            val a13 = a1\
    \ - b12 - c12\n            val b13 = b1 - a13 - c12\n            val c13 = c1\
    \ - a13 - b12\n            val a14 = a1 - b13 - c13\n            val b14 = b1\
    \ - a14 - c13\n            val c14 = c1 - a14 - b13\n            val a15 = a1\
    \ - b14 - c14\n            val b15 = b1 - a15 - c14\n            val c15 = c1\
    \ - a15 - b14\n            val a16 = a1 - b15 - c15\n            val b16 = b1\
    \ - a16 - c15\n            val c16 = c1 - \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwzo4ecz3.scala:64:26 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m            \e[33mval\e[0m \e[36mc16\e[0m = c1 - \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpwzo4ecz3.scala:79:0 ----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwzo4ecz3.scala:78:1\
    \ ---------------------\e[0m\e[0m\n\e[31m78 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Float\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpwzo4ecz3.scala:66:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m66 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659805026
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        if (a + b > c) {\n        \
    \    val d = (a + b - c) / 2\n            triangleArea(a + d, b, c)\n        }\
    \ else if (a + c > b) {\n            val d = (a + c - b) / 2\n            triangleArea(a,\
    \ c + d, b)\n        } else if (b + c > a) {\n            val d = (b + c - a)\
    \ / 2\n            triangleArea(a, b + d, c)\n        } else {\n            val\
    \ d = (b - a) / 2\n            triangleArea(a, b + d, c)\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805028
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n\
    \        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n\
    \        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n\
    \        val b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n\
    \        val b7 = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n\
    \        val b8 = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n\
    \        val b9 = b8 + c8\n        val c9 = c8 + a8\n        val a10 = a9 + b9\n\
    \        val b10 = b9 + c9\n        val c10 = c9 + a9\n        val a11 = a10 +\
    \ b10\n        val b11 = b10 + c10\n        val c11 = c10 + a10\n        val a12\
    \ = a11 + b11\n        val b12 = b11 + c11\n        val c12 = c11 + a11\n    \
    \    val a13 = a12 + b12\n        val b13 = b12 + c12\n        val c13 = c12 +\
    \ a12\n        val a14 = a13 + b13\n        val b14 = b13 + c13\n        val c14\
    \ = c13 + a13\n        val a15 = a14 + b14\n        val b15 = b14 + c14\n    \
    \    val c15 = c14 + a14\n        val a16 = a15 + b15\n        val b16 = b15 +\
    \ c15\n        val c16 = c15 + a15\n        val a17 = a16 + b16\n        val b17\
    \ = b16 + c16\n        val c17 = c16 + a16\n        val a18 = a17 + b17\n    \
    \    val b18 = b17 + c17\n        val c18 = c17 + a17\n        val a19 = a18 +\
    \ b18\n        val b19 = b18 + c18\n        val c19 = c18 + a18\n        val a20\
    \ = a19 + b19\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwcxoazx6.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(a-b)\n  \
    \      val bc = math.abs(b-c)\n        val ac = math.abs(a-c)\n        val s =\
    \ ab + bc + ac\n        if (s > 0) {\n            val area = math.sqrt(s * (s\
    \ - ab) * (s - bc) * (s - ac))\n            area\n        } else {\n         \
    \   -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt2n97r9f.scala:21:12\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            area\n\e[31m\e[31m\
    \   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            Found:    (area :\
    \ Double)\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659805025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val s = a + b +\
    \ c\n        if (s > 0) {\n            val area = math.sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\n            area / 2\n        } else {\n            -1\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0jrrsv9f.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0jrrsv9f.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0jrrsv9f.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0jrrsv9f.scala:21:12 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            area / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Double\n\e[31m\
    \   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        (a1 + b1 + c1) *\
    \ (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6\
    \ + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpend4ugbz.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpend4ugbz.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpend4ugbz.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpend4ugbz.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpend4ugbz.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpend4ugbz.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2.0\n        val\
    \ b1 = b / 2.0\n        val c1 = c / 2.0\n        val a2 = a1 + b1\n        val\
    \ b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val\
    \ b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val\
    \ b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val\
    \ b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val\
    \ b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val\
    \ b7 = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val\
    \ b8 = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n        val\
    \ b9 = b8 + c8\n        val c9 = c8 + a8\n        val a10 = a9 + b9\n        val\
    \ b10 = b9 + c9\n        val c10 = c9 + a9\n        val a11 = a10 + b10\n    \
    \    val b11 = b10 + c10\n        val c11 = c10 + a10\n        val a12 = a11 +\
    \ b11\n        val b12 = b11 + c11\n        val c12 = c11 + a11\n        val a13\
    \ = a12 + b12\n        val b13 = b12 + c12\n        val c13 = c12 + a12\n    \
    \    val a14 = a13 + b13\n        val b14 = b13 + c13\n        val c14 = c13 +\
    \ a13\n        val a15 = a14 + b14\n        val b15 = b14 + c14\n        val c15\
    \ = c14 + a14\n        val a16 = a15 + b15\n        val b16 = b15 + c15\n    \
    \    val c16 = c15 + a15\n        val a17 = a16 + b16\n        val b17 = b16 +\
    \ c16\n        val c17 = c16 + a16\n        val a18 = a17 + b17\n        val b18\
    \ = b17 + c17\n        val c18 = c17 + a17\n        val a19 = a18 + b18\n    \
    \    val b19 = b18 + c18\n        val c19 = c18 + a18\n        val a20 = a19 +\
    \ b19\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz2q14aui.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4 \n        (a1 + b1 + c1 +\
    \ a2 + b2 + c2 + a3 + b3 + c3 + a4 + b4 + c4) / 6\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgswky1vp.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpgswky1vp.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805021
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sum = a + b + c\n     \
    \   if (sum > 0l) {\n            val area = a / sum\n            val area2 = b\
    \ / sum\n            val area3 = c / sum\n            val area4 = area + area2\
    \ + area3\n            area4.toFloat\n        } else {\n            -1\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm8xyewkc.scala:27)\n\tat Problem.main(tmpm8xyewkc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805025
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(a - b)\n\
    \        val ac = math.abs(a - c)\n        val bc = math.abs(b - c)\n        if\
    \ (ab + ac > bc) \n            math.round(ab + ac)\n        else\n           \
    \ -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_i26ok2_.scala:24)\n\tat Problem.main(tmp_i26ok2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805025
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = (a + b) / 2\n    \
    \    val b1 = (b + c) / 2\n        val c1 = (c + a) / 2\n        val area1 = a1\
    \ * a1 + b1 * b1 + c1 * c1\n        val a2 = (b + c) / 2\n        val b2 = (b\
    \ + a) / 2\n        val c2 = (c + a) / 2\n        val area2 = a2 * a2 + b2 * b2\
    \ + c2 * c2\n        val a3 = (a * b) / 2\n        val b3 = (b * c) / 2\n    \
    \    val c3 = (c * c) / 2\n        val area3 = a3 * a3 + b3 * b3 + c3 * c3\n \
    \       area1.toFloat / area2.toFloat / area3.toFloat\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4w8twzdm.scala:30)\n\tat Problem.main(tmp4w8twzdm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805025
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(b - a)\n\
    \        val bc = math.abs(c - b)\n        val ac = math.abs(c - a)\n        if\
    \ (ab > bc && ab > ac) \n            (a * b * c / math.pow(ab, 2)).toFloat\n \
    \       else -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp99zw8hff.scala:23)\n\tat Problem.main(tmp99zw8hff.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sides = List(a, b, c)\n\
    \        val sum = sides.sum\n        val isTriangle = (sum > sides.last)\n  \
    \      if (isTriangle) {\n            val area = sides.last * sides.last\n   \
    \         (area / 2.0).toFloat\n        } else {\n            -1\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp31iupcty.scala:26)\n\tat Problem.main(tmp31iupcty.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3\
    \ + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4\
    \ + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5\
    \ + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6\
    \ + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7\
    \ + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n        (a1 + b2 +\
    \ c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n            a4 + b5 + c6 >\n           \
    \ a5 + b6 + c7 >\n            a6 + b7 + c8 >\n            a7 + b8 + c9)\n    \
    \        ? ((a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n                a4\
    \ + b5 + c6 >\n                a5 + b6 + c7 >\n                a6 + b7 + c8 >\n\
    \                a7 + b8 + c9)\n                ? ((a1 + b2 + c3 > a2 + b3 + c4\
    \ > a3 + b4 + c5 >\n                    a4 + b5 + c6 >\n                    a5\
    \ + b6 + c7 >\n                    a6 + b7 + c8 >\n                    a7 + b8\
    \ + c9)\n                    ? ((a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n\
    \                        a4 + b5 + c6 >\n                        a5 + b6 + c7\
    \ >\n                        a6 + b7 + c8 >\n                        a7 + b8 +\
    \ c9)\n                        ? ((a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5\
    \ >\n                            a4 + b5 + c6 >\n                            a5\
    \ + b6 + c7 >\n                            a6 + b7 + c8 >\n                  \
    \          a7 + b8 + c9)\n                            ? ((a1 + b2 + c3 > a2 +\
    \ b3 + c4 > a3 + b4 + c5 >\n                                a4 + b5 + c\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplzvg7kq2.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmplzvg7kq2.scala:39:39 --------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \        (a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n\e[31m\e[31m   |\e[0m\
    \                                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                    Found:    Long\n\e[31m   |\e[0m         \
    \                              Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplzvg7kq2.scala:40:12 --------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            a4 + b5 + c6 >\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m\
    \   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmplzvg7kq2.scala:41:12 --------------------\e[0m\e\
    [0m\n\e[31m41 |\e[0m            a5 + b6 + c7 >\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m   |\e\
    [0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplzvg7kq2.scala:42:12 --------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m            a6 + b7 + c8 >\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m   |\e[0m            Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplzvg7kq2.scala:43:22\
    \ ------------------------\e[0m\e[0m\n\e[31m43 |\e[0m            a7 + b8 + c9)\n\
    \e[31m\e[31m   |\e[0m                      ^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: c9\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`"
  stdout: ''
  timestamp: 1659805028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n        val b9\
    \ = b8 + c8\n        val c9 = c8 + a8\n        (a9 * b9) - (a9 * c9) + (a9 * b8)\
    \ + (a9 * c7)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphjhgsy5a.scala:45)\n\tat Problem.main(tmphjhgsy5a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val isValid = a > 0 && b > 0 && c > 0\n        if (isValid) {\n     \
    \       val sum = a + b + c\n            if (sum > area) {\n                area\
    \ / 2\n            } else {\n                -1\n            }\n        } else\
    \ {\n            -1\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp43y2qqj8.scala:29)\n\tat Problem.main(tmp43y2qqj8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3\
    \ + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4\
    \ + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5\
    \ + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6\
    \ + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n        (a1 + b1 +\
    \ c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6\
    \ + b6 + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpare56r1_.scala:39)\n\tat Problem.main(tmpare56r1_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16\
    \ + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val\
    \ a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16\
    \ + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val\
    \ a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.max(a,b)\n\
    \        val bc = math.max(b,c)\n        val ca = math.max(c,a)\n        val area\
    \ = ab * bc / ca\n        area\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk8sw6yig.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk8sw6yig.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk8sw6yig.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805025
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n\
    \        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n\
    \        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n\
    \        val b6 = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b1 + c1) *\
    \ (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6\
    \ + c6)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwm2o2_8n.scala:36)\n\tat Problem.main(tmpwm2o2_8n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805031
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sum = a + b + c\n     \
    \   if (sum > 0) {\n            val area = a / sum * b / sum * c / sum\n     \
    \       (area.toDouble * 100).round\n        } else {\n            -1\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2hwae_83.scala:24)\n\tat Problem.main(tmp2hwae_83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805031
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sum = a + b + c\n     \
    \   if (sum > 0) {\n            val area = math.sqrt(sum * ((a + b) * (a + c)\
    \ * (b + c)))\n            (area.toDouble * 100).toFloat\n        } else {\n \
    \           -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe742q4tz.scala:24)\n\tat Problem.main(tmpe742q4tz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805034
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = if (a + b > c) (a\
    \ * b) / 2 else -1\n        area.toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgoei_ld5.scala:21)\n\tat Problem.main(tmpgoei_ld5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805033
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sum = a + b + c\n     \
    \   if (sum > 0) {\n            val area = math.sqrt(sum * ((a + b) * (a + c)\
    \ * (b + c)))\n            (area.toFloat + 0.5f) / 2\n        } else {\n     \
    \       -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp37oik1a4.scala:24)\n\tat Problem.main(tmp37oik1a4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2.0\n        val\
    \ b1 = b / 2.0\n        val c1 = c / 2.0\n        val area = a1 + b1 + c1\n  \
    \      val area1 = area / 2.0\n        val area2 = area1 * area1\n        val\
    \ area3 = area2 * area1\n        val area4 = area3 * area1\n        val area5\
    \ = area4 * area1\n        val area6 = area5 * area1\n        val area7 = area6\
    \ * area1\n        val area8 = area7 * area1\n        val area9 = area8 * area1\n\
    \        val area10 = area9 * area1\n        val area11 = area10 * area1\n   \
    \     val area12 = area11 * area1\n        val area13 = area12 * area1\n     \
    \   val area14 = area13 * area1\n        val area15 = area14 * area1\n       \
    \ val area16 = area15 * area1\n        val area17 = area16 * area1\n        val\
    \ area18 = area17 * area1\n        val area19 = area18 * area1\n        val area20\
    \ = area19 * area1\n        val area21 = area20 * area1\n        val area22 =\
    \ area21 * area1\n        val area23 = area22 * area1\n        val area24 = area23\
    \ * area1\n        val area25 = area24 * area1\n        val area26 = area25 *\
    \ area1\n        val area27 = area26 * area1\n        val area28 = area27 * area1\n\
    \        val area29 = area28 * area1\n        val area30 = area29 * area1\n  \
    \      val area31 = area30 * area1\n        val area32 = area31 * area1\n    \
    \    val area33 = area32 * area1\n        val area34 = area33 * area1\n      \
    \  val area35 = area34 * area1\n        val area36 = area35 * area1\n        val\
    \ area37 = area36 * area1\n        val area38 = area37 * area1\n        val area39\
    \ = area38 * area1\n        val area40 = area39 * area1\n        val area41 =\
    \ area40 * area1\n        val area42 = area41 * area1\n        val area43 = area42\
    \ * area1\n        val area44 = area43 * area1\n        val area45 = area44 *\
    \ area1\n        val area46 = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpijyg7sqj.scala:64:20 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        \e[33mval\e[0m \e[36marea46\e[0m = \n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpijyg7sqj.scala:65:5 ---------------------\e[0m\e[0m\n\e[31m65\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3\
    \ + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4\
    \ + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5\
    \ + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6\
    \ + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7\
    \ + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8\
    \ + b8\n        val b9 = b8 + c8\n        val c9 = c8 + a8\n        val a10 =\
    \ a9 + b9\n        val b10 = b9 + c9\n        val c10 = c9 + a9\n        val a11\
    \ = a10 + b10\n        val b11 = b10 + c10\n        val c11 = c110 + a10\n   \
    \     val a12 = a11 + b11\n        val b12 = b11 + c11\n        val c12 = c11\
    \ + a11\n        val a13 = a12 + b12\n        val b13 = b12 + c12\n        val\
    \ c13 = c12 + a12\n        val a14 = a13 + b13\n        val b14 = b13 + c13\n\
    \        val c14 = c13 + a13\n        val a15 = a14 + b14\n        val b15 = b14\
    \ + c14\n        val c15 = c14 + a14\n        val a16 = a15 + b15\n        val\
    \ b16 = b15 + c15\n        val c16 = c15 + a15\n        val a17 = a16 + b16\n\
    \        val b17 = b16 + c16\n        val c17 = c16 + a16\n        val a18 = a17\
    \ + b17\n        val b18 = b17 + c17\n        val c18 = c17 + a17\n        val\
    \ a19 = a18 + b18\n        val b19 = b18 + c18\n        val c19 = c18 + a18\n\
    \        val a20 = a19 + b19\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmphg6byljs.scala:73:11 ---------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmphg6byljs.scala:47:18 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mc11\e[0m = c110 + a10\n\e\
    [31m\e[31m   |\e[0m                  ^^^^\e[0m\n\e[31m   |\e[0m              \
    \    Not found: c110\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphg6byljs.scala:74:5\
    \ ---------------------\e[0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a1 + b1\n        val b3\
    \ = b1 + c1\n        val c3 = c1 + a1\n        val a4 = a1 + b1\n        val b4\
    \ = b1 + c1\n        val c4 = c1 + a1\n        val a5 = a1 + b1\n        val b5\
    \ = b1 + c1\n        val c5 = c1 + a1\n        val a6 = a1 + b1\n        val b6\
    \ = b1 + c1\n        val c6 = c1 + a1\n        val a7 = a1 + b1\n        val b7\
    \ = b1 + c1\n        val c7 = c1 + a1\n        val a8 = a1 + b1\n        val b8\
    \ = b1 + c1\n        val c8 = c1 + a1\n        val a9 = a1 + b1\n        val b9\
    \ = b1 + c1\n        val c9 = c1 + a1\n        val a10 = a1 + b1\n        val\
    \ b10 = b1 + c1\n        val c10 = c1 + a1\n        val a11 = a1 + b1\n      \
    \  val b11 = b1 + c1\n        val c11 = c1 + a1\n        val a12 = a1 + b1\n \
    \       val b12 = b1 + c1\n        val c12 = c1 + a1\n        val a13 = a1 + b1\n\
    \        val b13 = b1 + c1\n        val c13 = c1 + a1\n        val a14 = a1 +\
    \ b1\n        val b14 = b1 + c1\n        val c14 = c1 + a1\n        val a15 =\
    \ a1 + b1\n        val b15 = b1 + c1\n        val c15 = c1 + a1\n        val a16\
    \ = a1 + b1\n        val b16 = b1 + c1\n        val c16 = c1 + a1\n        val\
    \ a17 = a1 + b1\n        val b17 = b1 + c1\n        val c17 = c1 + a1\n      \
    \  val a18 = a1 + b1\n        val b18 = b1 + c1\n        val c18 = c1 + a1\n \
    \       val a19 = a1 + b1\n        val b19 = b1 + c1\n        val c19 = c1 + a1\n\
    \        val a20 = a1 + b1\n        val b20 = b1 + c1\n        val c20 = c1 +\
    \ a1\n        val a21 = a1 + b1\n        val b21 = b1 + c1\n        val c21 =\
    \ c1 + a1\n        val a22 = a1 + b1\n        val b22 = b1 + c1\n        \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm7q5ouy8.scala:81:5\
    \ ---------------------\e[0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n        val b9\
    \ = b8 + c8\n        val c9 = c8 + a8\n        (a9 * b9) - (a9 * c9) + (a9 * b8)\
    \ + (a9 * b7) - (a9 * b6) + (a9 * b5) - (a9 * b4) + (a9 * b3) - (a9 * b2) - (a9\
    \ * b1) - (a9 * b0) - (a9 * c0) - (a9 * c1) - (a9 * c2) - (a9 * c3) - (a9 * c4)\
    \ - (a9 * c5) - (a9 * c6) - (a9 * c7) - (a9 * c8) - (a9 * c9) - (a9 * c10)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplw1f82vh.scala:42:134 -----------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        (a9 * b9) - (a9 * c9) + (a9 * b8) + (a9 * b7)\
    \ - (a9 * b6) + (a9 * b5) - (a9 * b4) + (a9 * b3) - (a9 * b2) - (a9 * b1) - (a9\
    \ * b0) - (a9 * c0) - (a9 * c1) - (a9 * c2) - (a9 * c3) - (a9 * c4) - (a9 * c5)\
    \ - (a9 * c6) - (a9 * c7) - (a9 * c8) - (a9 * c9) - (a9 * c10)\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                                  ^^\e[0m\n\e\
    [31m   |\e[0m                                                           Not found:\
    \ b0\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        if (a + b > c) {\n        \
    \    val d = b * b - 4 * a * c\n            if (d > 0) {\n                val\
    \ root1 = (-b + Math.sqrt(d)) / (2 * a)\n                val root2 = (-b - Math.sqrt(d))\
    \ / (2 * a)\n                if (root1 < root2) {\n                    root1\n\
    \                } else {\n                    root2\n                }\n    \
    \        } else {\n                -1\n            }\n        } else {\n     \
    \       -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5uj2e6xg.scala:21:20\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    root1\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Found:    (root1 : Double)\n\e[31m   |\e[0m                    Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5uj2e6xg.scala:23:20\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                    root2\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Found:    (root2 : Double)\n\e[31m   |\e[0m                    Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805036
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val b2 = b + a\n        val c1 =\
    \ c + a\n        val c2 = c + b\n        val d1 = b2 - b1\n        val d2 = c2\
    \ - c1\n        val d3 = a2 - a1\n        if (d1 > 0 && d2 > 0 && d3 > 0) {\n\
    \            val area = d1 * d2 * d3\n            val rounded = area.toString.replaceAll(\"\
    \\\\.\", \"\").replaceAll(\"\\\\,\", \".\")\n            val result = rounded.toFloat\n\
    \            val rounded2 = result.toString.replaceAll(\"\\\\.\", \"\").replaceAll(\"\
    \\\\,\", \".\")\n            val result2 = rounded2.toFloat\n            if (result2\
    \ > 0.0f) {\n                println(\"Area of triangle is \" + result)\n    \
    \            return result\n            }\n        }\n        return -1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxhnn2une.scala:38)\n\tat Problem.main(tmpxhnn2une.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val sum = a + b\
    \ + c\n        if (sum > c) {\n            sum.toFloat\n        } else {\n   \
    \         -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp488_o_cv.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp488_o_cv.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp488_o_cv.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val sum = a + b\
    \ + c\n        if (sum > c) {\n            val area = math.pow(a * b, 1.0) / math.pow(c,\
    \ 2.0)\n            area.toFloat\n        } else {\n            -1\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb32zbp7z.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb32zbp7z.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb32zbp7z.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val side1 = math.sqrt(a * a\
    \ + b * b)\n        val side2 = math.sqrt(c * c + d * d)\n        val side3 =\
    \ math.sqrt(a * a + c * c)\n        val side4 = math.sqrt(b * b + d * d)\n   \
    \     val area = (side1 + side2 + side3 + side4) / 6\n        area\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdde1j8e6.scala:16:38 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdde1j8e6.scala:18:38 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdde1j8e6.scala:20:8 ---------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        area\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (area : Double)\n\e[31m   |\e[0m        Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805035
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a * b) / c\n  \
    \      val rounded = math.round(area * 100) / 100\n        if (rounded == area)\
    \ rounded else -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgbfkuc0o.scala:20)\n\tat Problem.main(tmpgbfkuc0o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = (a + b) / 2\n    \
    \    val a2 = (b + c) / 2\n        val a3 = (c + a) / 2\n        val a4 = (a1\
    \ + a2 + a3) / 2\n        val a5 = (a2 + a3 + a4) / 2\n        val a6 = (a3 +\
    \ a4 + a5) / 2\n        val a7 = (a4 + a5 + a6) / 2\n        val a8 = (a5 + a6\
    \ + a7) / 2\n        val a9 = (a6 + a7 + a8) / 2\n        val a10 = (a7 + a8 +\
    \ a9) / 2\n        val a11 = (a8 + a9 + a10) / 2\n        val a12 = (a9 + a10\
    \ + a11) / 2\n        val a13 = (a10 + a11 + a12) / 2\n        val a14 = (a11\
    \ + a12 + a13) / 2\n        val a15 = (a12 + a13 + a14) / 2\n        val a16 =\
    \ (a13 + a14 + a15) / 2\n        val a17 = (a14 + a15 + a16) / 2\n        val\
    \ a18 = (a15 + a16 + a17) / 2\n        val a19 = (a16 + a17 + a18) / 2\n     \
    \   val a20 = (a17 + a18 + a19) / 2\n        val a21 = (a18 + a19 + a20) / 2\n\
    \        val a22 = (a19 + a20 + a21) / 2\n        val a23 = (a20 + a21 + a22)\
    \ / 2\n        val a24 = (a21 + a22 + a23) / 2\n        val a25 = (a22 + a23 +\
    \ a24) / 2\n        val a26 = (a23 + a24 + a25) / 2\n        val a27 = (a24 +\
    \ a25 + a26) / 2\n        val a28 = (a25 + a26 + a27) / 2\n        val a29 = (a26\
    \ + a27 + a28) / 2\n        val a30 = (a27 + a28 + a29) / 2\n        val a31 =\
    \ (a28 + a29 + a30) / 2\n        val a32 = (a29 + a30 + a31) / 2\n        val\
    \ a33 = (a30 + a31 + a32) / 2\n        val a34 = (a31 + a32 + a33) / 2\n     \
    \   val a35 = (a32 + a33 + a34) / 2\n        val a36 = (a33 + a34 + a35) / 2\n\
    \        val a37 = (a34 + a35 + a36) / 2\n        val a38 = (a35 + a36 + a37)\
    \ / 2\n        val a39 = (a36 + a37 + a38) / 2\n        val a40 = (a37 + a38 +\
    \ a39) / 2\n        val a41 = (a38 + a39 + a40) / 2\n        val a42 = (a39 +\
    \ a40 + a41) / 2\n        val a43 = (a40 + a41 + a42) / 2\n        val a44 = (a4\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp86rl6zwq.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp86rl6zwq.scala:59:5 ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805036
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        (a1 + b1 + c1 + a2 + b2 + c2 +\
    \ a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c6 +\n         a7 + b7\
    \ + c7)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuap7rgdk.scala:40)\n\tat Problem.main(tmpuap7rgdk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sum = a + b + c\n     \
    \   if (sum > 0) {\n            val area = sum * 0.5\n            val rounded\
    \ = area.toString.split(\"\\\\.\").last.toFloat\n            if (rounded == area)\
    \ rounded else -1\n        } else {\n            -1\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpak7e26ri.scala:25)\n\tat Problem.main(tmpak7e26ri.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        (a1 + b2 + c3 > a2\
    \ + b3 + c4 > a3 + b4 + c5 >\n            a4 + b5 + c6 >\n            a5 + b6\
    \ + c7 >\n            a6 + b7 + c8)\n            ? ((a1 + b2 + c3 > a2 + b3 +\
    \ c4 > a3 + b4 + c5 >\n                a4 + b5 + c6 >\n                a5 + b6\
    \ + c7 >\n                a6 + b7 + c8)\n                ? ((a1 + b2 + c3 > a2\
    \ + b3 + c4 > a3 + b4 + c5 >\n                    a4 + b5 + c6 >\n           \
    \         a5 + b6 + c7 >\n                    a6 + b7 + c8)\n                \
    \    ? ((a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n                      \
    \  a4 + b5 + c6 >\n                        a5 + b6 + c7 >\n                  \
    \      a6 + b7 + c8)\n                        ? ((a1 + b2 + c3 > a2 + b3 + c4\
    \ > a3 + b4 + c5 >\n                            a4 + b5 + c6 >\n             \
    \               a5 + b6 + c7 >\n                            a6 + b7 + c8)\n  \
    \                          ? ((a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n\
    \                                a4 + b5 + c6 >\n                            \
    \    a5 + b6 + c7 >\n                                a6 + b7 + c8)\n         \
    \                       ? ((a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n   \
    \                                 a4 + b5 + c6 >\n                           \
    \         a5 + b6 + c7 >\n                                    a6 + b7\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpooxhuiyp.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpooxhuiyp.scala:25:17\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mb4\e[0m = b4 + c3\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m\
    \   |\e[0m                 Recursive \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpooxhuiyp.scala:26:17\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mc4\e[0m = c4 + a4\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m\
    \   |\e[0m                 Recursive \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpooxhuiyp.scala:28:17\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mb5\e[0m = b5 + c4\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m\
    \   |\e[0m                 Recursive \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpooxhuiyp.scala:29:17\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mc5\e[0m = c5 + a5\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m\
    \   |\e[0m                 Recursive \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpooxhuiyp.scala:31:17\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mb6\e[0m = b6 + c5\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m\
    \   |\e[0m                 Recursive \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpooxhu"
  stdout: ''
  timestamp: 1659805032
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val isTriangle = (a + b > c) && (a + c > b) && (b + c > a)\n        if\
    \ (isTriangle) {\n            area\n        } else {\n            -1\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvqz69pb.scala:26)\n\tat Problem.main(tmpuvqz69pb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805024
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3\
    \ + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4\
    \ + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5\
    \ + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b1 +\
    \ c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6\
    \ + b6 + c6)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe89j5o8k.scala:36)\n\tat Problem.main(tmpe89j5o8k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16\
    \ + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val\
    \ a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4\
    \ = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n        val b5\
    \ = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n        val b6\
    \ = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n        val b7\
    \ = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n        val b8\
    \ = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n        val b9\
    \ = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n        val\
    \ b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10 + b10\n \
    \       val b11 = b11 + c10\n        val c11 = c11 + a11\n        val a12 = a11\
    \ + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n        val\
    \ a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13 + a13\n\
    \        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val c14 = c14\
    \ + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n        val\
    \ c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16 + c15\n\
    \        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val b17 = b17\
    \ + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n        val\
    \ b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18 + b18\n\
    \        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val a20 = a19\
    \ + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp424u434q.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp424u434q.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp424u434q.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp424u434q.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp424u434q.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp424u434q.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805036
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sum = a + b + c\n     \
    \   if (sum > 0l) {\n            val area = sum * 0.5f\n            val rounded\
    \ = math.round(area * 100) / 100\n            return rounded\n        }\n    \
    \    return -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfepwx95u.scala:25)\n\tat Problem.main(tmpfepwx95u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val sum = a + b\
    \ + c\n        if (sum > c) {\n            val d = math.abs(a - b)\n         \
    \   val e = math.abs(b - c)\n            val f = math.abs(c - sum)\n         \
    \   val area = math.sqrt((d * d) + (e * e) + (f * f))\n            (area / 100).round\n\
    \        } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1vzxvtfc.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1vzxvtfc.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1vzxvtfc.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4 \n        (a1 + b1 + c1 +\
    \ a2 + b2 + c2 + a3 + b3 + c3 + a4 + b4 + c4) / 6\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgswky1vp.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpgswky1vp.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2.0\n        val\
    \ b1 = b / 2.0\n        val c1 = c / 2.0\n        val a2 = a1 + b1\n        val\
    \ b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val\
    \ b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val\
    \ b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val\
    \ b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val\
    \ b6 = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b2 + c2 > a3 + b3 + c3\
    \ && a2 + b3 + c3 > a3 + b3 + c3 && a3 + b4 + c3 > a3 + b3 + c3 && a3 + b5 + c3\
    \ > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3\
    \ && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3\
    \ > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3\
    \ && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3\
    \ > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3\
    \ && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3\
    \ > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3\
    \ && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3\
    \ > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3\
    \ && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq2t0ctcq.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpq2t0ctcq.scala:33:877 -------------------\e[0m\e[0m\n\e[31m33 |\e[0m\
    \        (a1 + b2 + c2 > a3 + b3 + c3 && a2 + b3 + c3 > a3 + b3 + c3 && a3 + b4\
    \ + c3 > a3 + b3 + c3 && a3 + b5 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3\
    \ + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6\
    \ + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3\
    \ + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6\
    \ + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3\
    \ + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6\
    \ + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3\
    \ + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6\
    \ + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3\
    \ + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6 + c3 > a3 + b3 + c3 && a3 + b6\
    \ + c3 > a3 + b3 + c3 && a3 + b6\n\e[31m\e[31m   |\e[0m                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                            "
  stdout: ''
  timestamp: 1659805039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val sum = a1 + b1 +\
    \ c1\n        if (sum > 0) {\n            val a2 = a1 * a1\n            val b2\
    \ = b1 * b1\n            val c2 = c1 * c1\n            val a3 = a2 * a2\n    \
    \        val b3 = b2 * b2\n            val c3 = c3 * c3\n            val a4 =\
    \ a3 * a3\n            val b4 = b3 * b3\n            val c4 = c4 * c4\n      \
    \      val a5 = a4 * b3\n            val b5 = b5 * b3\n            val c5 = c5\
    \ * c3\n            val a6 = a2 * c4\n            val b6 = b2 * c4\n         \
    \   val c6 = c6 * c2\n            val a7 = a3 * c5\n            val b7 = b7 *\
    \ c3\n            val c7 = c7 * c1\n            val a8 = a4 * c6\n           \
    \ val b8 = b4 * c6\n            val c8 = c8 * c4\n            val a9 = a5 * c7\n\
    \            val b9 = b5 * c7\n            val c9 = c9 * c5\n            val a10\
    \ = a6 * c8\n            val b10 = b6 * c8\n            val c10 = c10 * c2\n \
    \           val a11 = a7 * b9\n            val b11 = b7 * b9\n            val\
    \ c11 = c11 * c3\n            val a12 = a8 * b10\n            val b12 = b8 * b10\n\
    \            val c12 = c12 * c3\n            val a13 = a9 * b11\n            val\
    \ b13 = b9 * b11\n            val c13 = c13 * c3\n            val a14 = a10 *\
    \ b12\n            val b14 = b10 * b12\n            val c14 = c14 * c3\n     \
    \       val a15 = a11 * b13\n            val b15 = b11 * b13\n            val\
    \ c15 = c15 * c3\n            val a16 = a12 * b14\n            val b16 = b12 *\
    \ b14\n            val c16 = c16 * c3\n            val a17 = a13 * b15\n     \
    \       val b17 = b13 * b15\n            val c17 = c17 * c3\n            val a18\
    \ = a14 * b16\n            val b18 = b14 * b16\n            val c18 = c18 * c3\n\
    \            val a19 = a15 * b17\n            val b19 = b15 * b17\n          \
    \  val c19 = c19 * c3\n            val a20 = a16 * b18\n            val b20 =\
    \ b16 * b18\n\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptevs5_3q.scala:91:0 ----------------------------\e\
    [0m\e[0m\n\e[31m91 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptevs5_3q.scala:25:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e\
    [0m \e[36mc3\e[0m = c3 * c3\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\
    \e[31m   |\e[0m                     Recursive \e[33mvalue\e[0m \e[35mc3\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptevs5_3q.scala:28:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e\
    [0m \e[36mc4\e[0m = c4 * c4\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\
    \e[31m   |\e[0m                     Recursive \e[33mvalue\e[0m \e[35mc4\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptevs5_3q.scala:30:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e\
    [0m \e[36mb5\e[0m = b5 * b3\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\
    \e[31m   |\e[0m                     Recursive \e[33mvalue\e[0m \e[35mb5\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptevs5_3q.scala:31:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e\
    [0m \e[36mc5\e[0m = c5 * c3\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\
    \e[31m   |\e[0m                     Recursive \e[33mvalue\e[0m \e[35mc5\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptevs5_3q.scala:34:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e\
    [0m \e[36mc6\e[0m = c6 * c2\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\
    \e[31m   |\e[0m                     Recursive \e[33mvalue\e[0m \e[35mc6\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = (a + b) / 2\n    \
    \    val b1 = (b + c) / 2\n        val c1 = (c + a) / 2\n        val a2 = (a1\
    \ + b1) / 2\n        val b2 = (b1 + c1) / 2\n        val c2 = (c1 + a2) / 2\n\
    \        val a3 = (a2 + b2) / 2\n        val b3 = (b2 + c3) / 2\n        val c3\
    \ = (c2 + a3) / 2\n        val a4 = (a3 + b3) / 2\n        val b4 = (b3 + c4)\
    \ / 2\n        val c4 = (c4 + a3) / 2\n        val a5 = (a4 + b4) / 2\n      \
    \  val b5 = (b5 + c5) / 2\n        val c5 = (c5 + a4) / 2\n        val a6 = (a5\
    \ + b5) / 2\n        val b6 = (b5 + c6) / 2\n        val c6 = (c6 + a5) / 2\n\
    \        val a7 = (a6 + b6) / 2\n        val b7 = (b6 + c7) / 2\n        val c7\
    \ = (c7 + a6) / 2\n        val a8 = (a7 + b7) / 2\n        val b8 = (b7 + c8)\
    \ / 2\n        val c8 = (c8 + a7) / 2\n        val a9 = (a8 + b8) / 2\n      \
    \  val b9 = (b8 + c9) / 2\n        val c9 = (c9 + a8) / 2\n        val a10 = (a9\
    \ + b9) / 2\n        val b10 = (b9 + c10) / 2\n        val c10 = (c10 + a9) /\
    \ 2\n        val a11 = (a10 + b10) / 2\n        val b11 = (b10 + c11) / 2\n  \
    \      val c11 = (c11 + a10) / 2\n        val a12 = (a11 + b11) / 2\n        val\
    \ b12 = (b11 + c12) / 2\n        val c12 = (c12 + a11) / 2\n        val a13 =\
    \ (a12 + b12) / 2\n        val b13 = (b12 + c13) / 2\n        val c13 = (c13 +\
    \ a12) / 2\n        val a14 = (a13 + b13) / 2\n        val b14 = (b13 + c14) /\
    \ 2\n        val c14 = (c14 + a13) / 2\n        val a15 = (a14 + b14) / 2\n  \
    \      val b15 = (b14 + c15) / 2\n        val c15 = (c15 + a14) / 2\n        val\
    \ a16 = (a15 + b15) / 2\n        val b16 = (b15 + c16) / 2\n        val c16 =\
    \ (c16 + a15) / 2\n        val a17 = (a16 + b16) / 2\n        val b17 = (b16 +\
    \ c17) / 2\n        val c17 = (c17 + a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps5ryl9jg.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps5ryl9jg.scala:26:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mc4\e[0m = (c4 + a3) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            \
    \      ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e\
    [35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps5ryl9jg.scala:28:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mb5\e[0m = (b5 + c5) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            \
    \      ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e\
    [35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps5ryl9jg.scala:29:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mc5\e[0m = (c5 + a4) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            \
    \      ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e\
    [35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps5ryl9jg.scala:32:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mc6\e[0m = (c6 + a5) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            \
    \      ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e\
    [35mc6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps5ryl9jg.scala:35:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mc7\e[0m = (c7 + a6) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            \
    \      ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e\
    [35mc7\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation ava"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val area1 = side1 * side2\n        val area2\
    \ = side3 * side4\n        val area3 = side1 + side2 + side3\n        val area4\
    \ = side1 + side2 + side4\n        val area5 = side1 + side2 + side3\n       \
    \ val area6 = side1 + side2 + side4\n        val area7 = side1 + side2 + side3\n\
    \        val area8 = side1 + side2 + side4\n        val area9 = side1 + side2\
    \ + side3\n        val area10 = side1 + side2 + side4\n        val area11 = side1\
    \ + side2 + side3\n        val area12 = side1 + side2 + side4\n        val area13\
    \ = side1 + side2 + side3\n        val area14 = side1 + side2 + side4\n      \
    \  val area15 = side1 + side2 + side3\n        val area16 = side1 + side2 + side4\n\
    \        val area17 = side1 + side2 + side3\n        val area18 = side1 + side2\
    \ + side4\n        val area19 = side1 + side2 + side3\n        val area20 = side1\
    \ + side2 + side4\n        val area21 = side1 + side2 + side3\n        val area22\
    \ = side1 + side2 + side4\n        val area23 = side1 + side2 + side3\n      \
    \  val area24 = side1 + side2 + side4\n        val area25 = side1 + side2 + side3\n\
    \        val area26 = side1 + side2 + side4\n        val area27 = side1 + side2\
    \ + side3\n        val area28 = side1 + side2 + side4\n        val area29 = side1\
    \ + side2 + side3\n        val area30 = side1 + side2 + side4\n        val area31\
    \ = side1 + side2 + side3\n        val area32 = side1 + side2 + side4\n      \
    \  val area33 = side1 + side2 + side3\n        val area34 = side1 + side2 + side4\n\
    \        val area35 = side1 + side2 + side3\n        val area36 = side1 + side2\
    \ + side4\n        val area37 = side1 + side2 + side3\n        val area38 = side1\
    \ + side2 + side4\n        val area39 = side1 + side2 + side3\n        val area40\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptva3v1r1.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptva3v1r1.scala:17:38\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mside2\e[0m = math.sqrt(c * c + d * d)\n\e[31m\e[31m   |\e[0m             \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \          Not found: d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptva3v1r1.scala:19:38\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mside4\e[0m = math.sqrt(b * b + d * d)\n\e[31m\e[31m   |\e[0m             \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \          Not found: d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptva3v1r1.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        (a1 + b2 + c2 + a3 + b3 + c3 +\
    \ a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c7 + a7 + b7 +\n         b8 +c8 ) /\
    \ 6\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3jgh2hqg.scala:43)\n\tat Problem.main(tmp3jgh2hqg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val sum = a + b\
    \ + c\n        if (sum > c) {\n            val area = math.sqrt((c * c) - (sum\
    \ * sum))\n            area\n        } else {\n            -1.0\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsqff7h7q.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsqff7h7q.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsqff7h7q.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsqff7h7q.scala:21:12 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            area\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (area : Double)\n\e[31m   |\e[0m   \
    \         Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val sum = a+b+c\n\
    \        if (sum > c) {\n            val area = a/2.0f\n            val rounded\
    \ = math.round(area*100)/100\n            return rounded\n        } else {\n \
    \           return -1.0\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyo34cvdb.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyo34cvdb.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyo34cvdb.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(a-b)\n  \
    \      val ac = math.abs(a-c)\n        val bc = math.abs(b-c)\n        val abc\
    \ = math.min(ab, ac, bc)\n        val area = abc / 2.0\n        area\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp7_ch9eb5.scala:18:23 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mabc\e[0m = math.min(ab,\
    \ ac, bc)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in\
    \ \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double,\
    \ y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e\
    [0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m  \
    \ |\e[0mmatch arguments ((ab : Long), (ac : Long), (bc : Long))\n1 error found\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(b - a)\n\
    \        val bc = math.abs(c - b)\n        val ac = math.abs(c - a)\n        val\
    \ s = ab + bc + ac\n        if (s > 0) {\n            val area = math.sqrt(s *\
    \ (s - ab) * (s - bc) * (s - ac))\n            (area / 2).toFloat\n        } else\
    \ {\n            -1\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyg2oc802.scala:27)\n\tat Problem.main(tmpyg2oc802.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val s = a + b +\
    \ c\n        if (s > 0) {\n            val area = math.sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\n            (area.toDouble * 2).toFloat\n        } else {\n \
    \           -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpagpn6tiw.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpagpn6tiw.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpagpn6tiw.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3\
    \ + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4\
    \ + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5\
    \ + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b1 +\
    \ c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6\
    \ + b6 + c6)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe89j5o8k.scala:36)\n\tat Problem.main(tmpe89j5o8k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805036
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3\
    \ + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4\
    \ + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5\
    \ + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6\
    \ + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n        (a1 + b1 +\
    \ c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6\
    \ + b6 + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpare56r1_.scala:39)\n\tat Problem.main(tmpare56r1_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sides = List(a,b,c)\n \
    \       val sum = sides.sum\n        val isTriangle = (sum > sides.last)\n   \
    \     if (isTriangle) {\n            val area = sides.last * sides.last\n    \
    \        (area.toDouble * Math.sqrt(3) / 2)\n        } else {\n            -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprm3014ez.scala:20:13\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            (area.toDouble *\
    \ Math.sqrt(\e[31m3\e[0m) / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Double\n\e[31m   |\e[0m           \
    \  Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a * b * c) / 2.0\n\
    \        val rounded = area.toString.replaceAll(\"\\\\.\", \"\").replaceAll(\"\
    \\\\,\", \"\")\n        val float = rounded.toFloat\n        if (float == rounded)\
    \ float else -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2y1688d6.scala:18:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (float == rounded) float \e[33melse\e\
    [0m -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m       Values of types Float and String cannot be compared with ==\
    \ or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659805044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16\
    \ + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val\
    \ a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val b2 = b + a\n        val c1 =\
    \ c + a\n        val c2 = c + b\n        val d1 = b2 - b1\n        val d2 = c2\
    \ - c1\n        val d3 = a2 - a1\n        val area = if (d1 > 0 && d2 > 0 && d3\
    \ > 0) (d1 * d2 * d3) / Math.sqrt(d1 * d2 + d3 * d3) else -1\n        area\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22597ko2.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        area\n\e[31m\e[31m \
    \  |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    (area : Double)\n\
    \e[31m   |\e[0m        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + a1\n        val b2\
    \ = b1 + b1\n        val c2 = c1 + c1\n        val a3 = a2 + a2\n        val b3\
    \ = b2 + b2\n        val c3 = c3 + c3\n        val a4 = a3 + a3\n        val b4\
    \ = b4 + b4\n        val c4 = c4 + c4\n        val a5 = a4 + a4\n        val b5\
    \ = b5 + b5\n        val c5 = c5 + c5\n        val a6 = a5 + a5\n        val b6\
    \ = b6 + b6\n        val c6 = c6 + c6\n        val a7 = a6 + a6\n        val b7\
    \ = b7 + b7\n        val c7 = c7 + c7\n        val a8 = a7 + a7\n        val b8\
    \ = b8 + b8\n        val c8 = c8 + c8\n        val a9 = a7 + a7\n        val b9\
    \ = b9 + b9\n        val c9 = c9 + c9\n        val a10 = a9 + a9\n        val\
    \ b10 = b9 + b9\n        val c10 = c9 + c9\n        val a11 = a10 + a10\n    \
    \    val b11 = b10 + b10\n        val c11 = c10 + c10\n        val a12 = a11 +\
    \ a11\n        val b12 = b11 + b11\n        val c12 = c11 + c11\n        val a13\
    \ = a12 + a12\n        val b13 = b12 + b12\n        val c13 = c12 + c12\n    \
    \    val a14 = a13 + a13\n        val b14 = b13 + b13\n        val c14 = c13 +\
    \ c13\n        val a15 = a14 + a14\n        val b15 = b14 + b14\n        val c15\
    \ = c14 + c14\n        val a16 = a15 + a15\n        val b16 = b15 + b15\n    \
    \    val c16 = c15 + c15\n        val a17 = a16 + a16\n        val b17 = b16 +\
    \ b16\n        val c17 = c16 + c16\n        val a18 = a17 + a17\n        val b18\
    \ = b17 + b17\n        val c18 = c17 + c17\n        val a19 = a18 + a18\n    \
    \    val b19 = b18 + b18\n        val c19 = c18 + c18\n        val a20 = a19 +\
    \ a19\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:23:17 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mc3\e[0m = c3 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + b4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + b5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + b6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val sum = a + b\
    \ + c\n        if (sum > c) {\n            val area = math.pow(a * b * c / sum,\
    \ 0.5)\n            area\n        } else {\n            -1\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu3q7z9_g.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu3q7z9_g.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu3q7z9_g.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu3q7z9_g.scala:21:12 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            area\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (area : Double)\n\e[31m   |\e[0m   \
    \         Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805045
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sides = List(a, b, c)\n\
    \        val sum = sides.sum\n        if (sum > sides.last) sides.last else -1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6wp1g875.scala:20)\n\tat Problem.main(tmp6wp1g875.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a1 + c1\n        val b3\
    \ = b1 + a2\n        val c3 = c1 + b1\n        val a4 = a2 + b2\n        val b4\
    \ = b2 + c3\n        val c4 = c2 + b2\n        val a5 = a2 + c3\n        val b5\
    \ = b2 + a4\n        val c5 = c2 + b3\n        val a6 = a3 + b4\n        val b6\
    \ = b3 + c5\n        val c6 = c3 + b4\n        val a7 = a3 + c5\n        val b7\
    \ = b3 + a6\n        val c7 = c3 + b5\n        val a8 = a4 + b6\n        val b8\
    \ = b4 + c7\n        val c8 = c4 + b6\n        val a9 = a4 + c7\n        val b9\
    \ = b4 + a8\n        val c9 = c4 + b5\n        val a10 = a5 + b6\n        val\
    \ b10 = b5 + c7\n        val c10 = c5 + b6\n        val a11 = a5 + c7\n      \
    \  val b11 = b5 + a8\n        val c11 = c5 + b5\n        val a12 = a6 + b6\n \
    \       val b12 = b6 + c7\n        val c12 = c6 + b6\n        val a13 = a6 + c7\n\
    \        val b13 = b6 + a8\n        val c13 = c6 + b5\n        val a14 = a7 +\
    \ b6\n        val b14 = b7 + c7\n        val c14 = c7 + b6\n        val a15 =\
    \ a7 + c7\n        val b15 = b7 + a8\n        val c15 = c7 + b5\n        val a16\
    \ = a8 + b6\n        val b16 = b8 + c7\n        val c16 = c8 + b6\n        val\
    \ a17 = a8 + c7\n        val b17 = b8 + a8\n        val c17 = c8 + b5\n      \
    \  val a18 = a9 + b6\n        val b18 = b9 + c7\n        val c18 = c9 + b6\n \
    \       val a19 = a9 + c7\n        val b19 = b9 + a8\n        val c19 = c9 + b5\n\
    \        val a20 = a10 + b6\n        val b20 = b10 + c7\n        val c20 = c10\
    \ + b6\n        val a21 = a10\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2eso4eu6.scala:76:5\
    \ ---------------------\e[0m\e[0m\n\e[31m76 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        if (side1\
    \ + side2 > side3) {\n            area\n        } else {\n            -1\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxc6633rw.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3\
    \ + b3\n        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4\
    \ + b4\n        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5\
    \ + b5\n        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6\
    \ + b6\n        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7\
    \ + b7\n        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8\
    \ + b8\n        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 =\
    \ a9 + b9\n        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val\
    \ a11 = a10 + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n\
    \        val a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12\
    \ + a12\n        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val\
    \ c13 = c13 + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n\
    \        val c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15\
    \ + c14\n        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val\
    \ b16 = b16 + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n\
    \        val b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17\
    \ + b17\n        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val\
    \ a19 = a18 + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n\
    \        val a20 = a19 + b19\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8o_6bo1b.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp8o_6bo1b.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp8o_6bo1b.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp8o_6bo1b.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp8o_6bo1b.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp8o_6bo1b.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805047
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val sum = a1\
    \ + b1 + c1\n        val a2 = a1 / sum\n        val b2 = b1 / sum\n        val\
    \ c2 = c1 / sum\n        val area = a2 * b2 * c2\n        area\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvvdx_gp0.scala:26)\n\tat Problem.main(tmpvvdx_gp0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805047
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = if (a + b > c) \n\
    \            (a * b) / c \n        else \n            -1\n        area.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdxxn_jku.scala:22)\n\tat Problem.main(tmpdxxn_jku.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        (a1 + b2 + c3 > a2\
    \ + b3 + c4 > a3 + b4 + c5 >\n            a4 + b5 + c6 >\n            a5 + b6\
    \ + c7 >\n            a6 + b7 + c8)\n            ? ((a1 + b2 + c3 > a2 + b3 +\
    \ c4 > a3 + b4 + c5 >\n                a4 + b5 + c6 >\n                a5 + b6\
    \ + c7 >\n                a6 + b7 + c8) ? a1 + b2 + c3 + a4 + b5 + c6 + a7 + b8\
    \ :\n                (a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n         \
    \       a4 + b5 + c6 >\n                a5 + b6 + c7 >\n                a6 + b7\
    \ + c8) ? a1 + b2 + c3 + a4 + b5 + c6 + a7 + b8 :\n                (a1 + b2 +\
    \ c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n                a4 + b5 + c6 >\n       \
    \         a5 + b6 + c7 >\n                a6 + b7 + c8) ? a1 + b2 + c3 + a4 +\
    \ b5 + c6 + a7 + b8 :\n                (a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4\
    \ + c5 >\n                a4 + b5 + c6 >\n                a5 + b6 + c7 >\n   \
    \             a6 + b7 + c8) ? a1 + b2 + c3 + a4 + b5 + c6 + a7 + b8 :\n      \
    \          (a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n                a4 +\
    \ b5 + c6 >\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp49xl3i1a.scala:47:70 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m                a6 + b7 + c8) ? a1 + b2 + c3 + a4 + b5\
    \ + c6 + a7 + b8 :\n\e[31m\e[31m   |\e[0m                                    \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                          ')' expected, but ':' found\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp49xl3i1a.scala:25:17 ---------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive \e\
    [33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp49xl3i1a.scala:26:17 ---------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive \e\
    [33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp49xl3i1a.scala:28:17 ---------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive \e\
    [33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp49xl3i1a.scala:29:17 ---------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive \e\
    [33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp49xl3i1a.scala:31:17 ---------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive "
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val b2 = b + a\n        val c1 =\
    \ c + a\n        val c2 = c + b\n        val d1 = b2 - b1\n        val d2 = c2\
    \ - c1\n        val d3 = a2 - a1\n        val area = if (d1 > 0 && d2 > 0 && d3\
    \ > 0) (d1 * d2 * d3) / Math.sqrt(d1 * d2 * d1 + d2 * d2 * d2 + d3 * d3 * d3)\
    \ else -1\n        area\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7lsa3r3f.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        area\n\e[31m\e[31m \
    \  |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    (area : Double)\n\
    \e[31m   |\e[0m        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = math.abs(a)\n    \
    \    val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3\
    \ + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4\
    \ + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5\
    \ + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6\
    \ + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7\
    \ + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8\
    \ + b8\n        val b9 = b8 + c8\n        val c9 = c8 + a8\n        val a10 =\
    \ a9 + b9\n        val b10 = b9 + c9\n        val c10 = c9 + a9\n        val a11\
    \ = a10 + b10\n        val b11 = b10 + c10\n        val c11 = c10 + a10\n    \
    \    val a12 = a11 + b11\n        val b12 = b11 + c11\n        val c12 = c11 +\
    \ a11\n        val a13 = a12 + b12\n        val b13 = b12 + c12\n        val c13\
    \ = c12 + a12\n        val a14 = a13 + b13\n        val b14 = b13 + c13\n    \
    \    val c14 = c13 + a13\n        val a15 = a14 + b14\n        val b15 = b14 +\
    \ c14\n        val c15 = c14 + a14\n        val a16 = a15 + b15\n        val b16\
    \ = b15 + c15\n        val c16 = c15 + a15\n        val a17 = a16 + b16\n    \
    \    val b17 = b16 + c16\n        val c17 = c16 + a16\n        val a18 = a17 +\
    \ b17\n        val b18 = b17 + c17\n        val c18 = c17 + a17\n        val a19\
    \ = a18 + b18\n        val b19 = b18 + c18\n        val c19 = c18 + a18\n    \
    \    val a20 = a19 + b19\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphrxad91s.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + a1\n        val b2\
    \ = b1 + b1\n        val c2 = c1 + c1\n        val a3 = a2 + a2\n        val b3\
    \ = b2 + b2\n        val c3 = c3 + c3\n        val a4 = a3 + a3\n        val b4\
    \ = b4 + b4\n        val c4 = c4 + c4\n        val a5 = a4 + a4\n        val b5\
    \ = b5 + b5\n        val c5 = c5 + c5\n        val a6 = a5 + a5\n        val b6\
    \ = b6 + b6\n        val c6 = c6 + c6\n        val a7 = a6 + a6\n        val b7\
    \ = b7 + b7\n        val c7 = c7 + c7\n        val a8 = a7 + a7\n        val b8\
    \ = b8 + b8\n        val c8 = c8 + c8\n        val a9 = a7 + a7\n        val b9\
    \ = b9 + b9\n        val c9 = c9 + c9\n        val a10 = a9 + a9\n        val\
    \ b10 = b9 + b9\n        val c10 = c9 + c9\n        val a11 = a10 + a10\n    \
    \    val b11 = b10 + b10\n        val c11 = c10 + c10\n        val a12 = a11 +\
    \ a11\n        val b12 = b11 + b11\n        val c12 = c11 + c11\n        val a13\
    \ = a12 + a12\n        val b13 = b12 + b12\n        val c13 = c12 + c12\n    \
    \    val a14 = a13 + a13\n        val b14 = b13 + b13\n        val c14 = c13 +\
    \ c13\n        val a15 = a14 + a14\n        val b15 = b14 + b14\n        val c15\
    \ = c14 + c14\n        val a16 = a15 + a15\n        val b16 = b15 + b15\n    \
    \    val c16 = c15 + c15\n        val a17 = a16 + a16\n        val b17 = b16 +\
    \ b16\n        val c17 = c16 + c16\n        val a18 = a17 + a17\n        val b18\
    \ = b17 + b17\n        val c18 = c17 + c17\n        val a19 = a18 + a18\n    \
    \    val b19 = b18 + b18\n        val c19 = c18 + c18\n        val a20 = a19 +\
    \ a19\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:23:17 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mc3\e[0m = c3 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + b4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + b5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + b6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a+b+c)/2\n    \
    \    val isValid = (a+b+c) > c // check if sum of any two sides is greater than\
    \ third side\n        val isValidArea = if (isValid) area else -1\n        isValidArea.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2xcquk5.scala:22)\n\tat Problem.main(tmpv2xcquk5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n        val b9\
    \ = b8 + c8\n        val c9 = c8 + a8\n        val a10 = a9 + b9\n        val\
    \ b10 = b9 + c9\n        val c10 = c9 + a9\n        val a11 = a10 + b10\n    \
    \    val b11 = b10 + c10\n        val c11 = c10 + a10\n        val a12 = a11 +\
    \ b11\n        val b12 = b11 + c11\n        val c12 = c11 + a11\n        val a13\
    \ = a12 + b12\n        val b13 = b12 + c12\n        val c13 = c12 + a12\n    \
    \    val a14 = a13 + b13\n        val b14 = b13 + c13\n        val c14 = c13 +\
    \ a13\n        val a15 = a14 + b14\n        val b15 = b14 + c14\n        val c15\
    \ = c14 + a14\n        val a16 = a15 + b15\n        val b16 = b15 + c15\n    \
    \    val c16 = c15 + a15\n        val a17 = a16 + b16\n        val b17 = b16 +\
    \ c16\n        val c17 = c16 + a16\n        val a18 = a17 + b17\n        val b18\
    \ = b17 + c17\n        val c18 = c17 + a17\n        val a19 = a18 + b18\n    \
    \    val b19 = b18 + c18\n        val c19 = c18 + a18\n        val a20 = a19 +\
    \ b19\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyp524kz0.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b2 = b + c\n        val a3 = a1 + a2\n        val b3\
    \ = b1 + b2\n        val c3 = b2 + a3\n        val a4 = a1 + a3\n        val b4\
    \ = b1 + b4\n        val c4 = b2 + b4\n        val a5 = a2 + b4\n        val b5\
    \ = b2 + a5\n        val c5 = b3 + a5\n        val a6 = a3 + a5\n        val b6\
    \ = b3 + a6\n        val c6 = b4 + a6\n        val a7 = a4 + a6\n        val b7\
    \ = b4 + a7\n        val c7 = b5 + a7\n        val a8 = a5 + a7\n        val b8\
    \ = b5 + a8\n        val c8 = b6 + a8\n        val a9 = a6 + a8\n        val b9\
    \ = b6 + a9\n        val c9 = b7 + a9\n        val a10 = a7 + a9\n        val\
    \ b10 = b7 + a10\n        val c10 = b8 + a10\n        val a11 = a8 + a10\n   \
    \     val b11 = b8 + a11\n        val c11 = b9 + a11\n        val a12 = a9 + a11\n\
    \        val b12 = b9 + a12\n        val c12 = b10 + a12\n        val a13 = a10\
    \ + a12\n        val b13 = b10 + a13\n        val c13 = b11 + a13\n        val\
    \ a14 = a11 + a13\n        val b14 = b11 + a14\n        val c14 = b12 + a14\n\
    \        val a15 = a12 + a14\n        val b15 = b12 + a15\n        val c15 = b13\
    \ + a15\n        val a16 = a13 + a15\n        val b16 = b13 + a16\n        val\
    \ c16 = b14 + a16\n        val a17 = a14 + a16\n        val b17 = b14 + a17\n\
    \        val c17 = b15 + a17\n        val a18 = a15 + a17\n        val b18 = b15\
    \ + a18\n        val c18 = b16 + a18\n        val a19 = a16 + a18\n        val\
    \ b19 = b16 + a19\n        val c19 = b17 + a19\n        val a20 = a17 + a19\n\
    \        val b20 = b17 + a20\n        val c20 = b18 + a20\n        val a21 = a18\
    \ + a20\n        val b21 = b18 + a21\n        val c21 = b19 + a21\n\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy8c2c4s6.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mb3\e[0m = b1 + b2\n\e[31m\e\
    [31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy8c2c4s6.scala:22:17\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mb4\e[0m = b1 + b4\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpy8c2c4s6.scala:76:5 ---------------------\e[0m\e\
    [0m\n\e[31m76 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805051
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        if (a + b > c) {\n        \
    \    val d = (a + b - c) / 2\n            triangleArea(d, b, c)\n        } else\
    \ if (a + c > b) {\n            val d = (a + c - b) / 2\n            triangleArea(d,\
    \ c, b)\n        } else if (b + c > a) {\n            val d = (b + c - a) / 2\n\
    \            triangleArea(d, c, a)\n        } else {\n            val d = (b +\
    \ a - c) / 2\n            triangleArea(d, a, c)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        if (a + b > c) {\n        \
    \    val area = math.sqrt(a * b * c / (a + b + c))\n            area.toFloat\n\
    \        } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpotkz9fb6.scala:23)\n\tat Problem.main(tmpotkz9fb6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n\
    \        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n\
    \        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n\
    \        val b6 = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b2 + c2 > a3\
    \ + b3 + c3 && a1 + b2 + c2 > a4 + b4 + c4 && a1 + b2 + c2 > a5 + b5 + c5 && a1\
    \ + b2 + c2 > a6 + b6 + c6 ? a1 * b2 * c6 / (a6 * b5 * b3) : (-1l)).toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxt0xihk.scala:33:130 -----------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        (a1 + b2 + c2 > a3 + b3 + c3 && a1 + b2 + c2\
    \ > a4 + b4 + c4 && a1 + b2 + c2 > a5 + b5 + c5 && a1 + b2 + c2 > a6 + b6 + c6\
    \ ? a1 * b2 * c6 / (a6 * b5 * b3) : (-\e[31m1l\e[0m)).toFloat\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                          ^^^^\e[0m\n\e[31m \
    \  |\e[0m                                        value ? is not a member of Float\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val ab = math.max(a,\
    \ b)\n        val bc = math.max(b, c)\n        val ac = math.max(a, c)\n     \
    \   val s = (ab + bc + ac) / 2.0\n        val area = math.pow(s, 2.0) / 2.0\n\
    \        val rounded = math.round(area * 100.0) / 100.0\n        if (rounded ==\
    \ area) rounded\n        else -1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbb54u6f3.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbb54u6f3.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbb54u6f3.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbb54u6f3.scala:24:29 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mif\e[0m (rounded == area) rounded\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                       Found:    (rounded : Double)\n\e[31m   |\e[0m        \
    \                     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(a-b)\n  \
    \      val ac = math.abs(a-c)\n        val bc = math.abs(b-c)\n        val abc\
    \ = math.min(ab, ac, bc)\n        val abc_ab = math.min(ab, abc)\n        val\
    \ abc_ac = math.min(abc, ac)\n        val abc_bc = math.min(abc, bc)\n       \
    \ val abc_abc = math.min(abc, abc)\n        val abc_abc_ab = math.min(abc, abc_ab)\n\
    \        val abc_abc_ac = math.min(abc_ac, abc)\n        val abc_abc_bc = math.min(abc_bc,\
    \ abc)\n        val abc_abc_abc = math.min(abc_abc, abc)\n        val abc_abc_abc_ab\
    \ = math.min(abc_abc_ab, abc)\n        val abc_abc_abc_ac = math.min(abc_abc_ac,\
    \ abc)\n        val abc_abc_abc_bc = math.min(abc_abc_bc, abc)\n        val abc_abc_abc_abc\
    \ = math.min(abc_abc_abc, abc)\n        val abc_abc_abc_abc_ab = math.min(abc_abc_abc_ab,\
    \ abc)\n        val abc_abc_abc_abc_ac = math.min(abc_abc_abc_ac, abc)\n     \
    \   val abc_abc_abc_abc_bc = math.min(abc_abc_abc_bc, abc)\n        val abc_abc_abc_abc_abc\
    \ = math.min(abc_abc_abc_abc, abc)\n        val abc_abc_abc_abc_abc_ab = math.min(abc_abc_abc_abc_ab,\
    \ abc)\n        val abc_abc_abc_abc_abc_ac = math.min(abc_abc_abc_abc_ac, abc)\n\
    \        val abc_abc_abc_abc_abc_bc = math.min(abc_abc_abc_abc_bc, abc)\n    \
    \    val abc_abc_abc_abc_abc_abc = math.min(abc_abc_abc_abc_abc, abc)\n      \
    \  val abc_abc_abc_abc_abc_abc_ab = math.min(abc_abc_abc_abc_abc_ab, abc)\n  \
    \      val abc_abc_abc_abc_abc_abc_ac = math.min(abc_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjqpo431e.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpjqpo431e.scala:18:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e\
    [0m \e[36mabc\e[0m = math.min(ab, ac, bc)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with\
    \ types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float,\
    \ y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m\
    \ (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((ab : Long), (ac : Long),\
    \ (bc : Long))\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjqpo431e.scala:40:50\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e\
    [36mabc_abc_abc_abc_abc_abc_ac\e[0m = math.min(abc_\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                               Not found: abc_\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjqpo431e.scala:41:5 ---------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805053
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sides = List(a, b, c)\n\
    \        val sum = sides.sum\n        if (sum > sides.last) sides.last else -1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6wp1g875.scala:20)\n\tat Problem.main(tmp6wp1g875.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val b2 = b + a\n        val c1 =\
    \ c + a\n        val c2 = c + b\n        val d1 = b2 - b1\n        val d2 = c2\
    \ - c1\n        val d3 = a2 - a1\n        val area = if (d1 > 0 && d2 > 0 && d3\
    \ > 0) (d1 + d2 + d3) / 2.0f else -1l\n        area.toFloat\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjt0umnoa.scala:25:13 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        area.toFloat\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toFloat is not a member of AnyVal, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659805053
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(a - b)\n\
    \        val ac = math.abs(a - c)\n        val bc = math.abs(b - c)\n        if\
    \ (ab > ac && ab > bc) \n            a / (a + b + c)\n        else if (ac > ab\
    \ && ac > bc) \n            b / (a + b + c)\n        else \n            c / (a\
    \ + b + c)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz9zhoy1y.scala:26)\n\tat Problem.main(tmpz9zhoy1y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4\
    \ = b4 + c3\n        val c4 = c4 + a4 \n        (a1 + b1 + c1 + a2 + b2 + c2 +\
    \ a3 + b3 + c3 + a4 + b4 + c4) / 6\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmze5vzf_.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmze5vzf_.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805050
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val isValid = a > 0 && b > 0 && c > 0\n        if (isValid) {\n     \
    \       val sumOfTwoSides = a + b\n            val sumOfThreeSides = a + b + c\n\
    \            if (sumOfTwoSides > sumOfThreeSides) {\n                area\n  \
    \          } else {\n                -1\n            }\n        } else {\n   \
    \         -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp10vpwkpz.scala:30)\n\tat Problem.main(tmp10vpwkpz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val b2 = b + a\n        val c1 =\
    \ c + a\n        val c2 = c + b\n        val a3 = a1 + a2\n        val b3 = b1\
    \ + b2\n        val c3 = c1 + c2\n        val a4 = a2 + a1\n        val b4 = b2\
    \ + b1\n        val c4 = c2 + c1\n        val a5 = a3 + a4\n        val b5 = b3\
    \ + b4\n        val c5 = c3 + c4\n        val a6 = a4 + a3\n        val b6 = b4\
    \ + b5\n        val c6 = c4 + c6\n        val a7 = a5 + a6\n        val b7 = b5\
    \ + b6\n        val c7 = c6 + c7\n        val a8 = a7 + a5\n        val b8 = b7\
    \ + b6\n        val c8 = c7 + c7\n        val a9 = a8 + a6\n        val b9 = b8\
    \ + b6\n        val c9 = c8 + c7\n        val a10 = a9 + a8\n        val b10 =\
    \ b9 + b8\n        val c10 = c9 + c8\n        val a11 = a10 + a10\n        val\
    \ b11 = b10 + b10\n        val c11 = c10 + c10\n        val a12 = a11 + a11\n\
    \        val b12 = b11 + b11\n        val c12 = c11 + c11\n        val a13 = a12\
    \ + a12\n        val b13 = b12 + b12\n        val c13 = c12 + c12\n        val\
    \ a14 = a13 + a13\n        val b14 = b13 + b13\n        val c14 = c13 + c13\n\
    \        val a15 = a14 + a14\n        val b15 = b14 + b14\n        val c15 = c14\
    \ + c14\n        val a16 = a15 + a15\n        val b16 = b15 + b15\n        val\
    \ c16 = c15 + c15\n        val a17 = a16 + a16\n        val b17 = b16 + b16\n\
    \        val c17 = c16 + c16\n        val a18 = a17 + a17\n        val b18 = b17\
    \ + b17\n        val c18 = c17 + c17\n        val a19 = a18 + a18\n        val\
    \ b19 = b18 + b18\n        val c19 = c18 + c18\n        val a20 = a19 + a19\n\
    \        val b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5wxqkf97.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5wxqkf97.scala:17:19\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mb1\e[0m = b + c\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue + is not a member of Null, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.set\
    \ asScala\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.javaBigInteger2bigInt\n\e[31m   |\e[0m  import\
    \ math.Numeric.BigDecimalAsIfIntegral.mkNumericOps\n\e[31m   |\e[0m  import math.Numeric.BigDecimalIsFractional.mkNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5wxqkf97.scala:18:19\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mb2\e[0m = b + a\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue + is not a member of Null, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions"
  stdout: ''
  timestamp: 1659805056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val isValid = side1 + side2 > side3\n  \
    \      val rounded = if (isValid) area / side1 else -1\n        rounded.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzvwrmu34.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzvwrmu34.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2.0\n        val\
    \ b1 = b / 2.0\n        val c1 = c / 2.0\n        val a2 = a1 + b1\n        val\
    \ b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val\
    \ b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val\
    \ b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val\
    \ b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val\
    \ b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val\
    \ b7 = b6 + c6\n        val c7 = c6 + a6\n        (a1 + b1 + c1 + a2 + b2 + c2\
    \ + a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c6 +\n            a7\
    \ + b7 + c7)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpty28byph.scala:36:9\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m        (a1 + b1 + c1 + a2 +\
    \ b2 + c2 + a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c6 +\n\e[31m\e\
    [31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0m         Found:    Double\n\e[31m\
    \   |\e[0m         Required: Float\n\e[31m37 |\e[0m            a7 + b7 + c7)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = b - a\n        val\
    \ b1 = c - b\n        val c1 = a - c\n        val a2 = a1 * a1\n        val b2\
    \ = b1 * b1\n        val c2 = c1 * b1\n        val a3 = a1 * a2\n        val b3\
    \ = b1 * b2\n        val c3 = c1 * b2\n        val a4 = a1 * a3\n        val b4\
    \ = b1 * b3\n        val c4 = c1 * b3\n        val a5 = a1 * a4\n        val b5\
    \ = b1 * b4\n        val c5 = c1 * b4\n        val a6 = a1 * a5\n        val b6\
    \ = b1 * b5\n        val c6 = c1 * b5\n        val a7 = a1 * a6\n        val b7\
    \ = b1 * b6\n        val c7 = c1 * b6\n        val a8 = a1 * a7\n        val b8\
    \ = b1 * b7\n        val c8 = c1 * b7\n        val a9 = a1 * a8\n        val b9\
    \ = b1 * b8\n        val c9 = c1 * b8\n        val a10 = a1 * a9\n        val\
    \ b10 = b1 * b9\n        val c10 = c1 * b9\n        val a11 = a1 * a10\n     \
    \   val b11 = b1 * b10\n        val c11 = c1 * b10\n        val a12 = a1 * a11\n\
    \        val b12 = b1 * b11\n        val c12 = c1 * b11\n        val a13 = a1\
    \ * a12\n        val b13 = b1 * b12\n        val c13 = c1 * b12\n        val a14\
    \ = a1 * a13\n        val b14 = b1 * b13\n        val c14 = c1 * b13\n       \
    \ val a15 = a1 * a14\n        val b15 = b1 * b14\n        val c15 = c1 * b14\n\
    \        val a16 = a1 * a15\n        val b16 = b1 * b15\n        val c16 = c1\
    \ * b15\n        val a17 = a1 * a16\n        val b17 = b1 * b16\n        val c17\
    \ = c1 * b16\n        val a18 = a1 * a17\n        val b18 = b1 * b17\n       \
    \ val c18 = c1 * b17\n        val a19 = a1 * a18\n        val b19 = b1 * b18\n\
    \        val c19 = c1 * b18\n        val a20 = a1 * a19\n        val b20 = b1\
    \ * b19\n        val c20 = c1 * b19\n        val a21 = a1 * a20\n        val b21\
    \ = 0l\n        val c21 = 0l\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6tbumdo0.scala:79:5\
    \ ---------------------\e[0m\e[0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b2 = b + c\n        val a3 = a1 + a2\n        val b3\
    \ = b1 + b2\n        val c3 = c1 + c2\n        val a4 = a1 + b2\n        val b4\
    \ = b1 + c3\n        val c4 = c1 + c3\n        val a5 = a2 + b3\n        val b5\
    \ = b2 + c4\n        val c5 = c2 + c5\n        val a6 = a2 + b4\n        val b6\
    \ = b2 + c5\n        val c6 = c2 + c6\n        val a7 = a3 + b4\n        val b7\
    \ = b3 + c5\n        val c7 = c3 + c6\n        val a8 = a4 + b5\n        val b8\
    \ = b4 + c6\n        val c8 = c4 + c7\n        val a9 = a5 + b6\n        val b9\
    \ = b5 + c7\n        val c9 = c5 + c8\n        val a10 = a6 + b7\n        val\
    \ b10 = b6 + c8\n        val c10 = c6 + c9\n        val a11 = a7 + b8\n      \
    \  val b11 = b7 + c9\n        val c11 = c7 + c10\n        val a12 = a8 + b9\n\
    \        val b12 = b8 + c10\n        val c12 = c8 + c11\n        val a13 = a9\
    \ + b10\n        val b13 = b9 + c11\n        val c13 = c9 + c12\n        val a14\
    \ = a10 + b11\n        val b14 = b10 + c11\n        val c14 = c10 + c12\n    \
    \    val a15 = a11 + b12\n        val b15 = b11 + c12\n        val c15 = c11 +\
    \ c13\n        val a16 = a12 + b13\n        val b16 = b12 + c13\n        val c16\
    \ = c12 + c14\n        val a17 = a13 + b14\n        val b17 = b13 + c14\n    \
    \    val c17 = c13 + c15\n        val a18 = a14 + b15\n        val b18 = b14 +\
    \ c15\n        val c18 = c14 + c16\n        val a19 = a15 + b16\n        val b19\
    \ = b15 + c16\n        val c19 = c15 + c17\n        val a20 = a16 + b17\n    \
    \    val b20 = b16 + c17\n        val c20 = c16 + c18\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyhjvmszf.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mb3\e[0m = b1 + b2\n\e[31m\e\
    [31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyhjvmszf.scala:20:17\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mc3\e[0m = c1 + c2\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: c1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyhjvmszf.scala:22:17 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b1 + c3\n\e[31m\e[31m\
    \   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyhjvmszf.scala:23:17\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mc4\e[0m = c1 + c3\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: c1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyhjvmszf.scala:26:17 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c2 + c5\n\e[31m\e[31m\
    \   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ c2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyhjvmszf.scala:29:17\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mc6\e[0m = c2 + c6\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: c2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpyhjvmszf.scala:73:5 -----"
  stdout: ''
  timestamp: 1659805056
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = math.abs(a)\n    \
    \    val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3\
    \ + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4\
    \ + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5\
    \ + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6\
    \ + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7\
    \ + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n        (a1 + b1 +\
    \ c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6\
    \ + b6 + c6) * (a7 + b7 + c7) * (a8 + b8 + c8)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwb3051fy.scala:42)\n\tat Problem.main(tmpwb3051fy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16\
    \ + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val\
    \ a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + a1\n        val b2\
    \ = b1 + b1\n        val c2 = c1 + c1\n        val a3 = a2 + a2\n        val b3\
    \ = b2 + b2\n        val c3 = c3 + c3\n        val a4 = a3 + a3\n        val b4\
    \ = b4 + b4\n        val c4 = c4 + c4\n        val a5 = a4 + a4\n        val b5\
    \ = b5 + b5\n        val c5 = c5 + c5\n        val a6 = a5 + a5\n        val b6\
    \ = b6 + b6\n        val c6 = c6 + c6\n        val a7 = a6 + a6\n        val b7\
    \ = b7 + b7\n        val c7 = c7 + c7\n        val a8 = a7 + a7\n        val b8\
    \ = b8 + b8\n        val c8 = c8 + c8\n        val a9 = a7 + a7\n        val b9\
    \ = b9 + b9\n        val c9 = c9 + c9\n        val a10 = a9 + a9\n        val\
    \ b10 = b9 + b9\n        val c10 = c9 + c9\n        val a11 = a10 + a10\n    \
    \    val b11 = b10 + b10\n        val c11 = c10 + c10\n        val a12 = a11 +\
    \ a11\n        val b12 = b11 + b11\n        val c12 = c11 + c11\n        val a13\
    \ = a12 + a12\n        val b13 = b12 + b12\n        val c13 = c12 + c12\n    \
    \    val a14 = a13 + a13\n        val b14 = b13 + b13\n        val c14 = c13 +\
    \ c13\n        val a15 = a14 + a14\n        val b15 = b14 + b14\n        val c15\
    \ = c14 + c14\n        val a16 = a15 + a15\n        val b16 = b15 + b15\n    \
    \    val c16 = c15 + c15\n        val a17 = a16 + a16\n        val b17 = b16 +\
    \ b16\n        val c17 = c16 + c16\n        val a18 = a17 + a17\n        val b18\
    \ = b17 + b17\n        val c18 = c17 + c17\n        val a19 = a18 + a18\n    \
    \    val b19 = b18 + b18\n        val c19 = c18 + c18\n        val a20 = a19 +\
    \ a19\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:23:17 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mc3\e[0m = c3 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + b4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + b5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdqh8lbx3.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + b6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val sides = (a, b, c) match {\n            case (l, m, n) => (l + m +\
    \ n) / 2\n            case _ => -1\n        }\n        if (sides > 0) {\n    \
    \        val sum = sides match {\n                case l => l\n              \
    \  case m => m\n                case n => n\n            }\n            if (sum\
    \ > sides) {\n                area / sides\n            } else {\n           \
    \     -1\n            }\n        } else {\n            -1\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzrol33j0.scala:36)\n\tat Problem.main(tmpzrol33j0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = (a + b) / 2\n    \
    \    val a2 = (b + c) / 2\n        val a3 = (a2 + c) / 2\n        val b1 = (a\
    \ + c) / 2\n        val b2 = (b + a) / 2\n        val b3 = (b2 + a) / 2\n    \
    \    val c1 = (a + b) / 2\n        val c2 = (b + c) / 2\n        val c3 = (c +\
    \ a) / 2\n        val d1 = (a + c) / 2\n        val d2 = (b + d) / 2\n       \
    \ val d3 = (c + d) / 2\n        val e1 = (a + b) / 2\n        val e2 = (b + c)\
    \ / 2\n        val e3 = (c + e) / 2\n        val f1 = (a + c) / 2\n        val\
    \ f2 = (b + d) / 2\n        val f3 = (c + d) / 2\n        val g1 = (a + b) / 2\n\
    \        val g2 = (b + c) / 2\n        val g3 = (c + g) / 2\n        val h1 =\
    \ (a + c) / 2\n        val h2 = (b + d) / 2\n        val h3 = (c + d) / 2\n  \
    \      val i1 = (a + b) / 2\n        val i2 = (b + c) / 2\n        val i3 = (c\
    \ + i) / 2\n        val j1 = (a + c) / 2\n        val j2 = (b + d) / 2\n     \
    \   val j3 = (c + d) / 2\n        val k1 = (a + b) / 2\n        val k2 = (b +\
    \ c) / 2\n        val k3 = (c + k) / 2\n        val l1 = (a + c) / 2\n       \
    \ val l2 = (b + d) / 2\n        val l3 = (c + d) / 2\n        val m1 = (a + b)\
    \ / 2\n        val m2 = (b + c) / 2\n        val m3 = (c + m) / 2\n        val\
    \ n1 = (a + c) / 2\n        val n2 = (b + d) / 2\n        val n3 = (c + d) / 2\n\
    \        val o1 = (a + b) / 2\n        val o2 = (b + c) / 2\n        val o3 =\
    \ (c + o) / 2\n        val p1 = (a + c) / 2\n        val p2 = (b + d) / 2\n  \
    \      val p3 = (c + d) / 2\n        val q1 = (a + b) / 2\n        val q2 = (b\
    \ + c) / 2\n        val q3 = (c + q) / 2\n        val r1 = (a + c) / 2\n     \
    \   val r2 = (b + d) / 2\n        val r3 = (c + d) / 2\n        val s1 = (a +\
    \ b) / 2\n        val s2 = (b + c) / 2\n        val s3 = (c + s) / 2\n       \
    \ val t1 = (a + c) / 2\n\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpajouvfw1.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36md2\e[0m = (b + d) / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m      \
    \                Not found: d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpajouvfw1.scala:26:22 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        \e[33mval\e[0m \e[36md3\e[0m = (c + d) / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpajouvfw1.scala:29:22\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36me3\e[0m = (c + e) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \    ^\e[0m\n\e[31m   |\e[0m                      Not found: e\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpajouvfw1.scala:31:22 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mf2\e[0m = (b + d) / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m      \
    \                Not found: d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpajouvfw1.scala:32:22 ------------------------\e[0m\e[0m\n\e[31m32 |\e\
    [0m        \e[33mval\e[0m \e[36mf3\e[0m = (c + d) / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpajouvfw1.scala:35:22\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e\
    [36mg3\e[0m = (c + g) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \    ^\e[0m\n\e[31m   |\e[0m                      Not found: g\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer e"
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val side1 = math.sqrt(a * a\
    \ + b * b)\n        val side2 = math.sqrt(c * c + d * d)\n        val side3 =\
    \ math.sqrt(a * a + c * c)\n        val side4 = math.sqrt(b * b + d * d)\n   \
    \     val area = (side1 + side2 + side3 + side4) / 4\n        area match {\n \
    \           case x if x < 0.0000000001 => -1\n            case x if x > 0.0000000001\
    \ => area\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo_rhbrv1.scala:16:38 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo_rhbrv1.scala:18:38 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo_rhbrv1.scala:22:42 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x > \e[31m0.0000000001\e\
    [0m => area\n\e[31m\e[31m   |\e[0m                                          ^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Found:    (area\
    \ : Double)\n\e[31m   |\e[0m                                          Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = (a + b) / 2\n    \
    \    val a2 = (b + c) / 2\n        val a3 = (a2 + c) / 2\n        val b1 = (a\
    \ + c) / 2\n        val b2 = (b + a) / 2\n        val b3 = (b2 + a) / 2\n    \
    \    val c1 = (a + b) / 2\n        val c2 = (b + c) / 2\n        val c3 = (b +\
    \ c) / 2\n        val d1 = (a + b) / 2\n        val d2 = (b + c) / 2\n       \
    \ val d3 = (b + c) / 2\n        val e1 = (a + b) / 2\n        val e2 = (b + c)\
    \ / 2\n        val e3 = (b + c) / 2\n        val f1 = (a + b) / 2\n        val\
    \ f2 = (b + c) / 2\n        val f3 = (b + c) / 2\n        val g1 = (a + b) / 2\n\
    \        val g2 = (b + c) / 2\n        val g3 = (b + c) / 2\n        val h1 =\
    \ (a + b) / 2\n        val h2 = (b + c) / 2\n        val h3 = (b + c) / 2\n  \
    \      val i1 = (a + b) / 2\n        val i2 = (b + c) / 2\n        val i3 = (b\
    \ + c) / 2\n        val j1 = (a + b) / 2\n        val j2 = (b + c) / 2\n     \
    \   val j3 = (b + c) / 2\n        val k1 = (a + b) / 2\n        val k2 = (b +\
    \ c) / 2\n        val k3 = (b + c) / 2\n        val l1 = (a + b) / 2\n       \
    \ val l2 = (b + c) / 2\n        val l3 = (b + c) / 2\n        val m1 = (a + b)\
    \ / 2\n        val m2 = (b + c) / 2\n        val m3 = (b + c) / 2\n        val\
    \ n1 = (a + b) / 2\n        val n2 = (b + c) / 2\n        val n3 = (b + c) / 2\n\
    \        val o1 = (a + b) / 2\n        val o2 = (b + c) / 2\n        val o3 =\
    \ (b + c) / 2\n        val p1 = (a + b) / 2\n        val p2 = (b + c) / 2\n  \
    \      val p3 = (b + c) / 2\n        val q1 = (a + b) / 2\n        val q2 = (b\
    \ + c) / 2\n        val q3 = (b + c) / 2\n        val r1 = (a + b) / 2\n     \
    \   val r2 = (b + c) / 2\n        val r3 = (b + c) / 2\n        val s1 = (a +\
    \ b) / 2\n        val s2 = (b + c) / 2\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbn2ywmn4.scala:72:5\
    \ ---------------------\e[0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a * b - c\
    \ * c)\n        val a2 = Math.abs(a * c - b * b)\n        val a3 = Math.abs(a\
    \ * b + c * c)\n        val a4 = Math.abs(a * c + b * b)\n        val a5 = Math.abs(a\
    \ * b + c * c)\n        val a6 = Math.abs(a * c + b * b)\n        val a7 = Math.abs(a\
    \ * b - c * c)\n        val a8 = Math.abs(a * c - b * b)\n        val a9 = Math.abs(a\
    \ * c + b * b)\n        val a10 = Math.abs(a * b + c * c)\n        val a11 = Math.abs(a\
    \ * c + b * b)\n        val a12 = Math.abs(a * b - c * c)\n        val a13 = Math.abs(a\
    \ * c - b * b)\n        val a14 = Math.abs(a * c + b * b)\n        val a15 = Math.abs(a\
    \ * b + c * c)\n        val a16 = Math.abs(a * c + b * b)\n        val a17 = Math.abs(a\
    \ * b - c * c)\n        val a18 = Math.abs(a * c - b * b)\n        val a19 = Math.abs(a\
    \ * c + b * b)\n        val a20 = Math.abs(a * b + c * c)\n        val a21 = Math.abs(a\
    \ * c + b * b)\n        val a22 = Math.abs(a * b - c * c)\n        val a23 = Math.abs(a\
    \ * c - b * b)\n        val a24 = Math.abs(a * c + b * b)\n        val a25 = Math.abs(a\
    \ * b + c * c)\n        val a26 = Math.abs(a * c + b * b)\n        val a27 = Math.abs(a\
    \ * b - c * c)\n        val a28 = Math.abs(a * c - b * b)\n        val a29 = Math.abs(a\
    \ * c + b * b)\n        val a30 = Math.abs(a * b + c * c)\n        val a31 = Math.abs(a\
    \ * c + b * b)\n        val a32 = Math.abs(a * b - c * c)\n        val a33 = Math.abs(a\
    \ * c - b * b)\n        val a34 = Math.abs(a * c + b * b)\n        val a35 = Math.abs(a\
    \ * b + c * c)\n        val a36 = Math.abs(a * c + b * b)\n        val a37 = Math.abs(a\
    \ * b - c * c)\n        val a38 = Math.abs(a * c - b * b)\n        val a39 = Math.abs(a\
    \ * c + b * b)\n        val a40 = Math.abs(a * b + c * c)\n        val a4\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaeaj509o.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpaeaj509o.scala:56:5 ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val s = a + b +\
    \ c\n        if (s > 0) {\n            val area = math.sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\n            area / 2\n        } else {\n            -1\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0jrrsv9f.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0jrrsv9f.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0jrrsv9f.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0jrrsv9f.scala:21:12 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            area / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Double\n\e[31m\
    \   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(b - a)\n\
    \        val bc = math.abs(c - b)\n        val ac = math.abs(c - a)\n        val\
    \ s = ab + bc + ac\n        if (s > 0) {\n            val area = math.sqrt(s *\
    \ (s - ab) * (s - bc) * (s - ac))\n            area / 2\n        } else {\n  \
    \          -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvrvj8cmf.scala:21:12\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            area / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Found:    Double\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805058
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a+b+c)/2.0\n  \
    \      val isValid = (a+b > c) && (a+c > b) && (b+c > a)\n        val rounded\
    \ = if (isValid) area.toFloat else -1\n        rounded\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2s3d3ll0.scala:23)\n\tat Problem.main(tmp2s3d3ll0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4\
    \ = b4 + c3\n        val c4 = c4 + a4 \n        val a5 = a4 + b4\n        val\
    \ b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n        val\
    \ b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n        val\
    \ b7 = b7 + c6\n        val c7 = c7 + a7\n        (a1 + b1 + c1 + a2 + b2 + c2\
    \ + a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c7) / 6\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj0zp22g9.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpj0zp22g9.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpj0zp22g9.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpj0zp22g9.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpj0zp22g9.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpj0zp22g9.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e"
  stdout: ''
  timestamp: 1659805057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = (a + b) / 2\n    \
    \    val a2 = (b + c) / 2\n        val a3 = (c + a) / 2\n        val a4 = (a1\
    \ + a2 + a3) / 2\n        val a5 = (a2 + a3 + a4) / 2\n        val a6 = (a3 +\
    \ a4 + a5) / 2\n        val a7 = (a4 + a5 + a6) / 2\n        val a8 = (a5 + a6\
    \ + a7) / 2\n        val a9 = (a6 + a7 + a8) / 2\n        val a10 = (a7 + a8 +\
    \ a9) / 2\n        val a11 = (a8 + a9 + a10) / 2\n        val a12 = (a9 + a10\
    \ + a11) / 2\n        val a13 = (a10 + a11 + a12) / 2\n        val a14 = (a11\
    \ + a12 + a13) / 2\n        val a15 = (a12 + a13 + a14) / 2\n        val a16 =\
    \ (a13 + a14 + a15) / 2\n        val a17 = (a14 + a15 + a16) / 2\n        val\
    \ a18 = (a15 + a16 + a17) / 2\n        val a19 = (a16 + a17 + a18) / 2\n     \
    \   val a20 = (a17 + a18 + a19) / 2\n        val a21 = (a18 + a19 + a20) / 2\n\
    \        val a22 = (a19 + a20 + a21) / 2\n        val a23 = (a20 + a21 + a22)\
    \ / 2\n        val a24 = (a21 + a22 + a23) / 2\n        val a25 = (a22 + a23 +\
    \ a24) / 2\n        val a26 = (a23 + a24 + a25) / 2\n        val a27 = (a24 +\
    \ a25 + a26) / 2\n        val a28 = (a25 + a26 + a27) / 2\n        val a29 = (a26\
    \ + a27 + a28) / 2\n        val a30 = (a27 + a28 + a29) / 2\n        val a31 =\
    \ (a28 + a29 + a30) / 2\n        val a32 = (a29 + a30 + a31) / 2\n        val\
    \ a33 = (a30 + a31 + a32) / 2\n        val a34 = (a31 + a32 + a33) / 2\n     \
    \   val a35 = (a32 + a33 + a34) / 2\n        val a36 = (a33 + a34 + a35) / 2\n\
    \        val a37 = (a34 + a35 + a36) / 2\n        val a38 = (a35 + a36 + a37)\
    \ / 2\n        val a39 = (a36 + a37 + a38) / 2\n        val a40 = (a37 + a38 +\
    \ a39) / 2\n        val a41 = (a38 + a39 + a40) / 2\n        val a42 = (a39 +\
    \ a40 + a41) / 2\n        val a43 = (a40 + a41 + a42) / 2\n        val a44 = (a41\
    \ + a42\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7r7eo6ek.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp7r7eo6ek.scala:59:5 ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805061
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b1 + c1 + a2 + b2 + c2 +\
    \ a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 +\n            a6 + b6 + c6)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbk8j0aa8.scala:37)\n\tat Problem.main(tmpbk8j0aa8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805063
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val sum = a1\
    \ + b1 + c1\n        if (sum > 0) {\n            val a2 = a1 / sum\n         \
    \   val b2 = b1 / sum\n            val c2 = c1 / sum\n            val area = a2\
    \ * b2 * c2\n            area.toFloat\n        } else {\n            -1\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn6g4ie0d.scala:30)\n\tat Problem.main(tmpn6g4ie0d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(b - a)\n\
    \        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val\
    \ abc = math.min(ab, ac, bc)\n        val area = abc / 2.0\n        val rounded\
    \ = math.round(area * 100) / 100.0\n        if (rounded == area) rounded else\
    \ -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp4uo0u9gn.scala:18:23 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mabc\e[0m = math.min(ab,\
    \ ac, bc)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in\
    \ \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double,\
    \ y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e\
    [0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m  \
    \ |\e[0mmatch arguments ((ab : Long), (ac : Long), (bc : Long))\n1 error found\n"
  stdout: ''
  timestamp: 1659805061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = a.toFloat\n       \
    \ val b = b.toFloat\n        val c = c.toFloat\n        val sides = List(a, b,\
    \ c).filter(_ > 0)\n        val sum = sides.sum\n        val area = if (sum >\
    \ sides.last) sides.last else -1\n        (area.toDouble * 100).toFloat\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpa44bm455.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = a.toFloat\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpa44bm455.scala:16:16 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = b.toFloat\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpa44bm455.scala:17:16 ---------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = c.toFloat\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpa44bm455.scala:18:43 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36msides\e[0m = List(a, b, c).filter(_\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \    ^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member of Nothing, but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\e[31m\
    \   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\e[31m\
    \   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import math.BigDecimal.RoundingMode.ValueOrdering.mkOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpa44bm455.scala:19:27 ----------------------------------------"
  stdout: ''
  timestamp: 1659805065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val area1 = side1 * side2\n        val area2\
    \ = side3 * side4\n        val area3 = side1 + side2 + side3\n        val area4\
    \ = side1 + side2 + side4\n        val area5 = side1 + side2 + side3\n       \
    \ val area6 = side1 + side2 + side4\n        val area7 = side1 + side2 + side3\n\
    \        val area8 = side1 + side2 + side4\n        val area9 = side1 + side2\
    \ + side3\n        val area10 = side1 + side2 + side4\n        val area11 = side1\
    \ + side2 + side3\n        val area12 = side1 + side2 + side4\n        val area13\
    \ = side1 + side2 + side3\n        val area14 = side1 + side2 + side4\n      \
    \  val area15 = side1 + side2 + side3\n        val area16 = side1 + side2 + side4\n\
    \        val area17 = side1 + side2 + side3\n        val area18 = side1 + side2\
    \ + side4\n        val area19 = side1 + side2 + side3\n        val area20 = side1\
    \ + side2 + side4\n        val area21 = side1 + side2 + side3\n        val area22\
    \ = side1 + side2 + side4\n        val area23 = side1 + side2 + side3\n      \
    \  val area24 = side1 + side2 + side4\n        val area25 = side1 + side2 + side3\n\
    \        val area26 = side1 + side2 + side4\n        val area27 = side1 + side2\
    \ + side3\n        val area28 = side1 + side2 + side4\n        val area29 = side1\
    \ + side2 + side3\n        val area30 = side1 + side2 + side4\n        val area31\
    \ = side1 + side2 + side3\n        val area32 = side1 + side2 + side4\n      \
    \  val area33 = side1 + side2 + side3\n        val area34 = side1 + side2 + side4\n\
    \        val area35 = side1 + side2 + side3\n        val area36 = side1 + side2\
    \ + side4\n        val area37 = side1 + side2 + side3\n        val area38 = side1\
    \ + side2 + side4\n        val area39 = side1 + side2 + side3\n        val area40\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptva3v1r1.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptva3v1r1.scala:17:38\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mside2\e[0m = math.sqrt(c * c + d * d)\n\e[31m\e[31m   |\e[0m             \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \          Not found: d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptva3v1r1.scala:19:38\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mside4\e[0m = math.sqrt(b * b + d * d)\n\e[31m\e[31m   |\e[0m             \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \          Not found: d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptva3v1r1.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + a1\n        val b2\
    \ = b1 + b1\n        val c2 = c1 + c1\n        val a3 = a2 + a2\n        val b3\
    \ = b2 + b2\n        val c3 = c3 + c3\n        val a4 = a3 + a3\n        val b4\
    \ = b4 + b4\n        val c4 = c4 + c4\n        val a5 = a4 + a4\n        val b5\
    \ = b5 + b5\n        val c5 = c5 + c5\n        val a6 = a5 + a5\n        val b6\
    \ = b6 + b6\n        val c6 = c6 + c6\n        val a7 = a6 + a6\n        val b7\
    \ = b7 + b7\n        val c7 = c7 + c7\n        val a8 = a7 + a7\n        val b8\
    \ = b8 + b8\n        val c8 = c8 + c8\n        val a9 = a7 + a8\n        val b9\
    \ = b9 + b9\n        val c9 = c9 + c9\n        val a10 = a9 + a10\n        val\
    \ b10 = b10 + b10\n        val c10 = c10 + c10\n        val a11 = a10 + a10\n\
    \        val b11 = b11 + b11\n        val c11 = c11 + c11\n        val a12 = a11\
    \ + a11\n        val b12 = b12 + b12\n        val c12 = c12 + c12\n        val\
    \ a13 = a12 + a12\n        val b13 = b13 + b13\n        val c13 = c13 + c13\n\
    \        val a14 = a13 + a13\n        val b14 = b14 + b14\n        val c14 = c14\
    \ + c14\n        val a15 = a14 + a14\n        val b15 = b15 + b15\n        val\
    \ c15 = c15 + c15\n        val a16 = a15 + a15\n        val b16 = b16 + b16\n\
    \        val c16 = c16 + c16\n        val a17 = a16 + a16\n        val b17 = b17\
    \ + b17\n        val c17 = c17 + c17\n        val a18 = a17 + a17\n        val\
    \ b18 = b18 + b18\n        val c18 = c18 + c18\n        val a19 = a18 + a18\n\
    \        val b19 = b19 + b19\n        val c19 = c19 + c19\n        val a20 = a19\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpeu9bebcc.scala:23:17 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mc3\e[0m = c3 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpeu9bebcc.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + b4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpeu9bebcc.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpeu9bebcc.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + b5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpeu9bebcc.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpeu9bebcc.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + b6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = math.abs(a)\n    \
    \    val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a1\
    \ + b1 + c1\n        val b3 = b1 + c1 + a1\n        val c3 = c1 + b1 + a1\n  \
    \      val a4 = a2 + b2 + c2\n        val b4 = b2 + c2 + b2\n        val c4 =\
    \ c2 + b4 + b2\n        val a5 = a2 + b2 + c2 + b4\n        val b5 = b2 + c2 +\
    \ b4 + b2\n        val c5 = c2 + b4 + b5 + b2\n        val a6 = a3 + b3 + c3\n\
    \        val b6 = b3 + c3 + b6\n        val c6 = c3 + b6 + b3\n        val a7\
    \ = a3 + b3 + c3 + b6\n        val b7 = b3 + c3 + b6 + b3\n        val c7 = c3\
    \ + b6 + b7 + b3\n        val a8 = a4 + b4 + c4\n        val b8 = b4 + c4 + b8\n\
    \        val c8 = c4 + b8 + b4\n        val a9 = a4 + b4 + c4 + b8\n        val\
    \ b9 = b4 + c4 + b8 + b4\n        val c9 = c4 + b8 + b9 + b4\n        val a10\
    \ = a5 + b5 + c5\n        val b10 = b5 + c5 + b10\n        val c10 = c5 + b10\
    \ + b5\n        val a11 = a5 + b5 + c5 + b10\n        val b11 = b5 + c5 + b10\
    \ + b5\n        val c11 = c5 + b10 + b11 + b5\n        val a12 = a6 + b6 + c6\n\
    \        val b12 = b6 + c6 + b12\n        val c12 = c6 + b12 + b6\n        val\
    \ a13 = a6 + b6 + c6 + b12\n        val b13 = b6 + c6 + b12 + b6\n        val\
    \ c13 = c6 + b12 + b13 + b6\n        val a14 = a7 + b7 + c7\n        val b14 =\
    \ b7 + c7 + b14\n        val c14 = c7 + b14 + b7\n        val a15 = a7 + b7 +\
    \ c7 + b14\n        val b15 = b7 + c7 + b14 + b7\n        val c15 = c7 + b14 +\
    \ b15 + b7\n        val a16 = a8 + \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmf2w0vqa.scala:60:22 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36ma16\e[0m = a8 + \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmf2w0vqa.scala:31:27 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b3 + c3 + b6\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmf2w0vqa.scala:37:27\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mb8\e[0m = b4 + c4 + b8\n\e[31m\e[31m   |\e[0m                        \
    \   ^\e[0m\n\e[31m   |\e[0m                           Recursive \e[33mvalue\e\
    [0m \e[35mb8\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpmf2w0vqa.scala:43:28 ---------------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m        \e[33mval\e[0m \e[36mb10\e[0m = b5 + c5 + b10\n\e[31m\e[31m  \
    \ |\e[0m                            ^\e[0m\n\e[31m   |\e[0m                  \
    \          Recursive \e[33mvalue\e[0m \e[35mb10\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmf2w0vqa.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659805064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sum = a + b + c\n     \
    \   if (sum > 0)\n            (sum / 3).toFloat\n        else\n            -1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbf3aeptt.scala:22)\n\tat Problem.main(tmpbf3aeptt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sum = a + b + c\n     \
    \   if (sum > 0) {\n            val area = a / sum\n            val area2 = b\
    \ / sum\n            val area3 = c / sum\n            val area4 = area + area2\
    \ + area3\n            area4.toFloat\n        } else {\n            -1\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5uisan0h.scala:27)\n\tat Problem.main(tmp5uisan0h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n        val b9\
    \ = b8 + c8\n        val c9 = c8 + a8\n        val a10 = a9 + b9\n        val\
    \ b10 = b9 + c9\n        val c10 = c9 + a9\n        (a1 + b1 + c1) * (a2 + b2\
    \ + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6 + c6) *\
    \ (a7 + b7 + c7) * (a8 + b8 + c8) * (a9 + b9 + c9) * (a10 + b10 + c10)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt0z8rgow.scala:48)\n\tat Problem.main(tmpt0z8rgow.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sides = List(a, b, c).sorted\n\
    \        val sum = sides.sum\n        if (sum > sides(2)) sides(2) * sides(2)\
    \ * sides(2)\n        else -1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp94vwi9iq.scala:21)\n\tat Problem.main(tmp94vwi9iq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ b1 = b + c\n        val c1 = c + a\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4\
    \ = b4 + c3\n        val c4 = c4 + a4\n        (a1 + b1 + c1 + a2 + b2 + c2 +\
    \ a3 + b3 + c3 + a4 + b4 + c4) / 6\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprhug6xrm.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmprhug6xrm.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805062
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sides = List(a, b, c)\n\
    \        val sum = sides.sum\n        if (sum > sides.last) sides.last else -1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6wp1g875.scala:20)\n\tat Problem.main(tmp6wp1g875.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = math.abs(a)\n    \
    \    val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3\
    \ + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a4\n        val a5 = a4\
    \ + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a5\n        val a6 = a5\
    \ + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a6\n        val a7 = a6\
    \ + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a7\n        val a8 = a7\
    \ + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a8\n        val a9 = a8\
    \ + b8\n        val b9 = b8 + c8\n        val c9 = c8 + a9\n        val a10 =\
    \ a9 + b9\n        val b10 = b9 + c9\n        val c10 = c9 + a10\n        val\
    \ a11 = a10 + b10\n        val b11 = b10 + c10\n        val c11 = c10 + a11\n\
    \        val a12 = a11 + b11\n        val b12 = b11 + c11\n        val c12 = c11\
    \ + a12\n        val a13 = a12 + b12\n        val b13 = b12 + c12\n        val\
    \ c13 = c12 + a13\n        val a14 = a13 + b13\n        val b14 = b13 + c13\n\
    \        val c14 = c13 + a14\n        val a15 = a14 + b14\n        val b15 = b14\
    \ + c14\n        val c15 = c14 + a15\n        val a16 = a15 + b15\n        val\
    \ b16 = b15 + c15\n        val c16 = c15 + a16\n        val a17 = a16 + b16\n\
    \        val b17 = b16 + c16\n        val c17 = c16 + a17\n        val a18 = a17\
    \ + b17\n        val b18 = b17 + c17\n        val c18 = c17 + a18\n        val\
    \ a19 = a18 + b18\n        val b19 = b18 + c18\n        val c19 = c18 + a19\n\
    \        val a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvw5zcyjs.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = a + b\n        val\
    \ bc = b + c\n        val ac = a + c\n        val abc = ab + bc\n        val acb\
    \ = ac + ab\n        val bcd = bc + ac\n        val abcd = abc+ bcd\n        val\
    \ acbd = ac + bc\n        val bcda = bc+ ad\n        val abcda = abc+ bcd\n  \
    \      val acbda = ac + bcd\n        val bcdaa = bc+ ad\n        val abcdaa =\
    \ abc+ bcd\n        val acbdaa = ac + bcd\n        val bcdaaa = bc+ ad\n     \
    \   val abcdaaa = abc+ bcd\n        val acbdaaa = ac + bcd\n        val bcdaaaaa\
    \ = bc+ ad\n        val abcdaaaaa = abc+ bcd\n        val acbdaaaaa = ac + bcd\n\
    \        val bcdaaaaaa = bc+ ad\n        val abcdaaaaaa = abc+ bcd\n        val\
    \ acbdaaaaaa = ac + bcd\n        val bcdaaaaaaa = bc+ ad\n        val abcdaaaaaaa\
    \ = abc+ bcd\n        val acbdaaaaaaa = ac + bcd\n        val bcdaaaaaaaa = bc+\
    \ ad\n        val abcdaaaaaaaa = abc+ bcd\n        val acbdaaaaaaaa = ac + bcd\n\
    \        val bcdaaaaaaaaa =  bc+ ad\n        val abcdaaaaaaaaa =  abc+ bcd\n \
    \       val acbdaaaaaaaaa =  ac + bcd\n        val bcdaaaaaaaaaa =  bc+ ad\n \
    \       val abcdaaaaaaaaaa =  abc+ bcd\n        val acbdaaaaaaaaaa =  ac + bcd\n\
    \        val bcdaaaaaaaaaaa =  bc+ ad\n        val abcdaaaaaaaaaaa =  abc+ bcd\n\
    \        val acbdaaaaaaaaaaa =  ac + bcd\n        val bcdaaaaaaaaaaaa =  bc+ ad\n\
    \        val abcdaaaaaaaaaaa =  abc+ bcd\n        val acbdaaaaaaaaaaa =  ac +\
    \ bcd\n        val bcdaaaaaaaaaaaa =  bc+ ad\n        val abcdaaaaaaaaaaa =  abc+\
    \ bcd\n        val acbdaaaaaaaaaaa =  ac + b\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpswtfponh.scala:54:12 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mabcdaaaaaaaaaaa\e[0m = \
    \ abc+ bcd\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mabcdaaaaaaaaaaa is already defined as \e[33mvalue\e[0m \e[35mabcdaaaaaaaaaaa\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpswtfponh.scala:55:12 ---------------------------\e[0m\e[0m\n\e\
    [31m55 |\e[0m        \e[33mval\e[0m \e[36macbdaaaaaaaaaaa\e[0m =  ac + bcd\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0macbdaaaaaaaaaaa is already defined as \e[33mvalue\e[0m \e[35macbdaaaaaaaaaaa\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpswtfponh.scala:56:12 ---------------------------\e[0m\e[0m\n\e\
    [31m56 |\e[0m        \e[33mval\e[0m \e[36mbcdaaaaaaaaaaaa\e[0m =  bc+ ad\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbcdaaaaaaaaaaaa\
    \ is already defined as \e[33mvalue\e[0m \e[35mbcdaaaaaaaaaaaa\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpswtfponh.scala:57:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m\
    \ \e[36mabcdaaaaaaaaaaa\e[0m =  abc+ bcd\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mabcdaaaaaaaaaaa is already defined as \e[33mvalue\e[0m \e\
    [35mabcdaaaaaaaaaaa\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpswtfponh.scala:58:12 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mval\e[0m \e[36macbdaaaaaaaaaaa\e[0m = \
    \ ac + b\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0macbdaaaaaaaaaaa is already defined as \e[33mvalu"
  stdout: ''
  timestamp: 1659805067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val isTriangle = (a + b > c) && (a + c > b) && (b + c > a)\n        if\
    \ (isTriangle) {\n            area\n        } else {\n            -1\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvqz69pb.scala:26)\n\tat Problem.main(tmpuvqz69pb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = Math.abs((a * b)\
    \ - (c * c))\n        area / Math.sqrt(a * a + b * b + c * c)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9z3lkhla.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        area / Math.sqrt(a *\
    \ a + b * b + c * c)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        if (side1\
    \ + side2 > side3) {\n            area\n        } else {\n            -1\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxc6633rw.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val a3 = a1 + a2\n        val b2\
    \ = b1 + a1\n        val c1 = c + b\n        val c2 = c + a\n        val c3 =\
    \ c1 + c2\n        val a4 = a1 + b1 + c2\n        val b3 = b1 + c1 + a1\n    \
    \    val c4 = c1 + b1 + a2\n        val a5 = a1 + b2 + c3\n        val b4 = b2\
    \ + c2 + a1\n        val c5 = c2 + b2 + a2\n        val a6 = a2 + b3 + c4\n  \
    \      val b5 = b3 + c3 + a1\n        val c6 = c3 + b4 + a2\n        val a7 =\
    \ a3 + b4 + c5\n        val b6 = b4 + c4 + a1\n        val c7 = c4 + b5 + a2\n\
    \        val a8 = a4 + b5 + c6\n        val b7 = b5 + c5 + a1\n        val c8\
    \ = c5 + b6 + a2\n        val a9 = a5 + b6 + c7\n        val b8 = b6 + c6 + a1\n\
    \        val c9 = c6 + b7 + a2\n        val a10 = a6 + b7 + c8\n        val b9\
    \ = b7 + c7 + a1\n        val c10 = c7 + b8 + a2\n        val a11 = a7 + b8 +\
    \ c9\n        val b9 = b7 + c8 + a1\n        val c11 = c8 + b9 + a2\n        val\
    \ a12 = a8 + b9 + c10\n        val b9 = b8 + c9 + a1\n        val c12 = c9 + b10\
    \ + a2\n        val a13 = a9 + b10 + c11\n        val b10 = b9 + c11 + a1\n  \
    \      val c13 = c11 + b11 + a2\n        val a14 = a10 + b11 + c12\n        val\
    \ b11 = b10 + c12 + a1\n        val c14 = c12 + b12 + a2\n        val a15 = a11\
    \ + b12 + c13\n        val b12 = b11 + c13 + a1\n        val c15 = c13 + b13 +\
    \ a2\n        val a16 = a12 + b13 + c14\n        val b13 = b12 + c14 + a1\n  \
    \      val c16 = c14 + b14 + a2\n        val a17 = a13 + b14 + c15\n        val\
    \ b14 = b13 + c15 + a1\n        val c\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpshg5vl0o.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpshg5vl0o.scala:45:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m\
    \ \e[36mb9\e[0m = b7 + c8 + a1\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mb9 is already defined as \e[33mvalue\e[0m \e[35mb9\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpshg5vl0o.scala:48:12 ---------------------------\e[0m\e[0m\n\e[31m48\
    \ |\e[0m        \e[33mval\e[0m \e[36mb9\e[0m = b8 + c9 + a1\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mb9 is already defined as\
    \ \e[33mvalue\e[0m \e[35mb9\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpshg5vl0o.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mc1\e[0m = c + b\n\e[31m\e\
    [31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.set\
    \ asScala\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.javaBigInteger2bigInt\n\e[31m   |\e[0m  import\
    \ math.Numeric.BigDecimalAsIfIntegr"
  stdout: ''
  timestamp: 1659805071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3\
    \ + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4\
    \ + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5\
    \ + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b2 +\
    \ c2 > a3 + b3 + c3 && a1 + b2 + c2 > a4 + b4 + c4 && a1 + b2 + c2 > a5 + b5 +\
    \ c5 && a1 + b2 + c2 > a6 + b6 + c6 ? \n            (a1 + b2 + c2 > a2 + b2 +\
    \ c2 && a1 + b2 + c2 > a3 + b3 + c3 && a1 + b2 + c2 > a4 + b4 + c4 && a1 + b2\
    \ + c2 > a5 + b5 + c5 && a1 + b2 + c2 > a6 + b6 + c6 ? \n                (a1 +\
    \ b2 + c2 > a3 + b3 + c3 && a1 + b2 + c2 > a4 + b4 + c4 && a1 + b2 + c2 > a5 +\
    \ b5 + c5 && a1 + b2 + c2 > a6 + b6 + c6 ? \n                    (a1 + b2 + c2\
    \ > a2 + b2 + c2 && a1 + b2 + c2 > a3 + b3 + c3 && a1 + b2 + c2 > a4 + b4 + c4\
    \ && a1 + b2 + c2 > a5 + b5 + c5 && a1 + b2 + c2 > a6 + b6 + c6 ? \n         \
    \               (a1 + b2 + c2 > a3 + b3 + c3 && a1 + b2 + c2 > a4 + b4 + c4 &&\
    \ a1 + b2 + c2 > a5 + b5 + c5 && a1 + b2 + c2 > a6 + b6 + c6 ? \n            \
    \                (a1 + b2 + c2 > a2 + b2 + c2 && a1 + b2 + c2 > a3 + b3 + c3 &&\
    \ a1 + b2 + c2 > a4 + b4 + c4 && a1 + b2 + c2 > a5 + b5 + c5 && a1 + b2 + c2 >\
    \ a6 + b6 + c6 ? \n                                (a\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkuklkiv9.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkuklkiv9.scala:33:130\
    \ -----------------------\e[0m\e[0m\n\e[31m33 |\e[0m        (a1 + b2 + c2 > a3\
    \ + b3 + c3 && a1 + b2 + c2 > a4 + b4 + c4 && a1 + b2 + c2 > a5 + b5 + c5 && a1\
    \ + b2 + c2 > a6 + b6 + c6 ? \n\e[31m\e[31m   |\e[0m                         \
    \                                                                            \
    \                          ^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                 value ? is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpkuklkiv9.scala:34:165 -----------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m            (a1 + b2 + c2 > a2 + b2 + c2 && a1 + b2 + c2 > a3 + b3 + c3\
    \ && a1 + b2 + c2 > a4 + b4 + c4 && a1 + b2 + c2 > a5 + b5 + c5 && a1 + b2 + c2\
    \ > a6 + b6 + c6 ? \n\e[31m\e[31m   |\e[0m                                   \
    \                                                                            \
    \                                                   ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                         value ? is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpkuklkiv9.scala:35:138 -----------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                (a1 + b2 + c2 > a3 + b3 + c3 && a1 +\
    \ b2 + c2 > a4 + b4 + c4 && a1 + b2 + c2 > a5 + b5 + c5 && a1 + b2 + c2 > a6 +\
    \ b6 + c6 ? \n\e[31m\e[31m   |\e[0m                                          \
    \                                                                            \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \        value ? is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpkuklkiv9.scala:36:173 -----------------------\e[0m\e[0m\n\e[31m36 |\e\
    [0m                    (a1 + b2 + c2 > a2 + b2 + c2 && a1 + b2 + c2 > a3 + b3\
    \ + c3 && a1 + b2 + c2 > a4 + b4 + c4 && a1 + b2 + c2 > a5 + b5 + c5 && a1 + b2\
    \ + c2 > a6 + b6 + c6 ? \n\e[31m\e[31m   |\e[0m          "
  stdout: ''
  timestamp: 1659805069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val side1 = math.sqrt(a * a\
    \ + b * b)\n        val side2 = math.sqrt(c * c + d * d)\n        val side3 =\
    \ math.sqrt(a * a + c * c)\n        val side4 = math.sqrt(b * b + d * d)\n   \
    \     val area = (side1 + side2 + side3) / 2.0\n        val rounded = area * 1000.0\n\
    \        if (rounded > 1000.0) rounded else -1.0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1xfg1nou.scala:16:38 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1xfg1nou.scala:18:38 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1xfg1nou.scala:21:30 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (rounded > \e[31m1000.0\e[0m) rounded\
    \ \e[33melse\e[0m -\e[31m1.0\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Found:  \
    \  (rounded : Double)\n\e[31m   |\e[0m                              Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        if (a + b > c) {\n        \
    \    val d = b * b - 4 * a * c\n            if (d > 0) {\n                val\
    \ root1 = (-b + Math.sqrt(d)) / (2 * a)\n                val root2 = (-b - Math.sqrt(d))\
    \ / (2 * a)\n                val area = if (root1 < root2) root1 else root2\n\
    \                area\n            } else {\n                -1\n            }\n\
    \        } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiyp0v5yb.scala:21:16\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                area\n\e[31m\e\
    [31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    (area : Double)\n\e[31m   |\e[0m                Required: Float\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c3 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        (a1 + b2 + c3 > a2\
    \ + b3 + c4 > a3 + b4 + c5 >\n            a4 + b5 + c6 >\n            a5 + b6\
    \ + c7 >\n            a6 + b7 + c8)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp74pkhw6z.scala:23:17 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mc3\e[0m = c3 + a3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp74pkhw6z.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp74pkhw6z.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp74pkhw6z.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp74pkhw6z.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp74pkhw6z.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(b - a)\n\
    \        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val\
    \ abc = math.min(ab, ac, bc)\n        val abd = math.min(ab, ac, ab)\n       \
    \ val bcd = math.min(bc, ac, bc)\n        val bcd = math.min(bc, ac, bc)\n   \
    \     val abd = math.min(ab, ac, ab)\n        val abc = math.min(ab, ac, ab)\n\
    \        val abd = math.min(ab, ac, ab)\n        val bcd = math.min(bc, ac, bc)\n\
    \        val bcd = math.min(bc, ac, bc)\n        val abd = math.min(ab, ac, ab)\n\
    \        val abc = math.min(ab, ac, ab)\n        val abd = math.min(ab, ac, ab)\n\
    \        val bcd = math.min(bc, ac, bc)\n        val bcd = math.min(bc, ac, bc)\n\
    \        val abd = math.min(ab, ac, ab)\n        val abc = math.min(ab, ac, ab)\n\
    \        val abd = math.min(ab, ac, ab)\n        val bcd = math.min(bc, ac, bc)\n\
    \        val bcd = math.min(bc, ac, bc)\n        val abd = math.min(ab, ac, ab)\n\
    \        val abc = math.min(ab, ac, ab)\n        val abd = math.min(ab, ac, ab)\n\
    \        val bcd = math.min(bc, ac, bc)\n        val bcd = math.min(bc, ac, bc)\n\
    \        val abd = math.min(ab, ac, ab)\n        val abc = math.min(ab, ac, ab)\n\
    \        val abd = math.min(ab, ac, ab)\n        val bcd = math.min(bc, ac, bc)\n\
    \        val bcd = math.min(bc, ac, bc)\n        val abd = math.min(ab, ac, ab)\n\
    \        val abc = math.min(ab, ac, ab)\n        val abd = math.min(ab, ac, ab)\n\
    \        val bcd = math.min(bc, ac, bc)\n        val bcd = math.min(bc, ac, bc)\n\
    \        val abd = math.min(ab, ac, ab)\n        val abc = math.min(ab, ac, ab)\n\
    \        val abd = math.min(ab, ac, ab)\n        val bcd = math.min(bc, ac, bc)\n\
    \        val bcd = math.\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw8cqghp9.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw8cqghp9.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mbcd\e[0m = math.min(bc, ac, bc)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbcd is\
    \ already defined as \e[33mvalue\e[0m \e[35mbcd\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw8cqghp9.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mabd\e[0m = math.min(ab, ac, ab)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mabd is already defined as \e[33mvalue\e[0m \e[35mabd\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw8cqghp9.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mabc\e[0m = math.min(ab, ac, ab)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mabc is\
    \ already defined as \e[33mvalue\e[0m \e[35mabc\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw8cqghp9.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mabd\e[0m = math.min(ab, ac, ab)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mabd is already defined as \e[33mvalue\e[0m \e[35mabd\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw8cqghp9.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mbcd\e[0m = math.min(bc, ac, bc)\n\e[31m\e\
    [31m   |\e[0m"
  stdout: ''
  timestamp: 1659805070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4\
    \ = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n        val b5\
    \ = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n        val b6\
    \ = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n        val b7\
    \ = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n        val b8\
    \ = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n        val b9\
    \ = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n        val\
    \ b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10 + b10\n \
    \       val b11 = b11 + c10\n        val c11 = c11 + a11\n        val a12 = a11\
    \ + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n        val\
    \ a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13 + a13\n\
    \        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val c14 = c14\
    \ + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n        val\
    \ c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16 + c15\n\
    \        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val b17 = b17\
    \ + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n        val\
    \ b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18 + b18\n\
    \        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val a20 = a19\
    \ + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx7wfqfi4.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpx7wfqfi4.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpx7wfqfi4.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpx7wfqfi4.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpx7wfqfi4.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpx7wfqfi4.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val area2 = side1 * side2 * side3\n    \
    \    val area3 = side1 * side2 * side4\n        val area4 = side1 * side3 * side4\n\
    \        val area5 = side1 * side2 * side4\n        val area6 = side1 * side3\
    \ * side5\n        val area7 = side1 * side4 * side5\n        val area8 = side1\
    \ * side4 * side6\n        val area9 = side1 * side5 * side6\n        val area10\
    \ = side1 * side4 * side7\n        val area11 = side1 * side5 * side7\n      \
    \  val area12 = side1 * side6 * side7\n        val area13 = side1 * side7 * side8\n\
    \        val area14 = side2 * side3 * side4\n        val area15 = side2 * side3\
    \ * side5\n        val area16 = side2 * side3 * side6\n        val area17 = side2\
    \ * side3 * side7\n        val area18 = side2 * side4 * side5\n        val area19\
    \ = side2 * side4 * side6\n        val area20 = side2 * side4 * side7\n      \
    \  val area21 = side2 * side5 * side6\n        val area22 = side2 * side5 * side7\n\
    \        val area23 = side2 * side6 * side7\n        val area24 = side2 * side7\
    \ * side8\n        val area25 = side3 * side4 * side5\n        val area26 = side3\
    \ * side4 * side6\n        val area27 = side3 * side4 * side7\n        val area28\
    \ = side3 * side5 * side6\n        val area29 = side3 * side5 * side7\n      \
    \  val area30 = side3 * side6 * side7\n        val area31 = side3 * side7 * side8\n\
    \        val area32 = side4 * side5 * side6\n        val area33 = side4 * side5\
    \ * side7\n        val area34 = side4 * side6 * side7\n        val area35 = side4\
    \ * side7 * side8\n        val area36 = side5 * side6 * side7\n        val area37\
    \ = side5 * side7 * side8\n        val area38 = side6 * side7 * side8\n      \
    \  val area39 = side7 * side8 * side9\n        val area40\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_rr1ph6i.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_rr1ph6i.scala:17:38\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mside2\e[0m = math.sqrt(c * c + d * d)\n\e[31m\e[31m   |\e[0m             \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \          Not found: d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_rr1ph6i.scala:19:38\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mside4\e[0m = math.sqrt(b * b + d * d)\n\e[31m\e[31m   |\e[0m             \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \          Not found: d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_rr1ph6i.scala:24:36\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36marea6\e[0m = side1 * side3 * side5\n\e[31m\e[31m   |\e[0m                \
    \                    ^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \       Not found: side5\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_rr1ph6i.scala:25:36 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36marea7\e[0m = side1 * side4 * side5\n\e[31m\e[31m\
    \   |\e[0m                                    ^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                Not found: side5\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_rr1ph6i.scala:26:36 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36marea8\e[0m = side1 * side4\
    \ * side6\n\e[31m\e[31m   |\e[0m                                    ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    Not found: sid"
  stdout: ''
  timestamp: 1659805071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n\
    \        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n\
    \        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n\
    \        val b6 = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b2 + c2 > a3\
    \ + b3 + c3 && a1 + b2 + c2 > a4 + b4 + c4 && a1 + b2 + c2 > a5 + b5 + c5 && a1\
    \ + b2 + c2 > a6 + b6 + c6 ? a1 * b2 * c6 / (a6 * b5 * b3 + b6 * b2 * c5 + (a6\
    \ * b5 * b3 + b6 * b2 * c5) * (a3 * b4 + a4 * b3 + a4 * b2 * c4 + (a5 * b4 + a5\
    \ * b2 * c4 + (a6 * b4 + a6 * b2 * c4) * (a2 * b5 + a2 * b3 + a2 * b2 * c3 + (a3\
    \ * b5 + a3 * b3 + a3 * b2 * c3 + (a4 * b5 + a4 * b3 + a4 * b2 * c3 + (a5 * b5\
    \ + a5 * b3 + a5 * b2 * c3) * (a1 * b6 + a1 * b5 + a1 * b2 * c5 + (a2 * b6 + a2\
    \ * b5 + a2 * b2 * c5 + (a3 * b6 + a3 * b5 + a3 * b2 * c5 + (a4 * b6 + a4 * b5\
    \ + a4 * b2 * c5 + (a5 * b6 + a5 * b5 + a5 * b2 * c5) * (a1 * b7 + a1 * b6 + a1\
    \ * b2 * c6 + (a2 * b7 + a2 * b6 + a2 * b2 * c6 + (a3 * b7 + a3 * b6 + a3 * b2\
    \ * c6 + (a4 * b7 + a4 * b6 + a4 * b2 * c6 + (a5 * b7 + a5 * b6 + a5 * b2 * c6)\
    \ * (a1 * b8 + a1 * b7 + a1 * b2 * c7 + (a2 * b8 + a2 * b7 + a2 * b2 * c7 + (a3\
    \ * b8 + a3 * b7 + a3 * b2 * c7 + (a4 * b8 + a4 * b7 + a4 * b2 * c7 + (a5 * b8\
    \ + a5 * b7 + a5 * b2 * c7) * (a1 * \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9q45t8s9.scala:33:992 --------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        (a1 + b2 + c2 > a3 + b3 + c3 && a1 + b2 + c2\
    \ > a4 + b4 + c4 && a1 + b2 + c2 > a5 + b5 + c5 && a1 + b2 + c2 > a6 + b6 + c6\
    \ ? a1 * b2 * c6 / (a6 * b5 * b3 + b6 * b2 * c5 + (a6 * b5 * b3 + b6 * b2 * c5)\
    \ * (a3 * b4 + a4 * b3 + a4 * b2 * c4 + (a5 * b4 + a5 * b2 * c4 + (a6 * b4 + a6\
    \ * b2 * c4) * (a2 * b5 + a2 * b3 + a2 * b2 * c3 + (a3 * b5 + a3 * b3 + a3 * b2\
    \ * c3 + (a4 * b5 + a4 * b3 + a4 * b2 * c3 + (a5 * b5 + a5 * b3 + a5 * b2 * c3)\
    \ * (a1 * b6 + a1 * b5 + a1 * b2 * c5 + (a2 * b6 + a2 * b5 + a2 * b2 * c5 + (a3\
    \ * b6 + a3 * b5 + a3 * b2 * c5 + (a4 * b6 + a4 * b5 + a4 * b2 * c5 + (a5 * b6\
    \ + a5 * b5 + a5 * b2 * c5) * (a1 * b7 + a1 * b6 + a1 * b2 * c6 + (a2 * b7 + a2\
    \ * b6 + a2 * b2 * c6 + (a3 * b7 + a3 * b6 + a3 * b2 * c6 + (a4 * b7 + a4 * b6\
    \ + a4 * b2 * c6 + (a5 * b7 + a5 * b6 + a5 * b2 * c6) * (a1 * b8 + a1 * b7 + a1\
    \ * b2 * c7 + (a2 * b8 + a2 * b7 + a2 * b2 * c7 + (a3 * b8 + a3 * b7 + a3 * b2\
    \ * c7 + (a4 * b8 + a4 * b7 + a4 * b2 * c7 + (a5 * b8 + a5 * b7 + a5 * b2 * c7)\
    \ * (a1 * \n\e[31m\e[31m   |\e[0m                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                            "
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ b1 = b + c\n        val c1 = c + a\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c4\n        val c4 = c4 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b5 + c4\n        val c5 = c5 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b6 + c5\n        val c6 = c6 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b7 + c6\n        val c7 = c7 + a6\n        (a1 + b1 + c1 + a2 + b2 + c2 +\
    \ a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c7) / 6\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk126l75y.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpk126l75y.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpk126l75y.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpk126l75y.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpk126l75y.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpk126l75y.scala:34:17 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mb7\e[0m = b7 + c6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        if (a + b > c) {\n        \
    \    val area = math.sqrt(math.pow((a + b), 2) + (math.pow(c, 2)))\n         \
    \   (area.toFloat * 2).toInt\n        } else {\n            -1\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprkegggu5.scala:23)\n\tat Problem.main(tmprkegggu5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = if (a + b > c) (a\
    \ * b) / 2 else -1\n        area.toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgoei_ld5.scala:21)\n\tat Problem.main(tmpgoei_ld5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805033
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val b2 = b + a\n        val c1 =\
    \ c + a\n        val c2 = c + b\n        val d1 = b2 - b1\n        val d2 = c2\
    \ - c1\n        val area = if (d1 > 0 && d2 > 0) (d1 * d2) / 2 else -1\n     \
    \   area\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr_2rg7em.scala:27)\n\tat Problem.main(tmpr_2rg7em.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(a-b)\n  \
    \      val ac = math.abs(c-a)\n        val bc = math.abs(c-b)\n        val abc\
    \ = math.abs(ab+ac+bc)\n        if (abc > ab*ac*bc) \n            abc / ab * ac\
    \ / bc\n        else -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpui1wf6oo.scala:24)\n\tat Problem.main(tmpui1wf6oo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(a-b)\n  \
    \      val bc = math.abs(b-c)\n        val ac = math.abs(a-c)\n        if (ab\
    \ > bc && ab > ac) {\n            val sum = a + b + c\n            val area =\
    \ math.pow(sum, 0.5f)\n            (area.toDouble * 100d).toFloat\n        } else\
    \ {\n            -1\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp65zj2qh9.scala:27)\n\tat Problem.main(tmp65zj2qh9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b2 = b + c\n        val a3 = a1 + a2\n        val b3\
    \ = b1 + b2\n        val c3 = b2 + a3\n        val a4 = a1 + a3\n        val b4\
    \ = b1 + b4\n        val c4 = b2 + b4\n        val a5 = a2 + b4\n        val b5\
    \ = b2 + a5\n        val c5 = b3 + a5\n        val a6 = a3 + a5\n        val b6\
    \ = b3 + a6\n        val c6 = b4 + a6\n        val a7 = a3 + a6\n        val b7\
    \ = b4 + a7\n        val c7 = b5 + a7\n        val a8 = a4 + a7\n        val b8\
    \ = b5 + a8\n        val c8 = b6 + a8\n        val a9 = a5 + a8\n        val b9\
    \ = b6 + a9\n        val c9 = b7 + a9\n        val a10 = a6 + a9\n        val\
    \ b10 = b7 + a10\n        val c10 = b8 + a10\n        val a11 = a7 + a10\n   \
    \     val b11 = b7 + a11\n        val c11 = b8 + a11\n        val a12 = a8 + a11\n\
    \        val b12 = b8 + a12\n        val c12 = b9 + a12\n        val a13 = a9\
    \ + a12\n        val b13 = b9 + a13\n        val c13 = b10 + a13\n        val\
    \ a14 = a10 + a13\n        val b14 = b10 + a14\n        val c14 = b11 + a14\n\
    \        val a15 = a11 + a14\n        val b15 = b11 + a15\n        val c15 = b12\
    \ + a15\n        val a16 = a12 + a15\n        val b16 = b12 + a16\n        val\
    \ c16 = b13 + a16\n        val a17 = a13 + a16\n        val b17 = b13 + a17\n\
    \        val c17 = b14 + a17\n        val a18 = a14 + a17\n        val b18 = b14\
    \ + a18\n        val c18 = b15 + a18\n        val a19 = a15 + a18\n        val\
    \ b19 = b15 + a19\n        val c19 = b16 + a19\n        val a20 = a16 + a19\n\
    \        val b20 = b16 + a20\n        val c20 = b17 + a20\n        val a21 = a17\
    \ + a20\n        val b21 = b17 + a21\n        val c21 = b18 + a21\n\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpch6qq056.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mb3\e[0m = b1 + b2\n\e[31m\e\
    [31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpch6qq056.scala:22:17\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mb4\e[0m = b1 + b4\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpch6qq056.scala:76:5 ---------------------\e[0m\e\
    [0m\n\e[31m76 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = math.abs(a)\n    \
    \    val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3\
    \ + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4\
    \ + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5\
    \ + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6\
    \ + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7\
    \ + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n        (a1 + b2 +\
    \ c2 > a3 && b2 + c2 + a3 > b3 && c2 + a3 + b3 > c3 && a3 + b4 + c4 > a4 && b4\
    \ + c4 + a4 > b4 && c4 + a4 + b4 > c4 && a4 + b5 + c5 > a5 && b5 + c5 + a5 > b5\
    \ && c5 + a5 + b5 > c5 && a5 + b6 + c6 > a6 && b6 + c6 + a6 > b6 && c6 + a6 +\
    \ b6 > c6 && a6 + b7 + c7 > a7 && b7 + c7 + a7 > b7 && c7 + a7 + b7 > c7 && a7\
    \ + b8 + c8 > a8 && b8 + c8 + a8 > b8 && c8 + a8 + b8 > c8)\n            ? Math.round((a1\
    \ * a5 * b6 + b1 * a7 * b5 + c1 * a6 * b4 + c1 * a8 * b3 + a1 * a8 * b2 + b1 *\
    \ a8 * b1 + c1 * a7 * b + b1 * a7 * a2 + c1 * a5 * a1 + a1 * a5 * a3 + b1 * a5\
    \ * a4 + c1 * a4 * a3 + a1 * a4 * a2 + b1 * a4 * a1 + c1 * a3 + a1 * a2 + b1 *\
    \ a1 + c1 * a)\n            : -1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqi2h8g5c.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqi2h8g5c.scala:40:12\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        (a1 + b2 + c2 > a3\
    \ && b2 + c2 + a3 > b3 && c2 + a3 + b3 > c3 && a3 + b4 + c4 > a4 && b4 + c4 +\
    \ a4 > b4 && c4 + a4 + b4 > c4 && a4 + b5 + c5 > a5 && b5 + c5 + a5 > b5 && c5\
    \ + a5 + b5 > c5 && a5 + b6 + c6 > a6 && b6 + c6 + a6 > b6 && c6 + a6 + b6 > c6\
    \ && a6 + b7 + c7 > a7 && b7 + c7 + a7 > b7 && c7 + a7 + b7 > c7 && a7 + b8 +\
    \ c8 > a8 && b8 + c8 + a8 > b8 && c8 + a8 + b8 > c8)\n\e[31m40 |\e[0m        \
    \    ? Math.round((a1 * a5 * b6 + b1 * a7 * b5 + c1 * a6 * b4 + c1 * a8 * b3 +\
    \ a1 * a8 * b2 + b1 * a8 * b1 + c1 * a7 * b + b1 * a7 * a2 + c1 * a5 * a1 + a1\
    \ * a5 * a3 + b1 * a5 * a4 + c1 * a4 * a3 + a1 * a4 * a2 + b1 * a4 * a1 + c1 *\
    \ a3 + a1 * a2 + b1 * a1 + c1 * a)\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        value ? is not a member of Boolean.\n\e[31m   |\e[0m       \
    \ Note that `?` is treated as an infix operator in Scala 3.\n\e[31m   |\e[0m \
    \       If you do not want that, insert a `;` or empty line in front\n\e[31m \
    \  |\e[0m        or drop any spaces behind the operator.\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqi2h8g5c.scala:40:26 --------------------\e[0m\e\
    [0m\n\e[31m40 |\e[0m            ? Math.round((a1 * a5 * b6 + b1 * a7 * b5 + c1\
    \ * a6 * b4 + c1 * a8 * b3 + a1 * a8 * b2 + b1 * a8 * b1 + c1 * a7 * b + b1 *\
    \ a7 * a2 + c1 * a5 * a1 + a1 * a5 * a3 + b1 * a5 * a4 + c1 * a4 * a3 + a1 * a4\
    \ * a2 + b1 * a4 * a1 + c1 * a3 + a1 * a2 + b1 * a1 + c1 * a)\n\e[31m\e[31m  \
    \ |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Long\n\e[31m   |\e[0m\
    \                 "
  stdout: ''
  timestamp: 1659805076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val sum = a1 + b1 +\
    \ c1\n        if (sum > 0) {\n            val a2 = a1 - c1\n            val b2\
    \ = b1 - a1\n            val c2 = c1 - b1\n            val sum2 = a2 + b2 + c2\n\
    \            if (sum2 > 0) {\n                val a3 = a2 - b2\n             \
    \   val b3 = b2 - a2\n                val c3 = c2 - b2\n                val sum3\
    \ = a3 + b3 + c3\n                if (sum3 > 0) {\n                    val a4\
    \ = a3 - b3\n                    val b4 = b4 - a3\n                    val c4\
    \ = c4 - b3\n                    val sum4 = a4 + b4 + c4\n                   \
    \ if (sum4 > 0) {\n                        val a5 = a4 - b4\n                \
    \        val b5 = b5 - a4\n                        val c5 = c5 - b4\n        \
    \                val sum5 = a5 + b5 + c5\n                        if (sum5 > 0)\
    \ {\n                            val a6 = a6 - b5\n                          \
    \  val b6 = b6 - a6\n                            val c6 = c6 - b5\n          \
    \                  val sum6 = a6 + b6 + c6\n                            if (sum6\
    \ > 0) {\n                                val a7 = a6 - b6\n                 \
    \               val b7 = b7 - a6\n                                val c7 = c7\
    \ - b6\n                                val sum7 = a7 + b7 + c7\n            \
    \                    if (sum7 > 0) {\n                                    val\
    \ a8 = a7 - b7\n                                    val b8 = b7 - a7\n       \
    \                             val c8 = c7 - b7\n                             \
    \       val sum8 = a8 + b8 + c8\n                                    if (sum8\
    \ > 0) {\n                                        val a9 = a8 - b8\n         \
    \                               val b9 = b8 - a8\n                           \
    \             val c9 = c8 - b8\n                                        val sum9\
    \ = a9 + b9 + c9\n                                        if (sum9 > 0) {\n  \
    \                                          val a10 = a9 - b9\n               \
    \                             val b10 = b9 - a9\n                            \
    \                val c10 = c9 - b9\n                                         \
    \   val sum10 = a10 + b10 + c10\n                                            if\
    \ (sum10 > 0) {\n                                                return sum10.toFloat\
    \ * 0.5\n                                            }\n                     \
    \                   }\n                                    }\n               \
    \                 }\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpoz0w6nzb.scala:31:29 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    \e[33mval\e[0m \e[36mb4\e[0m = b4\
    \ - a3\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e\
    [0m                             Recursive \e[33mvalue\e[0m \e[35mb4\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpoz0w6nzb.scala:32:29\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m                    \e\
    [33mval\e[0m \e[36mc4\e[0m = c4 - b3\n\e[31m\e[31m   |\e[0m                  \
    \           ^\e[0m\n\e[31m   |\e[0m                             Recursive \e[33mvalue\e\
    [0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpoz0w6nzb.scala:36:33 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m                        \e[33mval\e[0m \e[36mb5\e[0m = b5 - a4\n\e[31m\e\
    [31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m        \
    \                         Recursive \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpoz0w6nzb.scala:37:33\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m                     \
    \   \e[33mval\e[0m \e[36mc5\e[0m = c5 - b4\n\e[31m\e[31m   |\e[0m            \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \ Recursive \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpoz0w6nzb.scala:40:37 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                            \e[33mval\e[0m \e[36ma6\e\
    [0m = a6 - b5\n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\
    \e[31m   |\e[0m                                     Recursive \e[33mvalue\e[0m\
    \ \e[35ma6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(side1 * side1 + side2 * side2)\n\
    \        if (side1 + side2 > side3) {\n            area\n        } else {\n  \
    \          -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6cc4ebx_.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val area1 = side1 * side2\n        val area2\
    \ = side3 * side4\n        val area3 = side1 + side2 + side3\n        val area4\
    \ = side1 + side2 + side4\n        val area5 = side1 + side2 + side3\n       \
    \ val area6 = side1 + side2 + side4\n        val area7 = side1 + side2 + side3\n\
    \        val area8 = side1 + side2 + side4\n        val area9 = side1 + side2\
    \ + side3\n        val area10 = side1 + side2 + side4\n        val area11 = side1\
    \ + side2 + side3\n        val area12 = side1 + side2 + side4\n        val area13\
    \ = side1 + side2 + side3\n        val area14 = side1 + side2 + side4\n      \
    \  val area15 = side1 + side2 + side3\n        val area16 = side1 + side2 + side4\n\
    \        val area17 = side1 + side2 + side3\n        val area18 = side1 + side2\
    \ + side4\n        val area19 = side1 + side2 + side3\n        val area20 = side1\
    \ + side2 + side4\n        val area21 = side1 + side2 + side3\n        val area22\
    \ = side1 + side2 + side4\n        val area23 = side1 + side2 + side3\n      \
    \  val area24 = side1 + side2 + side4\n        val area25 = side1 + side2 + side3\n\
    \        val area26 = side1 + side2 + side4\n        val area27 = side1 + side2\
    \ + side3\n        val area28 = side1 + side2 + side4\n        val area29 = side1\
    \ + side2 + side3\n        val area30 = side1 + side2 + side4\n        val area31\
    \ = side1 + side2 + side3\n        val area32 = side1 + side2 + side4\n      \
    \  val area33 = side1 + side2 + side3\n        val area34 = side1 + side2 + side4\n\
    \        val area35 = side1 + side2 + side3\n        val area36 = side1 + side2\
    \ + side4\n        val area37 = side1 + side2 + side3\n        val area38 = side1\
    \ + side2 + side4\n        val area39 = side1 + side2 + side3\n        val area40\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptva3v1r1.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptva3v1r1.scala:17:38\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mside2\e[0m = math.sqrt(c * c + d * d)\n\e[31m\e[31m   |\e[0m             \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \          Not found: d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptva3v1r1.scala:19:38\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mside4\e[0m = math.sqrt(b * b + d * d)\n\e[31m\e[31m   |\e[0m             \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \          Not found: d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptva3v1r1.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16\
    \ + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val\
    \ a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16\
    \ + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val\
    \ a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_1vzigrs.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val sum = a + b\
    \ + c\n        if (sum > c) {\n            val d = math.sqrt((a + b) * (b + c)\
    \ * (c + a))\n            val area = d * (b + c) / 2\n            area\n     \
    \   } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpolb3huu9.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpolb3huu9.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpolb3huu9.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n\
    \        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n\
    \        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n\
    \        val b6 = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b2 + c3 > a2\
    \ + b3 + c4 > a3 + b4 + c5 >\n            a4 + b5 + c6 >\n            a5 + b6\
    \ + c6 >\n            a6 + b6 + c5 >\n            a6 + b5 + c4 >\n           \
    \ a5 + b4 + c3 >\n            a4 + b3 + c2 >\n            a3 + b2 + c1 >\n   \
    \         a2 + b1 + c1 >\n            a1 + b1 + c1 >\n            a1 + b1 + c1)\n\
    \            ? (a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n               \
    \ a4 + b5 + c6 >\n                a5 + b6 + c6 >\n                a6 + b6 + c5\
    \ >\n                a6 + b5 + c4 >\n                a5 + b4 + c3 >\n        \
    \        a4 + b3 + c2 >\n                a3 + b2 + c1 >\n                a2 +\
    \ b1 + c1 >\n                a1 + b1 + c1)\n                ? (a1 + b2 + c3 >\
    \ a2 + b3 + c4 > a3 + b4 + c5 >\n                    a4 + b5 + c6 >\n        \
    \            a5 + b6 + c6 >\n                    a6 + b6 + c5 >\n            \
    \        a6 + b5 + c4 >\n                    a5 + b4 + c3 >\n                \
    \    a4 + b3 + c2 >\n                    a3 + b2 + c1 >\n                    a2\
    \ + b1 + c1 >\n                    a1 + b1 + c1)\n                    ? (a1 +\
    \ b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n                        a4 + b5 + c6\
    \ >\n                        a5 + b6 + c6 >\n                        a6 + b6 +\
    \ c5 >\n                        a6 + \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpafa5x0ug.scala:68:28 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m                        a6 + \n\e[31m\e[31m   |\e[0m\
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpafa5x0ug.scala:33:39 --------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        (a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                       Found:    Float\n\e[31m\
    \   |\e[0m                                       Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpafa5x0ug.scala:34:12 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            a4 + b5 + c6 >\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Float\n\e[31m\
    \   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpafa5x0ug.scala:35:12 --------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m            a5 + b6 + c6 >\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Float\n\e[31m   |\e\
    [0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpafa5x0ug.scala:36:12 --------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m            a6 + b6 + c5 >\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Float\n\e[31m   |\e[0m            Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpafa5x0ug.scala:37:12\
    \ --------------------\e[0m\e[0m\n\e[31m37 |\e[0m            a6 + b5 + c4 >\n\e\
    [3"
  stdout: ''
  timestamp: 1659805079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n        val b9\
    \ = b8 + c8\n        val c9 = c8 + a8\n        val a10 = a9 + b9\n        val\
    \ b10 = b9 + c9\n        val c10 = c9 + a9\n        (a1 + b1 + c1 + a2 + b2 +\
    \ c2 + a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c7 + a7 + b7 + c7\
    \ + a8 + b8 + c8 + a9 + b9 + c9)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp29e5oevl.scala:48)\n\tat Problem.main(tmp29e5oevl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(a-b)\n  \
    \      val bc = math.abs(b-c)\n        val cb = math.abs(c-b)\n        val abc\
    \ = math.abs(ab+bc)\n        val bcb = math.abs(bc+cb)\n        val abcb = math.abs(abc+bcb)\n\
    \        val abcc = math.abs(abc+cc)\n        val bcca = math.abs(bcb+ca)\n  \
    \      val cbaa = math.abs(cb+aa)\n        val caab = math.abs(ca+ab)\n      \
    \  val abca = math.abs(ab+ca)\n        val abcca = math.abs(abc+ca)\n        val\
    \ abcab = math.abs(ab+cb)\n        val bccaa = math.abs(bcb+ca)\n        val cbaab\
    \ = math.abs(cb+ab)\n        val caabc = math.abs(ca+abc)\n        val abcabc\
    \ = math.abs(ab+cbc)\n        val bccaab = math.abs(bcb+ca)\n        val cbaabc\
    \ = math.abs(cb+abc)\n        val caabcb = math.abs(ca+abc) \n        val abcabcb\
    \ = math.abs(ab+cbc)\n        val bccaabc = math.abs(bcb+ca)\n        val cbaabcb\
    \ = math.abs(cb+abc) \n        val caabcbb = math.abs(ca+abc)\n        val abcabcbb\
    \ = math.abs(ab+cbc)\n        val bccaabcc = math.abs(bcb+ca)\n        val cbaabcbb\
    \ = math.abs(cb+abc)\n        val caabcbbc = math.abs(ca+abc)\n        val abcabcbbc\
    \ = math.abs(ab+cbc)\n        val bccaabccb = math.abs(bcb+ca)\n        val cbaabcbbc\
    \ = math.abs(cb+abc)\n        val caabcbbcb = math.abs(ca+abc)\n        val abcabcbbcb\
    \ = math.abs(ab+cbc)\n        val bccaabccbb = math.abs(bcb+ca)\n        val cbaabcbbcb\
    \ = math.abs(cb+abc)\n        val caabcbbcc = math.abs(ca+abc)\n        val abcabcbbcc\
    \ = math.abs(ab+cbc)\n        val bccaabccbbc = math.abs(bcb+ca)\n        val\
    \ cbaabcbbcc = math.abs(cb+abc)\n        val caabcbb\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg4g7b53l.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg4g7b53l.scala:21:32\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mabcc\e[0m = math.abs(abc+cc)\n\e[31m\e[31m   |\e[0m                      \
    \          ^^\e[0m\n\e[31m   |\e[0m                                Not found:\
    \ cc\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg4g7b53l.scala:22:32\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mbcca\e[0m = math.abs(bcb+ca)\n\e[31m\e[31m   |\e[0m                      \
    \          ^^\e[0m\n\e[31m   |\e[0m                                Not found:\
    \ ca\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg4g7b53l.scala:23:31\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mcbaa\e[0m = math.abs(cb+aa)\n\e[31m\e[31m   |\e[0m                       \
    \        ^^\e[0m\n\e[31m   |\e[0m                               Not found: aa\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg4g7b53l.scala:24:28\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mcaab\e[0m = math.abs(ca+ab)\n\e[31m\e[31m   |\e[0m                       \
    \     ^^\e[0m\n\e[31m   |\e[0m                            Not found: ca\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg4g7b53l.scala:25:31 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mabca\e[0m = math.abs(ab+ca)\n\
    \e[31m\e[31m   |\e[0m                               ^^\e[0m\n\e[31m   |\e[0m \
    \                              Not found: ca\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] No"
  stdout: ''
  timestamp: 1659805077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val isValid = a < b && a < c && b < c\n        if(isValid) {\n      \
    \      area\n        } else {\n            -1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjepfan0y.scala:25)\n\tat Problem.main(tmpjepfan0y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2.0\n        val\
    \ b1 = b / 2.0\n        val c1 = c / 2.0\n        val a2 = a1 + b1\n        val\
    \ b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val\
    \ b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val\
    \ b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val\
    \ b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val\
    \ b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val\
    \ b7 = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val\
    \ b8 = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n        val\
    \ b9 = b8 + c8\n        val c9 = c8 + a8\n        val a10 = a9 + b9\n        val\
    \ b10 = b9 + c9\n        val c10 = c9 + a9\n        val a11 = a10 + b10\n    \
    \    val b11 = b10 + c10\n        val c11 = c10 + a10\n        val a12 = a11 +\
    \ b11\n        val b12 = b11 + c11\n        val c12 = c11 + a11\n        val a13\
    \ = a12 + b12\n        val b13 = b12 + c12\n        val c13 = c12 + a12\n    \
    \    val a14 = a13 + b13\n        val b14 = b13 + c13\n        val c14 = c13 +\
    \ a13\n        val a15 = a14 + b14\n        val b15 = b14 + c14\n        val c15\
    \ = c14 + a14\n        val a16 = a15 + b15\n        val b16 = b15 + c15\n    \
    \    val c16 = c15 + a15\n        val a17 = a16 + b16\n        val b17 = b16 +\
    \ c16\n        val c17 = c16 + a16\n        val a18 = a17 + b17\n        val b18\
    \ = b17 + c17\n        val c18 = c17 + a17\n        val a19 = a18 + b18\n    \
    \    val b19 = b18 + c18\n        val c19 = c18 + a18\n        val a20 = a19 +\
    \ b19\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz2q14aui.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805025
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sum = a + b + c\n     \
    \   if (sum > 0) {\n            val area = math.sqrt(sum * a * a + b * b + c *\
    \ c)\n            (area.toDouble * 2).toFloat\n        } else {\n            -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx7_cke3z.scala:24)\n\tat Problem.main(tmpx7_cke3z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = math.abs(a)\n    \
    \    val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3\
    \ + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4\
    \ + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5\
    \ + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6\
    \ + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7\
    \ + b7\n        val b8 = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8\
    \ + b8\n        val b9 = b8 + c8\n        val c9 = c8 + a8\n        val a10 =\
    \ a9 + b9\n        val b10 = b9 + c9\n        val c10 = c9 + a9\n        val a11\
    \ = a10 + b10\n        val b11 = b10 + c10\n        val c11 = c10 + a10\n    \
    \    val a12 = a11 + b11\n        val b12 = b11 + c11\n        val c12 = c11 +\
    \ a11\n        val a13 = a12 + b12\n        val b13 = b12 + c12\n        val c13\
    \ = c12 + a12\n        val a14 = a13 + b13\n        val b14 = b13 + c13\n    \
    \    val c14 = c13 + a13\n        val a15 = a14 + b14\n        val b15 = b14 +\
    \ c14\n        val c15 = c14 + a14\n        val a16 = a15 + b15\n        val b16\
    \ = b15 + c15\n        val c16 = c15 + a15\n        val a17 = a16 + b16\n    \
    \    val b17 = b16 + c16\n        val c17 = c16 + a16\n        val a18 = a17 +\
    \ b17\n        val b18 = b17 + c17\n        val c18 = c17 + a17\n        val a19\
    \ = a18 + b18\n        val b19 = b18 + c18\n        val c19 = c18 + a18\n    \
    \    val a20 = a19 + b19\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphrxad91s.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b2 = b + c\n        val a3 = a1 + a2\n        val b3\
    \ = b1 + b2\n        val c3 = b2 + a3\n        val a4 = a1 + a3\n        val b4\
    \ = b1 + b4\n        val c4 = b2 + b4\n        val a5 = a2 + b4\n        val b5\
    \ = b2 + a5\n        val c5 = b3 + a5\n        val a6 = a3 + a5\n        val b6\
    \ = b3 + a6\n        val c6 = b4 + a6\n        val a7 = a4 + a6\n        val b7\
    \ = b4 + a7\n        val c7 = b5 + a7\n        val a8 = a5 + a7\n        val b8\
    \ = b5 + a8\n        val c8 = b6 + a8\n        val a9 = a6 + a8\n        val b9\
    \ = b6 + a9\n        val c9 = b7 + a9\n        val a10 = a7 + a9\n        val\
    \ b10 = b7 + a10\n        val c10 = b8 + a10\n        val a11 = a8 + a10\n   \
    \     val b11 = b8 + a11\n        val c11 = b9 + a11\n        val a12 = a9 + a11\n\
    \        val b12 = b9 + a12\n        val c12 = b10 + a12\n        val a13 = a10\
    \ + a12\n        val b13 = b10 + a13\n        val c13 = b11 + a13\n        val\
    \ a14 = a11 + a13\n        val b14 = b11 + a14\n        val c14 = b12 + a14\n\
    \        val a15 = a12 + a14\n        val b15 = b12 + a15\n        val c15 = b13\
    \ + a15\n        val a16 = a13 + a15\n        val b16 = b13 + a16\n        val\
    \ c16 = b14 + a16\n        val a17 = a14 + a16\n        val b17 = b14 + a17\n\
    \        val c17 = b15 + a17\n        val a18 = a15 + a17\n        val b18 = b15\
    \ + a18\n        val c18 = b16 + a18\n        val a19 = a16 + a18\n        val\
    \ b19 = b16 + a19\n        val c19 = b17 + a19\n        val a20 = a17 + a19\n\
    \        val b20 = b17 + a20\n        val c20 = b18 + a20\n        val a21 = a18\
    \ + a20\n        val b21 = b18 + a21\n        val c21 = b19 + a21\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpov3oe3y3.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mb3\e[0m = b1 + b2\n\e[31m\e\
    [31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpov3oe3y3.scala:22:17\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mb4\e[0m = b1 + b4\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpov3oe3y3.scala:75:5 ---------------------\e[0m\e\
    [0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sum = a + b + c\n     \
    \   if (sum > 0) {\n            val area = math.sqrt(sum * a * a + sum * b * b\
    \ + sum * c * c)\n            (area / 2).toFloat\n        }\n        else {\n\
    \            -1\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbksp9uw7.scala:25)\n\tat Problem.main(tmpbksp9uw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = Math.sqrt(a * a + b\
    \ * b)\n        val b = Math.sqrt(c * c + a * a)\n        val c = Math.sqrt(a\
    \ * a + c * c)\n        val s = (a + b + c) / 2\n        val area = s * (s - a)\
    \ * (s - b) * (s - c)\n        val rounded = area * 100f / s\n        rounded.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpiut4ri8j.scala:15:26 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.sqrt(a * a\
    \ + b * b)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e\
    [0m                          Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpiut4ri8j.scala:17:34\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mc\e[0m = Math.sqrt(a * a + c * c)\n\e[31m\e[31m   |\e[0m             \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \  Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4\
    \ = b4 + c3\n        val c4 = c4 + a4 \n        val a5 = a4 + b4\n        val\
    \ b5 = b5 + c4\n        val c5 = c5 + a5 \n        val a6 = a5 + b5\n        val\
    \ b6 = b6 + c5\n        val c6 = c6 + a6 \n        val a7 = a6 + b6\n        val\
    \ b7 = b7 + c6\n        val c7 = c7 + a7 \n        val a8 = a7 + b7\n        val\
    \ b8 = b8 + c7\n        val c8 = c8 + a8 \n        val a9 = a8 + b8\n        val\
    \ b9 = b9 + c8 \n        val c9 = c9 + a9 \n        val a10 = a9 + b9\n      \
    \  val b10 = b10 + c9 \n        val c10 = c10 + a10 \n        val a11 = a10 +\
    \ b10\n        val b11 = b11 + c10 \n        val c11 = c11 + a11 \n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11 \n        val c12 = c12 + a12 \n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12 \n        val c13 =\
    \ c13 + a13 \n        val a14 = a13 + b13\n        val b14 = b14 + c13 \n    \
    \    val c14 = c14 + a14 \n        val a15 = a14 + b14\n        val b15 = b15\
    \ + c14 \n        val c15 = c15 + a15 \n        val a16 = a15 + b15\n        val\
    \ b16 = b16 + c15 \n        val c16 = c16 + a16 \n        val a17 = a16 + b16\n\
    \        val b17 = b17 + c16 \n        val c17 = c17 + a17 \n        val a18 =\
    \ a17 + b17\n        val b18 = b18 + c17 \n        val c18 = c18 + a18 \n    \
    \    val a19 = a18 + b18\n        val b19 = b19 + c18 \n        val c19 = c19\
    \ + a19 \n        val a20 = a19\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcka4ed46.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcka4ed46.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcka4ed46.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcka4ed46.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcka4ed46.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcka4ed46.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val sides = (a, b, c) match {\n            case (a, b, c) => a + b +\
    \ c\n            case _ => -1\n        }\n        if (sides > 0) {\n         \
    \   val area1 = (a + b) / 2\n            val area2 = (a + c) / 2\n           \
    \ val area3 = (b + c) / 2\n            val area4 = (a * b) / 2\n            val\
    \ area5 = (a * c) / 2\n            val area6 = (b * c) / 2\n            val area7\
    \ = area1 + area2 + area3\n            val area8 = area4 + area5 + area6\n   \
    \         val area9 = area7 + area8\n            val area10 = area9 + area1\n\
    \            val area11 = area10 + area2\n            val area12 = area11 + area3\n\
    \            val area13 = area12 + area4\n            val area14 = area13 + area5\n\
    \            val area15 = area14 + area6\n            val area16 = area15 + area7\n\
    \            val area17 = area16 + area8\n            val area18 = area17 + area9\n\
    \            val area19 = area18 + area10\n            val area20 = area19 + area11\n\
    \            val area21 = area20 + area12\n            val area22 = area21 + area13\n\
    \            val area23 = area22 + area14\n            val area24 = area23 + area15\n\
    \            val area25 = area24 + area16\n            val area26 = area25 + area17\n\
    \            val area27 = area26 + area18\n            val area28 = area27 + area19\n\
    \            val area29 = area28 + area20\n            val area30 = area29 + area21\n\
    \            val area31 = area30 + area22\n            val area32 = area31 + area23\n\
    \            val area33 = area32 + area24\n            val area34 = area33 + area25\n\
    \            val area35 = area34 + area26\n            val area36 = area35 + area27\n\
    \            val area37 = area36 + area28\n            val area38 = area37 + area29\n\
    \            val area39 = area38 + area30\n            val area40 = area39 + area31\n\
    \            val area41 = area40 + area32\n            val area42 = area41 + area33\n\
    \            val area43 = area42 + area34\n            val area44 = area43 + area35\n\
    \            val area\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptuuwfnei.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptuuwfnei.scala:80:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m80 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmptuuwfnei.scala:79:1 ---------------------\e[0m\e[0m\n\
    \e[31m79 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmptuuwfnei.scala:67:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m67 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659805079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = a + b\n        val\
    \ bc = b + c\n        val ac = a + c\n        val abc = ab + bc\n        val abcc\
    \ = abc + ac\n        val abcc = abc + bc\n        val abcca = abcc + ac\n   \
    \     val abccaa = abcca * 0.5\n        val abccaa2 = abccaa * 0.5\n        val\
    \ abccaa3 = abccaa * 0.5\n        val abccaa4 = abccaa * 0.5\n        val abccaa5\
    \ = abccaa * 0.5\n        val abccaa6 = abccaa * 0.5\n        val abccaa7 = abccaa\
    \ * 0.5\n        val abccaa8 = abccaa * 0.5\n        val abccaa9 = abccaa * 0.5\n\
    \        val abccaa10 = abccaa * 0.5\n        val abccaa11 = abccaa * 0.5\n  \
    \      val abccaa12 = abccaa * 0.5\n        val abccaa13 = abccaa * 0.5\n    \
    \    val abccaa14 = abccaa * 0.5\n        val abccaa15 = abccaa * 0.5\n      \
    \  val abccaa16 = abccaa * 0.5\n        val abccaa17 = abccaa * 0.5\n        val\
    \ abccaa18 = abccaa * 0.5\n        val abccaa19 = abccaa * 0.5\n        val abccaa20\
    \ = abccaa * 0.5\n        val abccaa21 = abccaa * 0.5\n        val abccaa22 =\
    \ abccaa * 0.5\n        val abccaa23 = abccaa * 0.5\n        val abccaa24 = abccaa\
    \ * 0.5\n        val abccaa25 = abccaa * 0.5\n        val abccaa26 = abccaa *\
    \ 0.5\n        val abccaa27 = abccaa * 0.5\n        val abccaa28 = abccaa * 0.5\n\
    \        val abccaa29 = abccaa * 0.5\n        val abccaa30 = abccaa * 0.5\n  \
    \      val abccaa31 = abccaa * 0.5\n        val abccaa32 = abccaa * 0.5\n    \
    \    val abccaa33 = abccaa * 0.5\n        val abccaa34 = abccaa * 0.5\n      \
    \  val abccaa35 = abccaa * 0.5\n        val abccaa36 = abccaa * 0.5\n        val\
    \ abcca\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpndly9k1u.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpndly9k1u.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mabcc\e[0m = abc + bc\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mabcc is already defined as \e[33mvalue\e[0m \e[35mabcc\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpndly9k1u.scala:59:5 ---------------------\e[0m\e[0m\n\e[31m59\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val b2 = b + a\n        val c1 =\
    \ c + a\n        val c2 = c + b\n        val d1 = b2 - b1\n        val d2 = c2\
    \ - c1\n        val d3 = a2 - a1\n        val area = if (d1 > 0 && d2 > 0 && d3\
    \ > 0) (d1 * d2 * d3) / Math.sqrt(d1 * d2 + d3 * d3) else if (d1 > 0 && d2 > 0\
    \ && d3 < 0) (d1 * d2 * d3) / Math.sqrt(d1 * d2 + d3 * d3) else if (d1 > 0 &&\
    \ d2 < 0 && d3 < 0) (d1 * d2 * d3) / Math.sqrt(d1 * d2 + d3 * d3) else if (d1\
    \ < 0 && d2 > 0 && d3 < 0) (d1 * d2 * d3) / Math.sqrt(d1 * d2 + d3 * d3) else\
    \ if (d1 < 0 && d2 < 0 && d3 > 0) (d1 * d2 * d3) / Math.sqrt(d1 * d2 + d3 * d3)\
    \ else if (d1 < 0 && d2 < 0 && d3 < 0) (d1 * d2 * d3) / Math.sqrt(d1 * d2 + d3\
    \ * d3) else if (d1 > 0 && d2 < 0 && d3 > 0) (d1 * d2 * d3) / Math.sqrt(d1 * d2\
    \ + d3 * d3) else if (d1 > 0 && d2 < 0 && d3 < 0) (d1 * d2 * d3) / Math.sqrt(d1\
    \ * d2 + d3 * d3) else if (d1 < 0 && d2 < 0 && d3 > 0) (d1 * d2 * d3) / Math.sqrt(d1\
    \ * d2 + d3 * d3) else if (d1 < 0 && d2 < 0 && d3 < 0) (d1 * d2 * d3) / Math.sqrt(d1\
    \ * d2 + d3 * d3) else if (d1 > 0 && d2 < 0 && d3 > 0) (d1 * d2 * d3) / Math.sqrt(d1\
    \ * d2 + d3 * d3) else if (d1 > 0 && d2 < 0 && d3 < 0) (d1 * d2 * d3) / Math.sqrt(d1\
    \ * d2 + d3 * d3) else if (d1 < 0 && d2 < 0 && d3 > 0) (d1 * d2 * d3) / Math.sqrt(d1\
    \ * d2 + d3 * d3) else if (d1 < 0 && d2 < 0 && d3 < 0) (d1 * d2 * d3) / Math.sqrt(d1\
    \ * d2 + d3 * d3) else if (d1 > 0 && d2 < 0 && d3 > 0) (d1 * d2 * d3) / Math.sqrt(d1\
    \ * d2 + d3 * d3) else if (d1 > 0 && d2 < 0 && d3 < 0) (d1 * d2 * d3) / Math.sqrt(d1\
    \ * d2 + d3 * d3) else if (d1 < 0 && d2 < 0 && d3 > 0) (d1 * d2 * d3) / Math.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4egf386v.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4egf386v.scala:25:5 ---------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val side5 = math.sqrt(a * a + b * b)\n \
    \       val side6 = math.sqrt(c * c + d * d)\n        val side7 = math.sqrt(a\
    \ * a + c * c)\n        val side8 = math.sqrt(b * b + d * d)\n        val side9\
    \ = math.sqrt(a * a + b * b)\n        val side10 = math.sqrt(c * c + d * d)\n\
    \        val side11 = math.sqrt(a * a + c * c)\n        val side12 = math.sqrt(b\
    \ * b + d * d)\n        val side13 = math.sqrt(a * a + c * c)\n        val side14\
    \ = math.sqrt(b * b + d * d)\n        val side15 = math.sqrt(a * a + c * c)\n\
    \        val side16 = math.sqrt(b * b + d * d)\n        val side17 = math.sqrt(a\
    \ * a + c * c)\n        val side18 = math.sqrt(b * b + d * d)\n        val side19\
    \ = math.sqrt(a * a + c * c)\n        val side20 = math.sqrt(b * b + d * d)\n\
    \        val side21 = math.sqrt(a * a + c * c)\n        val side22 = math.sqrt(b\
    \ * b + d * d)\n        val side23 = math.sqrt(a * a + c * c)\n        val side24\
    \ = math.sqrt(b * b + d * d)\n        val side25 = math.sqrt(a * a + c * c)\n\
    \        val side26 = math.sqrt(b * b + d * d)\n        val side27 = math.sqrt(a\
    \ * a + c * c)\n        val side28 = math.sqrt(b * b + d * d)\n        val side29\
    \ = math.sqrt(a * a + c * c)\n        val side30 = math.sqrt(b * b + d * d)\n\
    \        val side31 = math.sqrt(a * a + c * c)\n        val side32 = math.sqrt(b\
    \ * b + d * d)\n        val side33 = math.sqrt(a * a + c * c)\n        val side34\
    \ = math.sqrt(b * b + d * d)\n        val side35 = math.sqrt(a * a + c * c)\n\
    \        val side36 = math.sqrt(b * b + d * d)\n        val side37 = math.sqrt(a\
    \ * a + c * c)\n        val side38 = math.sqrt(b * b + d * d)\n        val side39\
    \ = math.sqrt(a * a + c * c)\n        val side40 = math.sqrt(b * b + d * d)\n\
    \        val side41 = math.sqrt(a * a + c * c)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmqexom7.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmqexom7.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmqexom7.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mside6\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmqexom7.scala:23:38 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mside8\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmqexom7.scala:25:39 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mside10\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                       ^\e\
    [0m\n\e[31m   |\e[0m                                       Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmqexom7.scala:27:39 ------------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val side1 = math.sqrt(a * a\
    \ + b * b)\n        val side2 = math.sqrt(c * c + d * d)\n        val side3 =\
    \ math.sqrt(a * a + c * c)\n        val side4 = math.sqrt(b * b + d * d)\n   \
    \     val area = (side1 + side2 + side3) / 2.0\n        if (side1 + side2 > side3)\
    \ {\n            area\n        } else {\n            -1\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ktkgiu0.scala:16:38 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ktkgiu0.scala:18:38 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9ktkgiu0.scala:21:12 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            area\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (area : Double)\n\e[31m   |\e[0m   \
    \         Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2.0\n        val\
    \ b1 = b / 2.0\n        val c1 = c / 2.0\n        val a2 = a1 + b1\n        val\
    \ b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val\
    \ b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val\
    \ b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val\
    \ b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val\
    \ b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val\
    \ b7 = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val\
    \ b8 = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n        val\
    \ b9 = b8 + c8\n        val c9 = c8 + a8\n        (a9 * b9) - (a9 * c9) + (a9\
    \ * b8) + (a9 * b7) - (a9 * b6) + (a9 * b5) - (a9 * b4) + (a9 * b3) - (a9 * b2)\
    \ + (a9 * b1) - (a9 * b0) + (a9 * c9)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkcwk79jh.scala:42:134 -----------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        (a9 * b9) - (a9 * c9) + (a9 * b8) + (a9 * b7)\
    \ - (a9 * b6) + (a9 * b5) - (a9 * b4) + (a9 * b3) - (a9 * b2) + (a9 * b1) - (a9\
    \ * b0) + (a9 * c9)\n\e[31m\e[31m   |\e[0m                                   \
    \                                                                            \
    \                       ^^\e[0m\n\e[31m   |\e[0m                             \
    \                              Not found: b0\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n        val b9\
    \ = b8 + c8\n        val c9 = c8 + a8\n        val a10 = a9 + b9\n        val\
    \ b10 = b9 + c9\n        val c10 = c9 + a9\n        val a11 = a10 + b10\n    \
    \    val b11 = b10 + c10\n        val c11 = c10 + a10\n        val a12 = a11 +\
    \ b11\n        val b12 = b11 + c11\n        val c12 = c11 + a11\n        val a13\
    \ = a12 + b12\n        val b13 = b12 + c12\n        val c13 = c12 + a12\n    \
    \    val a14 = a13 + b13\n        val b14 = b13 + c13\n        val c14 = c13 +\
    \ a13\n        val a15 = a14 + b14\n        val b15 = b14 + c14\n        val c15\
    \ = c14 + a14\n        val a16 = a15 + b15\n        val b16 = b15 + c15\n    \
    \    val c16 = c15 + a15\n        val a17 = a16 + b16\n        val b17 = b16 +\
    \ c16\n        val c17 = c16 + a16\n        val a18 = a17 + b17\n        val b18\
    \ = b17 + c17\n        val c18 = c17 + a17\n        val a19 = a18 + b18\n    \
    \    val b19 = b18 + c18\n        val c19 = c18 + a18\n        val a20 = a19 +\
    \ b19\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyp524kz0.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b2 = b + c\n        val a3 = a1 + a2\n        val b3\
    \ = b1 + b2\n        val c3 = b2 + a3\n        val a4 = a1 + a3\n        val b4\
    \ = b1 + b4\n        val c4 = b2 + b4\n        val a5 = a2 + b4\n        val b5\
    \ = b2 + a5\n        val c5 = a3 + b5\n        val a6 = a3 + b5\n        val b6\
    \ = b3 + a5\n        val c6 = c3 + b5\n        val a7 = a3 + b6\n        val b7\
    \ = b3 + b6\n        val c7 = c3 + b6\n        val a8 = a4 + b6\n        val b8\
    \ = b4 + a7\n        val c8 = c4 + a7\n        val a9 = a4 + b7\n        val b9\
    \ = b4 + b8\n        val c9 = c4 + b8\n        val a10 = a5 + b8\n        val\
    \ b10 = b5 + a9\n        val c10 = c5 + a9\n        val a11 = a5 + b9\n      \
    \  val b11 = b5 + c10\n        val c11 = c5 + c10\n        val a12 = a6 + b9\n\
    \        val b12 = b6 + c11\n        val c12 = c6 + c11\n        val a13 = a6\
    \ + b11\n        val b13 = b6 + c12\n        val c13 = c6 + c12\n        val a14\
    \ = a7 + b11\n        val b14 = b7 + c13\n        val c14 = c7 + c13\n       \
    \ val a15 = a7 + b12\n        val b15 = b7 + c14\n        val c15 = c7 + c14\n\
    \        val a16 = a8 + b12\n        val b16 = b8 + c15\n        val c16 = c8\
    \ + c15\n        val a17 = a8 + b13\n        val b17 = b8 + c16\n        val c17\
    \ = c8 + c16\n        val a18 = a9 + b13\n        val b18 = b9 + c17\n       \
    \ val c18 = c9 + c17\n        val a19 = a9 + b14\n        val b19 = b9 + c18\n\
    \        val c19 = c9 + c18\n        val a20 = a10 + b14\n        val b20 = b10\
    \ + c19\n        val c20 = c10 + c19\n        val a21 = a\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_qw3tgl_.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mb3\e[0m = b1 + b2\n\e[31m\e\
    [31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_qw3tgl_.scala:22:17\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mb4\e[0m = b1 + b4\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_qw3tgl_.scala:73:5 ---------------------\e[0m\e\
    [0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805080
