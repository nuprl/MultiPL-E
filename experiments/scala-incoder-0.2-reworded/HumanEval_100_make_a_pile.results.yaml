language: scala
name: HumanEval_100_make_a_pile
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        val odd = if (n % 2 ==\
    \ 0) n / 2 else (n / 2) + 1\n        val even = n / 2\n        result += odd.toLong\n\
    \        result += even.toLong\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22674.log

    '
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        val odd = if (n % 2 ==\
    \ 0) n / 2 else n / 2 + 1\n        val even = n / 2\n        result += odd.toLong\n\
    \        result += even.toLong\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22720.log

    '
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0)\
    \ n / 2 else n / 2 + 1\n        val even = n / 2\n        levels += n\n      \
    \  levels += odd\n        levels += even\n        levels.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22707.log

    '
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile = mutable.ListBuffer[Long]()\n        pile.append(n)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22945.log

    '
  timestamp: 1659795010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) stones.last + 1 else stones.last + 1\n        stones\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22839.log

    '
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val list = mutable.ListBuffer[Long]()\n        var i = 0\n        while (i\
    \ < n) {\n            list += (i+1).toLong\n            i += 2\n        }\n  \
    \      list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22841.log

    '
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        val odd = n.toInt\n       \
    \ val even = n.toInt\n        val nextOdd = odd + 1\n        val nextEven = even\
    \ + 1\n        if (odd % 2 == 0) {\n            nums += nextOdd\n        }\n \
    \       if (even % 2 == 0) {\n            nums += nextEven\n        }\n      \
    \  nums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22949.log

    '
  timestamp: 1659795010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0) n\
    \ / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n\n      \
    \  for (i<- 1 to even) {\n            nums += i.toLong\n        }\n        for\
    \ (i<- 1 to odd) {\n            nums += i.toLong\n        }\n        nums.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22812.log

    '
  timestamp: 1659795010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0)\
    \ n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n\
    \        levels += n\n        while (levels.size < n) {\n            levels +=\
    \ odd\n            levels += even\n        }\n        levels.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5q_87h4k.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer.empty[Long]\n        var level = 0\n     \
    \   while(level < n) {\n            levels += level\n            level += 1\n\
    \        }\n        levels.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22961.log

    '
  timestamp: 1659795010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        var currentLevel = n.toLong\n\
    \        var nextLevel = n.toLong\n        while (currentLevel > 0) {\n      \
    \      if (currentLevel % 2 == 0) {\n                nextLevel = nextLevel + 2\n\
    \            } else {\n                nextLevel = nextLevel + 1\n           \
    \ }\n            levels += nextLevel\n            currentLevel = currentLevel\
    \ - 1\n            nextLevel = n.toLong\n        }\n        levels.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5c6rn8pk.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n % 2 == 0 ? n : n % 2 == 1 ? n + 1 : n + 1\n        stones.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22933.log

    '
  timestamp: 1659795010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        var i = 0\n        while (i\
    \ < n) {\n            if (n % 2 == 0) {\n                nums += n.toLong\n  \
    \              i += 2\n            } else {\n                nums += n.toLong\n\
    \                i += 1\n            }\n        }\n        nums.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5fhutma8.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ArrayBuffer.empty[Long]\n        val odd = n.toInt\n  \
    \      val even = n.toInt\n        val evenToOdd = if (even % 2 == 0) even - 1\
    \ else even\n        val oddToEven = if (odd % 2 == 0) odd - 1 else odd\n    \
    \    val evenToOddToEven = if (even % 2 == 0) even - 1 else even\n        val\
    \ oddToEvenToOdd = if (odd % 2 == 0) odd - 1 else odd\n        val evenToOddToEvenToOdd\
    \ = if (even % 2 == 0) even - 1 else even\n        val oddToEvenToOddToEven =\
    \ if (odd % 2 == 0) odd - 1 else odd\n        val evenToOddToEvenToOddToOdd =\
    \ if (even % 2 == 0) even - 1 else even\n        val oddToEvenToOddToEvenToOddToOdd\
    \ = if (odd % 2 == 0) odd - 1 else odd\n        val evenToOddToEvenToOddToOddToEven\
    \ = if (even % 2 == 0) even - 1 else even\n        val oddToEvenToOddToEvenToOddToEvenToOdd\
    \ = if (odd % 2 == 0) odd - 1 else odd\n        val evenToOddToEvenToOddToOddToEvenToOddToOdd\
    \ = if (even % 2 == 0) even - 1 else even\n        val oddToEvenToOddToEvenToOddToEvenToOddToOddToEven\
    \ = if (odd % 2 == 0) odd - 1 else odd\n        val evenToOddToEvenToOddToOddToEvenToOddToOddToEvenToOdd\
    \ = if (even % 2 == 0) even - 1 else odd\n        val oddToEvenToOddToEvenToOddToEvenToOddToOddToEvenToOddToOdd\
    \ = if (odd % 2 == 0) odd - 1 else odd\n        val evenToOddToEvenToOddToOddToEvenToOddToOddToEvenToOddToOddToEven\
    \ = if (even % 2 == 0) even - 1 else odd\n        val oddToEvenToOddToEvenToOddToEvenToOddToOddToEvenToOddToOddToEvenToOdd\
    \ = if (odd % 2 == 0) odd - 1 else odd\n        val evenToOddToEvenToOddToOddToEvenToOddToOddToEvenToOddTo\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0mfx6vhm.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0mfx6vhm.scala:15:19\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mnums\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0mfx6vhm.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer.empty[Long]\n        stones += n\n       \
    \ stones += if (n % 2 == 0) (n / 2l) else (n / 2l) + 1\n        stones\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphczwx034.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) (n / \e[31m2l\e[0m) \e[33melse\e[0m (n / \e[31m2l\e[0m) + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphczwx034.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n / 2 else n / 2 + 1\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22986.log

    '
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val odd = n.toInt\n     \
    \   val even = n.toInt / 2\n        levels += odd\n        levels += even\n  \
    \      levels.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid23010.log

    '
  timestamp: 1659795010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n else n + 2\n        stones\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid23222.log

    '
  timestamp: 1659795010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        var num = 0\n        while(n\
    \ > 0) {\n            num += 1\n            n -= 1\n        }\n        nums +=\
    \ num\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6k3o5v5p.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp6k3o5v5p.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659795042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer.empty[Long]\n        val odd = if (n % 2 ==\
    \ 0) n / 2 else n / 2 + 1\n        val even = n / 2\n        val nextOdd = if\
    \ (odd % 2 == 0) odd / 2 else odd / 2 + 1\n        val nextEven = if (even % 2\
    \ == 0) even / 2 else even / 2 + 1\n        val nextOddEven = if (odd % 2 == 0\
    \ && even % 2 == 0) odd / 2 else if (even % 2 == 0) even / 2 else odd / 2 + 1\n\
    \        val nextOddEvenOdd = if (odd % 2 == 0 && even % 2 == 0) odd / 2 else\
    \ if (even % 2 == 0) even / 2 else odd / 2 + 1\n        val nextOddEvenOddEven\
    \ = if (odd % 2 == 0 && even % 2 == 0) odd / 2 else if (even % 2 == 0) even /\
    \ 2 else odd / 2 + 1\n        val nextOddEvenOddEvenOdd = if (odd % 2 == 0 &&\
    \ even % 2 == 0) odd / 2 else if (even % 2 == 0) even / 2 else odd / 2 + 1\n \
    \       val nextOddEvenOddEvenOddEven = if (odd % 2 == 0 && even % 2 == 0) odd\
    \ / 2 else if (even % 2 == 0) even / 2 else odd / 2 + 1\n        val nextOddEvenOddEvenOddEvenOdd\
    \ = if (odd % 2 == 0 && even % 2 == 0) odd / 2 else if (even % 2 == 0) even /\
    \ 2 else odd / 2 + 1\n        val nextOddEvenOddEvenOddEvenOddEven = if (odd %\
    \ 2 == 0 && even % 2 == 0) odd / 2 else if (even % 2 == 0) even / 2 else odd /\
    \ 2 + 1\n        val nextOddEvenOddEvenOddEvenOddEvenOdd = if (odd % 2 == 0 &&\
    \ even % 2 == 0) odd / 2 else if (even % 2 == 0) even / 2 else odd / 2 + 1\n \
    \       val nextOddEvenOddEvenOddEvenOddEvenOddEven = if (odd % 2 == 0 && even\
    \ % 2 == 0) odd / 2 else if (even % 2 == 0) even / 2 else odd / 2 + 1\n      \
    \  val nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = if (odd % 2 == 0 && even %\
    \ 2 == 0) odd / 2 else if (even % 2 == 0) even / 2 else odd / 2 + 1\n        val\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = if (odd % 2 == 0 && even %\
    \ 2 == 0) odd / 2 else if (even % 2 == 0) even / 2 else odd / 2 + 1\n        \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2xcxqsnr.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2xcxqsnr.scala:32:5 ---------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer(n)\n        stones.takeWhile(_ % 2 == 0).foreach(stones\
    \ += _ + 1)\n        stones.takeWhile(_ % 2 == 1).foreach(stones += _ + 1)\n \
    \       stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lnpcb7a.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) stones.last.last else stones.last.last + 1\n        stones\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpu4_pgq_5.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) stones.last.last \e[33melse\e[0m stones.last.last + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpu4_pgq_5.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n / 2 else n / 2 + 1\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22986.log

    '
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile : List[Long] = List(0l)\n        var i = 0\n        while (i < n)\
    \ {\n            pile.append(n(i))\n            i += 2\n        }\n        pile\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_zfjav8n.scala:18:17 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            pile.append(n(i))\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue append is not a member of\
    \ List[Long] - did you mean pile.appended?\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmp_zfjav8n.scala:18:24 -----------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            pile.append(n(i))\n\e[31m\e[31m   |\e[0m                 \
    \       ^\e[0m\n\e[31m   |\e[0m                        \e[33mparameter\e[0m \e\
    [35mn\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer(n.toLong)\n        val odd = if (n % 2 ==\
    \ 0) n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n\
    \        stones += odd.toLong\n        stones += even.toLong\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuc2oxhu_.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n.toLong)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0) n\
    \ / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n  \
    \      for (i <- 0 until n) {\n            if (i % 2 == 0) {\n               \
    \ nums += even\n            } else {\n                nums += odd\n          \
    \  }\n        }\n        nums.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk17179rc.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpk17179rc.scala:18:26 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        val even = if (n % 2\
    \ == 0) n / 2 else 3 * n + 1\n        val odd = if (n % 2 == 1) n / 2 else 3 *\
    \ n + 1\n        result.add(odd)\n        result.add(even)\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1r_54xm0.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 3\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodkzt9bl.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        var nextLevel = n.toLong\n\
    \        var nextLevelCount = 1\n        while (nextLevel > 0) {\n           \
    \ if (nextLevel % 2 == 0) {\n                nextLevelCount += 1\n           \
    \ } else {\n                nextLevelCount += 2\n            }\n            nextLevel\
    \ = nextLevel / 2\n            levels += nextLevelCount\n        }\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ad1mio4.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        val odd = if (n % 2 ==\
    \ 0) n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n\
    \        result.add(odd)\n        result.add(even)\n        result.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbjn7d86_.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        var i = 0\n        while (i\
    \ < n) {\n            if (n % 2 == 0) {\n                nums += n.toLong\n  \
    \              i += 2\n            } else {\n                nums += n.toLong\n\
    \                i += 1\n            }\n        }\n        nums.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5fhutma8.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0) n\
    \ / 2 else n / 2 + 1\n        val even = n / 2\n        for (i<- 1 to odd) nums\
    \ += i.toLong\n        for (i<- 1 to even) nums += i.toLong\n        nums.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphmv6uz55.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmphmv6uz55.scala:18:22 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i<- \e[31m1\e[0m to odd) nums\
    \ += i.toLong\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e\
    [0m                      Found:    (odd : Long)\n\e[31m   |\e[0m             \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphmv6uz55.scala:19:22\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i<- \e\
    [31m1\e[0m to even) nums += i.toLong\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                      Found:    (even : Long)\n\
    \e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 3\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodkzt9bl.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 3\n        stones += n / 4\n        stones +=\
    \ n / 5\n        stones += n / 6\n        stones += n / 7\n        stones += n\
    \ / 8\n        stones += n / 9\n        stones += n / 10\n        stones += n\
    \ / 11\n        stones += n / 12\n        stones += n / 13\n        stones +=\
    \ n / 14\n        stones += n / 15\n        stones += n / 16\n        stones +=\
    \ n / 17\n        stones += n / 18\n        stones += n / 19\n        stones +=\
    \ n / 20\n        stones += n / 21\n        stones += n / 22\n        stones +=\
    \ n / 23\n        stones += n / 24\n        stones += n / 25\n        stones +=\
    \ n / 26\n        stones += n / 27\n        stones += n / 28\n        stones +=\
    \ n / 29\n        stones += n / 30\n        stones += n / 31\n        stones +=\
    \ n / 32\n        stones += n / 33\n        stones += n / 34\n        stones +=\
    \ n / 35\n        stones += n / 36\n        stones += n / 37\n        stones +=\
    \ n / 38\n        stones += n / 39\n        stones += n / 40\n        stones +=\
    \ n / 41\n        stones += n / 42\n        stones += n / 43\n        stones +=\
    \ n / 44\n        stones += n / 45\n        stones += n / 46\n        stones +=\
    \ n / 47\n        stones += n / 48\n        stones += n / 49\n        stones +=\
    \ n / 50\n        stones += n / 51\n        stones += n / 52\n        stones +=\
    \ n / 53\n        stones += n / 54\n        stones += n / 55\n        stones +=\
    \ n / 56\n        stones += n / 57\n        stones += n / 58\n        stones +=\
    \ n / 59\n        stones += n / 60\n        stones += n / 61\n        stones +=\
    \ n / 62\n        stones += n / 63\n        stones += n / 64\n        stones +=\
    \ n / 65\n        stones += n / 66\n        stones += n / 67\n        stones +=\
    \ n / 68\n        stones += n / 69\n        stones += n / 70\n        stones +=\
    \ n / 71\n        stones += n \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5k09vypt.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        var nextLevel = n.toLong\n\
    \        var nextLevelCount = stones.size\n        while (nextLevelCount > 0)\
    \ {\n            nextLevelCount -= 1\n            nextLevel = nextLevel % 2 ==\
    \ 0 ? nextLevel + 1 : nextLevel\n            stones += nextLevel.toLong\n    \
    \    }\n        stones.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy1v56x5z.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpy1v56x5z.scala:20:61 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            nextLevel = nextLevel % \e[31m2\e[0m == \e\
    [31m0\e[0m ? nextLevel + \e[31m1\e[0m : \e[35mnextLevel\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                             ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                               Not found: type\
    \ nextLevel\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy1v56x5z.scala:20:43\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            nextLevel = nextLevel\
    \ % \e[31m2\e[0m == \e[31m0\e[0m ? nextLevel + \e[31m1\e[0m : \e[35mnextLevel\e\
    [0m\n\e[31m\e[31m   |\e[0m                                         ^^^\e[0m\n\e\
    [31m   |\e[0m                                         value ? is not a member\
    \ of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1659795054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile = mutable.ListBuffer.empty[Long]\n        pile.append(n)\n      \
    \  pile.append(n / 2)\n        pile.append(n / 3)\n        pile.append(n / 4)\n\
    \        pile.append(n / 5)\n        pile.append(n / 6)\n        pile.append(n\
    \ / 7)\n        pile.append(n / 8)\n        pile.append(n / 9)\n        pile.append(n\
    \ / 10)\n        pile.append(n / 11)\n        pile.append(n / 12)\n        pile.append(n\
    \ / 13)\n        pile.append(n / 14)\n        pile.append(n / 15)\n        pile.append(n\
    \ / 16)\n        pile.append(n / 17)\n        pile.append(n / 18)\n        pile.append(n\
    \ / 19)\n        pile.append(n / 20)\n        pile.append(n / 21)\n        pile.append(n\
    \ / 22)\n        pile.append(n / 23)\n        pile.append(n / 24)\n        pile.append(n\
    \ / 25)\n        pile.append(n / 26)\n        pile.append(n / 27)\n        pile.append(n\
    \ / 28)\n        pile.append(n / 29)\n        pile.append(n / 30)\n        pile.append(n\
    \ / 31)\n        pile.append(n / 32)\n        pile.append(n / 33)\n        pile.append(n\
    \ / 34)\n        pile.append(n / 35)\n        pile.append(n / 36)\n        pile.append(n\
    \ / 37)\n        pile.append(n / 38)\n        pile.append(n / 39)\n        pile.append(n\
    \ / 40)\n        pile.append(n / 41)\n        pile.append(n / 42)\n        pile.append(n\
    \ / 43)\n        pile.append(n / 44)\n        pile.append(n / 45)\n        pile.append(n\
    \ / 46)\n        pile.append(n / 47)\n        pile.append(n / 48)\n        pile.append(n\
    \ / 49)\n        pile.append(n / 50)\n        pile.append(n / 51)\n        pile.append(n\
    \ / 52)\n        pile.append(n / 53)\n        pile.append(n / 54)\n        pile.append(n\
    \ / 55)\n        pile.append(n / 56)\n        pile.append(n / 57)\n        pile.append(n\
    \ / 58)\n        pile.append(n / \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsveoweb6.scala:74:23 ---------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m        pile.append(n / \n\e[31m\e[31m   |\e[0m     \
    \                  ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsveoweb6.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0) n\
    \ / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n  \
    \      for (i = 1 until n) {\n            if (i % 2 == 0) {\n                nums\
    \ += even\n            } else {\n                nums += odd\n            }\n\
    \        }\n        nums.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp577chuj_.scala:18:15 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i = \e[31m1\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               ')'\
    \ expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp577chuj_.scala:18:28\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m\
    \ (i = \e[31m1\e[0m until n) {\n\e[31m\e[31m   |\e[0m                        \
    \    ^\e[0m\n\e[31m   |\e[0m                            '<-' expected, but '{'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp577chuj_.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '<-' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp577chuj_.scala:15:19\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mnums\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp577chuj_.scala:24:9\
    \ -------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0m         value foreach is not a member\
    \ of Null\n5 errors found\n"
  stdout: ''
  timestamp: 1659795053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile = mutable.ListBuffer[Long]()\n        pile.append(n)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.append(n.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22945.log

    '
  timestamp: 1659795010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n % 2 == 0 ? n + 1 : n\n        stones\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ty5pv0g.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_ty5pv0g.scala:17:39 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ n + \e[31m1\e[0m : \e[35mn\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \    Not found: type n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0)\
    \ n / 2 else (n / 2) - 1\n        val even = if (n % 2 == 0) n / 2 else (n / 2)\n\
    \        levels += n\n        while (levels.size < n) {\n            levels +=\
    \ odd\n            levels += even\n        }\n        levels.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbel4ah71.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val list = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0) n\
    \ / 2 else (n / 2) + 1\n        val even = if (n % 2 == 0) n / 2 else (n / 2)\n\
    \        list += odd.toLong\n        list += even.toLong\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0997dzug.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile = mutable.ArrayBuffer.empty[Long]\n        pile.append(n.toLong)\n\
    \        pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo544_e4j.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer.empty[Long]\n        stones += n\n       \
    \ stones += if (n % 2 == 0) stones.last + 1 else stones.last + 1\n        stones\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpw3crk_p9.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) stones.last + \e[31m1\e[0m \e[33melse\e[0m stones.last + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpw3crk_p9.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile = mutable.ListBuffer.empty[Long]\n        pile.append(n)\n      \
    \  val odd = if (n % 2 == 0) n / 2 else 3 * n + 1\n        val even = if (n %\
    \ 2 == 0) n / 2 else 3 * n\n        pile.append(odd)\n        pile.append(even)\n\
    \        pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4lz6u9po.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        val nextLevel = if (n\
    \ % 2 == 0) n / 2 else 3 * n + 1\n        for (i <- 0 until nextLevel) {\n   \
    \         result += i.toLong\n        }\n        return result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp95_gej_1.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp95_gej_1.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until nextLevel) {\n\e[31m\e[31m   |\e[0m                     \
    \     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    (nextLevel\
    \ : Long)\n\e[31m   |\e[0m                          Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        var nextLevel = n.toLong\n\
    \        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n    \
    \            levels += nextLevel\n                nextLevel = nextLevel / 2\n\
    \            } else {\n                nextLevel = nextLevel / 2\n           \
    \     levels += nextLevel\n            }\n        }\n        levels.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmkcdb2s.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 3\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodkzt9bl.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) stones.last + 1 else stones.last + 1\n        stones\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22839.log

    '
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n / 2 else n * 3\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyy5jg3q2.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n / \e[31m2\e[0m \e[33melse\e[0m n * \e[31m3\e[0m\n\e[31m\e[31m\
    \   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m                  expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpyy5jg3q2.scala:15:21 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        var nextLevel = n.toInt\n\
    \        var nextLevelStones = nextLevel.toLong\n        while(nextLevel > 0)\
    \ {\n            stones += nextLevelStones\n            nextLevelStones = nextLevel.toLong\n\
    \            nextLevel = nextLevel.toInt / 2\n        }\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8trq4viq.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) (n / 2l) else (3 * n + 1l)\n        stones\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpru_sm4xs.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) (n / \e[31m2l\e[0m) \e[33melse\e[0m (\e[31m3\e[0m * n + \e[31m1l\e\
    [0m)\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m        \
    \          expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpru_sm4xs.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n / 2 else n / 2 + 1\n        stones.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzyz05ir_.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n / \e[31m2\e[0m \e[33melse\e[0m n / \e[31m2\e[0m + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzyz05ir_.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile = mutable.ListBuffer[Long]()\n        var nextLevel = n.toLong\n\
    \        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n    \
    \            pile.append(nextLevel.toLong)\n            } else {\n           \
    \     pile.append(nextLevel.toLong + 1)\n            }\n            nextLevel\
    \ = nextLevel - 1\n        }\n        pile.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7g415lwo.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n / 2 else n / 2 + 1\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22986.log

    '
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0) n\
    \ / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n  \
    \      for (i <- 0 until n) {\n            if (i % 2 == 0) {\n               \
    \ nums += even\n            } else {\n                nums += odd\n          \
    \  }\n        }\n        nums.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk17179rc.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpk17179rc.scala:18:26 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        var num = 0\n        while(n\
    \ > 0) {\n            num += 1\n            n -= 1\n        }\n        nums ++=\
    \ num\n        nums.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqjhi1pl.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpqqjhi1pl.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659795073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        var nextLevel = n.toLong\n\
    \        var nextLevelCount = 0\n        while (nextLevel > 0) {\n           \
    \ nextLevelCount += 1\n            nextLevel = nextLevel.toLong % 2 == 0 ? nextLevel.toLong\
    \ + 1 : nextLevel.toLong\n            stones += nextLevelCount\n        }\n  \
    \      stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1vrtqf6x.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp1vrtqf6x.scala:20:85 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            nextLevel = nextLevel.toLong % \e[31m2\e\
    [0m == \e[31m0\e[0m ? nextLevel.toLong + \e[31m1\e[0m : nextLevel.toLong\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \          type toLong is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp1vrtqf6x.scala:20:50 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            nextLevel = nextLevel.toLong % \e[31m2\e[0m == \e[31m0\e[0m\
    \ ? nextLevel.toLong + \e[31m1\e[0m : nextLevel.toLong\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^\e[0m\n\e[31m   |\e[0m   \
    \                                       value ? is not a member of Int\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n % 2 == 0 ? stones.head + 1 : stones.head + 1\n        stones\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdwbuvhvt.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdwbuvhvt.scala:17:61 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ stones.head + \e[31m1\e[0m : stones.head \e[35m+\e[0m \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                             ^\e\
    [0m\n\e[31m   |\e[0m                                                       Not\
    \ found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 3\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodkzt9bl.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0)\
    \ n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n\
    \        levels += n\n        while (levels.size < n) levels += odd\n        while\
    \ (levels.size < n) levels += even\n        levels.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5q39ix0x.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n / 2 else n * 3\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyy5jg3q2.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n / \e[31m2\e[0m \e[33melse\e[0m n * \e[31m3\e[0m\n\e[31m\e[31m\
    \   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m                  expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpyy5jg3q2.scala:15:21 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n / 2 else n / 2 + 1\n        stones.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzyz05ir_.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n / \e[31m2\e[0m \e[33melse\e[0m n / \e[31m2\e[0m + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzyz05ir_.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) stones.last + 1 else stones.last + 1\n        stones\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22839.log

    '
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n % 2 == 0 ? n + 1 : n\n        stones\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ty5pv0g.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_ty5pv0g.scala:17:39 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ n + \e[31m1\e[0m : \e[35mn\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \    Not found: type n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0)\
    \ n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n\
    \        levels += n\n        levels += odd\n        levels += even\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpca28rzxq.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val even = if (n % 2 == 0)\
    \ n else n + 1;\n        val odd = if (n % 2 == 1) n else n + 1;\n        levels\
    \ += odd.toLong\n        levels += even.toLong\n        levels.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsskx9yt2.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n / 2 else n / 2 + 1\n        stones.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzyz05ir_.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n / \e[31m2\e[0m \e[33melse\e[0m n / \e[31m2\e[0m + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzyz05ir_.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        val even = if (n % 2\
    \ == 0) n else n + 2\n        val odd = if (n % 2 == 1) n else n - 1\n       \
    \ val nextOdd = if (odd > n) odd else odd\n        val nextEven = if (even > n)\
    \ even else even\n        val nextOddEven = if (nextEven > n) nextEven else nextOdd\n\
    \        val nextOddEvenOdd = if (nextOdd > n) nextOdd else nextOddEven\n    \
    \    val nextOddEvenOddEven = if (nextOddEven > n) nextOddEven else nextOddEvenOdd\n\
    \        val nextOddEvenOddEvenOdd = if (nextOddEvenOdd > n) nextOddEvenOdd else\
    \ nextOddEvenOddEven\n        val nextOddEvenOddEvenOddEven = if (nextOddEvenOddEven\
    \ > n) nextOddEvenOddEven else nextOddEvenOddEvenOdd\n        val nextOddEvenOddEvenOddEvenOdd\
    \ = if (nextOddEvenOddEvenOdd > n) nextOddEvenOddEvenOdd else nextOddEvenOddEvenOddEven\n\
    \        val nextOddEvenOddEvenOddEvenOddEven = if (nextOddEvenOddEvenOddEven\
    \ > n) nextOddEvenOddEvenOddEven else nextOddEvenOddEvenOddEvenOdd\n        val\
    \ nextOddEvenOddEvenOddEvenOddEvenOdd = if (nextOddEvenOddEvenOddEvenOdd > n)\
    \ nextOddEvenOddEvenOddEvenOdd else nextOddEvenOddEvenOddEvenOddEven\n       \
    \ val nextOddEvenOddEvenOddEvenOddEvenOddEven = if (nextOddEvenOddEvenOddEvenOddEven\
    \ > n) nextOddEvenOddEvenOddEvenOddEven else nextOddEvenOddEvenOddEvenOddEvenOdd\n\
    \        val nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = if (nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ > n) nextOddEvenOddEvenOddEvenOddEvenOdd else nextOddEven\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp44jqwo4q.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp44jqwo4q.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0)\
    \ n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n\
    \        levels.append (odd)\n        levels.append (even)\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqj_9n1fj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n % 2 == 0 ? n : n % 2 == 1 ? n + 1 : n + 1\n        stones.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22933.log

    '
  timestamp: 1659795010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n % 2 == 0 ? n + 1 : n\n        stones\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ty5pv0g.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_ty5pv0g.scala:17:39 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ n + \e[31m1\e[0m : \e[35mn\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \    Not found: type n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val list = mutable.ListBuffer[Long]()\n        val even = if (n % 2 == 0)\
    \ n else n + 2\n        val odd = if (n % 2 == 1) n else n - 1\n        list +=\
    \ n\n        list += even\n        list += odd\n        list.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1cpgq84w.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer(n.toLong)\n        val even = stones.filter(_\
    \ % 2 == 0)\n        val odd = stones.filter(_ % 2 != 0)\n        val nextOdd\
    \ = odd.filter(_ % 2 == 1)\n        val nextEven = even.filter(_ % 2 == 0)\n \
    \       val nextOddEven = nextOdd.filter(_ % 2 == 1)\n        val nextOddEvenOdd\
    \ = nextOddEven.filter(_ % 2 == 1)\n        val nextOddEvenOddEven = nextOddEvenOdd.filter(_\
    \ % 2 == 1)\n        val nextOddEvenOddEvenOdd = nextOddEvenOddEven.filter(_ %\
    \ 2 == 1)\n        val nextOddEvenOddEvenOddEven = nextOddEvenOddEvenOddOdd.filter(_\
    \ % 2 == 1)\n        val nextOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOdd.filter(_\
    \ % 2 == 1)\n        val nextOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOdd.filter(_\
    \ % 2 == 1)\n        val nextOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEven.filter(_\
    \ % 2 == 1)\n        val nextOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd.filter(_\
    \ % 2 == 1)\n        val nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd.filter(_\
    \ % 2 == 1)\n        val nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd.filter(_\
    \ % 2 == 1)\n        val nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd.filter(_\
    \ % 2 == 1)\n        val nextOddEvenOddEvenOddEvenOddEven\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr0nvktrl.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr0nvktrl.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mstones\e[0m = mutable.ListBuffer(n.toLong)\n\e[31m\e[31m   |\e[0m        \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr0nvktrl.scala:24:40\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mnextOddEvenOddEvenOddEven\e[0m = nextOddEvenOddEvenOddOdd.filter(_ % \e[31m2\e\
    [0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \             Not found: nextOddEvenOddEvenOddOdd\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpr0nvktrl.scala:25:43 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnextOddEvenOddEvenOddEvenOdd\e\
    [0m = nextOddEvenOddEvenOddEvenOdd.filter(_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m \
    \  |\e[0m                 Recursive \e[33mvalue\e[0m \e[35mnextOddEvenOddEvenOddEvenOdd\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr0nvktrl.scala:28:54\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mnextOddEvenOddEvenOddEvenOddEvenOddEven\e[0m = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd.filter(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: nextOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\n\
    \e[31m   |\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659795087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer.empty[Long]\n        stones += n\n       \
    \ stones += if (n % 2 == 0) n else n + 2\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppfo8jdsx.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n \e[33melse\e[0m n + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m    \
    \              ^^\e[0m\n\e[31m   |\e[0m                  expression expected but\
    \ \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppfo8jdsx.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mstones\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        val odd = n.toInt\n       \
    \ val even = n.toInt\n        if (odd % 2 == 0) {\n            nums += odd.toLong\n\
    \        }\n        if (even % 2 == 0) {\n            nums += even.toLong\n  \
    \      }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdqepzyar.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones +=\
    \ n / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones\
    \ += n / 8589934592\n        stones += n / 17179869184\n        stones += n /\
    \ 34359738368\n        stones += n / 68719476736\n        stones += n / 137438953472\n\
    \        stones += n / 274877906944\n        stones += n / 549755813888\n    \
    \    stones += n / 1099511627776\n        stones += n / 2199023255552\n      \
    \  stones += n / 4398046511104\n        stones += n / 8796093022208\n        stones\
    \ += n / 17592186044416\n        stones += n / 35184372088832\n        stones\
    \ += n / 70368744177664\n        stones += n / 1374389534720\n        stones +=\
    \ n / 27487790694400\n        stones += n / 54975581388832\n        stones +=\
    \ n / 109951162777600\n        stones += n / 219902325555200\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6oe433u9.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n / 2 else n / 2 + 1\n        stones.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzyz05ir_.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n / \e[31m2\e[0m \e[33melse\e[0m n / \e[31m2\e[0m + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzyz05ir_.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        var i = 0\n        while(i\
    \ < n) {\n            stones += n\n            i += 2\n        }\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprgk1u6ip.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        val odd = if (n % 2 ==\
    \ 0) n / 2 else n / 2 + 1\n        val even = n / 2\n        result.add(odd)\n\
    \        result.add(even)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzbyteu8c.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 3\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodkzt9bl.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0) n\
    \ / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n  \
    \      for (i <- 0 until n) {\n            if (i % 2 == 0) {\n               \
    \ nums += even\n            } else {\n                nums += odd\n          \
    \  }\n        }\n        nums.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk17179rc.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpk17179rc.scala:18:26 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val nextLevel = if (n % 2\
    \ == 0) n.toLong + 1 else n.toLong\n        levels += nextLevel\n        val nextLevel2\
    \ = if (nextLevel % 2 == 0) nextLevel.toLong + 1 else nextLevel.toLong\n     \
    \   levels += nextLevel2\n        levels.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv3xrkphc.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        var nextLevel = n.toLong\n\
    \        var nextLevelCount = 1\n        while (nextLevel > 0) {\n           \
    \ if (nextLevel % 2 == 0) {\n                nextLevelCount += 1\n           \
    \ } else {\n                nextLevelCount += 2\n            }\n            nextLevel\
    \ = nextLevel / 2\n            levels += nextLevelCount\n        }\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ad1mio4.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) stones.last + 1 else stones.last + 1\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpi11q7dlg.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) stones.last + \e[31m1\e[0m \e[33melse\e[0m stones.last + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpi11q7dlg.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795081
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile : List[Long] = List(n).reverse\n        val odd = if (n % 2 == 0)\
    \ n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n\
    \        val nextLevel = if (odd > even) odd else even\n        val nextLevelList\
    \ = List(nextLevel).reverse\n        pile.zip(nextLevelList).map(x => x._1 + x._2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkj7df31p.scala:23)\n\tat Problem.main(tmpkj7df31p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: None
  timestamp: 1659795093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 3\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodkzt9bl.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val nextLevel = if (n % 2\
    \ == 0) n.toLong + 1 else n.toLong\n        levels += nextLevel\n        val nextLevel2\
    \ = if (nextLevel % 2 == 0) nextLevel.toLong + 1 else nextLevel.toLong\n     \
    \   levels += nextLevel2\n        levels.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv3xrkphc.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        var count = 0\n     \
    \   var next = 0\n        while(n > 0) {\n            count += n\n           \
    \ next += if (n % 2 == 0) 2 else 1\n            n -= next\n            result.add(count)\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmojti6y4.scala:20:20 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            next += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) \e[31m2\e[0m \e[33melse\e[0m \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                    ^^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmojti6y4.scala:15:25 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpmojti6y4.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            count += n\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmojti6y4.scala:20:17\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            next += \e[33mif\e\
    [0m (n % \e[31m2\e[0m == \e[31m0\e[0m) \e[31m2\e[0m \e[33melse\e[0m \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpmojti6y4.scala:21:14 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            n -= next\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            value -= is not a member of Long - did you mean\
    \ n.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1659795092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) stones.last.last else stones.last.head + stones.last.last\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpn65aifg3.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) stones.last.last \e[33melse\e[0m stones.last.head + stones.last.last\n\
    \e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m              \
    \    expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpn65aifg3.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val even = if (n % 2 == 0)\
    \ n else n + 1;\n        val odd = if (n % 2 == 1) n else n + 1;\n        levels\
    \ += odd.toLong\n        levels += even.toLong\n        levels.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsskx9yt2.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0)\
    \ n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n\
    \        levels += n\n        levels += odd\n        levels += even\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpca28rzxq.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0)\
    \ n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n\
    \        levels += n\n        levels += odd\n        levels += even\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpca28rzxq.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) stones.last.last else stones.last.last\n        stones\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4d93bci3.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) stones.last.last \e[33melse\e[0m stones.last.last\n\e[31m\e[31m\
    \   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m                  expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4d93bci3.scala:15:21 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        val nextLevel = if (n\
    \ % 2 == 0) n / 2 else 3 * n + 1\n        for (i <- 1 to nextLevel) {\n      \
    \      result.add(i)\n        }\n        return result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4yef4f1m.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4yef4f1m.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to nextLevel) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (nextLevel : Long)\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) stones.head + 1 else stones.head + 1\n        stones\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphpy_rdzc.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) stones.head + \e[31m1\e[0m \e[33melse\e[0m stones.head + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphpy_rdzc.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 3\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodkzt9bl.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < n) {\n            if (n % 2 == 0) {\n                levels += n.toLong\n\
    \                i += 2\n            } else {\n                levels += n.toLong\n\
    \                i += 1\n            }\n        }\n        levels.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp54f0zidd.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        var stone = 0\n        var\
    \ level = 0\n        while(stone < n) {\n            stone += if (n % 2 == 0)\
    \ 2 else 1\n            stones += stone\n            level += 1\n        }\n \
    \       stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0n0cx8j7.scala:19:21 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            stone += \e[33mif\e[0m (n % \e[31m2\e[0m\
    \ == \e[31m0\e[0m) \e[31m2\e[0m \e[33melse\e[0m \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                     ^^\e[0m\n\e[31m   |\e[0m                     expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0n0cx8j7.scala:15:21 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp0n0cx8j7.scala:19:18 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            stone += \e[33mif\e[0m (n % \e[31m2\e[0m == \e\
    [31m0\e[0m) \e[31m2\e[0m \e[33melse\e[0m \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659795101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer.empty[Long]\n        stones += n\n       \
    \ stones += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones\
    \ += n / 16\n        stones += n / 32\n        stones += n / 64\n        stones\
    \ += n / 128\n        stones\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j_ik8c9.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        var level = 0\n        while\
    \ (stones.size < n) {\n            if (n % 2 == 0) {\n                stones +=\
    \ n\n                level += 1\n            } else {\n                stones\
    \ += n\n                level += 2\n            }\n            n -= 1\n      \
    \  }\n        stones.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp14ph7eas.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp14ph7eas.scala:25:14 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659795101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer.empty[Long]\n        val odd = if (n % 2 ==\
    \ 0) n / 2 else n / 2 + 1\n        val even = n / 2\n        nums += n\n     \
    \   while (odd > 1) {\n            nums += odd\n            odd -= 1\n       \
    \ }\n        while (even > 1) {\n            nums += even\n            even -=\
    \ 1\n        }\n        nums.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_f50rl23.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp_f50rl23.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            odd -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Long - did you mean odd.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_f50rl23.scala:25:17\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            even -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value -= is not a member of Long - did you mean even.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659795104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < n) {\n            levels += n\n            i += 2\n        }\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr775o3fu.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile : List[Long] = List(n).reverse\n        var i = 0\n        while(i\
    \ < pile.length) {\n            pile(i +1) = if (pile(i +1).isEven) pile(i +1)\
    \ else pile(i +1) + 1\n            i += 1\n        }\n        pile\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2r3yyw92.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            pile(i +\e[31m1\e[0m) = \e[33mif\e[0m (pile(i\
    \ +\e[31m1\e[0m).isEven) pile(i +\e[31m1\e[0m) \e[33melse\e[0m pile(i +\e[31m1\e\
    [0m) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e\
    [0m value update is not a member of List[Long] - did you mean pile.updated?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp2r3yyw92.scala:18:40 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            pile(i +\e[31m1\e[0m) = \e[33mif\e[0m (pile(i\
    \ +\e[31m1\e[0m).isEven) pile(i +\e[31m1\e[0m) \e[33melse\e[0m pile(i +\e[31m1\e\
    [0m) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value isEven is not a member\
    \ of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < n) {\n            if (n % 2 == 0) {\n                levels += n\n    \
    \            i += 2\n            } else {\n                levels += n\n     \
    \           i += 1\n            }\n        }\n        levels.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodfp2tlh.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones +=\
    \ n / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones\
    \ += n / 8589934592\n        stones += n / 17179869184\n        stones += n /\
    \ 34359738368\n        stones += n / 68719476736\n        stones += n / 137438953472\n\
    \        stones += n / 274877906944\n        stones += n / 549755813888\n    \
    \    stones += n / 1099511627776\n        stones += n / 2199023255552\n      \
    \  stones += n / 4398046511104\n        stones += n / 8796093022208\n        stones\
    \ += n / 17592186044416\n        stones += n / 35184372088832\n        stones\
    \ += n / 70368744177664\n        stones += n / 140737488355328\n        stones\
    \ += n / 281474976710656\n        stones += n / 562949953421312\n        stones\
    \ += n / 1125899906842624\n        stones += n / 22517998136\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa0d6qqh5.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 3\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodkzt9bl.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        var nextLevel = n.toLong\n\
    \        var nextLevelCount = 1\n        while (nextLevel > 0) {\n           \
    \ if (nextLevel % 2 == 0) {\n                nextLevelCount += 1\n           \
    \ } else {\n                nextLevelCount += 2\n            }\n            nextLevel\
    \ = nextLevel / 2\n        }\n        result.addAll(nextLevelCount.toLong :: Nil)\n\
    \        return result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7xyif91.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        val even = if (n % 2\
    \ == 0) n else n + 2\n        val odd = if (n % 2 == 1) n else n - 1\n       \
    \ val nextEven = if (even % 2 == 0) even else even + 1\n        val nextOdd =\
    \ if (odd % 2 == 1) odd else odd - 1\n        val nextNextEven = if (nextEven\
    \ % 2 == 0) nextEven else nextEven + 1\n        val nextNextOdd = if (nextOdd\
    \ % 2 == 1) nextOdd else nextOdd - 1\n        val nextNextNextEven = if (nextNextEven\
    \ % 2 == 0) nextNextEven else nextNextEven + 1\n        val nextNextNextOdd =\
    \ if (nextNextOdd % 2 == 1) nextNextOdd else nextNextOdd - 1\n        val nextNextNextNextEven\
    \ = if (nextNextNextEven % 2 == 0) nextNextNextEven else nextNextNextEven + 1\n\
    \        val nextNextNextNextOdd = if (nextNextNextOdd % 2 == 1) nextNextNextOdd\
    \ else nextNextNextOdd - 1\n        val nextNextNextNextNextEven = if (nextNextNextNextEven\
    \ % 2 == 0) nextNextNextNextEven else nextNextNextNextEven + 1\n        val nextNextNextNextNextOdd\
    \ = if (nextNextNextNextOdd % 2 == 1) nextNextNextNextOdd else nextNextNextNextOdd\
    \ - 1\n        val nextNextNextNextNextNextEven = if (nextNextNextNextNextEven\
    \ % 2 == 0) nextNextNextNextNextEven else nextNextNextNextNextEven + 1\n     \
    \   val nextNextNextNextNextNextOdd = if (nextNextNextNextNextOdd % 2 == 1) nextNextNextNextNextOdd\
    \ else nextNextNextNextNextOdd - 1\n        val nextNextNextNextNextNextNextEven\
    \ = if (nextNextNextNextNextNextEven % 2 == 0) nextNextNextNextNextNextEven else\
    \ nextNextNextNextNextNextEven + 1\n        val nextNextNextNextNextNextNextOdd\
    \ = if (nextNextNextNextNextNextOdd % 2 == 1) nextNextNextNextNextNextOdd else\
    \ nextNextNextNextNextNextOdd - 1\n        val nextNextNextNextNextNextNextNextEven\
    \ = if (nextNextNextNextNextNextNextEven % 2 == 0) nextNextNextNextNextNextNextEven\
    \ else nextNextNextNextNextNextNextEven + 1\n        val nextNextNextNextNextNextNextNextOdd\
    \ = if (nextNextNextNextNextNextNextOdd % 2 == 1) next\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfon1rtx3.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfon1rtx3.scala:33:96\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mnextNextNextNextNextNextNextNextOdd\e[0m = \e[33mif\e[0m (nextNextNextNextNextNextNextOdd\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) next\n\e[31m\e[31m   |\e[0m                \
    \                                                                            \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                                              \
    \           Not found: next\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfon1rtx3.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795108
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer(n.toLong)\n        val even = stones.filter(_\
    \ % 2 == 0)\n        val odd = stones.filter(_ % 2 != 0)\n        odd.foreach(stones\
    \ += _ + 1)\n        even.foreach(stones += _ + 1)\n        odd.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdkflbyx7.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n.toLong)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer(n)\n        stones.dropRight(1).foreach(stones.updated(stones.size\
    \ - stones.last + stones.last))\n        stones.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2_06esir.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) (n / 2l) else (n / 2l) + 1\n        stones\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkdg5r6_i.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) (n / \e[31m2l\e[0m) \e[33melse\e[0m (n / \e[31m2l\e[0m) + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpkdg5r6_i.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        val odd = if (n % 2 ==\
    \ 0) n / 2 else n / 2 + 1\n        val even = n / 2\n        result.add(odd)\n\
    \        result.add(even)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzbyteu8c.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        var nextLevel = n.toLong\n\
    \        var nextOdd = 0\n        var nextEven = 0\n        while (nextLevel >\
    \ 0) {\n            if (nextLevel % 2 == 0) {\n                nextEven = nextEven\
    \ * 2 + 1\n            } else {\n                nextOdd = nextOdd * 2 + 1\n \
    \           }\n            nextLevel = nextLevel / 2\n            stones += nextOdd\n\
    \            stones += nextEven\n        }\n        stones.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgl4a6uqz.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones +=\
    \ n / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones\
    \ += n / 8589934592\n        stones += n / 17179869184\n        stones += n /\
    \ 34359738368\n        stones += n / 68719476736\n        stones += n / 137438953472\n\
    \        stones += n / 274877906944\n        stones += n / 549755813888\n    \
    \    stones += n / 1099511627776\n        stones += n / 2199023255552\n      \
    \  stones += n / 4398046511104\n        stones += n / 8796093022208\n        stones\
    \ += n / 17592186044416\n        stones += n / 35184372088832\n        stones\
    \ += n / 70368744177664\n        stones += n / 1374389534720\n        stones +=\
    \ n / 27487790694400\n        stones += n / 54975581388832\n        stones +=\
    \ n / 109951162777600\n        stones += n / 219902325555200\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6oe433u9.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile = mutable.ListBuffer[Long]()\n        pile.append(n)\n        pile.append(pile.last.filter(_\
    \ % 2 == 1).sum)\n        pile.append(pile.last.filter(_ % 2 == 0).sum)\n    \
    \    pile.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpof4yanvk.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        var nextLevel = n.toLong\n\
    \        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n    \
    \            levels += nextLevel\n            } else {\n                levels\
    \ += nextLevel.toLong\n                nextLevel = nextLevel.toLong - nextLevel.toLong.toLong\n\
    \            }\n        }\n        levels.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8a85lqmd.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n / 2 else n * 3\n        stones.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsj7clfzx.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n / \e[31m2\e[0m \e[33melse\e[0m n * \e[31m3\e[0m\n\e[31m\e[31m\
    \   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m                  expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsj7clfzx.scala:15:21 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0)\
    \ n / 2 else n / 2 + 1\n        val even = n / 2\n        levels += n\n      \
    \  levels += odd\n        levels += even\n        levels.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22707.log

    '
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) (n / 2l) else (3 * n + 1l)\n        stones\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpru_sm4xs.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) (n / \e[31m2l\e[0m) \e[33melse\e[0m (\e[31m3\e[0m * n + \e[31m1l\e\
    [0m)\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m        \
    \          expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpru_sm4xs.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0) n\
    \ / 2 else n / 2 + 1\n        val even = n / 2\n        for (i <- 0 until n) {\n\
    \            if (i % 2 == 0) {\n                nums += even\n            } else\
    \ {\n                nums += odd\n            }\n        }\n        nums.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc3a5p5g2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpc3a5p5g2.scala:18:26 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile = mutable.ListBuffer[Long]()\n        pile.append(n.toLong)\n   \
    \     pile.append(n.toLong)\n        pile.append(n.toLong)\n        pile.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe04vmao3.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer.empty[Long]\n        stones += n\n       \
    \ stones += if (n % 2 == 0) n / 2 else n / 2 + 1\n        stones\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp06sn_qf1.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n / \e[31m2\e[0m \e[33melse\e[0m n / \e[31m2\e[0m + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp06sn_qf1.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795109
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer(n)\n        val odd = if (n % 2 == 0) n /\
    \ 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n    \
    \    stones ++= makeAPile(odd)\n        stones ++= makeAPile(even)\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoezhn3jb.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        var nextLevel = n.toLong\n\
    \        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n    \
    \            levels += nextLevel\n            }\n            nextLevel = nextLevel\
    \ / 2\n        }\n        levels.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpva7wu4c4.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795111
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        var nextLevel = n.toInt\n\
    \        var nextLevelCount = stones.size\n        while (nextLevel > 0) {\n \
    \           nextLevel = nextLevel / 2\n            nextLevelCount += 1\n     \
    \   }\n        stones.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx9m539l7.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795111
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer(n)\n        stones ++= makeAPile(n/2, stones)\n\
    \        stones ++= makeAPile(n/2, stones)\n        stones.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbsldw5zx.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones +=\
    \ n / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones\
    \ += n / 8589934592\n        stones += n / 17179869184\n        stones += n /\
    \ 34359738368\n        stones += n / 68719476736\n        stones += n / 137438953472\n\
    \        stones += n / 274877906944\n        stones += n / 549755813888\n    \
    \    stones += n / 1099511627776\n        stones += n / 2199023255552\n      \
    \  stones += n / 4398046511104\n        stones += n / 8796093022208\n        stones\
    \ += n / 17592186044416\n        stones += n / 35184372088832\n        stones\
    \ += n / 70368744177664\n        stones += n / 140737488355328\n        stones\
    \ += n / 281474976710656\n        stones += n / 562949953421312\n        stones\
    \ += n / 1125899906842624\n        stones += n / 22517998136\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa0d6qqh5.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        val odd = if (n % 2 ==\
    \ 0) n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n\
    \        val nextLevel = if (n % 2 == 0) odd else even\n        result ++= makeAPile(nextLevel)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjuj3j6eg.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        var num = 0\n        var i\
    \ = 0\n        while (i < n) {\n            if (n % 2 == 0) {\n              \
    \  num += 2\n            } else {\n                num += 3\n            }\n \
    \           nums += num\n            i += 1\n        }\n        nums.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz1dgwbpb.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val list = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0) n\
    \ / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n  \
    \      val level = if (n == 0) 1 else odd\n        val nextLevel = if (n == 0)\
    \ 1 else even\n        list += level.toLong\n        list += nextLevel.toLong\n\
    \        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp62qno1fr.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < n) {\n            levels += n\n            i += 2\n        }\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr775o3fu.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        var nextLevel = n.toLong\n\
    \        var nextLevelCount = stones.size + n.toLong\n        if (nextLevel %\
    \ 2 == 0) {\n            nextLevel = nextLevel / 2\n            nextLevelCount\
    \ = stones.size + nextLevel.toLong\n        }\n        stones += nextLevel\n \
    \       while (nextLevelCount > 0) {\n            nextLevelCount -= 1\n      \
    \      if (nextLevel % 2 == 0) {\n                nextLevel = nextLevel / 2\n\
    \                nextLevelCount = stones.size + nextLevel.toLong\n           \
    \ }\n            stones += nextLevel\n        }\n        stones.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphw9bl1d9.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        var num = 0\n        while(num\
    \ < n) {\n            val nextNum = if (n % 2 == 0) (n / 2l) else (3 * n + 2l)\n\
    \            nums += nextNum\n            num += 1\n        }\n        nums.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnsxf4qc6.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val even = if (n % 2 == 0)\
    \ n else n + 2\n        val odd = if (n % 2 == 1) n else n - 1\n        val nextLevel\
    \ = if (odd > even) odd else even\n        levels += n\n        while (nextLevel\
    \ > 1) {\n            levels += nextLevel\n            nextLevel = if (nextLevel\
    \ % 2 == 0) nextLevel - 1 else nextLevel + 1\n        }\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp34hn8lqc.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp34hn8lqc.scala:22:22 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            nextLevel = \e[33mif\e[0m (nextLevel % \e\
    [31m2\e[0m == \e[31m0\e[0m) nextLevel - \e[31m1\e[0m \e[33melse\e[0m nextLevel\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val nextLevel\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        var level = 0\n        var\
    \ stones = 0\n        while(stones < n) {\n            stones = stones + if (n\
    \ % 2 == 0) 2 else 1\n            level += stones\n            levels += level.toLong\n\
    \            n -= 1\n        }\n        levels.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxcac2c_i.scala:19:30 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            stones = stones + \e[33mif\e[0m (n % \e[31m2\e\
    [0m == \e[31m0\e[0m) \e[31m2\e[0m \e[33melse\e[0m \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                              ^^\e[0m\n\e[31m   |\e[0m              \
    \                expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxcac2c_i.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpxcac2c_i.scala:22:14 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659795134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer(n.toLong)\n        val nextLevel = stones.takeWhile(_\
    \ % 2 == 0).length\n        stones.drop(nextLevel).takeWhile(_ % 2 == 1).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptva4__mz.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n.toLong)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        var stone = 0\n        var\
    \ next = 0\n        var level = 0\n        while (n > 0) {\n            if (n\
    \ % 2 == 0) {\n                stone = stone.toLong + n\n                stones\
    \ += stone\n                next += n\n                n -= 1\n            } else\
    \ {\n                stone = stone.toLong + n\n                stones += stone\n\
    \                next += n\n                n -= 1\n            }\n          \
    \  level += 1\n        }\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnf8u5xtv.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpnf8u5xtv.scala:21:24 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                stone = stone.toLong + n\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Found:    Long\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnf8u5xtv.scala:23:21\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                next += n\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpnf8u5xtv.scala:24:18 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a member\
    \ of Long - did you mean n.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnf8u5xtv.scala:26:24\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                stone = stone.toLong\
    \ + n\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    Long\n\e[31m   |\e[0m         \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpnf8u5xtv.scala:28:21 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m                next += n\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                value += is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnf8u"
  stdout: ''
  timestamp: 1659795156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0)\
    \ n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n\
    \        levels += odd.toLong\n        levels += even.toLong\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvdlc8ar9.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n % 2 == 0 ? stones.drop(stones.length - 1) : stones.drop(stones.length -\
    \ 1)\n        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp62hnpll7.scala:17:75 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ stones.drop(stones.length - \e[31m1\e[0m) : stones.drop(stones.length - \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \     end of statement expected but '(' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp62hnpll7.scala:15:21 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer.empty[Long]\n        var i = 0\n        while\
    \ (i < n) {\n            if (n % 2 == 0) {\n                nums += n.toLong\n\
    \                i += 2\n            } else {\n                nums += n.toLong\n\
    \                i += 1\n            }\n        }\n        nums.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgwf50ad4.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < n) {\n            if (n % 2 == 0) {\n                stones += n.toLong\n\
    \                i += 2\n            } else {\n                stones += n.toLong\n\
    \                i += 1\n            }\n        }\n        stones.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi_lbmxob.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0)\
    \ n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n\
    \        levels.append (odd)\n        levels.append (even)\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqj_9n1fj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n / 2 else n / 2 + 1\n        stones.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzyz05ir_.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n / \e[31m2\e[0m \e[33melse\e[0m n / \e[31m2\e[0m + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzyz05ir_.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile = mutable.ListBuffer[Long]()\n        var i = 0\n        while (i\
    \ < n) {\n            if (n % 2 == 0) {\n                pile.append(n.toLong)\n\
    \                i += 2\n            } else {\n                pile.append(n.toLong)\n\
    \                i += 3\n            }\n        }\n        pile\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2791nlay.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val even = if (n % 2 == 0)\
    \ n / 2 else n / 2 + 1\n        val odd = if (n % 2 == 1) n / 2 else n / 2\n \
    \       levels += n\n        while (levels.size < n) {\n            levels +=\
    \ odd\n            levels += even\n        }\n        levels.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpipufja02.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n / 2 else n / 2 + 1\n        stones.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzyz05ir_.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n / \e[31m2\e[0m \e[33melse\e[0m n / \e[31m2\e[0m + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzyz05ir_.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val list = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0) n\
    \ / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n  \
    \      list.+=(odd.toLong)\n        list.+=(even.toLong)\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr8op4afz.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < n) {\n            levels += n\n            i += 2\n        }\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr775o3fu.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n / 2 else n * 3\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyy5jg3q2.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n / \e[31m2\e[0m \e[33melse\e[0m n * \e[31m3\e[0m\n\e[31m\e[31m\
    \   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m                  expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpyy5jg3q2.scala:15:21 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        var stone = n.toLong\n  \
    \      while(stone > 1) {\n            stones += stone\n            stone += (if\
    \ (stone % 2 == 0) 1 else -1)\n        }\n        stones.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjh2rx4nl.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) stones.last.asInstanceOf[Long] else stones.last.asInstanceOf[Long]\
    \ + 1\n        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwbd2ybhx.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) stones.last.asInstanceOf[Long] \e[33melse\e[0m stones.last.asInstanceOf[Long]\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e\
    [0m                  expression expected but \e[31mif\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwbd2ybhx.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < n) {\n            if (i % 2 == 0) {\n                levels += n\n    \
    \        } else {\n                levels += n + 1\n            }\n          \
    \  i += 1\n        }\n        levels.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8dy945gk.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val numOfLevels = n.toInt\n        val numOfStones = n.toLong\n        val\
    \ numOfLevelsStones = numOfLevels * numOfStones\n        val numOfLevelsStonesEven\
    \ = numOfLevelsStones / 2\n        val numOfLevelsStonesOdd = numOfLevelsStones\
    \ - numOfLevelsStonesEven\n        val numOfLevelsStonesEvenList = List(numOfLevelsStonesEven.toLong)\n\
    \        val numOfLevelsStonesOddList = List(numOfLevelsStonesOdd.toLong)\n  \
    \      val numOfLevelsStonesEvenList2 = List(numOfLevelsStonesEven.toLong)\n \
    \       val numOfLevelsStonesOddList2 = List(numOfLevelsStonesOdd.toLong)\n  \
    \      val numOfLevelsStonesEvenList3 = List(numOfLevelsStonesEven.toLong)\n \
    \       val numOfLevelsStonesOddList3 = List(numOfLevelsStonesOdd.toLong)\n  \
    \      val numOfLevelsStonesEvenList4 = List(numOfLevelsStonesEven.toLong)\n \
    \       val numOfLevelsStonesOddList4 = List(numOfLevelsStonesOdd.toLong)\n  \
    \      val numOfLevelsStonesEvenList5 = List(numOfLevelsStonesEven.toLong)\n \
    \       val numOfLevelsStonesOddList5 = List(numOfLevelsStonesOdd.toLong)\n  \
    \      val numOfLevelsStonesEvenList6 = List(numOfLevelsStonesEven.toLong)\n \
    \       val numOfLevelsStonesOddList6 = List(numOfLevelsStonesOdd.toLong)\n  \
    \      val numOfLevelsStonesEvenList7 = List(numOfLevelsStonesEven.toLong)\n \
    \       val numOfLevelsStonesOddList7 = List(numOfLevelsStonesOdd.toLong)\n  \
    \      val numOfLevelsStonesEvenList8 = List(numOfLevelsStonesEven.toLong)\n \
    \       val numOfLevelsStonesOddList8 = List(numOfLevelsStonesOdd.toLong)\n  \
    \      val \n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp34orpk61.scala:36:11 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp34orpk61.scala:37:5 ---------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0)\
    \ n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n\
    \        val nextLevel = if (n % 2 == 0) even else odd\n        levels += n\n\
    \        while (nextLevel > 0) {\n            levels += nextLevel\n          \
    \  nextLevel = if (nextLevel % 2 == 0) even else odd\n        }\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp20lwc68z.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp20lwc68z.scala:22:22 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            nextLevel = \e[33mif\e[0m (nextLevel % \e\
    [31m2\e[0m == \e[31m0\e[0m) even \e[33melse\e[0m odd\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val nextLevel\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        val odd = n.toInt\n       \
    \ val even = n.toInt\n        val evenOdd = if (even % 2 == 0) even else odd\n\
    \        val evenOddEven = if (evenOdd % 2 == 0) evenOdd else even\n        val\
    \ evenOddEvenOdd = if (evenOddEven % 2 == 0) evenOddEven else odd\n        val\
    \ evenOddEvenOddEven = if (evenOddEvenOdd % 2 == 0) evenOddEvenOdd else even\n\
    \        val evenOddEvenOddEvenOdd = if (evenOddEvenOddEven % 2 == 0) evenOddEvenOddEven\
    \ else odd\n        val evenOddEvenOddEvenOddEven = if (evenOddEvenOddEvenOdd\
    \ % 2 == 0) evenOddEvenOddEvenOdd else even\n        val evenOddEvenOddEvenOddEvenOdd\
    \ = if (evenOddEvenOddEvenOddEven % 2 == 0) evenOddEvenOddEvenOddEven else odd\n\
    \        val evenOddEvenOddEvenOddEvenOddEven = if (evenOddEvenOddEvenOddEvenOddEven\
    \ % 2 == 0) evenOddEvenOddEvenOddEvenOddEven else even\n        val evenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = if (evenOddEvenOddEvenOddEvenOddEvenOdd % 2 == 0) evenOddEvenOddEvenOddEvenOddEvenOdd\
    \ else odd\n        val evenOddEvenOddEvenOddEvenOddEvenOddEven = if (evenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ % 2 == 0) evenOddEvenOddEvenOddEvenOddEvenOddEven else even\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = if (evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven % 2 == 0) evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ else odd\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = if (evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ % 2 == 0) evenOddEvenOddEvenO\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vdogwaa.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp9vdogwaa.scala:25:51 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mevenOddEvenOddEvenOddEvenOddEven\e\
    [0m = \e[33mif\e[0m (evenOddEvenOddEvenOddEvenOddEven % \e[31m2\e[0m == \e[31m0\e\
    [0m) evenOddEvenOddEvenOddEvenOddEven \e[33melse\e[0m even\n\e[31m\e[31m   |\e\
    [0m                                                   ^\e[0m\n\e[31m   |\e[0m\
    \             Recursive \e[33mvalue\e[0m \e[35mevenOddEvenOddEvenOddEvenOddEven\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9vdogwaa.scala:25:94\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenOddEvenOddEvenOddEvenOddEven\e[0m = \e[33mif\e[0m (evenOddEvenOddEvenOddEvenOddEven\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) evenOddEvenOddEvenOddEvenOddEven \e[33melse\e\
    [0m even\n\e[31m\e[31m   |\e[0m                                              \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \        Recursive \e[33mvalue\e[0m \e[35mevenOddEvenOddEvenOddEvenOddEven\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9vdogwaa.scala:26:54\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenOddEvenOddEvenOddEvenOddEvenOdd\e[0m = \e[33mif\e[0m (evenOddEvenOddEvenOddEvenOddEvenOdd\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) evenOddEvenOddEvenOddEvenOddEvenOdd \e[33melse\e\
    [0m odd\n\e[31m\e[31m   |\e[0m                                               \
    \       ^\e[0m\n\e[31m   |\e[0m          Recursive \e[33mvalue\e[0m \e[35mevenOddEvenOddEvenOddEvenOddEvenOdd\e\
    [0m needs type"
  stdout: ''
  timestamp: 1659795164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer(n.toLong)\n        val even = if (n % 2 ==\
    \ 0) stones.head else stones.last\n        val odd = if (n % 2 == 1) stones.last\
    \ else stones.last\n        stones += odd.toLong\n        stones += even.toLong\n\
    \        stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmv_y46zq.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n.toLong)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n / 2 else n / 2 + 1\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22986.log

    '
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer.empty[Long]\n        var num = 0\n        var\
    \ next = 0\n        while(n > 0) {\n            num += 1\n            next +=\
    \ (n%2 == 0) ? 1 : 0\n            n /= 2\n        }\n        nums += num\n   \
    \     nums += next\n        nums.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvgg1zgiq.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpvgg1zgiq.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            next += (n%\e[31m2\e[0m == \e[31m0\e[0m)\
    \ ? \e[31m1\e[0m : \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvgg1zgiq.scala:20:31 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            next += (n%\e[31m2\e[0m == \e[31m0\e[0m)\
    \ ? \e[31m1\e[0m : \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value ? is not a member of Boolean\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpvgg1zgiq.scala:21:14 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659795164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) stones.last.asInstanceOf[Long] else stones.last.asInstanceOf[Long]\
    \ + 1\n        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwbd2ybhx.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) stones.last.asInstanceOf[Long] \e[33melse\e[0m stones.last.asInstanceOf[Long]\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e\
    [0m                  expression expected but \e[31mif\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwbd2ybhx.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        var nextLevel = n.toInt\n\
    \        if (nextLevel % 2 == 0) {\n            nextLevel = nextLevel + 1\n  \
    \      }\n        stones += nextLevel\n        while (nextLevel > 1) {\n     \
    \       nextLevel = nextLevel / 2\n            stones += nextLevel\n        }\n\
    \        stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3uyute0l.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795159
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val list = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0) n\
    \ / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n  \
    \      list += n\n        list += odd\n        list += even\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxciq4gld.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ArrayBuffer.empty[Long]\n        val odd = n.toInt\n  \
    \      val even = n.toInt\n        val nextOdd = odd + 1\n        val nextEven\
    \ = even + 1\n        val nextOddEven = nextOdd + nextEven\n        val nextOddEvenOdd\
    \ = nextOddEven + odd\n        val nextOddEvenOddEven = nextOddEvenOdd + nextEven\n\
    \        val nextOddEvenOddEvenOdd = nextOddEvenOddEven + nextOdd\n        val\
    \ nextOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEven + nextEven\n        val\
    \ nextOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOdd + nextOdd\n    \
    \    val nextOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEven +\
    \ nextEven\n        val nextOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextOdd\n        val nextOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextEven\n        val nextOddEvenOddEvenOddEvenOddEvenEven = nextOddEvenOddEvenOddEvenOddEvenEven\n\
    \        val nextOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOdd\n\
    \        val nextOddEvenOddEvenOddEvenOddEvenEven = nextOddEvenOddEvenOddEvenOddEvenEven\n\
    \        val nextOddEvenOddEvenOddEvenOddEvenEvenOdd = nextOddEvenOddEvenOddEvenOddEvenEvenOdd\n\
    \        val nextOddEvenOddEvenOddEvenOddEvenEvenEven = nextOddEvenOddEvenOddEvenOddEvenEvenEven\n\
    \        val nextOddEvenOddEvenOddEvenOddEvenEvenOdd = nextOddEvenOddEvenOddEvenOddEvenEvenOdd\n\
    \        val nextOddEvenOddEvenOddEvenOddEvenEvenEven = nextOddEvenO\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpue8i304w.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnextOddEvenOddEvenOddEvenOddEven\e\
    [0m = nextOddEvenOddEvenOddEvenOddEvenOdd + nextOdd\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextOddEvenOddEvenOddEvenOddEven is already defined as \e\
    [33mvalue\e[0m \e[35mnextOddEvenOddEvenOddEvenOddEven\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpue8i304w.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnextOddEvenOddEvenOddEvenOddEvenOdd\e[0m = nextOddEvenOddEvenOddEvenOddEvenOdd\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextOddEvenOddEvenOddEvenOddEvenOdd is already defined as\
    \ \e[33mvalue\e[0m \e[35mnextOddEvenOddEvenOddEvenOddEvenOdd\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpue8i304w.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnextOddEvenOddEvenOddEvenOddEvenEven\e[0m = nextOddEvenOddEvenOddEvenOddEvenEven\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextOddEvenOddEvenOddEvenOddEvenEven is already defined as\
    \ \e[33mvalue\e[0m \e[35mnextOddEvenOddEvenOddEvenOddEvenEven\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpue8i304w.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnextOddEvenOddEvenOddEvenOddEvenEvenOdd\e[0m = nextOddEvenOddEvenOddEvenOddEvenEvenOdd\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        var i = 0\n        while(i\
    \ < n) {\n            val nextOdd = if (n % 2 == 0) (n + 1) else n\n         \
    \   val nextEven = if (n % 2 == 1) (n + 1) else n\n            nums += nextOdd.toLong\n\
    \            nums += nextEven.toLong\n            i += 1\n        }\n        nums.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdatdqafm.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones +=\
    \ n / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones\
    \ += n / 8589934592\n        stones += n / 17179869184\n        stones += n /\
    \ 34359738368\n        stones += n / 68719476736\n        stones += n / 137438953472\n\
    \        stones += n / 274877906944\n        stones += n / 549755813888\n    \
    \    stones += n / 1099511627776\n        stones += n / 2199023255552\n      \
    \  stones += n / 4398046511104\n        stones += n / 8796093022208\n        stones\
    \ += n / 17592186044416\n        stones += n / 35184372088832\n        stones\
    \ += n / 70368744177664\n        stones += n / 140737488355328\n        stones\
    \ += n / 281474976710656\n        stones += n / 562949953421312\n        stones\
    \ += n / 1125899906842624\n        stones += n / 22517998136\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa0d6qqh5.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 3\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodkzt9bl.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        val odd = n.toInt\n       \
    \ val even = n.toInt / 2\n        val evenToOdd = if (even % 2 == 0) even - 1\
    \ else even\n        val oddToEven = if (odd % 2 == 0) odd - 1 else odd\n    \
    \    val nums = for (i <- 1 to evenToOdd by 2) yield even\n        for (i <- 1\
    \ to oddToEven by 2) yield odd\n        nums.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmuuw_sp9.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = \e[33mfor\e\
    [0m (i <- \e[31m1\e[0m to evenToOdd by \e[31m2\e[0m) \e[33myield\e[0m even\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnums is already defined as \e[33mvalue\e[0m \e[35mnums\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmuuw_sp9.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) stones.last.asInstanceOf[Long] else stones.last.asInstanceOf[Long]\
    \ + 1\n        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwbd2ybhx.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) stones.last.asInstanceOf[Long] \e[33melse\e[0m stones.last.asInstanceOf[Long]\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e\
    [0m                  expression expected but \e[31mif\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwbd2ybhx.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer(n.toLong)\n        stones ++= makeAPile(n/2,\
    \ stones)\n        stones ++= makeAPile(n/2, stones)\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmat6evax.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n.toLong)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val list = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0) n\
    \ / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n  \
    \      list += n\n        list += odd\n        list += even\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxciq4gld.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ArrayBuffer.empty[Long]\n        var num = 0\n        var\
    \ i = 0\n        while (i < n) {\n            if (n % 2 == 0) {\n            \
    \    num += 2\n            } else {\n                num += 3\n            }\n\
    \            nums += num\n            i += 1\n        }\n        nums.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzl147fwu.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0) n\
    \ / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n  \
    \      for (i <- 0 until n) {\n            if (i % 2 == 0) {\n               \
    \ nums += even\n            } else {\n                nums += odd\n          \
    \  }\n        }\n        nums.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk17179rc.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpk17179rc.scala:18:26 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 3\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodkzt9bl.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val numOfLevels = n.toInt\n        val numOfStones = n.toInt\n        val\
    \ levels = mutable.ListBuffer[Long]()\n        val stones = mutable.ListBuffer[Long]()\n\
    \        levels.append (stones.size)\n        stones.append (stones.size)\n  \
    \      levels.append (stones.size)\n        stones.append (stones.size)\n    \
    \    levels.append (stones.size)\n        stones.append (stones.size)\n      \
    \  levels.append (stones.size)\n        stones.append (stones.size)\n        levels.append\
    \ (stones.size)\n        stones.append (stones.size)\n        levels.append (stones.size)\n\
    \        stones.append (stones.size)\n        levels.append (stones.size)\n  \
    \      stones.append (stones.size)\n        levels.append (stones.size)\n    \
    \    stones.append (stones.size)\n        levels.append (stones.size)\n      \
    \  stones.append (stones.size)\n        levels.append (stones.size)\n        stones.append\
    \ (stones.size)\n        levels.append (stones.size)\n        stones.append (stones.size)\n\
    \        levels.append (stones.size)\n        stones.append (stones.size)\n  \
    \      levels.append (stones.size)\n        stones.append (stones.size)\n    \
    \    levels.append (stones.size)\n        stones.append (stones.size)\n      \
    \  levels.append (stones.size)\n        stones.append (stones.size)\n        levels.append\
    \ (stones.size)\n        stones.append (stones.size)\n        levels.append (stones.size)\n\
    \        stones.append (stones.size)\n        levels.append (stones.size)\n  \
    \      stones.append (stones.size)\n        levels.append (stones.size)\n    \
    \    stones.append (stones.size)\n        levels.append (stones.size)\n      \
    \  stones.append (stones.size)\n        levels.append (stones.size)\n        stones.append\
    \ (stones.size)\n        levels.append (stones.size)\n        stones.append (stones.size)\n\
    \        levels.append (stones.size)\n        stones.append (stones.size)\n  \
    \      levels.append (stones.size)\n        stones.append (stones.size)\n    \
    \    levels.append (stones.size)\n        stones.append (stones.size)\n      \
    \  levels.append (stones.size)\n        stones.append (stones.size)\n        levels.append\
    \ (stones.size)\n        stones.append (stones.size)\n        levels.append (stones.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgw5p3uwo.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpgw5p3uwo.scala:17:21 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpgw5p3uwo.scala:18:21 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        var num = 0\n        var next\
    \ = 0\n        while(n > 0) {\n            num += 1\n            next += (n%2\
    \ == 0) ? 1 : 0\n            n /= 2\n        }\n        nums += num\n        nums\
    \ += next\n        nums.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi6gv9h_a.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpi6gv9h_a.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            next += (n%\e[31m2\e[0m == \e[31m0\e[0m)\
    \ ? \e[31m1\e[0m : \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi6gv9h_a.scala:20:31 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            next += (n%\e[31m2\e[0m == \e[31m0\e[0m)\
    \ ? \e[31m1\e[0m : \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value ? is not a member of Boolean\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpi6gv9h_a.scala:21:14 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659795166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        val odd = if (n % 2 ==\
    \ 0) n / 2 else (3 * n) + 1\n        val even = if (n % 2 == 0) n / 2 else (3\
    \ * n) + 1\n        result ++= List(odd, even)\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid36113.log

    '
  timestamp: 1659795149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val numOfLevels = n.toInt\n        val numOfStones = numOfLevels * 2\n   \
    \     val stones = mutable.ArrayBuffer.empty[Long]\n        stones += numOfStones\n\
    \        stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid36106.log

    '
  timestamp: 1659795146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0) n\
    \ / 2 else n / 2 + 1\n        val even = n / 2\n        nums += n\n        val\
    \ numsEven = nums.takeWhile(_ < even).toList\n        val numsOdd = nums.takeWhile(_\
    \ < odd).toList\n        numsEven.zip(numsOdd).map { case (even, odd) => even\
    \ + odd }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid36162.log

    '
  timestamp: 1659795149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n / 2 else n / 2 + 1\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22986.log

    '
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 3\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodkzt9bl.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val even = if (n % 2 == 0)\
    \ n else n + 1;\n        val odd = if (n % 2 == 1) n else n + 1;\n        val\
    \ nextLevel = if (n % 2 == 0) even else odd;\n        levels += n\n        levels\
    \ += nextLevel\n        levels\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid36114.log

    '
  timestamp: 1659795146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n / 2 else n / 2 + 1\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22986.log

    '
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 3\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodkzt9bl.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n / 2 else n / 2 + 1\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22986.log

    '
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0)\
    \ n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n\
    \        levels += n\n        while (levels.size < n) levels += odd\n        while\
    \ (levels.size < n) levels += even\n        levels.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5q39ix0x.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) stones.last.last else stones.last.last + 1\n        stones\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpu4_pgq_5.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) stones.last.last \e[33melse\e[0m stones.last.last + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpu4_pgq_5.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n % 2 == 0 ? n : n % 2 == 1 ? n + 1 : n + 2\n        stones.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptt1owymu.scala:17:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ n : \e[35mn\e[0m \e[35m%\e[0m \e[31m2\e[0m \e[35m==\e[0m \e[31m1\e[0m \e[35m?\e\
    [0m \e[35mn\e[0m \e[35m+\e[0m \e[31m1\e[0m : n + \e[31m2\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                                                      ^\e[0m\n\e[31m \
    \  |\e[0m                                 end of statement expected but ':' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptt1owymu.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptt1owymu.scala:17:41 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ n : \e[35mn\e[0m \e[35m%\e[0m \e[31m2\e[0m \e[35m==\e[0m \e[31m1\e[0m \e[35m?\e\
    [0m \e[35mn\e[0m \e[35m+\e[0m \e[31m1\e[0m : n + \e[31m2\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                                         ^^\e[0m\n\e[31m   |\e[0m    \
    \                                     Not found: type ==\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        var nextLevel = n.toLong\n\
    \        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n    \
    \            levels += nextLevel\n            } else {\n                levels\
    \ += nextLevel + 1\n            }\n            nextLevel = nextLevel / 2\n   \
    \     }\n        levels.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vb4t_r3.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) (n / 2l) else (n / 2l) + 1\n        stones\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkdg5r6_i.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) (n / \e[31m2l\e[0m) \e[33melse\e[0m (n / \e[31m2l\e[0m) + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpkdg5r6_i.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0)\
    \ n / 2 else (n / 2) + 1\n        val even = if (n % 2 == 0) n / 2 else (n / 2)\n\
    \        levels += n\n        while (levels.size < n) {\n            levels +=\
    \ odd\n            levels += even\n        }\n        levels.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfxy6_bh_.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val list = mutable.ListBuffer[Long]()\n        var i = 0\n        while (i\
    \ < n) {\n            list += (i + 1l)\n            i += 2\n        }\n      \
    \  list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbhc9j0m_.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile : List[Long] = List(0l)\n        var i = 0\n        while (i < n)\
    \ {\n            pile.append(i+1l)\n            i = i+2\n        }\n        pile\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo01ymbzc.scala:18:17 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            pile.append(i+\e[31m1l\e[0m)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue append is not a member\
    \ of List[Long] - did you mean pile.appended?\n1 error found\n"
  stdout: ''
  timestamp: 1659795168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer(n)\n        val even = stones.takeWhile(_\
    \ % 2 == 0).length\n        val odd = stones.takeWhile(_ % 2 == 1).length\n  \
    \      stones.drop(even).take(odd).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkntd62lz.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795165
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile : List[Long] = List(n).reverse\n        val odd = if (n % 2 == 0)\
    \ n / 2 else 3 * n + 1\n        val even = if (n % 2 == 0) n / 2 else 3 * n\n\
    \        pile.takeWhile(_ < odd).reverse ++ pile.takeWhile(_ < even)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbv4949hq.scala:21)\n\tat Problem.main(tmpbv4949hq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile = mutable.ListBuffer.empty[Long]\n        pile.append(n)\n      \
    \  val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = if (n %\
    \ 2 == 0) n / 2 else n / 2\n        pile.append(odd)\n        pile.append(even)\n\
    \        pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3xf7me2k.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        var nextLevel = n.toLong\n\
    \        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n    \
    \            levels += nextLevel\n            } else {\n                levels\
    \ += nextLevel.toLong\n                nextLevel = nextLevel.toLong + 2\n    \
    \        }\n        }\n        levels.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0gfmt5xy.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones +=\
    \ n / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones\
    \ += n / 8589934592\n        stones += n / 17179869184\n        stones += n /\
    \ 34359738368\n        stones += n / 68719476736\n        stones += n / 137438953472\n\
    \        stones += n / 274877906944\n        stones += n / 549755813888\n    \
    \    stones += n / 1099511627776\n        stones += n / 2199023255552\n      \
    \  stones += n / 4398046511104\n        stones += n / 8796093022208\n        stones\
    \ += n / 17592186044416\n        stones += n / 35184372088832\n        stones\
    \ += n / 70368744177664\n        stones += n / 140737488355328\n        stones\
    \ += n / 281474976710656\n        stones += n / 562949953421312\n        stones\
    \ += n / 1125899906842624\n        stones += n / 22517998136\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa0d6qqh5.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n / 2 else n / 2 + 1\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22986.log

    '
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        val odd = if (n % 2 ==\
    \ 0) n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n\
    \        val nextLevel = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = nextLevel.toLong\n        result.add(nextLevelCount)\n        val nextLevelCount\
    \ = nextLevelCount.toLong\n        result.add(nextLevelCount)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3qwrrgbi.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnextLevelCount\e[0m = nextLevelCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnextLevelCount is already defined as \e[33mvalue\e[0m \e[35mnextLevelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp3qwrrgbi.scala:15:25 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0)\
    \ n / 2 else n / 2 + 1\n        val even = n / 2\n        levels += n\n      \
    \  levels += odd\n        levels += even\n        levels.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: 'OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000d0000000,
    805306368, 0) failed; error=''Not enough space'' (errno=12)

    '
  stdout: '#

    # There is insufficient memory for the Java Runtime Environment to continue.

    # Native memory allocation (mmap) failed to map 805306368 bytes for committing
    reserved memory.

    # An error report file with more information is saved as:

    # /home/a.guha/repos/polyglot-codegen-evaluation/src/hs_err_pid22707.log

    '
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0)\
    \ n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n\
    \        levels += n\n        levels += odd\n        levels += even\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpca28rzxq.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795069
