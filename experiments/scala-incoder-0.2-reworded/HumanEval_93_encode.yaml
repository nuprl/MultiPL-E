name: HumanEval_93_encode
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes a message, and encodes in such a \n    // way\
  \ that it swaps case of all letters, replaces all vowels in \n    // the message\
  \ with the letter that appears 2 places ahead of that \n    // vowel in the english\
  \ alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"\
  test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    //\
  \ (\"tHKS KS C MGSSCGG\")\n    def encode(message : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
  )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n\
  \    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"This is\
  \ a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw\
  \ WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
completions: ["        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter))\
    \ + letter)\n        val messageWithVowelsAndLettersTwoAheadOfVowels = messageWithVowels.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter)\
    \ + 1))\n        val messageWithVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowels\
    \ = messageWithVowelsAndLettersTwoAheadOfVowels.map(letter => vowels.indexOf(letter)\
    \ + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter) + 1) +\
    \ alphabet(vowels.indexOf(letter) + 2))\n        val messageWithVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowels\
    \ = messageWithVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowels.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter)\
    \ + 1) + alphabet(vowels.indexOf(letter) + 2) + alphabet(vowels.indexOf(letter)\
    \ + 3))\n        val messageWithVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowels\
    \ = messageWithVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowels.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter)\
    \ + 1) + alphabet(vowels.indexOf(letter) + 2) + alphabet(vowels.indexOf(letter)\
    \ + 3) + alphabet(vowels.indexOf(letter) + 4))\n        val messageWithVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowel",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => letter match {\n    \
    \        case letter if letter != ' ' => alphabet(alphabet.indexOf(letter)+1)\n\
    \            case letter if letter != ' ' =>  alphabet(alphabet.indexOf(letter)-1)\n\
    \            case letter => letter\n        }).mkString(\"\")\n        val newMessageArray\
    \ = newMessage.split(\"\")\n        val newVowels = vowels.map(letter => letter\
    \ match {\n            case letter if letter != ' ' =>  alphabet(alphabet.indexOf(letter)+1)\n\
    \            case letter if letter != ' ' =>  alphabet(alphabet.indexOf(letter)-1)\n\
    \            case letter => letter\n        }).mkString(\"\")\n        newMessageArray.zip(newVowels).map(x\
    \ => x._1 match {\n            case letter if letter != ' ' =>  alphabet(alphabet.indexOf(x._2)+1)\n\
    \            case letter if letter != ' ' =>  alphabet(alphabet.indexOf(x._2)-1)\n\
    \            case letter => x._2\n        }).mkString(\"\")", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val messageWithVowels = message.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val messageWithVowelsAndTwoLettersBefore = messageWithVowels.map(letter\
    \ => vowels.indexOf(letter) + 2)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBefore.map(letter => vowels.indexOf(letter)\
    \ + 3)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter.map(letter => vowels.indexOf(letter)\
    \ + 4)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfter.map(letter\
    \ => vowels.indexOf(letter) + 5)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter.map(letter\
    \ => vowels.indexOf(letter) + 6)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter.map(letter\
    \ => vowels.indexOf(letter) + 7)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter.map(letter\
    \ => vowels.indexOf(letter) + 8)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfter",
  "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter))\
    \ + 1)\n        val newMessage2 = newMessage.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.indexOf(letter)) + 1)\n        newMessage2.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + 1)",
  "        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels = message.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter))\n      \
    \  val messageWithVowelsAndTwoLettersBefore = messageWithVowels.map(letter =>\
    \ vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter))\n        val\
    \ messageWithVowelsAndTwoLettersAfter = messageWithVowelsAndTwoLettersBefore.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter))\n      \
    \  val messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore = messageWithVowelsAndTwoLettersAfter.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter))\n      \
    \  val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore.map(letter => vowels.indexOf(letter)\
    \ + 1).map(letter => vowels.charAt(letter))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter))\n      \
    \  val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter))\n      \
    \  val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter))\n      \
    \  val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLetters", "        val vowels = \"\
    aeiouAEIOU\"\n        val messageLength = message.length\n        val newMessage\
    \ = mutable.StringBuilder()\n        val newMessageLength = messageLength\n  \
    \      val newMessageLength = messageLength\n        val newMessageLength = messageLength\n\
    \        val newMessageLength = messageLength\n        val newMessageLength =\
    \ messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val new",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val messageArrayLength = messageArray.length\n        val newMessageArray\
    \ = Array.fill(messageArrayLength)(\"\")\n        val newMessageArrayLength =\
    \ newMessageArray.length\n        val newMessageArray2 = Array.fill(messageArrayLength)(\"\
    \")\n        val newMessageArray2Length = newMessageArray2.length\n        val\
    \ newMessageArray3 = Array.fill(messageArrayLength)(\"\")\n        val newMessageArray3Length\
    \ = newMessageArray3.length\n        val newMessageArray4 = Array.fill(messageArrayLength)(\"\
    \")\n        val newMessageArray4Length = newMessageArray4.length\n        val\
    \ newMessageArray5 = Array.fill(messageArrayLength)(\"\")\n        val newMessageArray5Length\
    \ = newMessageArray5.length\n        val newMessageArray6 = Array.fill(messageArrayLength)(\"\
    \")\n        val newMessageArray6Length = newMessageArray6.length\n        val\
    \ newMessageArray7 = Array.fill(messageArrayLength)(\"\")\n        val newMessageArray7Length\
    \ = newMessageArray7.length\n        val newMessageArray8 = Array.fill(messageArrayLength)(\"\
    \")\n        val newMessageArray8Length = newMessageArray8.length\n        val\
    \ newMessageArray9 = Array.fill(messageArrayLength)(\"\")\n        val newMessageArray9Length\
    \ = newMessageArray9.length\n        val newMessageArray10 = Array.fill(messageArrayLength)(\"\
    \")\n        val newMessageArray10Length = newMessageArray10.length\n        val\
    \ newMessageArray11 = Array.fill(messageArrayLength)(\"\")\n        val newMessageArray11Length\
    \ = newMessageArray11.length\n        val newMessageArray12 = Array.fill(messageArrayLength)(\"\
    \")\n        val newMessageArray12Length = newMessageArray12.length\n        val\
    \ newMessageArray13 = Array.fill(messageArrayLength)(\"\")\n        val newMessageArray13Length\
    \ = newMessageArray13.length\n        val newMessageArray14 = Array.fill(messageArrayLength)(\"\
    \")\n        val newMessageArray14Length = newMessageArray14.length\n        val\
    \ newMessageArray15 = Array.fill(messageArrayLength)(\"\")\n        val newMessageArray15Length\
    \ = newMessageArray15.length\n        val newMessageArray16 = Array.fill(messageArrayLength)(\"\
    \")\n        val newMessageArray16Length = newMessageArray16.length\n        val\
    \ newMessageArray17 = Array.fill(messageArrayLength)(\"\")\n        val newMessageArray17Length\
    \ = newMessageArray17.length\n        val newMessageArray18 = Array.fill(messageArrayLength)(\"\
    \")\n        val newMessageArray18", "        val vowels = \"aeiou\"\n       \
    \ val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter\
    \ => \n            if (vowels.contains(letter)) letter else \n               \
    \ alphabet.indexOf(alphabet.indexOf(letter) + 2).toChar)\n        newMessage.toString",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageWithVowels\
    \ = message.map(letter => vowels.contains(letter) ? letter : letter.swapCase)\n\
    \        val messageWithVowelsAndTwoLettersBefore = messageWithVowels.map(letter\
    \ => vowels.contains(letter) ? letter : letter.swapCase)\n        val messageWithVowelsAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBefore.map(letter => vowels.contains(letter)\
    \ ? letter : letter.swapCase)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBefore\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => vowels.contains(letter)\
    \ ? letter : letter.swapCase)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBefore.map(letter => vowels.contains(letter)\
    \ ? letter : letter.swapCase)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfter.map(letter\
    \ => vowels.contains(letter) ? letter : letter.swapCase)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore.map(letter\
    \ => vowels.contains(letter) ? letter : letter.swapCase)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfter.map(letter\
    \ => vowels.contains(letter) ? letter : letter.swapCase)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore.map(letter\
    \ => vowels.contains(letter) ? letter : letter.swapCase)\n        val messageWithVowelsAnd",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.map(letter => {\n\
    \            val vowelIndex = vowels.indexOf(letter)\n            if (vowelIndex\
    \ != -1) {\n                val vowel = vowels(vowelIndex)\n                val\
    \ vowelIndex = vowels.indexOf(vowel)\n                val vowelIndex = vowelIndex\
    \ + 2\n                vowels(vowelIndex) == letter ? vowel : letter\n       \
    \     } else {\n                letter\n            }\n        }).mkString(\"\"\
    )\n        newMessage", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            letter match {\n                case 'a' => alphabet(0)\n \
    \               case 'b' => alphabet(1)\n                case 'c' => alphabet(2)\n\
    \                case 'd' => alphabet(3)\n                case 'e' => alphabet(4)\n\
    \                case 'f' => alphabet(5)\n                case 'g' => alphabet(6)\n\
    \                case 'h' => alphabet(7)\n                case 'i' => alphabet(8)\n\
    \                case 'j' => alphabet(9)\n                case 'k' => alphabet(10)\n\
    \                case 'l' => alphabet(11)\n                case 'm' => alphabet(12)\n\
    \                case 'n' => alphabet(13)\n                case 'o' => alphabet(14)\n\
    \                case 'p' => alphabet(15)\n                case 'q' => alphabet(16)\n\
    \                case 'r' => alphabet(17)\n                case 's' => alphabet(18)\n\
    \                case 't' => alphabet(19)\n                case 'u' => alphabet(20)\n\
    \                case 'v' => alphabet(21)\n                case 'w' => alphabet(22)\n\
    \                case 'x' => alphabet(23)\n                case 'y' => alphabet(24)\n\
    \                case 'z' => alphabet(25)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage = messageArray.map(letter =>\
    \ \n            letter match {\n                case 'a' => vowels(0)\n      \
    \          case 'b' => vowels(1)\n                case 'c' => vowels(2)\n    \
    \            case 'd' => vowels(3)\n                case 'e' => vowels(4)\n  \
    \              case 'f' => vowels(5)\n                case 'g' => vowels(6)\n\
    \                case 'h' => vowels(7)\n                case 'i' => vowels(8)\n\
    \                case 'j' => vowels(9)\n                case 'k' => vowels(10)\n\
    \                case 'l' => vowels(11)\n                case 'm' => vowels(12)\n\
    \                case 'n' => vowels(13)\n                case 'o' => vowels(14)\n\
    \                case 'p' => vowels(15)\n                case 'q' => vowels(16)\n\
    \                case 'r' => vowels(17)\n                case 's' => vowels(18)\n\
    \                case 't' => vowels(19)\n                case 'u' => vowels(20)\n\
    \                case 'v' => vowels(21)\n                case 'w' => vowels(22)\n\
    \                case 'x' => vowels(23)\n                case 'y' => vowels(24)\n\
    \                case 'z' => vowels(25)\n                case letter => letter\n\
    \            }\n        )\n        val newMessageString = newMessageArray.toSeq.mkString(\"\
    \")\n        val ", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => {\n            val index\
    \ = alphabet.indexOf(letter)\n            val vowelIndex = vowels.indexOf(letter)\n\
    \            val nextLetter = alphabet(index+1)\n            val nextVowel = alphabet(vowelIndex+1)\n\
    \            val newLetter = if (index == vowelIndex) letter else nextLetter\n\
    \            val newVowel = if (vowelIndex == index) letter else nextVowel\n \
    \           val newLetterAndVowel = if (index == vowelIndex) letter else nextLetter\
    \ + nextVowel\n            val newVowelAndLetter = if (vowelIndex == index) letter\
    \ else nextVowel + nextLetter\n            newLetterAndVowel + newVowelAndLetter\n\
    \        }).mkString(\"\")\n        newMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        val newMessage\
    \ = message.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter))\n\
    \        val newMessage2 = newMessage.map(letter => alphabet.indexOf(letter) +\
    \ vowels.indexOf(letter))\n        val newMessage3 = newMessage2.map(letter =>\
    \ alphabet.indexOf(letter) + vowels.indexOf(letter))\n        val newMessage4\
    \ = newMessage3.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter))\n\
    \        val newMessage5 = newMessage4.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter))\n        val newMessage6 = newMessage5.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter))\n        val newMessage7\
    \ = newMessage6.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter))\n\
    \        val newMessage8 = newMessage7.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter))\n        val newMessage9 = newMessage8.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter))\n        val newMessage10\
    \ = newMessage9.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter))\n\
    \        val newMessage11 = newMessage10.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter))\n        val newMessage12 = newMessage11.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter))\n        val newMessage13\
    \ = newMessage12.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter))\n\
    \        val newMessage14 = newMessage13.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter))\n        val newMessage15 = newMessage14.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter))\n        val newMessage16\
    \ = newMessage15.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter))\n\
    \        val newMessage17 = newMessage16.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter))\n        val newMessage18 = newMessage17.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter))\n        val newMessage19\
    \ = newMessage18.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter))\n\
    \        val newMessage20 = newMessage19.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter))\n        val newMessage21 = newMessage20.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter))\n        val newMessage22\
    \ = newMessage21.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter))\n\
    \        val ", "        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageLength = message.length\n   \
    \     val encodedMessage = mutable.Buffer.empty[String]\n        var i = 0\n \
    \       while (i < messageLength) {\n            val currentChar = message.charAt(i)\n\
    \            val nextChar = message.charAt(i + 1)\n            val currentCharIndex\
    \ = alphabet.indexOf(currentChar)\n            val nextCharIndex = alphabet.indexOf(nextChar)\n\
    \            val currentCharVowelIndex = vowels.indexOf(currentChar)\n       \
    \     val nextCharVowelIndex = vowels.indexOf(nextChar)\n            val currentCharVowel\
    \ = vowels(currentCharIndex)\n            val nextCharVowel = vowels(nextCharIndex)\n\
    \            if (currentCharIndex == nextCharIndex) {\n                encodedMessage\
    \ += currentChar\n                i += 1\n            } else if (currentCharVowelIndex\
    \ == nextCharVowelIndex) {\n                encodedMessage += currentCharVowel\n\
    \                i += 1\n            } else if (currentCharVowelIndex < nextCharVowelIndex)\
    \ {\n                encodedMessage += alphabet(currentCharIndex + 2)\n      \
    \          i += 1\n            } else {\n                encodedMessage += alphabet(currentCharIndex\
    \ + 2)\n                i += 1\n            }\n        }\n        encodedMessage.toString",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowel.zip(vowel.tail).map { case (vowel1, vowel2) => vowel1 ->\
    \ vowel2 }\n            } else {\n                letter -> letter\n         \
    \   }\n        })\n        newMessageArray.toSeq.mkString(\"\")", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n  \
    \      val encodedMessage = messageArray.foldLeft(\"\")( (acc, elem) => {\n  \
    \          val index = vowels.indexOf(elem)\n            if (index != -1) {\n\
    \                val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                acc + (if (vowel == elem) vowel else \"a\")\n            } else\
    \ {\n                acc + elem\n            }\n        })\n        encodedMessage",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index >= 0) vowels(index - 1)\
    \ else letter\n        }).mkString(\"\")\n        encodedMessage", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n  \
    \      val newMessage = messageArray.map(letter => vowels.indexOf(letter) + 1).mkString(\"\
    \")\n        val newMessageArray = newMessage.split(\"\")\n        val newMessageArrayLength\
    \ = newMessageArray.length\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = new", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageWithVowels = message.replaceAll(vowels, vowels.charAt(2))\n\
    \        val messageWithVowelsAndTwoLettersBefore = messageWithVowels.replaceAll(\"\
    [aeiou]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBefore.replaceAll(\"[aeiou]\", \"$0$2\")\n \
    \       val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter.replaceAll(\"[aeiou]\"\
    , \"$0$2\")\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfter.replaceAll(\"\
    [aeiou]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter.replaceAll(\"\
    [aeiou]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter.replaceAll(\"\
    [aeiou]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter.replaceAll(\"\
    [aeiou]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwo", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ messageArray = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val replacement = vowels(index) + vowel\n\
    \                replacement\n            } else {\n                letter\n \
    \           }\n        }).mkString\n        encodedMessage", "        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(x\
    \ => alphabet(alphabet.indexOf(x) + 1))\n        val newVowels = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 2))\n        newMessage.zip(newVowels).map(x\
    \ => x._1 -> x._2).mkString", "        val alphabet = List(\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n     \
    \   val newMessage = message.map(letter => alphabet(alphabet.indexOf(letter) +\
    \ 1))\n        newMessage.map(letter => vowels.indexOf(letter) + 1).map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))", "        val vowels = \"aeiouAEIOU\"\
    \n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val vowelIndexes\
    \ = vowels.toList.map(letter => letters.indexOf(letter))\n        val vowelIndexes2\
    \ = vowels.toList.map(letter => letters.indexOf(letter) + 2)\n        val messageList\
    \ = message.split(\"\")\n        val newMessage = messageList.map(letter => {\n\
    \            if (vowelIndexes.contains(letter)) {\n                letter\n  \
    \          } else if (vowelIndexes2.contains(letter)) {\n                letter\n\
    \            } else {\n                letter.toUpperCase\n            }\n   \
    \     }).mkString(\"\")\n        newMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map {\n            char =>\n                if (vowels.contains(char))\n\
    \                    char\n                else\n                    vowels.indexOf(char)\
    \ + 2\n        }\n        val newMessage = messageArray.toList.mkString(\"\")\n\
    \        newMessageArray.toList.mkString(\"\")", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageList = message.split(\" \").toList\n        val newMessage\
    \ = messageList.map(letter => \n            vowels.indexOf(letter) match {\n \
    \               case -1 => letter\n                case 0 => letter\n        \
    \        case 1 => vowels(letter - 1) + vowels(letter)\n                case 2\
    \ => vowels(letter - 1) + vowels(letter - 1)\n            }\n        ).mkString(\"\
    \")\n        val newMessageList = newMessage.split(\" \").toList\n        val\
    \ newMessageList2 = newMessageList.map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(letter - 1) + vowels(letter)\n             \
    \   case 2 => vowels(letter - 1) + vowels(letter - 1)\n            }\n       \
    \ ).mkString(\"\")\n        val newMessageList3 = newMessageList2.split(\" \"\
    ).toList\n        val newMessageList4 = newMessageList3.map(letter => \n     \
    \       vowels.indexOf(letter) match {\n                case -1 => letter\n  \
    \              case 0 => letter\n                case 1 => vowels(letter - 1)\
    \ + vowels(letter)\n                case 2 => vowels(letter - 1) + vowels(letter\
    \ - 1)\n            }\n        ).mkString(\"\")\n        val newMessageList5 =\
    \ newMessageList4.split(\" \").toList\n        val newMessageList6 = newMessageList5.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case 0 => letter\n                case 1 => vowels(letter\
    \ - 1) + vowels(letter)\n                case 2 => vowels(letter - 1) + vowels(letter\
    \ - 1)\n            }\n        ).mkString(\"\")\n        val newMessageList7 =\
    \ newMessageList6.split(\" \").toList\n        val newMessageList8 = newMessageList7.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case 0 => letter\n                case 1 => vowels(letter\
    \ - 1) + vowels(letter)\n                case 2 => vowels(letter - 1) + vowels(letter\
    \ - 1)\n            }\n        ).mkString(\"\")\n        val newMessageList9 =\
    \ newMessageList8.split(\" \").toList\n        val newMessageList10 = newMessageList9.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case 0 => letter\n                case 1 => vowels(letter\
    \ - 1) + vowels(letter)\n                case 2 => vowels(letter - 1) + vowels(letter\
    \ - 1)\n            }\n        ).mkString(\"\")\n        val newMessageList11\
    \ = newMessageList10.split(\" \").toList\n        val newMessageList12 = newMessageList11.map(letter\
    \ => \n            vowels.indexOf(letter", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => \n            vowels.indexOf(letter) match {\n\
    \                case -1 => letter\n                case 0 => letter\n       \
    \         case 1 => vowels(vowels.indexOf(letter) + 1)\n            })\n     \
    \   val newMessage = newMessageArray.toList\n        val newMessageString = newMessage.toString\n\
    \        newMessageString", "        val vowels = \"aeiouAEIOU\".toCharArray\n\
    \        val messageArray = message.toCharArray\n        val newMessage = messageArray.map\
    \ { c =>\n            if (vowels(c) == vowels(messageArray(c+2)) && vowels(c)\
    \ != vowels(messageArray(c+1))) {\n                vowels(c) + vowels(messageArray(c+2))\n\
    \            } else {\n                c\n            }\n        }\n        newMessage.toString",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val newMessage = new Array[Char](messageArray.length)\n        var i\
    \ = 0\n        while (i < messageArray.length) {\n            val currentChar\
    \ = messageArray(i)\n            val nextChar = messageArray(i + 1)\n        \
    \    if (vowels(currentChar) == vowels(nextChar)) {\n                newMessage(i)\
    \ = vowels(currentChar)\n                newMessage(i + 1) = vowels(nextChar)\n\
    \                i += 2\n            } else {\n                newMessage(i) =\
    \ vowels(currentChar)\n                newMessage(i + 1) = vowels(nextChar)\n\
    \                i += 1\n            }\n        }\n        new String(newMessage)",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val replacement = vowels(index)\n                letter match\
    \ {\n                    case \"a\" => replacement\n                    case \"\
    e\" => replacement\n                    case \"i\" => replacement\n          \
    \          case \"o\" => replacement\n                    case \"u\" => replacement\n\
    \                    case \"A\" => replacement\n                    case \"E\"\
    \ => replacement\n                    case \"I\" => replacement\n            \
    \        case \"O\" => replacement\n                    case \"U\" => replacement\n\
    \                    case _ => letter\n                }\n            } else {\n\
    \                letter\n            }\n        })\n        val newMessage = String.join(\"\
    \", newMessageArray)\n        newMessage", "        val vowels = Set(\"a\", \"\
    e\", \"i\", \"o\", \"u\")\n        val messageWithVowels = message.map(letter\
    \ => vowels.contains(letter) ? letter : vowels.find(letter => letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && ", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ messageList = message.split(\"\")\n        val newMessageList = messageList.map(letter\
    \ => \n            if (vowels.contains(letter)) letter else \n               \
    \ vowels.indexOf(letter) + vowels.indexOf(vowels.charAt(vowels.indexOf(letter)\
    \ + 1))\n        )\n        val newMessage = newMessageList.toList\n        val\
    \ newMessageString = newMessage.toString.toUpperCase\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringBuilder = new StringBuilder(newMessageStringLength)\n\
    \        var i = 0\n        while (i < newMessageStringLength) {\n           \
    \ if (newMessageString(i) == newMessageString(i + 1))\n                newMessageStringBuilder.append(newMessageString(i))\n\
    \            else\n                newMessageStringBuilder.append(newMessageString(i))\n\
    \            i += 1\n        }\n        return newMessageStringBuilder.toString",
  "        val vowels = \"aeiouAEIOU\"\n        val newMessage = message.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case i => vowels(i + 2)\n        })\n        val newMessageString = newMessage.toList\n\
    \        newMessageString.reverse.mkString(\"\")", "        val vowels = \"aeiouAEIOU\"\
    \n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.map(letter => {\n\
    \            val index = alphabet.indexOf(letter)\n            val vowelIndex\
    \ = vowels.indexOf(letter)\n            val nextVowelIndex = vowelIndex + 2\n\
    \            val nextLetter = alphabet(nextVowelIndex)\n            val nextVowel\
    \ = vowels(nextVowelIndex)\n            letter match {\n                case letter\
    \ if index >= 0 && index < vowels.length => letter\n                case letter\
    \ if index >= vowelIndex && index < vowels.length => nextLetter\n            \
    \    case letter if index >= vowelIndex && index >= vowels.length => nextVowel\n\
    \                case letter => letter\n            }\n        }).mkString\n \
    \       newMessage", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val result = new StringBuilder\n        for (i <- 0 until messageList.length)\
    \ {\n            val currentChar = messageList(i)\n            val nextChar =\
    \ messageList(i+1)\n            val currentCharIndex = alphabet.indexOf(currentChar)\n\
    \            val nextCharIndex = alphabet.indexOf(nextChar)\n            val currentCharVowel\
    \ = vowels.contains(currentChar)\n            val nextCharVowel = vowels.contains(nextChar)\n\
    \            if (currentCharIndex < nextCharIndex) {\n                if (currentCharVowel\
    \ && nextCharVowel) {\n                    result.append(alphabet(currentCharIndex\
    \ + 2))\n                    result.append(alphabet(currentCharIndex + 1))\n \
    \                   result.append(alphabet(nextCharIndex + 1))\n             \
    \       result.append(alphabet(nextCharIndex + 2))\n                } else {\n\
    \                    result.append(alphabet(currentCharIndex + 1))\n         \
    \           result.append(alphabet(nextCharIndex + 1))\n                }\n  \
    \          } else {\n                if (currentCharVowel && nextCharVowel) {\n\
    \                    result.append(alphabet(currentCharIndex + 2))\n         \
    \           result.append(alphabet(nextCharIndex + 2))\n                } else\
    \ {\n                    result.append(alphabet(currentCharIndex + 1))\n     \
    \               result.append(alphabet(nextCharIndex + 1))\n                }\n\
    \            }\n        }\n        result.toString()", "        val vowels = \"\
    aeiou\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        val messageList\
    \ = message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    )( (acc, elem) => {\n            val index = alphabet.indexOf(elem)\n        \
    \    val nextIndex = index + 1\n            val nextElem = alphabet(nextIndex)\n\
    \            val nextChar = if (nextIndex < alphabet.length) nextElem else elem\n\
    \            acc + (if (vowels.contains(elem)) elem.toUpperCase else elem.toLowerCase)\
    \ + nextChar\n        })\n        encodedMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index >= 0) letter else vowels((index + 2) % vowels.length)\n\
    \        }).mkString\n        encodedMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index != -1) {\n                val vowelIndex = index + 1\n\
    \                if (vowelIndex < vowels.length) vowels(vowelIndex) else letter\n\
    \            } else {\n                letter\n            }\n        })\n   \
    \     val newMessage = newMessageArray.toList\n        val newMessageString =\
    \ newMessage.toString\n        val newMessageArray2 = newMessageString.split(\"\
    \")\n        val newMessageArray3 = newMessageArray2.map(letter => {\n       \
    \     if (vowels.indexOf(letter) != -1) {\n                vowels.indexOf(letter)\n\
    \            } else {\n                letter\n            }\n        })\n   \
    \     val newMessage2 = newMessageArray3.toList\n        val newMessageString2\
    \ = newMessage2.toString\n        val newMessageArray4 = newMessageString2.split(\"\
    \")\n        val newMessageArray5 = newMessageArray4.map(letter => {\n       \
    \     if (vowels.indexOf(letter) != -1) {\n                vowels.indexOf(letter)\n\
    \            } else {\n                letter\n            }\n        })\n   \
    \     val newMessage3 = newMessageArray5.toList\n        val newMessageString3\
    \ = newMessage3.toString\n        val newMessageArray6 = newMessageString3.split(\"\
    \")\n        val newMessageArray7 = newMessageArray6.map(letter => {\n       \
    \     if (vowels.indexOf(letter) != -1) {\n                vowels.indexOf(letter)\n\
    \            } else {\n                letter\n            }\n        })\n   \
    \     val newMessage4 = newMessageArray7.toList\n        val newMessageString4\
    \ = newMessage4.toString\n        val newMessageArray8 = newMessageString4.split(\"\
    \")\n        val newMessageArray9 = newMessageArray8.map(letter => {\n       \
    \     if (vowels.indexOf(letter) != -1) {\n                vowels.indexOf(letter)\n\
    \            } else {\n                letter\n            }\n        })\n   \
    \     val newMessage5 = newMessageArray9.toList\n        val newMessageString5\
    \ = newMessage5.toString\n        val newMessageArray10 = newMessageString5.split(\"\
    \")\n        val newMessageArray11 = newMessageArray10.map(letter => {\n     \
    \       if (vowels.indexOf(letter) != -1) {\n                vowels.indexOf(letter)\n\
    \            } else {\n                letter\n            }\n        })\n   \
    \     val newMessage6 = newMessageArray11.toList\n        val newMessageString6\
    \ = newMessage6.toString\n        val newMessageArray12 = newMessageString6.split(\"\
    \")\n        val newMessageArray13 = newMessageArray12.map(letter => {\n     \
    \       if (vowels.indexOf(letter) != -1) {\n                vowels.indexOf(letter)\n\
    \            } else {\n                letter\n            }", "        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val newMessageList = messageList.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList2 = newMessageList.map(x => vowels.indexOf(x) + 1)\n\
    \        val newMessageList3 = newMessageList2.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList4 = newMessageList3.map(x => vowels.indexOf(x) + 1)\n\
    \        val newMessageList5 = newMessageList4.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList6 = newMessageList5.map(x => vowels.indexOf(x) + 1)\n\
    \        val newMessageList7 = newMessageList6.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList8 = newMessageList7.map(x => vowels.indexOf(x) + 1)\n\
    \        val newMessageList9 = newMessageList8.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList10 = newMessageList9.map(x => vowels.indexOf(x) + 1)\n\
    \        val newMessageList11 = newMessageList10.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList12 = newMessageList11.map(x => vowels.indexOf(x) +\
    \ 1)\n        val newMessageList13 = newMessageList12.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList14 = newMessageList13.map(x => vowels.indexOf(x) +\
    \ 1)\n        val newMessageList15 = newMessageList14.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList16 = newMessageList15.map(x => vowels.indexOf(x) +\
    \ 1)\n        val newMessageList17 = newMessageList16.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList18 = newMessageList17.map(x => vowels.indexOf(x) +\
    \ 1)\n        val newMessageList19 = newMessageList18.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList20 = newMessageList19.map(x => vowels.indexOf(x) +\
    \ 1)\n        val newMessageList21 = newMessageList20.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList22 = newMessageList21.map(x => vowels.indexOf(x) +\
    \ 1)\n        val newMessage", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0)) + 1)\n      \
    \  val newMessage2 = newMessage.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(1))\
    \ + 1)\n        val newMessage3 = newMessage2.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(2)) + 1)\n        val newMessage4 = newMessage3.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(3)) + 1)\n      \
    \  val newMessage5 = newMessage4.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(4))\
    \ + 1)\n        val newMessage6 = newMessage5.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(5)) + 1)\n        val newMessage7 = newMessage6.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(6)) + 1)\n      \
    \  val newMessage8 = newMessage7.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(7))\
    \ + 1)\n        val newMessage9 = newMessage8.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(8)) + 1)\n        val newMessage10 = newMessage9.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(9)) + 1)\n      \
    \  val newMessage11 = newMessage10.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(10))\
    \ + 1)\n        val newMessage12 = newMessage11.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(11)) + 1)\n        val newMessage13 = newMessage12.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(12)) + 1)\n     \
    \   val newMessage14 = newMessage13.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(13))\
    \ + 1)\n        val newMessage15 = newMessage14.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(14)) + 1)\n        val newMessage16 = newMessage15.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(15)) + 1)\n     \
    \   val newMessage17 = newMessage16.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(16))\
    \ + 1)\n        val newMessage18 = newMessage17.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(17)) + 1)\n        val newMessage19 = newMessage18.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageWithVowels = message.replaceAll(vowels, vowels.charAt(2))\n\
    \        val messageWithVowelsAndTwoLettersBefore = messageWithVowels.replaceAll(\"\
    [aeiou]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersAfter = messageWithVowelsAndTwoLettersBefore.replaceAll(\"\
    [AEIOU]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfter.replaceAll(\"[aeiouAEIOU]\", \"$0$2\"\
    )\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore.replaceAll(\"\
    [AEIOUAEIOU]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAll(\"\
    [AEIOUAEIOUAEIOU]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAll(\"\
    [AEIOUAEIOUAEIOUAEIOU]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAll(\"\
    [AEIOUAEIOUAEIOUAEIOUAEIOU]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLetters", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map {\n  \
    \          letter =>\n                val index = alphabet.indexOf(letter)\n \
    \               if (index != -1) {\n                    val nextLetter = alphabet(index+1)\n\
    \                    val nextIndex = alphabet.indexOf(nextLetter)\n          \
    \          if (nextIndex != -1) {\n                        val nextLetter2 = alphabet(nextIndex+1)\n\
    \                        alphabet(index) = nextLetter2\n                     \
    \   alphabet(nextIndex) = letter\n                    }\n                    else\
    \ {\n                        alphabet(index) = letter\n                    }\n\
    \                }\n                else {\n                    alphabet(alphabet.indexOf(letter))\
    \ = letter\n                }\n        }\n        val newMessage = alphabet(0)\
    \ +\n            newMessageArray.toList.mkString(\"\") +\n            alphabet(alphabet.size\
    \ - 1)\n        newMessage", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter))\
    \ + letter)\n        val messageWithVowelsAndVowelsTwoAheadOfVowel = messageWithVowels.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter)\
    \ + 1))\n        val messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowel\
    \ = messageWithVowelsAndVowelsTwoAheadOfVowel.map(letter => vowels.indexOf(letter)\
    \ + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter) + 1) +\
    \ alphabet(vowels.indexOf(letter) + 2))\n        val messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowel\
    \ = messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowel.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter)\
    \ + 1) + alphabet(vowels.indexOf(letter) + 2) + alphabet(vowels.indexOf(letter)\
    \ + 3))\n        val messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowel\
    \ = messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowel.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter)\
    \ + 1) + alphabet(vowels.indexOf(letter) + 2) + alphabet(vowels.indexOf(letter)\
    \ + 3) + alphabet(vowels.indexOf(letter) + 4))\n        val messageWithVow", " \
    \       val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val newMessage = new mutable.ArrayBuilder[Char]\n        var i = 0\n\
    \        while (i < messageArray.length) {\n            val currentChar = messageArray(i)\n\
    \            val nextChar = messageArray(i + 1)\n            if (vowels.contains(currentChar)\
    \ && vowels.contains(nextChar)) {\n                newMessage.append(vowels(vowels.indexOf(currentChar)\
    \ + 1))\n                newMessage.append(vowels(vowels.indexOf(nextChar) + 1))\n\
    \            } else {\n                newMessage.append(currentChar)\n      \
    \      }\n            i += 1\n        }\n        newMessage.toString.toUpperCase",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels = vowels.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 2))\n        newMessage.zip(newVowels).map(x\
    \ => x._1 + x._2).mkString(\"\")", "        val vowels = \"aeiouAEIOU\"\n    \
    \    val newMessage = message.map(letter => vowels.indexOf(letter) match {\n \
    \           case -1 => letter\n            case 0 => letter.toUpperCase\n    \
    \        case 1 => letter.toLowerCase\n            case 2 => letter.toUpperCase\n\
    \            case _ => letter\n        })\n        val newMessage2 = newMessage.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case 0 => letter.toUpperCase\n            case 1 => letter.toLowerCase\n \
    \           case 2 => letter.toUpperCase\n            case _ => letter\n     \
    \   })\n        val newMessage3 = newMessage2.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => letter.toUpperCase\n\
    \            case 1 => letter.toLowerCase\n            case 2 => letter.toUpperCase\n\
    \            case _ => letter\n        })\n        val newMessage4 = newMessage3.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case 0 => letter.toUpperCase\n            case 1 => letter.toLowerCase\n \
    \           case 2 => letter.toUpperCase\n            case _ => letter\n     \
    \   })\n        val newMessage5 = newMessage4.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => letter.toUpperCase\n\
    \            case 1 => letter.toLowerCase\n            case 2 => letter.toUpperCase\n\
    \            case _ => letter\n        })\n        val newMessage6 = newMessage5.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case 0 => letter.toUpperCase\n            case 1 => letter.toLowerCase\n \
    \           case 2 => letter.toUpperCase\n            case _ => letter\n     \
    \   })\n        val newMessage7 = newMessage6.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => letter.toUpperCase\n\
    \            case 1 => letter.toLowerCase\n            case 2 => letter.toUpperCase\n\
    \            case _ => letter\n        })\n        val newMessage8 = newMessage7.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case 0 => letter.toUpperCase\n            case 1 => letter.toLowerCase\n \
    \           case 2 => letter.toUpperCase\n            case _ => letter\n     \
    \   })\n        val newMessage9 = newMessage8.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => letter.toUpperCase\n\
    \            case 1 => letter.toLowerCase\n            case 2 => letter.toUpperCase\n\
    \            case _ => letter\n        })\n        val newMessage10 = newMessage9.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case 0 => letter.toUpperCase\n            case 1 => letter.toLowerCase\n \
    \           case 2 => letter.toUpperCase\n            case _ => letter\n     \
    \   })\n        val newMessage11 = newMessage10.map(letter => vowels.indexOf(",
  "        val vowels = \"aeiouAEIOU\"\n        val messageLength = message.length\n\
    \        val encodedMessage = mutable.StringBuilder()\n        val alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n        val vowelsCount = message.count(vowels)\n\
    \        val vowelsPosition = vowels.toList.map(alphabet.indexOf(_))\n       \
    \ val vowelsPositionCount = vowelsPosition.count(_ > 0)\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPosition = vowelsPosition.toList\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPositionCount = vowelsPositionCount.toInt\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPositionCount = vowelsPositionCount.toInt\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPositionCount = vowelsPositionCount.toInt\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPositionCount = vowelsPositionCount.toInt\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPositionCount = vowelsPositionCount.toInt\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPositionCount = vowelsPositionCount.toInt\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPositionCount = vowelsPositionCount.toInt\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPositionCount = vowelsPositionCount.toInt\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPositionCount = vowelsPositionCount.toInt\n        val vowelsPositionCount\
    \ = ", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels\
    \ = vowels.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        newMessage.zip(newVowels).map(x\
    \ => x.swap).mkString(\"\")", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels = vowels.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 2))\n        newMessage.zip(newVowels).map(x\
    \ => x._1 + x._2).mkString(\"\")", "        val vowels = \"aeiou\"\n        val\
    \ messageWithVowels = message.map(letter => vowels.indexOf(letter) + 1)\n    \
    \    val messageWithVowelsAndTwoLettersBefore = messageWithVowels.map(letter =>\
    \ vowels.indexOf(letter) + 2)\n        val messageWithVowelsAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBefore.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBefore = messageWithVowelsAndTwoLettersAfter.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBefore.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfter.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfter.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetter",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            vowels.contains(letter) ? vowels.find(vowel => vowel == letter)\n\
    \                .getOrElse(letter) : letter)\n        val newMessage = messageArray.toList.mkString(\"\
    \")\n        val newMessageArray2 = newMessageArray.toList.map(letter => \n  \
    \          vowels.contains(letter) ? vowels.find(vowel => vowel == letter)\n \
    \               .getOrElse(letter) : letter)\n        val newMessage2 = newMessageArray2.toList.mkString(\"\
    \")\n        val newMessageArray3 = newMessage2.split(\"\").map(letter => \n \
    \           vowels.contains(letter) ? vowels.find(vowel => vowel == letter)\n\
    \                .getOrElse(letter) : letter)\n        val newMessage3 = newMessageArray3.toList.mkString(\"\
    \")\n        val newMessageArray4 = newMessage3.split(\"\").map(letter => \n \
    \           vowels.contains(letter) ? vowels.find(vowel => vowel == letter)\n\
    \                .getOrElse(letter) : letter)\n        val newMessage4 = newMessageArray4.toList.mkString(\"\
    \")\n        val newMessageArray5 = newMessage4.split(\"\").map(letter => \n \
    \           vowels.contains(letter) ? vowels.find(vowel => vowel == letter)\n\
    \                .getOrElse(letter) : letter)\n        val newMessage5 = newMessageArray5.toList.mkString(\"\
    \")\n        val newMessageArray6 = newMessage5.split(\"\").map(letter => \n \
    \           vowels.contains(letter) ? vowels.find(vowel => vowel == letter)\n\
    \                .getOrElse(letter) : letter)\n        val newMessage6 = newMessageArray6.toList.mkString(\"\
    \")\n        val newMessageArray7 = newMessage6.split(\"\").map(letter => \n \
    \           vowels.contains(letter) ? vowels.find(vowel => vowel == letter)\n\
    \                .getOrElse(letter) : letter)\n        val newMessage7 = newMessageArray7.toList.mkString(\"\
    \")\n        val newMessageArray8 = newMessage7.split(\"\").map(letter => \n \
    \           vowels.contains(letter) ? vowels.find(vowel => vowel == letter)\n\
    \                .getOrElse(letter) : letter)\n        val newMessage8 = newMessageArray8.toList.mkString(\"\
    \")\n        val newMessageArray9 = newMessage8.split(\"\").map(letter => \n \
    \           vowels.contains(letter) ? vowels.find(vowel => vowel == ", "     \
    \   val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\"\
    )\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index >= 0) vowels(index - 1)\
    \ else letter\n        })\n        val newMessage = newMessageArray.toList\n \
    \       val newMessageString = newMessage.toString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageStringArray = newMessageString.split(\"\")\n\
    \        val newMessageStringArrayLength = newMessageStringArray.length\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength + 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength + 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength + 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength + 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength + 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength + 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ + 1\n        val newMessageStringArrayLength = newMessageStringArrayLength +\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength + 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength + 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength + 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength + 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength + 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength + 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength + 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength + 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength + 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength + 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength + 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength + 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ + 1\n        val newMessageStringArrayLength = newMessageStringArrayLength +\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength + 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength + 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength + 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength + 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength + 1\n    \
    \    val newMessageStringArrayLength = ", "        val vowels = \"aeiouAEIOU\"\
    \n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val newMessage\
    \ = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + 2)\n        newMessage.map(letter => letters.charAt(letter))", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n  \
    \      val messageArrayLength = messageArray.length\n        val newMessageArray\
    \ = messageArray.map(x => x.toUpperCase)\n        val newMessageArrayLength =\
    \ newMessageArray.length\n        val newMessageArray2 = newMessageArray.map(x\
    \ => vowels.indexOf(x) + 2)\n        val newMessageArray2Length = newMessageArray2.length\n\
    \        val newMessageArray3 = newMessageArray2.map(x => vowels.indexOf(x) +\
    \ 1)\n        val newMessageArray3Length = newMessageArray3.length\n        val\
    \ newMessageArray4 = newMessageArray3.map(x => vowels.indexOf(x))\n        val\
    \ newMessageArray4Length = newMessageArray4.length\n        val newMessageArray5\
    \ = newMessageArray4.map(x => vowels.indexOf(x) + 1)\n        val newMessageArray5Length\
    \ = newMessageArray5.length\n        val newMessageArray6 = newMessageArray5.map(x\
    \ => vowels.indexOf(x) + 2)\n        val newMessageArray6Length = newMessageArray6.length\n\
    \        val newMessageArray7 = newMessageArray6.map(x => vowels.indexOf(x))\n\
    \        val newMessageArray7Length = newMessageArray7.length\n        val newMessageArray8\
    \ = newMessageArray7.map(x => vowels.indexOf(x) + 1)\n        val newMessageArray8Length\
    \ = newMessageArray8.length\n        val newMessageArray9 = newMessageArray8.map(x\
    \ => vowels.indexOf(x) + 2)\n        val newMessageArray9Length = newMessageArray9.length\n\
    \        val newMessageArray10 = newMessageArray9.map(x => vowels.indexOf(x))\n\
    \        val newMessageArray10Length = newMessageArray10.length\n        val newMessageArray11\
    \ = newMessageArray10.map(x => vowels.indexOf(x) + 1)\n        val newMessageArray11Length\
    \ = newMessageArray11.length\n        val newMessageArray12 = newMessageArray11.map(x\
    \ => vowels.indexOf(x) + 2)\n        val newMessageArray12Length = newMessageArray12.length\n\
    \        val newMessageArray13 = newMessageArray12.map(x => vowels.indexOf(x))\n\
    \        val newMessageArray13Length = newMessageArray13.length\n        val newMessageArray14\
    \ = newMessageArray13.map(x => vowels.indexOf(x) + 1)\n        val newMessageArray14Length\
    \ = newMessageArray14.length\n        val newMessageArray15 = newMessageArray14.map(x\
    \ => vowels.indexOf(x) + 2)\n        val newMessageArray15Length = newMessageArray15.length\n\
    \        val new", "        val vowels = \"aeiouAEIOU\"\n        val letters =\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\"\
    )\n        val encodedMessage = messageArray.map(letter => {\n            if (vowels.contains(letter))\
    \ {\n                val vowelIndex = letters.indexOf(letter)\n              \
    \  val vowelIndex2 = vowelIndex + 1\n                letters.charAt(vowelIndex2)\
    \ \n            } else {\n                letter\n            }\n        }).mkString\n\
    \        encodedMessage", "        val vowels = \"aeiouAEIOU\"\n        val letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(messageArray.indexOf(letter))) + 1).mkString\n\
    \        newMessage", "        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + letter)\n        val messageWithVowelsAndTwoLettersBefore\
    \ = messageWithVowels.map(letter => vowels.indexOf(letter) + letter + letter)\n\
    \        val messageWithVowelsAndTwoLettersAfter = messageWithVowelsAndTwoLettersAfter.map(letter\
    \ => vowels.indexOf(letter) + letter)\n        messageWithVowelsAndTwoLettersAfter.mkString(\"\
    \")", "        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageList = message.split(\"\")\n        val newMessage = messageList.map(letter\
    \ => {\n            val index = alphabet.indexOf(letter)\n            val vowelIndex\
    \ = vowels.indexOf(letter)\n            val nextVowelIndex = vowelIndex + 2\n\
    \            val nextVowel = vowels(nextVowelIndex)\n            if (vowelIndex\
    \ < 0) letter else nextVowel\n        }).mkString\n        newMessage", "    \
    \    val vowels = \"aeiouAEIOU\"\n        val alphabet = scala.collection.mutable.List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val newMessage = message.map(letter => letter\
    \ match {\n            case vowel => vowels.indexOf(vowel) + alphabet(vowels.indexOf(vowel)\
    \ + 1)\n            case letter => alphabet(alphabet.indexOf(letter) + 1)\n  \
    \      })\n        val newMessageString = newMessage.toList\n        newMessageString.mkString(\"\
    \")", "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index - 2\n                vowels(vowelIndex) + letter\
    \ + vowels(vowelIndex + 1)\n            } else {\n                letter\n   \
    \         }\n        }).mkString\n        encodedMessage", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val messageWithVowels = message.map(letter => vowels.indexOf(letter)\
    \ + letter)\n        val messageWithVowelsReversed = messageWithVowels.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplaced = messageWithVowelsReversed.map(letter\
    \ => vowels.indexOf(letter) + letter)\n        val messageWithVowelsReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplaced.reverse\n        messageWithVowelsReversedWithVowelsReplacedReversed.mkString(\"\
    \")", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)\
    \ + 1))\n        val messageWithVowelsAndLettersSwappedCase = messageWithVowels.map(letter\
    \ => letter.toUpperCase())\n        val messageWithVowelsAndLettersSwappedCaseAndVowelsReplaced\
    \ = messageWithVowelsAndLettersSwappedCase.map(letter => vowels.indexOf(letter)\
    \ + alphabet(vowels.indexOf(letter) + 1))\n        val messageWithVowelsAndLettersSwappedCaseAndVowelsReplacedAndVowelsReplaced\
    \ = messageWithVowelsAndLettersSwappedCaseAndVowelsReplaced.map(letter => letter.toUpperCase())\n\
    \        val messageWithVowelsAndLettersSwappedCaseAndVowelsReplacedAndVowelsReplacedAndVowelsReplaced\
    \ = messageWithVowelsAndLettersSwappedCaseAndVowelsReplacedAndVowelsReplaced.map(letter\
    \ => letter.toUpperCase())\n        val messageWithVowelsAndLettersSwappedCaseAndVowelsReplacedAndVowelsReplacedAndVowelsReplacedAndVowelsReplaced\
    \ = messageWithVowelsAndLettersSwappedCaseAndVowelsReplacedAndVowelsReplacedAndVowelsReplacedAndVowelsReplaced.map(letter\
    \ => letter.toUpperCase())\n        val messageWithVowelsAndLettersSwappedCaseAndVowelsReplacedAndVowelsReplacedAndVowelsReplacedAndVowelsReplacedAndVowelsReplaced\
    \ = messageWithVowelsAndLettersSwappedCaseAndVowelsReplacedAndVowelsReplacedAndVowelsReplacedAndVowelsReplacedAndVowelsReplaced.map(letter\
    \ => letter.toUpperCase())\n        val messageWithVowelsAndLettersSwappedCaseAndVowelsReplacedAndVowelsReplacedAndVow",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                vowels(index - 1) + vowels(index)\n            } else\
    \ {\n                letter\n            }\n        }).mkString\n        encodedMessage",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case 0 => alphabet(vowels.indexOf(letter) + 1)\n            case 1 => alphabet(vowels.indexOf(letter)\
    \ + 2)\n            case 2 => alphabet(vowels.indexOf(letter) + 3)\n         \
    \   case 3 => alphabet(vowels.indexOf(letter) + 4)\n            case 4 => alphabet(vowels.indexOf(letter)\
    \ + 5)\n            case 5 => alphabet(vowels.indexOf(letter) + 6)\n         \
    \   case 6 => alphabet(vowels.indexOf(letter) + 7)\n            case 7 => alphabet(vowels.indexOf(letter)\
    \ + 8)\n            case 8 => alphabet(vowels.indexOf(letter) + 9)\n         \
    \   case _ => letter\n        })\n        val newMessageString = newMessage.toList\n\
    \        newMessageString.mkString(\"\")", "        val vowels = \"aeiouAEIOU\"\
    \n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val messageLength\
    \ = message.length\n        val encodedMessage = mutable.Buffer.empty[String]\n\
    \        val messageLetters = message.map(_.toLower)\n        val vowelLetters\
    \ = messageLetters.map(letter => vowels.indexOf(letter))\n        val vowelLettersCount\
    \ = vowelLetters.map(_.toInt)\n        val vowelLettersCountMap = vowelLettersCount.toMap\n\
    \        val vowelLettersCountMapKeys = vowelLettersCountMap.keys\n        val\
    \ vowelLettersCountMapValues = vowelLettersCountMap.values.toList\n        val\
    \ vowelLettersCountMapValuesCount = vowelLettersCountMapValues.size\n        val\
    \ vowelLettersCountMapValuesCount2 = vowelLettersCountMapValuesCount * 2\n   \
    \     val vowelLettersCountMapValuesCount3 = vowelLettersCountMapValuesCount *\
    \ 3\n        val vowelLettersCountMapValuesCount4 = vowelLettersCountMapValuesCount\
    \ * 4\n        val vowelLettersCountMapValuesCount5 = vowelLettersCountMapValuesCount\
    \ * 5\n        val vowelLettersCountMapValuesCount6 = vowelLettersCountMapValuesCount\
    \ * 6\n        val vowelLettersCountMapValuesCount7 = vowelLettersCountMapValuesCount\
    \ * 7\n        val vowelLettersCountMapValuesCount8 = vowelLettersCountMapValuesCount\
    \ * 8\n        val vowelLettersCountMapValuesCount9 = vowelLettersCountMapValuesCount\
    \ * 9\n        val vowelLettersCountMapValuesCount10 = vowelLettersCountMapValuesCount\
    \ * 10\n        val vowelLettersCountMapValuesCount11 = vowelLettersCountMapValuesCount\
    \ * 11\n        val vowelLettersCountMapValuesCount12 = vowelLettersCountMapValuesCount\
    \ * 12\n        val vowelLettersCountMapValuesCount13 = vowelLettersCountMapValuesCount\
    \ * 13\n        val vowelLettersCountMapValuesCount14 = vowelLettersCountMapValuesCount\
    \ * 14\n        val vowelLettersCountMapValuesCount15 = vowelLettersCountMapValuesCount\
    \ * 15\n        val vowelLettersCountMapValuesCount16 = vowelLettersCountMapValuesCount\
    \ * 16\n        val vowelLettersCountMapValuesCount17 = vowelLettersCountMapValuesCount\
    \ * 17\n        val vowelLettersCountMapValuesCount18 = vowelLettersCountMapValuesCount\
    \ * 18\n        val vowelLettersCountMap", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageWithVowels = message.replaceAllIn(vowels, vowels.charAt(2))\n\
    \        val messageWithVowelsAndLetters = messageWithVowels.replaceAllIn(\"AEIOU\"\
    , \"AE\")\n        val messageWithVowelsAndLettersAndLetters = messageWithVowelsAndLetters.replaceAllIn(\"\
    AE\", \"A\")\n        val messageWithVowelsAndLettersAndLettersAndLetters = messageWithVowelsAndLettersAndLetters.replaceAllIn(\"\
    A\", \"A\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLetters.replaceAllIn(\"A\", \"A\"\
    )\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLetters.replaceAllIn(\"\
    A\", \"A\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAllIn(\"\
    A\", \"A\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAllIn(\"\
    A\", \"A\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAllIn(\"\
    A\", \"A\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAllIn(\"\
    A\", \"A\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAllIn(\"\
    A\", \"A\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetter",
  "        val vowels = \"aeiouAEIOU\"\n        val messageList = message.split(\"\
    \")\n        val newMessage = messageList.map(letter => {\n            if (vowels.contains(letter))\
    \ {\n                val index = vowels.indexOf(letter)\n                val nextVowel\
    \ = vowels(index + 1)\n                val nextLetter = vowels(index + 2)\n  \
    \              letter.replace(letter, nextLetter)\n            }\n           \
    \ else {\n                letter\n            }\n        }).mkString(\"\")\n \
    \       newMessage", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"\
    u\")\n        val messageList = message.split(\"\")\n        val encodedMessage\
    \ = messageList.foldLeft(\"\")( (acc, elem) => {\n            val index = vowels.indexOf(elem)\n\
    \            if (index != -1) {\n                val vowelIndex = index - 2\n\
    \                val vowel = vowels(vowelIndex)\n                acc + (if (vowelIndex\
    \ == 0) elem.toUpperCase else elem.toLowerCase) + vowel\n            } else {\n\
    \                acc + elem\n            }\n        })\n        encodedMessage",
  "        val vowels = \"aeiouAEIOU\"\n        val messageLength = message.length\n\
    \        val result = new StringBuilder(messageLength)\n        val vowelsCount\
    \ = message.count(vowels)\n        var i = 0\n        while (i < messageLength)\
    \ {\n            val currentChar = message.charAt(i)\n            val nextChar\
    \ = message.charAt(i + 1)\n            val nextCharCount = message.count(nextChar)\n\
    \            if (vowels.contains(currentChar)) {\n                if (nextCharCount\
    \ > vowelsCount) {\n                    result.append(currentChar)\n         \
    \           i += 2\n                } else {\n                    result.append(nextChar)\n\
    \                    i += 2\n                }\n            } else {\n       \
    \         result.append(currentChar)\n                i += 1\n            }\n\
    \        }\n        result.toString()", "        val vowels = \"aeiouAEIOU\"\n\
    \        val newMessage = message\n        val newMessageList = newMessage.split(\"\
    \")\n        val newMessageList2 = newMessageList.map(letter => \n           \
    \ if (vowels.contains(letter)) letter else \n                vowels.indexOf(letter)\
    \ + 2)\n        newMessageList2.mkString(\"\")", "        val vowels = \"aeiou\"\
    \n        val messageWithVowels = message.replaceAllIn(vowels, vowels.toChar).replaceAllIn(\"\
    aeiou\", \"A\")\n        val messageWithVowelsAndTwoLettersBefore = messageWithVowels.replaceAllIn(\"\
    A\", vowels.toChar)\n        val messageWithVowelsAndTwoLettersAfter = messageWithVowelsAndTwoLettersBefore.replaceAllIn(\"\
    A\", vowels.toChar)\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfter.replaceAllIn(\"A\", vowels.toChar)\n \
    \       val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore.replaceAllIn(\"A\"\
    , vowels.toChar)\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(\"\
    A\", vowels.toChar)\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(\"\
    A\", vowels.toChar)\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(\"\
    A\", vowels.toChar)\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(\"\
    A\", vowels.toChar", "        val vowels = \"aeiouAEIOU\"\n        val letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map { letter =>\n            val\
    \ index = letters.indexOf(letter)\n            val vowelIndex = vowels.indexOf(letter)\n\
    \            val vowelIndex2 = vowels.indexOf(letter, index + 1)\n           \
    \ val vowelIndex3 = vowels.indexOf(letter, index + 2)\n            val vowelIndex4\
    \ = vowels.indexOf(letter, index + 3)\n            val vowelIndex5 = vowels.indexOf(letter,\
    \ index + 4)\n            val vowelIndex6 = vowels.indexOf(letter, index + 5)\n\
    \            val vowelIndex7 = vowels.indexOf(letter, index + 6)\n           \
    \ val vowelIndex8 = vowels.indexOf(letter, index + 7)\n            val vowelIndex9\
    \ = vowels.indexOf(letter, index + 8)\n            val vowelIndex10 = vowels.indexOf(letter,\
    \ index + 9)\n            val vowelIndex11 = vowels.indexOf(letter, index + 10)\n\
    \            val vowelIndex12 = vowels.indexOf(letter, index + 11)\n         \
    \   val vowelIndex13 = vowels.indexOf(letter, index + 12)\n            val vowelIndex14\
    \ = vowels.indexOf(letter, index + 13)\n            val vowelIndex15 = vowels.indexOf(letter,\
    \ index + 14)\n            val vowelIndex16 = vowels.indexOf(letter, index + 15)\n\
    \            val vowelIndex17 = vowels.indexOf(letter, index + 16)\n         \
    \   val vowelIndex18 = vowels.indexOf(letter, index + 17)\n            val vowelIndex19\
    \ = vowels.indexOf(letter, index + 18)\n            val vowelIndex20 = vowels.indexOf(letter,\
    \ index + 19)\n            val vowelIndex21 = vowels.indexOf(letter, index + 20)\n\
    \            val vowelIndex22 = vowels.indexOf(letter, index + 21)\n         \
    \   val vowelIndex23 = vowels.indexOf(letter, index + 22)\n            val vowelIndex24\
    \ = vowels.indexOf(letter, index + 23)\n            val vowelIndex25 = vowels.indexOf(letter,\
    \ index + 24)\n            val vowelIndex26 = vowels.indexOf(letter, index + 25)\n\
    \            val vowelIndex27 = vowels.indexOf(letter, index + 26)\n         \
    \   val vowelIndex28 = vowels.indexOf(letter, index + 27)\n            val vowelIndex29\
    \ = vowels.indexOf(letter, index + 28)\n            val vowelIndex30 = vowels.indexOf(letter,\
    \ index + 29)\n            val vowelIndex31 = vowels.indexOf(letter, index + 30)\n\
    \            val vowelIndex32 = vowels.indexOf(letter, index + 31)\n         \
    \   val vowelIndex33 = vowels.indexOf(letter, index + 32)\n", "        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            letter match {\n                case 'a' => alphabet(0)\n \
    \               case 'b' => alphabet(1)\n                case 'c' => alphabet(2)\n\
    \                case 'd' => alphabet(3)\n                case 'e' => alphabet(4)\n\
    \                case 'f' => alphabet(5)\n                case 'g' => alphabet(6)\n\
    \                case 'h' => alphabet(7)\n                case 'i' => alphabet(8)\n\
    \                case 'j' => alphabet(9)\n                case 'k' => alphabet(10)\n\
    \                case 'l' => alphabet(11)\n                case 'm' => alphabet(12)\n\
    \                case 'n' => alphabet(13)\n                case 'o' => alphabet(14)\n\
    \                case 'p' => alphabet(15)\n                case 'q' => alphabet(16)\n\
    \                case 'r' => alphabet(17)\n                case 's' => alphabet(18)\n\
    \                case 't' => alphabet(19)\n                case 'u' => alphabet(20)\n\
    \                case 'v' => alphabet(21)\n                case 'w' => alphabet(22)\n\
    \                case 'x' => alphabet(23)\n                case 'y' => alphabet(24)\n\
    \                case 'z' => alphabet(25)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage = messageArray.map(letter =>\
    \ \n            letter match {\n                case 'a' => vowels(0)\n      \
    \          case 'b' => vowels(1)\n                case 'c' => vowels(2)\n    \
    \            case 'd' => vowels(3)\n                case 'e' => vowels(4)\n  \
    \              case 'f' => vowels(5)\n                case 'g' => vowels(6)\n\
    \                case 'h' => vowels(7)\n                case 'i' => vowels(8)\n\
    \                case 'j' => vowels(9)\n                case 'k' => vowels(10)\n\
    \                case 'l' => vowels(11)\n                case 'm' => vowels(12)\n\
    \                case 'n' => vowels(13)\n                case 'o' => vowels(14)\n\
    \                case 'p' => vowels(15)\n                case 'q' => vowels(16)\n\
    \                case 'r' => vowels(17)\n                case 's' => vowels(18)\n\
    \                case 't' => vowels(19)\n                case 'u' => vowels(20)\n\
    \                case 'v' => vowels(21)\n                case 'w' => vowels(22)\n\
    \                case 'x' => vowels(23)\n                case 'y' => vowels(24)\n\
    \                case 'z' => vowels(25)\n                case letter => letter\n\
    \            }\n        ).mkString(\"\")\n        newMessage", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val messageLength = message.length\n        val encodedMessage\
    \ = mutable.StringBuilder()\n        val messageArray = message.split(\"\")\n\
    \        val vowelArray = vowels.split(\"\")\n        val vowelCounts = messageArray.map(x\
    \ => vowelArray.indexOf(x))\n        val vowelCountMap = vowelCounts.toMap\n \
    \       val vowelCountArray = vowelCounts.toArray\n        val vowelCountMapArray\
    \ = vowelCountMap.toArray\n        val vowelCountMapArrayLength = vowelCountMapArray.length\n\
    \        val vowelCountMapArrayLength = vowelCountMapArray.length\n        val\
    \ vowelCountMapArrayLength = vowelCountMapArray.length\n        val vowelCountMapArrayLength\
    \ = vowelCountMapArray.length\n        val vowelCountMapArrayLength = vowelCountMapArray.length\n\
    \        val vowelCountMapArrayLength = vowelCountMapArray.length\n        val\
    \ vowelCountMapArrayLength = vowelCountMapArray.length\n        val vowelCountMapArrayLength\
    \ = vowelCountMapArray.length\n        val vowelCountMapArrayLength = vowelCountMapArray.length\n\
    \        val vowelCountMapArrayLength = vowelCountMapArray.length\n        val\
    \ vowelCountMapArrayLength = vowelCountMapArray.length\n        val vowelCountMapArrayLength\
    \ = vowelCountMapArray.length\n        val vowelCountMapArrayLength = vowelCountMapArray.length\n\
    \        val vowelCountMapArrayLength = vowelCountMapArray.length\n        val\
    \ vowelCountMapArrayLength = vowelCountMapArray.length\n        val vowelCountMapArrayLength\
    \ = vowelCountMapArray.length\n        val vowelCountMapArrayLength = vowelCountMapArray.length\n\
    \        val vowelCountMapArrayLength = vowelCountMapArray.length\n        val\
    \ vowelCountMapArrayLength = vowelCountMapArray.length\n        val vowelCountMapArrayLength\
    \ = vowelCountMapArray.length\n        val vowelCountMapArrayLength = vowelCountMapArray.length\n\
    \        val vowelCountMapArrayLength = vowelCountMapArray.length\n        val\
    \ vowelCountMapArrayLength = vowelCountMapArray.length\n        val vowelCountMapArrayLength\
    \ = vowelCountMapArray.length\n        val vowelCountMapArrayLength = vowelCountMapArray.length\n\
    \        val vowelCountMapArrayLength = vowelCountMapArray.length\n        val\
    \ vowelCountMapArrayLength = vowelCountMapArray.length\n        val vowelCountMapArrayLength\
    \ = vowelCountMapArray.length\n        val vowelCountMapArrayLength = vowelCountMapArray.length\n\
    \        val vowelCountMapArrayLength = vowelCountMapArray.length\n        val\
    \ vowelCountMapArrayLength = vowelCountMapArray.length\n        val vowelCountMapArrayLength\
    \ = vowelCountMap", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )\n        val messageArray = message.toCharArray\n        val encodedMessage\
    \ = messageArray.map { c =>\n            val index = vowels.indexOf(c)\n     \
    \       if (index != -1) {\n                val vowelIndex = index + 1\n     \
    \           val vowel = vowels(vowelIndex)\n                vowels.contains(c)\
    \ ? vowel : c\n            } else {\n                c\n            }\n      \
    \  }\n        new String(encodedMessage)", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageList = message.split(\"\")\n        val newMessage = messageList.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowels.indexOf(vowel, vowelIndex) + letter\n\
    \            } else {\n                letter\n            }\n        }).mkString(\"\
    \")\n        newMessage", "        val vowels = \"aeiouAEIOU\".toCharArray\n \
    \       val messageArray = message.toCharArray\n        val result = new StringBuilder\n\
    \        var i = 0\n        while (i < messageArray.length) {\n            val\
    \ currentChar = messageArray(i)\n            if (vowels(i) == currentChar) {\n\
    \                val nextChar = messageArray(i + 1)\n                if (vowels(i\
    \ + 1) == nextChar) {\n                    result.append(vowels(i))\n        \
    \            i += 1\n                } else {\n                    result.append(vowels(i))\n\
    \                    i += 1\n                }\n            } else {\n       \
    \         result.append(currentChar)\n                i += 1\n            }\n\
    \        }\n        return result.toString", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(x => alphabet(alphabet.indexOf(x) + 1))\n        val newVowels =\
    \ vowels.map(x => alphabet(alphabet.indexOf(x) + 2))\n        newMessage.zip(newVowels).map(x\
    \ => x._1 + x._2)", "        val vowels = \"aeiouAEIOU\"\n        val messageList\
    \ = message.split(\"\")\n        val newMessage = messageList.map(letter => {\n\
    \            val index = vowels.indexOf(letter)\n            if (index != -1)\
    \ vowels(index - 1) else letter\n        }).mkString(\"\")\n        val newMessageList\
    \ = newMessage.split(\"\")\n        val newVowels = vowels.map(letter => {\n \
    \           val index = newMessageList.indexOf(letter)\n            if (index\
    \ != -1) newMessageList(index - 1) else letter\n        }).mkString(\"\")\n  \
    \      newVowels + newMessageList", "        val vowels = \"aeiouAEIOU\"\n   \
    \     val messageWithVowels = message.replaceAllIn(vowels, vowels.charAt(2))\n\
    \        val messageWithVowelsAndTwoLettersBefore = messageWithVowels.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfter = messageWithVowelsAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfter.replaceAllIn(vowels, vowels.charAt(2))\n\
    \        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAnd",
  "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap = Map(vowels -> letters.indexOf(\"a\"))\n        val lettersMap\
    \ = Map(letters -> letters.indexOf(\"a\"))\n        val messageList = message.split(\"\
    \")\n        val newMessage = messageList.map(letter => {\n            val vowelIndex\
    \ = vowelsMap(letter)\n            val letterIndex = lettersMap(letter)\n    \
    \        if (vowelIndex != letterIndex) {\n                letter\n          \
    \  } else {\n                letters.charAt(letterIndex + 2)\n            }\n\
    \        }).mkString\n        newMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageWithVowels = message.toLowerCase.map(letter => vowels.indexOf(letter)\
    \ + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndTwoLettersBefore\
    \ = messageWithVowels.map(letter => vowels.indexOf(letter) + 1).map(letter =>\
    \ vowels(letter))\n        val messageWithVowelsAndTwoLettersAfter = messageWithVowelsAndTwoLettersBefore.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBefore\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => vowels.indexOf(letter) +\
    \ 1).map(letter => vowels(letter))\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBefore.map(letter => vowels.indexOf(letter)\
    \ + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfter.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfter.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels(letter))\n        val ",
  "        val vowels = \"aeiouAEIOU\"\n        val messageList = message.split(\"\
    \")\n        val newMessageList = messageList.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val newLetter = vowel.charAt(0) + letter.charAt(0)\n        \
    \        vowel.charAt(0) = newLetter\n                letter\n            } else\
    \ {\n                letter\n            }\n        })\n        newMessageList.toString.toUpperCase",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \ \")\n        val newMessage = messageList.map(x => x.toLowerCase).map(x => x.toUpperCase).map(x\
    \ => x.replaceAll(vowels,alphabet(alphabet.indexOf(x) + 2)))\n        newMessage.mkString(\"\
    \ \")", "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val nextVowel = vowels(index + 1)\n                val nextIndex = vowels.indexOf(nextVowel)\n\
    \                if (nextIndex != -1) {\n                    val nextLetter =\
    \ vowels(nextIndex + 1)\n                    val nextIndex2 = vowels.indexOf(nextLetter)\n\
    \                    if (nextIndex2 != -1) {\n                        val nextLetter2\
    \ = vowels(nextIndex2 + 1)\n                        val nextIndex3 = vowels.indexOf(nextLetter2)\n\
    \                        if (nextIndex3 != -1) {\n                           \
    \ val nextLetter3 = vowels(nextIndex3 + 1)\n                            val nextIndex4\
    \ = vowels.indexOf(nextLetter3)\n                            if (nextIndex4 !=\
    \ -1) {\n                                val nextLetter4 = vowels(nextIndex4 +\
    \ 1)\n                                val nextIndex5 = vowels.indexOf(nextLetter4)\n\
    \                                if (nextIndex5 != -1) {\n                   \
    \                 val nextLetter5 = vowels(nextIndex5 + 1)\n                 \
    \                   val nextIndex6 = vowels.indexOf(nextLetter5)\n           \
    \                         if (nextIndex6 != -1) {\n                          \
    \              val nextLetter6 = vowels(nextIndex6 + 1)\n                    \
    \                    val nextIndex7 = vowels.indexOf(nextLetter6)\n          \
    \                              if (nextIndex7 != -1) {\n                     \
    \                       val nextLetter7 = vowels(nextIndex7 + 1)\n           \
    \                                 val nextIndex8 = vowels.indexOf(nextLetter7)\n\
    \                                            if (nextIndex8 != -1) {\n       \
    \                                         val nextLetter8 = vowels(nextIndex8\
    \ + 1)\n                                                val nextIndex9 = vowels.indexOf(nextLetter8)\n\
    \                                                if (nextIndex9 != -1) {\n   \
    \                                                 val nextLetter9 = vowels(nextIndex9\
    \ + 1)\n                                                    val nextIndex10 =\
    \ vowels.indexOf(nextLetter9)\n                                              \
    \      if (nextIndex10 != -1) {\n                                            \
    \            val nextLetter10 = vowels(nextIndex10 + 1)\n                    \
    \                                    val nextIndex11 = vowels.indexOf(nextLetter10)\n\
    \                                                        if (nextIndex11 != -1)\
    \ {\n                                                            val nextLetter11\
    \ = vowels(nextIndex11 + 1)\n                                                \
    \            val nextIndex12 = vowels.indexOf(nextLetter11)\n                \
    \                                            if (nextIndex12 != -1) {\n      \
    \                                                          val nextLetter12 =\
    \ vowels(nextIndex12 + 1)\n                                                  \
    \              val nextIndex13 = vowels.indexOf(nextLetter12)\n              \
    \                                                  if (nextIndex13 != -1) {\n\
    \                                                                    val nextLetter13\
    \ = vowels(nextIndex13 + 1)\n                                                \
    \                    val nextIndex14 = vowels.indexOf(nextLetter13)\n        \
    \                                                            if (nextIndex14 !=\
    \ -1) {\n                                                                    \
    \    val nextLetter14 = vowels(nextIndex14 + 1)\n                            \
    \                                            ", "        val vowels = Set(\"a\"\
    , \"e\", \"i\", \"o\", \"u\")\n        val letters = Set(\"a\", \"b\", \"c\",\
    \ \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\")\n        val messageArray = message.toCharArray\n        val newMessage\
    \ = new StringBuilder\n        var i = 0\n        while (i < messageArray.length)\
    \ {\n            val currentChar = messageArray(i)\n            if (vowels.contains(currentChar))\
    \ {\n                val nextChar = messageArray(i + 1)\n                if (vowels.contains(nextChar))\
    \ {\n                    newMessage.append(letters.find(letter => letter == nextChar).orElse(currentChar))\n\
    \                    i += 1\n                }\n                else {\n     \
    \               newMessage.append(currentChar)\n                    i += 1\n \
    \               }\n            }\n            else {\n                newMessage.append(currentChar)\n\
    \                i += 1\n            }\n        }\n        newMessage.toString",
  "        val vowels = \"aeiouAEIOU\"\n        val messageLength = message.length\n\
    \        val newMessage = mutable.StringBuilder()\n        var i = 0\n       \
    \ while (i < messageLength) {\n            val letter = message.charAt(i)\n  \
    \          val nextLetter = message.charAt(i + 1)\n            if (vowels.contains(letter))\
    \ {\n                val index = vowels.indexOf(letter)\n                val nextIndex\
    \ = vowels.indexOf(nextLetter)\n                if (index != nextIndex) {\n  \
    \                  newMessage.append(vowels(index))\n                    newMessage.append(vowels(nextIndex))\n\
    \                } else {\n                    newMessage.append(letter)\n   \
    \             }\n            } else {\n                newMessage.append(letter)\n\
    \            }\n            i += 1\n        }\n        newMessage.toString()",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val nextVowel = vowels(index + 1)\n                val nextVowelIndex =\
    \ vowels.indexOf(nextVowel)\n                if (nextVowelIndex != -1) {\n   \
    \                 val nextVowelIndex = nextVowelIndex + 1\n                  \
    \  vowels(index) = vowels(nextVowelIndex)\n                    vowels(nextVowelIndex)\
    \ = letter\n                } else {\n                    vowels(index) = letter\n\
    \                }\n            } else {\n                vowels(0) = letter\n\
    \            }\n        })\n        newMessageArray.toString.reverse.mkString(\"\
    \")", "        val vowels = \"aeiouAEIOU\"\n        val messageLength = message.length\n\
    \        val encodedMessage = mutable.StringBuilder(messageLength)\n        val\
    \ vowelIndex = new mutable.HashMap[String, Int]()\n        vowelIndex.put(\"a\"\
    , 0)\n        vowelIndex.put(\"e\", 1)\n        vowelIndex.put(\"i\", 2)\n   \
    \     vowelIndex.put(\"o\", 3)\n        vowelIndex.put(\"u\", 4)\n        vowelIndex.put(\"\
    A\", 0)\n        vowelIndex.put(\"E\", 1)\n        vowelIndex.put(\"I\", 2)\n\
    \        vowelIndex.put(\"O\", 3)\n        vowelIndex.put(\"U\", 4)\n        for(i\
    \ <- 0 until messageLength) {\n            val currentChar = message.charAt(i)\n\
    \            val currentCharIndex = vowelIndex.get(currentChar)\n            if(currentCharIndex\
    \ != -1) {\n                val vowelIndex = currentCharIndex\n              \
    \  val vowel = vowels(vowelIndex)\n                val nextCharIndex = vowelIndex\
    \ + 2\n                val nextChar = vowels(nextCharIndex)\n                val\
    \ nextCharIndex = vowelIndex + 3\n                val nextChar = vowels(nextCharIndex)\n\
    \                val nextCharIndex = vowelIndex + 4\n                val nextChar\
    \ = vowels(nextCharIndex)\n                val nextCharIndex = vowelIndex + 5\n\
    \                val nextChar = vowels(nextCharIndex)\n                val nextCharIndex\
    \ = vowelIndex + 6\n                val nextChar = vowels(nextCharIndex)\n   \
    \             val nextCharIndex = vowelIndex + 7\n                val nextChar\
    \ = vowels(nextCharIndex)\n                val nextCharIndex = vowelIndex + 8\n\
    \                val nextChar = vowels(nextCharIndex)\n                val nextCharIndex\
    \ = vowelIndex + 9\n                val nextChar = vowels(nextCharIndex)\n   \
    \             val nextCharIndex = vowelIndex + 10\n                val nextChar\
    \ = vowels(nextCharIndex)\n                val nextCharIndex = vowelIndex + 11\n\
    \                val nextChar = vowels(nextCharIndex)\n                val nextCharIndex\
    \ = vowelIndex + 12\n                val nextChar = vowels(nextCharIndex)\n  \
    \              val nextCharIndex = vowelIndex + 13\n                val nextChar\
    \ = vowels(nextCharIndex)\n                val nextCharIndex = vowelIndex + 14\n\
    \                val nextChar = vowels(nextCharIndex)\n                val nextCharIndex\
    \ = vowelIndex + 15\n                val nextChar = vowels(nextCharIndex)\n  \
    \              val nextCharIndex = vowelIndex + 16\n                val nextChar\
    \ = vowels(nextCharIndex)\n", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels\
    \ = vowels.map(letter => alphabet(alphabet.indexOf(letter) + 2))\n        newMessage.zip(newVowels).map(x\
    \ => x._1 -> x._2).mkString(\"\")", "        val vowels = \"aeiouAEIOU\"\n   \
    \     val messageArray = message.split(\"\")\n        val newMessage = messageArray.map\
    \ { letter =>\n            if (vowels.contains(letter)) {\n                val\
    \ vowelIndex = vowels.indexOf(letter)\n                val vowel2Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 1))\n                val newLetter = vowels.charAt(vowelIndex + 2)\n     \
    \           vowels.charAt(vowel2Index) = newLetter\n                newLetter\n\
    \            } else {\n                letter\n            }\n        }.mkString(\"\
    \")\n        newMessage", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels\
    \ = vowels.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        newMessage.zip(newVowels).map(x\
    \ => x._1 + x._2).mkString", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ messageArray = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowel\n            } else {\n        \
    \        letter\n            }\n        })\n        val newMessage = messageArray.toList.mkString(\"\
    \")\n        val newMessageArray2 = newMessageArray.map(letter => {\n        \
    \    val index = vowels.indexOf(letter)\n            if (index != -1) {\n    \
    \            val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowel\n            } else {\n                letter\n       \
    \     }\n        })\n        newMessageArray2.mkString(\"\")", "        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        newMessage.zip(vowels).map\
    \ { case (letter, vowel) => vowel match {\n            case vowel => letter\n\
    \            case _ => vowel\n        }}", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageWithVowels = message.map(letter => vowels.indexOf(letter)\
    \ + letter)\n        val messageWithVowelsAndTwoLettersBefore = messageWithVowels.map(letter\
    \ => letter + letter)\n        val messageWithVowelsAndTwoLettersAfter = messageWithVowelsAndTwoLettersAfter.map(letter\
    \ => letter + letter)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBefore.map(letter => letter + letter)\n    \
    \    messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter.mkString(\"\")", " \
    \       val vowels = \"aeiou\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + letters.indexOf(vowels.charAt(1)) + letters.indexOf(vowels.charAt(2)) + letters.indexOf(vowels.charAt(3))\
    \ + letters.indexOf(vowels.charAt(4)) + letters.indexOf(vowels.charAt(5)) + letters.indexOf(vowels.charAt(6))\
    \ + letters.indexOf(vowels.charAt(7)) + letters.indexOf(vowels.charAt(8)) + letters.indexOf(vowels.charAt(9))\
    \ + letters.indexOf(vowels.charAt(10)) + letters.indexOf(vowels.charAt(11)) +\
    \ letters.indexOf(vowels.charAt(12)) + letters.indexOf(vowels.charAt(13)) + letters.indexOf(vowels.charAt(14))\
    \ + letters.indexOf(vowels.charAt(15)))\n        newMessage.toString", "     \
    \   val vowels = \"aeiouAEIOU\"\n        val alphabet = scala.collection.mutable.List(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"\
    n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\")\n\
    \        val messageWithVowels = message.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => alphabet(alphabet.indexOf(vowels(1))\
    \ + 1)\n            case 1 => alphabet(alphabet.indexOf(vowels(0)) + 1)\n    \
    \        case _ => alphabet(alphabet.indexOf(vowels(0)) + 1)\n        })\n   \
    \     val messageWithVowelsAndVowelsBefore = messageWithVowels.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => alphabet(alphabet.indexOf(vowels(1))\
    \ + 1)\n            case 1 => alphabet(alphabet.indexOf(vowels(0)) + 1)\n    \
    \        case _ => alphabet(alphabet.indexOf(vowels(0)) + 1)\n        })\n   \
    \     val messageWithVowelsAndVowelsAfter = messageWithVowels.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => alphabet(alphabet.indexOf(vowels(1))\
    \ + 1)\n            case 1 => alphabet(alphabet.indexOf(vowels(0)) + 1)\n    \
    \        case _ => alphabet(alphabet.indexOf(vowels(0)) + 1)\n        })\n   \
    \     val messageWithVowelsAndVowelsBeforeAndAfter = messageWithVowelsAndVowelsBefore.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case 0 => alphabet(alphabet.indexOf(vowels(1)) + 1)\n            case 1 =>\
    \ alphabet(alphabet.indexOf(vowels(0)) + 1)\n            case _ => alphabet(alphabet.indexOf(vowels(0))\
    \ + 1)\n        })\n        val messageWithVowelsAndVowelsBeforeAndAfterAndVowelsAfter\
    \ = messageWithVowelsAndVowelsBeforeAndAfter.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => alphabet(alphabet.indexOf(vowels(1))\
    \ + 1)\n            case 1 => alphabet(alphabet.indexOf(vowels(0)) + 1)\n    \
    \        case _ => alphabet(alphabet.indexOf(vowels(0)) + 1)\n        })\n   \
    \     val messageWithVowelsAndVowelsBeforeAndAfterAndVowelsAfterAndV", "     \
    \   val vowels = \"aeiou\"\n        val messageArray = message.split(\"\")\n \
    \       val newMessage = messageArray.map(letter => {\n            val index =\
    \ vowels.indexOf(letter)\n            if (index != -1) {\n                val\
    \ vowelIndex = vowels.indexOf(vowels(index + 1))\n                if (vowelIndex\
    \ != -1) {\n                    vowels(index) = vowels(vowelIndex + 1)\n     \
    \           }\n                else {\n                    vowels(index) = letter\n\
    \                }\n            }\n            else {\n                vowels(0)\
    \ = letter\n            }\n        }).mkString(\"\")\n        newMessage", " \
    \       val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val messageArray = message.split(\"\"\
    )\n        val encodedMessage = messageArray.map { x =>\n            val index\
    \ = alphabet.indexOf(x)\n            if (index != -1) alphabet(index) else x\n\
    \        }.mkString(\"\")\n        val vowelsArray = vowels.map(x => alphabet.indexOf(x)).distinct\n\
    \        val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayIndexes\
    \ = vowelsArray.zipWithIndex.map { case (v, i) => (v - i) % vowelsArrayLength\
    \ }\n        val vowelsArrayIndexesLength = vowelsArrayIndexes.length\n      \
    \  val vowelsArrayIndexesIndexes = vowelsArrayIndexes.zipWithIndex.map { case\
    \ (v, i) => (v - i) % vowelsArrayIndexesLength }\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArray", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n        val\
    \ newMessageArray = messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index >= 0) {\n                val vowelIndex = index + 1\n \
    \               val newLetter = vowels(vowelIndex)\n                println(s\"\
    $letter -> $newLetter\")\n                newLetter\n            } else {\n  \
    \              letter\n            }\n        })\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString\n        newMessageString",
  "        val vowels = \"aeiou\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageLength = message.length\n        val encodedMessage = mutable.StringBuilder(messageLength)\n\
    \        var i = 0\n        while (i < messageLength) {\n            val currentChar\
    \ = message.charAt(i)\n            val currentCharIndex = alphabet.indexOf(currentChar)\n\
    \            val nextCharIndex = currentCharIndex + 2\n            val nextChar\
    \ = alphabet.charAt(nextCharIndex)\n            encodedMessage.append(nextChar)\n\
    \            i += 1\n        }\n        encodedMessage.toString()", "        val\
    \ alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => \n            if (vowels.contains(letter)) letter else \n               \
    \ if (alphabet.contains(letter)) alphabet(alphabet.indexOf(letter) + 1) else letter)\n\
    \        newMessage.toString.replaceAll(\"[aeiou]\", \"$0\")", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val messageLength = message.length\n        val newMessage\
    \ = mutable.StringBuilder()\n        val newMessageLength = messageLength\n  \
    \      val newMessageLength = messageLength\n        val newMessageLength = messageLength\n\
    \        val newMessageLength = messageLength\n        val newMessageLength =\
    \ messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val new",
  "        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels = message.replaceAll(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersBefore = messageWithVowels.replaceAll(\"\
    ([aeiou])([aeiou])\", \"$1$2\".charAt(2))\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBefore.replaceAll(\"([aeiou])([aeiou])([aeiou])\"\
    , \"$1$2$3\".charAt(2))\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter.replaceAll(\"([aeiou])([aeiou])([aeiou])([aeiou])\"\
    , \"$1$2$3$4\".charAt(2))\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore.replaceAll(\"\
    ([aeiou])([aeiou])([aeiou])([aeiou])([aeiou])\", \"$1$2$3$4$5\".charAt(2))\n \
    \       val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter.replaceAll(\"\
    ([aeiou])([aeiou])([aeiou])([aeiou])([aeiou])([aeiou])\", \"$1$2$3$4$5$6\".charAt(2))\n\
    \        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore.replaceAll(\"\
    ([aeiou])([aeiou])([aeiou])([aeiou])([aeiou])([aeiou])([aeiou])\", \"$1$2$3$4$5$6$7\"\
    .charAt(2))\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLetter",
  "        val vowels = \"aeiou\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + 1)\n        newMessage.map(letter => letters.charAt(letter))", "        val\
    \ vowels = \"aeiou\"\n        val messageWithVowels = message.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case i => vowels(i + 2)\n\
    \        })\n        val messageWithVowelsAndVowelsTwoAhead = (messageWithVowels\
    \ zip vowels).map {\n            case (letter, vowel) => letter + vowel\n    \
    \    }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead = (messageWithVowelsAndVowelsTwoAhead\
    \ zip vowels).map {\n            case (letter, vowel) => letter + vowel\n    \
    \    }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead zip vowels).map {\n \
    \           case (letter, vowel) => letter + vowel\n        }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead zip\
    \ vowels).map {\n            case (letter, vowel) => letter + vowel\n        }\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ zip vowels).map {\n            case (letter, vowel) => letter + vowel\n    \
    \    }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowel",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val newMessage = mutable.StringBuilder()\n        var i = 0\n       \
    \ while (i < messageArray.length) {\n            val currentChar = messageArray(i)\n\
    \            if (vowels(i) == currentChar) {\n                newMessage.append(currentChar)\n\
    \            } else {\n                newMessage.append(vowels(i))\n        \
    \        newMessage.append(vowels(i + 1))\n            }\n            i += 1\n\
    \        }\n        newMessage.toString()", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => \n            vowels.indexOf(letter) match {\n\
    \                case -1 => letter\n                case 0 => letter\n       \
    \         case 1 => vowels(letter - 1) + letter\n                case 2 => vowels(letter\
    \ - 1) + vowels(letter - 1) + letter\n            }\n        )\n        val newMessage\
    \ = newMessageArray.toList\n        val newMessageString = newMessage.toString\n\
    \        val newMessageStringArray = newMessageString.split(\"\")\n        val\
    \ newMessageStringArrayLength = newMessageStringArray.length\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageString", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index != -1) {\n                val vowelIndex = index + 1\n\
    \                val vowel = vowels(vowelIndex)\n                vowel\n     \
    \       } else {\n                letter\n            }\n        })\n        val\
    \ newMessage = newMessageArray.toList\n        val newMessageString = newMessage.toString.replaceAll(\"\
    [aeiouAEIOU]\", \"$0\")\n        newMessageString", "        val vowels = \"aeiouAEIOU\"\
    \n        val alphabet = List(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"\
    ,\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\"\
    ,\"v\",\"w\",\"x\",\"y\",\"z\")\n        val messageList = message.split(\" \"\
    ).toList\n        val encodedMessage = messageList.foldLeft(\"\")( (acc, elem)\
    \ => {\n            val letter = elem.toUpperCase\n            val vowelIndex\
    \ = alphabet.indexOf(vowels)\n            val vowel2Index = alphabet.indexOf(elem.toUpperCase)\n\
    \            val letterIndex = alphabet.indexOf(letter)\n            val letter2Index\
    \ = alphabet.indexOf(elem.toUpperCase)\n            val newLetter = if (letterIndex\
    \ == vowelIndex) letter else elem.toUpperCase\n            val newLetter2 = if\
    \ (letter2Index == vowel2Index) letter else elem.toUpperCase\n            acc\
    \ + (if (letterIndex == vowelIndex) newLetter else newLetter2)\n        })\n \
    \       encodedMessage", "        val vowels = \"aeiouAEIOU\"\n        val alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val messageWithVowels = message.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case i => alphabet.charAt(i)\n        })\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) match {\n \
    \           case -1 => letter\n            case i => alphabet.charAt(i)\n    \
    \    })\n        val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case i => alphabet.charAt(i)\n\
    \        })\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed",
  "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + 1)\n        val newMessage2 = newMessage.map(letter => letters.charAt(letter))\n\
    \        val newMessage3 = newMessage2.map(letter => letters.indexOf(letter) +\
    \ letters.indexOf(vowels.charAt(0)) + 1)\n        val newMessage4 = newMessage3.map(letter\
    \ => letters.charAt(letter))\n        val newMessage5 = newMessage4.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0)) + 1)\n      \
    \  val newMessage6 = newMessage5.map(letter => letters.charAt(letter))\n     \
    \   val newMessage7 = newMessage6.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + 1)\n        val newMessage8 = newMessage7.map(letter => letters.charAt(letter))\n\
    \        val newMessage9 = newMessage8.map(letter => letters.indexOf(letter) +\
    \ letters.indexOf(vowels.charAt(0)) + 1)\n        val newMessage10 = newMessage9.map(letter\
    \ => letters.charAt(letter))\n        val newMessage11 = newMessage10.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0)) + 1)\n      \
    \  val newMessage12 = newMessage11.map(letter => letters.charAt(letter))\n   \
    \     val newMessage13 = newMessage12.map(letter => letters.indexOf(letter) +\
    \ letters.indexOf(vowels.charAt(0)) + 1)\n        val newMessage14 = newMessage13.map(letter\
    \ => letters.charAt(letter))\n        val newMessage15 = newMessage14.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0)) + 1)\n      \
    \  val newMessage16 = newMessage15.map(letter => letters.charAt(letter))\n   \
    \     val newMessage17 = newMessage16.map(letter => letters.indexOf(letter) +\
    \ letters.indexOf(vowels.charAt(0)) + 1)\n        val newMessage18 = newMessage17.map(letter\
    \ => letters.charAt(letter))\n        val newMessage19 = newMessage18.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0)) + 1)\n      \
    \  val newMessage20 = newMessage19.map(letter => letters.charAt(letter))\n   \
    \     val newMessage21 = newMessage20.map(letter => letters.indexOf(letter) +\
    \ letters.indexOf(vowels.charAt(0)) + 1)\n        val newMessage22 = newMessage21.map(letter\
    \ => letters.charAt(letter))\n        val newMessage23 = newMessage22.map(letter\
    \ => letters.", "        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(0)) + 1).map(letter => letters.charAt(letter))\n\
    \        val newMessageString = newMessage.toList.toString\n        newMessageString.toUpperCase",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newMessage = newMessageArray.toList.mkString(\"\
    \")\n        val newMessageArray2 = newMessage.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage2 = newMessageArray2.toList.mkString(\"\")\n  \
    \      val newMessage3 = newMessage2.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage4 = newMessage3.toList.mkString(\"\")\n       \
    \ val newMessage5 = newMessage4.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage6 = newMessage5.toList.mkString(\"\")\n       \
    \ val newMessage7 = newMessage6.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage8 = newMessage7.toList.mkString(\"\")\n       \
    \ val newMessage9 = newMessage8.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage10 = newMessage9.toList.mkString(\"\")\n      \
    \  val newMessage11 = newMessage10.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage12 = newMessage11.toList.mkString(\"\")\n     \
    \   val newMessage13 = newMessage12.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage14 = newMessage13.toList.mkString(\"\")\n     \
    \   val newMessage15 = newMessage14.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage16 = newMessage15.toList.mkString(\"\")\n     \
    \   val newMessage17 = newMessage16.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage18 = newMessage17.toList.mkString(\"\")\n     \
    \   val newMessage19 = newMessage18.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage20 = newMessage19.toList.mkString(\"\")\n     \
    \   val newMessage21 = newMessage20.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val ", "        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val nextVowel = vowels(index + 1)\n              \
    \  val nextIndex = vowels.indexOf(nextVowel)\n                if (nextIndex !=\
    \ -1) {\n                    val nextVowelIndex = vowels.indexOf(nextVowel, index\
    \ + 1)\n                    if (nextVowelIndex != -1) {\n                    \
    \    val nextVowelIndex = vowels.indexOf(nextVowel, nextIndex + 1)\n         \
    \               if (nextVowelIndex != -1) {\n                            val nextVowelIndex\
    \ = vowels.indexOf(nextVowel, nextVowelIndex + 1)\n                          \
    \  if (nextVowelIndex != -1) {\n                                nextVowel\n  \
    \                          } else {\n                                letter\n\
    \                            }\n                        } else {\n           \
    \                 letter\n                        }\n                    } else\
    \ {\n                        letter\n                    }\n                }\
    \ else {\n                    letter\n                }\n            } else {\n\
    \                letter\n            }\n        }).mkString(\"\")\n        encodedMessage",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter)) + vowels(vowels.indexOf(letter)) + alphabet(alphabet.indexOf(letter)\
    \ + 1))\n        newMessage.toString", "        val vowels = \"aeiouAEIOU\"\n\
    \        val messageArray = message.split(\"\")\n        val newMessageArray =\
    \ messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index >= 0) letter else vowels(index - 2)\n        })\n     \
    \   val newMessage = messageArray.toList.mkString(\"\")\n        newMessage",
  "        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels = message.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndVowelsTwoAhead = (messageWithVowels\
    \ +: messageWithVowels.split(vowels.charAt(2))).mkString\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAhead +: messageWithVowelsAndVowelsTwoAhead.split(vowels.charAt(2))).mkString\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead +: messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead.split(vowels.charAt(2))).mkString\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ +: messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead).mkString\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead).mkString\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead",
  "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map(letter => {\n            val vowelIndex = letters.indexOf(letter)\n\
    \            val vowel2Index = vowels.indexOf(letter)\n            val vowel2Index\
    \ = if (vowelIndex == -1) letters.length else vowelIndex + 2\n            val\
    \ letterIndex = letters.indexOf(letter)\n            val letter2Index = letters.indexOf(letter)\n\
    \            val letter2Index = if (letterIndex == -1) letters.length else letterIndex\
    \ + 2\n            val letter2Index = if (letter2Index == -1) letters.length else\
    \ letter2Index + 2\n            val letter2Index = if (letter2Index == -1) letters.length\
    \ else letter2Index + 2\n            val letter2Index = if (letter2Index == -1)\
    \ letters.length else letter2Index + 2\n            val letter2Index = if (letter2Index\
    \ == -1) letters.length else letter2Index + 2\n            val letter2Index =\
    \ if (letter2Index == -1) letters.length else letter2Index + 2\n            val\
    \ letter2Index = if (letter2Index == -1) letters.length else letter2Index + 2\n\
    \            val letter2Index = if (letter2Index == -1) letters.length else letter2Index\
    \ + 2\n            val letter2Index = if (letter2Index == -1) letters.length else\
    \ letter2Index + 2\n            val letter2Index = if (letter2Index == -1) letters.length\
    \ else letter2Index + 2\n            val letter2Index = if (letter2Index == -1)\
    \ letters.length else letter2Index + 2\n            val letter2Index = if (letter2Index\
    \ == -1) letters.length else letter2Index + 2\n            val letter2Index =\
    \ if (letter2Index == -1) letters.length else letter2Index + 2\n            val\
    \ letter2Index = if (letter2Index == -1) letters.length else letter2Index + 2\n\
    \            val letter2Index = if (letter2Index == -1) letters.length else letter2Index\
    \ + 2\n            val letter2Index = if (letter2Index == -1) letters.length else\
    \ letter2Index + 2\n            val letter2Index = if (letter2Index == -1) letters.length\
    \ else letter2Index + 2\n            val letter2Index = if (letter2Index == -1)\
    \ letters.length else letter2Index + 2\n            val letter2Index = if (letter2Index\
    \ == -1) letters.length else letter2Index + 2\n            val letter2Index =\
    \ if (letter2Index == -1) letters.length else letter2Index + 2\n            val\
    \ letter2Index = if (", "        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.foldLeft(\"\
    \") { (result, currentChar) =>\n            val vowelIndex = vowels.indexOf(currentChar)\n\
    \            if (vowelIndex != -1) {\n                val vowel = vowels(vowelIndex)\n\
    \                val vowelIndex = vowels.indexOf(vowel)\n                val vowelIndex\
    \ = vowelIndex + 2\n                val letter = vowels(vowelIndex)\n        \
    \        result + letter\n            } else {\n                result + currentChar\n\
    \            }\n        }\n        encodedMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index != -1) {\n                val nextLetter = vowels(index\
    \ + 1)\n                val newLetter = if (letter != nextLetter) letter else\
    \ nextLetter\n                nextLetter -> newLetter\n            } else {\n\
    \                letter -> letter\n            }\n        })\n        val newMessage\
    \ = messageArray.toList.mkString(\"\")\n        newMessageArray.toList.mkString(\"\
    \")", "        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels = message.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersBefore = messageWithVowels.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfter = messageWithVowelsAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfter.replaceAllIn(vowels, vowels.charAt(2))\n\
    \        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAnd",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','i','o','u')\n        val newMessage = message\n\
    \        val newMessageList = newMessage.split(\"\")\n        val newMessageList2\
    \ = newMessageList.map(x => alphabet(alphabet.indexOf(x) + 1))\n        val newMessageList3\
    \ = newMessageList2.map(x => vowels(vowels.indexOf(x) + 1))\n        newMessageList3.mkString(\"\
    \")", "        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels = message.map(letter\
    \ => vowels.indexOf(letter) + letter)\n        val messageWithVowelsReversed =\
    \ messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) + letter)\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        messageWithVowelsReversedWithVowelsReplacedReversed.mkString(\"\")",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map { x =>\n            val index\
    \ = vowels.indexOf(x)\n            if (index != -1) {\n                val vowel\
    \ = vowels(index)\n                val vowelIndex = vowels.indexOf(vowel)\n  \
    \              val nextVowel = vowels(vowelIndex + 1)\n                val nextVowelIndex\
    \ = vowels.indexOf(nextVowel)\n                val nextVowelIndex = if (nextVowelIndex\
    \ == -1) vowels.length else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVow", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','a','i','o','u')\n        val newMessage = message\n\
    \        val newMessageList = newMessage.split(\"\")\n        val newMessageList2\
    \ = newMessageList.map(x => alphabet(alphabet.indexOf(x) + 1))\n        val newMessageList3\
    \ = newMessageList2.map(x => vowels(vowels.indexOf(x) + 1))\n        val newMessageList4\
    \ = newMessageList3.map(x => alphabet(alphabet.indexOf(x) + 1))\n        val newMessageList5\
    \ = newMessageList4.map(x => vowels(vowels.indexOf(x) + 1))\n        newMessageList5.mkString(\"\
    \")", "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowels.indexOf(vowel, vowelIndex) + 1\n            } else {\n\
    \                vowels.indexOf(letter) + 1\n            }\n        }).foldLeft(\"\
    \")(_ + _)\n        encodedMessage", "        val vowels = \"aeiou\"\n       \
    \ val messageArray = message.toCharArray\n        val newMessageArray = Array.ofDim[Char](messageArray.length)\n\
    \        var i = 0\n        while (i < messageArray.length) {\n            val\
    \ currentChar = messageArray(i)\n            if (vowels.contains(currentChar))\
    \ {\n                val nextChar = messageArray(i + 1)\n                if (vowels.contains(nextChar))\
    \ {\n                    newMessageArray(i) = vowels(0) + vowels(1)\n        \
    \            newMessageArray(i + 1) = vowels(0)\n                    i += 2\n\
    \                } else {\n                    newMessageArray(i) = vowels(0)\n\
    \                    newMessageArray(i + 1) = vowels(0)\n                    i\
    \ += 1\n                }\n            } else {\n                newMessageArray(i)\
    \ = currentChar\n                i += 1\n            }\n        }\n        new\
    \ String(newMessageArray)", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ messageWithVowels = message.toLowerCase.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => letter\n     \
    \       case 1 => vowels(letter - 2)\n            case 2 => vowels(letter - 3)\n\
    \            case 3 => vowels(letter - 4)\n            case 4 => vowels(letter\
    \ - 5)\n            case 5 => vowels(letter - 6)\n            case 6 => vowels(letter\
    \ - 7)\n            case 7 => vowels(letter - 8)\n            case 8 => vowels(letter\
    \ - 9)\n            case 9 => vowels(letter - 10)\n            case 10 => vowels(letter\
    \ - 11)\n            case 11 => vowels(letter - 12)\n            case 12 => vowels(letter\
    \ - 13)\n            case 13 => vowels(letter - 14)\n            case 14 => vowels(letter\
    \ - 15)\n            case 15 => vowels(letter - 16)\n            case 16 => vowels(letter\
    \ - 17)\n            case 17 => vowels(letter - 18)\n            case 18 => vowels(letter\
    \ - 19)\n            case 19 => vowels(letter - 20)\n            case 20 => vowels(letter\
    \ - 21)\n            case 21 => vowels(letter - 22)\n            case 22 => vowels(letter\
    \ - 23)\n            case 23 => vowels(letter - 24)\n            case 24 => vowels(letter\
    \ - 25)\n            case 25 => vowels(letter - 26)\n            case 26 => vowels(letter\
    \ - 27)\n            case 27 => vowels(letter - 28)\n            case 28 => vowels(letter\
    \ - 29)\n            case 29 => vowels(letter - 30)\n            case 30 => vowels(letter\
    \ - 31)\n            case 31 => vowels(letter - 32)\n            case 32 => vowels(letter\
    \ - 33)\n            case 33 => vowels(letter - 34)\n            case 34 => vowels(letter\
    \ - 35)\n            case 35 => vowels(letter - 36)\n            case 36 => vowels(letter\
    \ - 37)\n            case 37 => vowels(letter - 38)\n            case 38 => vowels(letter\
    \ - 39)\n            case 39 => vowels(letter - 40)\n            case 40 => vowels(letter\
    \ - 41)\n            case 41 => vowels(letter - 42)\n            case 42 => vowels(letter\
    \ - 43)\n            case 43 => vowels(letter - 44)\n            case 44 => vowels(letter\
    \ - 45)\n            case 45 => vowels(letter - 46)\n            case 46 => vowels(letter\
    \ - 47)\n            case 47 => vowels(letter - 48)\n            case 48 => vowels(letter\
    \ - 49)\n            case 49 => vowels(", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','a','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels = vowels.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowelsMap = vowels.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val newVowelsMap2 = vowels.zipWithIndex.map(x => (x._1,\
    \ x._2))\n        val newVowelsMap3 = vowels.zipWithIndex.map(x => (x._1, x._2))\n\
    \        val newVowelsMap4 = vowels.zipWithIndex.map(x => (x._1, x._2))\n    \
    \    val newVowelsMap5 = vowels.zipWithIndex.map(x => (x._1, x._2))\n        val\
    \ newVowelsMap6 = vowels.zipWithIndex.map(x => (x._1, x._2))\n        val newVowelsMap7\
    \ = vowels.zipWithIndex.map(x => (x._1, x._2))\n        val newVowelsMap8 = vowels.zipWithIndex.map(x\
    \ => (x._1, x._2))\n        val newVowelsMap9 = vowels.zipWithIndex.map(x => (x._1,\
    \ x._2))\n        val newVowelsMap10 = vowels.zipWithIndex.map(x => (x._1, x._2))\n\
    \        val newVowelsMap11 = vowels.zipWithIndex.map(x => (x._1, x._2))\n   \
    \     val newVowelsMap12 = vowels.zipWithIndex.map(x => (x._1, x._2))\n      \
    \  val newVowelsMap13 = vowels.zipWithIndex.map(x => (x._1, x._2))\n        val\
    \ newVowelsMap14 = vowels.zipWithIndex.map(x => (x._1, x._2))\n        val newVowelsMap15\
    \ = vowels.zipWithIndex.map(x => (x._1, x._2))\n        val newVowelsMap16 = vowels.zipWithIndex.map(x\
    \ => (x._", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            letter match {\n                case 'a' => alphabet(0)\n \
    \               case 'b' => alphabet(1)\n                case 'c' => alphabet(2)\n\
    \                case 'd' => alphabet(3)\n                case 'e' => alphabet(4)\n\
    \                case 'f' => alphabet(5)\n                case 'g' => alphabet(6)\n\
    \                case 'h' => alphabet(7)\n                case 'i' => alphabet(8)\n\
    \                case 'j' => alphabet(9)\n                case 'k' => alphabet(10)\n\
    \                case 'l' => alphabet(11)\n                case 'm' => alphabet(12)\n\
    \                case 'n' => alphabet(13)\n                case 'o' => alphabet(14)\n\
    \                case 'p' => alphabet(15)\n                case 'q' => alphabet(16)\n\
    \                case 'r' => alphabet(17)\n                case 's' => alphabet(18)\n\
    \                case 't' => alphabet(19)\n                case 'u' => alphabet(20)\n\
    \                case 'v' => alphabet(21)\n                case 'w' => alphabet(22)\n\
    \                case 'x' => alphabet(23)\n                case 'y' => alphabet(24)\n\
    \                case 'z' => alphabet(25)\n                case _ => letter\n\
    \            }\n        )\n        val newMessage = messageArray.map(letter =>\
    \ \n            letter match {\n                case 'a' => vowels(0)\n      \
    \          case 'b' => vowels(1)\n                case 'c' => vowels(2)\n    \
    \            case 'd' => vowels(3)\n                case 'e' => vowels(4)\n  \
    \              case 'f' => vowels(5)\n                case 'g' => vowels(6)\n\
    \                case 'h' => vowels(7)\n                case 'i' => vowels(8)\n\
    \                case 'j' => vowels(9)\n                case 'k' => vowels(10)\n\
    \                case 'l' => vowels(11)\n                case 'm' => vowels(12)\n\
    \                case 'n' => vowels(13)\n                case 'o' => vowels(14)\n\
    \                case 'p' => vowels(15)\n                case 'q' => vowels(16)\n\
    \                case 'r' => vowels(17)\n                case 's' => vowels(18)\n\
    \                case 't' => vowels(19)\n                case 'u' => vowels(20)\n\
    \                case 'v' => vowels(21)\n                case 'w' => vowels(22)\n\
    \                case 'x' => vowels(23)\n                case 'y' => vowels(24)\n\
    \                case 'z' => vowels(25)\n                case _ => letter\n  \
    \          }\n        ).mkString(\"\")\n        val newMessageArray2 = newMessageArray.map(letter\
    \ => \n            ", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter))\n        val newMessage2\
    \ = newMessage.map(letter => alphabet.indexOf(letter) + 2)\n        val newMessage3\
    \ = newMessage2.map(letter => alphabet.indexOf(letter) + 1)\n        newMessage3.map(letter\
    \ => alphabet.indexOf(letter))", "        val vowels = \"aeiouAEIOU\"\n      \
    \  val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0)) + 1)\n      \
    \  val newMessage2 = newMessage.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(1))\
    \ + 1)\n        val newMessage3 = newMessage2.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(2)) + 1)\n        val newMessage4 = newMessage3.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(3)) + 1)\n      \
    \  val newMessage5 = newMessage4.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(4))\
    \ + 1)\n        val newMessage6 = newMessage5.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(5)) + 1)\n        val newMessage7 = newMessage6.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(6)) + 1)\n      \
    \  val newMessage8 = newMessage7.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(7))\
    \ + 1)\n        val newMessage9 = newMessage8.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(8)) + 1)\n        val newMessage10 = newMessage9.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(9)) + 1)\n      \
    \  val newMessage11 = newMessage10.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(10))\
    \ + 1)\n        val newMessage12 = newMessage11.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(11)) + 1)\n        val newMessage13 = newMessage12.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(12)) + 1)\n     \
    \   val newMessage14 = newMessage13.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(13))\
    \ + 1)\n        val newMessage15 = newMessage14.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(14)) + 1)\n        val newMessage16 = newMessage15.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(15)) + 1)\n     \
    \   val newMessage17 = newMessage16.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(16))\
    \ + 1)\n        val newMessage18 = newMessage17.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(17)) + 1)\n        val newMessage19 = newMessage18.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter)) + alphabet(alphabet.indexOf(letter)\
    \ + 1))\n        val newVowels = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 1))\n        newMessage.zip(newVowels).map(x => x._1 + x._2).mkString(\"\"\
    )", "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowel\n            } else {\n                letter\n       \
    \     }\n        })\n        val newMessage = newMessageArray.toList\n       \
    \ newMessage.foldLeft(\"\") {\n            case (acc, letter) => acc + letter.toUpperCase\n\
    \        }", "        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + letter)\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) + letter)\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        messageWithVowelsReversedWithVowelsReplacedReversed", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n   \
    \     val vowelIndexes = vowels.toList.map(letters.indexOf(_))\n        val messageLength\
    \ = message.length\n        val encodedMessage = message.map(letter => letters.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case i => letters.indexOf(letter,\
    \ i + 1)\n        }).mkString\n        val encodedMessageLength = encodedMessage.length\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength + messageLength\n   \
    \     val encodedMessageLength = encodedMessageLength + messageLength\n      \
    \  val encodedMessageLength = encodedMessageLength + messageLength\n        val\
    \ encodedMessageLength = encodedMessageLength + messageLength\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength + messageLength\n   \
    \     val encodedMessageLength = encodedMessageLength + messageLength\n      \
    \  val encodedMessageLength = encodedMessageLength + messageLength\n        val\
    \ encodedMessageLength = encodedMessageLength + messageLength\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength + messageLength\n   \
    \     val encodedMessageLength = encodedMessageLength + messageLength\n      \
    \  val encodedMessageLength = encodedMessageLength + messageLength\n        val\
    \ encodedMessageLength = encodedMessageLength + messageLength\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength + messageLength\n   \
    \     val encodedMessageLength = encodedMessageLength + messageLength\n      \
    \  val encodedMessageLength = encodedMessageLength + messageLength\n        val\
    \ encodedMessageLength = encodedMessageLength + messageLength\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength + messageLength\n   \
    \     val encodedMessageLength = encodedMessageLength + messageLength\n      \
    \  val encodedMessageLength = encodedMessage", "        val alphabet = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\"\
    , \"u\")\n        val newMessage = message.map(letter => alphabet.indexOf(letter)\
    \ + alphabet.indexOf(letter) + 1)\n        newMessage.map(letter => vowels.indexOf(letter)\
    \ + vowels.indexOf(letter) + 1).map(letter => alphabet(letter))", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val messageLength = message.length\n      \
    \  val encodedMessage = mutable.Buffer.empty[Char]\n        val vowelsCount =\
    \ message.count(vowels)\n        val vowelsIndex = message.indexOf(vowels)\n \
    \       val vowelsIndex2 = message.indexOf(vowels, vowelsIndex + 1)\n        val\
    \ vowelsIndex3 = message.indexOf(vowels, vowelsIndex + 2)\n        val vowelsIndex4\
    \ = message.indexOf(vowels, vowelsIndex + 3)\n        val vowelsIndex5 = message.indexOf(vowels,\
    \ vowelsIndex + 4)\n        val vowelsIndex6 = message.indexOf(vowels, vowelsIndex\
    \ + 5)\n        val vowelsIndex7 = message.indexOf(vowels, vowelsIndex + 6)\n\
    \        val vowelsIndex8 = message.indexOf(vowels, vowelsIndex + 7)\n       \
    \ val vowelsIndex9 = message.indexOf(vowels, vowelsIndex + 8)\n        val vowelsIndex10\
    \ = message.indexOf(vowels, vowelsIndex + 9)\n        val vowelsIndex11 = message.indexOf(vowels,\
    \ vowelsIndex + 10)\n        val vowelsIndex12 = message.indexOf(vowels, vowelsIndex\
    \ + 11)\n        val vowelsIndex13 = message.indexOf(vowels, vowelsIndex + 12)\n\
    \        val vowelsIndex14 = message.indexOf(vowels, vowelsIndex + 13)\n     \
    \   val vowelsIndex15 = message.indexOf(vowels, vowelsIndex + 14)\n        val\
    \ vowelsIndex16 = message.indexOf(vowels, vowelsIndex + 15)\n        val vowelsIndex17\
    \ = message.indexOf(vowels, vowelsIndex + 16)\n        val vowelsIndex18 = message.indexOf(vowels,\
    \ vowelsIndex + 17)\n        val vowelsIndex19 = message.indexOf(vowels, vowelsIndex\
    \ + 18)\n        val vowelsIndex20 = message.indexOf(vowels, vowelsIndex + 19)\n\
    \        val vowelsIndex21 = message.indexOf(vowels, vowelsIndex + 20)\n     \
    \   val vowelsIndex22 = message.indexOf(vowels, vowelsIndex + 21)\n        val\
    \ vowelsIndex23 = message.indexOf(vowels, vowelsIndex + 22)\n        val vowelsIndex24\
    \ = message.indexOf(vowels, vowelsIndex + 23)\n        val vowelsIndex25 = message.indexOf(vowels,\
    \ vowelsIndex + 24)\n        val vowelsIndex26 = message.indexOf(vowels, vowelsIndex\
    \ + 25)\n        val vowelsIndex27 = message.indexOf(vowels, vowelsIndex + 26)\n\
    \        val vowelsIndex28 = message.indexOf(vowels, vowelsIndex + 27)\n     \
    \   val vowelsIndex29 = message.indexOf(vowel", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageWithVowels = message.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val messageWithVowelsReversed = messageWithVowels.reverse\n  \
    \      val messageWithVowelsReversedWithVowelsReplaced = messageWithVowelsReversed.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplaced.reverse\n        messageWithVowelsReversedWithVowelsReplacedReversed.map(letter\
    \ => vowels.indexOf(letter) + 1).mkString(\"\")", "        val vowels = \"aeiouAEIOU\"\
    \n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => {\n            if (vowels.contains(letter)) {\n                val index\
    \ = vowels.indexOf(letter)\n                val nextLetter = letters.charAt(index\
    \ + 1)\n                val nextIndex = letters.indexOf(nextLetter)\n        \
    \        letters.charAt(index) + letters.charAt(nextIndex)\n            } else\
    \ {\n                letter\n            }\n        }).mkString(\"\")\n      \
    \  encodedMessage", "        val vowels = \"aeiouAEIOU\"\n        val newMessage\
    \ = message\n        val newMessageList = newMessage.split(\"\")\n        val\
    \ newMessageList2 = newMessageList.map(x => if (vowels.contains(x)) x.toUpperCase\
    \ else x)\n        val newMessageList3 = newMessageList2.map(x => if (vowels.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList4 = newMessageList3.map(x =>\
    \ if (vowels.contains(x)) x.toUpperCase else x)\n        val newMessageList5 =\
    \ newMessageList4.map(x => if (vowels.contains(x)) x.toUpperCase else x)\n   \
    \     val newMessageList6 = newMessageList5.map(x => if (vowels.contains(x)) x.toUpperCase\
    \ else x)\n        val newMessageList7 = newMessageList6.map(x => if (vowels.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList8 = newMessageList7.map(x =>\
    \ if (vowels.contains(x)) x.toUpperCase else x)\n        val newMessageList9 =\
    \ newMessageList8.map(x => if (vowels.contains(x)) x.toUpperCase else x)\n   \
    \     val newMessageList10 = newMessageList9.map(x => if (vowels.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList11 = newMessageList10.map(x\
    \ => if (vowels.contains(x)) x.toUpperCase else x)\n        val newMessageList12\
    \ = newMessageList11.map(x => if (vowels.contains(x)) x.toUpperCase else x)\n\
    \        val newMessageList13 = newMessageList12.map(x => if (vowels.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList14 = newMessageList13.map(x\
    \ => if (vowels.contains(x)) x.toUpperCase else x)\n        val newMessageList15\
    \ = newMessageList14.map(x => if (vowels.contains(x)) x.toUpperCase else x)\n\
    \        val newMessageList16 = newMessageList15.map(x => if (vowels.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList17 = newMessageList16.map(x\
    \ => if (vowels.contains(x)) x.toUpperCase else x)\n        val newMessageList18\
    \ = newMessageList17.map(x => if (vowels.contains(x)) x.toUpperCase else x)\n\
    \        val newMessageList19 = newMessageList18.map(x => if (vowels.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList20 = newMessageList19.map(x\
    \ => if (vowels.contains(", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ messageArray = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowel.zip(vowel.tail).map { case (vowel1,\
    \ vowel2) => vowel1 + vowel2 }\n            } else {\n                letter\n\
    \            }\n        })\n        newMessageArray.toString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.foldLeft(\"\
    \"){ (result, current) => {\n            val currentChar = current.toLowerCase\
    \ \n            val currentCharIndex = alphabet.indexOf(currentChar)\n       \
    \     val currentCharVowelIndex = vowels.indexOf(currentChar)\n            val\
    \ currentCharVowelIndex2 = vowels.indexOf(currentChar + currentChar)\n       \
    \     val currentCharVowelIndex3 = vowels.indexOf(currentChar + currentChar +\
    \ currentChar)\n            val currentCharVowelIndex4 = vowels.indexOf(currentChar\
    \ + currentChar + currentChar + currentChar)\n            val currentCharVowelIndex5\
    \ = vowels.indexOf(currentChar + currentChar + currentChar + currentChar + currentChar)\n\
    \            val currentCharVowelIndex6 = vowels.indexOf(currentChar + currentChar\
    \ + currentChar + currentChar + currentChar + currentChar)\n            val currentCharVowelIndex7\
    \ = vowels.indexOf(currentChar + currentChar + currentChar + currentChar + currentChar\
    \ + currentChar + currentChar)\n            val currentCharVowelIndex8 = vowels.indexOf(currentChar\
    \ + currentChar + currentChar + currentChar + currentChar + currentChar + currentChar\
    \ + currentChar)\n            val currentCharVowelIndex9 = vowels.indexOf(currentChar\
    \ + currentChar + currentChar + currentChar + currentChar + currentChar + currentChar\
    \ + currentChar + currentChar)\n            val currentCharVowelIndex10 = vowels.indexOf(currentChar\
    \ + currentChar + currentChar + currentChar + currentChar + currentChar + currentChar\
    \ + currentChar + currentChar + currentChar)\n            val currentCharVowelIndex11\
    \ = vowels.indexOf(currentChar + currentChar + currentChar + currentChar + currentChar\
    \ + currentChar + currentChar + currentChar + currentChar + currentChar + currentChar)\n\
    \            val currentCharVowelIndex12 = vowels.indexOf(currentChar + currentChar\
    \ + currentChar + currentChar + currentChar + currentChar + currentChar + currentChar\
    \ + currentChar + currentChar + currentChar + currentChar)\n            ", " \
    \       val vowels = \"aeiouAEIOU\"\n        val messageList = message.split(\"\
    \")\n        val newMessage = messageList.foldLeft(\"\"){ (acc, elem) =>\n   \
    \         val index = vowels.indexOf(elem)\n            if (index != -1) {\n \
    \               val newElem = vowels(index - 1) + vowels(index)\n            \
    \    acc + (if (acc.length == 0) newElem else newElem + acc)\n            } else\
    \ {\n                acc + (if (acc.length == 0) elem.toUpperCase else elem.toUpperCase\
    \ + acc)\n            }\n        }\n        newMessage", "        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(x => alphabet(alphabet.indexOf(x)\
    \ + 1))\n        val newMessage = \"\"\n        val vowelsArray = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 1))\n        val vowelsArray2 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 2))\n        val vowelsArray3 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 3))\n        val vowelsArray4 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 4))\n        val vowelsArray5 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 5))\n        val vowelsArray6 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 6))\n        val vowelsArray7 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 7))\n        val vowelsArray8 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 8))\n        val vowelsArray9 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 9))\n        val vowelsArray10 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 10))\n        val vowelsArray11 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 11))\n        val vowelsArray12 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 12))\n        val vowelsArray13 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 13))\n        val vowelsArray14 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 14))\n        val vowelsArray15 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 15))\n        val vowelsArray16 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 16))\n        val vowelsArray17 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 17))\n        val vowelsArray18 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 18))\n        val vowelsArray19 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 19))\n        val vowelsArray20 = vowel",
  "        val vowels = \"aeiou\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val newMessage = messageArray.map\
    \ { x =>\n            val index = alphabet.indexOf(x)\n            if (vowels.contains(x))\
    \ {\n                val nextVowel = alphabet.charAt(index + 1)\n            \
    \    alphabet(index) + nextVowel\n            } else {\n                x\n  \
    \          }\n        }.mkString(\"\")\n        newMessage", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n        val\
    \ newMessageArray = messageArray.map(letter => \n            if (vowels.contains(letter))\
    \ letter else \n                vowels.indexOf(letter) + 2)\n        val newMessage\
    \ = messageArray.toList.mkString(\"\")\n        val newMessageArray2 = newMessageArray.map(letter\
    \ => \n            if (vowels.contains(letter)) letter else \n               \
    \ vowels.indexOf(letter) + 1)\n        newMessageArray2.toList.mkString(\"\")",
  "        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val letters\
    \ = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val messageList = message.split(\"\")\n        val newMessageList =\
    \ messageList.map(letter => letters.find(letter => letter != letter).map(_ =>\
    \ letter).getOrElse(letter))\n        val newMessage = messageList.mkString(\"\
    \")\n        val newMessageList = newMessage.split(\"\")\n        val newVowels\
    \ = vowels.map(letter => letters.find(letter => letter != letter).map(_ => letter).getOrElse(letter))\n\
    \        val newVowelsList = newVowels.mkString(\"\")\n        val newVowelsSet\
    \ = newVowels.toSet\n        val newVowelsSetList = newVowelsSet.toList\n    \
    \    val newVowelsSetList = newVowelsSetList.map(letter => letters.find(letter\
    \ => letter != letter).map(_ => letter).getOrElse(letter))\n        val newVowelsSetList\
    \ = newVowelsSetList.mkString(\"\")\n        val newVowelsSetSet = newVowelsSet.toSet\n\
    \        val newVowelsSetSetList = newVowelsSetSet.toList\n        val newVowelsSetSetList\
    \ = newVowelsSetSetList.map(letter => letters.find(letter => letter != letter).map(_\
    \ => letter).getOrElse(letter))\n        val newVowelsSetSetList = newVowelsSetSetList.mkString(\"\
    \")\n        val newVowelsSetSetSet = newVowelsSetSet.toSet\n        val newVowelsSetSetSetList\
    \ = newVowelsSetSetSet.toList\n        val newVowelsSetSetSetList = newVowelsSetSetSetList.map(letter\
    \ => letters.find(letter => letter != letter).map(_ => letter).getOrElse(letter))\n\
    \        val newVowelsSetSetSetList = newVowelsSetSetSetList.mkString(\"\")\n\
    \        val newVowelsSetSetSet = newVowelsSetSetSet.toSet\n        val newVowelsSetSetSetList\
    \ = newVow", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\" \")\n        val newMessage = messageList.map(x => x.toUpperCase).mkString(\"\
    \")\n        val newMessageList = newMessage.split(\"\")\n        val newMessageList2\
    \ = newMessageList.map(x => x.toUpperCase).mkString(\"\")\n        val newMessageList3\
    \ = newMessageList2.split(\"\")\n        val newMessageList4 = newMessageList3.map(x\
    \ => x.toUpperCase).mkString(\"\")\n        val newMessageList5 = newMessageList4.split(\"\
    \")\n        val newMessageList6 = newMessageList5.map(x => x.toUpperCase).mkString(\"\
    \")\n        val newMessageList7 = newMessageList6.split(\"\")\n        val newMessageList8\
    \ = newMessageList7.map(x => x.toUpperCase).mkString(\"\")\n        val newMessageList9\
    \ = newMessageList8.split(\"\")\n        val newMessageList10 = newMessageList9.map(x\
    \ => x.toUpperCase).mkString(\"\")\n        val newMessageList11 = newMessageList10.split(\"\
    \")\n        val newMessageList12 = newMessageList11.map(x => x.toUpperCase).mkString(\"\
    \")\n        val newMessageList13 = newMessageList12.split(\"\")\n        val\
    \ newMessageList14 = newMessageList13.map(x => x.toUpperCase).mkString(\"\")\n\
    \        val newMessageList15 = newMessageList14.split(\"\")\n        val newMessageList16\
    \ = newMessageList15.map(x => x.toUpperCase).mkString(\"\")\n        val newMessageList17\
    \ = newMessageList16.split(\"\")\n        val newMessageList18 = newMessageList17.map(x\
    \ => x.toUpperCase).mkString(\"\")\n        val newMessageList19 = newMessageList18.split(\"\
    \")\n        val newMessageList20 = newMessageList19.map(x => x.toUpperCase).mkString(\"\
    \")\n        val newMessageList21 = newMessageList20.split(\"\")\n        val\
    \ newMessageList22 = newMessageList21.map(x => x.toUpperCase).mkString(\"\")\n\
    \        val newMessageList23 = newMessageList22.split(\"\")\n        val newMessageList24\
    \ = newMessageList23.map(x => x.toUpperCase).mkString(\"\")\n        val newMessageList25\
    \ = newMessageList", "        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map { letter\
    \ =>\n            val index = vowels.indexOf(letter)\n            if (index !=\
    \ -1) vowels(index - 1) + letter\n            else letter\n        }\n       \
    \ encodedMessage.toString.reverse", "        val vowels = \"aeiouAEIOU\"\n   \
    \     val messageArray = message.split(\"\")\n        val messageArrayLength =\
    \ messageArray.length\n        val encodedMessageArray = messageArray.map(letter\
    \ => {\n            val vowelIndex = vowels.indexOf(letter)\n            val vowelPosition\
    \ = vowelIndex + 2\n            val letterIndex = vowels.indexOf(messageArray(vowelIndex))\n\
    \            val letterPosition = letterIndex + 2\n            val letter = messageArray(letterIndex)\n\
    \            if (vowelPosition == letterPosition) {\n                letter\n\
    \            } else {\n                letter.toUpperCase\n            }\n   \
    \     })\n        val encodedMessage = encodedMessageArray.toList\n        encodedMessage.mkString(\"\
    \")", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.foldLeft(\"\")( (acc, letter) =>\
    \ acc + (if (vowels.contains(letter)) letter else alphabet(alphabet.indexOf(letter)\
    \ + 2)))\n        encodedMessage", "        val vowels = \"aeiou\"\n        val\
    \ messageArray = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowels.indexOf(vowel)\n            } else\
    \ {\n                letter\n            }\n        })\n        val newMessage\
    \ = String.join(\"\", newMessageArray)\n        newMessage", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val messageWithVowels = message.toLowerCase.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case i => vowels(i + 2)\n        })\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) match {\n \
    \           case -1 => letter\n            case i => vowels(i + 2)\n        })\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case i => vowels(i + 2)\n\
    \        })\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case i => vowels(i + 2)\n        })\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplaced",
  "        val vowels = \"aeiouAEIOU\"\n        val messageList = message.split(\"\
    \ \").toList\n        val newMessage = messageList.foldLeft(\"\")( (acc, elem)\
    \ => {\n            val vowelIndex = elem.indexOf(vowels)\n            val vowel\
    \ = elem.substring(vowelIndex, vowelIndex + 2)\n            val newElem = elem.substring(0,\
    \ vowelIndex) + vowel + elem.substring(vowelIndex + 2)\n            acc + newElem\n\
    \        })\n        newMessage", "        val vowels = \"aeiou\"\n        val\
    \ letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0)) + 1).map(letter\
    \ => letters.charAt(letter))\n        newMessage.toString", "        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels\
    \ = vowels.map(letter => alphabet(alphabet.indexOf(letter) + 2))\n        newMessage.zip(newVowels).map(x\
    \ => x._1 + x._2).mkString(\"\")", "        val vowels = \"aeiou\"\n        val\
    \ letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val messageLength = message.length\n\
    \        var encodedMessage = \"\"\n        var currentLetter = \"\"\n       \
    \ var currentVowel = \"\"\n        var currentVowelPosition = 0\n        var currentLetterPosition\
    \ = 0\n        for(i <- 0 until messageLength) {\n            currentLetter =\
    \ message.charAt(i)\n            currentVowel = vowels.indexOf(currentLetter)\n\
    \            currentVowelPosition = currentVowel + 1\n            currentLetterPosition\
    \ = letters.indexOf(currentLetter)\n            encodedMessage += letters.charAt(currentLetterPosition)\n\
    \            if(currentVowelPosition == 2) {\n                encodedMessage +=\
    \ letters.charAt(currentVowelPosition)\n            }\n        }\n        encodedMessage",
  "        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels = message +\
    \ vowels\n        val messageWithVowelsArray = messageWithVowels.toCharArray\n\
    \        val vowelsArray = vowels.toCharArray\n        val result = new StringBuilder\n\
    \        var i = 0\n        while (i < messageWithVowelsArray.length) {\n    \
    \        val currentChar = messageWithVowelsArray(i)\n            val nextChar\
    \ = messageWithVowelsArray(i + 1)\n            if (vowelsArray.contains(currentChar))\
    \ {\n                val currentIndex = vowelsArray.indexOf(currentChar)\n   \
    \             val nextIndex = vowelsArray.indexOf(nextChar)\n                val\
    \ currentVowel = vowelsArray(currentIndex)\n                val nextVowel = vowelsArray(nextIndex)\n\
    \                val currentVowelIndex = vowelsArray.indexOf(currentVowel)\n \
    \               val nextVowelIndex = vowelsArray.indexOf(nextVowel)\n        \
    \        val currentVowelIndex = currentVowelIndex + 1\n                val nextVowelIndex\
    \ = nextVowelIndex - 1\n                val currentVowelIndex = currentVowelIndex\
    \ - 1\n                val nextVowelIndex = nextVowelIndex + 1\n             \
    \   val currentVowelIndex = currentVowelIndex + 1\n                val nextVowelIndex\
    \ = nextVowelIndex - 1\n                val currentVowelIndex = currentVowelIndex\
    \ - 1\n                val nextVowelIndex = nextVowelIndex + 1\n             \
    \   val currentVowelIndex = currentVowelIndex + 1\n                val nextVowelIndex\
    \ = nextVowelIndex - 1\n                val currentVowelIndex = currentVowelIndex\
    \ - 1\n                val nextVowelIndex = nextVowelIndex + 1\n             \
    \   val currentVowelIndex = currentVowelIndex + 1\n                val nextVowelIndex\
    \ = nextVowelIndex - 1\n                val currentVowelIndex = currentVowelIndex\
    \ - 1\n                val nextVowelIndex = nextVowelIndex + 1\n             \
    \   val currentVowelIndex = currentVowelIndex + 1\n                val nextVowelIndex\
    \ = nextVowelIndex - 1\n                val currentVowelIndex = currentVowelIndex\
    \ - 1\n                val nextVowelIndex = nextVowelIndex + 1\n             \
    \   val currentVowelIndex = currentVowelIndex + 1\n                val nextVowelIndex\
    \ = nextVowelIndex - 1\n                val currentVow", "        val vowels =\
    \ \"aeiouAEIOU\"\n        val messageWithVowels = message.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterVowel = messageWithVowels.replaceAllIn(vowels.charAt(2),\
    \ vowels.charAt(3))\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowel.replaceAllIn(vowels.charAt(3), vowels.charAt(4))\n\
    \        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowel.replaceAllIn(vowels.charAt(4),\
    \ vowels.charAt(5))\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.replaceAllIn(vowels.charAt(5),\
    \ vowels.charAt(6))\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.replaceAllIn(vowels.charAt(6),\
    \ vowels.charAt(7))\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.replaceAllIn(vowels.charAt(7),\
    \ vowels.charAt(8))\n        val messageWithVowelsAndTwoLettersAfter", "     \
    \   val vowels = \"aeiouAEIOU\"\n        val messageArray = message.toCharArray\n\
    \        val newMessageArray = Array.ofDim[Char](messageArray.length)\n      \
    \  var i = 0\n        while (i < messageArray.length) {\n            val currentChar\
    \ = messageArray(i)\n            val currentCharIndex = vowels.indexOf(currentChar)\n\
    \            if (currentCharIndex == -1) {\n                newMessageArray(i)\
    \ = currentChar\n            } else {\n                val nextCharIndex = currentCharIndex\
    \ + 1\n                val nextChar = vowels(nextCharIndex)\n                newMessageArray(i)\
    \ = nextChar\n            }\n            i += 1\n        }\n        new String(newMessageArray)",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val result = new StringBuilder\n        var i = 0\n        while (i <\
    \ messageArray.length) {\n            val currentChar = messageArray(i)\n    \
    \        val nextChar = messageArray(i + 1)\n            if (vowels.contains(currentChar)\
    \ && vowels.contains(nextChar)) {\n                val index = vowels.indexOf(currentChar)\n\
    \                val nextIndex = vowels.indexOf(nextChar)\n                result.append(vowels(index\
    \ - 1))\n                result.append(vowels(nextIndex + 1))\n            } else\
    \ {\n                result.append(currentChar)\n            }\n            i\
    \ += 1\n        }\n        return result.toString", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageLength = message.length\n        val encodedMessage = mutable.StringBuilder()\n\
    \        val vowelsCount = message.count(vowels)\n        val vowelsIndex = 0\n\
    \        val vowelsIndex2 = 0\n        val vowelsIndex3 = 0\n        val vowelsIndex4\
    \ = 0\n        val vowelsIndex5 = 0\n        val vowelsIndex6 = 0\n        val\
    \ vowelsIndex7 = 0\n        val vowelsIndex8 = 0\n        val vowelsIndex9 = 0\n\
    \        val vowelsIndex10 = 0\n        val vowelsIndex11 = 0\n        val vowelsIndex12\
    \ = 0\n        val vowelsIndex13 = 0\n        val vowelsIndex14 = 0\n        val\
    \ vowelsIndex15 = 0\n        val vowelsIndex16 = 0\n        val vowelsIndex17\
    \ = 0\n        val vowelsIndex18 = 0\n        val vowelsIndex19 = 0\n        val\
    \ vowelsIndex20 = 0\n        val vowelsIndex21 = 0\n        val vowelsIndex22\
    \ = 0\n        val vowelsIndex23 = 0\n        val vowelsIndex24 = 0\n        val\
    \ vowelsIndex25 = 0\n        val vowelsIndex26 = 0\n        val vowelsIndex27\
    \ = 0\n        val vowelsIndex28 = 0\n        val vowelsIndex29 = 0\n        val\
    \ vowelsIndex30 = 0\n        val vowelsIndex31 = 0\n        val vowelsIndex32\
    \ = 0\n        val vowelsIndex33 = 0\n        val vowelsIndex34 = 0\n        val\
    \ vowelsIndex35 = 0\n        val vowelsIndex36 = 0\n        val vowelsIndex37\
    \ = 0\n        val vowelsIndex38 = 0\n        val vowelsIndex39 = 0\n        val\
    \ vowelsIndex40 = 0\n        val vowelsIndex41 = 0\n        val vowelsIndex42\
    \ = 0\n        val vowelsIndex43 = 0\n        val vowelsIndex44 = 0\n        val\
    \ vowelsIndex45 = 0\n        val vowelsIndex46 = 0\n        val vowelsIndex47\
    \ = 0\n        val vowelsIndex48 = 0\n        val vowelsIndex49 = 0\n        val\
    \ vowelsIndex50 = 0\n        val vowelsIndex51 = 0\n        val vowelsIndex52\
    \ = 0\n        val vowelsIndex53 = 0\n        val vowelsIndex54 = 0\n        val\
    \ vowelsIndex55 = 0\n        val vowelsIndex56 = 0\n        val vowelsIndex57\
    \ = 0\n        val vowelsIndex58 = 0\n        val vowelsIndex59 = 0\n        val ",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(vowels.indexOf(vowels.tail) + 1)\n         \
    \   })\n        val newMessage = newMessageArray.toList\n        val newMessageString\
    \ = newMessage.toString.reverse.mkString\n        val newMessageStringArray =\
    \ newMessageString.split(\"\")\n        val newMessageStringArrayLength = newMessageStringArray.length\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessage", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\") { (result,\
    \ current) => {\n            val currentLetter = current.toLowerCase\n       \
    \     val currentLetterIndex = alphabet.indexOf(currentLetter)\n            val\
    \ currentVowelIndex = vowels.indexOf(currentLetter)\n            val currentVowelIndex2\
    \ = vowels.indexOf(currentLetter.charAt(currentVowelIndex + 1))\n            val\
    \ currentVowelIndex3 = vowels.indexOf(currentLetter.charAt(currentVowelIndex +\
    \ 2))\n            val currentVowelIndex4 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 3))\n            val currentVowelIndex5 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 4))\n            val currentVowelIndex6 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 5))\n            val currentVowelIndex7 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 6))\n            val currentVowelIndex8 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 7))\n            val currentVowelIndex9 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 8))\n            val currentVowelIndex10 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 9))\n            val currentVowelIndex11 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 10))\n            val currentVowelIndex12 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 11))\n            val currentVowelIndex13 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 12))\n            val currentVowelIndex14 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 13))\n            val currentVowelIndex15 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 14))\n            val currentVowelIndex16 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 15))\n            val currentVowelIndex17 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 16))\n", "        val vowels = \"aeiouAEIOU\"\n        val messageArray =\
    \ message.split(\"\")\n        val newMessageArray = messageArray.map(letter =>\
    \ {\n            val index = vowels.indexOf(letter)\n            if (index !=\
    \ -1) {\n                val vowelIndex = index + 1\n                val newLetter\
    \ = vowels(vowelIndex)\n                vowels(index) = newLetter\n          \
    \      vowels(vowelIndex) = letter\n                newLetter\n            } else\
    \ {\n                letter\n            }\n        })\n        val newMessage\
    \ = messageArray.join(\"\")\n        newMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageWithVowels = message.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val messageWithVowelsReversed = messageWithVowels.reverse\n  \
    \      val messageWithVowelsReversedWithVowelsReplaced = messageWithVowelsReversed.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplaced.reverse\n        messageWithVowelsReversedWithVowelsReplacedReversed.foldLeft(\"\
    \")( (acc, letter) => acc + letter)", "        val vowels = \"aeiouAEIOU\"\n \
    \       val messageWithVowels = message.map(letter => vowels.indexOf(letter) +\
    \ 1)\n        val messageWithVowelsReversed = messageWithVowels.reverse\n    \
    \    val messageWithVowelsReversedWithVowelsReplaced = messageWithVowelsReversed.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplaced.reverse\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowels",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','i','o','u')\n        val newMessage = message.map(letter\
    \ => \n            letter match {\n                case 'a' => alphabet(0)\n \
    \               case 'b' => alphabet(1)\n                case 'c' => alphabet(2)\n\
    \                case 'd' => alphabet(3)\n                case 'e' => alphabet(4)\n\
    \                case 'f' => alphabet(5)\n                case 'g' => alphabet(6)\n\
    \                case 'h' => alphabet(7)\n                case 'i' => alphabet(8)\n\
    \                case 'j' => alphabet(9)\n                case 'k' => alphabet(10)\n\
    \                case 'l' => alphabet(11)\n                case 'm' => alphabet(12)\n\
    \                case 'n' => alphabet(13)\n                case 'o' => alphabet(14)\n\
    \                case 'p' => alphabet(15)\n                case 'q' => alphabet(16)\n\
    \                case 'r' => alphabet(17)\n                case 's' => alphabet(18)\n\
    \                case 't' => alphabet(19)\n                case 'u' => alphabet(20)\n\
    \                case 'v' => alphabet(21)\n                case 'w' => alphabet(22)\n\
    \                case 'x' => alphabet(23)\n                case 'y' => alphabet(24)\n\
    \                case 'z' => alphabet(25)\n                case letter => alphabet(alphabet.indexOf(letter)\
    \ + 2)\n            }\n        )\n        newMessage.map(letter => \n        \
    \    letter match {\n                case 'a' => vowels(0)\n                case\
    \ 'b' => vowels(1)\n                case 'c' => vowels(2)\n                case\
    \ 'd' => vowels(3)\n                case 'e' => vowels(4)\n                case\
    \ 'f' => vowels(5)\n                case 'g' => vowels(6)\n                case\
    \ 'h' => vowels(7)\n                case 'i' => vowels(8)\n                case\
    \ 'j' => vowels(9)\n                case 'k' => vowels(10)\n                case\
    \ 'l' => vowels(11)\n                case 'm' => vowels(12)\n                case\
    \ 'n' => vowels(13)\n                case 'o' => vowels(14)\n                case\
    \ 'p' => vowels(15)\n                case 'q' => vowels(16)\n                case\
    \ 'r' => vowels(17)\n                case 's' => vowels(18)\n                case\
    \ 't' => vowels(19)\n                case 'u' => vowels(20)\n                case\
    \ 'v' => vowels(21)\n                case 'w' => vowels(22)\n                case\
    \ 'x' => vowels(23)\n                case 'y' => vowels(24)\n                case\
    \ 'z' => vowels(25)\n                case letter => vowels(vowels.indexOf(letter)\
    \ + 2)\n            }\n        ).mkString(\"\")", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageWithVowels = message.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => letter\n     \
    \       case 1 => vowels.charAt(letter - 1) + letter\n            case 2 => vowels.charAt(letter\
    \ - 1) + vowels.charAt(letter - 2)\n            case _ => letter\n        })\n\
    \        val messageWithVowelsSortedByVowel = messageWithVowels.sorted\n     \
    \   val messageWithVowelsSortedByVowelLength = messageWithVowelsSortedByVowel.length\n\
    \        val messageWithVowelsSortedByVowelLength = messageWithVowelsSortedByVowelLength\
    \ - 1\n        val messageWithVowelsSortedByVowelLength = messageWithVowelsSortedByVowelLength\
    \ - 1\n        val messageWithVowelsSortedByVowelLength = messageWithVowelsSortedByVowelLength\
    \ - 1\n        val messageWithVowelsSortedByVowelLength = messageWithVowelsSortedByVowelLength\
    \ - 1\n        val messageWithVowelsSortedByVowelLength = messageWithVowelsSortedByVowelLength\
    \ - 1\n        val messageWithVowelsSortedByVowelLength = messageWithVowelsSortedByVowelLength\
    \ - 1\n        val messageWithVowelsSortedByVowelLength = messageWithVowelsSortedByVowelLength\
    \ - 1\n        val messageWithVowelsSortedByVowelLength = messageWithVowelsSortedByVowelLength\
    \ - 1\n        val messageWithVowelsSortedByVowelLength = messageWithVowelsSortedByVowelLength\
    \ - 1\n        val messageWithVowelsSortedByVowelLength = messageWithVowelsSortedByVowelLength\
    \ - 1\n        val messageWithVowelsSortedByVowelLength = messageWithVowelsSortedByVowelLength\
    \ - 1\n        val messageWithVowelsSortedByVowelLength = messageWithVowelsSortedByVowelLength\
    \ - 1\n        val messageWithVowelsSortedByVowelLength = messageWithVowelsSortedByVowelLength\
    \ - 1\n        val messageWithVowelsSortedByVowelLength = messageWithVowelsSortedByVow",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val encodedMessage = messageList.foldLeft(\"\")( (acc, elem) => {\n\
    \            val index = alphabet.indexOf(elem)\n            val nextIndex = index\
    \ + 2\n            val nextChar = alphabet(nextIndex)\n            acc + (if (vowels.contains(elem))\
    \ elem else nextChar)\n        })\n        encodedMessage", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val messageLength = message.length\n        val messageChars\
    \ = message.map(_.toUpperCase)\n        val messageCharsLength = messageChars.length\n\
    \        val encodedMessage = messageChars.map(c => {\n            val index =\
    \ vowels.indexOf(c)\n            if (index >= 0) {\n                val vowelIndex\
    \ = index\n                val vowelChar = vowels(vowelIndex + 1)\n          \
    \      val vowelCharIndex = vowels.indexOf(vowelChar)\n                val vowelCharIndex\
    \ = vowelIndex + 2\n                val vowelCharIndex = vowelIndex + 3\n    \
    \            val vowelCharIndex = vowelIndex + 4\n                val vowelCharIndex\
    \ = vowelIndex + 5\n                val vowelCharIndex = vowelIndex + 6\n    \
    \            val vowelCharIndex = vowelIndex + 7\n                val vowelCharIndex\
    \ = vowelIndex + 8\n                val vowelCharIndex = vowelIndex + 9\n    \
    \            val vowelCharIndex = vowelIndex + 10\n                val vowelCharIndex\
    \ = vowelIndex + 11\n                val vowelCharIndex = vowelIndex + 12\n  \
    \              val vowelCharIndex = vowelIndex + 13\n                val vowelCharIndex\
    \ = vowelIndex + 14\n                val vowelCharIndex = vowelIndex + 15\n  \
    \              val vowelCharIndex = vowelIndex + 16\n                val vowelCharIndex\
    \ = vowelIndex + 17\n                val vowelCharIndex = vowelIndex + 18\n  \
    \              val vowelCharIndex = vowelIndex + 19\n                val vowelCharIndex\
    \ = vowelIndex + 20\n                val vowelCharIndex = vowelIndex + 21\n  \
    \              val vowelCharIndex = vowelIndex + 22\n                val vowelCharIndex\
    \ = vowelIndex + 23\n                val vowelCharIndex = vowelIndex + 24\n  \
    \              val vowelCharIndex = vowelIndex + 25\n                val vowelCharIndex\
    \ = vowelIndex + 26\n                val vowelCharIndex = vowelIndex + 27\n  \
    \              val vowelCharIndex = vowelIndex + 28\n                val vowelCharIndex\
    \ = vowelIndex + 29\n                val vowelCharIndex = vowelIndex + 30\n  \
    \              val vowelCharIndex = vowelIndex + 31\n                val vowelCharIndex\
    \ = vowelIndex + 32\n                val vowelCharIndex = vowelIndex + 33\n  \
    \              val vowelCharIndex = vowelIndex + 34\n                val vowelCharIndex\
    \ = vowelIndex + 35\n                val vowelCharIndex = vowelIndex + 36\n  \
    \              val vowelCharIndex = vowelIndex + 37\n                val vowelCharIndex\
    \ = vowelIndex + 38\n                val vowelCharIndex = vowelIndex + 39\n  \
    \              val vowelCharIndex = vowelIndex + 40\n                val vowelCharIndex\
    \ = vowelIndex + 41\n                val vowelCharIndex = vowelIndex + 42\n  \
    \              val vowelCharIndex = vowelIndex + ", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageWithVowels = message.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case i => vowels(i + 2)\n\
    \        })\n        val messageWithVowelsReversed = messageWithVowels.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplaced = messageWithVowelsReversed.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case i => vowels(i + 2)\n        })\n        val messageWithVowelsReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplaced.reverse\n        messageWithVowelsReversedWithVowelsReplacedReversed",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => {\n            val\
    \ vowelIndex = vowels.indexOf(letter)\n            val vowel2Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 1))\n            val vowel3Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 2))\n            val vowel4Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 3))\n            val vowel5Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 4))\n            val vowel6Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 5))\n            val vowel7Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 6))\n            val vowel8Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 7))\n            val vowel9Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 8))\n            val vowel10Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 9))\n            val vowel11Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 10))\n            val vowel12Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 11))\n            val vowel13Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 12))\n            val vowel14Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 13))\n            val vowel15Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 14))\n            val vowel16Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 15))\n            val vowel17Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 16))\n            val vowel18Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 17))\n            val vowel19Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 18))\n            val vowel20Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 19))\n            val vowel21Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 20))\n            val vowel22Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 21))\n            val vowel23Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 22))\n            val vowel24Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 23))\n            val vowel25Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 24))\n            val vowel26Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 25))\n            val vowel27Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 26))\n            val vowel28Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 27))\n            val vowel29Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 28))\n            val vowel30Index = vowel", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val newMessage = messageList.foldLeft(\"\"){ (acc, elem) => \n  \
    \          val index = alphabet.indexOf(elem)\n            val nextVowel = alphabet(index+2)\n\
    \            val nextLetter = alphabet(index+1)\n            acc + (if (vowels.contains(elem))\
    \ nextVowel else nextLetter) + elem\n        }\n        newMessage", "       \
    \ val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val newMessageList = messageList.map(x => \n            x match {\n\
    \                case 'a' -> alphabet(0)\n                case 'b' -> alphabet(1)\n\
    \                case 'c' -> alphabet(2)\n                case 'd' -> alphabet(3)\n\
    \                case 'e' -> alphabet(4)\n                case 'f' -> alphabet(5)\n\
    \                case 'g' -> alphabet(6)\n                case 'h' -> alphabet(7)\n\
    \                case 'i' -> alphabet(8)\n                case 'j' -> alphabet(9)\n\
    \                case 'k' -> alphabet(10)\n                case 'l' -> alphabet(11)\n\
    \                case 'm' -> alphabet(12)\n                case 'n' -> alphabet(13)\n\
    \                case 'o' -> alphabet(14)\n                case 'p' -> alphabet(15)\n\
    \                case 'q' -> alphabet(16)\n                case 'r' -> alphabet(17)\n\
    \                case 's' -> alphabet(18)\n                case 't' -> alphabet(19)\n\
    \                case 'u' -> alphabet(20)\n                case 'v' -> alphabet(21)\n\
    \                case 'w' -> alphabet(22)\n                case 'x' -> alphabet(23)\n\
    \                case 'y' -> alphabet(24)\n                case 'z' -> alphabet(25)\n\
    \                case _ -> x\n            }\n        )\n        val newMessage\
    \ = messageList.map(x => \n            x match {\n                case 'a' ->\
    \ vowels(0)\n                case 'b' -> vowels(1)\n                case 'c' ->\
    \ vowels(2)\n                case 'd' -> vowels(3)\n                case 'e' ->\
    \ vowels(4)\n                case 'f' -> vowels(5)\n                case 'g' ->\
    \ vowels(6)\n                case 'h' -> vowels(7)\n                case 'i' ->\
    \ vowels(8)\n                case 'j' -> vowels(9)\n                case 'k' ->\
    \ vowels(10)\n                case 'l' -> vowels(11)\n                case 'm'\
    \ -> vowels(12)\n                case 'n' -> vowels(13)\n                case\
    \ 'o' -> vowels(14)\n                case 'p' -> vowels(15)\n                case\
    \ 'q' -> vowels(16)\n                case 'r' -> vowels(17)\n                case\
    \ 's' -> vowels(18)\n                case 't' -> vowels(19)\n                case\
    \ 'u' -> vowels(20)\n                case 'v' -> vowels(21)\n                case\
    \ 'w' -> vowels(22)\n                case '", "        val vowels = \"aeiouAEIOU\"\
    \n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val vowelsMap\
    \ = Map(\"a\" -> \"A\", \"e\" -> \"E\", \"i\" -> \"I\", \"o\" -> \"O\", \"u\"\
    \ -> \"U\")\n        val lettersMap = Map(\"a\" -> \"b\", \"e\" -> \"c\", \"i\"\
    \ -> \"d\", \"o\" -> \"f\", \"u\" -> \"g\")\n        val newMessage = message.map(letter\
    \ => lettersMap(letter))\n        val newMessage2 = newMessage.map(letter => vowelsMap(letter))\n\
    \        val newMessage3 = newMessage2.map(letter => lettersMap(letter))\n   \
    \     val newMessage4 = newMessage3.map(letter => vowelsMap(letter))\n       \
    \ val newMessage5 = newMessage4.map(letter => lettersMap(letter))\n        val\
    \ newMessage6 = newMessage5.map(letter => vowelsMap(letter))\n        val newMessage7\
    \ = newMessage6.map(letter => lettersMap(letter))\n        val newMessage8 = newMessage7.map(letter\
    \ => vowelsMap(letter))\n        val newMessage9 = newMessage8.map(letter => lettersMap(letter))\n\
    \        val newMessage10 = newMessage9.map(letter => vowelsMap(letter))\n   \
    \     val newMessage11 = newMessage10.map(letter => lettersMap(letter))\n    \
    \    val newMessage12 = newMessage11.map(letter => vowelsMap(letter))\n      \
    \  val newMessage13 = newMessage12.map(letter => lettersMap(letter))\n       \
    \ val newMessage14 = newMessage13.map(letter => vowelsMap(letter))\n        val\
    \ newMessage15 = newMessage14.map(letter => lettersMap(letter))\n        val newMessage16\
    \ = newMessage15.map(letter => vowelsMap(letter))\n        val newMessage17 =\
    \ newMessage16.map(letter => lettersMap(letter))\n        val newMessage18 = newMessage17.map(letter\
    \ => vowelsMap(letter))\n        val newMessage19 = newMessage18.map(letter =>\
    \ lettersMap(letter))\n        val newMessage20 = newMessage19.map(letter => vowelsMap(letter))\n\
    \        val newMessage21 = newMessage20.map(letter => lettersMap(letter))\n \
    \       val newMessage22 = newMessage21.map(letter => vowelsMap(letter))\n   \
    \     val newMessage23 = newMessage22.map(letter => lettersMap(letter))\n    \
    \    val newMessage24 = newMessage23.map(letter => vowelsMap(letter))\n      \
    \  val newMessage25 = newMessage24.map(letter => lettersMap(letter))\n       \
    \ val new", "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val newLetter = vowels(vowelIndex)\n\
    \                vowels(index) = newLetter\n                newLetter\n      \
    \      } else {\n                letter\n            }\n        })\n        val\
    \ newMessage = newMessageArray.toList\n        newMessage.toString.reverse.mkString(\"\
    \")", "        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels = message.replaceAll(vowels,\
    \ vowels.toUpperCase)\n        val messageWithVowelsAndTwoLettersBefore = messageWithVowels.replaceAll(\"\
    ([aeiou])([aeiou])\", \"$1$2$2\")\n        val messageWithVowelsAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBefore.replaceAll(\"([aeiou])([aeiou])\", \"\
    $1$2$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfter.replaceAll(\"([aeiou])([aeiou])\", \"\
    $1$2$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore.replaceAll(\"([aeiou])([aeiou])\"\
    , \"$1$2$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore.replaceAll(\"\
    ([aeiou])([aeiou])\", \"$1$2$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAll(\"\
    ([aeiou])([aeiou])\", \"$1$2$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAll(\"\
    ([aeiou])([aeiou])\", \"$1$2$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAnd",
  "        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageArray\
    \ = message.split(\"\")\n        val messageArrayLength = messageArray.length\n\
    \        val newMessageArray = messageArray.map(letter => {\n            val index\
    \ = vowels.indexOf(letter)\n            if (index != -1) {\n                val\
    \ vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n   \
    \             vowel\n            } else {\n                letter\n          \
    \  }\n        })\n        val newMessageArrayLength = newMessageArray.length\n\
    \        val newMessage = newMessageArray.join\n        val newMessageLength =\
    \ newMessage.length\n        val newMessageArrayLength = newMessageArrayLength\n\
    \        val newMessageArray = newMessageArray\n        val newMessageArrayLength\
    \ = newMessageArrayLength\n        val newMessageArray = newMessageArray\n   \
    \     val newMessageArrayLength = newMessageArrayLength\n        val newMessageArray\
    \ = newMessageArray\n        val newMessageArrayLength = newMessageArrayLength\n\
    \        val newMessageArray = newMessageArray\n        val newMessageArrayLength\
    \ = newMessageArrayLength\n        val newMessageArray = newMessageArray\n   \
    \     val newMessageArrayLength = newMessageArrayLength\n        val newMessageArray\
    \ = newMessageArray\n        val newMessageArrayLength = newMessageArrayLength\n\
    \        val newMessageArray = newMessageArray\n        val newMessageArrayLength\
    \ = newMessageArrayLength\n        val newMessageArray = newMessageArray\n   \
    \     val newMessageArrayLength = newMessageArrayLength\n        val newMessageArray\
    \ = newMessageArray\n        val newMessageArrayLength = newMessageArrayLength\n\
    \        val newMessageArray = newMessageArray\n        val newMessageArrayLength\
    \ = newMessageArrayLength\n        val newMessageArray = newMessageArray\n   \
    \     val newMessageArrayLength = newMessageArrayLength\n        val newMessageArray\
    \ = newMessageArray\n        val newMessageArrayLength = newMessageArrayLength\n\
    \        val newMessageArray = newMessageArray\n        val newMessageArrayLength\
    \ = newMessageArrayLength\n        val newMessageArray = newMessageArray\n   \
    \     val newMessageArrayLength = newMessageArrayLength\n        val newMessageArray\
    \ = newMessageArray\n        val newMessageArrayLength = newMessageArrayLength\n\
    \        val newMessageArray = newMessageArray\n        val newMessageArrayLength\
    \ = newMessageArrayLength\n        val newMessageArray = newMessageArray\n   \
    \     val newMessageArrayLength = newMessageArrayLength\n        val newMessageArray\
    \ = newMessageArray\n        val newMessageArrayLength = newMessageArrayLength\n\
    \        val newMessageArray = newMessageArray\n        val newMessageArrayLength\
    \ = newMessageArrayLength\n        val newMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0)) + 1).mkString(\"\
    \")\n        encodedMessage", "        val vowels = Set(\"a\", \"e\", \"i\", \"\
    o\", \"u\")\n        val messageArray = message.split(\"\")\n        val encodedMessage\
    \ = messageArray.map(letter => {\n            val vowelIndex = vowels.indexOf(letter)\n\
    \            if(vowelIndex != -1){\n                val vowel = vowels(vowelIndex)\n\
    \                val vowelIndex = vowels.indexOf(vowel)\n                val nextVowel\
    \ = vowels(vowelIndex + 1)\n                letter match {\n                 \
    \   case \"a\" => nextVowel\n                    case \"e\" => vowel\n       \
    \             case \"i\" => vowel\n                    case \"o\" => vowel\n \
    \                   case \"u\" => vowel\n                    case _ => letter\n\
    \                }\n            }\n            else{\n                letter\n\
    \            }\n        }).mkString(\"\")\n        encodedMessage", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n  \
    \      val newMessageArray = messageArray.map(letter => \n            vowels.indexOf(letter)\
    \ + vowels.indexOf(letter) + 1)\n        val newMessage = messageArray.toList.mkString(\"\
    \")\n        val newMessageArray2 = newMessage.split(\"\")\n        newMessageArray2.map(letter\
    \ => \n            vowels.indexOf(letter) + vowels.indexOf(letter) + 1)", "  \
    \      val vowels = \"aeiouAEIOU\"\n        val newMessage = message.map(letter\
    \ => vowels.indexOf(letter) + 2)\n        val newMessage2 = newMessage.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        newMessage2.zip(newMessage).map(x =>\
    \ x.swap).mkString", "        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.toCharArray\n        val newMessage = mutable.Buffer.empty[Char]\n\
    \        val vowelsArray = vowels.toCharArray\n        val vowelsArrayLength =\
    \ vowelsArray.length\n        val messageArrayLength = messageArray.length\n \
    \       val newMessageArray = mutable.Buffer.empty[Char]\n        val newMessageArrayLength\
    \ = newMessageArray.length\n        val newMessageArrayIndex = 0\n        val\
    \ newMessageArrayIndexLength = 0\n        val newMessageArrayIndexLength2 = newMessageArrayIndexLength\
    \ * 2\n        val newMessageArrayIndexLength3 = newMessageArrayIndexLength *\
    \ 3\n        val newMessageArrayIndexLength4 = newMessageArrayIndexLength * 4\n\
    \        val newMessageArrayIndexLength5 = newMessageArrayIndexLength * 5\n  \
    \      val newMessageArrayIndexLength6 = newMessageArrayIndexLength * 6\n    \
    \    val newMessageArrayIndexLength7 = newMessageArrayIndexLength * 7\n      \
    \  val newMessageArrayIndexLength8 = newMessageArrayIndexLength * 8\n        val\
    \ newMessageArrayIndexLength9 = newMessageArrayIndexLength * 9\n        val newMessageArrayIndexLength10\
    \ = newMessageArrayIndexLength * 10\n        val newMessageArrayIndexLength11\
    \ = newMessageArrayIndexLength * 11\n        val newMessageArrayIndexLength12\
    \ = newMessageArrayIndexLength * 12\n        val newMessageArrayIndexLength13\
    \ = newMessageArrayIndexLength * 13\n        val newMessageArrayIndexLength14\
    \ = newMessageArrayIndexLength * 14\n        val newMessageArrayIndexLength15\
    \ = newMessageArrayIndexLength * 15\n        val newMessageArrayIndexLength16\
    \ = newMessageArrayIndexLength * 16\n        val newMessageArrayIndexLength17\
    \ = newMessageArrayIndexLength * 17\n        val newMessageArrayIndexLength18\
    \ = newMessageArrayIndexLength * 18\n        val newMessageArrayIndexLength19\
    \ = newMessageArrayIndexLength * 19\n        val newMessageArrayIndexLength20\
    \ = newMessageArrayIndexLength * 20\n        val newMessageArrayIndexLength21\
    \ = newMessageArrayIndexLength * 21\n        val newMessageArrayIndexLength22\
    \ = newMessageArrayIndexLength * 22\n        val newMessageArrayIndexLength23\
    \ = newMessageArrayIndexLength * 23\n        val newMessageArrayIndexLength24\
    \ = newMessageArrayIndexLength * 24\n        val newMessageArrayIndexLength25\
    \ = newMessageArrayIndexLength * 25\n        val newMessageArrayIndexLength26\
    \ = newMessageArrayIndexLength * 26\n        val new", "        val vowels = \"\
    aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => \n            vowels.indexOf(letter) match {\n\
    \                case -1 => letter\n                case i => vowels(i+2)\n  \
    \          }\n        )\n        val newMessage = messageArray.toList.mkString(\"\
    \")\n        val newMessageArray2 = newMessageArray.map(letter => \n         \
    \   vowels.indexOf(letter) match {\n                case -1 => letter\n      \
    \          case i => vowels(i+2)\n            }\n        )\n        val newMessage2\
    \ = newMessageArray2.toList.mkString(\"\")\n        val newMessageArray3 = newMessage2.split(\"\
    \").map(letter => \n            vowels.indexOf(letter) match {\n             \
    \   case -1 => letter\n                case i => vowels(i+2)\n            }\n\
    \        )\n        val newMessage3 = newMessageArray3.toList.mkString(\"\")\n\
    \        val newMessageArray4 = newMessage3.split(\"\").map(letter => \n     \
    \       vowels.indexOf(letter) match {\n                case -1 => letter\n  \
    \              case i => vowels(i+2)\n            }\n        )\n        val newMessage4\
    \ = newMessageArray4.toList.mkString(\"\")\n        val newMessageArray5 = newMessage4.split(\"\
    \").map(letter => \n            vowels.indexOf(letter) match {\n             \
    \   case -1 => letter\n                case i => vowels(i+2)\n            }\n\
    \        )\n        val newMessage5 = newMessageArray5.toList.mkString(\"\")\n\
    \        val newMessageArray6 = newMessage5.split(\"\").map(letter => \n     \
    \       vowels.indexOf(letter) match {\n                case -1 => letter\n  \
    \              case i => vowels(i+2)\n            }\n        )\n        val newMessage6\
    \ = newMessageArray6.toList.mkString(\"\")\n        val newMessageArray7 = newMessage6.split(\"\
    \").map(letter => \n            vowels.indexOf(letter) match {\n             \
    \   case -1 => letter\n                case i => vowels(i+2)\n            }\n\
    \        )\n        val newMessage7 = newMessageArray7.toList.mkString(\"\")\n\
    \        val newMessageArray8 = newMessage7.split(\"\").map(letter => \n     \
    \       vowels.indexOf(letter) match {\n                case -1 => letter\n  \
    \              case i => vowels(i+2)\n            }\n        )\n        val newMessage8\
    \ = newMessageArray8.toList.mkString(\"\")\n        val newMessageArray9 = newMessage8.split(\"\
    \").map(letter => \n            vowels.indexOf(letter) match {\n             \
    \   case -1 => letter\n                case i => vowels(i+2)\n            }\n\
    \        )\n        val new", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)))\n\
    \        val messageWithVowelsReversed = messageWithVowels.reverse\n        val\
    \ messageWithVowelsReversedWithVowelsReplaced = messageWithVowelsReversed.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)))\n        messageWithVowelsReversedWithVowelsReplaced.reverse",
  "        val vowels = \"aeiouAEIOU\"\n        val messageList = message.split(\"\
    \")\n        val encodedMessage = messageList.foldLeft(\"\"){ (acc, c) =>\n  \
    \          val index = vowels.indexOf(c)\n            if (index != -1) {\n   \
    \             val vowel = vowels(index)\n                val vowelIndex = vowels.indexOf(vowel)\n\
    \                val vowel2 = vowels(vowelIndex + 1)\n                acc + (if\
    \ (vowelIndex == 0) c else vowel) + vowel2\n            } else {\n           \
    \     acc + c\n            }\n        }\n        encodedMessage", "        val\
    \ vowels = \"aeiou\"\n        val messageWithVowels = message.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val messageWithVowelsReversed = messageWithVowels.reverse\n  \
    \      val messageWithVowelsReversedWithVowelsReplaced = messageWithVowelsReversed.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplaced.reverse\n        messageWithVowelsReversedWithVowelsReplacedReversed.map(letter\
    \ => vowels.indexOf(letter) + 1).mkString(\"\")", "        val vowels = \"aeiouAEIOU\"\
    \n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val newMessage\
    \ = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + 1)\n        val newMessage2 = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(1)) + 1)\n        newMessage.zip(newMessage2).map(x\
    \ => x.swap).mkString(\"\")", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ messageArray = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val nextVowel = vowels(index + 1)\n              \
    \  val newLetter = if (letter != nextVowel) letter else nextVowel\n          \
    \      nextVowel\n            } else {\n                letter\n            }\n\
    \        })\n        val newMessage = newMessageArray.toList\n        newMessage.mkString(\"\
    \")", "        val vowels = \"aeiouAEIOU\"\n        val messageList = message.split(\"\
    \")\n        val newMessage = messageList.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case i => vowels(i + 2)\n\
    \        }).mkString(\"\")\n        newMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index == -1) {\n                letter\n            } else {\n\
    \                vowels(index - 1) + vowels(index)\n            }\n        }).mkString(\"\
    \")\n        encodedMessage", "        val vowels = \"aeiou\"\n        val letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val vowelsCount = vowels.toList.map(letter\
    \ => letter.toString.length).sum\n        val lettersCount = letters.toList.map(letter\
    \ => letter.toString.length).sum\n        val messageLength = message.length\n\
    \        val encodedMessage = message.map(letter => letter.toString.toUpperCase).map(letter\
    \ => letters.indexOf(letter) + lettersCount * vowels.indexOf(letter))\n      \
    \  val encodedMessageLength = encodedMessage.length\n        val encodedMessageLength\
    \ = encodedMessageLength / 2\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength.toString.length\n   \
    \     val encodedMessageLength = encodedMessageLength / 2\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength.toString.length\n\
    \        val encodedMessageLength = encodedMessageLength / 2\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength.toString.length\n\
    \        val encodedMessageLength = encodedMessageLength / 2\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength.toString.length\n\
    \        val encodedMessageLength = encodedMessageLength / 2\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength.toString.length\n\
    \        val encodedMessageLength = encodedMessageLength / 2\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength.toString.length\n\
    \        val encodedMessageLength = encodedMessageLength / 2\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength.toString.length\n\
    \        val encodedMessageLength = encodedMessageLength / 2\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength.toString.length\n\
    \        val encodedMessageLength = encodedMessageLength / 2\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n", "        val vowels = \"aeiouAEIOU\"\n        val letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0)) + 1)\n      \
    \  newMessage.toString.replaceAll(\"[aeiouAEIOU]\", vowels.charAt(0))", "    \
    \    val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\"\
    )\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val newLetter = vowel.charAt(0).toUpperCase + vowel.substring(1)\n\
    \                val newIndex = messageArray.indexOf(newLetter)\n            \
    \    if (newIndex != -1) {\n                    messageArray(newIndex)\n     \
    \           } else {\n                    letter\n                }\n        \
    \    } else {\n                letter\n            }\n        })\n        newMessageArray.toString.replace(\"\
    [\", \"\").replace(\"]\", \"\")", "        val vowels = Set(\"a\", \"e\", \"i\"\
    , \"o\", \"u\")\n        val messageWithVowels = message.map(letter => vowels.contains(letter)\
    \ ? letter : letter.swapCase)\n        val messageWithVowelsAndTwoLettersAfterVowel\
    \ = messageWithVowels.map(letter => vowels.indexOf(letter) + 1)\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowel.map(letter => vowels.indexOf(letter)\
    \ + 2)\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowel.map(letter\
    \ => vowels.indexOf(letter) + 3)\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.map(letter\
    \ => vowels.indexOf(letter) + 4)\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.map(letter\
    \ => vowels.indexOf(letter) + 5)\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterV",
  "        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels = message +\
    \ vowels\n        val messageWithVowelsArray = messageWithVowels.toCharArray\n\
    \        val vowelsArray = vowels.toCharArray\n        val messageWithVowelsArrayLength\
    \ = messageWithVowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength + vowelsArrayLength\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength * 2\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength + messageWithVowelsArrayLength\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength * 2\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength + messageWithVowelsArrayLength\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength * 2\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength + messageWithVowelsArrayLength\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength * 2\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength + messageWithVowelsArrayLength\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength * 2\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength + messageWithVowelsArrayLength\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength * 2\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength + messageWithVowelsArrayLength\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength * 2\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength + messageWithVowelsArrayLength\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength * 2\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength + messageWithVowelsArrayLength\n\
    \        val messageWithVowelsArrayLength = ", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageWithVowels = message.toLowerCase.map(letter => vowels.indexOf(letter)\
    \ > -1 ? letter : vowels.charAt(vowels.indexOf(letter) + 1))\n        val messageWithVowelsAndTwoAheadLetters\
    \ = messageWithVowels.map(letter => vowels.indexOf(letter) > -1 ? letter : vowels.charAt(vowels.indexOf(letter)\
    \ + 2))\n        val messageWithVowelsAndTwoAheadLettersAndTwoAheadLetters = messageWithVowelsAndTwoAheadLetters.map(letter\
    \ => vowels.indexOf(letter) > -1 ? letter : vowels.charAt(vowels.indexOf(letter)\
    \ + 3))\n        val messageWithVowelsAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLetters\
    \ = messageWithVowelsAndTwoAheadLettersAndTwoAheadLetters.map(letter => vowels.indexOf(letter)\
    \ > -1 ? letter : vowels.charAt(vowels.indexOf(letter) + 4))\n        val messageWithVowelsAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLetters\
    \ = messageWithVowelsAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLetters.map(letter\
    \ => vowels.indexOf(letter) > -1 ? letter : vowels.charAt(vowels.indexOf(letter)\
    \ + 5))\n        val messageWithVowelsAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLetters\
    \ = messageWithVowelsAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLetters.map(letter\
    \ => vowels.indexOf(letter) > -1 ? letter : vowels.charAt(vowels.indexOf(letter)\
    \ + 6))\n        val messageWithVowelsAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLetters\
    \ = messageWithVowelsAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLetters.map(letter\
    \ => vowels.indexOf(letter) > -1 ? letter : vowels.charAt(vowels.indexOf(letter)\
    \ + 7))\n        val messageWithVowelsAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLetters\
    \ = messageWithVowelsAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAhead",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            letter\
    \ match {\n                case vowel => vowel.charAt(2)\n                case\
    \ _ => letter\n            }\n        )\n        val newMessage = messageArray.toList.mkString(\"\
    \")\n        val newMessageArray2 = newMessageArray.toList.map(letter => \n  \
    \          letter match {\n                case vowel => vowel.charAt(2)\n   \
    \             case _ => letter\n            }\n        )\n        val newMessage2\
    \ = newMessageArray2.toList.mkString(\"\")\n        val newMessageArray3 = newMessage2.split(\"\
    \").map(letter => \n            letter match {\n                case vowel =>\
    \ vowel.charAt(2)\n                case _ => letter\n            }\n        )\n\
    \        val newMessage3 = newMessageArray3.toList.mkString(\"\")\n        val\
    \ newMessageArray4 = newMessage3.split(\"\").map(letter => \n            letter\
    \ match {\n                case vowel => vowel.charAt(2)\n                case\
    \ _ => letter\n            }\n        )\n        val newMessage4 = newMessageArray4.toList.mkString(\"\
    \")\n        val newMessageArray5 = newMessage4.split(\"\").map(letter => \n \
    \           letter match {\n                case vowel => vowel.charAt(2)\n  \
    \              case _ => letter\n            }\n        )\n        val newMessage5\
    \ = newMessageArray5.toList.mkString(\"\")\n        val newMessageArray6 = newMessage5.split(\"\
    \").map(letter => \n            letter match {\n                case vowel =>\
    \ vowel.charAt(2)\n                case _ => letter\n            }\n        )\n\
    \        val newMessage6 = newMessageArray6.toList.mkString(\"\")\n        val\
    \ newMessageArray7 = newMessage6.split(\"\").map(letter => \n            letter\
    \ match {\n                case vowel => vowel.charAt(2)\n                case\
    \ _ => letter\n            }\n        )\n        val newMessage7 = newMessageArray7.toList.mkString(\"\
    \")\n        val newMessageArray8 = newMessage7.split(\"\").map(letter => \n \
    \           letter match {\n                case vowel => vowel.charAt(2)\n  \
    \              case _ => letter\n            }\n        )\n        val newMessage8\
    \ = newMessageArray8.toList.mkString(\"\")\n        val newMessageArray9 = newMessage8.split(\"\
    \").map(letter => \n            letter match {\n                case vowel =>\
    \ vowel.charAt(2)\n                case _ => letter\n            }\n        )\n\
    \        val newMessage9 = newMessageArray9.toList.mkString(\"\")\n        val\
    \ newMessageArray10 = newMessage9.split(\"\").map("]
stop_tokens:
- "\n    }\n"
