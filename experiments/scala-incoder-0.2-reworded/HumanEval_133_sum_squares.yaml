name: HumanEval_133_sum_squares
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of numbers.\n    // You need to return the sum of squared\
  \ numbers in the given list,\n    // round each element in the list to the upper\
  \ int(Ceiling) first.\n    // Examples:\n    // >>> lst((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat)))\n    // (14l)\n    // >>> lst((List[Float](1.0f.toFloat,\
  \ 4.0f.toFloat, 9.0f.toFloat)))\n    // (98l)\n    // >>> lst((List[Float](1.0f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat)))\n    // (84l)\n    // >>> lst((List[Float](1.4f.toFloat,\
  \ 4.2f.toFloat, 0.0f.toFloat)))\n    // (29l)\n    // >>> lst((List[Float](-2.4f.toFloat,\
  \ 1.0f.toFloat, 1.0f.toFloat)))\n    // (6l)\n    def sumSquares(lst : List[Float])\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat))) == (84l));\n    assert(sumSquares((List[Float](1.4f.toFloat,\
  \ 4.2f.toFloat, 0.0f.toFloat))) == (29l));\n    assert(sumSquares((List[Float](-2.4f.toFloat,\
  \ 1.0f.toFloat, 1.0f.toFloat))) == (6l));\n    assert(sumSquares((List[Float](100.0f.toFloat,\
  \ 1.0f.toFloat, 15.0f.toFloat, 2.0f.toFloat))) == (10230l));\n    assert(sumSquares((List[Float](10000.0f.toFloat,\
  \ 10000.0f.toFloat))) == (200000000l));\n    assert(sumSquares((List[Float](-1.4f.toFloat,\
  \ 4.6f.toFloat, 6.3f.toFloat))) == (75l));\n    assert(sumSquares((List[Float](-1.4f.toFloat,\
  \ 17.9f.toFloat, 18.9f.toFloat, 19.9f.toFloat))) == (1086l));\n    assert(sumSquares((List[Float](0.0f.toFloat)))\
  \ == (0l));\n    assert(sumSquares((List[Float](-1.0f.toFloat))) == (1l));\n   \
  \ assert(sumSquares((List[Float](-1.0f.toFloat, 1.0f.toFloat, 0.0f.toFloat))) ==\
  \ (2l));\n    }\n\n}\n"
completions: ["        val result = mutable.ListBuffer.empty[Float]\n        lst.foreach(x\
    \ => result += math.pow(x, 2.0))\n        result.sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     val sumsSumRounded = sumsSum.roundToInt\n        sumsSumRounded", "    \
    \    val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        val squareSums = sums.map(x =>\
    \ x * x)\n        val squareSum = squareSums.sum\n        val squareSumRound =\
    \ squareSums.map(x => math.ceil(x)).sum\n        val squareSumFloor = squareSums.map(x\
    \ => math.floor(x)).sum\n        val squareSumFloorCeil = squareSums.map(x =>\
    \ math.ceil(x)).map(math.floor).sum\n        val squareSumFloorFloor = squareSums.map(x\
    \ => math.floor(x)).map(math.floor).sum\n        val squareSumFloorFloorCeil =\
    \ squareSums.map(x => math.floor(x)).map(math.floor).map(math.ceil).sum\n    \
    \    val squareSumFloorFloorFloorCeil = squareSums.map(x => math.floor(x)).map(math.floor).map(math.floor).map(math.ceil).sum\n\
    \        val squareSumFloorFloorFloorFloorCeil = squareSums.map(x => math.floor(x)).map(math.floor).map(math.floor).map(math.floor).map(math.ceil).sum\n\
    \        val squareSumFloorFloorFloorFloorFloorCeil = squareSums.map(x => math.floor(x)).map(math.floor).map(math.floor).map(math.floor).map(math.floor).map(math.ceil).sum\n\
    \        val squareSumFloorFloorFloorFloorFloorFloorCeil = squareSums.map(x =>\
    \ math.floor(x)).map(math.floor).map(math.floor).map(math.floor).map(math.floor).map(math.floor).map(math.ceil).sum\n\
    \        val squareSumFloorFloorFloorFloorFloorFloorFloorCeil = squareSums.map(x\
    \ => math.floor(x)).map(math.floor).map(math.floor).map(math.floor).map(math.floor).map(math.floor).map(math.floor).map(math.ceil).sum\n\
    \        val squareSumFloorFloorFloorFloorFloorFloorFloorFloorCeil = squareSums.map(x\
    \ => math.floor(x)).map(math.floor).map(math.floor).map(math.floor).map(math.floor).map(math.floor).map(math.floor).map(math.floor).map(math.ceil).sum\n\
    \        val squareSumFloorFloorFloorFloorFloorFloorFloorFloorCeil = squareSums.map(x\
    \ => math.floor(x)).map(math.floor).map(math.floor).map(math.floor).map(math.floor).map(math.floor).map(math.floor).map(math.floor).map(math.floor).map(",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val sumSquares = sums.map(x => x * x).sum\n\
    \        sumSquares.toLong", "        val sum = 0L\n        lst.foreach(x => sum\
    \ += math.pow(x, 2.0))\n        sum", "        val n = lst.size\n        val sum\
    \ = 0L\n        lst.foreach(x => sum += math.pow(x, 2.0))\n        sum", "   \
    \     val sum = 0L\n        for(i <- lst) {\n            sum += i.toLong * i.toLong\n\
    \        }\n        sum", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sumsSum = sums.sum\n        sumsSum.toLong",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n       \
    \ sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x =>\
    \ x * x)\n        val sum = sums.sum\n        val rounded = sums.map(_.ceil.toInt)\n\
    \        val roundedSum = rounded.sum\n        roundedSum.toLong", "        val\
    \ sumSquares = mutable.ListBuffer.empty[Float]\n        lst.foreach(x => sumSquares\
    \ += math.pow(x, 2.0))\n        sumSquares.sum", "        val sum = 0L\n     \
    \   lst.foreach(x => sum += math.pow(x, 2))\n        sum", "        val nums =\
    \ lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum =\
    \ sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n        rounded.toLong",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n       \
    \ sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x =>\
    \ x * x)\n        val sumsSum = sums.sum\n        sumsSum.toLong", "        val\
    \ result = mutable.ListBuffer.empty[Float]\n        lst.foreach(x => result +=\
    \ math.pow(x, 2.0))\n        result.sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     sumsSum.toLong", "        val sum = 0L\n        lst.foreach(x => sum +=\
    \ math.pow(x, 2))\n        sum", "        val sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val x = lst(i)\n            val y = math.ceil(x)\n\
    \            sum += y * y\n        }\n        sum", "        val sum = 0L\n  \
    \      lst.foreach(x => sum += math.pow(x, 2))\n        sum", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum\
    \ = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n        rounded\
    \ * rounded", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        val round = sums.map(x => math.ceil(x)).sum\n\
    \        sum + round", "        val sum = 0L\n        lst.foreach(x => sum +=\
    \ math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n      \
    \  val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n        val\
    \ sumsSumRounded = sumsSum.toLong\n        sumsSumRounded", "        val sum =\
    \ 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum", "       \
    \ val sum = 0L\n        val nums = lst.map(_.toInt)\n        nums.foreach(x =>\
    \ sum += x * x)\n        nums.foreach(x => x = math.ceil(x))\n        sum", " \
    \       val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded.toLong", "        val sum = 0L\n        for(x <- lst) sum +=\
    \ x\n        sum", "        val result = mutable.ListBuffer.empty[Float]\n   \
    \     lst.foreach(x => result += math.pow(x, 2))\n        result.sum", "     \
    \   val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum",
  "        val sumSquares = lst.foldLeft(0.0f) { (sum, element) => sum + element *\
    \ element }\n        math.ceil(sumSquares).toLong", "        val sum = 0L\n  \
    \      lst.foreach(x => sum += math.pow(x, 2))\n        sum", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sumOfSquares\
    \ = sums.sum\n        sumOfSquares.toLong", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x)).sum\n        rounded", "        val\
    \ nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val\
    \ sum = sums.sum\n        val squareSums = sums.map(x => x * x)\n        val squareSum\
    \ = squareSums.sum\n        val squareSumCeil = squareSums.map(_.ceil)\n     \
    \   val squareSumFloor = squareSums.map(_.floor)\n        val squareSumFloorCeil\
    \ = squareSumFloor.zip(squareSumCeil).map(x => x._1 + x._2)\n        val squareSumFloorCeilSum\
    \ = squareSumFloorCeil.sum\n        val squareSumFloorCeilSumCeil = squareSumFloorCeilSum.map(_.ceil)\n\
    \        val squareSumFloorCeilSumFloor = squareSumFloorCeilSum.map(_.floor)\n\
    \        val squareSumFloorCeilSumFloorCeil = squareSumFloorCeilSumFloor.zip(squareSumFloorCeilSumCeil).map(x\
    \ => x._1 + x._2)\n        val squareSumFloorCeilSumFloorCeilSum = squareSumFloorCeilSumFloorCeil.sum\n\
    \        val squareSumFloorCeilSumFloorCeilSumCeil = squareSumFloorCeilSumFloorCeilSum.map(_.ceil)\n\
    \        val squareSumFloorCeilSumFloorCeilSumFloor = squareSumFloorCeilSumFloorCeilSum.map(_.floor)\n\
    \        val squareSumFloorCeilSumFloorCeilSumFloorCeil = squareSumFloorCeilSumFloorCeilSumFloorCeil.zip(squareSumFloorCeilSumFloorCeilSumCeil).map(x\
    \ => x._1 + x._2)\n        val squareSumFloorCeilSumFloorCeilSumFloorCeilSum =\
    \ squareSumFloorCeilSumFloorCeilSumFloorCeilSum.map(_.ceil)\n        val squareSumFloorCeilSumFloorCeilSumFloorCeilSumCeil\
    \ = squareSumFloorCeilSumFloorCeilSumFloorCeilSum.map(_.floor)\n        val squareSumFloorCeilSumFloorCeilSumFloorCeilSumFloor\
    \ = squareSumFloorCeilSumFloorCeilSum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumOfSquares = sums.sum\n\
    \        sumOfSquares.toLong", "        val sum = 0L\n        lst.foreach(x =>\
    \ sum += math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sum = nums.sum\n        val squares = nums.map(x => x * x)\n    \
    \    val result = squares.sum\n        result + (sum.toLong * sum.toLong)", " \
    \       val nums = lst.map(_.toInt)\n        val sum = nums.sum\n        val sqr\
    \ = nums.map(x => x * x).sum\n        val round = math.ceil(sum)\n        val\
    \ ceil = math.ceil(sqr)\n        val roundUp = math.ceil(sum / ceil)\n       \
    \ val ceilUp = math.ceil(sqr / ceil)\n        val roundDown = math.floor(sum /\
    \ ceil)\n        val ceilDown = math.floor(sqr / ceil)\n        val roundUp2 =\
    \ math.ceil(sum / ceil)\n        val ceilUp2 = math.ceil(sqr / ceil)\n       \
    \ val roundDown2 = math.floor(sum / ceil)\n        val ceilDown2 = math.floor(sqr\
    \ / ceil)\n        val roundUp3 = math.ceil(sum / ceil)\n        val ceilUp3 =\
    \ math.ceil(sqr / ceil)\n        val roundDown3 = math.floor(sum / ceil)\n   \
    \     val ceilDown3 = math.floor(sqr / ceil)\n        val roundUp4 = math.ceil(sum\
    \ / ceil)\n        val ceilUp4 = math.ceil(sqr / ceil)\n        val roundDown4\
    \ = math.floor(sum / ceil)\n        val ceilDown4 = math.floor(sqr / ceil)\n \
    \       val roundUp5 = math.ceil(sum / ceil)\n        val ceilUp5 = math.ceil(sqr\
    \ / ceil)\n        val roundDown5 = math.floor(sum / ceil)\n        val ceilDown5\
    \ = math.floor(sqr / ceil)\n        val roundUp6 = math.ceil(sum / ceil)\n   \
    \     val ceilUp6 = math.ceil(sqr / ceil)\n        val roundDown6 = math.floor(sum\
    \ / ceil)\n        val ceilDown6 = math.floor(sqr / ceil)\n        val roundUp7\
    \ = math.ceil(sum / ceil)\n        val ceilUp7 = math.ceil(sqr / ceil)\n     \
    \   val roundDown7 = math.floor(sum / ceil)\n        val ceilDown7 = math.floor(sqr\
    \ / ceil)\n        val roundUp8 = math.ceil(sum / ceil)\n        val ceilUp8 =\
    \ math.ceil(sqr / ceil)\n        val roundDown8 = math.floor(sum / ceil)\n   \
    \     val ceilDown8 = math.floor(sqr / ceil)\n        val roundUp9 = math.ceil(sum\
    \ / ceil)\n        val ceilUp9 = math.ceil(sqr / ceil)\n        val roundDown9\
    \ = math.floor(sum / ceil)\n        val ceilDown9 = math.floor(sqr / ceil)\n \
    \       val roundUp10 = math.ceil(sum / ceil)\n        val ceilUp10 = math.ceil(sqr\
    \ / ceil)\n        val roundDown10 = math.", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     sumsSum.toLong", "        val sumSquares = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => sumSquares += math.pow(x, 2.0))\n        sumSquares.sum",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n       \
    \ sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x =>\
    \ x * x)\n        val sumOfSquares = sums.sum\n        sumOfSquares", "      \
    \  val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n    \
    \    val sumSquares = sums.sum\n        sumSquares.toLong", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum\
    \ = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n        rounded.toLong",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n       \
    \ sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x =>\
    \ x * x)\n        val sum = sums.sum\n        sum.toLong", "        val nums =\
    \ lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum =\
    \ sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n        rounded.toLong",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sumsSum = sums.sum\n        val sumsSumRound = sumsSum.round\n  \
    \      sumsSumRound.toLong", "        val result = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => result += x.toFloat)\n        val sum = result.sum\n\
    \        val squareSum = result.map(x => x * x).sum\n        squareSum + sum.toLong",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n       \
    \ math.ceil(sum)", "        val result = mutable.ArrayBuffer.empty[Float]\n  \
    \      lst.foreach(x => result += math.pow(x, 2.0))\n        result.sum", "  \
    \      val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val squares = sums.map(x => x * x)\n    \
    \    val squareSum = squares.sum\n        val squareSumRounded = squareSum.toLong\n\
    \        val squareSumRoundedRounded = math.ceil(squareSumRounded).toLong\n  \
    \      squareSumRoundedRounded", "        val sumSquares = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => sumSquares += math.pow(x, 2))\n        sumSquares.sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sumsSum = sums.sum\n        sumsSum.toLong", "        val n = lst.size\n\
    \        val sum = 0L\n        for (i <- 0 until n) {\n            val x = lst(i)\n\
    \            val y = math.ceil(x)\n            sum += y * y\n        }\n     \
    \   sum", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n\
    \        sum", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n \
    \           sum += math.pow(lst.apply(i).toFloat, 2)\n        }\n        sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded.toLong", "        val sum = 0L\n        val nums = lst.map(_.toInt)\n\
    \        nums.foreach(x => sum += x * x)\n        nums.foreach(x => x = math.ceil(x))\n\
    \        sum", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x,\
    \ 2.0))\n        sum", "        val sum = 0.0f\n        lst.foreach(x => sum +=\
    \ math.pow(x, 2.0))\n        math.ceil(sum)", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2.0))\n        sum", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     sumsSum.toLong", "        val sum = 0L\n        val nums = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => nums += x.toInt)\n        nums.foreach(x => sum += x\
    \ * x)\n        nums.sum", "        val sumSquares = mutable.ListBuffer[Float]()\n\
    \        lst.foreach(x => sumSquares += math.pow(x, 2.0))\n        sumSquares.sum",
  "        val sum = 0L\n        for(i <- 0 until lst.size) {\n            sum +=\
    \ math.pow(lst.apply(i).toFloat, 2)\n        }\n        sum", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sumsSum\
    \ = sums.sum\n        sumsSum.toLong", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val squares = sums.map(x => x * x)\n        val rounded = squares.map(x => math.ceil(x).toInt)\n\
    \        val sum = rounded.sum\n        sum.toLong", "        val sum = 0L\n \
    \       lst.foreach(x => sum += math.pow(x, 2))\n        sum", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum\
    \ = sums.sum\n        val sq = sums.map(x => x * x).sum\n        sq.roundToInt",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded * rounded", "        val nums = lst.map(_.toInt)\n        val\
    \ sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n        val sumsSumRound\
    \ = sumsSum.round\n        sumsSumRound.toLong", "        val sum = 0L\n     \
    \   for(i <- lst) {\n            sum += i * i\n        }\n        sum", "    \
    \    val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n       \
    \ math.ceil(sum)", "        val sumSquares = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => sumSquares += math.pow(x, 2.0))\n        sumSquares.sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sumsSum = sums.sum\n        sumsSum.toLong", "        val nums =\
    \ lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum =\
    \ sums.sum\n        val squares = sums.map(x => x * x)\n        val rounded =\
    \ squares.map(x => math.ceil(x).toInt)\n        val result = rounded.sum\n   \
    \     result", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sumsSum = sums.sum\n        sumsSum.toLong", "      \
    \  val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sumsSum = sums.sum\n        val sumsSumRounded = sumsSum.toLong\n\
    \        sumsSumRounded", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x\
    \ => math.ceil(x).toInt)\n        val sum = rounded.sum\n        sum.toLong",
  "        val nums = lst.map(_.toInt)\n        val sum = nums.sum\n        val squares\
    \ = nums.map(x => x * x)\n        val squareSum = squares.sum\n        val rounded\
    \ = squares.map(x => math.ceil(x)).sum\n        sum + squareSum + rounded", " \
    \       val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        sum.toLong", "        val sum\
    \ = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum", "     \
    \   val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n   \
    \     val sumsSum = sums.sum\n        sumsSum.toLong", "        val nums = lst.map(_.toInt)\n\
    \        val sum = nums.sum\n        val squares = nums.map(x => x * x)\n    \
    \    val sum = squares.sum\n        val rounded = squares.map(x => math.ceil(x)).sum\n\
    \        sum + rounded", "        val nums = lst.map(_.toInt)\n        val sum\
    \ = nums.sum\n        val squares = nums.map(x => x * x)\n        val result =\
    \ squares.sum + sum\n        math.round(result)", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x)).sum\n        rounded", "        val\
    \ nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val\
    \ sumsSum = sums.sum\n        sumsSum.toLong", "        val sum = 0L\n       \
    \ lst.foreach(x => sum += math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val squares = sums.map(x => x * x)\n        val squareSum = squares.sum\n  \
    \      squareSum.toLong", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(_.ceil.toInt)\n\
    \        rounded.sum", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sum = sums.sum\n        val squares = sums.map(x\
    \ => x * x)\n        val squareSum = squares.sum\n        val result = squareSum\
    \ + sum\n        result.toLong", "        val nums = lst.map(_.toInt)\n      \
    \  val sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val sumSquares\
    \ = sums.map(x => x * x).sum\n        val rounded = sumSquares.map(x => math.ceil(x).toInt)\n\
    \        rounded.sum", "        val sumSquares = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => sumSquares += math.pow(x, 2.0))\n        sumSquares.sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sumOfSquares = sums.sum\n        sumOfSquares.toLong", "        val\
    \ n = lst.size\n        val sum = 0L\n        for(i <- 0 until n) {\n        \
    \    sum += lst(i) * lst(i)\n        }\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sum = nums.sum\n        val squares = nums.map(x => x * x)\n    \
    \    val result = squares.sum\n        val round = math.ceil(result)\n       \
    \ round * round", "        val sum = 0L\n        val nums = mutable.ListBuffer[Float]()\n\
    \        lst.foreach(x => nums += x.toInt)\n        nums.foreach(x => sum += x\
    \ * x)\n        sum.toLong", "        val nums = lst.map(_.toInt)\n        val\
    \ sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n        val sumsSumRounded\
    \ = sumsSum.toLong\n        sumsSumRounded", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     val sumsSumRounded = sumsSum.roundToInt\n        sumsSumRounded", "    \
    \    val sum = 0L\n        for(i <- 0 until lst.size) {\n            sum += lst(i)\
    \ * lst(i)\n        }\n        sum", "        val nums = lst.map(_.toInt)\n  \
    \      val sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val\
    \ squares = sums.map(x => x * x)\n        val squareSum = squares.sum\n      \
    \  val squareSumRounded = squareSum.map(x => math.ceil(x)).sum\n        squareSumRounded",
  "        val sum = 0L\n        val nums = lst.map(x => math.ceil(x).toInt)\n   \
    \     for (i <- nums) {\n            sum += math.pow(i.toFloat, 2)\n        }\n\
    \        sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded * rounded", "        val nums = lst.map(_.toInt)\n        val\
    \ sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded\
    \ = sums.map(x => math.ceil(x).toInt)\n        val sum = rounded.sum\n       \
    \ sum.toLong", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        sum.toLong", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sumsSum\
    \ = sums.sum\n        val sumsSumRounded = sumsSum.roundToInt\n        sumsSumRounded",
  "        val sum = 0L\n        for(x <- lst) {\n            sum += math.pow(x, 2)\n\
    \        }\n        sum", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(_.ceil.toInt)\n\
    \        rounded.sum", "        val nums = lst.map(_.toInt)\n        val sum =\
    \ nums.sum\n        val squares = nums.map(x => x * x)\n        val result = squares.sum\n\
    \        val rounded = result.ceil.toLong\n        return rounded", "        val\
    \ nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val\
    \ sumsSum = sums.sum\n        sumsSum.toLong", "        val sum = 0L\n       \
    \ lst.foreach(x => sum += math.pow(x, 2))\n        sum", "        val sumSquares\
    \ = mutable.ListBuffer.empty[Long]\n        lst.foreach(x => sumSquares += math.pow(x,\
    \ 2.0))\n        sumSquares.sum", "        val nums = lst.map(_.toInt)\n     \
    \   val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n        sumsSum.toLong",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2.0))\n     \
    \   sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded * rounded", "        val sumSquares = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach(x => sumSquares += math.pow(x, 2))\n        sumSquares.sum",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n       \
    \ sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x =>\
    \ x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded * rounded", "        val nums = lst.map(_.toInt)\n        val\
    \ sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded\
    \ = sums.map(_.ceil.toInt)\n        val squares = rounded.map(x => x * x)\n  \
    \      val sum = squares.sum\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val sumSquares = sums.map(x => x * x).sum\n        sumSquares.toLong", "   \
    \     val nums = lst.map(_.toInt)\n        val sum = nums.sum\n        val squares\
    \ = nums.map(x => x * x)\n        val result = squares.sum + sum\n        val\
    \ round = math.ceil(lst.max)\n        result * round", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val sqSum = sums.map(x => x * x).sum\n        val sqSum2 = sums.map(x => x *\
    \ x).sum\n        val sqSum3 = sums.map(x => x * x).sum\n        val sqSum4 =\
    \ sums.map(x => x * x).sum\n        val sqSum5 = sums.map(x => x * x).sum\n  \
    \      val sqSum6 = sums.map(x => x * x).sum\n        val sqSum7 = sums.map(x\
    \ => x * x).sum\n        val sqSum8 = sums.map(x => x * x).sum\n        val sqSum9\
    \ = sums.map(x => x * x).sum\n        val sqSum10 = sums.map(x => x * x).sum\n\
    \        val sqSum11 = sums.map(x => x * x).sum\n        val sqSum12 = sums.map(x\
    \ => x * x).sum\n        val sqSum13 = sums.map(x => x * x).sum\n        val sqSum14\
    \ = sums.map(x => x * x).sum\n        val sqSum15 = sums.map(x => x * x).sum\n\
    \        val sqSum16 = sums.map(x => x * x).sum\n        val sqSum17 = sums.map(x\
    \ => x * x).sum\n        val sqSum18 = sums.map(x => x * x).sum\n        val sqSum19\
    \ = sums.map(x => x * x).sum\n        val sqSum20 = sums.map(x => x * x).sum\n\
    \        val sqSum21 = sums.map(x => x * x).sum\n        val sqSum22 = sums.map(x\
    \ => x * x).sum\n        val sqSum23 = sums.map(x => x * x).sum\n        val sqSum24\
    \ = sums.map(x => x * x).sum\n        val sqSum25 = sums.map(x => x * x).sum\n\
    \        val sqSum26 = sums.map(x => x * x).sum\n        val sqSum27 = sums.map(x\
    \ => x * x).sum\n        val sqSum28 = sums.map(x => x * x).sum\n        val sqSum29\
    \ = sums.map(x => x * x).sum\n        val sqSum30 = sums.map(x => x * x).sum\n\
    \        val sqSum31 = sums.map(x => x * x).sum\n        val sqSum32 = sums.map(x\
    \ => x * x).sum\n        val sqSum33 = sums.map(x => x * x).", "        val sum\
    \ = 0L\n        lst.foreach(x => sum += math.pow(x, 2.0))\n        sum", "   \
    \     val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n \
    \       val sum = sums.sum\n        val rounded = sums.map(_.ceil.toInt)\n   \
    \     rounded.sum", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x,\
    \ 2))\n        sum", "        val n = lst.size\n        val sum = 0L\n       \
    \ val squares = mutable.ListBuffer[Float]()\n        for(i <- 0 until n) {\n \
    \           val x = lst(i).toFloat\n            squares += x\n            sum\
    \ += x * x\n        }\n        sum.toLong", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x)).sum\n        sum.toLong + rounded.toLong",
  "        val sum = 0L\n        val nums = mutable.ListBuffer.empty[Float]\n    \
    \    lst.foreach(x => nums += x)\n        nums.foreach(x => sum += math.pow(x,\
    \ 2))\n        math.ceil(sum).toLong", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val squares = sums.map(x => x * x)\n        val squareSum = squares.sum\n  \
    \      val squareSumRounded = squareSum.toInt\n        squareSumRounded", "  \
    \      val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n       \
    \ sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x =>\
    \ x * x)\n        val sum = sums.sum\n        sum.toLong", "        val nums =\
    \ lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum =\
    \ sums.sum\n        val sumSquares = sums.map(x => x * x).sum\n        sumSquares.toLong",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n       \
    \ sum", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n\
    \        sum", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x,\
    \ 2))\n        sum", "        val sum = 0L\n        for(x <- lst) {\n        \
    \    sum += x\n        }\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x)).sum\n        rounded * rounded", " \
    \       val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n      \
    \  sum", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n\
    \        sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sumsSum = sums.sum\n        val sumsSumRounded = sumsSum.toLong\n\
    \        val sumsSumRoundedRounded = math.ceil(sumsSumRounded).toLong\n      \
    \  sumsSumRoundedRounded", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(_.ceil.toInt)\n\
    \        val roundedSum = rounded.sum\n        roundedSum * roundedSum", "   \
    \     val sum = 0L\n        for(i <- 0 until lst.size) {\n            val x =\
    \ math.ceil(lst(i).toDouble)\n            val y = math.ceil(lst(i).toDouble)\n\
    \            sum += (x-y)*(x-y)\n        }\n        sum", "        val sum = 0L\n\
    \        lst.foreach(x => sum += math.pow(x, 2))\n        sum", "        val sum\
    \ = 0L\n        for(i <- 0 until lst.size) {\n            sum += lst(i) * lst(i)\n\
    \        }\n        sum", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sum = sums.sum\n        val sumSquares =\
    \ sums.map(x => x * x).sum\n        val rounded = sumSquares.map(x => math.ceil(x)).sum\n\
    \        return rounded", "        val sum = 0.0f\n        lst.foreach(x => sum\
    \ += math.pow(x, 2.0))\n        math.ceil(sum)", "        val sum = 0L\n     \
    \   lst.foreach(x => sum += math.pow(x, 2))\n        sum", "        val nums =\
    \ lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum =\
    \ sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n        rounded.toLong",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x).toInt)\n\
    \        rounded.sum", "        val sum = 0L\n        lst.foreach(x => sum +=\
    \ math.pow(x, 2))\n        sum", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumSquares = sums.map(x\
    \ => x * x)\n        sumSquares.sum", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(_.ceil.toInt)\n        rounded.sum", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum\
    \ = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n        rounded",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val squareSums = sums.map(x => x * x)\n \
    \       val squareSum = squareSums.sum\n        val squareSumCeil = squareSums.map(_.ceil)\n\
    \        val squareSumFloor = squareSums.map(_.floor)\n        val squareSumFloorCeil\
    \ = squareSumFloor.zip(squareSumCeil).map(x => x._1 + x._2)\n        val squareSumFloorCeilSum\
    \ = squareSumFloorCeil.sum\n        val squareSumFloorCeilSumCeil = squareSumFloorCeilSum.map(_.ceil)\n\
    \        val squareSumFloorCeilSumFloor = squareSumFloorCeilSum.map(_.floor)\n\
    \        val squareSumFloorCeilSumFloorCeil = squareSumFloorCeilSumFloor.zip(squareSumFloorCeilSumCeil).map(x\
    \ => x._1 + x._2)\n        val squareSumFloorCeilSumFloorCeilSum = squareSumFloorCeilSumFloorCeil.sum\n\
    \        val squareSumFloorCeilSumFloorCeilSumCeil = squareSumFloorCeilSumFloorCeilSum.map(_.ceil)\n\
    \        val squareSumFloorCeilSumFloorCeilSumFloor = squareSumFloorCeilSumFloorCeilSum.map(_.floor)\n\
    \        val squareSumFloorCeilSumFloorCeilSumFloorCeil = squareSumFloorCeilSumFloorCeilSumFloorCeil.zip(squareSumFloorCeilSumFloorCeilSumFloor).map(x\
    \ => x._1 + x._2)\n        val squareSumFloorCeilSumFloorCeilSumFloorCeilSum =\
    \ squareSumFloorCeilSumFloorCeilSumFloorCeilSum.sum\n        val squareSumFloorCeilSumFloorCeilSumFloorCeilSumCeil\
    \ = squareSumFloorCeilSumFloorCeilSumFloorCeilSum.map(_.ceil)\n        val squareSumFloorCeilSumFloorCeilSumFloorCeilSumFloor\
    \ = squareSumFloorCeilSumFloorCeilSumFloorCeilSum", "        val sum = 0L\n  \
    \      lst.foreach(x => sum += math.pow(x, 2))\n        sum", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum\
    \ = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n        rounded.toLong",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sumsSum = sums.sum\n        val sumsSumRounded = sumsSum.toLong\n\
    \        sumsSumRounded", "        val sum = 0L\n        lst.foreach(x => sum\
    \ += math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n   \
    \     val sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val\
    \ rounded = sums.map(x => math.ceil(x)).sum\n        rounded", "        val n\
    \ = lst.size\n        val sum = 0L\n        for (i <- 0 until n) {\n         \
    \   val x = lst(i)\n            sum += x * x\n        }\n        sum", "     \
    \   val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n   \
    \     val sumsSum = sums.sum\n        sumsSum.toLong", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x)).sum\n        rounded * rounded", " \
    \       val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n      \
    \  sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x =>\
    \ x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded.toLong", "        val sum = 0L\n        lst.foreach(x => sum\
    \ += math.pow(x, 2))\n        sum", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumOfSquares = sums.sum\n\
    \        sumOfSquares.toLong", "        val nums = lst.map(_.toInt)\n        val\
    \ sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n        sumsSum.toLong",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x).toInt)\n\
    \        rounded.sum", "        val sum = 0L\n        lst.foreach(x => sum +=\
    \ math.pow(x, 2))\n        sum", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum", "        val sum = 0L\n        for(x\
    \ <- lst) {\n            sum += x.toLong * x.toLong\n        }\n        sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x).toInt)\n\
    \        val result = rounded.sum\n        result", "        val sumSquares =\
    \ mutable.ListBuffer.empty[Float]\n        lst.foreach(x => sumSquares += math.pow(x,\
    \ 2.0))\n        sumSquares.sum", "        val sum = 0L\n        val nums = mutable.ArrayBuffer.empty[Float]\n\
    \        lst.foreach(x => nums += x.toFloat)\n        nums.foreach(x => sum +=\
    \ x * x)\n        nums.toList.map(_.ceil.toInt).sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     sumsSum.toLong", "        val sum = 0L\n        lst.foreach(x => sum +=\
    \ math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n      \
    \  val sums = nums.map(x => x * x)\n        val sumSquares = sums.map(x => x *\
    \ x)\n        sumSquares.sum", "        val nums = lst.map(_.toInt)\n        val\
    \ sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n        sumsSum.toLong",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sumsSum = sums.sum\n        sumsSum.toLong", "        val sum = 0L\n\
    \        lst.foreach(x => sum += math.pow(x, 2))\n        sum", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum\
    \ = sums.sum\n        val squareSums = sums.map(x => x * x)\n        val squareSum\
    \ = squareSums.sum\n        val squareSumOfSquares = squareSums.map(x => x * x)\n\
    \        val squareSumOfSquare = squareSumOfSquares.sum\n        val squareSumOfSquareOfSquares\
    \ = squareSumOfSquares.map(x => x * x)\n        val squareSumOfSquareOfSquare\
    \ = squareSumOfSquareOfSquares.sum\n        val squareSumOfSquareOfSquareOfSquares\
    \ = squareSumOfSquareOfSquares.map(x => x * x)\n        val squareSumOfSquareOfSquareOfSquare\
    \ = squareSumOfSquareOfSquareOfSquares.sum\n        val squareSumOfSquareOfSquareOfSquareOfSquares\
    \ = squareSumOfSquareOfSquareOfSquares.map(x => x * x)\n        val squareSumOfSquareOfSquareOfSquareOfSquare\
    \ = squareSumOfSquareOfSquareOfSquareOfSquares.sum\n        val squareSumOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = squareSumOfSquareOfSquareOfSquareOfSquareOfSquares.map(x => x * x)\n     \
    \   val squareSumOfSquareOfSquareOfSquareOfSquareOfSquare = squareSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares.sum\n\
    \        val squareSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = squareSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares.map(x\
    \ => x * x)\n        val squareSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare\
    \ = squareSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares.sum\n\
    \        val squareSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = squareSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares.map(x\
    \ => x * x)\n        val squareSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare\
    \ = squareSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares.sum\n\
    \        val squareSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = squareSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares.map(x\
    \ => x * x)\n        val squareSumOfSquareOfSquare", "        val sum = 0L\n \
    \       lst.foreach(x => sum += math.pow(x, 2))\n        sum", "        val n\
    \ = lst.size\n        var sum = 0L\n        for(i <- 0 until n) {\n          \
    \  val x = lst(i)\n            val y = math.ceil(x)\n            sum += y * y\n\
    \        }\n        sum", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sum = sums.sum\n        val sq = sums.map(x\
    \ => x * x).sum\n        sq.toLong", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum"]
stop_tokens:
- "\n    }\n"
