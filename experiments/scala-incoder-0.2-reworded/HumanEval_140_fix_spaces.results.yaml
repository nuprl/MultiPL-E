language: scala
name: HumanEval_140_fix_spaces
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newText = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        if (newText.contains(\"_\"))\n            newText.replaceAll(\"\
    _+\", \"_\")\n        else\n            newText\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnwkjjg2h.scala:25)\n\tat Problem.main(tmpnwkjjg2h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ text.take(spaces - 1).mkString + \"_\" + text.drop(spaces - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpulwru1cb.scala:23)\n\tat Problem.main(tmpulwru1cb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ text.take(spaces - 1).mkString + \"_\" + text.drop(spaces - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpulwru1cb.scala:23)\n\tat Problem.main(tmpulwru1cb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        val result\
    \ = new StringBuilder()\n        var lastSpace = false\n        for (word <- words)\
    \ {\n            if (word.equals(\" \")) {\n                if (lastSpace) {\n\
    \                    result.append(\" \")\n                } else {\n        \
    \            result.append(\" \")\n                    lastSpace = true\n    \
    \            }\n            } else {\n                result.append(word)\n  \
    \              lastSpace = false\n            }\n        }\n        return result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4pgenom9.scala:36)\n\tat Problem.main(tmp4pgenom9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText2 = newText.replaceAll(\"\\\\s+\", \"_\")\n          \
    \  val newText3 = newText2.replaceAll(\"_+\", \"-\")\n            newText3\n \
    \       } else {\n            text\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqbv8mfv5.scala:28)\n\tat Problem.main(tmpqbv8mfv5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces == 2) text + \"_-\"\n        else text.grouped(2).map(_ + \"_\").mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptqdfhuxo.scala:24)\n\tat Problem.main(tmptqdfhuxo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val spacedText = text.split(\"\
    \ \").map(x => x.replaceAll(\" \", \"_\"))\n            result = spacedText.mkString(\"\
    \ \")\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe0bo2fyu.scala:26)\n\tat Problem.main(tmpe0bo2fyu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 1) {\n            text\n        } else if (spaces == 2) {\n     \
    \       text.substring(0, text.indexOf(' '))\n        } else {\n            text.substring(0,\
    \ text.indexOf(' '))\n                + text.substring(text.indexOf(' ') + 1,\
    \ text.lastIndexOf(' '))\n                + text.substring(text.lastIndexOf('\
    \ ') + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 7\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.fixSpaces(tmpc44pwmk9.scala:22)\n\tat Problem$.main(tmpc44pwmk9.scala:28)\n\
    \tat Problem.main(tmpc44pwmk9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => if (x\
    \ == \" \") \"_\" else x).mkString\n            val consecutiveSpaces = text.count(_\
    \ == ' ')\n            if (consecutiveSpaces > 1) {\n                val consecutiveSpacedText\
    \ = text.split(\" \").map(x => if (x == \" \") \"-\" else x).mkString\n      \
    \          spacedText + consecutiveSpacedText\n            } else {\n        \
    \        spacedText\n            }\n        } else {\n            text\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5bmbu252.scala:32)\n\tat Problem.main(tmp5bmbu252.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var fixedText = text\n        var lastSpaceIndex\
    \ = -1\n        var consecutiveSpaceCount = 0\n        for (i <- 0 until text.length)\
    \ {\n            if (text.charAt(i) == ' ') {\n                if (lastSpaceIndex\
    \ == -1) {\n                    lastSpaceIndex = i\n                } else {\n\
    \                    consecutiveSpaceCount += 1\n                }\n         \
    \   } else {\n                if (lastSpaceIndex != -1) {\n                  \
    \  fixedText = fixedText.substring(0, lastSpaceIndex) + fixedText.substring(lastSpaceIndex\
    \ + 1, i) + \"-\" + fixedText.substring(i, lastSpaceIndex + 1)\n             \
    \       consecutiveSpaceCount = 0\n                    lastSpaceIndex = -1\n \
    \               }\n            }\n        }\n        if (lastSpaceIndex != -1)\
    \ {\n            fixedText = fixedText.substring(0, lastSpaceIndex) + fixedText.substring(lastSpaceIndex\
    \ + 1, text.length)\n        }\n        return fixedText\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 13, length 8\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.fixSpaces(tmpc90ap2sf.scala:35)\n\tat Problem$.main(tmpc90ap2sf.scala:41)\n\
    \tat Problem.main(tmpc90ap2sf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + '_'\n        else if\
    \ (spaces == 2) text + '_-'\n        else text.split(' ').map(x => if (x == \"\
    \ \") \"_\" else x).mkString\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpai6nag03.scala:19:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (spaces == \e[31m2\e\
    [0m) text + \e[31m'_\e[0m-'\n\e[31m\e[31m   |\e[0m                           \
    \             ^\e[0m\n\e[31m   |\e[0m                                        unclosed\
    \ character literal\n\e[31m\e[31m-- Error: /tmp/tmpai6nag03.scala:19:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (spaces == \e[31m2\e\
    [0m) text + \e[31m'_\e[0m-'\n\e[31m\e[31m   |\e[0m                           \
    \          ^\e[0m\n\e[31m   |\e[0msymbol literal '_ is no longer supported,\n\e\
    [31m   |\e[0muse a string literal \"_\" or an application Symbol(\"_\") instead,\n\
    \e[31m   |\e[0mor enclose in braces '{_} if you want a quoted expression.\n\e\
    [31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n2 errors found\n"
  stdout: ''
  timestamp: 1659800343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        val fixedWords\
    \ = mutable.ListBuffer[String]()\n        for (word <- words) {\n            val\
    \ fixedWord = word.replaceAll(\" \", \"_\")\n            if (fixedWord.length()\
    \ > 2) {\n                fixedWords += fixedWord\n            } else {\n    \
    \            fixedWords += \"_\" + fixedWord\n            }\n        }\n     \
    \   fixedWords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2ztvnx_.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfixedWords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800344
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\" \", \"_\")\n\
    \        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"_\")\n      \
    \  if (consecutiveSpaces.length > 2) {\n            consecutiveSpaces.replaceAll(\"\
    _\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpty230icy.scala:26)\n\tat Problem.main(tmpty230icy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces > 2) text.replaceAll(\" \", \"_\")\n        else text.replaceAll(\"\
    \ \", \"-\")\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoz6930es.scala:24)\n\tat Problem.main(tmpoz6930es.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => if (x\
    \ == \" \") \"_\" else x).mkString\n            val spacedText2 = spacedText.split(\"\
    \ \").map(x => if (x == \" \") \"-\" else x).mkString\n            spacedText2\n\
    \        } else {\n            text\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4m3t2m8v.scala:27)\n\tat Problem.main(tmp4m3t2m8v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    \")\n            val newText2 = newText.substring(0, newText.length - consecutiveSpaces)\n\
    \            val newText3 = newText2.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    \")\n            val newText4 = newText3.substring(0, newText3.length - consecutiveSpaces)\n\
    \            newText4\n        } else {\n            text\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph0x66bj7.scala:30)\n\tat Problem.main(tmph0x66bj7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else text.replace(\" \", \"_\") + \"-\" + text.dropRight(spaces)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp56ox3h0d.scala:23)\n\tat Problem.main(tmp56ox3h0d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\")).mkString\n            val consecutiveSpaces = text.count(_ == '\
    \ ')\n            if (consecutiveSpaces > 1) {\n                val consecutiveSpacedText\
    \ = text.split(\" \").map(x => x.replaceAll(\" \", \"-\")).mkString\n        \
    \        spacedText + \"-\" + consecutiveSpacedText\n            } else {\n  \
    \              spacedText\n            }\n        } else {\n            text\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgf2vxtw9.scala:32)\n\tat Problem.main(tmpgf2vxtw9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newText = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val newText2 = newText.replaceAll(\"\\\\s+\", \"-\")\n        if\
    \ (newText2.length > 2) {\n            newText2.replaceAll(\"\\\\s+\", \"-\")\n\
    \        } else {\n            newText2\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0l6iaj05.scala:27)\n\tat Problem.main(tmp0l6iaj05.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        val result\
    \ = new StringBuilder\n        words.foreach(word => {\n            if (word.equals(\"\
    \ \")) {\n                result.append(\" \")\n            } else {\n       \
    \         result.append(word.replaceAll(\" \", \"_\"))\n            }\n      \
    \  })\n        return result.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptv4x5u0x.scala:29)\n\tat Problem.main(tmptv4x5u0x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces > 2) text.replaceAll(\"\\\\s+\", \"_\")\n        else\
    \ text.replaceAll(\"\\\\s+\", \"-\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1v_uv441.scala:24)\n\tat Problem.main(tmp1v_uv441.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixed = text.replaceAll(\"\\\\s+\", \"_\"\
    )\n        val consecutive = fixed.split(\"_\").length\n        if (consecutive\
    \ > 1) {\n            fixed.split(\"_\").mkString(\"_\")\n        } else {\n \
    \           fixed\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb8bpfnu_.scala:26)\n\tat Problem.main(tmpb8bpfnu_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\");\n        if (fixedText.length > 2) {\n            val fixedText2 = fixedText.replaceAll(\"\
    \\\\s+\", \"-\");\n            if (fixedText2.length > 2) {\n                fixedText2\n\
    \            } else {\n                fixedText\n            }\n        } else\
    \ {\n            fixedText\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwik_4iq9.scala:31)\n\tat Problem.main(tmpwik_4iq9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\"))\n            val spacedText2 = spacedText.map(x => x.replaceAll(\"\
    _\", \"-\"))\n            spacedText2.mkString(\" \")\n        } else {\n    \
    \        text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt3qjjd00.scala:27)\n\tat Problem.main(tmpt3qjjd00.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces == 2) text + \"_-\"\n        else text.replaceAll(' ', '_')\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwnep97er.scala:20:29\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \    ^^^\e[0m\n\e[31m   |\e[0m                             Found:    (\e[31m'\
    \ '\e[0m : Char)\n\e[31m   |\e[0m                             Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwnep97er.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \         ^^^\e[0m\n\e[31m   |\e[0m                                  Found:  \
    \  (\e[31m'_'\e[0m : Char)\n\e[31m   |\e[0m                                  Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\").length\n        if (spaces > 2) {\n            val spacedText = text.replaceAll(\"\
    \\\\s+\", \"_\")\n            val consecutiveSpaces = spacedText.replaceAll(\"\
    \\\\s+\", \"-\")\n            consecutiveSpaces.replaceAll(\"_+\", \"-\")\n  \
    \      } else {\n            text\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwba8rnbn.scala:27)\n\tat Problem.main(tmpwba8rnbn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800355
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \\\\s+\", \"_\")).mkString\n            val consecutiveSpaces = text.count(_ ==\
    \ ' ')\n            if (consecutiveSpaces > 1) {\n                val consecutiveSpacedText\
    \ = text.split(\" \").map(x => x.replaceAll(\"\\\\s+\", \"-\")).mkString\n   \
    \             spacedText + \"-\" + consecutiveSpacedText\n            } else {\n\
    \                spacedText\n            }\n        } else {\n            text\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqf9pkxl3.scala:32)\n\tat Problem.main(tmpqf9pkxl3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \\\\s+\", \"_\"))\n            val spacedText2 = spacedText.map(x => x.replaceAll(\"\
    _+\", \"-\"))\n            spacedText2.mkString(\" \")\n        } else {\n   \
    \         text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4tvktjvd.scala:27)\n\tat Problem.main(tmp4tvktjvd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\" \", \"_\")\n\
    \        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"_\")\n      \
    \  if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    _\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp__6y_pbx.scala:26)\n\tat Problem.main(tmp__6y_pbx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \\\\s+\", \"_\")).mkString\n            val spacedText2 = spacedText.replaceAll(\"\
    _+\", \"-\")\n            spacedText2\n        } else {\n            text\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi36t8lp7.scala:27)\n\tat Problem.main(tmpi36t8lp7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + '_'\n        else text.take(spaces\
    \ - 1).mkString + '_' + text.drop(spaces - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppgi76sxv.scala:23)\n\tat Problem.main(tmppgi76sxv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 1) {\n            val spacedText = text.split(\"\
    \ \").map(x => x.replaceAll(\"\\\\s+\", \"_\"))\n            result = spacedText.mkString(\"\
    \ \")\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnb14z9l3.scala:26)\n\tat Problem.main(tmpnb14z9l3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\");\n        val consecutiveSpaces = fixedText.count(_ == '_');\n      \
    \  if (consecutiveSpaces > 2) {\n            val fixedText2 = fixedText.replaceAll(\"\
    _+\", \"_\");\n            fixedText2\n        } else {\n            fixedText\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbag36lkt.scala:28)\n\tat Problem.main(tmpbag36lkt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newText = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val newText2 = newText.replaceAll(\"\\\\s+\", \"-\")\n        if\
    \ (newText2.length > 2) {\n            newText2.substring(0, newText2.length -\
    \ 2)\n        } else {\n            newText2\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp18rjk3eo.scala:25)\n\tat Problem.main(tmp18rjk3eo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 1) {\n            val spacedText = text.split(\"\
    \ \").map(x => x.replaceAll(\"\\\\s+\", \"_\"))\n            result = spacedText.mkString(\"\
    \ \")\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnb14z9l3.scala:26)\n\tat Problem.main(tmpnb14z9l3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            fixSpaces(newText)\n        } else {\n            text\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjxg3gy6k.scala:26)\n\tat Problem.main(tmpjxg3gy6k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800358
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newText = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        if (newText.length > 2 && newText.indexOf(\"_\") < newText.lastIndexOf(\"\
    _\"))\n            newText.replaceAll(\"_+\", \"-\")\n        else\n         \
    \   newText\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa0frmpzt.scala:24)\n\tat Problem.main(tmpa0frmpzt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(x => if (x ==\
    \ \" \") \"_\" else x).mkString\n            fixSpaces(newText)\n        } else\
    \ {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp46rb6pac.scala:26)\n\tat Problem.main(tmp46rb6pac.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(x => if (x == \" \") \"_\" else\
    \ x).mkString\n            val newText = newText.substring(0, newText.length -\
    \ consecutiveSpaces)\n            fixSpaces(newText)\n        } else {\n     \
    \       text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf9d3qeih.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mnewText\e[0m = newText.substring(\e\
    [31m0\e[0m, newText.length - consecutiveSpaces)\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewText is already defined as \e[33mvalue\e[0m \e[35mnewText\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659800354
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var lastSpaceIndex\
    \ = -1\n        var lastSpace = \" \"\n        var lastChar = \"\"\n        var\
    \ lastCharIndex = -1\n        val spaceIndex = text.indexOf(\" \")\n        while\
    \ (spaceIndex >= 0) {\n            lastSpaceIndex = spaceIndex\n            lastSpace\
    \ = text.charAt(spaceIndex)\n            lastCharIndex = spaceIndex\n        \
    \    lastChar = text.charAt(lastCharIndex)\n            val newChar = if (lastChar\
    \ == \" \" && lastSpace == \" \") \"-\" else \" \"\n            result = result.substring(0,\
    \ lastSpaceIndex) + newChar + result.substring(lastCharIndex + 1)\n          \
    \  spaceIndex = text.indexOf(\" \", lastSpaceIndex + 1)\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdmsmnx1k.scala:24:35\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            lastSpace = text.charAt(spaceIndex)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    Char\n\e[31m   |\e[0m         \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdmsmnx1k.scala:26:34 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m            lastChar = text.charAt(lastCharIndex)\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                    Found:    Char\n\e[31m   |\e[0m                       Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpdmsmnx1k.scala:29:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            spaceIndex\
    \ = text.indexOf(\e[31m\" \"\e[0m, lastSpaceIndex + \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Reassignment to val spaceIndex\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 1) {\n            text\n        } else if (spaces == 2) {\n     \
    \       text.replaceAll(' ', '_')\n        } else {\n            text.replaceAll('\
    \ ', '-')\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprcyhm7f5.scala:20:28\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \   ^^^\e[0m\n\e[31m   |\e[0m                            Found:    (\e[31m' '\e\
    [0m : Char)\n\e[31m   |\e[0m                            Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprcyhm7f5.scala:20:33 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            text.replaceAll(\e[31m' '\e[0m, \e[31m'_'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                 ^^^\e[0m\n\e[31m \
    \  |\e[0m                                 Found:    (\e[31m'_'\e[0m : Char)\n\e\
    [31m   |\e[0m                                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprcyhm7f5.scala:22:28 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            text.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                            ^^^\e[0m\n\e[31m   |\e\
    [0m                            Found:    (\e[31m' '\e[0m : Char)\n\e[31m   |\e\
    [0m                            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprcyhm7f5.scala:22:33 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            text.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                 ^^^\e[0m\n\e[31m \
    \  |\e[0m                                 Found:    (\e[31m'-'\e[0m : Char)\n\e\
    [31m   |\e[0m                                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659800357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        if (spaces.size > 2) {\n            val spacedText = spaces.replaceAll(\"\
    \\\\s+\", \"-\")\n            spacedText\n        } else {\n            spaces\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03tjl9wz.scala:27)\n\tat Problem.main(tmp03tjl9wz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(x => if (x ==\
    \ \" \") \"_\" else x).mkString\n            fixSpaces(newText)\n        } else\
    \ {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp46rb6pac.scala:26)\n\tat Problem.main(tmp46rb6pac.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val consecutiveSpaces = text.count(_\
    \ == ' ')\n            result = text.replaceAll(' ', '_')\n            if (consecutiveSpaces\
    \ > 1) {\n                result = result.replaceAll(' ', '-')\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplsvzh1bu.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            result = text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \            ^^^\e[0m\n\e[31m   |\e[0m                                     Found:\
    \    (\e[31m' '\e[0m : Char)\n\e[31m   |\e[0m                                \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplsvzh1bu.scala:20:42\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            result = text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \                 ^^^\e[0m\n\e[31m   |\e[0m                                  \
    \        Found:    (\e[31m'_'\e[0m : Char)\n\e[31m   |\e[0m                  \
    \                        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmplsvzh1bu.scala:22:43 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                result = result.replaceAll(\e[31m' '\e[0m,\
    \ \e[31m'-'\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \      ^^^\e[0m\n\e[31m   |\e[0m                                           Found:\
    \    (\e[31m' '\e[0m : Char)\n\e[31m   |\e[0m                                \
    \           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplsvzh1bu.scala:22:48 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                result = result.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                ^^^\e\
    [0m\n\e[31m   |\e[0m                                                Found:   \
    \ (\e[31m'-'\e[0m : Char)\n\e[31m   |\e[0m                                   \
    \             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 1) {\n            val spacedText = text.split(\"\
    \ \").map(x => x.replaceAll(\" \", \"_\"))\n            result = spacedText.mkString(\"\
    \ \")\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3vvplttq.scala:26)\n\tat Problem.main(tmp3vvplttq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else text.replace(\" \", \"_\") + \"-\" + text.replace(\" \", \"_\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf1scm80w.scala:23)\n\tat Problem.main(tmpf1scm80w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var newText = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val spacedText = text.split(\"\
    \ \").map(x => x.replaceAll(\"\\\\s+\", \"_\"))\n            newText = spacedText.mkString(\"\
    \ \")\n        }\n        newText\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnq11a54c.scala:26)\n\tat Problem.main(tmpnq11a54c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800358
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(x => if (x ==\
    \ \" \") \"_\" else x).mkString\n            fixSpaces(newText)\n        } else\
    \ {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp46rb6pac.scala:26)\n\tat Problem.main(tmp46rb6pac.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replaceAll(' ', '_')\n\
    \        else if (spaces == 2) text.replaceAll(' ', '_')\n        else text.replaceAll('\
    \ ', '_')\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0u_18jru.scala:18:46\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (spaces == \e[31m1\e[0m) text.replaceAll(\e[31m' '\e[0m, \e[31m'_'\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    (\e[31m'\
    \ '\e[0m : Char)\n\e[31m   |\e[0m                                            \
    \  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0u_18jru.scala:18:51\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (spaces == \e[31m1\e[0m) text.replaceAll(\e[31m' '\e[0m, \e[31m'_'\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   (\e[31m'_'\e[0m : Char)\n\e[31m   |\e[0m                                 \
    \                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0u_18jru.scala:19:46 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (spaces == \e[31m2\e[0m) text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^\e[0m\n\e[31m   |\e[0m                              \
    \                Found:    (\e[31m' '\e[0m : Char)\n\e[31m   |\e[0m          \
    \                                    Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0u_18jru.scala:19:51 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (spaces == \e[31m2\e\
    [0m) text.replaceAll(\e[31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                                 ^^^\e[0m\n\e[31m   |\e[0m  \
    \                                                Found:    (\e[31m'_'\e[0m : Char)\n\
    \e[31m   |\e[0m                 "
  stdout: ''
  timestamp: 1659800364
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    -\")\n            newText\n        } else {\n            text\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hn3qvzz.scala:26)\n\tat Problem.main(tmp9hn3qvzz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800366
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(x => if (x == \" \") \"_\" else\
    \ x).mkString\n            if (consecutiveSpaces == 1) {\n                val\
    \ newText = text.split(' ').map(x => if (x == \" \") \"_\" else x).mkString\n\
    \                text\n            } else {\n                newText\n       \
    \     }\n        } else {\n            text\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpubfr3jf9.scala:32)\n\tat Problem.main(tmpubfr3jf9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if(spaces\
    \ > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n         \
    \   val result = text.substring(0, spaces - 1)\n            val lastSpace = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces - 1)\n   \
    \         val lastSpaceIndex = text.lastIndexOf(' ', spaces - 1)\n           \
    \ val lastSpaceIndex = text.lastIndexOf(' ', spaces - 1)\n            val lastSpaceIndex\
    \ = text.lastIndexOf(' ', spaces - 1)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 1)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces\
    \ - 1)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces - 1)\n \
    \           val lastSpaceIndex = text.lastIndexOf(' ', spaces - 1)\n         \
    \   val lastSpaceIndex = text.lastIndexOf(' ', spaces - 1)\n            val lastSpaceIndex\
    \ = text.lastIndexOf(' ', spaces - 1)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 1)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces\
    \ - 1)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces - 1)\n \
    \           val lastSpaceIndex = text.lastIndexOf(' ', spaces - 1)\n         \
    \   val lastSpaceIndex = text.lastIndexOf(' ', spaces - 1)\n            val lastSpaceIndex\
    \ = text.lastIndexOf(' ', spaces - 1)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 1)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces\
    \ - 1)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces - 1)\n \
    \           val lastSpaceIndex = text.lastIndexOf(' ', spaces - 1)\n         \
    \   val lastSpaceIndex = text.lastIndexOf(' ', spaces - 1)\n            val lastSpaceIndex\
    \ = text.lastIndexOf(' ', spaces - 1)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 1)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces\
    \ - 1)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces - 1)\n \
    \           val lastSpaceIndex = text.lastIndexOf(' ', spaces - 1)\n         \
    \   val lastSpaceIndex = text.lastIndexOf(' ', spaces - 1)\n            val lastSpaceIndex\
    \ = text.lastIndexOf(' ', spaces - 1)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 1)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces\
    \ - 1)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces - 1)\n \
    \           val lastSpaceIndex = text.lastIndexOf(' ', spaces - 1)\n         \
    \   val lastSpaceIndex = text.lastIndexOf(' ', spaces - 1)\n            val last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoh52wcsq.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoh52wcsq.scala:65:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m65 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoh52wcsq.scala:22:16 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m            \e[33mval\e[0m \e[36mlastSpaceIndex\e[0m = text.lastIndexOf(\e\
    [31m' '\e[0m, spaces - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastSpaceIndex is already defined as \e[33mvalue\e[0m \e[35mlastSpaceIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoh52wcsq.scala:23:16 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mval\e[0m \e[36mlastSpaceIndex\e[0m = text.lastIndexOf(\e\
    [31m' '\e[0m, spaces - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastSpaceIndex is already defined as \e[33mvalue\e[0m \e[35mlastSpaceIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoh52wcsq.scala:24:16 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            \e[33mval\e[0m \e[36mlastSpaceIndex\e[0m = text.lastIndexOf(\e\
    [31m' '\e[0m, spaces - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastSpaceIndex is already defined as \e[33mvalue\e[0m \e[35mlastSpaceIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoh52wcsq.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mlast"
  stdout: ''
  timestamp: 1659800365
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val spacedText = text.split(\"\
    \ \").map(x => x.replaceAll(\" \", \"_\"))\n            result = spacedText.mkString(\"\
    \ \")\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe0bo2fyu.scala:26)\n\tat Problem.main(tmpe0bo2fyu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newText = text.replaceAll(\"\\\\s+\", \"\
    _\");\n        val newText2 = newText.replaceAll(\"\\\\s+\", \"-\");\n       \
    \ if (newText2.length > 2) {\n            newText2.replaceAll(\"\\\\s+\", \"-\"\
    );\n        }\n        else {\n            newText2;\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp57ea0gcv.scala:28)\n\tat Problem.main(tmp57ea0gcv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val lastSpace = text.lastIndexOf(' ')\n        \
    \    val lastTwoSpaces = text.lastIndexOf('  ')\n            val result = text.substring(0,\
    \ lastSpace) + \"_\" + text.substring(lastSpace, lastTwoSpaces)\n            result\n\
    \        } else {\n            text\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpygiahmy6.scala:19:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mlastTwoSpaces\e[0m =\
    \ text.lastIndexOf('  ')\n\e[31m\e[31m   |\e[0m                              \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \               unclosed character literal\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpygiahmy6.scala:22:10 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        } \e[33melse\e[0m {\n\e[31m\e[31m   |\e[0m          ^^^^\e[0m\n\
    \e[31m   |\e[0m          ')' expected, but 'else' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpygiahmy6.scala:35:0 ----------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpygiahmy6.scala:19:37\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e\
    [0m \e[36mlastTwoSpaces\e[0m = text.lastIndexOf('  ')\n\e[31m\e[31m   |\e[0m \
    \                               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35mlastIndexOf\e[0m in \e\
    [33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String, x$1:\
    \ Int): Int\n\e[31m   |\e[0m (x$0: String): Int\n\e[31m   |\e[0m (x$0: Int, x$1:\
    \ Int): Int\n\e[31m   |\e[0m (x$0: Int): Int\n\e[31m   |\e[0mmatch arguments (quoted.Expr[Unit])\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpygiahmy6.scala:34:1 ---------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659800366
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val spacedText = text.split(\"\
    \ \").map(x => x.replaceAll(\"\\\\s+\", \"_\"))\n            result = spacedText.mkString(\"\
    \ \")\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppr69o_bh.scala:26)\n\tat Problem.main(tmppr69o_bh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString(\"\
    -\")\n            newText\n        } else {\n            text\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp276twc5x.scala:26)\n\tat Problem.main(tmp276twc5x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if(spaces\
    \ > 2) {\n            val spacedText = text.split(' ').map(x => x.replaceAll('\
    \ ', '_'))\n            val consecSpaces = text.count(_ == ' ')\n            val\
    \ newText = if (consecSpaces == spaces - 1) spacedText.mkString else spacedText.take(spaces\
    \ - 1).mkString + \n                s\"-${spacedText.drop(spaces - 1).mkString}\"\
    \n            newText\n        } else {\n            text\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxoa0o99f.scala:18:67\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e\
    [36mspacedText\e[0m = text.split(\e[31m' '\e[0m).map(\e[36mx\e[0m => x.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m))\n\e[31m\e[31m   |\e[0m                        \
    \                                           ^^^\e[0m\n\e[31m   |\e[0m        \
    \                                          Found:    (\e[31m' '\e[0m : Char)\n\
    \e[31m   |\e[0m                                                  Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxoa0o99f.scala:18:72\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e\
    [36mspacedText\e[0m = text.split(\e[31m' '\e[0m).map(\e[36mx\e[0m => x.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m))\n\e[31m\e[31m   |\e[0m                        \
    \                                                ^^^\e[0m\n\e[31m   |\e[0m   \
    \                                               Found:    (\e[31m'_'\e[0m : Char)\n\
    \e[31m   |\e[0m                                                  Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText2 = newText.substring(0,newText.length-1)\n          \
    \  val newText3 = newText2.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText4 = newText3.substring(0,newText3.length-1)\n        \
    \    val newText5 = newText4.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText6 = newText5.substring(0,newText5.length-1)\n        \
    \    val newText7 = newText6.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText8 = newText7.substring(0,newText7.length-1)\n        \
    \    val newText9 = newText8.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText10 = newText9.substring(0,newText9.length-1)\n       \
    \     val newText11 = newText10.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText12 = newText11.substring(0,newText11.length-1)\n     \
    \       val newText13 = newText12.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText14 = newText13.substring(0,newText13.length-1)\n     \
    \       val newText15 = newText14.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText16 = newText15.substring(0,newText15.length-1)\n     \
    \       val newText17 = newText16.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText18 = newText17.substring(0,newText17.length-1)\n     \
    \       val newText19 = newText18.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText20 = newText19.substring(0,newText19.length-1)\n     \
    \       val newText21 = newText20.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText22 = newText21.substring(0,newText21.length-1)\n     \
    \       val newText23 = newText22.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText24 = newText23.substring(0,newText23.length-1)\n     \
    \       val newText25 = newText24.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText26 = newText25.split(' ').\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkmx8pb7e.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpkmx8pb7e.scala:55:0 ----------------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkmx8pb7e.scala:54:1 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpkmx8pb7e.scala:46:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m46 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val result = text.split(\" \").map(x => if (x == \" \") \"_\" else\
    \ x).mkString(\"\")\n            if (consecutiveSpaces > 1) {\n              \
    \  val lastSpace = text.lastIndexOf(' ')\n                val firstSpace = text.indexOf('\
    \ ', lastSpace + 1)\n                val result = text.substring(firstSpace, lastSpace).split(\"\
    \ \").map(x => if (x == \" \") \"_\" else x).mkString(\"\")\n            }\n \
    \           result\n        } else {\n            text\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbyoeg2sj.scala:32)\n\tat Problem.main(tmpbyoeg2sj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\").split(\"_\")\n        val result = \"\"\n        spaces.foreach(x => result\
    \ += x.replaceAll(\"\\\\s+\", \"-\"))\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5f2zhyda.scala:18:35 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        spaces.foreach(\e[36mx\e[0m => result += x.replaceAll(\e\
    [31m\"\\\\s+\"\e[0m, \e[31m\"-\"\e[0m))\n\e[31m\e[31m   |\e[0m               \
    \             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of String - did you mean result.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659800367
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\"))\n            val spacedText2 = spacedText.map(x => x.replaceAll(\"\
    \ \", \"-\"))\n            spacedText2.mkString(\" \")\n        } else {\n   \
    \         text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp26o5if6f.scala:27)\n\tat Problem.main(tmp26o5if6f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        if (spaces.contains(\"_\"))\n            spaces.replaceAll(\"_+\"\
    , \"_\")\n        else\n            spaces\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuzujk3na.scala:25)\n\tat Problem.main(tmpuzujk3na.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800367
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\");\n        if (fixedText.length > 2) {\n            val fixedText2 = fixedText.replaceAll(\"\
    \\\\s+\", \"-\");\n            return fixedText2;\n        }\n        return fixedText;\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfyq7fq_j.scala:26)\n\tat Problem.main(tmpfyq7fq_j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800367
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    -\")\n            newText\n        } else {\n            text\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmm4qiee0.scala:26)\n\tat Problem.main(tmpmm4qiee0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces == 2) text + \"_-\"\n        else text.replaceAll(\"\\\\s+\", \"\
    _\")\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu2_4z142.scala:24)\n\tat Problem.main(tmpu2_4z142.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replaceFirst(\" \", \"\
    _\")\n        else text.replaceFirst(\" \", \"_\") + \"-\" + text.replaceFirst(\"\
    \ \", \"_\")\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3nfvub40.scala:23)\n\tat Problem.main(tmp3nfvub40.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var lastSpace = text.lastIndexOf('\
    \ ')\n        var lastSpaceIndex = -1\n        while (lastSpace != -1) {\n   \
    \         if (lastSpace != text.lastIndexOf(' ')) result += \" \"\n          \
    \  result += text.substring(lastSpaceIndex + 1, lastSpace)\n            lastSpaceIndex\
    \ = lastSpace\n            lastSpace = text.lastIndexOf(' ', lastSpace + 1)\n\
    \        }\n        if (lastSpaceIndex != -1) result += text.substring(lastSpaceIndex\
    \ + 1)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 14, end 13, length 14\n\
    \tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.fixSpaces(tmpidf9dpho.scala:21)\n\tat Problem$.main(tmpidf9dpho.scala:30)\n\
    \tat Problem.main(tmpidf9dpho.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if(spaces\
    \ > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n         \
    \   val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText2 = newText.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText3 = newText2.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText4 = newText3.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText5 = newText4.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText6 = newText5.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText7 = newText6.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText8 = newText7.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText9 = newText8.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText10 = newText9.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText11 = newText10.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText12 = newText11.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText13 = newText12.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText14 = newText13.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText15 = newText14.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText16 = newText15.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText17 = newText16.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText18 = newText17.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText19 = newText18.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText20 = newText19.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText21 = newText20.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText22 = newText21.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9rktllx8.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9rktllx8.scala:52:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp9rktllx8.scala:51:1 ---------------------\e[0m\e[0m\n\
    \e[31m51 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp9rktllx8.scala:43:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m43 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newText = text.replaceAll(\" \", \"_\")\n\
    \        if (newText.length() > 2) {\n            newText.replaceAll(\"\\\\s+\"\
    , \"-\")\n        }\n        else {\n            newText\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn77dnurs.scala:28)\n\tat Problem.main(tmpn77dnurs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces == 2) text + \"-\"\n        else text.grouped(2).map(x => if (x.size\
    \ == 1) \"_\" + x else \"_\" + x.mkString + \"-\").mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfpwizqoq.scala:24)\n\tat Problem.main(tmpfpwizqoq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        if (spaces.contains(\"_\")) {\n            val parts = spaces.split(\"\
    _\")\n            val newParts = parts.map(part => if (part.contains(\"_\")) {\n\
    \                part.replace(\"_\", \"-\")\n            } else {\n          \
    \      part\n            })\n            parts.mkString(parts.head, \"_\", parts.last)\n\
    \        } else {\n            spaces\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpikpx7a0w.scala:31)\n\tat Problem.main(tmpikpx7a0w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800370
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\")\n        val fixedText2 = fixedText.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (fixedText2.length > 2) {\n            fixedText2.substring(0, fixedText2.length\
    \ - 2)\n        } else {\n            fixedText2\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4i88etf_.scala:25)\n\tat Problem.main(tmp4i88etf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\"))\n            val spacedText2 = spacedText.map(x => x.replaceAll(\"\
    _\", \"-\"))\n            spacedText2.mkString(\" \")\n        } else {\n    \
    \        text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt3qjjd00.scala:27)\n\tat Problem.main(tmpt3qjjd00.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800355
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var fixed = text\n        fixed.split(\"\\\\\
    s\").foreach(x => if (x.isEmpty) fixed else fixed += \"_\" + x)\n        fixed.split(\"\
    \\\\s+\").foreach(x => if (x.isEmpty) fixed else fixed += \"-\" + x)\n       \
    \ fixed\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6g_rrcic.scala:22)\n\tat Problem.main(tmp6g_rrcic.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if(spaces\
    \ > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(_.toString).mkString(\"\
    -\")\n            val newText = newText.split(' ').map(_.toLowerCase).toList.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp99qt7cck.scala:39:75 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            \e[33mval\e[0m \e[36mnewText\e[0m = newText.split(\e\
    [31m' '\e[0m).map(_.toLowerCase).toList.map(\n\e[31m\e[31m   |\e[0m          \
    \                                                                 ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp99qt7cck.scala:50:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m50 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp99qt7cck.scala:19:16 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m            \e[33mval\e[0m \e[36mnewText\e[0m = newText.split(\e\
    [31m' '\e[0m).map(_.toLowerCase).toList.map(_.toString).mkString(\e[31m\"-\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewText is already defined as \e[33mvalue\e[0m \e[35mnewText\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp99qt7cck.scala:20:16 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m            \e[33mval\e[0m \e[36mnewText\e[0m = newText.split(\e\
    [31m' '\e[0m).map(_.toLowerCase).toList.map(_.toString).mkString(\e[31m\"-\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewText is already defined as \e[33mvalue\e[0m \e[35mnewText\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp99qt7cck.scala:21:16 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m            \e[33mval\e[0m \e[36mnewText\e[0m = newText.split(\e\
    [31m' '\e[0m).map(_.toLowerCase).toList.map(_.toString).mkString(\e[31m\"-\""
  stdout: ''
  timestamp: 1659800377
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\");\n        if (fixedText.length > 2) {\n            val fixedText2 = fixedText.replaceAll(\"\
    \\\\s+\", \"-\");\n            fixedText2\n        } else {\n            fixedText\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm2bp1x46.scala:27)\n\tat Problem.main(tmpm2bp1x46.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800375
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val spacedText = text.split(\"\
    \ \").map(x => x.replaceAll(\"\\\\s+\", \"_\"))\n            result = spacedText.mkString(\"\
    \ \")\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppr69o_bh.scala:26)\n\tat Problem.main(tmppr69o_bh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if(spaces\
    \ > 1) {\n            val newText = text.split(' ').map(_.toLowerCase).toList.map(x\
    \ => x.replaceAll(\" \", \"_\")).mkString\n            val newText2 = newText.split('\
    \ ').map(_.toLowerCase).toList.map(x => x.replaceAll(\"_\", \"-\")).mkString\n\
    \            val newText3 = newText2.split(' ').map(_.toLowerCase).toList.map(x\
    \ => x.replaceAll(\"-\", \"\")).mkString\n            val newText4 = newText3.split('\
    \ ').map(_.toLowerCase).toList.map(x => x.replaceAll(\"_\", \"\")).mkString\n\
    \            newText4\n        } else {\n            text\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnemz5gdc.scala:29)\n\tat Problem.main(tmpnemz5gdc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    -\")\n            newText\n        } else {\n            text\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hn3qvzz.scala:26)\n\tat Problem.main(tmp9hn3qvzz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800366
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val result = text.substring(0, spaces - 1) + text.substring(spaces\
    \ - 1, consecutiveSpaces)\n            fixSpaces(result)\n        } else {\n \
    \           text\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjx8o6j95.scala:27)\n\tat Problem.main(tmpjx8o6j95.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800377
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var lastSpace = text.lastIndexOf('\
    \ ')\n        var lastSpaceIndex = -1\n        var nextSpaceIndex = -1\n     \
    \   while (lastSpace != -1) {\n            nextSpaceIndex = text.indexOf(' ',\
    \ lastSpace + 1)\n            if (nextSpaceIndex == -1) {\n                nextSpaceIndex\
    \ = text.length\n            }\n            if (lastSpaceIndex == -1) {\n    \
    \            lastSpaceIndex = nextSpaceIndex\n            }\n            if (nextSpaceIndex\
    \ - lastSpaceIndex > 2) {\n                result = result.replace(text.substring(lastSpaceIndex,\
    \ nextSpaceIndex), \"-\")\n            }\n            lastSpace = text.lastIndexOf('\
    \ ')\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 1) {\n            text\n        } else if (spaces == 2) {\n     \
    \       text.split(' ').map(_.toLowerCase).mkString.replaceAll(\"\\\\s+\", \"\
    -\")\n        } else {\n            text.split(' ').map(_.toLowerCase).mkString.replaceAll(\"\
    \\\\s+\", \"-\")\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpel6b_mvn.scala:26)\n\tat Problem.main(tmpel6b_mvn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => if (x\
    \ == \" \") \"_\" else x).mkString\n            val consecutiveSpaces = text.count(_\
    \ == ' ')\n            if (consecutiveSpaces > 1) {\n                val consecutiveSpacedText\
    \ = text.split(\" \").map(x => if (x == \" \") \"-\" else x).mkString\n      \
    \          spacedText + consecutiveSpacedText\n            } else {\n        \
    \        spacedText\n            }\n        } else {\n            text\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5bmbu252.scala:32)\n\tat Problem.main(tmp5bmbu252.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val spacedText = text.split(\"\
    \ \").map(x => x.replaceAll(\" \", \"_\"))\n            result = spacedText.mkString(\"\
    \ \")\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe0bo2fyu.scala:26)\n\tat Problem.main(tmpe0bo2fyu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val result = text.substring(0, spaces - 1)\n            val lastSpace\
    \ = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val last\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphtztfs5v.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphtztfs5v.scala:74:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtztfs5v.scala:22:16 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m            \e[33mval\e[0m \e[36mlastSpaceIndex\e[0m = text.lastIndexOf(\e\
    [31m' '\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastSpaceIndex is already defined as \e[33mvalue\e[0m \e[35mlastSpaceIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtztfs5v.scala:23:16 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mval\e[0m \e[36mlastSpaceIndex\e[0m = text.lastIndexOf(\e\
    [31m' '\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastSpaceIndex is already defined as \e[33mvalue\e[0m \e[35mlastSpaceIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtztfs5v.scala:24:16 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            \e[33mval\e[0m \e[36mlastSpaceIndex\e[0m = text.lastIndexOf(\e\
    [31m' '\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastSpaceIndex is already defined as \e[33mvalue\e[0m \e[35mlastSpaceIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtztfs5v.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mlastSpaceIndex\e[0m = text.lastIndexOf(\e\
    [31m' '\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \\\\s+\", \"_\")).mkString\n            val consecutiveSpaces = text.count(_ ==\
    \ ' ')\n            if (consecutiveSpaces > 1) {\n                val consecutiveSpacedText\
    \ = text.split(\" \").map(x => x.replaceAll(\"\\\\s+\", \"-\")).mkString\n   \
    \             spacedText + \"-\" + consecutiveSpacedText\n            } else {\n\
    \                spacedText\n            }\n        } else {\n            text\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqf9pkxl3.scala:32)\n\tat Problem.main(tmpqf9pkxl3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"_\") + \"-\"\n        else\
    \ text.replace(\" \", \"_\") + \"_\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl3ty9x13.scala:24)\n\tat Problem.main(tmpl3ty9x13.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            if (consecutiveSpaces == 1) {\n                newText.replaceAll(\"\
    \ \", \"_\")\n            } else {\n                newText.replaceAll(\" \",\
    \ \"-\")\n            }\n        } else {\n            text\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfpejoo8o.scala:31)\n\tat Problem.main(tmpfpejoo8o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newText = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val newText2 = newText.replaceAll(\"\\\\s+\", \"-\")\n        if\
    \ (newText2.length > 2) {\n            newText2.substring(0, newText2.length -\
    \ 2)\n        } else {\n            newText2\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp18rjk3eo.scala:25)\n\tat Problem.main(tmp18rjk3eo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ text.replaceAll(\"\\\\s+\", \"_\") + text.dropRight(spaces)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6bapxwio.scala:23)\n\tat Problem.main(tmp6bapxwio.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newText = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        if (newText.length > 2) {\n            newText.replaceAll(\"\\\\\
    s+\", \"-\")\n        }\n        else {\n            newText\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1418bs7h.scala:27)\n\tat Problem.main(tmp1418bs7h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces == 2) text + \"_-\"\n        else text.replaceAll(' ', '_')\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwnep97er.scala:20:29\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \    ^^^\e[0m\n\e[31m   |\e[0m                             Found:    (\e[31m'\
    \ '\e[0m : Char)\n\e[31m   |\e[0m                             Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwnep97er.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \         ^^^\e[0m\n\e[31m   |\e[0m                                  Found:  \
    \  (\e[31m'_'\e[0m : Char)\n\e[31m   |\e[0m                                  Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \\\\s+\", \"_\")).mkString\n            val consecutiveSpaces = text.count(_ ==\
    \ ' ')\n            if (consecutiveSpaces > 1) {\n                val consecutiveSpacedText\
    \ = text.split(\" \").map(x => x.replaceAll(\"\\\\s+\", \"-\")).mkString\n   \
    \             spacedText + consecutiveSpacedText\n            } else {\n     \
    \           spacedText\n            }\n        } else {\n            text\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ru7ii_5.scala:32)\n\tat Problem.main(tmp4ru7ii_5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \\\\s+\", \"_\"))\n            spacedText.mkString(\" \")\n        } else {\n\
    \            text\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm18mnwgk.scala:26)\n\tat Problem.main(tmpm18mnwgk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces > 2) text.replaceAll(\"\\\\s+\", \"-\")\n        else text.replaceAll(\"\
    \\\\s+\", \"_\")\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe0l1rvdn.scala:25)\n\tat Problem.main(tmpe0l1rvdn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        val fixedWords\
    \ = mutable.ListBuffer[String]()\n        for(word <- words) {\n            val\
    \ fixedWord = word.replaceAll(\" \", \"_\")\n            if(fixedWord.length()\
    \ > 2) {\n                fixedWords += fixedWord\n            } else {\n    \
    \            fixedWords += \"_\" + fixedWord\n            }\n        }\n     \
    \   fixedWords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7w1cs8a9.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfixedWords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ text.replaceAll(' ', '_')\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp37wi41_e.scala:19:29\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \    ^^^\e[0m\n\e[31m   |\e[0m                             Found:    (\e[31m'\
    \ '\e[0m : Char)\n\e[31m   |\e[0m                             Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp37wi41_e.scala:19:34\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \         ^^^\e[0m\n\e[31m   |\e[0m                                  Found:  \
    \  (\e[31m'_'\e[0m : Char)\n\e[31m   |\e[0m                                  Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \\\\s+\", \"_\"))\n            spacedText.mkString\n        } else {\n       \
    \     text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgvgxa7rj.scala:26)\n\tat Problem.main(tmpgvgxa7rj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ text.take(spaces) + \"_\" + text.drop(spaces)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmq_pa3p0.scala:23)\n\tat Problem.main(tmpmq_pa3p0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val result = text.substring(0, spaces - 1) + text.substring(spaces\
    \ - 1, consecutiveSpaces).replaceAll(' ', '-')\n            result\n        }\
    \ else {\n            text\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplhxxwujh.scala:19:114\
    \ -------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e\
    [36mresult\e[0m = text.substring(\e[31m0\e[0m, spaces - \e[31m1\e[0m) + text.substring(spaces\
    \ - \e[31m1\e[0m, consecutiveSpaces).replaceAll(\e[31m' '\e[0m, \e[31m'-'\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                          ^^^\e[0m\n\e[31m  \
    \ |\e[0m                                                  Found:    (\e[31m' '\e\
    [0m : Char)\n\e[31m   |\e[0m                                                 \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplhxxwujh.scala:19:119\
    \ -------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e\
    [36mresult\e[0m = text.substring(\e[31m0\e[0m, spaces - \e[31m1\e[0m) + text.substring(spaces\
    \ - \e[31m1\e[0m, consecutiveSpaces).replaceAll(\e[31m' '\e[0m, \e[31m'-'\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                               ^^^\e[0m\n\e[31m\
    \   |\e[0m                                                  Found:    (\e[31m'-'\e\
    [0m : Char)\n\e[31m   |\e[0m                                                 \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(\" \").map(x => if (x == \" \") \"_\" else\
    \ x).mkString(\"\")\n            if (consecutiveSpaces > 1) {\n              \
    \  newText = newText.replaceAll(\"\\\\s+\", \"-\")\n            }\n          \
    \  newText\n        } else {\n            text\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpxamp_ryw.scala:21:24 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                newText = newText.replaceAll(\e[31m\"\
    \\\\s+\"\e[0m, \e[31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val newText\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    -\")\n            fixSpaces(newText)\n        } else {\n            text\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoty23h6t.scala:26)\n\tat Problem.main(tmpoty23h6t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => if (x\
    \ == \" \") \"_\" else x).mkString\n            val consecutiveSpaces = text.count(_\
    \ == ' ')\n            if (consecutiveSpaces > 1) {\n                val consecutiveSpacedText\
    \ = text.split(\" \").map(x => if (x == \" \") \"-\" else x).mkString\n      \
    \          spacedText + consecutiveSpacedText\n            } else {\n        \
    \        spacedText\n            }\n        } else {\n            text\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5bmbu252.scala:32)\n\tat Problem.main(tmp5bmbu252.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(x => if (x == \" \") \"_\" else\
    \ x).mkString\n            if (consecutiveSpaces == 1) {\n                newText\n\
    \            } else {\n                newText.substring(0, newText.length - consecutiveSpaces)\n\
    \            }\n        } else {\n            text\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp04w0xfuo.scala:31)\n\tat Problem.main(tmp04w0xfuo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800386
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => if (x\
    \ == \" \") \"_\" else x).mkString\n            val spacedText2 = spacedText.split(\"\
    \ \").map(x => if (x == \" \") \"-\" else x).mkString\n            spacedText2\n\
    \        } else {\n            text\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4m3t2m8v.scala:27)\n\tat Problem.main(tmp4m3t2m8v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var spaces = 0\n\
    \        var lastSpace = 0\n        var lastChar = 0\n        for(i <- 0 until\
    \ text.length){\n            val c = text.charAt(i)\n            if(c == ' '){\n\
    \                spaces += 1\n                lastSpace = i\n            }\n \
    \           if(c == '_'){\n                spaces -= 1\n            }\n      \
    \      if(spaces > 1){\n                result += (text.substring(lastSpace, i)\
    \ + \"-\")\n                lastSpace = i\n                lastChar = i\n    \
    \        }\n        }\n        if(lastSpace < text.length){\n            result\
    \ += (text.substring(lastSpace, text.length))\n        }\n        result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0r_un7lt.scala:41)\n\tat Problem.main(tmp0r_un7lt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800387
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ text.take(spaces - 1).mkString + \"_\" + text.drop(spaces - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpulwru1cb.scala:23)\n\tat Problem.main(tmpulwru1cb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText2 = newText.replaceAll(\" \", \"_\")\n            val\
    \ newText3 = newText2.replaceAll(\"_\", \" \")\n            val newText4 = newText3.replaceAll(\"\
    _\", \"-\")\n            val newText5 = newText4.replaceAll(\"_\", \"-\")\n  \
    \          val newText6 = newText5.replaceAll(\"_\", \"-\")\n            val newText7\
    \ = newText6.replaceAll(\"_\", \"-\")\n            val newText8 = newText7.replaceAll(\"\
    _\", \"-\")\n            val newText9 = newText8.replaceAll(\"_\", \"-\")\n  \
    \          val newText10 = newText9.replaceAll(\"_\", \"-\")\n            val\
    \ newText11 = newText10.replaceAll(\"_\", \"-\")\n            val newText12 =\
    \ newText11.replaceAll(\"_\", \"-\")\n            val newText13 = newText12.replaceAll(\"\
    _\", \"-\")\n            val newText14 = newText13.replaceAll(\"_\", \"-\")\n\
    \            val newText15 = newText14.replaceAll(\"_\", \"-\")\n            val\
    \ newText16 = newText15.replaceAll(\"_\", \"-\")\n            val newText17 =\
    \ newText16.replaceAll(\"_\", \"-\")\n            val newText18 = newText17.replaceAll(\"\
    _\", \"-\")\n            val newText19 = newText18.replaceAll(\"_\", \"-\")\n\
    \            val newText20 = newText19.replaceAll(\"_\", \"-\")\n            val\
    \ newText21 = newText20.replaceAll(\"_\", \"-\")\n            val newText22 =\
    \ newText21.replaceAll(\"_\", \"-\")\n            val newText23 = newText22.replaceAll(\"\
    _\", \"-\")\n            val newText24 = newText23.replaceAll(\"_\", \"-\")\n\
    \            val newText25 = newText24.replaceAll(\"_\", \"-\")\n            val\
    \ newText26 = newText25.replaceAll(\"_\", \"-\")\n            val newText27 =\
    \ newText26.replaceAll(\"_\", \"-\")\n            val newText28 = newText27.replaceAll(\"\
    _\", \"-\")\n            val newText29 = newText28.replaceAll(\"_\", \"-\")\n\
    \            val newText30 = newText29.replaceAll(\"_\", \"-\")\n            val\
    \ newText31 = newText30.replaceAll(\"_\", \"-\")\n            val newText32 =\
    \ newText31.replaceAll(\"_\", \"-\")\n            \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi23f4_ny.scala:62:0 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi23f4_ny.scala:61:1\
    \ ---------------------\e[0m\e[0m\n\e[31m61 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpi23f4_ny.scala:53:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m53 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659800386
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else text.replace(\" \", \"_\") + \"-\" + text.replace(\" \", \"_\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf1scm80w.scala:23)\n\tat Problem.main(tmpf1scm80w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newText = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val newText2 = newText.replaceAll(\"\\\\s+\", \"-\")\n        if\
    \ (newText2.length > 2) {\n            newText2.substring(0,newText2.length-1)\n\
    \        } else {\n            newText2\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprnnb86wg.scala:25)\n\tat Problem.main(tmprnnb86wg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800386
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\")\n        val fixedText2 = fixedText.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (fixedText2.length > 2) {\n            fixedText2.substring(0,fixedText2.length-1)\n\
    \        } else {\n            fixedText2\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_md1dk3u.scala:25)\n\tat Problem.main(tmp_md1dk3u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800386
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(_.toLowerCase).map(_.toString).mkString(\"\
    -\")\n            spacedText\n        } else {\n            text\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_2t2z5qo.scala:26)\n\tat Problem.main(tmp_2t2z5qo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 1) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString(\"\
    -\")\n            fixSpaces(newText)\n        } else {\n            text\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6ynuh7cz.scala:26)\n\tat Problem.main(tmp6ynuh7cz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\"))\n            val spacedText2 = spacedText.map(x => x.replaceAll(\"\
    _\", \"-\"))\n            spacedText2.mkString(\" \")\n        } else {\n    \
    \        text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt3qjjd00.scala:27)\n\tat Problem.main(tmpt3qjjd00.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800355
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val result = text.substring(0, spaces - 1)\n            val lastSpace\
    \ = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 1)\n            if (lastSpace == -1 || lastSpaceIndex == -1) {\n\
    \                result\n            } else {\n                val lastSpaceString\
    \ = text.substring(lastSpaceIndex + 1, lastSpace)\n                val lastSpaceStringWithoutSpace\
    \ = lastSpaceString.replaceAll(\"\\\\s\", \"\")\n                val lastSpaceStringWithoutSpaceWithoutSpace\
    \ = lastSpaceStringWithoutSpace.replaceAll(\"\\\\s\", \"\")\n                val\
    \ lastSpaceStringWithoutSpaceWithoutSpaceWithoutSpace = lastSpaceStringWithoutSpaceWithoutSpace.replaceAll(\"\
    \\\\s\", \"\")\n                val lastSpaceStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace\
    \ = lastSpaceStringWithoutSpaceWithoutSpaceWithoutSpace.replaceAll(\"\\\\s\",\
    \ \"\")\n                val lastSpaceStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace\
    \ = lastSpaceStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace.replaceAll(\"\
    \\\\s\", \"\")\n                val lastSpaceStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace\
    \ = lastSpaceStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace.replaceAll(\"\
    \\\\s\", \"\")\n                val lastSpaceStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace\
    \ = lastSpaceStringWithoutSpaceWithoutSpaceWithoutSpace.replaceAll(\"\\\\s\",\
    \ \"\")\n                val lastSpaceStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace\
    \ = lastSpaceStringWithoutSpaceWithoutSpace.replaceAll(\"\\\\s\", \"\")\n    \
    \            val lastSpaceStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithout\
    \ = lastSpaceStringWithoutSpaceWithoutSpace.replaceAll(\"\\\\s\", \"\")\n    \
    \            val lastSpaceStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithout\
    \ = lastSpaceStringWithoutSpaceWithoutSpace.replaceAll(\"\\\\s\", \"\")\n    \
    \            val lastSpaceStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithout\
    \ = lastSpaceStringWithoutSpaceWithoutSpace.replaceAll(\"\\\\s\", \"\")\n    \
    \            val lastSpaceStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithout\
    \ = lastSpaceStringWithoutSpaceWithoutSpace.replaceAll(\"\\\\s\", \"\")\n    \
    \            val lastSpaceStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace\
    \ = lastSpaceStringWithoutSpaceWithoutSpace.replaceAll(\"\\\\s\", \"\")\n    \
    \            val lastSpaceStringWithoutSpaceWithoutSpace\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx63hfkk4.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx63hfkk4.scala:50:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m50 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx63hfkk4.scala:33:20 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m                \e[33mval\e[0m \e[36mlastSpaceStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace\e\
    [0m = lastSpaceStringWithoutSpaceWithoutSpace.replaceAll(\e[31m\"\\\\s\"\e[0m,\
    \ \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastSpaceStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  lastSpaceStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpx63hfkk4.scala:35:20 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mval\e[0m \e[36mlastSpaceStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithout\e\
    [0m = lastSpaceStringWithoutSpaceWithoutSpace.replaceAll(\e[31m\"\\\\s\"\e[0m,\
    \ \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastSpaceStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithout\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  last"
  stdout: ''
  timestamp: 1659800384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.replaceAll(' ', '-')\n      \
    \      val newText2 = newText.replaceAll(' ', '-')\n            if (newText2.count(_\
    \ == '-') > 1) {\n                newText2\n            } else {\n           \
    \     newText\n            }\n        } else {\n            text\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdxe724ez.scala:18:42\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e\
    [36mnewText\e[0m = text.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                          ^^^\e[0m\n\e[31m   |\e[0m\
    \                                          Found:    (\e[31m' '\e[0m : Char)\n\
    \e[31m   |\e[0m                                          Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdxe724ez.scala:18:47\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e\
    [36mnewText\e[0m = text.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                               ^^^\e[0m\n\e[31m   |\e\
    [0m                                               Found:    (\e[31m'-'\e[0m :\
    \ Char)\n\e[31m   |\e[0m                                               Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdxe724ez.scala:19:46\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e\
    [36mnewText2\e[0m = newText.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                              ^^^\e[0m\n\e[31m  \
    \ |\e[0m                                              Found:    (\e[31m' '\e[0m\
    \ : Char)\n\e[31m   |\e[0m                                              Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdxe724ez.scala:19:51\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e\
    [36mnewText2\e[0m = newText.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                   ^^^\e[0m\n\e[31m\
    \   |\e[0m                                                  Found:    (\e[31m'-'\e\
    [0m : Char)\n\e[31m   |\e[0m                                                 \
    \ Required: String\n\e[31m   |\e[0m\n\e["
  stdout: ''
  timestamp: 1659800388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else text.replace(\" \", \"_\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_wk2twag.scala:25)\n\tat Problem.main(tmp_wk2twag.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800389
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\").length\n        if (spaces > 2) {\n            val newText = text.replaceAll(\"\
    \\\\s+\", \"_\")\n            val newText2 = newText.replaceAll(\"\\\\s+\", \"\
    -\")\n            fixSpaces(newText2)\n        } else {\n            text\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces == 2) text + \"_-\"\n        else text.split(' ').map(x => if (x\
    \ == \" \") \"_\" else x).mkString\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4yvzl0hr.scala:24)\n\tat Problem.main(tmp4yvzl0hr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800390
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(' ').map(x => x.replaceAll(\"\
    \\\\s+\", \"_\"))\n            val spacedText2 = spacedText.map(x => x.replaceAll(\"\
    _+\", \"-\"))\n            spacedText2.mkString\n        } else {\n          \
    \  text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0welem.scala:27)\n\tat Problem.main(tmp6t0welem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800390
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ text.take(spaces - 1).mkString + \"_\" + text.drop(spaces - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpulwru1cb.scala:23)\n\tat Problem.main(tmpulwru1cb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var lastSpace = false\n\
    \        var lastSpaceCount = 0\n        for(i <- 0 until text.length){\n    \
    \        if(text.charAt(i) == ' '){\n                lastSpace = true\n      \
    \          lastSpaceCount += 1\n            }\n            else if(lastSpace &&\
    \ lastSpaceCount > 1){\n                result = result.replace(\" \", \"_\")\n\
    \                lastSpace = false\n                lastSpaceCount = 0\n     \
    \       }\n            else if(lastSpace && lastSpaceCount == 1){\n          \
    \      result = result.replace(\" \", \"-\")\n                lastSpace = false\n\
    \                lastSpaceCount = 0\n            }\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnwzii7mi.scala:39)\n\tat Problem.main(tmpnwzii7mi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800390
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    -\")\n            newText\n        } else {\n            text\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hn3qvzz.scala:26)\n\tat Problem.main(tmp9hn3qvzz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var newText = text\n        val spaceIndex =\
    \ newText.indexOf(\" \")\n        while (spaceIndex != -1) {\n            newText\
    \ = newText.substring(0, spaceIndex) + \"_\" + newText.substring(spaceIndex +\
    \ 1)\n            spaceIndex = newText.indexOf(\" \")\n        }\n        if (newText.length\
    \ > 2) {\n            newText = newText.substring(0, newText.length - 2)\n   \
    \     }\n        newText\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmplzaagp71.scala:20:23 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            spaceIndex = newText.indexOf(\e[31m\" \"\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Reassignment to val spaceIndex\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800385
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces == 2) text + \"-\"\n        else text.replaceAll(\"\\\\s+\", \"_\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6cm5te6a.scala:24)\n\tat Problem.main(tmp6cm5te6a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800390
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\" \", \"_\")\n\
    \        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"_\")\n      \
    \  if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxh8aaorm.scala:28)\n\tat Problem.main(tmpxh8aaorm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if(spaces\
    \ > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n         \
    \   val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            if(consecutiveSpaces > 1) {\n                newText.split(' ').map(_.toLowerCase).map(_.toString).mkString.replaceAll(\"\
    \\\\s+\", \"-\")\n            } else {\n                newText.replaceAll(\"\\\
    \\s+\", \"-\")\n            }\n        } else {\n            text\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi29ldzzb.scala:31)\n\tat Problem.main(tmpi29ldzzb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var fixedText = text\n        var spaceCount\
    \ = 0\n        var lastSpace = false\n        fixedText.foreach(c => {\n     \
    \       if (c == ' ') {\n                spaceCount += 1\n                if (lastSpace)\
    \ {\n                    fixedText = fixedText.substring(0, fixedText.length -\
    \ 1)\n                    fixedText += \"-\"\n                }\n            }\
    \ else {\n                spaceCount = 0\n            }\n            lastSpace\
    \ = c == ' '\n        })\n        return fixedText\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2vtyiz6m.scala:35)\n\tat Problem.main(tmp2vtyiz6m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800390
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString\n\
    \            val newText2 = newText.replaceAll(\"\\\\s+\", \"-\")\n          \
    \  if (consecutiveSpaces > 1) {\n                newText2\n            } else\
    \ {\n                newText2\n            }\n        } else {\n            text\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppm_qfx44.scala:32)\n\tat Problem.main(tmppm_qfx44.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 1) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    \")\n            val newText2 = newText.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    \")\n            val newText3 = newText2.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    \")\n            val newText4 = newText3.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    \")\n            val newText5 = newText4.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    \")\n            val newText6 = newText5.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    \")\n            val newText7 = newText6.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    \")\n            val newText8 = newText7.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    \")\n            val newText9 = newText8.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    \")\n            val newText10 = newText9.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    \")\n            val newText11 = newText10.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    \")\n            val newText12 = newText11.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    \")\n            val newText13 = newText12.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    \")\n            val newText14 = newText13.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    \")\n            val newText15 = newText14.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    \")\n            val newText16 = newText15.split(' ').map(_.toLowerCase).map(_.toString).map(_.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppkq9m84_.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmppkq9m84_.scala:44:0 ----------------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- Error: /tmp/tmppkq9m84_.scala:33:90 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e[36mnewText16\e[0m = newText15.split(\e\
    [31m' '\e[0m).map(_.toLowerCase).map(_.toString).map(_.\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \   No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m            \
    \                              where:    B is a type variable\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmppkq9m84_.scala:43:1 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmppkq9m84_.scala:35:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m35 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\"))\n            val spacedText = spacedText.mkString\n            spacedText\n\
    \        } else {\n            text\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq0rebzde.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mspacedText\e[0m = spacedText.mkString\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mspacedText is already defined as \e[33mvalue\e[0m \e[35mspacedText\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpq0rebzde.scala:20:12 --------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            spacedText\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (spacedText : Array[String])\n\e[31m\
    \   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800390
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\"))\n            spacedText.mkString(\" \")\n        } else {\n    \
    \        text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjrx9c0sq.scala:26)\n\tat Problem.main(tmpjrx9c0sq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else text.replace(\" \", \"_\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_wk2twag.scala:25)\n\tat Problem.main(tmp_wk2twag.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces == 2) text + \"_-\"\n        else text\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi5j_f5it.scala:24)\n\tat Problem.main(tmpi5j_f5it.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val spaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ', spaceIndex - 1)\n\
    \            val lastSpace = text.substring(lastSpaceIndex + 1, spaceIndex)\n\
    \            val firstSpace = text.substring(0, spaceIndex)\n            result\
    \ = firstSpace + lastSpace\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpixusk8_v.scala:29)\n\tat Problem.main(tmpixusk8_v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\"))\n            val consecutiveSpaces = spacedText.take(spacedText.length\
    \ - 2).zipWithIndex.filter(_._2 == 1).map(_._1).mkString(\"-\")\n            spacedText.take(spacedText.length\
    \ - 2).mkString(\" \") + consecutiveSpaces\n        } else {\n            text\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjpwkpkke.scala:27)\n\tat Problem.main(tmpjpwkpkke.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces > 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4_ow2ger.scala:24)\n\tat Problem.main(tmp4_ow2ger.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 1) {\n            val spacedText = text.split(' ').map(_.toLowerCase).map(s\
    \ => if (s == \" \") \"_\" else s)\n            val spacedText2 = spacedText.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText3 = spacedText2.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText4 = spacedText3.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText5 = spacedText4.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText6 = spacedText5.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText7 = spacedText6.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText8 = spacedText7.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText9 = spacedText8.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText10 = spacedText9.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText11 = spacedText10.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText12 = spacedText11.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText13 = spacedText12.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText14 = spacedText13.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText15 = spacedText14.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText16 = spacedText15.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText17 = spacedText16.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText18 = spacedText17.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText19 = spacedText18.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText20 = spacedText19.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText21 = spacedText20.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText22 = spacedText21.map(s\
    \ => if (s == \"\") \"\" else s)\n            val spacedText23 = spacedText22.map(s\
    \ => if (s == \"\") \"\" else s)\n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyh_iuirm.scala:52:0 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyh_iuirm.scala:51:1\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpyh_iuirm.scala:43:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m43 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659800398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var newText = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val newSpaces = text.count(_\
    \ == ' ')\n            val newText = text.split(\" \").map(x => if (x == \" \"\
    ) \"_\" else x).mkString\n        }\n        newText\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7k6ooks7.scala:26)\n\tat Problem.main(tmp7k6ooks7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString(\"\
    -\")\n            fixSpaces(newText)\n        } else {\n            text.split('\
    \ ').map(_.toLowerCase).map(_.toString).mkString(\"-\")\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplibyzjxp.scala:25)\n\tat Problem.main(tmplibyzjxp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800400
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\" \", \"_\"\
    )\n        val consecutiveSpaces = fixedText.count(_ == \" \")\n        if (consecutiveSpaces\
    \ > 2) {\n            val consecutiveSpacedText = fixedText.replaceAll(\"\\\\\
    s+\", \"-\")\n            consecutiveSpacedText\n        } else {\n          \
    \  fixedText\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpm787mdoo.scala:17:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mconsecutiveSpaces\e[0m =\
    \ fixedText.count(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 1) {\n            text\n        } else if (spaces == 2) {\n     \
    \       text.replaceAll(' ', '_')\n        } else {\n            text.replaceAll('\
    \ ', '-')\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprcyhm7f5.scala:20:28\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \   ^^^\e[0m\n\e[31m   |\e[0m                            Found:    (\e[31m' '\e\
    [0m : Char)\n\e[31m   |\e[0m                            Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprcyhm7f5.scala:20:33 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            text.replaceAll(\e[31m' '\e[0m, \e[31m'_'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                 ^^^\e[0m\n\e[31m \
    \  |\e[0m                                 Found:    (\e[31m'_'\e[0m : Char)\n\e\
    [31m   |\e[0m                                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprcyhm7f5.scala:22:28 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            text.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                            ^^^\e[0m\n\e[31m   |\e\
    [0m                            Found:    (\e[31m' '\e[0m : Char)\n\e[31m   |\e\
    [0m                            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprcyhm7f5.scala:22:33 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            text.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                 ^^^\e[0m\n\e[31m \
    \  |\e[0m                                 Found:    (\e[31m'-'\e[0m : Char)\n\e\
    [31m   |\e[0m                                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659800357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var newText = text\n        val spaceIndex =\
    \ newText.indexOf(\" \")\n        while (spaceIndex != -1) {\n            newText\
    \ = newText.substring(0, spaceIndex) + \"_\" + newText.substring(spaceIndex +\
    \ 1)\n            spaceIndex = newText.indexOf(\" \")\n        }\n        if (newText.length\
    \ > 2) {\n            newText = newText.substring(0, newText.length - 2)\n   \
    \     }\n        newText\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmplzaagp71.scala:20:23 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            spaceIndex = newText.indexOf(\e[31m\" \"\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Reassignment to val spaceIndex\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800385
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if(spaces\
    \ > 2) {\n            val newText = text.split(' ').map(x => if (x == \" \") \"\
    _\" else x).mkString\n            fixSpaces(newText)\n        } else {\n     \
    \       text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2lxdls7u.scala:26)\n\tat Problem.main(tmp2lxdls7u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val lastSpace = text.lastIndexOf(' ')\n        \
    \    val lastSpaceIndex = text.lastIndexOf(' ', lastSpace - 1)\n            val\
    \ newText = text.substring(0, lastSpaceIndex) + text.substring(lastSpaceIndex\
    \ + 1, lastSpaceIndex + 2)\n            fixSpaces(newText)\n        } else {\n\
    \            text\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpm5to87.scala:28)\n\tat Problem.main(tmpnpm5to87.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800399
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var lastSpace = text.lastIndexOf('\
    \ ')\n        var lastSpaceIndex = -1\n        var nextSpace = text.indexOf('\
    \ ', lastSpace + 1)\n        while (nextSpace != -1) {\n            if (lastSpaceIndex\
    \ == -1) {\n                lastSpaceIndex = nextSpace\n                result\
    \ += \"_\"\n            } else {\n                if (nextSpace - lastSpaceIndex\
    \ > 1) {\n                    result += \"-\"\n                }\n           \
    \     lastSpaceIndex = nextSpace\n            }\n            nextSpace = text.indexOf('\
    \ ', lastSpace + 1)\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcncn1be7.scala:36)\n\tat Problem.main(tmpcncn1be7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800399
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\")\n        val consecutiveSpaces = fixedText.count(_ == '_')\n        if\
    \ (consecutiveSpaces > 1) {\n            fixedText.replaceAll(\"_+\", \"_\")\n\
    \        } else {\n            fixedText\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzdw85nne.scala:27)\n\tat Problem.main(tmpzdw85nne.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800399
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            result = text.replaceAll(\"\\\
    \\s+\", \"-\")\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpll8i4hge.scala:25)\n\tat Problem.main(tmpll8i4hge.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800401
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            result = text.replaceAll(' ',\
    \ '-')\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmf6ri9sx.scala:19:37\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            result = text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'-'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \            ^^^\e[0m\n\e[31m   |\e[0m                                     Found:\
    \    (\e[31m' '\e[0m : Char)\n\e[31m   |\e[0m                                \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmf6ri9sx.scala:19:42\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            result = text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'-'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \                 ^^^\e[0m\n\e[31m   |\e[0m                                  \
    \        Found:    (\e[31m'-'\e[0m : Char)\n\e[31m   |\e[0m                  \
    \                        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 1) {\n            val lastSpace = text.lastIndexOf(' ')\n        \
    \    val firstSpace = text.indexOf(' ', lastSpace + 1)\n            val newText\
    \ = text.substring(0, firstSpace) + text.substring(lastSpace)\n            fixSpaces(newText)\n\
    \        } else {\n            text\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 14\n\
    \tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.fixSpaces(tmpvn0h6q6i.scala:20)\n\tat Problem$.main(tmpvn0h6q6i.scala:28)\n\
    \tat Problem.main(tmpvn0h6q6i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800401
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces == 2) text + \"_-\"\n        else text.replaceAll(' ', '_')\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwnep97er.scala:20:29\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \    ^^^\e[0m\n\e[31m   |\e[0m                             Found:    (\e[31m'\
    \ '\e[0m : Char)\n\e[31m   |\e[0m                             Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwnep97er.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \         ^^^\e[0m\n\e[31m   |\e[0m                                  Found:  \
    \  (\e[31m'_'\e[0m : Char)\n\e[31m   |\e[0m                                  Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\")\n        val consecutiveSpaces = fixedText.count(_ == '_')\n        if\
    \ (consecutiveSpaces > 1) {\n            val fixedTextWithConsecutiveSpaces =\
    \ fixedText.replaceAll(\"_+\", \"-\")\n            fixedTextWithConsecutiveSpaces.dropRight(1)\n\
    \        } else {\n            fixedText\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmyfm6r_k.scala:27)\n\tat Problem.main(tmpmyfm6r_k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800401
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if(spaces\
    \ > 2) {\n            val spaces = text.count(_ == ' ')\n            val result\
    \ = text.split(\" \").map(_.toLowerCase).map(_.toUpperCase).mkString(\"\")\n \
    \           val result = result.substring(0, result.length - spaces)\n       \
    \     val result = result.substring(0, result.length - spaces)\n            val\
    \ result = result.substring(0, result.length - spaces)\n            val result\
    \ = result.substring(0, result.length - spaces)\n            val result = result.substring(0,\
    \ result.length - spaces)\n            val result = result.substring(0, result.length\
    \ - spaces)\n            val result = result.substring(0, result.length - spaces)\n\
    \            val result = result.substring(0, result.length - spaces)\n      \
    \      val result = result.substring(0, result.length - spaces)\n            val\
    \ result = result.substring(0, result.length - spaces)\n            val result\
    \ = result.substring(0, result.length - spaces)\n            val result = result.substring(0,\
    \ result.length - spaces)\n            val result = result.substring(0, result.length\
    \ - spaces)\n            val result = result.substring(0, result.length - spaces)\n\
    \            val result = result.substring(0, result.length - spaces)\n      \
    \      val result = result.substring(0, result.length - spaces)\n            val\
    \ result = result.substring(0, result.length - spaces)\n            val result\
    \ = result.substring(0, result.length - spaces)\n            val result = result.substring(0,\
    \ result.length - spaces)\n            val result = result.substring(0, result.length\
    \ - spaces)\n            val result = result.substring(0, result.length - spaces)\n\
    \            val result = result.substring(0, result.length - spaces)\n      \
    \      val result = result.substring(0, result.length - spaces)\n            val\
    \ result = result.substring(0, result.length - spaces)\n            val result\
    \ = result.substring(0, result.length - spaces)\n            val result = result.substring(0,\
    \ result.length - spaces)\n            val result = result.substring(0, result.length\
    \ - spaces)\n            val result = result.substring(0, result.length - spaces)\n\
    \            val result = result.substring(0, result.length - spaces)\n      \
    \      val result = result.substring(0, result.length - spaces)\n            val\
    \ result = result.substring(0, result.length - spaces)\n            val result\
    \ = result.substring(0, result.length - spaces)\n            val result = result.substring(0,\
    \ result.length - spaces)\n            val result = result.substring(0, result.length\
    \ - spaces)\n            val result = result.substring(0, result.length - spaces)\n\
    \            val result = result.substring(0, result.length - spaces)\n      \
    \      val result = result.substring(0, result.length - spaces)\n            val\
    \ result = result.substring(0, result.length - spaces)\n            val result\
    \ = result.substring(0, result.length - spaces)\n            val result = result.substring(0,\
    \ result.length - spaces)\n            val result = result.substring(0, result.length\
    \ - spaces)\n            val result = result.substring(0, result.length - spaces)\n\
    \            val result = result.substring(0, result.length - spaces)\n      \
    \      val result = result.substring(0, result.length - spaces)\n            val\
    \ result = result.substring(0, result.length - spaces)\n            val result\
    \ = result.substring(0, result.length - spaces)\n            val result = result.substring(0,\
    \ result.length - \n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7cis31qg.scala:66:60 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m = result.substring(\e\
    [31m0\e[0m, result.length - \n\e[31m\e[31m   |\e[0m                          \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                    expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7cis31qg.scala:77:0 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7cis31qg.scala:20:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e\
    [0m \e[36mresult\e[0m = result.substring(\e[31m0\e[0m, result.length - spaces)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7cis31qg.scala:21:16 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m = result.substring(\e\
    [31m0\e[0m, result.length - spaces)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7cis31qg.scala:22:16 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m = result.substring(\e\
    [31m0\e[0m, result.length - spaces)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded me"
  stdout: ''
  timestamp: 1659800401
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces == 2) text + \"_-\"\n        else text.replaceAll(' ', '_')\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwnep97er.scala:20:29\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \    ^^^\e[0m\n\e[31m   |\e[0m                             Found:    (\e[31m'\
    \ '\e[0m : Char)\n\e[31m   |\e[0m                             Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwnep97er.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \         ^^^\e[0m\n\e[31m   |\e[0m                                  Found:  \
    \  (\e[31m'_'\e[0m : Char)\n\e[31m   |\e[0m                                  Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800354
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces == 2) text + \"-\"\n        else text.replaceAll(' ', '_')\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2dyi0hoz.scala:20:29\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \    ^^^\e[0m\n\e[31m   |\e[0m                             Found:    (\e[31m'\
    \ '\e[0m : Char)\n\e[31m   |\e[0m                             Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2dyi0hoz.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \         ^^^\e[0m\n\e[31m   |\e[0m                                  Found:  \
    \  (\e[31m'_'\e[0m : Char)\n\e[31m   |\e[0m                                  Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ text.take(spaces - 1).mkString + \"_\" + text.drop(spaces - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpulwru1cb.scala:23)\n\tat Problem.main(tmpulwru1cb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 1) {\n            val lastSpace = text.lastIndexOf('\
    \ ')\n            val firstSpace = text.indexOf(' ', lastSpace + 1)\n        \
    \    val lastSpaceIndex = text.lastIndexOf(' ')\n            val firstSpaceIndex\
    \ = text.indexOf(' ', lastSpaceIndex + 1)\n            val spaceIndex = text.indexOf('\
    \ ', lastSpaceIndex + 1)\n            val spaces = text.count(_ == ' ')\n    \
    \        val newText = text.substring(0, firstSpaceIndex) + text.substring(firstSpaceIndex\
    \ + 1, lastSpaceIndex) + text.substring(lastSpaceIndex + 1, spaceIndex)\n    \
    \        result = newText\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 14\n\
    \tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.fixSpaces(tmp1hlsb3jt.scala:25)\n\tat Problem$.main(tmp1hlsb3jt.scala:32)\n\
    \tat Problem.main(tmp1hlsb3jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 1) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText2 = newText.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText3 = newText2.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText4 = newText3.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText5 = newText4.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText6 = newText5.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText7 = newText6.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText8 = newText7.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText9 = newText8.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText10 = newText9.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText11 = newText10.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText12 = newText11.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText13 = newText12.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText14 = newText13.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText15 = newText14.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText16 = newText15.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText17 = newText16.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText18 = newText17.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText19 = newText18.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText20 = newText19.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    \")\n            val newText21 = newText20.split(' ').map(_.toLowerCase).map(_.toUpperCase).\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3raylhdk.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp3raylhdk.scala:49:0 ----------------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3raylhdk.scala:48:1 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp3raylhdk.scala:40:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m40 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800403
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces == 2) text + \"_-\"\n        else text.split(' ').map(_.toLowerCase).map(_.toString).mkString(\"\
    -\")\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9ek93ngn.scala:24)\n\tat Problem.main(tmp9ek93ngn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800404
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\")).mkString\n            val spacedText2 = spacedText.replaceAll(\"\
    \ \", \"-\")\n            spacedText2\n        } else {\n            text\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj_13mgf1.scala:27)\n\tat Problem.main(tmpj_13mgf1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800404
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val result = text.split(\" \").map(x => if (x == \" \") \"_\" else\
    \ x).mkString\n            if (consecutiveSpaces == 1) {\n                result\
    \ + \"-\"\n            } else {\n                result + \"_\"\n            }\n\
    \        } else {\n            text\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7pj4llsy.scala:31)\n\tat Problem.main(tmp7pj4llsy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800404
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\")).mkString\n            val consecutiveSpaces = text.count(_ == '\
    \ ')\n            if (consecutiveSpaces > 1) {\n                val consecutiveSpacedText\
    \ = text.split(\" \").map(x => x.replaceAll(\" \", \"-\")).mkString\n        \
    \        spacedText + \"-\" + consecutiveSpacedText\n            } else {\n  \
    \              spacedText\n            }\n        } else {\n            text\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgf2vxtw9.scala:32)\n\tat Problem.main(tmpgf2vxtw9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixed = text.replaceAll(\" \", \"_\")\n\
    \        fixed.length >= 2 && fixed.substring(fixed.length-2, fixed.length) ==\
    \ \"_\"\n            ? fixed.substring(0, fixed.length-2) + \"-\" + fixed.substring(fixed.length-2,\
    \ fixed.length)\n            : fixed\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfkkga26m.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            : fixed\n\e[31m\e[31m   |\e[0m          \
    \    ^^^^^\e[0m\n\e[31m   |\e[0m              Not found: type fixed\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfkkga26m.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        fixed.length >= \e[31m2\e[0m && fixed.substring(fixed.length-\e\
    [31m2\e[0m, fixed.length) == \e[31m\"_\"\e[0m\n\e[31m18 |\e[0m            ? fixed.substring(\e\
    [31m0\e[0m, fixed.length-\e[31m2\e[0m) + \e[31m\"-\"\e[0m + fixed.substring(fixed.length-\e\
    [31m2\e[0m, fixed.length)\n\e[31m\e[31m   |\e[0m                             \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \        value ? is not a member of String.\n\e[31m   |\e[0m            Note that\
    \ `?` is treated as an infix operator in Scala 3.\n\e[31m   |\e[0m           \
    \ If you do not want that, insert a `;` or empty line in front\n\e[31m   |\e[0m\
    \            or drop any spaces behind the operator.\n2 errors found\n"
  stdout: ''
  timestamp: 1659800402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString(\"\
    -\")\n            newText\n        } else {\n            text\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp276twc5x.scala:26)\n\tat Problem.main(tmp276twc5x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\" \", \"_\")\n\
    \        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"_\")\n      \
    \  if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    _\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp__6y_pbx.scala:26)\n\tat Problem.main(tmp__6y_pbx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString(\"\
    -\")\n            spacedText\n        } else {\n            text\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprl_h12x7.scala:26)\n\tat Problem.main(tmprl_h12x7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => if (x\
    \ == \" \") \"_\" else x).mkString\n            val consecutiveSpaces = spacedText.count(_\
    \ == \" \")\n            if (consecutiveSpaces > 1) {\n                val consecutiveSpacedText\
    \ = spacedText.drop(consecutiveSpaces - 1).mkString\n                spacedText\
    \ + consecutiveSpacedText\n            } else {\n                spacedText\n\
    \            }\n        } else {\n            text\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpj48l9wk6.scala:19:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mconsecutiveSpaces\e\
    [0m = spacedText.count(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Values of types Char and String cannot be compared with == or !=\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800405
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString(\"\
    -\")\n            fixSpaces(newText)\n        } else {\n            text\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z57pmhv.scala:26)\n\tat Problem.main(tmp8z57pmhv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800407
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ text.take(spaces - 1).mkString + \"_\" + text.drop(spaces - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpulwru1cb.scala:23)\n\tat Problem.main(tmpulwru1cb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val newText = text.split(\"\
    \ \").map(x => if (x == \" \") \"_\" else x).mkString\n            result = newText\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv7q1yeg2.scala:26)\n\tat Problem.main(tmpv7q1yeg2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800407
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        val fixedWords\
    \ = mutable.ListBuffer[String]()\n        val spaceCount = mutable.ListBuffer[Int]()\n\
    \        for (word <- words) {\n            if (word.equals(\" \")) {\n      \
    \          spaceCount += 1 \n            }\n            else {\n             \
    \   if (spaceCount.length >= 2) {\n                    fixedWords += \"_\"\n \
    \               }\n                fixedWords += word\n            }\n       \
    \ }\n        fixedWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6q2u51dz.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfixedWords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6q2u51dz.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mspaceCount\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800404
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if(spaces\
    \ == 0) text\n        else text.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    -\")\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbhwsg2su.scala:22)\n\tat Problem.main(tmpbhwsg2su.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800407
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        val fixedWords\
    \ = words.map(word => if (word.equals(\" \")) {\"_\"} else if (word.equals(\"\
    \ \")) {\"-\"} else word)\n        fixedWords.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn4t7yzbe.scala:22)\n\tat Problem.main(tmpn4t7yzbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800407
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString\n\
    \            val newText2 = newText.replaceAll(\"\\\\s+\", \"-\")\n          \
    \  val newText3 = newText2.replaceAll(\"\\\\s+\", \"-\")\n            newText3\n\
    \        } else {\n            text\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1jdetg_h.scala:28)\n\tat Problem.main(tmp1jdetg_h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800407
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else text.replace(\" \", \"_\") + \"-\" + text.replace(\" \", \"_\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf1scm80w.scala:23)\n\tat Problem.main(tmpf1scm80w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText2 = newText.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText3 = newText2.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText4 = newText3.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText5 = newText4.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText6 = newText5.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText7 = newText6.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText8 = newText7.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText9 = newText8.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText10 = newText9.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText11 = newText10.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText12 = newText11.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText13 = newText12.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText14 = newText13.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText15 = newText14.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText16 = newText15.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText17 = newText16.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText18 = newText17.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText19 = newText18.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText20 = newText19.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText21 = newText20.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText22 = newText21.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo347w15i.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo347w15i.scala:52:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpo347w15i.scala:51:1 ---------------------\e[0m\e[0m\n\
    \e[31m51 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpo347w15i.scala:43:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m43 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 1) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\"))\n            val consecutiveSpaces = text.count(_ == ' ')\n    \
    \        if (consecutiveSpaces > 1) {\n                val consecutiveSpacedText\
    \ = text.split(\" \").map(x => x.replaceAll(\" \", \"-\"))\n                spacedText.zip(consecutiveSpacedText).map(x\
    \ => x.mkString).mkString\n            } else {\n                spacedText.mkString\n\
    \            }\n        } else {\n            text\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0hi4j3vv.scala:22:65 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                spacedText.zip(consecutiveSpacedText).map(\e\
    [36mx\e[0m => x.mkString).mkString\n\e[31m\e[31m   |\e[0m                    \
    \                                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ mkString is not a member of (String, String) - did you mean x.toString?\n\e\
    [31m\e[31m-- Error: /tmp/tmp0hi4j3vv.scala:22:74 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                spacedText.zip(consecutiveSpacedText).map(\e\
    [36mx\e[0m => x.mkString).mkString\n\e[31m\e[31m   |\e[0m                    \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                          No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText2 = newText.replaceAll(\"\\\\s+\", \"-\")\n          \
    \  val newText3 = newText2.replaceAll(\"\\\\s+\", \"-\")\n            val newText4\
    \ = newText3.replaceAll(\"\\\\s+\", \"-\")\n            val newText5 = newText4.replaceAll(\"\
    \\\\s+\", \"-\")\n            val newText6 = newText5.replaceAll(\"\\\\s+\", \"\
    -\")\n            val newText7 = newText6.replaceAll(\"\\\\s+\", \"-\")\n    \
    \        val newText8 = newText7.replaceAll(\"\\\\s+\", \"-\")\n            val\
    \ newText9 = newText8.replaceAll(\"\\\\s+\", \"-\")\n            val newText10\
    \ = newText9.replaceAll(\"\\\\s+\", \"-\")\n            val newText11 = newText10.replaceAll(\"\
    \\\\s+\", \"-\")\n            val newText12 = newText11.replaceAll(\"\\\\s+\"\
    , \"-\")\n            val newText13 = newText12.replaceAll(\"\\\\s+\", \"-\")\n\
    \            val newText14 = newText13.replaceAll(\"\\\\s+\", \"-\")\n       \
    \     val newText15 = newText14.replaceAll(\"\\\\s+\", \"-\")\n            val\
    \ newText16 = newText15.replaceAll(\"\\\\s+\", \"-\")\n            val newText17\
    \ = newText16.replaceAll(\"\\\\s+\", \"-\")\n            val newText18 = newText17.replaceAll(\"\
    \\\\s+\", \"-\")\n            val newText19 = newText18.replaceAll(\"\\\\s+\"\
    , \"-\")\n            val newText20 = newText19.replaceAll(\"\\\\s+\", \"-\")\n\
    \            val newText21 = newText20.replaceAll(\"\\\\s+\", \"-\")\n       \
    \     val newText22 = newText21.replaceAll(\"\\\\s+\", \"-\")\n            val\
    \ newText23 = newText22.replaceAll(\"\\\\s+\", \"-\")\n            val newText24\
    \ = newText23.replaceAll(\"\\\\s+\", \"-\")\n            val newText25 = newText24.replaceAll(\"\
    \\\\s+\", \"-\")\n            val newText26 = newText25.replaceAll(\"\\\\s+\"\
    , \"-\")\n            val newText27 = newText26.replaceAll(\"\\\\s+\", \"-\")\n\
    \            val newText28 = newText27.replaceAll(\"\\\\s+\", \"-\")\n       \
    \     val newText29 = newText28.replaceAll(\"\\\\s+\", \"-\")\n            val\
    \ newText30 = newText29.replaceAll(\"\\\\s+\", \"-\")\n            val newText31\
    \ = newText30.replaceAll(\"\\\\s+\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpamqcopr4.scala:48:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            \e[33mval\e[0m \e[36mnewText31\e[0m = newText30.replaceAll(\"\
    \\\\s+\n\e[31m\e[31m   |\e[0m                                                \
    \ ^\e[0m\n\e[31m   |\e[0m                                                 unclosed\
    \ string literal\n\e[31m\e[31m-- Error: /tmp/tmpamqcopr4.scala:50:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpamqcopr4.scala:59:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m59 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpamqcopr4.scala:50:4 -------------------------\e[0m\e[0m\n\
    \e[31m50 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m\
    \    Not found: \\s+def\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800406
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\" \", \"_\")\n\
    \        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n      \
    \  if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk92be6s_.scala:28)\n\tat Problem.main(tmpk92be6s_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800407
