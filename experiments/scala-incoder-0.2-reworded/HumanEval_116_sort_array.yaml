name: HumanEval_116_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this Kata, you have to sort a list of non-negative integers according\
  \ to\n    // number of ones in their binary representation in ascending order.\n\
  \    // For similar number of ones, sort based on decimal value.\n    // It must\
  \ be implemented like this:\n    // >>> sortArray((List[Long](1l.toLong, 5l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong))\n    // >>> sortArray((List[Long](-2l.toLong, -3l.toLong,\
  \ -4l.toLong, -5l.toLong, -6l.toLong)))\n    // (List[Long](-6l.toLong, -5l.toLong,\
  \ -4l.toLong, -3l.toLong, -2l.toLong))\n    // >>> sortArray((List[Long](1l.toLong,\
  \ 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))\n    def sortArray(arr : List[Long]) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long](1l.toLong,\
  \ 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
  \ 4l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](-2l.toLong,\
  \ -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong))).equals((List[Long](-4l.toLong,\
  \ -2l.toLong, -6l.toLong, -5l.toLong, -3l.toLong))));\n    assert(sortArray((List[Long](1l.toLong,\
  \ 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](2l.toLong, 5l.toLong, 77l.toLong, 4l.toLong, 5l.toLong,\
  \ 3l.toLong, 5l.toLong, 7l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 4l.toLong, 4l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
  \ 7l.toLong, 77l.toLong))));\n    assert(sortArray((List[Long](3l.toLong, 6l.toLong,\
  \ 44l.toLong, 12l.toLong, 32l.toLong, 5l.toLong))).equals((List[Long](32l.toLong,\
  \ 3l.toLong, 5l.toLong, 6l.toLong, 12l.toLong, 44l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    }\n\n}\n"
completions: ["        val ones = arr.filter(x => x == 1).toList\n        val zeros\
    \ = arr.filter(x => x == 0).toList\n        val onesCount = ones.map(x => ones.count(_\
    \ == x)).sum\n        val zerosCount = zeros.map(x => zeros.count(_ == x)).sum\n\
    \        val onesDecimal = onesCount / arr.length\n        val zerosDecimal =\
    \ zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / zerosDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal / onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / zerosDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / onesDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal /\
    \ zerosDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zeros", "        val ones = arr.filter(x => x == 1).toList\n    \
    \    val zeros = arr.filter(x => x == 0).toList\n        val onesCount = ones.map(x\
    \ => 1l).sum\n        val zerosCount = zeros.map(x => 1l).sum\n        val onesDecimal\
    \ = ones.map(x => x.toString.toLong).sum\n        val zerosDecimal = zeros.map(x\
    \ => x.toString.toLong).sum\n        val onesDecimalDecimal = onesDecimal.toString.toLong\n\
    \        val zerosDecimalDecimal = zerosDecimal.toString.toLong\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal.toString.toLong\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal.toString.toLong\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal.toString.toLong\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal.toString.toLong\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal.toString.toLong\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal.toString.toLong\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal.toString.toLong\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal.toString.toLong\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal.toString.toLong\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toString.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal.toString.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toString.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toString.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toString.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.to",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArr = arr.filter(_ == 1).sortBy(_.toString.toInt)\n        val\
    \ zerosArr = arr.filter(_ == 0).sortBy(_.toString.toInt)\n        val onesCount\
    \ = onesArr.size\n        val zerosCount = zerosArr.size\n        if (onesCount\
    \ > zerosCount) {\n            onesArr\n        } else if (zerosCount > onesCount)\
    \ {\n            zerosArr\n        } else {\n            onesArr.zip(zerosArr).sortBy(_._1).map(_._2)\n\
    \        }", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = arr.count(_ == 1).map(_.toString.toInt)\n \
    \       val zerosDecimal = arr.count(_ == 0).map(_.toString.toInt)\n        val\
    \ onesDecimalCount = arr.count(_ == 1).map(_.toString.toInt)\n        val zerosDecimalCount\
    \ = arr.count(_ == 0).map(_.toString.toInt)\n        val onesDecimalCount = arr.count(_\
    \ == 1).map(_.toString.toInt)\n        val zerosDecimalCount = arr.count(_ ==\
    \ 0).map(_.toString.toInt)\n        val onesDecimalCount = arr.count(_ == 1).map(_.toString.toInt)\n\
    \        val zerosDecimalCount = arr.count(_ == 0).map(_.toString.toInt)\n   \
    \     val onesDecimalCount = arr.count(_ == 1).map(_.toString.toInt)\n       \
    \ val zerosDecimalCount = arr.count(_ == 0).map(_.toString.toInt)\n        val\
    \ onesDecimalCount = arr.count(_ == 1).map(_.toString.toInt)\n        val zerosDecimalCount\
    \ = arr.count(_ == 0).map(_.toString.toInt)\n        val onesDecimalCount = arr.count(_\
    \ == 1).map(_.toString.toInt)\n        val zerosDecimalCount = arr.count(_ ==\
    \ 0).map(_.toString.toInt)\n        val onesDecimalCount = arr.count(_ == 1).map(_.toString.toInt)\n\
    \        val zerosDecimalCount = arr.count(_ == 0).map(_.toString.toInt)\n   \
    \     val onesDecimalCount = arr.count(_ == 1).map(_.toString.toInt)\n       \
    \ val zerosDecimalCount = arr.count(_ == 0).map(_.toString.toInt)\n        val\
    \ onesDecimalCount = arr.count(_ == 1).map(_.toString.toInt)\n        val zerosDecimalCount\
    \ = arr.count(_ == 0).map(_.toString.toInt)\n        val onesDecimalCount = arr.count(_\
    \ == 1).map(_.toString.toInt)\n        val zerosDecimalCount = arr.count(_ ==\
    \ 0).map(_.toString.toInt)\n        val onesDecimalCount = arr.count(_ == 1).map(_.toString.toInt)\n\
    \        val zerosDecimalCount = arr.count(_ == 0).map(_.toString.toInt)\n   \
    \     val onesDecimalCount = arr.count(_ == 1).map(_.toString.toInt)\n       \
    \ val zerosDecimalCount = arr.count(_", "        val ones = arr.count(_ == 1)\n\
    \        val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_ ==\
    \ 1)\n        val zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount\
    \ / arr.length\n        val zerosDecimal = zerosCount / arr.length\n        val\
    \ onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        ", "        val ones = arr.count(_ == 1)\n        val\
    \ zeros = arr.count(_ == 0)\n        val onesZeros = ones + zeros\n        val\
    \ onesZerosList = onesZeros :: arr.filter(_ != 0).toList\n        val onesZerosListSorted\
    \ = onesZerosList.toList.sortBy(_ / onesZeros)\n        val onesZerosListSortedReversed\
    \ = onesZerosListSorted.reverse\n        val onesZerosListSortedReversedSorted\
    \ = onesZerosListSortedReversed.sortBy(_ / onesZeros)\n        val onesZerosListSortedReversedSortedReversed\
    \ = onesZerosListSortedReversedSorted.reverse\n        val onesZerosListSortedReversedSortedReversedSorted\
    \ = onesZerosListSortedReversedSortedReversed.sortBy(_ / onesZeros)\n        val\
    \ onesZerosListSortedReversedSortedReversedSortedReversed = onesZerosListSortedReversedSortedReversedSorted.reverse\n\
    \        val onesZerosListSortedReversedSortedReversedSortedReversedSorted = onesZerosListSortedReversedSortedReversedSortedReversedSorted.sortBy(_\
    \ / onesZeros)\n        val onesZerosListSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = onesZerosListSortedReversedSortedReversedSortedReversedSorted.reverse\n  \
    \      val onesZerosListSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = onesZerosListSortedReversedSortedReversedSortedReversedSortedReversed.sortBy(_\
    \ / onesZeros)\n        val onesZerosListSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = onesZerosListSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSorted.reverse\n\
    \        val onesZerosListSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = onesZerosListSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed.sortBy(_\
    \ / onesZeros)\n        val onesZerosListSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = onesZerosListSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed.sortBy(_\
    \ / onesZeros)\n        val onesZerosListSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = onesZerosListSortedReversedSortedReversedSorted", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_\
    \ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val onesDecimal =\
    \ onesCount / arr.length\n        val zerosDecimal = zerosCount / arr.length\n\
    \        val onesDecimalDecimal = onesDecimal + zerosDecimal\n        val zerosDecimalDecimal\
    \ = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal.toDouble\
    \ / Math.pow(10, onesDecimalDecimal)\n        val zerosDecimalDecimalDecimal =\
    \ zerosDecimalDecimal.toDouble / Math.pow(10, zerosDecimalDecimal)\n        val\
    \ onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, onesDecimalDecimalDecimal)\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal.toDouble / Math.pow(10, zerosDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, onesDecimalDecimalDecimalDecimal)\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal.toDouble / Math.pow(10, zerosDecimalDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, onesDecimalDecimalDecimalDecimalDecimal)\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal.toDouble / Math.pow(10, zerosDecimalDecimalDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, onesDecimalDecimalDecimalDecimalDecimalDecimal)\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, zerosDecimalDecimalDecimalDecimalDecimalDecimal)\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n   \
    \     val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, onesDecimalDecimalDecimalDecimalDecimal", "        val ones =\
    \ arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount\
    \ = arr.count(_ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val\
    \ onesDecimal = onesCount / arr.length\n        val zerosDecimal = zerosCount\
    \ / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n   \
    \     val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal ",
  "        val ones = arr.filter(_ % 2 == 0).toList\n        val zeros = arr.filter(_\
    \ % 2 == 1).toList\n        val onesCount = ones.map(_.toLong).count(_ == 1)\n\
    \        val zerosCount = zeros.map(_.toLong).count(_ == 0)\n        val onesDecimal\
    \ = ones.map(_.toLong).map(_.toString.toDouble).sum\n        val zerosDecimal\
    \ = zeros.map(_.toLong).map(_.toString.toDouble).sum\n        val onesDecimalCount\
    \ = ones.map(_.toLong).map(_.toString.toDouble).count(_ == 1)\n        val zerosDecimalCount\
    \ = zeros.map(_.toLong).map(_.toString.toDouble).count(_ == 0)\n        val onesDecimalCount\
    \ = ones.map(_.toLong).map(_.toString.toDouble).count(_ == 1)\n        val zerosDecimalCount\
    \ = zeros.map(_.toLong).map(_.toString.toDouble).count(_ == 0)\n        val onesDecimalCount\
    \ = ones.map(_.toLong).map(_.toString.toDouble).count(_ == 1)\n        val zerosDecimalCount\
    \ = zeros.map(_.toLong).map(_.toString.toDouble).count(_ == 0)\n        val onesDecimalCount\
    \ = ones.map(_.toLong).map(_.toString.toDouble).count(_ == 1)\n        val zerosDecimalCount\
    \ = zeros.map(_.toLong).map(_.toString.toDouble).count(_ == 0)\n        val onesDecimalCount\
    \ = ones.map(_.toLong).map(_.toString.toDouble).count(_ == 1)\n        val zerosDecimalCount\
    \ = zeros.map(_.toLong).map(_.toString.toDouble).count(_ == 0)\n        val onesDecimalCount\
    \ = ones.map(_.toLong).map(_.toString.toDouble).count(_ == 1)\n        val zerosDecimalCount\
    \ = zeros.map(_.toLong).map(_.toString.toDouble).count(_ == 0)\n        val onesDecimalCount\
    \ = ones.map(_.toLong).map(_.toString.toDouble).count(_ == 1)\n        val zerosDecimalCount\
    \ = zeros.map(_.toLong).map(_.toString.toDouble).count(_ == 0)\n        val onesDecimalCount\
    \ = ones.map(_.toLong).map(_.toString.toDouble).count(_ == 1)\n        val zerosDecimalCount\
    \ = zeros.map(_.toLong).map(_.toString.toDouble).count(_ == 0)\n        val onesDecimalCount\
    \ = ones.map(_.toLong).map(_.toString.toDouble).count(_ == 1)\n        val zerosDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArray = arr.map(x => if (x == 1) 1 else 0)\n        val zerosArray\
    \ = arr.map(x => if (x == 0) 0 else 1)\n        val onesArraySorted = onesArray.sortWith(_\
    \ < _)\n        val zerosArraySorted = zerosArray.sortWith(_ < _)\n        val\
    \ sortedArray = onesArraySorted.zip(zerosArraySorted).sortWith(_._1 < _._1)\n\
    \        sortedArray.map(x => x._2).reverse", "        val ones = arr.filter(_\
    \ % 2 == 0).toList\n        val zeros = arr.filter(_ % 2 == 1).toList\n      \
    \  val onesCount = ones.map(x => 1l).sum\n        val zerosCount = zeros.map(x\
    \ => 0l).sum\n        val onesDecimal = onesCount / 2\n        val zerosDecimal\
    \ = zerosCount / 2\n        val onesDecimalDecimal = onesDecimal / 2\n       \
    \ val zerosDecimalDecimal = zerosDecimal / 2\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / 2\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 2\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 2\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = ", "        val ones = arr.filter(x => x == 1l.toLong).length\n        val\
    \ zeros = arr.filter(x => x == 0l.toLong).length\n        val onesZeros = ones\
    \ + zeros\n        val onesZeroArray = Array.ofDim[Long](onesZeros)\n        val\
    \ onesZeroArrayCopy = onesZeroArray.clone()\n        val onesZeroArrayCopySorted\
    \ = onesZeroArrayCopy.sortWith(_ < _)\n        val onesZeroArraySortedCopy = onesZeroArrayCopySorted.clone()\n\
    \        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySortedCopy = onesZeroArraySortedCopySorted.clone()\n\
    \        val onesZeroArraySortedCopySortedCopy = onesZeroArraySortedCopySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySortedCopySorted = onesZeroArraySortedCopySortedCopySorted.clone()\n\
    \        val onesZeroArraySortedCopySortedCopySorted = onesZeroArraySortedCopySortedCopySorted.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySortedCopySorted = onesZeroArraySortedCopySortedCopySorted.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySortedCopySorted = onesZeroArraySortedCopySortedCopySorted.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySortedCopySorted = onesZeroArraySortedCopySortedCopySorted.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySortedCopySorted = onesZeroArraySortedCopySortedCopySorted.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySortedCopySorted = onesZeroArraySortedCopySortedCopySorted.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySortedCopySorted = onesZeroArraySortedCopySortedCopySorted.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySortedCopySorted = onesZeroArraySortedCopySortedCopySorted.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySortedCopySorted = onesZeroArraySortedCopySortedCopySorted.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySortedCopySorted = onesZeroArraySortedCopySortedCopySorted.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySortedCopySorted = ", "        val\
    \ ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val\
    \ onesArr = arr.filter(_ == 1).sortBy(_.toString.toInt)\n        val zerosArr\
    \ = arr.filter(_ == 0).sortBy(_.toString.toInt)\n        val onesZeros = ones\
    \ + zeros\n        val onesZeroArr = onesZeros.map(x => x -> 1).toMap\n      \
    \  val zerosArr = zerosArr.map(x => x -> 0).toMap\n        val onesZeroArr = onesZeros.map(x\
    \ => x -> 1).toMap\n        val onesZeroArr = onesZeros.map(x => x -> 1).toMap\n\
    \        val onesZeroArr = onesZeros.map(x => x -> 1).toMap\n        val onesZeroArr\
    \ = onesZeros.map(x => x -> 1).toMap\n        val onesZeroArr = onesZeros.map(x\
    \ => x -> 1).toMap\n        val onesZeroArr = onesZeros.map(x => x -> 1).toMap\n\
    \        val onesZeroArr = onesZeros.map(x => x -> 1).toMap\n        val onesZeroArr\
    \ = onesZeros.map(x => x -> 1).toMap\n        val onesZeroArr = onesZeros.map(x\
    \ => x -> 1).toMap\n        val onesZeroArr = onesZeros.map(x => x -> 1).toMap\n\
    \        val onesZeroArr = onesZeros.map(x => x -> 1).toMap\n        val onesZeroArr\
    \ = onesZeros.map(x => x -> 1).toMap\n        val onesZeroArr = onesZeros.map(x\
    \ => x -> 1).toMap\n        val onesZeroArr = onesZeros.map(x => x -> 1).toMap\n\
    \        val onesZeroArr = onesZeros.map(x => x -> 1).toMap\n        val onesZeroArr\
    \ = onesZeros.map(x => x -> 1).toMap\n        val onesZeroArr = onesZeros.map(x\
    \ => x -> 1).toMap\n        val onesZeroArr = onesZeros.map(x => x -> 1).toMap\n\
    \        val onesZeroArr = onesZeros.map(x => x -> 1).toMap\n        val onesZeroAr",
  "        val ones = arr.filter(_ == 1l.toLong)\n        val zeros = arr.filter(_\
    \ == 0l.toLong)\n        val onesCount = ones.count()\n        val zerosCount\
    \ = zeros.count()\n        val onesDecimal = onesCount.toDouble / arr.size\n \
    \       val zerosDecimal = zerosCount.toDouble / arr.size\n        val onesDecimalInt\
    \ = onesDecimal.toInt\n        val zerosDecimalInt = zerosDecimal.toInt\n    \
    \    val onesDecimalInt = onesDecimalInt.toLong\n        val zerosDecimalInt =\
    \ zerosDecimalInt.toLong\n        val onesDecimalInt = onesDecimalInt.toLong\n\
    \        val zerosDecimalInt = zerosDecimalInt.toLong\n        val onesDecimalInt\
    \ = onesDecimalInt.toLong\n        val zerosDecimalInt = zerosDecimalInt.toLong\n\
    \        val onesDecimalInt = onesDecimalInt.toLong\n        val zerosDecimalInt\
    \ = zerosDecimalInt.toLong\n        val onesDecimalInt = onesDecimalInt.toLong\n\
    \        val zerosDecimalInt = zerosDecimalInt.toLong\n        val onesDecimalInt\
    \ = onesDecimalInt.toLong\n        val zerosDecimalInt = zerosDecimalInt.toLong\n\
    \        val onesDecimalInt = onesDecimalInt.toLong\n        val zerosDecimalInt\
    \ = zerosDecimalInt.toLong\n        val onesDecimalInt = onesDecimalInt.toLong\n\
    \        val zerosDecimalInt = zerosDecimalInt.toLong\n        val onesDecimalInt\
    \ = onesDecimalInt.toLong\n        val zerosDecimalInt = zerosDecimalInt.toLong\n\
    \        val onesDecimalInt = onesDecimalInt.toLong\n        val zerosDecimalInt\
    \ = zerosDecimalInt.toLong\n        val onesDecimalInt = onesDecimalInt.toLong\n\
    \        val zerosDecimalInt = zerosDecimalInt.toLong\n        val onesDecimalInt\
    \ = onesDecimalInt.toLong\n        val zerosDecimalInt = zerosDecimalInt.toLong\n\
    \        val onesDecimalInt = onesDecimalInt.toLong\n        val zerosDecimalInt\
    \ = zerosDecimalInt.toLong\n        val onesDecimalInt = onesDecimalInt.toLong\n\
    \        val zerosDecimalInt = zerosDecimalInt.toLong\n        val onesDecimalInt\
    \ = onesDecimalInt.toLong\n        val zerosDecimalInt = ", "        val ones\
    \ = arr.filter(x => x == 1l.toLong)\n        val zeros = arr.filter(x => x ==\
    \ 0l.toLong)\n        val onesCount = ones.count(_ == 1l.toLong)\n        val\
    \ zerosCount = zeros.count(_ == 0l.toLong)\n        val onesDecimal = onesCount\
    \ / arr.length\n        val zerosDecimal = zerosCount / arr.length\n        val\
    \ onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = one", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesZeros = ones + zeros\n        val onesZeros_sorted =\
    \ arr.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted2 = onesZeros_sorted.sortBy(x\
    \ => (ones - x))\n        val onesZeros_sorted3 = onesZeros_sorted2.sortBy(x =>\
    \ (zeros - x))\n        val onesZeros_sorted4 = onesZeros_sorted3.sortBy(x =>\
    \ (ones - x))\n        onesZeros_sorted4", "        val ones = arr.filter(_ ==\
    \ 1).toList\n        val zeros = arr.filter(_ == 0).toList\n        val onesCount\
    \ = ones.map(x => 1l).sum\n        val zerosCount = zeros.map(x => 0l).sum\n \
    \       val onesZeros = ones.zip(zeros)\n        val onesZeroCount = onesZeros.map(x\
    \ => 1l).sum\n        val onesZeroZeros = onesZeros.zip(zeros)\n        val onesZeroZeroCount\
    \ = onesZeroZeros.map(x => 1l).sum\n        val onesZeroZeroZeros = onesZeroZeros.zip(zeros)\n\
    \        val onesZeroZeroZeroCount = onesZeroZeroZeros.map(x => 1l).sum\n    \
    \    val onesZeroZeroZeroZeros = onesZeroZeroZeros.zip(zeros)\n        val onesZeroZeroZeroZeroCount\
    \ = onesZeroZeroZeroZeros.map(x => 1l).sum\n        val onesZeroZeroZeroZeroZeros\
    \ = onesZeroZeroZeroZeros.zip(zeros)\n        val onesZeroZeroZeroZeroZeroCount\
    \ = onesZeroZeroZeroZeroZeros.map(x => 1l).sum\n        val onesZeroZeroZeroZeroZeros\
    \ = onesZeroZeroZeroZeroZeros.zip(zeros)\n        val onesZeroZeroZeroZeroZeroCount\
    \ = onesZeroZeroZeroZeroZeros.map(x => 1l).sum\n        val onesZeroZeroZeroZeroZeros\
    \ = onesZeroZeroZeroZeroZeros.zip(zeros)\n        val onesZeroZeroZeroZeroZeroCount\
    \ = onesZeroZeroZeroZeroZeros.map(x => 1l).sum\n        val onesZeroZeroZeroZeroZeroZeros\
    \ = onesZeroZeroZeroZeroZeros.zip(zeros)\n        val onesZeroZeroZeroZeroZeroCount\
    \ = onesZeroZeroZeroZeroZeros.map(x => 1l).sum\n        val onesZeroZeroZeroZeroZeroZeros\
    \ = onesZeroZeroZeroZeroZeros.zip(zeros)\n        val onesZeroZeroZeroZeroZeroZeroCount\
    \ = onesZeroZeroZeroZeroZeros.map(x => 1l).sum\n        val onesZeroZeroZeroZeroZeroZeros\
    \ = onesZeroZeroZeroZeroZeros.zip(zeros)\n        val onesZeroZeroZeroZeroZeroZeroCount\
    \ = onesZeroZeroZeroZeroZeros.map(x => 1l).sum\n        val ones", "        val\
    \ ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val\
    \ onesZeros = ones + zeros\n        val onesZeros = onesZeros % 2\n        val\
    \ onesZeros = onesZeros >> 1\n        val onesZeros = onesZeros >> 1\n       \
    \ val onesZeros = onesZeros >> 1\n        val onesZeros = onesZeros >> 1\n   \
    \     val onesZeros = onesZeros >> 1\n        val onesZeros = onesZeros >> 1\n\
    \        val onesZeros = onesZeros >> 1\n        val onesZeros = onesZeros >>\
    \ 1\n        val onesZeros = onesZeros >> 1\n        val onesZeros = onesZeros\
    \ >> 1\n        val onesZeros = onesZeros >> 1\n        val onesZeros = onesZeros\
    \ >> 1\n        val onesZeros = onesZeros >> 1\n        val onesZeros = onesZeros\
    \ >> 1\n        val onesZeros = onesZeros >> 1\n        val onesZeros = onesZeros\
    \ >> 1\n        val onesZeros = onesZeros >> 1\n        val onesZeros = onesZeros\
    \ >> 1\n        val onesZeros = onesZeros >> 1\n        val onesZeros = onesZeros\
    \ >> 1\n        val onesZeros = onesZeros >> 1\n        val onesZeros = onesZeros\
    \ >> 1\n        val onesZeros = onesZeros >> 1\n        val onesZeros = onesZeros\
    \ >> 1\n        val onesZeros = onesZeros >> 1\n        val onesZeros = onesZeros\
    \ >> 1\n        val onesZeros = onesZeros >> 1\n        val onesZeros = onesZeros\
    \ >> 1\n        val onesZeros = onesZeros >> 1\n        val onesZeros = onesZeros\
    \ >> 1\n        val onesZeros = onesZeros >> 1\n        val onesZeros = onesZeros\
    \ >> 1\n        val onesZeros = onesZeros >> 1\n        val onesZeros = onesZeros\
    \ >> 1\n        val onesZeros = onesZeros >> 1\n        val onesZeros = onesZeros\
    \ >> 1\n        ", "        val ones = arr.filter(_ == 1).toList\n        val\
    \ zeros = arr.filter(_ == 0).toList\n        val onesCount = ones.count\n    \
    \    val zerosCount = zeros.count\n        val onesDecimal = ones.map(_.toString.toDouble).sum\n\
    \        val zerosDecimal = zeros.map(_.toString.toDouble).sum\n        val onesDecimalDiff\
    \ = onesDecimal - zerosDecimal\n        val zerosDecimalDiff = zerosDecimal -\
    \ onesDecimal\n        val onesDecimalDiffInt = onesDecimalDiff.toInt\n      \
    \  val zerosDecimalDiffInt = zerosDecimalDiff.toInt\n        val onesDecimalDiffInt\
    \ = onesDecimalDiffInt\n        val zerosDecimalDiffInt = zerosDecimalDiffInt\n\
    \        val onesDecimalDiffInt = onesDecimalDiffInt\n        val zerosDecimalDiffInt\
    \ = zerosDecimalDiffInt\n        val onesDecimalDiffInt = onesDecimalDiffInt\n\
    \        val zerosDecimalDiffInt = zerosDecimalDiffInt\n        val onesDecimalDiffInt\
    \ = onesDecimalDiffInt\n        val zerosDecimalDiffInt = zerosDecimalDiffInt\n\
    \        val onesDecimalDiffInt = onesDecimalDiffInt\n        val zerosDecimalDiffInt\
    \ = zerosDecimalDiffInt\n        val onesDecimalDiffInt = onesDecimalDiffInt\n\
    \        val zerosDecimalDiffInt = zerosDecimalDiffInt\n        val onesDecimalDiffInt\
    \ = onesDecimalDiffInt\n        val zerosDecimalDiffInt = zerosDecimalDiffInt\n\
    \        val onesDecimalDiffInt = onesDecimalDiffInt\n        val zerosDecimalDiffInt\
    \ = zerosDecimalDiffInt\n        val onesDecimalDiffInt = onesDecimalDiffInt\n\
    \        val zerosDecimalDiffInt = zerosDecimalDiffInt\n        val onesDecimalDiffInt\
    \ = onesDecimalDiffInt\n        val zerosDecimalDiffInt = zerosDecimalDiffInt\n\
    \        val onesDecimalDiffInt = onesDecimalDiffInt\n        val zerosDecimalDiffInt\
    \ = zerosDecimalDiffInt\n        val onesDecimalDiffInt = onesDecimalDiffInt\n\
    \        val zerosDecimalDiffInt = zerosDecimalDiffInt\n        val onesDecimalDiffInt\
    \ = onesDecimalDiffInt\n        val zerosDecimalDiffInt = zerosDecimalDiffInt\n\
    \        val onesDecimalDiffInt = onesDecimalDiffInt\n        val zerosDecimalDiffInt\
    \ = zerosDecimalDiffInt\n        val onesDecimalDiffInt = onesDecimalDiffInt\n\
    \        val ", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / ones\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimal", "        val ones = arr.count(x => x == 1l)\n        val zeros\
    \ = arr.count(x => x == 0l)\n        val onesZeros = ones + zeros\n        val\
    \ onesZeros_sorted = arr.sortBy(x => (onesZeros - x).toInt)\n        val onesZeros_sorted_reversed\
    \ = onesZeros_sorted.reverse\n        val onesZeros_sorted_reversed_sorted = onesZeros_sorted_reversed.sortBy(x\
    \ => (onesZeros - x).toInt)\n        val onesZeros_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted.reverse\n        val onesZeros_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed.sortBy(x => (onesZeros - x).toInt)\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed = onesZeros_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x => (onesZeros\
    \ - x).toInt)\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x\
    \ => (onesZeros - x).toInt)\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x\
    \ => (onesZeros - x).toInt)\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sor",
  '        arr.sortWith(compare)', "        val ones = arr.count(_ == 1)\n       \
    \ val zeros = arr.count(_ == 0)\n        val onesZeros = ones + zeros\n      \
    \  val onesZeros_sorted = arr.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted2\
    \ = onesZeros_sorted.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted3\
    \ = onesZeros_sorted.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted4\
    \ = onesZeros_sorted.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted5\
    \ = onesZeros_sorted.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted6\
    \ = onesZeros_sorted.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted7\
    \ = onesZeros_sorted.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted8\
    \ = onesZeros_sorted.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted9\
    \ = onesZeros_sorted.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted10\
    \ = onesZeros_sorted.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted11\
    \ = onesZeros_sorted.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted12\
    \ = onesZeros_sorted.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted13\
    \ = onesZeros_sorted.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted14\
    \ = onesZeros_sorted.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted15\
    \ = onesZeros_sorted.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted16\
    \ = onesZeros_sorted.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted17\
    \ = onesZeros_sorted.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted18\
    \ = onesZeros_sorted.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted19\
    \ = onesZeros_sorted.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted20\
    \ = onesZeros_sorted.sortBy(x => (onesZeros - x))", "        val ones = arr.filter(x\
    \ => x == 1l.toLong).length\n        val zeros = arr.filter(x => x == 0l.toLong).length\n\
    \        val onesZeros = ones + zeros\n        val onesZerosList = onesZeros ::\
    \ arr.filterNot(x => x == 0l.toLong)\n        val onesZerosListLength = onesZerosList.length\n\
    \        val onesZerosListLength = onesZerosListLength - 1\n        val onesZerosListLength\
    \ = onesZerosListLength - 1\n        val onesZerosListLength = onesZerosListLength\
    \ - 1\n        val onesZerosListLength = onesZerosListLength - 1\n        val\
    \ onesZerosListLength = onesZerosListLength - 1\n        val onesZerosListLength\
    \ = onesZerosListLength - 1\n        val onesZerosListLength = onesZerosListLength\
    \ - 1\n        val onesZerosListLength = onesZerosListLength - 1\n        val\
    \ onesZerosListLength = onesZerosListLength - 1\n        val onesZerosListLength\
    \ = onesZerosListLength - 1\n        val onesZerosListLength = onesZerosListLength\
    \ - 1\n        val onesZerosListLength = onesZerosListLength - 1\n        val\
    \ onesZerosListLength = onesZerosListLength - 1\n        val onesZerosListLength\
    \ = onesZerosListLength - 1\n        val onesZerosListLength = onesZerosListLength\
    \ - 1\n        val onesZerosListLength = onesZerosListLength - 1\n        val\
    \ onesZerosListLength = onesZerosListLength - 1\n        val onesZerosListLength\
    \ = onesZerosListLength - 1\n        val onesZerosListLength = onesZerosListLength\
    \ - 1\n        val onesZerosListLength = onesZerosListLength - 1\n        val\
    \ onesZerosListLength = onesZerosListLength - 1\n        val onesZerosListLength\
    \ = onesZerosListLength - 1\n        val onesZerosListLength = onesZerosListLength\
    \ - 1\n        val onesZerosListLength = onesZerosListLength - 1\n        val\
    \ onesZerosListLength = onesZerosListLength - 1\n        val onesZerosListLength\
    \ = onesZerosListLength - 1\n        val onesZerosListLength = onesZerosListLength\
    \ - 1\n        val onesZerosListLength = onesZerosListLength - 1\n        val\
    \ onesZerosListLength = onesZerosListLength - 1\n        val onesZerosListLength\
    \ = onesZerosListLength - 1\n        val onesZerosListLength = onesZerosListLength",
  "        val ones = arr.filter(_ % 2 == 0).length\n        val zeros = arr.filter(_\
    \ % 2 == 1).length\n        val onesArr = arr.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n\
    \        val zerosArr = arr.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n       \
    \ val onesArr2 = onesArr.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n        val\
    \ zerosArr2 = zerosArr.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n        val onesArr3\
    \ = onesArr2.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n        val zerosArr3 =\
    \ zerosArr2.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n        val onesArr4 = onesArr3.filter(_\
    \ % 2 == 0).sortBy(_ % 2).reverse\n        val zerosArr4 = zerosArr3.filter(_\
    \ % 2 == 1).sortBy(_ % 2).reverse\n        val onesArr5 = onesArr4.filter(_ %\
    \ 2 == 0).sortBy(_ % 2).reverse\n        val zerosArr5 = zerosArr4.filter(_ %\
    \ 2 == 1).sortBy(_ % 2).reverse\n        val onesArr6 = onesArr5.filter(_ % 2\
    \ == 0).sortBy(_ % 2).reverse\n        val zerosArr6 = zerosArr5.filter(_ % 2\
    \ == 1).sortBy(_ % 2).reverse\n        val onesArr7 = onesArr6.filter(_ % 2 ==\
    \ 0).sortBy(_ % 2).reverse\n        val zerosArr7 = zerosArr6.filter(_ % 2 ==\
    \ 1).sortBy(_ % 2).reverse\n        val onesArr8 = onesArr7.filter(_ % 2 == 0).sortBy(_\
    \ % 2).reverse\n        val zerosArr8 = zerosArr7.filter(_ % 2 == 1).sortBy(_\
    \ % 2).reverse\n        val onesArr9 = onesArr8.filter(_ % 2 == 0).sortBy(_ %\
    \ 2).reverse\n        val zerosArr9 = zerosArr8.filter(_ % 2 == 1).sortBy(_ %\
    \ 2).reverse\n        val onesArr10 = onesArr9.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n\
    \        val zerosArr10 = zerosArr9.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n\
    \        val onesArr11 = onesArr10.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n\
    \        val zerosArr11 = zerosArr10.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n\
    \        val onesArr12 = onesArr11.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n\
    \        val zerosArr12 = zerosArr11.filter", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesArr = arr.filter(_\
    \ == 1).sortBy(_.toString.toInt)\n        val zerosArr = arr.filter(_ == 0).sortBy(_.toString.toInt)\n\
    \        val onesZeros = ones + zeros\n        val onesZeroArr = onesZeros.toList.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr2 = onesZeros.toList.sortBy(_.toString.toInt).reverse\n\
    \        val onesZeroArr3 = onesZeros.toList.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr4 = onesZeros.toList.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse\n\
    \        val onesZeroArr5 = onesZeros.toList.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr6 = onesZeros.toList.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse\n\
    \        val onesZeroArr7 = onesZeros.toList.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr8 = onesZeros.toList.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr9 = onesZeros.toList.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr10 = onesZeros.toList.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse",
  "        val ones = arr.filter(_ % 2 == 0).length\n        val zeros = arr.filter(_\
    \ % 2 == 1).length\n        val onesArr = arr.filter(_ % 2 == 0).sortBy(_.toString.toInt)\n\
    \        val zerosArr = arr.filter(_ % 2 == 1).sortBy(_.toString.toInt)\n    \
    \    val onesArr2 = onesArr.zipWithIndex.sortBy(_._1).map(_._2)\n        val zerosArr2\
    \ = zerosArr.zipWithIndex.sortBy(_._1).map(_._2)\n        val onesArr3 = onesArr2.zip(zerosArr2).sortBy(_._1).map(_._2)\n\
    \        val zerosArr3 = zerosArr2.zip(onesArr2).sortBy(_._1).map(_._2)\n    \
    \    onesArr3.zip(zerosArr3).sortBy(_._1).map(_._2)", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_\
    \ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val onesDecimal =\
    \ onesCount / arr.size\n        val zerosDecimal = zerosCount / arr.size\n   \
    \     val onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesArray = arr.map(x => if (x == 1) 1 else 0)\n        val\
    \ zerosArray = arr.map(x => if (x == 0) 0 else 1)\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArrayLength / 2\n        val zerosArrayLength =\
    \ zerosArrayLength / 2\n        val onesArrayLength = onesArrayLength + zerosArrayLength\n\
    \        val zerosArrayLength = zerosArrayLength + onesArrayLength\n        val\
    \ onesArrayLength = onesArrayLength / 2\n        val zerosArrayLength = zerosArrayLength\
    \ / 2\n        val onesArrayLength = onesArrayLength + zerosArrayLength\n    \
    \    val zerosArrayLength = zerosArrayLength + onesArrayLength\n        val onesArrayLength\
    \ = onesArrayLength / 2\n        val zerosArrayLength = zerosArrayLength / 2\n\
    \        val onesArrayLength = onesArrayLength + zerosArrayLength\n        val\
    \ zerosArrayLength = zerosArrayLength + onesArrayLength\n        val onesArrayLength\
    \ = onesArrayLength / 2\n        val zerosArrayLength = zerosArrayLength / 2\n\
    \        val onesArrayLength = onesArrayLength + zerosArrayLength\n        val\
    \ zerosArrayLength = zerosArrayLength + onesArrayLength\n        val onesArrayLength\
    \ = onesArrayLength / 2\n        val zerosArrayLength = zerosArrayLength / 2\n\
    \        val onesArrayLength = onesArrayLength + zerosArrayLength\n        val\
    \ zerosArrayLength = zerosArrayLength + onesArrayLength\n        val onesArrayLength\
    \ = onesArrayLength / 2\n        val zerosArrayLength = zerosArrayLength / 2\n\
    \        val onesArrayLength = onesArrayLength + zerosArrayLength\n        val\
    \ zerosArrayLength = zerosArrayLength + onesArrayLength\n        val onesArrayLength\
    \ = onesArrayLength / 2\n        val zerosArrayLength = zerosArrayLength / 2\n\
    \        val onesArrayLength = onesArrayLength + zerosArrayLength\n        val\
    \ zerosArrayLength = zerosArrayLength + onesArrayLength\n        val onesArrayLength\
    \ = onesArrayLength / 2\n        val zerosArrayLength = zerosArrayLength / 2\n\
    \        val onesArrayLength = onesArrayLength + zerosArrayLength\n        val\
    \ zerosArrayLength = zerosArrayLength + onesArrayLength\n        val onesArrayLength\
    \ = onesArrayLength / 2\n        val zerosArray", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_\
    \ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val onesDecimal =\
    \ onesCount / arr.size\n        val zerosDecimal = zerosCount / arr.size\n   \
    \     val onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesZeros = ones + zeros\n        val onesZero = onesZeros\
    \ / 2\n        val onesZeros = onesZero % 2\n        val onesZero = onesZeros\
    \ % 2\n        val onesZeros = onesZeros\n        val onesZero = onesZero\n  \
    \      val onesZeros = onesZeros\n        val onesZero = onesZero\n        val\
    \ onesZeros = onesZeros\n        val onesZero = onesZero\n        val onesZeros\
    \ = onesZeros\n        val onesZero = onesZero\n        val onesZeros = onesZeros\n\
    \        val onesZero = onesZero\n        val onesZeros = onesZeros\n        val\
    \ onesZero = onesZero\n        val onesZeros = onesZeros\n        val onesZero\
    \ = onesZero\n        val onesZeros = onesZeros\n        val onesZero = onesZero\n\
    \        val onesZeros = onesZeros\n        val onesZero = onesZero\n        val\
    \ onesZeros = onesZeros\n        val onesZero = onesZero\n        val onesZeros\
    \ = onesZeros\n        val onesZero = onesZero\n        val onesZeros = onesZeros\n\
    \        val onesZero = onesZero\n        val onesZeros = onesZeros\n        val\
    \ onesZero = onesZero\n        val onesZeros = onesZeros\n        val onesZero\
    \ = onesZero\n        val onesZeros = onesZeros\n        val onesZero = onesZero\n\
    \        val onesZeros = onesZeros\n        val onesZero = onesZero\n        val\
    \ onesZeros = onesZeros\n        val onesZero = onesZero\n        val onesZeros\
    \ = onesZeros\n        val onesZero = onesZero\n        val onesZeros = onesZeros\n\
    \        val onesZero = onesZero\n        val onesZeros = onesZeros\n        val\
    \ onesZero = onesZero\n        val one", "        val ones = arr.filter(x => x\
    \ == 1).toList\n        val zeros = arr.filter(x => x == 0).toList\n        val\
    \ onesCount = ones.map(x => ones.count(_ == x)).sum\n        val zerosCount =\
    \ zeros.map(x => zeros.count(_ == x)).sum\n        val onesZeros = ones.zip(zeros)\n\
    \        val onesZeroCount = onesZeros.map(x => onesZeros.count(_ == x)).sum\n\
    \        val onesZeroZeros = onesZeros.zip(zeros)\n        val onesZeroZeroCount\
    \ = onesZeroZeros.map(x => onesZeroZeros.count(_ == x)).sum\n        val onesZeroZeroZeros\
    \ = onesZeroZeros.zip(zeros)\n        val onesZeroZeroZeroCount = onesZeroZeroZeros.map(x\
    \ => onesZeroZeroZeros.count(_ == x)).sum\n        val onesZeroZeroZeroZeros =\
    \ onesZeroZeroZeros.zip(zeros)\n        val onesZeroZeroZeroZeroCount = onesZeroZeroZeroZeros.map(x\
    \ => onesZeroZeroZeroZeros.count(_ == x)).sum\n        val onesZeroZeroZeroZeros\
    \ = onesZeroZeroZeroZeros.zip(zeros)\n        val onesZeroZeroZeroZeroCount =\
    \ onesZeroZeroZeroZeros.map(x => onesZeroZeroZeroZeros.count(_ == x)).sum\n  \
    \      val onesZeroZeroZeroZeros = onesZeroZeroZeroZeros.zip(zeros)\n        val\
    \ onesZeroZeroZeroZeroCount = onesZeroZeroZeroZeros.map(x => onesZeroZeroZeroZeros.count(_\
    \ == x)).sum\n        val onesZeroZeroZeroZeros = onesZeroZeroZeroZeros.zip(zeros)\n\
    \        val onesZeroZeroZeroZeroCount = onesZeroZeroZeroZeros.map(x => onesZeroZeroZeroZeros.count(_\
    \ == x)).sum\n        val onesZeroZeroZeroZeros = onesZeroZeroZeroZeros.zip(zeros)\n\
    \        val onesZeroZeroZeroZeroCount = onesZeroZeroZeroZeros.map(x => onesZeroZeroZeroZeros.count(_\
    \ == x)).sum\n        val onesZeroZeroZeroZeros = onesZeroZeroZeroZeros.zip(zeros)\n\
    \        val onesZeroZeroZeroZeroCount = onesZeroZeroZeroZeros.map(x ", "    \
    \    val ones = arr.filter(_ == 1).length\n        val zeros = arr.filter(_ ==\
    \ 0).length\n        val maxOnes = arr.filter(_ == 1).max\n        val maxZeros\
    \ = arr.filter(_ == 0).max\n        val maxOnesZeros = maxOnes - maxZeros\n  \
    \      val maxOnesZeros_ = maxOnesZeros - 1\n        val maxOnesZeros_1 = maxOnesZeros\
    \ - 2\n        val maxOnesZeros_2 = maxOnesZeros - 3\n        val maxOnesZeros_3\
    \ = maxOnesZeros - 4\n        val maxOnesZeros_4 = maxOnesZeros - 5\n        val\
    \ maxOnesZeros_5 = maxOnesZeros - 6\n        val maxOnesZeros_6 = maxOnesZeros\
    \ - 7\n        val maxOnesZeros_7 = maxOnesZeros - 8\n        val maxOnesZeros_8\
    \ = maxOnesZeros - 9\n        val maxOnesZeros_9 = maxOnesZeros - 10\n       \
    \ val maxOnesZeros_10 = maxOnesZeros - 11\n        val maxOnesZeros_11 = maxOnesZeros\
    \ - 12\n        val maxOnesZeros_12 = maxOnesZeros - 13\n        val maxOnesZeros_13\
    \ = maxOnesZeros - 14\n        val maxOnesZeros_14 = maxOnesZeros - 15\n     \
    \   val maxOnesZeros_15 = maxOnesZeros - 16\n        val maxOnesZeros_16 = maxOnesZeros\
    \ - 17\n        val maxOnesZeros_17 = maxOnesZeros - 18\n        val maxOnesZeros_18\
    \ = maxOnesZeros - 19\n        val maxOnesZeros_19 = maxOnesZeros - 20\n     \
    \   val maxOnesZeros_20 = maxOnesZeros - 21\n        val maxOnesZeros_21 = maxOnesZeros\
    \ - 22\n        val maxOnesZeros_22 = maxOnesZeros - 23\n        val maxOnesZeros_23\
    \ = maxOnesZeros - 24\n        val maxOnesZeros_24 = maxOnesZeros - 25\n     \
    \   val maxOnesZeros_25 = maxOnesZeros - 26\n        val maxOnesZeros_26 = maxOnesZeros\
    \ - 27\n        val maxOnesZeros_27 = maxOnesZeros - 28\n        val maxOnesZeros_28\
    \ = maxOnesZeros - 29\n", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val onesArr = arr.filter(x => x == 1).toList\n\
    \        val zerosArr = arr.filter(x => x == 0).toList\n        val onesCount\
    \ = onesArr.size\n        val zerosCount = zerosArr.size\n        val onesSum\
    \ = onesArr.sum\n        val zerosSum = zerosArr.sum\n        val onesMax = onesArr.max\n\
    \        val zerosMax = zerosArr.max\n        val onesMin = onesArr.min\n    \
    \    val zerosMin = zerosArr.min\n        val onesAvg = onesArr.sum / onesCount\n\
    \        val zerosAvg = zerosArr.sum / zerosCount\n        val onesDev = onesArr.sum\
    \ / onesSum\n        val zerosDev = zerosArr.sum / zerosSum\n        val onesDeviation\
    \ = onesArr.reduce((x, y) => x - y)\n        val zerosDeviation = zerosArr.reduce((x,\
    \ y) => x - y)\n        val onesVariance = onesArr.reduce((x, y) => x - y) / onesCount\n\
    \        val zerosVariance = zerosArr.reduce((x, y) => x - y) / zerosCount\n \
    \       val onesStandardDeviation = math.sqrt(onesVariance)\n        val zerosStandardDeviation\
    \ = math.sqrt(zerosVariance)\n        val onesStandardError = math.sqrt((onesDev\
    \ / onesSum) * (onesCount - onesCount))\n        val zerosStandardError = math.sqrt((zerosDev\
    \ / zerosSum) * (zerosCount - zerosCount))\n        val onesVarianceDeviation\
    \ = math.sqrt(onesVariance)\n        val zerosVarianceDeviation = math.sqrt(zerosVariance)\n\
    \        val onesVarianceError = math.sqrt((onesDev / onesSum) * (onesCount -\
    \ onesCount))\n        val zerosVarianceError = math.sqrt((zerosDev / zerosSum)\
    \ * (zerosCount - zerosCount))\n        val onesVarianceDeviationDeviation = math.sqrt(onesVarianceDeviation)\n\
    \        val zerosVarianceDeviationDeviation = math.sqrt(zerosVarianceDeviation)\n\
    \        val onesVarianceDeviationError = math.sqrt((onesDeviationDev / onesSum)\
    \ * (onesCount - onesCount))\n        val zerosVarianceDeviationDeviation = math.sqrt(zerosVarianceDeviation)\n\
    \        val one", "        val ones = arr.filter(_ % 2 == 0).toList\n       \
    \ val zeros = arr.filter(_ % 2 == 1).toList\n        val onesCount = ones.count(_\
    \ == 1)\n        val zerosCount = zeros.count(_ == 0)\n        val onesZeros =\
    \ ones.zip(zeros)\n        val onesZeroCount = onesZeros.count(_._1 == _._2)\n\
    \        val onesZeroZeros = onesZeros.filter(_._1 == _._2)\n        val onesZeroZeroCount\
    \ = onesZeroZeros.count(_._1 == _._2)\n        val onesZeroZeroZeros = onesZeroZeros.filter(_._1\
    \ == _._2)\n        val onesZeroZeroZeroCount = onesZeroZeroZeros.count(_._1 ==\
    \ _._2)\n        val onesZeroZeroZeroZeros = onesZeroZeroZeros.filter(_._1 ==\
    \ _._2)\n        val onesZeroZeroZeroZeroCount = onesZeroZeroZeroZeros.count(_._1\
    \ == _._2)\n        val onesZeroZeroZeroZeroZeros = onesZeroZeroZeroZeros.filter(_._1\
    \ == _._2)\n        val onesZeroZeroZeroZeroZeroCount = onesZeroZeroZeroZeroZeros.count(_._1\
    \ == _._2)\n        val onesZeroZeroZeroZeroZeroZeros = onesZeroZeroZeroZeroZeros.filter(_._1\
    \ == _._2)\n        val onesZeroZeroZeroZeroZeroCount = onesZeroZeroZeroZeroZeros.count(_._1\
    \ == _._2)\n        val onesZeroZeroZeroZeroZeroZeros = onesZeroZeroZeroZeroZeroZeros.filter(_._1\
    \ == _._2)\n        val onesZeroZeroZeroZeroZeroZeroCount = onesZeroZeroZeroZeroZeroZeros.count(_._1\
    \ == _._2)\n        val onesZeroZeroZeroZeroZeroZeroZeros = onesZeroZeroZeroZeroZeroZeroZeros.filter(_._1\
    \ == _._2)\n        val onesZeroZeroZeroZeroZeroZeroCount = onesZeroZeroZeroZeroZeroZeroZeros.count(_._1\
    \ == _._2)\n        val onesZeroZeroZeroZeroZeroZeroZeros = onesZeroZeroZeroZeroZeroZeroZeroZeros.filter(_._1\
    \ == _._2)\n        val onesZeroZeroZeroZeroZeroZeroZeroCount = onesZeroZeroZeroZeroZeroZeroZeroZeros.count(_._1\
    \ == _._2)\n        val onesZeroZeroZeroZero", "        val ones = arr.filter(_\
    \ == 1l)\n        val zeros = arr.filter(_ == 0l)\n        val onesCount = ones.count()\n\
    \        val zerosCount = zeros.count()\n        val onesDecimal = onesCount.toDouble\
    \ / arr.length\n        val zerosDecimal = zerosCount.toDouble / arr.length\n\
    \        val onesDecimalInt = onesDecimal.toInt\n        val zerosDecimalInt =\
    \ zerosDecimal.toInt\n        val onesDecimalDecimal = onesDecimalInt.toDouble\
    \ / onesDecimal\n        val zerosDecimalDecimal = zerosDecimalInt.toDouble /\
    \ zerosDecimal\n        val onesDecimalDecimalInt = onesDecimalDecimal.toInt\n\
    \        val zerosDecimalDecimalInt = zerosDecimalDecimal.toInt\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimalInt.toDouble / onesDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimalInt.toDouble / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalInt\
    \ = onesDecimalDecimalDecimal.toInt\n        val zerosDecimalDecimalDecimalInt\
    \ = zerosDecimalDecimalDecimal.toInt\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalInt.toDouble / onesDecimalDecimalDecimal\n      \
    \  val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalInt.toDouble\
    \ / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalInt\
    \ = onesDecimalDecimalDecimalDecimal.toInt\n        val zerosDecimalDecimalDecimalDecimalInt\
    \ = zerosDecimalDecimalDecimalDecimalInt.toInt\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalInt.toDouble / onesDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalInt.toDouble\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalInt\
    \ = onesDecimalDecimalDecimalDecimalDecimal.toInt\n        val zerosDecimalDecimalDecimalDecimalDecimalInt\
    \ = zerosDecimalDecimalDecimalDecimalDecimalInt.toInt\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalInt.toDouble / onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalInt.toDouble\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalInt\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal.toInt\n        val zerosDecimalDecimalDecimalDecimalDecimal",
  '        arr.sortWith(compare)', "        val ones = arr.filter(_ % 2 == 0).toList\n\
    \        val zeros = arr.filter(_ % 2 == 1).toList\n        val onesCount = ones.map(x\
    \ => ones.count(_ == x))\n        val zerosCount = zeros.map(x => zeros.count(_\
    \ == x))\n        val onesZeros = ones.zip(zeros)\n        val onesZerosCount\
    \ = onesZeros.map(x => (x._1, x._2))\n        val onesZerosCountSorted = onesZerosCount.sortBy(x\
    \ => x._1)\n        val zerosZerosCount = zerosZeros.map(x => (x._1, x._2))\n\
    \        val zerosZerosCountSorted = zerosZerosCount.sortBy(x => x._1)\n     \
    \   val onesZerosCountSortedSorted: Seq[(Long, Long)] = onesZerosCountSorted.sortBy(x\
    \ => x._2)\n        val zerosZerosCountSortedSorted: Seq[(Long, Long)] = zerosZerosCountSorted.sortBy(x\
    \ => x._2)\n        val onesZerosCountSortedSortedSorted: Seq[(Long, Long)] =\
    \ onesZerosCountSortedSorted.sortBy(x => x._1)\n        val zerosZerosCountSortedSortedSorted:\
    \ Seq[(Long, Long)] = zerosZerosCountSortedSorted.sortBy(x => x._1)\n        val\
    \ onesZerosCountSortedSortedSortedSorted: Seq[(Long, Long)] = onesZerosCountSortedSortedSorted.sortBy(x\
    \ => x._2)\n        val zerosZerosCountSortedSortedSortedSorted: Seq[(Long, Long)]\
    \ = zerosZerosCountSortedSortedSorted.sortBy(x => x._2)\n        val onesZerosCountSortedSortedSortedSortedSorted:\
    \ Seq[(Long, Long)] = onesZerosCountSortedSortedSortedSorted.sortBy(x => x._1)\n\
    \        val zerosZerosCountSortedSortedSortedSortedSorted: Seq[(Long, Long)]\
    \ = zerosZerosCountSortedSortedSortedSorted.sortBy(x => x._1)\n        val onesZerosCountSortedSortedSortedSortedSortedSorted:\
    \ Seq[(Long, Long)] = onesZerosCountSortedSortedSortedSortedSorted.sortBy(x =>\
    \ x._2)\n        val zerosZerosCountSortedSortedSortedSortedSortedSorted: Seq[(Long,\
    \ Long)] = zerosZerosCountSortedSortedSortedSortedSorted.", "        val ones\
    \ = arr.filter(_ % 2 == 0).toList\n        val zeros = arr.filter(_ % 2 == 1).toList\n\
    \        val onesCount = ones.map(_.toInt).sum\n        val zerosCount = zeros.map(_.toInt).sum\n\
    \        val onesDecimal = onesCount / 2\n        val zerosDecimal = zerosCount\
    \ / 2\n        val onesDecimalDecimal = onesDecimal + zerosDecimal\n        val\
    \ zerosDecimalDecimal = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal.toLong\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal.toLong\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val ", "        val ones = arr.filter(_ == 1).toList\n        val zeros\
    \ = arr.filter(_ == 0).toList\n        val onesCount = ones.map(_.toInt).sum\n\
    \        val zerosCount = zeros.map(_.toInt).sum\n        val onesDecimal = ones.map(_.toInt).map(math.pow(2,\
    \ _)).sum\n        val zerosDecimal = zeros.map(_.toInt).map(math.pow(2, _)).sum\n\
    \        val onesDecimalDecimal = ones.map(_.toInt).map(math.pow(2, _)).map(math.pow(2,\
    \ _)).sum\n        val zerosDecimalDecimal = zeros.map(_.toInt).map(math.pow(2,\
    \ _)).map(math.pow(2, _)).sum\n        val onesDecimalDecimalDecimal = ones.map(_.toInt).map(math.pow(2,\
    \ _)).map(math.pow(2, _)).map(math.pow(2, _)).sum\n        val zerosDecimalDecimalDecimal\
    \ = zeros.map(_.toInt).map(math.pow(2, _)).map(math.pow(2, _)).map(math.pow(2,\
    \ _)).sum\n        val onesDecimalDecimalDecimalDecimal = ones.map(_.toInt).map(math.pow(2,\
    \ _)).map(math.pow(2, _)).map(math.pow(2, _)).map(math.pow(2, _)).sum\n      \
    \  val zerosDecimalDecimalDecimalDecimal = zeros.map(_.toInt).map(math.pow(2,\
    \ _)).map(math.pow(2, _)).map(math.pow(2, _)).map(math.pow(2, _)).sum\n      \
    \  val onesDecimalDecimalDecimalDecimalDecimal = ones.map(_.toInt).map(math.pow(2,\
    \ _)).map(math.pow(2, _)).map(math.pow(2, _)).map(math.pow(2, _)).map(math.pow(2,\
    \ _)).sum\n        val zerosDecimalDecimalDecimalDecimalDecimal = zeros.map(_.toInt).map(math.pow(2,\
    \ _)).map(math.pow(2, _)).map(math.pow(2, _)).map(math.pow(2, _)).map(math.pow(2,\
    \ _)).sum\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = ones.map(_.toInt).map(math.pow(2,\
    \ _)).map(math.pow(2, _)).map(math.pow(2, _)).map(math.pow(2, _)).map(math.pow(2,\
    \ _)).map(math.pow(2, _)).sum\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zeros.map(_.toInt).map(math.pow(2, _)).map(math.pow(2, _)).map(math.pow(2,\
    \ _)).map(math.pow(2, _)).map(math.pow(2, _)).map(math.pow(2, _)).map(math.pow(2,\
    \ _)).sum\n        val onesDecimalDecimalDecimal", "        val ones = arr.filter(_\
    \ == 1l)\n        val zeros = arr.filter(_ == 0l)\n        val onesCount = ones.count\n\
    \        val zerosCount = zeros.count\n        val onesDecimal = onesCount / 2\n\
    \        val zerosDecimal = zerosCount / 2\n        val onesDecimalDecimal = onesDecimal\
    \ / 2\n        val zerosDecimalDecimal = zerosDecimal / 2\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / 2\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / 2\n        val zerosDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.size\n        val zerosDecimal\
    \ = zerosCount / arr.size\n        val onesDecimalDecimal = onesDecimal / zerosDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal / onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / zerosDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / onesDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal /\
    \ zerosDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal", "        val\
    \ ones = arr.filter(x => x == 1l)\n        val zeros = arr.filter(x => x == 0l)\n\
    \        val onesCount = ones.count\n        val zerosCount = zeros.count\n  \
    \      val onesDecimal = onesCount * 10\n        val zerosDecimal = zerosCount\
    \ * 10\n        val onesDecimalString = onesDecimal.toString\n        val zerosDecimalString\
    \ = zerosDecimal.toString\n        val onesDecimalString = onesDecimalString.toUpperCase\n\
    \        val zerosDecimalString = zerosDecimalString.toUpperCase\n        val\
    \ onesDecimalString = onesDecimalString.substring(0, onesDecimalString.length\
    \ - 1)\n        val zerosDecimalString = zerosDecimalString.substring(0, zerosDecimalString.length\
    \ - 1)\n        val onesDecimalString = onesDecimalString.substring(0, onesDecimalString.length\
    \ - 1)\n        val zerosDecimalString = zerosDecimalString.substring(0, zerosDecimalString.length\
    \ - 1)\n        val onesDecimalString = onesDecimalString.substring(0, onesDecimalString.length\
    \ - 1)\n        val zerosDecimalString = zerosDecimalString.substring(0, zerosDecimalString.length\
    \ - 1)\n        val onesDecimalString = onesDecimalString.substring(0, onesDecimalString.length\
    \ - 1)\n        val zerosDecimalString = zerosDecimalString.substring(0, zerosDecimalString.length\
    \ - 1)\n        val onesDecimalString = onesDecimalString.substring(0, onesDecimalString.length\
    \ - 1)\n        val zerosDecimalString = zerosDecimalString.substring(0, zerosDecimalString.length\
    \ - 1)\n        val onesDecimalString = onesDecimalString.substring(0, onesDecimalString.length\
    \ - 1)\n        val zerosDecimalString = zerosDecimalString.substring(0, zerosDecimalString.length\
    \ - 1)\n        val onesDecimalString = onesDecimalString.substring(0, onesDecimalString.length\
    \ - 1)\n        val zerosDecimalString = zerosDecimalString.substring(0, zerosDecimalString.length\
    \ - 1)\n        val onesDecimalString = onesDecimalString.substring(0, onesDecimalString.length\
    \ - 1)\n        val zerosDecimalString = zerosDecimalString.substring(0, zerosDecimalString.length\
    \ - 1)\n        val onesDecimalString = onesDecimalString.substring(0, onesDecimalString.length\
    \ - 1)\n        val zerosDecimalString = zerosDecimalString.substring(0, zerosDecimalString.length\
    \ - 1)\n        val onesDecimalString = onesDecimalString.substring(0, onesDecimalString.length\
    \ - 1)\n        val zerosDecimalString = zerosDecimalString.substring(0, zerosDecimalString.length\
    \ - 1)\n        val onesDecimalString = onesDecimalString.substring(0, onesDecimalString.length\
    \ - 1)\n        val zerosDecimalString = zerosDecimalString.substring(0, zerosDecimalString.length\
    \ - 1)\n        val onesDecimalString = onesDecimalString.substring(0, onesDecimalString.length\
    \ - 1)\n        val zerosDecimalString = zerosDecimalString.substring(0, zerosDecimalString.length\
    \ - 1)\n        val onesDecimalString = onesDecimalString.", "        val ones\
    \ = arr.filter(_ == 1).length\n        val zeros = arr.filter(_ == 0).length\n\
    \        val onesZeros = ones + zeros\n        val onesZeros_sorted = arr.sortBy(_\
    \ - onesZeros)\n        val onesZeros_sorted_reversed = onesZeros_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted = onesZeros_sorted_reversed.sortBy(_\
    \ - ones)\n        val onesZeros_sorted_reversed_sorted_reversed = onesZeros_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted = onesZeros_sorted_reversed_sorted_reversed.sortBy(_\
    \ - zeros)\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted.reverse\n        onesZeros_sorted_reversed_sorted_reversed_sorted_reversed",
  '        arr.sortWith(compare)', "        val ones = arr.filter(x => x % 2l.toLong\
    \ == 0)\n        val zeros = arr.filter(x => x % 2l.toLong != 0)\n        val\
    \ onesCount = ones.map(x => x.toLong).distinct\n        val zerosCount = zeros.map(x\
    \ => x.toLong).distinct\n        val onesCountMap = onesCount.foldLeft(Map[Long,\
    \ Long]())((m, x) => m + (x -> m.getOrElse(x, 0l)))\n        val zerosCountMap\
    \ = zerosCount.foldLeft(Map[Long, Long]())((m, x) => m + (x -> m.getOrElse(x,\
    \ 0l)))\n        val onesCountMapSorted = onesCountMap.sortBy(_._1)\n        val\
    \ zerosCountMapSorted = zerosCountMap.sortBy(_._1)\n        val onesCountMapSortedWithZeros\
    \ = onesCountMapSorted.map(x => (x, 0l))\n        val zerosCountMapSortedWithZeros\
    \ = zerosCountMapSorted.map(x => (x, 0l))\n        val onesCountMapSortedWithZerosAndOnes\
    \ = onesCountMapSortedWithZeros.union(zerosCountMapSortedWithZeros)\n        val\
    \ zerosCountMapSortedWithZerosAndOnes = zerosCountMapSortedWithZeros.union(onesCountMapSortedWithZeros)\n\
    \        val onesCountMapSortedWithZerosAndOnesAndZeros = onesCountMapSortedWithZeros.union(zerosCountMapSortedWithZeros)\n\
    \        val zerosCountMapSortedWithZerosAndOnesAndZeros = zerosCountMapSortedWithZeros.union(onesCountMapSortedWithZeros)\n\
    \        val onesCountMapSortedWithZerosAndOnesAndZerosAndOnes = onesCountMapSortedWithZeros.union(zerosCountMapSortedWithZeros)\n\
    \        val zerosCountMapSortedWithZerosAndOnesAndOnesAndZeros = zerosCountMapSortedWithZeros.union(onesCountMapSortedWithZeros)\n\
    \        val onesCountMapSortedWithZerosAndOnesAndOnesAndZeros = onesCountMapSortedWithZeros.union(zerosCountMapSortedWithZeros)\n\
    \        val zerosCountMapSortedWithZerosAndOnesAndOnesAndZeros = zerosCountMapSortedWithZeros.union(onesCountMapSortedWithZeros)\n\
    \        val onesCountMapSortedWithZerosAndOnesAndOnesAndZerosAndOnes = onesCountMapSortedWithZeros.union(zerosCountMapSortedWithZeros)\n\
    \        val zerosCount", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n        val\
    \ zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount / arr.length\n\
    \        val zerosDecimal = zerosCount / arr.length\n        val onesDecimalDecimal\
    \ = onesDecimal / ones\n        val zerosDecimalDecimal = zerosDecimal / zeros\n\
    \        val onesDecimalDecimalDecimal = onesDecimalDecimal / onesDecimal\n  \
    \      val zerosDecimalDecimalDecimal = zerosDecimalDecimal / zerosDecimal\n \
    \       val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / onesDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zerosDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        ", "        val ones = arr.filter(_ % 2 == 0).length\n        val zeros\
    \ = arr.filter(_ % 2 == 1).length\n        val onesArr = arr.filter(_ % 2 == 0).sortBy(_\
    \ % 2).reverse\n        val zerosArr = arr.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n\
    \        val onesArr2 = onesArr.filter(_ > 0)\n        val zerosArr2 = zerosArr.filter(_\
    \ > 0)\n        val onesArr3 = onesArr2.filter(_ > 0)\n        val zerosArr3 =\
    \ zerosArr2.filter(_ > 0)\n        val onesArr4 = onesArr3.filter(_ > 0)\n   \
    \     val zerosArr4 = zerosArr3.filter(_ > 0)\n        val onesArr5 = onesArr4.filter(_\
    \ > 0)\n        val zerosArr5 = zerosArr4.filter(_ > 0)\n        val onesArr6\
    \ = onesArr5.filter(_ > 0)\n        val zerosArr6 = zerosArr5.filter(_ > 0)\n\
    \        val onesArr7 = onesArr6.filter(_ > 0)\n        val zerosArr7 = zerosArr6.filter(_\
    \ > 0)\n        val onesArr8 = onesArr7.filter(_ > 0)\n        val zerosArr8 =\
    \ zerosArr7.filter(_ > 0)\n        val onesArr9 = onesArr8.filter(_ > 0)\n   \
    \     val zerosArr9 = zerosArr8.filter(_ > 0)\n        val onesArr10 = onesArr9.filter(_\
    \ > 0)\n        val zerosArr10 = zerosArr9.filter(_ > 0)\n        val onesArr11\
    \ = onesArr10.filter(_ > 0)\n        val zerosArr11 = zerosArr10.filter(_ > 0)\n\
    \        val onesArr12 = onesArr11.filter(_ > 0)\n        val zerosArr12 = zerosArr11.filter(_\
    \ > 0)\n        val onesArr13 = onesArr12.filter(_ > 0)\n        val zerosArr13\
    \ = zerosArr12.filter(_ > 0)\n        val onesArr14 = onesArr13.filter(_ > 0)\n\
    \        val zerosArr14 = zerosArr13.filter(_ > 0)\n        val onesArr15 = onesArr14.filter(_\
    \ > 0)\n        val zerosArr15 = zerosArr14.filter(_ > 0)\n        val onesArr16\
    \ = onesArr15.filter(_ > 0)\n        val zerosArr16 = zerosArr15.filter(_ > 0)\n\
    \        val onesArr17 = onesArr16.filter(_ > 0)\n        val zerosArr17 = zeros",
  "        val ones = arr.filter(_ % 2 == 0).toList\n        val zeros = arr.filter(_\
    \ % 2 == 1).toList\n        val onesZeros = ones + zeros\n        val onesZerosSorted\
    \ = onesZeros.sortBy(x => x.toString.toInt)\n        val zerosSorted = zeros.sortBy(x\
    \ => x.toString.toInt)\n        val onesZerosSortedWithZeros = onesZerosSorted.zip(zerosSorted).sortBy(x\
    \ => x._1 - x._2)\n        val zerosSortedWithOnes = zerosSorted.zip(onesSorted).sortBy(x\
    \ => x._1 - x._2)\n        val onesZerosSortedWithOnes = onesZerosSortedWithZeros.zip(zerosSortedWithOnes).sortBy(x\
    \ => x._1 - x._2)\n        val zerosSortedWithZeros = zerosSortedWithOnes.zip(onesSorted).sortBy(x\
    \ => x._1 - x._2)\n        val onesSortedWithZeros = onesZerosSortedWithZeros.zip(zerosSortedWithZeros).sortBy(x\
    \ => x._1 - x._2)\n        val zerosSortedWithOnes = zerosSortedWithZeros.zip(onesSortedWithOnes).sortBy(x\
    \ => x._1 - x._2)\n        val onesSortedWithOnes = onesZerosSortedWithZeros.zip(zerosSortedWithOnes).sortBy(x\
    \ => x._1 - x._2)\n        val zerosSortedWithZeros = zerosSortedWithOnes.zip(onesSortedWithZeros).sortBy(x\
    \ => x._1 - x._2)\n        val onesSortedWithZeros = onesZerosSortedWithZeros.zip(zerosSortedWithZeros).sortBy(x\
    \ => x._1 - x._2)\n        val zerosSortedWithOnes = zerosSortedWithZeros.zip(onesSortedWithOnes).sortBy(x\
    \ => x._1 - x._2)\n        val onesSortedWithOnes = onesZerosSortedWithZeros.zip(zerosSortedWithOnes).sortBy(x\
    \ => x._1 - x._2)\n        val zerosSortedWithZeros = zerosSortedWithOnes.zip(onesSortedWithZeros).sortBy(x\
    \ => x._1 - x._2)\n        val onesSortedWithZeros = onesZerosSortedWithZeros.zip(zerosSortedWithZeros).sortBy(x\
    \ => x._1 - x._2)\n        val zerosSortedWithOnes = zerosSortedWithZ", '        arr.sortWith((x,
    y) => x.toLong == y.toLong ? x.toLong - y.toLong : x.toLong - y.toLong)', "  \
    \      val ones = arr.filter(x => x == 1).toList\n        val zeros = arr.filter(x\
    \ => x == 0).toList\n        val onesCount = ones.map(x => ones.count(_ == x)).max\n\
    \        val zerosCount = zeros.map(x => zeros.count(_ == x)).max\n        val\
    \ onesDecimal = ones.map(x => x.toString.toDouble).max\n        val zerosDecimal\
    \ = zeros.map(x => x.toString.toDouble).max\n        val onesDecimalCount = ones.map(x\
    \ => ones.count(_ == x)).max\n        val zerosDecimalCount = zeros.map(x => zeros.count(_\
    \ == x)).max\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).max\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).max\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).max\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).max\n        val onesDecimalCount\
    \ = ones.map(x => ones.count(_ == x)).max\n        val zerosDecimalCount = zeros.map(x\
    \ => zeros.count(_ == x)).max\n        val onesDecimalCount = ones.map(x => ones.count(_\
    \ == x)).max\n        val zerosDecimalCount = zeros.map(x => zeros.count(_ ==\
    \ x)).max\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).max\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).max\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).max\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).max\n        val onesDecimalCount\
    \ = ones.map(x => ones.count(_ == x)).max\n        val zerosDecimalCount = zeros.map(x\
    \ => zeros.count(_ == x)).max\n        val onesDecimalCount = ones.map(x => ones.count(_\
    \ == x)).max\n        val zerosDecimalCount = zeros.map(x => zeros.count(_ ==\
    \ x)).max\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).max\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).max\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).max\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).max\n        val onesDecimalCount\
    \ = ones.map(", '        arr.sortWith(compare)', "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_\
    \ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val onesDecimal =\
    \ onesCount / arr.length\n        val zerosDecimal = zerosCount / arr.length\n\
    \        val onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal ",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecim",
  "        val ones = arr.filter(_ % 2 == 0).toList\n        val zeros = arr.filter(_\
    \ % 2 == 1).toList\n        val onesZeros = ones.zip(zeros)\n        val onesZerosSorted\
    \ = onesZeros.sortBy(_._1).sortBy(_._2)\n        val onesZerosSortedList = onesZerosSorted.map(x\
    \ => x._1)\n        val zerosSorted = zeros.sortBy(_ % 2 == 1).sortBy(_ % 2 ==\
    \ 0)\n        val zerosSortedList = zeros.map(x => x.toLong)\n        val zerosSortedList2\
    \ = zerosSorted.map(x => x.toLong)\n        val zerosSortedList3 = zerosSorted.map(x\
    \ => x.toLong)\n        val zerosSortedList4 = zerosSorted.map(x => x.toLong)\n\
    \        val zerosSortedList5 = zerosSorted.map(x => x.toLong)\n        val zerosSortedList6\
    \ = zerosSorted.map(x => x.toLong)\n        val zerosSortedList7 = zerosSorted.map(x\
    \ => x.toLong)\n        val zerosSortedList8 = zerosSorted.map(x => x.toLong)\n\
    \        val zerosSortedList9 = zerosSorted.map(x => x.toLong)\n        val zerosSortedList10\
    \ = zerosSorted.map(x => x.toLong)\n        val zerosSortedList11 = zerosSorted.map(x\
    \ => x.toLong)\n        val zerosSortedList12 = zerosSorted.map(x => x.toLong)\n\
    \        val zerosSortedList13 = zerosSorted.map(x => x.toLong)\n        val zerosSortedList14\
    \ = zerosSorted.map(x => x.toLong)\n        val zerosSortedList15 = zerosSorted.map(x\
    \ => x.toLong)\n        val zerosSortedList16 = zerosSorted.map(x => x.toLong)\n\
    \        val zerosSortedList17 = zerosSorted.map(x => x.toLong)\n        val zerosSortedList18\
    \ = zerosSorted.map(x => x.toLong)\n        val zerosSortedList19 = zerosSorted.map(x\
    \ => x.toLong)\n        val zerosSortedList20 = zerosSorted.map(x => x.toLong)\n\
    \        val zerosSortedList21 = zerosSorted.map(x => x.toLong)\n        val zerosSortedList22\
    \ = zerosSorted.map(x => x.toLong)\n        val zerosSortedList23 = zerosSorted.map(x\
    \ => x.toLong)\n        val zerosSortedList24 = ", "        val ones = arr.filter(_\
    \ % 2 == 0).length\n        val zeros = arr.filter(_ % 2 == 1).length\n      \
    \  val onesArr = arr.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n        val zerosArr\
    \ = arr.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n        val onesArr2 = onesArr.filter(_\
    \ % 2 == 0).sortBy(_ % 2).reverse\n        val zerosArr2 = zerosArr.filter(_ %\
    \ 2 == 1).sortBy(_ % 2).reverse\n        val onesArr3 = onesArr2.filter(_ % 2\
    \ == 0).sortBy(_ % 2).reverse\n        val zerosArr3 = zerosArr2.filter(_ % 2\
    \ == 1).sortBy(_ % 2).reverse\n        val onesArr4 = onesArr3.filter(_ % 2 ==\
    \ 0).sortBy(_ % 2).reverse\n        val zerosArr4 = zerosArr3.filter(_ % 2 ==\
    \ 1).sortBy(_ % 2).reverse\n        val onesArr5 = onesArr4.filter(_ % 2 == 0).sortBy(_\
    \ % 2).reverse\n        val zerosArr5 = zerosArr4.filter(_ % 2 == 1).sortBy(_\
    \ % 2).reverse\n        val onesArr6 = onesArr5.filter(_ % 2 == 0).sortBy(_ %\
    \ 2).reverse\n        val zerosArr6 = zerosArr5.filter(_ % 2 == 1).sortBy(_ %\
    \ 2).reverse\n        val onesArr7 = onesArr6.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n\
    \        val zerosArr7 = zerosArr6.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n\
    \        val onesArr8 = onesArr7.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n  \
    \      val zerosArr8 = zerosArr7.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n  \
    \      val onesArr9 = onesArr8.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n    \
    \    val zerosArr9 = zerosArr8.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n    \
    \    val onesArr10 = onesArr9.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n     \
    \   val zerosArr10 = zerosArr9.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n    \
    \    val onesArr11 = onesArr10.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n    \
    \    val zerosArr11 = zerosArr10.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n  \
    \      val onesArr12 = onesArr11.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n  \
    \      val zerosArr12 = zerosArr11.filter", "        val ones = arr.filter(_ %\
    \ 2 == 0).length\n        val zeros = arr.filter(_ % 2 == 1).length\n        val\
    \ onesZeros = arr.filter(_ % 2 == 0).filter(_ % 2 == 1).length\n        val onesOnes\
    \ = arr.filter(_ % 2 == 1).filter(_ % 2 == 1).length\n        val onesZeroOnes\
    \ = arr.filter(_ % 2 == 0).filter(_ % 2 == 1).filter(_ % 2 == 1).length\n    \
    \    val onesOnesOnes = arr.filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2\
    \ == 1).length\n        val onesZeroOnesOnes = arr.filter(_ % 2 == 0).filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).length\n        val onesOnesOnesOnes\
    \ = arr.filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2\
    \ == 1).length\n        val onesZeroOnesOnesOnes = arr.filter(_ % 2 == 0).filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).length\n\
    \        val onesOnesOnesOnesOnes = arr.filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).length\n        val onesZeroOnesOnesOnesOnes\
    \ = arr.filter(_ % 2 == 0).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2\
    \ == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).length\n        val onesOnesOnesOnesOnesOnes\
    \ = arr.filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2\
    \ == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).length\n    \
    \    val onesZeroOnesOnesOnesOnesOnes = arr.filter(_ % 2 == 0).filter(_ % 2 ==\
    \ 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 ==\
    \ 1).filter(_ % 2 == 1).filter(_ % 2 == 1).length\n        val onesOnesOnesOnesOnesOnesOnes\
    \ = arr.filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2\
    \ == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2\
    \ == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).length\n        val onesZeroOnesOnesOnesOnesOnesOnes\
    \ = arr.filter(_ % 2 == 0).filter(_ % 2 == 1).filter(_", "        val ones = arr.filter(_\
    \ == 1l)\n        val zeros = arr.filter(_ == 0l)\n        val onesCount = ones.count\n\
    \        val zerosCount = zeros.count\n        if (onesCount > zerosCount) {\n\
    \            val onesSorted = ones.sortWith(compareByOnesCount)\n            val\
    \ zerosSorted = zeros.sortWith(compareByZeroCount)\n            onesSorted ++\
    \ zerosSorted\n        } else if (zerosCount > onesCount) {\n            val zerosSorted\
    \ = zeros.sortWith(compareByZeroCount)\n            val onesSorted = ones.sortWith(compareByOnesCount)\n\
    \            zerosSorted ++ onesSorted\n        } else {\n            arr\n  \
    \      }", "        val ones = arr.filter(x => x == 1l.toLong).length\n      \
    \  val zeros = arr.filter(x => x == 0l.toLong).length\n        val onesZeros =\
    \ ones + zeros\n        val onesZeroArray = Array.ofDim[Long](onesZeros)\n   \
    \     val onesZeroArrayCopy = onesZeroArray.clone()\n        val onesZeroArrayCopySorted\
    \ = onesZeroArrayCopy.sortWith(_ < _)\n        val onesZeroArraySortedCopy = onesZeroArrayCopySorted.clone()\n\
    \        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArray", "        val\
    \ ones = arr.filter(x => x == 1).toList\n        val zeros = arr.filter(x => x\
    \ == 0).toList\n        val onesCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosCount = zeros.map(x => zeros.count(_ == x)).sum\n        val\
    \ onesDecimal = ones.map(x => x.toString.toInt).sum\n        val zerosDecimal\
    \ = zeros.map(x => x.toString.toInt).sum\n        val onesDecimalCount = ones.map(x\
    \ => ones.count(_ == x)).sum\n        val zerosDecimalCount = zeros.map(x => zeros.count(_\
    \ == x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n        val onesDecimalCount\
    \ = ones.map(x => ones.count(_ == x)).sum\n        val zerosDecimalCount = zeros.map(x\
    \ => zeros.count(_ == x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_\
    \ == x)).sum\n        val zerosDecimalCount = zeros.map(x => zeros.count(_ ==\
    \ x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n        val onesDecimalCount\
    \ = ones.map(x => ones.count(_ == x)).sum\n        val zerosDecimalCount = zeros.map(x\
    \ => zeros.count(_ == x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_\
    \ == x)).sum\n        val zerosDecimalCount = zeros.map(x => zeros.count(_ ==\
    \ x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n        val onesDecimalCount\
    \ = ones.map(", "        val ones = arr.filter(_ == 1).toList\n        val zeros\
    \ = arr.filter(_ == 0).toList\n        val onesCount = ones.map(_.toString.toInt).sum\n\
    \        val zerosCount = zeros.map(_.toString.toInt).sum\n        val onesDecimal\
    \ = onesCount / arr.length\n        val zerosDecimal = zerosCount / arr.length\n\
    \        val onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal", "        val ones = arr.filter(_\
    \ % 2 == 0).length\n        val twos = arr.filter(_ % 2 == 1).length\n       \
    \ val threes = arr.filter(_ % 3 == 0).length\n        val fours = arr.filter(_\
    \ % 4 == 0).length\n        val fives = arr.filter(_ % 5 == 0).length\n      \
    \  val sixes = arr.filter(_ % 6 == 0).length\n        val sevens = arr.filter(_\
    \ % 7 == 0).length\n        val eights = arr.filter(_ % 8 == 0).length\n     \
    \   val nines = arr.filter(_ % 9 == 0).length\n        val tens = arr.filter(_\
    \ % 10 == 0).length\n        val hundreds = arr.filter(_ % 100 == 0).length\n\
    \        val thousands = arr.filter(_ % 1000 == 0).length\n        val tenThousands\
    \ = arr.filter(_ % 10000 == 0).length\n        val oneThousands = arr.filter(_\
    \ % 100000 == 0).length\n        val oneHundreds = arr.filter(_ % 1000000 == 0).length\n\
    \        val oneThousandThousands = arr.filter(_ % 10000000 == 0).length\n   \
    \     val oneThousandHundreds = arr.filter(_ % 100000000 == 0).length\n      \
    \  val oneThousandThousandHundreds = arr.filter(_ % 1000000000 == 0).length\n\
    \        val oneThousandThousandThousandHundreds = arr.filter(_ % 10000000000\
    \ == 0).length\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_\
    \ % 100000000000 == 0).length\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ % 1000000000000 == 0).length\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ % 10000000000000 == 0).length\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ % 100000000000000 == 0).length\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ % 1000000000000000 == 0).length\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ % 10000000000000000 == 0).length\n        val oneThousandThousandThousandThousandThousandTh",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / zerosDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal / onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / zerosDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / onesDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal /\
    \ zerosDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / one", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesZeros = ones + zeros\n        val onesZeros_sorted =\
    \ onesZeros.sortBy(_ / onesZeros)\n        val onesZeros_sorted2 = onesZeros.sortBy(_\
    \ / onesZeros)\n        val onesZeros_sorted3 = onesZeros.sortBy(_ / onesZeros)\n\
    \        val onesZeros_sorted4 = onesZeros.sortBy(_ / onesZeros)\n        val\
    \ onesZeros_sorted5 = onesZeros.sortBy(_ / onesZeros)\n        val onesZeros_sorted6\
    \ = onesZeros.sortBy(_ / onesZeros)\n        val onesZeros_sorted7 = onesZeros.sortBy(_\
    \ / onesZeros)\n        val onesZeros_sorted8 = onesZeros.sortBy(_ / onesZeros)\n\
    \        val onesZeros_sorted9 = onesZeros.sortBy(_ / onesZeros)\n        val\
    \ onesZeros_sorted10 = onesZeros.sortBy(_ / onesZeros)\n        val onesZeros_sorted11\
    \ = onesZeros.sortBy(_ / onesZeros)\n        val onesZeros_sorted12 = onesZeros.sortBy(_\
    \ / onesZeros)\n        val onesZeros_sorted13 = onesZeros.sortBy(_ / onesZeros)\n\
    \        val onesZeros_sorted14 = onesZeros.sortBy(_ / onesZeros)\n        val\
    \ onesZeros_sorted15 = onesZeros.sortBy(_ / onesZeros)\n        val onesZeros_sorted16\
    \ = onesZeros.sortBy(_ / onesZeros)\n        val onesZeros_sorted17 = onesZeros.sortBy(_\
    \ / onesZeros)\n        val onesZeros_sorted18 = onesZeros.sortBy(_ / onesZeros)\n\
    \        val onesZeros_sorted19 = onesZeros.sortBy(_ / onesZeros)\n        val\
    \ onesZeros_sorted20 = onesZeros.sortBy(_ / onesZeros)\n        val onesZeros_sorted21\
    \ = onesZeros.sortBy(_ / onesZeros)\n        val onesZeros_sorted22 = ones", " \
    \       val ones = arr.filter(_ % 2 == 0).length\n        val zeros = arr.filter(_\
    \ % 2 == 1).length\n        val onesArr = arr.filter(_ % 2 == 0).sortBy(_.toString.toInt)\n\
    \        val zerosArr = arr.filter(_ % 2 == 1).sortBy(_.toString.toInt)\n    \
    \    val onesArr2 = onesArr.sortBy(_.toString.toInt)\n        val zerosArr2 =\
    \ zerosArr.sortBy(_.toString.toInt)\n        val onesArr3 = onesArr2.sortBy(_.toString.toInt)\n\
    \        val zerosArr3 = zerosArr2.sortBy(_.toString.toInt)\n        val onesArr4\
    \ = onesArr3.sortBy(_.toString.toInt)\n        val zerosArr4 = zerosArr3.sortBy(_.toString.toInt)\n\
    \        val onesArr5 = onesArr4.sortBy(_.toString.toInt)\n        val zerosArr5\
    \ = zerosArr4.sortBy(_.toString.toInt)\n        val onesArr6 = onesArr5.sortBy(_.toString.toInt)\n\
    \        val zerosArr6 = zerosArr5.sortBy(_.toString.toInt)\n        val onesArr7\
    \ = onesArr6.sortBy(_.toString.toInt)\n        val zerosArr7 = zerosArr6.sortBy(_.toString.toInt)\n\
    \        val onesArr8 = onesArr7.sortBy(_.toString.toInt)\n        val zerosArr8\
    \ = zerosArr7.sortBy(_.toString.toInt)\n        val onesArr9 = onesArr8.sortBy(_.toString.toInt)\n\
    \        val zerosArr9 = zerosArr8.sortBy(_.toString.toInt)\n        val onesArr10\
    \ = onesArr9.sortBy(_.toString.toInt)\n        val zerosArr10 = zerosArr9.sortBy(_.toString.toInt)\n\
    \        val onesArr11 = onesArr10.sortBy(_.toString.toInt)\n        val zerosArr11\
    \ = zerosArr10.sortBy(_.toString.toInt)\n        val onesArr12 = onesArr11.sortBy(_.toString.toInt)\n\
    \        val zerosArr12 = zerosArr11.sortBy(_.toString.toInt)\n        val onesArr13\
    \ = onesArr12.sortBy(_.toString.toInt)\n        val zerosArr13 = zerosArr12.sortBy(_.toString.toInt)\n\
    \        val onesArr14 = onesArr13.sortBy(", "        val ones = arr.count(_ ==\
    \ 1)\n        val zeros = arr.count(_ == 0)\n        val onesArray = arr.map(x\
    \ => if (x == 1) 1 else 0)\n        val zerosArray = arr.map(x => if (x == 0)\
    \ 0 else 1)\n        val onesArraySorted = onesArray.sortWith((x, y) => x < y)\n\
    \        val zerosArraySorted = zerosArray.sortWith((x, y) => x < y)\n       \
    \ val onesArraySortedWithZeros = onesArraySorted.zip(zerosArraySorted)\n     \
    \   val zerosArraySortedWithOnes = zerosArraySorted.zip(onesArraySorted)\n   \
    \     val onesArraySortedWithZerosAndOnes = onesArraySortedWithZeros.zip(zerosArraySortedWithOnes)\n\
    \        val zerosArraySortedWithOnesAndZeros = zerosArraySortedWithOnesAndZeros.map(x\
    \ => if (x._1 == 1) x._2 else x._1)\n        val zerosArraySortedWithOnesAndZerosAndOnes\
    \ = zerosArraySortedWithOnesAndZerosAndOnes.map(x => if (x._1 == 1) x._2 else\
    \ x._1)\n        val zerosArraySortedWithOnesAndZerosAndOnesAndZeros = zerosArraySortedWithOnesAndZerosAndOnesAndZeros.map(x\
    \ => if (x._1 == 1) x._2 else x._1)\n        val zerosArraySortedWithOnesAndZerosAndOnesAndZerosAndOnes\
    \ = zerosArraySortedWithOnesAndZerosAndOnesAndZerosAndOnes.map(x => if (x._1 ==\
    \ 1) x._2 else x._1)\n        val zerosArraySortedWithOnesAndZerosAndOnesAndZerosAndOnesAndZeros\
    \ = zerosArraySortedWithOnesAndZerosAndOnesAndZerosAndOnesAndZeros.map(x => if\
    \ (x._1 == 1) x._2 else x._1)\n        val zerosArraySortedWithOnesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnes\
    \ = zerosArraySortedWithOnesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnes.map(x\
    \ => if (x._1 == 1) x._2 else x._1)\n        val zerosArraySortedWithOnesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnesAndZeros\
    \ = zerosArraySortedWithOnesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnesAndZeros.map(x\
    \ => if (x._1 == ", "        val ones = arr.filter(_ % 2 == 0).length\n      \
    \  val zeros = arr.filter(_ % 2 == 1).length\n        val onesArr = arr.filter(_\
    \ % 2 == 0).sortBy(x => math.abs(x))\n        val zerosArr = arr.filter(_ % 2\
    \ == 1).sortBy(x => math.abs(x))\n        val onesSortedArr = onesArr.take(ones)\n\
    \        val zerosSortedArr = zerosArr.take(zeros)\n        onesSortedArr.zip(zerosSortedArr).sortBy(_._1).map(_._2)",
  "        val ones = arr.filter(_ % 2 == 0).toList\n        val zeros = arr.filter(_\
    \ % 2 == 1).toList\n        val onesCount = ones.map(_.toString.toInt).sum\n \
    \       val zerosCount = zeros.map(_.toString.toInt).sum\n        val onesDecimal\
    \ = ones.map(_.toString.toInt).map(_.toString.toDouble).sum\n        val zerosDecimal\
    \ = zeros.map(_.toString.toInt).map(_.toString.toDouble).sum\n        val onesDecimalDecimal\
    \ = ones.map(_.toString.toInt).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val zerosDecimalDecimal = zeros.map(_.toString.toInt).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val onesDecimalDecimalDecimal = ones.map(_.toString.toInt).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val zerosDecimalDecimalDecimal = zeros.map(_.toString.toInt).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val onesDecimalDecimalDecimalDecimal = ones.map(_.toString.toInt).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val zerosDecimalDecimalDecimalDecimal = zeros.map(_.toString.toInt).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = ones.map(_.toString.toInt).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zeros.map(_.toString.toInt).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = ones.map(_.toString.to",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesZeros = ones + zeros\n        val onesZerosInv = onesZeros / arr.length\n\
    \        val onesZerosInv2 = onesZerosInv * onesZerosInv\n        val onesZerosInv3\
    \ = onesZerosInv2 * onesZerosInv\n        val onesZerosInv4 = onesZerosInv3 *\
    \ onesZerosInv\n        val onesZerosInv5 = onesZerosInv4 * onesZerosInv\n   \
    \     val onesZerosInv6 = onesZerosInv5 * onesZerosInv\n        val onesZerosInv7\
    \ = onesZerosInv6 * onesZerosInv\n        val onesZerosInv8 = onesZerosInv7 *\
    \ onesZerosInv\n        val onesZerosInv9 = onesZerosInv8 * onesZerosInv\n   \
    \     val onesZerosInv10 = onesZerosInv9 * onesZerosInv\n        val onesZerosInv11\
    \ = onesZerosInv10 * onesZerosInv\n        val onesZerosInv12 = onesZerosInv11\
    \ * onesZerosInv\n        val onesZerosInv13 = onesZerosInv12 * onesZerosInv\n\
    \        val onesZerosInv14 = onesZerosInv13 * onesZerosInv\n        val onesZerosInv15\
    \ = onesZerosInv14 * onesZerosInv\n        val onesZerosInv16 = onesZerosInv15\
    \ * onesZerosInv\n        val onesZerosInv17 = onesZerosInv16 * onesZerosInv\n\
    \        val onesZerosInv18 = onesZerosInv17 * onesZerosInv\n        val onesZerosInv19\
    \ = onesZerosInv18 * onesZerosInv\n        val onesZerosInv20 = onesZerosInv19\
    \ * onesZerosInv\n        val onesZerosInv21 = onesZerosInv20 * onesZerosInv\n\
    \        val onesZerosInv22 = onesZerosInv21 * onesZerosInv\n        val onesZerosInv23\
    \ = onesZerosInv22 * onesZerosInv\n        val onesZerosIn", "        val ones\
    \ = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount\
    \ = arr.count(_ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val\
    \ onesDecimal = onesCount / arr.length\n        val zerosDecimal = zerosCount\
    \ / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n   \
    \     val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecim",
  '        arr.sortWith(compare)', "        val ones = arr.filter(x => x.toInt ==\
    \ 1)\n        val zeros = arr.filter(x => x.toInt == 0)\n        val onesCount\
    \ = ones.map(x => x.toInt).sum\n        val zerosCount = zeros.map(x => x.toInt).sum\n\
    \        val onesDecimal = onesCount / arr.length\n        val zerosDecimal =\
    \ zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = ones", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesArray = arr.map(x => if (x == 1) 1 else 0)\n        val\
    \ zerosArray = arr.map(x => if (x == 0) 0 else 1)\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArray.length\n        val zerosArrayLength = zerosArray.length\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArray.length\n      \
    \  val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArray.length\n        val zerosArrayLength = zerosArray.length\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArray.length\n      \
    \  val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArray.length\n        val zerosArrayLength = zerosArray.length\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArray.length\n      \
    \  val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArray.length\n        val zerosArrayLength = zerosArray.length\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArray.length\n      \
    \  val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArray.length\n        val zerosArrayLength = zerosArray.length\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        ", "        val ones = arr.filter(_ % 2 == 0).length\n\
    \        val zeros = arr.filter(_ % 2 == 1).length\n        val onesZeros = arr.filter(_\
    \ % 2 == 0).filter(_ % 2 == 1).length\n        val onesOnes = arr.filter(_ % 2\
    \ == 0).filter(_ % 2 == 1).filter(_ % 2 == 1).length\n        val onesTwos = arr.filter(_\
    \ % 2 == 0).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 2).length\n\
    \        val onesThrees = arr.filter(_ % 2 == 0).filter(_ % 2 == 1).filter(_ %\
    \ 2 == 1).filter(_ % 2 == 2).filter(_ % 2 == 3).length\n        val onesFours\
    \ = arr.filter(_ % 2 == 0).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2\
    \ == 2).filter(_ % 2 == 3).filter(_ % 2 == 4).length\n        val onesFives =\
    \ arr.filter(_ % 2 == 0).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 ==\
    \ 2).filter(_ % 2 == 3).filter(_ % 2 == 4).filter(_ % 2 == 5).length\n       \
    \ val onesSixes = arr.filter(_ % 2 == 0).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_\
    \ % 2 == 2).filter(_ % 2 == 3).filter(_ % 2 == 4).filter(_ % 2 == 5).filter(_\
    \ % 2 == 6).length\n        val onesSevens = arr.filter(_ % 2 == 0).filter(_ %\
    \ 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 2).filter(_ % 2 == 3).filter(_ %\
    \ 2 == 4).filter(_ % 2 == 5).filter(_ % 2 == 6).filter(_ % 2 == 7).length\n  \
    \      val onesEights = arr.filter(_ % 2 == 0).filter(_ % 2 == 1).filter(_ % 2\
    \ == 1).filter(_ % 2 == 2).filter(_ % 2 == 3).filter(_ % 2 == 4).filter(_ % 2\
    \ == 5).filter(_ % 2 == 6).filter(_ % 2 == 7).filter(_ % 2 == 8).length\n    \
    \    val onesNines = arr.filter(_ % 2 == 0).filter(_ % 2 == 1).filter(_ % 2 ==\
    \ 1).filter(_ % 2 == 2).filter(_ % 2 == 3).filter(_ % 2 == 4).filter(_ % 2 ==\
    \ 5).filter(_ % 2 == 6).filter(_ % 2 == 7).filter(_ % 2 == 8).filter(_ % 2 ==\
    \ 9).length\n        val onesTens = arr.filter(_ % 2 == 0).filter(_ % 2 == 1).filter(_\
    \ % 2 == 1).filter(_ % 2 == 2).filter(_ % 2 == 3).filter(_ % 2 == 4).filter(_\
    \ % 2 == 5).filter(_ % ", "        val ones = arr.filter(_ % 2 == 0).length\n\
    \        val zeros = arr.filter(_ % 2 == 1).length\n        val decimals = arr.filter(_\
    \ % 10 == 0).length\n        val decimalsDecimals = arr.filter(_ % 10 == 1).length\n\
    \        val decimalsDecimalsDecimals = arr.filter(_ % 10 == 2).length\n     \
    \   val decimalsDecimalsDecimalsDecimals = arr.filter(_ % 10 == 3).length\n  \
    \      val decimalsDecimalsDecimalsDecimalsDecimals = arr.filter(_ % 10 == 4).length\n\
    \        val decimalsDecimalsDecimalsDecimalsDecimalsDecimals = arr.filter(_ %\
    \ 10 == 5).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 6).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 7).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 8).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 9).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 10).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 11).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 12).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 13).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 14).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 15).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimal",
  "        val ones = arr.filter(_ == 1l.toLong).length\n        val zeros = arr.filter(_\
    \ == 0l.toLong).length\n        val onesZeros = ones + zeros\n        val onesZeros_sorted\
    \ = arr.sortBy(x => (onesZeros - x.toLong))\n        val onesZeros_sorted_reversed\
    \ = onesZeros_sorted.reverse\n        val onesZeros_sorted_reversed_sorted = onesZeros_sorted_reversed.sortBy(x\
    \ => (onesZeros - x.toLong))\n        val onesZeros_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted.reverse\n        val onesZeros_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed.sortBy(x => (onesZeros - x.toLong))\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed = onesZeros_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x => (onesZeros\
    \ - x.toLong))\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x\
    \ => (onesZeros - x.toLong))\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.sortBy(x\
    \ => (onesZeros - x.toLong))\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reverse", "        val ones\
    \ = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesArr\
    \ = arr.filter(_ == 1).sortBy(_.toString.toInt)\n        val zerosArr = arr.filter(_\
    \ == 0).sortBy(_.toString.toInt)\n        val onesArr2 = onesArr.zip(zerosArr).sortBy(_._1).map(_._2)\n\
    \        val zerosArr2 = zerosArr.zip(onesArr).sortBy(_._1).map(_._2)\n      \
    \  onesArr2.toList ++ zerosArr2.toList", "        val ones = arr.count(_ == 1)\n\
    \        val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_ ==\
    \ 1)\n        val zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount\
    \ / arr.length\n        val zerosDecimal = zerosCount / arr.length\n        val\
    \ onesDecimalDecimal = onesDecimal + zerosDecimal\n        val zerosDecimalDecimal\
    \ = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal * 10\n  \
    \      val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(x => x == 1).toList\n        val zeros = arr.filter(x\
    \ => x == 0).toList\n        val onesCount = ones.count(_ == 1)\n        val zerosCount\
    \ = zeros.count(_ == 0)\n        val onesDecimal = onesCount.toDouble / arr.length\n\
    \        val zerosDecimal = zerosCount.toDouble / arr.length\n        val onesDecimalInt\
    \ = onesDecimal.toInt\n        val zerosDecimalInt = zerosDecimal.toInt\n    \
    \    val onesDecimalLong = onesDecimal.toLong\n        val zerosDecimalLong =\
    \ zerosDecimal.toLong\n        val onesDecimalLongInt = onesDecimalLong.toInt\n\
    \        val zerosDecimalLongInt = zerosDecimalLong.toInt\n        val onesDecimalLongLong\
    \ = onesDecimalLong.toLong\n        val zerosDecimalLongLong = zerosDecimalLong.toLong\n\
    \        val onesDecimalLongLongInt = onesDecimalLongLong.toInt\n        val zerosDecimalLongLongInt\
    \ = zerosDecimalLongLong.toInt\n        val onesDecimalLongLongLong = onesDecimalLongLong.toLong\n\
    \        val zerosDecimalLongLongLong = zerosDecimalLongLong.toLong\n        val\
    \ onesDecimalLongLongLongInt = onesDecimalLongLongLong.toInt\n        val zerosDecimalLongLongLongInt\
    \ = zerosDecimalLongLongLong.toInt\n        val onesDecimalLongLongLongLong =\
    \ onesDecimalLongLongLong.toLong\n        val zerosDecimalLongLongLongLong = zerosDecimalLongLongLong.toLong\n\
    \        val onesDecimalLongLongLongLongInt = onesDecimalLongLongLongLong.toInt\n\
    \        val zerosDecimalLongLongLongLongInt = zerosDecimalLongLongLongLong.toInt\n\
    \        val onesDecimalLongLongLongLongLong = onesDecimalLongLongLongLong.toLong\n\
    \        val zerosDecimalLongLongLongLongLong = zerosDecimalLongLongLongLong.toLong\n\
    \        val onesDecimalLongLongLongLongLongInt = onesDecimalLongLongLongLongLong.toInt\n\
    \        val zerosDecimalLongLongLongLongLongInt = zerosDecimalLongLongLongLongLong.toInt\n\
    \        val onesDecimalLongLongLongLongLongLong = onesDecimalLongLongLongLongLongLong.toLong\n\
    \        val zerosDecimalLongLongLongLongLongLong = zerosDecimalLongLongLongLongLongLong.toLong\n\
    \        val onesDecimalLongLongLongLongLongLongInt = onesDecimalLongLongLongLongLongLong",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArr = arr.filter(_ == 1).sortBy(_.toString.toInt)\n        val\
    \ zerosArr = arr.filter(_ == 0).sortBy(_.toString.toInt)\n        val onesCount\
    \ = onesArr.length\n        val zerosCount = zerosArr.length\n        val onesSum\
    \ = onesArr.foldLeft(0L)(_ + _)\n        val zerosSum = zerosArr.foldLeft(0L)(_\
    \ + _)\n        val onesMax = onesSum / onesCount\n        val zerosMax = zerosSum\
    \ / zerosCount\n        val onesMin = onesSum / onesCount * -1\n        val zerosMin\
    \ = zerosSum / zerosCount * -1\n        val onesSumArr = onesArr.sortBy(_.toString.toInt)\n\
    \        val zerosSumArr = zerosArr.sortBy(_.toString.toInt)\n        val onesSumCount\
    \ = onesSumArr.length\n        val zerosSumCount = zerosSumArr.length\n      \
    \  val onesSumMax = onesSumArr.foldLeft(0L)(_ + _) / onesSumCount\n        val\
    \ zerosSumMax = zerosSumArr.foldLeft(0L)(_ + _) / zerosSumCount\n        val onesSumMin\
    \ = onesSumArr.foldLeft(0L)(_ + _) * -1 / onesSumCount\n        val zerosSumMin\
    \ = zerosSumArr.foldLeft(0L)(_ + _) * -1 / zerosSumCount\n        val onesSumSumArr\
    \ = onesSumArr.sortBy(_.toString.toInt)\n        val zerosSumSumArr = zerosSumArr.sortBy(_.toString.toInt)\n\
    \        val onesSumSumCount = onesSumSumArr.length\n        val zerosSumSumCount\
    \ = zerosSumSumArr.length\n        val onesSumMax = onesSumSumArr.foldLeft(0L)(_\
    \ + _) / onesSumSumCount\n        val zerosSumMax = zerosSumSumArr.foldLeft(0L)(_\
    \ + _) / zerosSumSumCount\n        val onesSumMin = onesSumSumArr.foldLeft(0L)(_\
    \ + _) * -1 / onesSumSumCount\n        val zerosSumMin = ", "        val ones\
    \ = arr.filter(x => x == 1).toList\n        val zeros = arr.filter(x => x == 0).toList\n\
    \        val onesCount = ones.count(_ == 1)\n        val zerosCount = zeros.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.size\n        val zerosDecimal\
    \ = zerosCount / arr.size\n        val onesDecimalDecimal = onesDecimal / zerosDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal / onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / zerosDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / onesDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal /\
    \ zerosDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(_ % 2 == 0).toList\n        val zeros = arr.filter(_\
    \ % 2 == 1).toList\n        val onesCount = ones.map(_.toString.toInt).sum\n \
    \       val zerosCount = zeros.map(_.toString.toInt).sum\n        val onesDecimal\
    \ = onesCount / 2\n        val zerosDecimal = zerosCount / 2\n        val onesDecimalDecimal\
    \ = onesDecimal / 2\n        val zerosDecimalDecimal = zerosDecimal / 2\n    \
    \    val onesDecimalDecimalDecimal = onesDecimalDecimal / 2\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / 2\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDeci",
  "        val ones = arr.filter(_ % 2 == 0).length\n        val zeros = arr.filter(_\
    \ % 2 == 1).length\n        val onesArr = arr.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n\
    \        val zerosArr = arr.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n       \
    \ val onesArr2 = onesArr.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n        val\
    \ zerosArr2 = zerosArr.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n        val onesArr3\
    \ = onesArr2.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n        val zerosArr3 =\
    \ zerosArr2.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n        val onesArr4 = onesArr3.filter(_\
    \ % 2 == 0).sortBy(_ % 2).reverse\n        val zerosArr4 = zerosArr3.filter(_\
    \ % 2 == 1).sortBy(_ % 2).reverse\n        val onesArr5 = onesArr4.filter(_ %\
    \ 2 == 0).sortBy(_ % 2).reverse\n        val zerosArr5 = zerosArr4.filter(_ %\
    \ 2 == 1).sortBy(_ % 2).reverse\n        val onesArr6 = onesArr5.filter(_ % 2\
    \ == 0).sortBy(_ % 2).reverse\n        val zerosArr6 = zerosArr5.filter(_ % 2\
    \ == 1).sortBy(_ % 2).reverse\n        val onesArr7 = onesArr6.filter(_ % 2 ==\
    \ 0).sortBy(_ % 2).reverse\n        val zerosArr7 = zerosArr6.filter(_ % 2 ==\
    \ 1).sortBy(_ % 2).reverse\n        val onesArr8 = onesArr7.filter(_ % 2 == 0).sortBy(_\
    \ % 2).reverse\n        val zerosArr8 = zerosArr7.filter(_ % 2 == 1).sortBy(_\
    \ % 2).reverse\n        val onesArr9 = onesArr8.filter(_ % 2 == 0).sortBy(_ %\
    \ 2).reverse\n        val zerosArr9 = zerosArr8.filter(_ % 2 == 1).sortBy(_ %\
    \ 2).reverse\n        val onesArr10 = onesArr9.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n\
    \        val zerosArr10 = zerosArr9.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n\
    \        val onesArr11 = onesArr10.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n\
    \        val zerosArr11 = zerosArr10.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n\
    \        val onesArr12 = onesArr11.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n\
    \        val zerosArr12 = zerosArr11.filter", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesZeros = ones +\
    \ zeros\n        val onesZeros_sorted = arr.sortWith(x => onesZeros_sorted - x)\n\
    \        val onesZeros_sortedWithOnes = onesZeros_sorted.take(ones)\n        val\
    \ onesZeros_sortedWithOnesZeros = onesZeros_sortedWithOnes.take(zeros)\n     \
    \   val onesZeros_sortedWithOnesZeros_sorted = onesZeros_sortedWithOnesZeros.sortWith(x\
    \ => x - onesZeros_sortedWithOnesZeros)\n        onesZeros_sortedWithOnesZeros_sorted",
  "        val ones = arr.filter(x => x == 1).toList\n        val zeros = arr.filter(x\
    \ => x == 0).toList\n        val onesCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosCount = zeros.map(x => zeros.count(_ == x)).sum\n        val\
    \ onesDecimal = ones.map(x => x.toString.toInt).sum\n        val zerosDecimal\
    \ = zeros.map(x => x.toString.toInt).sum\n        val onesDecimalCount = ones.map(x\
    \ => ones.count(_ == x)).sum\n        val zerosDecimalCount = zeros.map(x => zeros.count(_\
    \ == x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n        val onesDecimalCount\
    \ = ones.map(x => ones.count(_ == x)).sum\n        val zerosDecimalCount = zeros.map(x\
    \ => zeros.count(_ == x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_\
    \ == x)).sum\n        val zerosDecimalCount = zeros.map(x => zeros.count(_ ==\
    \ x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n        val onesDecimalCount\
    \ = ones.map(x => ones.count(_ == x)).sum\n        val zerosDecimalCount = zeros.map(x\
    \ => zeros.count(_ == x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_\
    \ == x)).sum\n        val zerosDecimalCount = zeros.map(x => zeros.count(_ ==\
    \ x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n        val onesDecimalCount\
    \ = ones.map(", "        val ones = arr.filter(x => x == 1).toList\n        val\
    \ zeros = arr.filter(x => x == 0).toList\n        val onesCount = ones.map(x =>\
    \ ones.count(_ == x)).sum\n        val zerosCount = zeros.map(x => zeros.count(_\
    \ == x)).sum\n        val onesDecimal = ones.map(x => x.toString.toDouble).sum\n\
    \        val zerosDecimal = zeros.map(x => x.toString.toDouble).sum\n        val\
    \ onesDecimalDecimal = onesDecimal.toString.toDouble\n        val zerosDecimalDecimal\
    \ = zerosDecimal.toString.toDouble\n        val onesDecimalDecimalDecimal = onesDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val ", '        arr.sortWith(compare)', "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_\
    \ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val onesDecimal =\
    \ onesCount / arr.length\n        val zerosDecimal = zerosCount / arr.length\n\
    \        val onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal ",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArr = arr.filter(_ == 1).sortBy(_.toString.toInt)\n        val\
    \ zerosArr = arr.filter(_ == 0).sortBy(_.toString.toInt)\n        val onesCount\
    \ = onesArr.length\n        val zerosCount = zerosArr.length\n        val onesSum\
    \ = onesArr.foldLeft(0L)(_ + _)\n        val zerosSum = zerosArr.foldLeft(0L)(_\
    \ + _)\n        val onesMax = onesSum / onesCount\n        val zerosMax = zerosSum\
    \ / zerosCount\n        val onesMin = onesSum / onesCount\n        val zerosMin\
    \ = zerosSum / zerosCount\n        val onesAvg = onesSum / onesCount\n       \
    \ val zerosAvg = zerosSum / zerosCount\n        val onesDev = onesSum / onesCount\n\
    \        val zerosDev = zerosSum / zerosCount\n        val onesDeviation = onesSum\
    \ / onesCount - onesAvg\n        val zerosDeviation = zerosSum / zerosCount -\
    \ zerosAvg\n        val onesVariance = onesDev / onesCount\n        val zerosVariance\
    \ = zerosDev / zerosCount\n        val onesStandardDeviation = math.sqrt(onesVariance)\n\
    \        val zerosStandardDeviation = math.sqrt(zerosVariance)\n        val onesStandardError\
    \ = math.sqrt((onesVariance - onesStandardDeviation) * (onesVariance - onesStandardDeviation))\n\
    \        val zerosStandardError = math.sqrt((zerosVariance - zerosStandardDeviation)\
    \ * (zerosVariance - zerosStandardDeviation))\n        val onesVarianceDeviation\
    \ = onesStandardDeviation / onesCount\n        val zerosVarianceDeviation = zerosStandardDeviation\
    \ / zerosCount\n        val onesVarianceStandardError = math.sqrt((onesVarianceDeviation\
    \ - onesStandardError) * (onesVarianceDeviation - onesStandardError))\n      \
    \  val zerosVarianceStandardError = math.sqrt((zerosVarianceDeviation - zerosStandardError)\
    \ * (zerosVarianceDeviation - zerosStandardError))\n        val onesVarianceStandardDeviation\
    \ = onesStandardError / onesCount\n        val zerosVarianceStandardDeviation\
    \ = zerosStandardError / zerosCount\n", "        val ones = arr.filter(_ % 2 ==\
    \ 0).length\n        val zeros = arr.filter(_ % 2 == 1).length\n        val onesArr\
    \ = arr.filter(_ % 2 == 0).map(_.toLong)\n        val zerosArr = arr.filter(_\
    \ % 2 == 1).map(_.toLong)\n        val onesArr = onesArr.sortBy(_.toInt)\n   \
    \     val zerosArr = zerosArr.sortBy(_.toInt)\n        val onesArr = onesArr.sortBy(_.toLong)\n\
    \        val zerosArr = zerosArr.sortBy(_.toLong)\n        val onesArr = onesArr.sortBy(_.toInt)\n\
    \        val zerosArr = zerosArr.sortBy(_.toInt)\n        val onesArr = onesArr.sortBy(_.toLong)\n\
    \        val zerosArr = zerosArr.sortBy(_.toLong)\n        val onesArr = onesArr.sortBy(_.toInt)\n\
    \        val zerosArr = zerosArr.sortBy(_.toInt)\n        val onesArr = onesArr.sortBy(_.toLong)\n\
    \        val zerosArr = zerosArr.sortBy(_.toLong)\n        val onesArr = onesArr.sortBy(_.toInt)\n\
    \        val zerosArr = zerosArr.sortBy(_.toInt)\n        val onesArr = onesArr.sortBy(_.toLong)\n\
    \        val zerosArr = zerosArr.sortBy(_.toLong)\n        val onesArr = onesArr.sortBy(_.toInt)\n\
    \        val zerosArr = zerosArr.sortBy(_.toInt)\n        val onesArr = onesArr.sortBy(_.toLong)\n\
    \        val zerosArr = zerosArr.sortBy(_.toLong)\n        val onesArr = onesArr.sortBy(_.toInt)\n\
    \        val zerosArr = zerosArr.sortBy(_.toInt)\n        val onesArr = onesArr.sortBy(_.toLong)\n\
    \        val zerosArr = zerosArr.sortBy(_.toLong)\n        val onesArr = onesArr.sortBy(_.toInt)\n\
    \        val zerosArr = zerosArr.sortBy(_.toInt)\n        val onesArr = onesArr.sortBy(_.toLong)\n\
    \        val zerosArr = zerosArr.sortBy(_.toLong)\n        val onesAr", "    \
    \    val ones = arr.filter(_ == 1).length\n        val zeros = arr.filter(_ ==\
    \ 0).length\n        val onesArr = arr.filter(_ == 1).map(_.toLong)\n        val\
    \ zerosArr = arr.filter(_ == 0).map(_.toLong)\n        val onesArr = onesArr.sortBy(_.toInt)\n\
    \        val zerosArr = zerosArr.sortBy(_.toInt)\n        val result = onesArr.zip(zerosArr).sortBy(_._1).map(x\
    \ => x._2)\n        result", "        val ones = arr.filter(_ % 2 == 0).toList\n\
    \        val zeros = arr.filter(_ % 2 == 1).toList\n        val onesZeros = ones\
    \ + zeros\n        val onesZeroCount = onesZeros.map(_.toLong).sum\n        val\
    \ zeroCount = zeros.map(_.toLong).sum\n        val onesZeroCountAndZeroCount =\
    \ onesZeroCount + zeroCount\n        val onesZeroCountAndZeroCountAndOnesZeroCount\
    \ = onesZeroCountAndZeroCount + onesZeroCount\n        val onesZeroCountAndZeroCountAndOnesZeroCountAndOnesZeroCount\
    \ = onesZeroCountAndZeroCountAndOnesZeroCount + onesZeroCountAndOnesZeroCount\n\
    \        val onesZeroCountAndZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCount\
    \ = onesZeroCountAndZeroCountAndOnesZeroCountAndOnesZeroCount + onesZeroCountAndOnesZeroCountAndOnesZeroCount\n\
    \        val onesZeroCountAndZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCount\
    \ = onesZeroCountAndZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCount\
    \ + onesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCount\n\
    \        val onesZeroCountAndZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCount\
    \ = onesZeroCountAndZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCount\
    \ + onesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCount\n\
    \        val onesZeroCountAndZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCount\
    \ = onesZeroCountAndZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCount\
    \ + onesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOnesZeroCountAndOne",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesDecimal\n        val zerosDecimalDecimalDecimal =\
    \ zerosDecimalDecimal / zerosDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / onesDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimal", "        val ones = arr.count(_ == 1)\n        val\
    \ zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n     \
    \   val zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount /\
    \ arr.length\n        val zerosDecimal = zerosCount / arr.length\n        val\
    \ onesDecimalDecimal = onesDecimal + zerosDecimal\n        val zerosDecimalDecimal\
    \ = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal.toDouble\
    \ / Math.pow(10, zerosDecimalDecimal)\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal.toDouble / Math.pow(10, onesDecimalDecimal)\n        val\
    \ onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, zerosDecimalDecimalDecimal)\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal.toDouble / Math.pow(10, onesDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, zerosDecimalDecimalDecimalDecimal)\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal.toDouble / Math.pow(10, onesDecimalDecimalDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, zerosDecimalDecimalDecimalDecimalDecimal)\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / Math.pow(10, onesDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, zerosDecimalDecimalDecimalDecimalDecimalDecimal)\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(_ % 2 == 0).toList\n        val zeros = arr.filter(_\
    \ % 2 == 1).toList\n        val onesCount = ones.map(x => ones.count(_ == x))\n\
    \        val zerosCount = zeros.map(x => zeros.count(_ == x))\n        val onesZeros\
    \ = ones.zip(zeros)\n        val onesZeroCount = onesZeros.map(x => onesZeros.count(_\
    \ == x))\n        val onesZeroCountSorted = onesZeroCount.sortBy(x => x._1)\n\
    \        val onesZeroCountSortedSortedList = onesZeroCountSorted.toList\n    \
    \    val onesZeroCountSortedSortedListSorted = onesZeroCountSortedSortedList.sortBy(x\
    \ => x._2)\n        val onesZeroCountSortedSortedListSortedSorted = onesZeroCountSortedSortedListSorted.toList\n\
    \        val onesZeroCountSortedSortedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArray = arr.map(x => if (x == 1) 1 else 0)\n        val zerosArray\
    \ = arr.map(x => if (x == 0) 0 else 1)\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArrayLength\
    \ = onesArrayLength + zerosArrayLength\n        val onesArray = onesArray.take(onesArrayLength)\n\
    \        val zerosArray = zerosArray.take(zerosArrayLength)\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArray = onesArray.take(onesArrayLength)\n        val zerosArray =\
    \ zerosArray.take(zerosArrayLength)\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArray = onesArray.take(onesArrayLength)\n\
    \        val zerosArray = zerosArray.take(zerosArrayLength)\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArray = onesArray.take(onesArrayLength)\n        val zerosArray =\
    \ zerosArray.take(zerosArrayLength)\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArray = onesArray.take(onesArrayLength)\n\
    \        val zerosArray = zerosArray.take(zerosArrayLength)\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArray = onesArray.take(onesArrayLength)\n        val zerosArray =\
    \ zerosArray.take(zerosArrayLength)\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArray = onesArray.take(onesArrayLength)\n\
    \        val zerosArray = zerosArray.take(zerosArrayLength)\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArray = onesArray.take(onesArrayLength)\n        val zerosArray =\
    \ zerosArray.take(zerosArrayLength)\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArray = onesArray.take(onesArrayLength)\n\
    \        ", '        arr.sortWith(compare)', "        val ones = arr.filter(x\
    \ => x % 2 == 0).toList\n        val zeros = arr.filter(x => x % 2 == 1).toList\n\
    \        val onesCount = ones.map(x => x.toInt).sum\n        val zerosCount =\
    \ zeros.map(x => x.toInt).sum\n        val onesDecimal = ones.map(x => x.toLong).sum\n\
    \        val zerosDecimal = zeros.map(x => x.toLong).sum\n        val onesDecimalDecimal\
    \ = ones.map(x => x.toLong).map(x => x.toLong).sum\n        val zerosDecimalDecimal\
    \ = zeros.map(x => x.toLong).map(x => x.toLong).sum\n        val onesDecimalDecimalDecimal\
    \ = ones.map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).sum\n      \
    \  val zerosDecimalDecimalDecimal = zeros.map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).sum\n        val onesDecimalDecimalDecimalDecimal = ones.map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).sum\n\
    \        val zerosDecimalDecimalDecimalDecimal = zeros.map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).sum\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = ones.map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).sum\n        val zerosDecimalDecimalDecimalDecimalDecimal = zeros.map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).sum\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = ones.map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).sum\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zeros.map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).sum\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = ones.map(x => x.toLong).", "        val ones = arr.filter(_ % 2 == 0).toList\n\
    \        val zeros = arr.filter(_ % 2 == 1).toList\n        val onesCount = ones.map(x\
    \ => x.toInt).sum\n        val zerosCount = zeros.map(x => x.toInt).sum\n    \
    \    val onesDecimal = ones.map(x => x.toInt).map(x => x / onesCount).sortBy(x\
    \ => x)\n        val zerosDecimal = zeros.map(x => x.toInt).map(x => x / zerosCount).sortBy(x\
    \ => x)\n        val onesDecimalList = onesDecimal.toList\n        val zerosDecimalList\
    \ = zerosDecimal.toList\n        val onesDecimalListLength = onesDecimalList.length\n\
    \        val zerosDecimalListLength = zerosDecimalList.length\n        val onesDecimalListLength\
    \ = onesDecimalListLength > 0 ? onesDecimalListLength : 1\n        val zerosDecimalListLength\
    \ = zerosDecimalListLength > 0 ? zerosDecimalListLength : 1\n        val onesDecimalListLength\
    \ = onesDecimalListLength > 0 ? onesDecimalListLength : 1\n        val zerosDecimalListLength\
    \ = zerosDecimalListLength > 0 ? zerosDecimalListLength : 1\n        val onesDecimalListLength\
    \ = onesDecimalListLength > 0 ? onesDecimalListLength : 1\n        val zerosDecimalListLength\
    \ = zerosDecimalListLength > 0 ? zerosDecimalListLength : 1\n        val onesDecimalListLength\
    \ = onesDecimalListLength > 0 ? onesDecimalListLength : 1\n        val zerosDecimalListLength\
    \ = zerosDecimalListLength > 0 ? zerosDecimalListLength : 1\n        val onesDecimalListLength\
    \ = onesDecimalListLength > 0 ? onesDecimalListLength : 1\n        val zerosDecimalListLength\
    \ = zerosDecimalListLength > 0 ? zerosDecimalListLength : 1\n        val onesDecimalListLength\
    \ = onesDecimalListLength > 0 ? onesDecimalListLength : 1\n        val zerosDecimalListLength\
    \ = zerosDecimalListLength > 0 ? zerosDecimalListLength : 1\n        val onesDecimalListLength\
    \ = onesDecimalListLength > 0 ? onesDecimalListLength : 1\n        val zerosDecimalListLength\
    \ = zerosDecimalListLength > 0 ? zerosDecimalListLength : 1\n        val onesDecimalListLength\
    \ = onesDecimalListLength > 0 ? onesDecimalListLength : 1\n        val zerosDecimalListLength\
    \ = zerosDecimalListLength > 0 ? zerosDecimalListLength : 1\n        val onesDecimalListLength\
    \ = onesDecimalListLength > 0 ? onesDecimalListLength : 1\n        val zerosDecimalList",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / zerosDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal / onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / zerosDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / onesDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal /\
    \ zerosDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimal", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesArray = arr.map(x\
    \ => (x % 2) == 1).sorted\n        val zerosArray = arr.map(x => (x % 2) == 0).sorted\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArrayLength + zerosArrayLength\n\
    \        val zeros = ones - onesArrayLength\n        val onesArray = onesArray.take(onesArrayLength)\n\
    \        val zerosArray = zerosArray.take(zerosArrayLength)\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArrayLength + zerosArrayLength\n        val zeros\
    \ = ones - onesArrayLength\n        val onesArray = onesArray.take(onesArrayLength)\n\
    \        val zerosArray = zerosArray.take(zerosArrayLength)\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArrayLength + zerosArrayLength\n        val zeros\
    \ = ones - onesArrayLength\n        val onesArray = onesArray.take(onesArrayLength)\n\
    \        val zerosArray = zerosArray.take(zerosArrayLength)\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArrayLength + zerosArrayLength\n        val zeros\
    \ = ones - onesArrayLength\n        val onesArray = onesArray.take(onesArrayLength)\n\
    \        val zerosArray = zerosArray.take(zerosArrayLength)\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArrayLength + zerosArrayLength\n        val zeros\
    \ = ones - onesArrayLength\n        val onesArray = onesArray.take(onesArrayLength)\n\
    \        val zerosArray = zerosArray.take(zerosArrayLength)\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArrayLength + zerosArrayLength\n        val zeros\
    \ = ones - onesArrayLength\n        val onesArray = onesArray.take(onesArrayLength)\n\
    \        val zerosArray = zerosArray.take(zerosArray", "        val ones = arr.filter(x\
    \ => x == 1).toList\n        val zeros = arr.filter(x => x == 0).toList\n    \
    \    val onesCount = ones.size\n        val zerosCount = zeros.size\n        val\
    \ onesDecimal = onesCount / 2\n        val zerosDecimal = zerosCount / 2\n   \
    \     val onesDecimalDecimal = onesDecimal / 2\n        val zerosDecimalDecimal\
    \ = zerosDecimal / 2\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / 2\n    \
    \    val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / 2\n  \
    \      val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal / 2\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 2\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 2\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDeci",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArr = arr.filter(_ == 1).sortBy(_.toString.toInt)\n        val\
    \ zerosArr = arr.filter(_ == 0).sortBy(_.toString.toInt)\n        val onesCount\
    \ = onesArr.length\n        val zerosCount = zerosArr.length\n        val onesMax\
    \ = onesArr.max\n        val zerosMax = zerosArr.max\n        val onesMin = onesArr.min\n\
    \        val zerosMin = zerosArr.min\n        val onesSum = onesArr.sum\n    \
    \    val zerosSum = zerosArr.sum\n        val onesAvg = onesSum / onesCount\n\
    \        val zerosAvg = zerosSum / zerosCount\n        val onesDev = onesCount\
    \ * onesAvg - onesSum * onesAvg\n        val zerosDev = zerosCount * zerosAvg\
    \ - zerosSum * zerosAvg\n        val onesDeviation = onesDev / onesCount\n   \
    \     val zerosDeviation = zerosDev / zerosCount\n        val onesVariance = onesCount\
    \ * onesDeviation\n        val zerosVariance = zerosCount * zerosDeviation\n \
    \       val onesStdDev = onesVariance / onesCount\n        val zerosStdDev = zerosVariance\
    \ / zerosCount\n        val onesStdDeviation = onesStdDev / onesCount\n      \
    \  val zerosStdDeviation = zerosStdDev / zerosCount\n        val onesMinMax =\
    \ onesMin + onesMax\n        val zerosMinMax = zerosMin + zerosMax\n        val\
    \ onesMinMaxSum = onesMinMax.sum\n        val zerosMinMaxSum = zerosMinMax.sum\n\
    \        val onesMinMaxAvg = onesMinMaxSum / onesCount\n        val zerosMinMaxAvg\
    \ = zerosMinMaxSum / zerosCount\n        val onesMinMaxDev = onesMinMaxSum * onesAvg\
    \ - onesMinMaxSum * onesAvg\n        val zerosMinMaxDev = zerosMinMaxSum * zerosAvg\
    \ - zerosMinMaxSum * zerosAvg\n        val onesMinMaxVariance = onesMinMaxSum\
    \ * onesDeviation\n        val zerosMinMaxVariance = zerosMinMaxSum * zerosDeviation\n\
    \        val onesMinMaxStd", "        val ones = arr.count(_ == 1)\n        val\
    \ zeros = arr.count(_ == 0)\n        val onesZeros = ones + zeros\n        val\
    \ onesZeros_sorted = arr.sortBy(x => if (x == 1l.toLong) onesZeros else x.toString.toLong)\n\
    \        val onesZeros_sorted2 = onesZeros_sorted.sortBy(x => if (x == 1l.toLong)\
    \ onesZeros else x.toString.toLong)\n        val onesZeros_sorted3 = onesZeros_sorted.sortBy(x\
    \ => if (x == 1l.toLong) onesZeros else x.toString.toLong)\n        val onesZeros_sorted4\
    \ = onesZeros_sorted.sortBy(x => if (x == 1l.toLong) onesZeros else x.toString.toLong)\n\
    \        val onesZeros_sorted5 = onesZeros_sorted.sortBy(x => if (x == 1l.toLong)\
    \ onesZeros else x.toString.toLong)\n        val onesZeros_sorted6 = onesZeros_sorted.sortBy(x\
    \ => if (x == 1l.toLong) onesZeros else x.toString.toLong)\n        val onesZeros_sorted7\
    \ = onesZeros_sorted.sortBy(x => if (x == 1l.toLong) onesZeros else x.toString.toLong)\n\
    \        val onesZeros_sorted8 = onesZeros_sorted.sortBy(x => if (x == 1l.toLong)\
    \ onesZeros else x.toString.toLong)\n        val onesZeros_sorted9 = onesZeros_sorted.sortBy(x\
    \ => if (x == 1l.toLong) onesZeros else x.toString.toLong)\n        val onesZeros_sorted10\
    \ = onesZeros_sorted.sortBy(x => if (x == 1l.toLong) onesZeros else x.toString.toLong)\n\
    \        val onesZeros_sorted11 = onesZeros_sorted.sortBy(x => if (x == 1l.toLong)\
    \ onesZeros else x.toString.toLong)\n        val onesZeros_sorted12 = onesZeros_sorted.sortBy(x\
    \ => if (x == 1l.toLong) onesZeros else x.toString.toLong)\n        val onesZeros_sorted13\
    \ = onesZeros_sorted.sortBy(x => if (x == 1l.toLong) onesZeros else x.toString.toLong)\n\
    \        val onesZeros_sorted14 = onesZeros_sorted.sortBy(x ", "        val ones\
    \ = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount\
    \ = arr.count(_ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val\
    \ onesDecimal = ones / onesCount\n        val zerosDecimal = zeros / zerosCount\n\
    \        val onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesZeros = arr.count(_ == 1 && _ == 0)\n        val onesOnes\
    \ = arr.count(_ == 1 && _ == 1)\n        val onesZeroOnes = arr.count(_ == 1 &&\
    \ _ == 0 && _ == 1)\n        val onesOnesOnes = arr.count(_ == 1 && _ == 1 &&\
    \ _ == 1)\n        val onesZeroOnesOnes = arr.count(_ == 1 && _ == 0 && _ == 1\
    \ && _ == 1)\n        val onesOnesZeroOnesOnes = arr.count(_ == 1 && _ == 1 &&\
    \ _ == 0 && _ == 1)\n        val onesZeroOnesOnesOnes = arr.count(_ == 1 && _\
    \ == 0 && _ == 1 && _ == 1)\n        val onesOnesZeroOnesZeroOnes = arr.count(_\
    \ == 1 && _ == 1 && _ == 0 && _ == 0)\n        val onesZeroOnesOnesZeroOnes =\
    \ arr.count(_ == 1 && _ == 0 && _ == 1 && _ == 0)\n        val onesOnesZeroOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 1 && _ == 0 && _ == 0)\n        val onesZeroOnesOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 0 && _ == 1 && _ == 0)\n        val onesOnesZeroOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 1 && _ == 0 && _ == 0)\n        val onesZeroOnesOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 0 && _ == 1 && _ == 0)\n        val onesOnesZeroOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 1 && _ == 0 && _ == 0)\n        val onesZeroOnesOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 0 && _ == 1 && _ == 0)\n        val onesOnesZeroOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 1 && _ == 0 && _ == 0)\n        val onesZeroOnesOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 0 && _ == 1 && _ == 0)\n        val onesOnesZeroOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 1 && _ == 0 && _ == 0)\n        val onesZeroOnesOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 0 && _ == 1 && _ == 0)\n        val onesOnesZeroOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 1 && _ == 0 && ", "        val ones = arr.filter(x\
    \ => x % 2l.toLong == 0l.toLong)\n        val zeros = arr.filter(x => x % 2l.toLong\
    \ != 0l.toLong)\n        val onesCount = ones.map(x => x.toLong).count(x => x\
    \ == 1l.toLong)\n        val zerosCount = zeros.map(x => x.toLong).count(x =>\
    \ x == 0l.toLong)\n        val onesDecimal = ones.map(x => x.toLong).map(x =>\
    \ x.toInt).sum\n        val zerosDecimal = zeros.map(x => x.toLong).map(x => x.toInt).sum\n\
    \        val onesDecimalDecimal = onesDecimal + zerosDecimal\n        val zerosDecimalDecimal\
    \ = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ + zerosDecimalDecimal\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ + onesDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ + zerosDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal + onesDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal +\
    \ zerosDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal + onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ + zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal + onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ + zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ + onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ + zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ + onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal", "        val ones\
    \ = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesZeros\
    \ = ones + zeros\n        val onesZeros_sorted = arr.sortBy(_ - onesZeros)\n \
    \       val onesZeros_sorted_reversed = onesZeros_sorted.reverse\n        val\
    \ onesZeros_sorted_reversed_sorted = onesZeros_sorted_reversed.sortBy(_ - onesZeros)\n\
    \        val onesZeros_sorted_reversed_sorted_reversed = onesZeros_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted = onesZeros_sorted_reversed_sorted_reversed.sortBy(_\
    \ - onesZeros)\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted.reverse\n        onesZeros_sorted_reversed_sorted_reversed_sorted_reversed",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesZeros = ones + zeros\n        val onesZeroArray = arr.map(x =>\
    \ (x % onesZeros, x)).toArray\n        val onesZeroArraySorted = onesZeroArray.sortBy(_._1).map(x\
    \ => x._2)\n        val onesZeroArraySortedWithZeros = onesZeroArraySorted.take(onesZeros)\n\
    \        val onesZeroArraySortedWithOnes = onesZeroArraySorted.drop(onesZeros)\n\
    \        val onesZeroArraySortedWithOnesAndZeros = onesZeroArraySortedWithOnes\
    \ ++ onesZeroArraySortedWithZeros\n        val onesZeroArraySortedWithOnesAndZerosAndOnes\
    \ = onesZeroArraySortedWithOnesAndZeros ++ onesZeroArraySortedWithOnes\n     \
    \   val onesZeroArraySortedWithOnesAndZerosAndOnesAndZeros = onesZeroArraySortedWithOnesAndZerosAndOnes\
    \ ++ onesZeroArraySortedWithOnesAndZeros\n        val onesZeroArraySortedWithOnesAndZerosAndOnesAndZeros\
    \ = onesZeroArraySortedWithOnesAndZerosAndOnesAndZeros\n        val onesZeroArraySortedWithOnesAndZerosAndOnesAndZeros\
    \ = onesZeroArraySortedWithOnesAndZerosAndOnesAndZeros\n        val onesZeroArraySortedWithOnesAndZerosAndOnesAndZeros\
    \ = onesZeroArraySortedWithOnesAndZerosAndOnesAndZeros\n        val onesZeroArraySortedWithOnesAndZerosAndOnesAndZeros\
    \ = onesZeroArraySortedWithOnesAndZerosAndOnesAndZeros\n        val onesZeroArraySortedWithOnesAndZerosAndOnesAndZeros\
    \ = onesZeroArraySortedWithOnesAndZerosAndOnesAndZeros\n        val onesZeroArraySortedWithOnesAndZerosAndOnesAndZeros\
    \ = onesZeroArraySortedWithOnesAndZerosAndOnesAndZeros\n        val onesZeroArraySortedWithOnesAndZerosAndOnesAndZeros\
    \ = onesZeroArraySortedWithOnesAndZerosAndOnesAndZeros\n        val onesZeroArraySortedWithOnesAndZerosAndOnesAndZeros\
    \ = onesZeroArraySortedWithOnesAndZerosAndOnesAndZeros\n        val onesZeroArraySortedWithOnesAndZerosAndOnesAndZeros\
    \ = onesZeroArraySortedWithOnesAndZerosAndOnesAndZ", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_\
    \ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val onesDecimal =\
    \ onesCount / arr.length\n        val zerosDecimal = zerosCount / arr.length\n\
    \        val onesDecimalDecimal = onesDecimal + zerosDecimal\n        val zerosDecimalDecimal\
    \ = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal.toDouble\
    \ / Math.pow(10, zerosDecimalDecimal)\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal.toDouble / Math.pow(10, onesDecimalDecimal)\n        val\
    \ onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, zerosDecimalDecimalDecimal)\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal.toDouble / Math.pow(10, onesDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, zerosDecimalDecimalDecimalDecimal)\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal.toDouble / Math.pow(10, onesDecimalDecimalDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, zerosDecimalDecimalDecimalDecimalDecimal)\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / Math.pow(10, onesDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, zerosDecimalDecimalDecimalDecimalDecimalDecimal)\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / Math.pow(10, onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(_ % 2 == 0).length\n        val zeros = arr.filter(_\
    \ % 2 == 1).length\n        val onesZeros = ones + zeros\n        val onesZeros_arr\
    \ = arr.filter(_ % 2 == 0).sortBy(_ % onesZeros)\n        val zerosOnes_arr =\
    \ arr.filter(_ % 2 == 1).sortBy(_ % onesZeros)\n        onesZeros_arr.toList ++\
    \ zerosOnes_arr.toList", "        val ones = arr.filter(_ % 2 == 0).length\n \
    \       val zeros = arr.filter(_ % 2 == 1).length\n        val onesArr = arr.filter(_\
    \ % 2 == 0).map(x => x.toLong)\n        val zerosArr = arr.filter(_ % 2 == 1).map(x\
    \ => x.toLong)\n        val onesArr = onesArr.sortWith((x, y) => x - y)\n    \
    \    val zerosArr = zerosArr.sortWith((x, y) => x - y)\n        val onesArr =\
    \ onesArr.sortWith((x, y) => x - y)\n        val zerosArr = zerosArr.sortWith((x,\
    \ y) => x - y)\n        val onesArr = onesArr.sortWith((x, y) => x - y)\n    \
    \    val zerosArr = zerosArr.sortWith((x, y) => x - y)\n        val onesArr =\
    \ onesArr.sortWith((x, y) => x - y)\n        val zerosArr = zerosArr.sortWith((x,\
    \ y) => x - y)\n        val onesArr = onesArr.sortWith((x, y) => x - y)\n    \
    \    val zerosArr = zerosArr.sortWith((x, y) => x - y)\n        val onesArr =\
    \ onesArr.sortWith((x, y) => x - y)\n        val zerosArr = zerosArr.sortWith((x,\
    \ y) => x - y)\n        val onesArr = onesArr.sortWith((x, y) => x - y)\n    \
    \    val zerosArr = zerosArr.sortWith((x, y) => x - y)\n        val onesArr =\
    \ onesArr.sortWith((x, y) => x - y)\n        val zerosArr = zerosArr.sortWith((x,\
    \ y) => x - y)\n        val onesArr = onesArr.sortWith((x, y) => x - y)\n    \
    \    val zerosArr = zerosArr.sortWith((x, y) => x - y)\n        val onesArr =\
    \ onesArr.sortWith((x, y) => x - y)\n        val zerosArr = zerosArr.sortWith((x,\
    \ y) => x - y)\n        val onesArr = onesArr.sortWith((x, y) => x - y)\n    \
    \    val zerosArr = zerosArr.sortWith((x, y) => x - y)\n        val onesArr =\
    \ onesArr.sortWith((x, y) => x - y)\n        val zerosArr = zerosArr.sortWith((x,\
    \ y) => x - y)\n        val onesArr = onesArr.sortWith((x, y) => x - y)\n    \
    \    val zerosArr = zerosArr.sortWith((x, y) => x - y)\n        val onesArr =\
    \ one", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ", "        val ones = arr.filter(x => x == 1l)\n        val zeros = arr.filter(x\
    \ => x == 0l)\n        val onesCount = ones.map(x => 1l).count(_ == 1)\n     \
    \   val zerosCount = zeros.map(x => 0l).count(_ == 0)\n        val onesDecimal\
    \ = onesCount.toDouble / arr.length\n        val zerosDecimal = zerosCount.toDouble\
    \ / arr.length\n        val onesDecimalDecimal = onesDecimal / Math.pow(10, arr.length)\n\
    \        val zerosDecimalDecimal = zerosDecimal / Math.pow(10, arr.length)\n \
    \       val onesDecimalDecimalDecimal = onesDecimalDecimal / Math.pow(10, arr.length)\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / Math.pow(10, arr.length)\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / Math.pow(10,\
    \ arr.length)\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / Math.pow(10, arr.length)\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / Math.pow(10, arr.length)\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / Math.pow(10, arr.length)\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.length)\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / Math.pow(10, arr.length)\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.length)\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / Math.pow(10, arr.length)\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.length)\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / Math.pow(10, arr.length)\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.length)\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / Math.pow(10, arr.length)\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(_ == 1).toList\n        val zeros = arr.filter(_\
    \ == 0).toList\n        val onesCount = ones.count\n        val zerosCount = zeros.count\n\
    \        val onesDecimal = ones.map(_.toString.toInt).sum / onesCount\n      \
    \  val zerosDecimal = zeros.map(_.toString.toInt).sum / zerosCount\n        val\
    \ onesDecimalDecimal = onesDecimal + zerosDecimal\n        val zerosDecimalDecimal\
    \ = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ * onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal *\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ * onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ * zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ * onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ * zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal * onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal * onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * zerosCount", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / zerosDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal / onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / zerosDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / onesDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal /\
    \ zerosDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal", "        val\
    \ ones = arr.filter(x => x == 1).toList\n        val zeros = arr.filter(x => x\
    \ == 0).toList\n        val onesCount = ones.size\n        val zerosCount = zeros.size\n\
    \        val onesDecimal = onesCount / 2\n        val zerosDecimal = zerosCount\
    \ / 2\n        val onesDecimalDecimal = onesDecimal + zerosDecimal\n        val\
    \ zerosDecimalDecimal = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal + zerosDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal + onesDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal + zerosDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal + onesDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal +\
    \ zerosDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal + onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ + zerosDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal + onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ + zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal + onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ + zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ + onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ + zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ + onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal", "  \
    \      val ones = arr.filter(_ % 2 == 0).toList\n        val zeros = arr.filter(_\
    \ % 2 == 1).toList\n        val onesCount = ones.count(_ == 1)\n        val zerosCount\
    \ = zeros.count(_ == 0)\n        val onesZeros = ones.zip(zeros)\n        val\
    \ onesZerosCount = onesZeros.count(_._1 == 1)\n        val zerosOnes = zeros.zip(ones)\n\
    \        val zerosOnesCount = zerosOnes.count(_._1 == 0)\n        val onesOnes\
    \ = ones.zip(ones)\n        val onesOnesCount = onesOnes.count(_._1 == 1)\n  \
    \      val onesZeroAndOnes = onesOnes.zip(onesZeros)\n        val onesZeroAndOnesCount\
    \ = onesZeroAndOnes.count(_._1 == 1)\n        val onesZeroAndOnesZeroAndOnes =\
    \ onesZeroAndOnes.zip(onesZeroAndOnes)\n        val onesZeroAndOnesZeroAndOnesCount\
    \ = onesZeroAndOnesZeroAndOnes.count(_._1 == 1)\n        val onesZeroAndOnesZeroAndOnesZeroAndOnes\
    \ = onesZeroAndOnesZeroAndOnes.zip(onesZeroAndOnesZeroAndOnes)\n        val onesZeroAndOnesZeroAndOnesZeroAndOnesCount\
    \ = onesZeroAndOnesZeroAndOnesZeroAndOnes.count(_._1 == 1)\n        val onesZeroAndOnesZeroAndOnesZeroAndOnesZeroAndOnes\
    \ = onesZeroAndOnesZeroAndOnesZeroAndOnes.zip(onesZeroAndOnesZeroAndOnesZeroAndOnesZeroAndOnes)\n\
    \        val onesZeroAndOnesZeroAndOnesZeroAndOnesZeroAndOnesCount = onesZeroAndOnesZeroAndOnesZeroAndOnesZeroAndOnes.count(_._1\
    \ == 1)\n        val onesZeroAndOnesZeroAndOnesZeroAndOnesZeroAndOnesZeroAndOnesCount\
    \ = onesZeroAndOnesZeroAndOnesZeroAndOnesZeroAndOnesZeroAndOnesCount.toLong\n\
    \        val onesZeroAndOnesZeroAndOnesZeroAndOnesZeroAndOnesZeroAndOnesZeroAndOnesZeroAndOnesZeroAndOnesZeroAndOnesZeroAndOnesZeroAndOnesZeroAndOnesZeroAndOnesZeroAndOnes",
  '        arr.sortWith(compare)', "        val ones = arr.filter(_ % 2 == 0).toList\n\
    \        val zeros = arr.filter(_ % 2 == 1).toList\n        val onesZeros = ones\
    \ + zeros\n        val onesZeroCount = onesZeros.map(_.toLong).count(_ > 0).toLong\n\
    \        val onesZeroCount2 = onesZeros.map(_.toLong).count(_ == 0).toLong\n \
    \       val onesZeroCount3 = onesZeros.map(_.toLong).count(_ < 0).toLong\n   \
    \     val onesZeroCount4 = onesZeros.map(_.toLong).count(_ == -1).toLong\n   \
    \     val onesZeroCount5 = onesZeros.map(_.toLong).count(_ == -2).toLong\n   \
    \     val onesZeroCount6 = onesZeros.map(_.toLong).count(_ == -3).toLong\n   \
    \     val onesZeroCount7 = onesZeros.map(_.toLong).count(_ == -4).toLong\n   \
    \     val onesZeroCount8 = onesZeros.map(_.toLong).count(_ == -5).toLong\n   \
    \     val onesZeroCount9 = onesZeros.map(_.toLong).count(_ == -6).toLong\n   \
    \     val onesZeroCount10 = onesZeros.map(_.toLong).count(_ == -7).toLong\n  \
    \      val onesZeroCount11 = onesZeros.map(_.toLong).count(_ == -8).toLong\n \
    \       val onesZeroCount12 = onesZeros.map(_.toLong).count(_ == 9).toLong\n \
    \       val onesZeroCount13 = onesZeros.map(_.toLong).count(_ == 10).toLong\n\
    \        val onesZeroCount14 = onesZeros.map(_.toLong).count(_ == 11).toLong\n\
    \        val onesZeroCount15 = onesZeros.map(_.toLong).count(_ == 12).toLong\n\
    \        val onesZeroCount16 = onesZeros.map(_.toLong).count(_ == 13).toLong\n\
    \        val onesZeroCount17 = onesZeros.map(_.toLong).count(_ == 14).toLong\n\
    \        val onesZeroCount18 = onesZeros.map(_.toLong).count(_ == 15).toLong\n\
    \        val onesZeroCount19 = onesZeros.map(_.toLong).count(_ == 16).toLong\n\
    \        val onesZeroCount20 = onesZeros.map(_.toLong).", "        val ones =\
    \ arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount\
    \ = arr.count(_ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val\
    \ onesDecimal = arr.count(_ == 1).asInstanceOf[Double] / ones\n        val zerosDecimal\
    \ = arr.count(_ == 0).asInstanceOf[Double] / zeros\n        val onesDecimalDecimal\
    \ = onesDecimal + zerosDecimal\n        val zerosDecimalDecimal = zerosDecimal\
    \ + onesDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal.toInt\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal.toInt\n        val\
    \ onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal.toInt\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal.toInt\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal", "        val ones = arr.filter(_\
    \ == 1).size\n        val zeros = arr.filter(_ == 0).size\n        val onesZeros\
    \ = ones + zeros\n        val onesZeros_sorted = arr.sortBy(_ - onesZeros)\n \
    \       val onesZeros_sorted_reversed = onesZeros_sorted.reverse\n        val\
    \ onesZeros_sorted_reversed_sorted = onesZeros_sorted_reversed.sortBy(_ - onesZeros)\n\
    \        val onesZeros_sorted_reversed_sorted_reversed = onesZeros_sorted_reversed_sorted.reverse\n\
    \        onesZeros_sorted_reversed_sorted_reversed", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesZeros = ones +\
    \ zeros\n        val onesZeros_sorted = arr.sortBy(_ - onesZeros)\n        val\
    \ onesZeros_sorted_reversed = onesZeros_sorted.reverse\n        val onesZeros_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed.sortBy(_ - onesZeros)\n        val onesZeros_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted.reverse\n        onesZeros_sorted_reversed_sorted_reversed",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesDecimal\n        val zerosDecimalDecimalDecimal =\
    \ zerosDecimalDecimal / zerosDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / onesDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = one", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesArray = arr.map(x => if (x == 1) 1 else 0)\n        val\
    \ zerosArray = arr.map(x => if (x == 0) 0 else 1)\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArrayLength / 2\n        val zerosArrayLength =\
    \ zerosArrayLength / 2\n        val onesArrayLength = onesArrayLength * 2\n  \
    \      val zerosArrayLength = zerosArrayLength * 2\n        val onesArrayLength\
    \ = onesArrayLength * 2\n        val zerosArrayLength = zerosArrayLength * 2\n\
    \        val onesArrayLength = onesArrayLength * 2\n        val zerosArrayLength\
    \ = zerosArrayLength * 2\n        val onesArrayLength = onesArrayLength * 2\n\
    \        val zerosArrayLength = zerosArrayLength * 2\n        val onesArrayLength\
    \ = onesArrayLength * 2\n        val zerosArrayLength = zerosArrayLength * 2\n\
    \        val onesArrayLength = onesArrayLength * 2\n        val zerosArrayLength\
    \ = zerosArrayLength * 2\n        val onesArrayLength = onesArrayLength * 2\n\
    \        val zerosArrayLength = zerosArrayLength * 2\n        val onesArrayLength\
    \ = onesArrayLength * 2\n        val zerosArrayLength = zerosArrayLength * 2\n\
    \        val onesArrayLength = onesArrayLength * 2\n        val zerosArrayLength\
    \ = zerosArrayLength * 2\n        val onesArrayLength = onesArrayLength * 2\n\
    \        val zerosArrayLength = zerosArrayLength * 2\n        val onesArrayLength\
    \ = onesArrayLength * 2\n        val zerosArrayLength = zerosArrayLength * 2\n\
    \        val onesArrayLength = onesArrayLength * 2\n        val zerosArrayLength\
    \ = zerosArrayLength * 2\n        val onesArrayLength = onesArrayLength * 2\n\
    \        val zerosArrayLength = zerosArrayLength * 2\n        val onesArrayLength\
    \ = onesArrayLength * 2\n        val zerosArrayLength = zerosArrayLength * 2\n\
    \        val onesArrayLength = onesArrayLength * 2\n        val zerosArrayLength\
    \ = zerosArrayLength * 2\n        val onesArrayLength = onesArrayLength * 2\n\
    \        val zerosArrayLength = zerosArrayLength * 2\n        val onesArrayLength\
    \ = onesArrayLength * 2\n        val zerosArrayLength = zerosArrayLength * 2\n\
    \        val onesArrayLength = onesArray", "        val ones = arr.count(_ ==\
    \ 1)\n        val zeros = arr.count(_ == 0)\n        val onesArr = arr.filter(_\
    \ == 1).sortBy(_.toString.toInt)\n        val zerosArr = arr.filter(_ == 0).sortBy(_.toString.toInt)\n\
    \        val onesCount = onesArr.length\n        val zerosCount = zerosArr.length\n\
    \        if (onesCount > zerosCount) {\n            onesArr\n        } else if\
    \ (zerosCount > onesCount) {\n            zerosArr\n        } else {\n       \
    \     onesArr.zip(zerosArr).sortBy(_._1).map(_._2)\n        }", "        val ones\
    \ = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesZeros\
    \ = ones + zeros\n        val onesZeros_sorted = arr.sortBy(_ - onesZeros)\n \
    \       val onesZeros_sorted2 = onesZeros_sorted.sortBy(_ - onesZeros)\n     \
    \   val onesZeros_sorted3 = onesZeros_sorted2.sortBy(_ - onesZeros)\n        val\
    \ onesZeros_sorted4 = onesZeros_sorted3.sortBy(_ - onesZeros)\n        val onesZeros_sorted5\
    \ = onesZeros_sorted4.sortBy(_ - onesZeros)\n        val onesZeros_sorted6 = onesZeros_sorted5.sortBy(_\
    \ - onesZeros)\n        val onesZeros_sorted7 = onesZeros_sorted6.sortBy(_ - onesZeros)\n\
    \        val onesZeros_sorted8 = onesZeros_sorted7.sortBy(_ - onesZeros)\n   \
    \     val onesZeros_sorted9 = onesZeros_sorted8.sortBy(_ - onesZeros)\n      \
    \  val onesZeros_sorted10 = onesZeros_sorted9.sortBy(_ - onesZeros)\n        val\
    \ onesZeros_sorted11 = onesZeros_sorted10.sortBy(_ - onesZeros)\n        val onesZeros_sorted12\
    \ = onesZeros_sorted11.sortBy(_ - onesZeros)\n        val onesZeros_sorted13 =\
    \ onesZeros_sorted12.sortBy(_ - onesZeros)\n        val onesZeros_sorted14 = onesZeros_sorted13.sortBy(_\
    \ - onesZeros)\n        val onesZeros_sorted15 = onesZeros_sorted14.sortBy(_ -\
    \ onesZeros)\n        val onesZeros_sorted16 = onesZeros_sorted15.sortBy(_ - onesZeros)\n\
    \        val onesZeros_sorted17 = onesZeros_sorted16.sortBy(_ - onesZeros)\n \
    \       val onesZeros_sorted18 = onesZeros_sorted17.sortBy(_ - onesZeros)\n  \
    \      val onesZeros_sorted19 = onesZeros_sorted18.sortBy(_ - onesZeros)\n   \
    \     val onesZeros_sorted20 = onesZeros_sorted19.sortBy(_ - onesZeros)\n    \
    \    val onesZeros_sorted21 = onesZeros_sorted20.sortBy(_ - ", "        val ones\
    \ = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount\
    \ = arr.count(_ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val\
    \ onesDecimal = onesCount / arr.length\n        val zerosDecimal = zerosCount\
    \ / arr.length\n        val onesDecimalDecimal = onesDecimal + zerosDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal.toDouble + zerosDecimalDecimal.toDouble\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal.toDouble + onesDecimalDecimal.toDouble\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal.toDouble + zerosDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal.toDouble\
    \ + onesDecimalDecimalDecimal.toDouble\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal.toDouble + zerosDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal.toDouble\
    \ + onesDecimalDecimalDecimalDecimal.toDouble\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal.toDouble + zerosDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ + onesDecimalDecimalDecimalDecimalDecimal.toDouble\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble + zerosDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ + onesDecimalDecimalDecimalDecimalDecimal.toDouble\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble + zerosDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ + onesDecimalDecimalDecimalDecimalDecimal.toDouble\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble + zerosDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ + onesDecimalDecimalDecimalDecimalDecimal.toDouble\n        val onesDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / ones\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = ones", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesZeros = ones + zeros\n        val onesZeros_sorted =\
    \ onesZeros.sortBy(_ / onesZeros)\n        val onesZeros_sorted_sorted = onesZeros_sorted.sortBy(_\
    \ % onesZeros)\n        val onesZeros_sorted_sorted_sorted = onesZeros_sorted_sorted.sortBy(_\
    \ / onesZeros)\n        val onesZeros_sorted_sorted_sorted_sorted = onesZeros_sorted_sorted_sorted.sortBy(_\
    \ % onesZeros)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted = onesZeros_sorted_sorted_sorted_sorted.sortBy(_\
    \ / onesZeros)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted.sortBy(_ % onesZeros)\n     \
    \   val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_\
    \ / onesZeros)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_\
    \ % onesZeros)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_\
    \ / onesZeros)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_\
    \ % onesZeros)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_\
    \ / onesZeros)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_\
    \ % onesZeros)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_\
    \ / onesZeros)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
  '        arr.sortWith(compare)', "        val ones = arr.count(_ == 1)\n       \
    \ val zeros = arr.count(_ == 0)\n        val onesArray = arr.map(x => (x % 2 ==\
    \ 0 ? 1 : 0)).toArray\n        val zerosArray = arr.map(x => (x % 2 == 0 ? 0 :\
    \ 1)).toArray\n        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArray.length\n      \
    \  val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArray.length\n        val zerosArrayLength = zerosArray.length\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArray.length\n      \
    \  val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArray.length\n        val zerosArrayLength = zerosArray.length\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArray.length\n      \
    \  val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArray.length\n        val zerosArrayLength = zerosArray.length\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArray.length\n      \
    \  val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArray.length\n        val zerosArrayLength = zerosArray.length\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArray.length\n      \
    \  val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArray", "        val ones = arr.filter(_ == 1).toList\n    \
    \    val zeros = arr.filter(_ == 0).toList\n        val onesCount = ones.map(_.toString.toInt).sum\n\
    \        val zerosCount = zeros.map(_.toString.toInt).sum\n        val onesDecimal\
    \ = onesCount / arr.length\n        val zerosDecimal = zerosCount / arr.length\n\
    \        val onesDecimalString = onesDecimal.toString\n        val zerosDecimalString\
    \ = zerosDecimal.toString\n        val onesDecimalInt = onesDecimalString.toInt\n\
    \        val zerosDecimalInt = zerosDecimalString.toInt\n        val onesDecimalLong\
    \ = onesDecimalInt * 1l\n        val zerosDecimalLong = zerosDecimalInt * 1l\n\
    \        val onesDecimalFloat = onesDecimalLong.toFloat\n        val zerosDecimalFloat\
    \ = zerosDecimalLong.toFloat\n        val onesDecimalDouble = onesDecimalFloat.toDouble\n\
    \        val zerosDecimalDouble = zerosDecimalFloat.toDouble\n        val onesDecimalLong\
    \ = onesDecimalDouble.toLong\n        val zerosDecimalLong = zerosDecimalDouble.toLong\n\
    \        val onesDecimalInt = onesDecimalLong.toInt\n        val zerosDecimalInt\
    \ = zerosDecimalLong.toInt\n        val onesDecimalLong = onesDecimalInt * 1l\n\
    \        val zerosDecimalLong = zerosDecimalInt * 1l\n        val onesDecimalFloat\
    \ = onesDecimalLong.toFloat\n        val zerosDecimalFloat = zerosDecimalLong.toFloat\n\
    \        val onesDecimalDouble = onesDecimalFloat.toDouble\n        val zerosDecimalDouble\
    \ = zerosDecimalFloat.toDouble\n        val onesDecimalLong = onesDecimalDouble.toLong\n\
    \        val zerosDecimalLong = zerosDecimalDouble.toLong\n        val onesDecimalInt\
    \ = onesDecimalLong.toInt\n        val zerosDecimalInt = zerosDecimalLong.toInt\n\
    \        val onesDecimalLong = onesDecimalInt * 1l\n        val zerosDecimalLong\
    \ = zerosDecimalInt * 1l\n        val onesDecimalFloat = onesDecimalLong.toFloat\n\
    \        val zerosDecimalFloat = zerosDecimalLong.toFloat\n        val onesDecimalDouble\
    \ = onesDecimalFloat.toDouble\n        val zerosDecimalDouble = zerosDecimalFloat.toDouble\n\
    \        val onesDecimalLong = onesDecimalDouble.toLong\n        val zerosDecimalLong\
    \ = zerosDecimalDouble.toLong\n        val onesDecimalInt = onesDecimalLong.toInt\n\
    \        val zerosDecimalIn", "        val ones = arr.count(_ == 1)\n        val\
    \ zeros = arr.count(_ == 0)\n        val onesArr = arr.filter(_ == 1).sortBy(_.toString.toInt)\n\
    \        val zerosArr = arr.filter(_ == 0).sortBy(_.toString.toInt)\n        val\
    \ onesZeros = ones + zeros\n        val onesZeroArr = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr2 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr3 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr4 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr5 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr6 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr7 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr8 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr9 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr10 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr11 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr12 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr13 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr14 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr15 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr16 = onesZeros.map(_.toString.toInt).", "        val ones\
    \ = arr.filter(x => x == 1).toList\n        val zeros = arr.filter(x => x == 0).toList\n\
    \        val onesCount = ones.map(x => ones.count(_ == x)).sum\n        val zerosCount\
    \ = zeros.map(x => zeros.count(_ == x)).sum\n        val onesDecimal = ones.map(x\
    \ => x.toString.toDouble).sum\n        val zerosDecimal = zeros.map(x => x.toString.toDouble).sum\n\
    \        val onesDecimalDecimal = onesDecimal.toString.toDouble\n        val zerosDecimalDecimal\
    \ = zerosDecimal.toString.toDouble\n        val onesDecimalDecimalDecimal = onesDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesDecimal\n        val zerosDecimalDecimalDecimal =\
    \ zerosDecimalDecimal / zerosDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / onesDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = one", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesArray = arr.filter(_ == 1).map(_.toLong).toArray\n  \
    \      val zerosArray = arr.filter(_ == 0).map(_.toLong).toArray\n        val\
    \ onesArrayLength = onesArray.length\n        val zerosArrayLength = zerosArray.length\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArray.length\n      \
    \  val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArray.length\n        val zerosArrayLength = zerosArray.length\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArray.length\n      \
    \  val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArray.length\n        val zerosArrayLength = zerosArray.length\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArray.length\n      \
    \  val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArray.length\n        val zerosArrayLength = zerosArray.length\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArray.length\n      \
    \  val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArray.length\n        val zerosArrayLength = zerosArray.length\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArray.length\n      \
    \  val zerosArrayLength = zeros", "        val ones = arr.filter(x => x == 1l).toList\n\
    \        val zeros = arr.filter(x => x == 0l).toList\n        val onesCount =\
    \ ones.map(x => 1l).sum\n        val zerosCount = zeros.map(x => 0l).sum\n   \
    \     val onesDecimal = ones.map(x => x.toString.toDouble).sum\n        val zerosDecimal\
    \ = zeros.map(x => x.toString.toDouble).sum\n        val onesDecimalCount = ones.map(x\
    \ => x.toString.toDouble).count\n        val zerosDecimalCount = zeros.map(x =>\
    \ x.toString.toDouble).count\n        val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n\
    \        val zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n \
    \       val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n    \
    \    val zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n     \
    \   val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n        val\
    \ zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n        val onesDecimalCount\
    \ = ones.map(x => x.toString.toDouble).count\n        val zerosDecimalCount =\
    \ zeros.map(x => x.toString.toDouble).count\n        val onesDecimalCount = ones.map(x\
    \ => x.toString.toDouble).count\n        val zerosDecimalCount = zeros.map(x =>\
    \ x.toString.toDouble).count\n        val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n\
    \        val zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n \
    \       val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n    \
    \    val zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n     \
    \   val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n        val\
    \ zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n        val onesDecimalCount\
    \ = ones.map(x => x.toString.toDouble).count\n        val zerosDecimalCount =\
    \ zeros.map(x => x.toString.toDouble).count\n        val onesDecimalCount = ones.map(x\
    \ => x.toString.toDouble).count\n        val zerosDecimalCount = zeros.map(x =>\
    \ x.toString.toDouble).count\n        val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n\
    \        val zerosDecimalCount = zer", "        val ones = arr.filter(_ == 1).toList\n\
    \        val zeros = arr.filter(_ == 0).toList\n        val onesCount = ones.map(x\
    \ => 1l).sum\n        val zerosCount = zeros.map(x => 0l).sum\n        val onesDecimal\
    \ = ones.map(x => x.toString.toDouble).sum\n        val zerosDecimal = zeros.map(x\
    \ => x.toString.toDouble).sum\n        val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n\
    \        val zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n \
    \       val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n    \
    \    val zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n     \
    \   val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n        val\
    \ zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n        val onesDecimalCount\
    \ = ones.map(x => x.toString.toDouble).count\n        val zerosDecimalCount =\
    \ zeros.map(x => x.toString.toDouble).count\n        val onesDecimalCount = ones.map(x\
    \ => x.toString.toDouble).count\n        val zerosDecimalCount = zeros.map(x =>\
    \ x.toString.toDouble).count\n        val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n\
    \        val zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n \
    \       val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n    \
    \    val zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n     \
    \   val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n        val\
    \ zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n        val onesDecimalCount\
    \ = ones.map(x => x.toString.toDouble).count\n        val zerosDecimalCount =\
    \ zeros.map(x => x.toString.toDouble).count\n        val onesDecimalCount = ones.map(x\
    \ => x.toString.toDouble).count\n        val zerosDecimalCount = zeros.map(x =>\
    \ x.toString.toDouble).count\n        val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n\
    \        val zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n \
    \       val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n    \
    \    val zerosDecimalCount = zeros.map(x => x.", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_\
    \ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val onesDecimal =\
    \ onesCount / arr.length\n        val zerosDecimal = zerosCount / arr.length\n\
    \        val onesDecimalDecimal = onesDecimal + zerosDecimal\n        val zerosDecimalDecimal\
    \ = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal * 10\n  \
    \      val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesZeros = ones + zeros\n        val onesZerosList = onesZeros.toList\n\
    \        val onesZerosListSorted = onesZerosList.reverse\n        val onesZerosListSortedSortedWithZeros\
    \ = onesZerosListSorted.zipWithIndex.filter(_._2 == 0).map(_._1)\n        val\
    \ onesZerosListSortedWithOnes = onesZerosListSorted.zipWithIndex.filter(_._2 ==\
    \ 1).map(_._1)\n        val onesZerosListSortedWithOnesAndZeros = onesZerosListSorted.zipWithIndex.filter(_._2\
    \ == 1 && _._2 == 0).map(_._1)\n        val onesZerosListSortedWithOnesAndZerosReversed\
    \ = onesZerosListSortedWithOnesAndZeros.reverse\n        val onesZerosListSortedWithOnesAndZerosReversedWithZeros\
    \ = onesZerosListSortedWithOnesAndZerosReversed.zipWithIndex.filter(_._2 == 0).map(_._1)\n\
    \        val onesZerosListSortedWithOnesAndZerosReversedWithOnes = onesZerosListSortedWithOnesAndZerosReversed.zipWithIndex.filter(_._2\
    \ == 1).map(_._1)\n        val onesZerosListSortedWithOnesAndZerosReversedWithOnesAndZeros\
    \ = onesZerosListSortedWithOnesAndZerosReversed.zipWithIndex.filter(_._2 == 1\
    \ && _._2 == 0).map(_._1)\n        val onesZerosListSortedWithOnesAndZerosReversedWithOnesAndZerosReversed\
    \ = onesZerosListSortedWithOnesAndZerosReversedWithOnesAndZeros.reverse\n    \
    \    val onesZerosListSortedWithOnesAndZerosReversedWithOnesAndZerosReversedWithZeros\
    \ = onesZerosListSortedWithOnesAndZerosReversedWithOnesAndZerosReversed.zipWithIndex.filter(_._2\
    \ == 0).map(_._1)\n        val onesZerosListSortedWithOnesAndZerosReversedWithOnesAndZerosReversedWithOnes\
    \ = onesZerosListSortedWithOnesAndZerosReversedWithOnesAndZerosReversed.zipWithIndex.filter(_._2\
    \ == 1).map(_._1)\n        val onesZerosListSortedWithOnesAndZerosReversedWithOnesAndZeros",
  "        val ones = arr.filter(_ % 2 == 0).toList\n        val zeros = arr.filter(_\
    \ % 2 == 1).toList\n        val onesCount = ones.map(_.toInt).sum\n        val\
    \ zerosCount = zeros.map(_.toInt).sum\n        val onesDecimal = ones.map(_.toLong).sum\
    \ / onesCount\n        val zerosDecimal = zeros.map(_.toLong).sum / zerosCount\n\
    \        val onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(_ == 1).length\n        val zeros = arr.filter(_\
    \ == 0).length\n        val onesZeros = ones + zeros\n        val onesZerosInv\
    \ = onesZeros / arr.length\n        val onesZerosInv2 = onesZerosInv * onesZerosInv\n\
    \        val onesZerosInv3 = onesZerosInv2 * onesZerosInv\n        val onesZerosInv4\
    \ = onesZerosInv3 * onesZerosInv\n        val onesZerosInv5 = onesZerosInv4 *\
    \ onesZerosInv\n        val onesZerosInv6 = onesZerosInv5 * onesZerosInv\n   \
    \     val onesZerosInv7 = onesZerosInv6 * onesZerosInv\n        val onesZerosInv8\
    \ = onesZerosInv7 * onesZerosInv\n        val onesZerosInv9 = onesZerosInv8 *\
    \ onesZerosInv\n        val onesZerosInv10 = onesZerosInv9 * onesZerosInv\n  \
    \      val onesZerosInv11 = onesZerosInv10 * onesZerosInv\n        val onesZerosInv12\
    \ = onesZerosInv11 * onesZerosInv\n        val onesZerosInv13 = onesZerosInv12\
    \ * onesZerosInv\n        val onesZerosInv14 = onesZerosInv13 * onesZerosInv\n\
    \        val onesZerosInv15 = onesZerosInv14 * onesZerosInv\n        val onesZerosInv16\
    \ = onesZerosInv15 * onesZerosInv\n        val onesZerosInv17 = onesZerosInv16\
    \ * onesZerosInv\n        val onesZerosInv18 = onesZerosInv17 * onesZerosInv\n\
    \        val onesZerosInv19 = onesZerosInv18 * onesZerosInv\n        val onesZerosInv20\
    \ = onesZerosInv19 * onesZerosInv\n        val onesZerosInv21 = onesZerosInv20\
    \ * onesZerosInv\n        val onesZerosInv22 = onesZerosInv21 * onesZerosInv\n\
    \        val onesZerosInv23 = onesZerosInv22 * onesZerosInv\n        val ones",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesDecimal\n        val zerosDecimalDecimalDecimal =\
    \ zerosDecimalDecimal / zerosDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / onesDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArr = arr.filter(_ == 1)\n        val zerosArr = arr.filter(_\
    \ == 0)\n        val onesCount = onesArr.length\n        val zerosCount = zerosArr.length\n\
    \        val onesArr = onesArr.sortBy(x => math.abs(x))\n        val zerosArr\
    \ = zerosArr.sortBy(x => math.abs(x))\n        val onesCount = onesArr.length\n\
    \        val zerosCount = zerosArr.length\n        val onesArr = onesArr.sortBy(x\
    \ => math.abs(x))\n        val zerosArr = zerosArr.sortBy(x => math.abs(x))\n\
    \        val onesCount = onesArr.length\n        val zerosCount = zerosArr.length\n\
    \        val onesArr = onesArr.sortBy(x => math.abs(x))\n        val zerosArr\
    \ = zerosArr.sortBy(x => math.abs(x))\n        val onesCount = onesArr.length\n\
    \        val zerosCount = zerosArr.length\n        val onesArr = onesArr.sortBy(x\
    \ => math.abs(x))\n        val zerosArr = zerosArr.sortBy(x => math.abs(x))\n\
    \        val onesCount = onesArr.length\n        val zerosCount = zerosArr.length\n\
    \        val onesArr = onesArr.sortBy(x => math.abs(x))\n        val zerosArr\
    \ = zerosArr.sortBy(x => math.abs(x))\n        val onesCount = onesArr.length\n\
    \        val zerosCount = zerosArr.length\n        val onesArr = onesArr.sortBy(x\
    \ => math.abs(x))\n        val zerosArr = zerosArr.sortBy(x => math.abs(x))\n\
    \        val onesCount = onesArr.length\n        val zerosCount = zerosArr.length\n\
    \        val onesArr = onesArr.sortBy(x => math.abs(x))\n        val zerosArr\
    \ = zerosArr.sortBy(x => math.abs(x))\n        val onesCount = onesArr.length\n\
    \        val zerosCount = zerosArr.length\n        val onesArr = onesArr.sortBy(x\
    \ => math.abs(x))\n        val zerosArr = zerosArr.sortBy(x => math.abs(x))\n\
    \        val onesCount = onesArr.length\n        val zerosCount = zerosArr.length\n\
    \        val onesArr = onesArr.sortBy(x => math.abs(x))", "        val ones =\
    \ arr.filter(_ == 1).length\n        val zeros = arr.filter(_ == 0).length\n \
    \       val onesZeros = ones + zeros\n        val onesZero = onesZeros / (onesZeros\
    \ + ones)\n        val onesZeros = onesZeros % ones\n        val onesZero = onesZero\
    \ / ones\n        val onesZeros = onesZeros % ones\n        val onesZero = onesZero\
    \ / ones\n        val onesZeros = onesZeros % ones\n        val onesZero = onesZero\
    \ / ones\n        val onesZeros = onesZeros % ones\n        val onesZero = onesZero\
    \ / ones\n        val onesZeros = onesZeros % ones\n        val onesZero = onesZero\
    \ / ones\n        val onesZeros = onesZeros % ones\n        val onesZero = onesZero\
    \ / ones\n        val onesZeros = onesZeros % ones\n        val onesZero = onesZero\
    \ / ones\n        val onesZeros = onesZeros % ones\n        val onesZero = onesZero\
    \ / ones\n        val onesZeros = onesZeros % ones\n        val onesZero = onesZero\
    \ / ones\n        val onesZeros = onesZeros % ones\n        val onesZero = onesZero\
    \ / ones\n        val onesZeros = onesZeros % ones\n        val onesZero = onesZero\
    \ / ones\n        val onesZeros = onesZeros % ones\n        val onesZero = onesZero\
    \ / ones\n        val onesZeros = onesZeros % ones\n        val onesZero = onesZero\
    \ / ones\n        val onesZeros = onesZeros % ones\n        val onesZero = onesZero\
    \ / ones\n        val onesZeros = onesZeros % ones\n        val onesZero = onesZero\
    \ / ones\n        val onesZeros = onesZeros % ones\n        val onesZero = onesZero\
    \ / one", "        val ones = arr.filter(x => x == 1).toList\n        val zeros\
    \ = arr.filter(x => x == 0).toList\n        val onesCount = ones.map(x => ones.count(_\
    \ == x)).max\n        val zerosCount = zeros.map(x => zeros.count(_ == x)).max\n\
    \        val onesDecimal = ones.map(x => x.toString.toInt).max\n        val zerosDecimal\
    \ = zeros.map(x => x.toString.toInt).max\n        val onesDecimalCount = ones.map(x\
    \ => ones.count(_ == x)).max\n        val zerosDecimalCount = zeros.map(x => zeros.count(_\
    \ == x)).max\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).max\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).max\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).max\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).max\n        val onesDecimalCount\
    \ = ones.map(x => ones.count(_ == x)).max\n        val zerosDecimalCount = zeros.map(x\
    \ => zeros.count(_ == x)).max\n        val onesDecimalCount = ones.map(x => ones.count(_\
    \ == x)).max\n        val zerosDecimalCount = zeros.map(x => zeros.count(_ ==\
    \ x)).max\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).max\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).max\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).max\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).max\n        val onesDecimalCount\
    \ = ones.map(x => ones.count(_ == x)).max\n        val zerosDecimalCount = zeros.map(x\
    \ => zeros.count(_ == x)).max\n        val onesDecimalCount = ones.map(x => ones.count(_\
    \ == x)).max\n        val zerosDecimalCount = zeros.map(x => zeros.count(_ ==\
    \ x)).max\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).max\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).max\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).max\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).max\n        val onesDecimalCount\
    \ = ones.map(", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / ones\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimal", "        val ones = arr.filter(_ % 2 == 0).length\n        val\
    \ zeros = arr.filter(_ % 2 == 1).length\n        val onesArr = arr.filter(_ %\
    \ 2 == 0).sortBy(_ % 2).reverse\n        val zerosArr = arr.filter(_ % 2 == 1).sortBy(_\
    \ % 2).reverse\n        val onesSortedArr = onesArr.take(ones)\n        val zerosSortedArr\
    \ = zerosArr.take(zeros)\n        val sortedArr = onesSortedArr.zip(zerosSortedArr).sortBy(_._1).reverse\n\
    \        sortedArr", '        arr.sortWith((x, y) => x.toLong == y.toLong ? x.toLong
    - y.toLong : x.toLong - y.toLong)', "        val ones = arr.filter(_ % 2 == 0).toList\n\
    \        val zeros = arr.filter(_ % 2 == 1).toList\n        val onesZeros = ones\
    \ + zeros\n        val onesZerosSorted = onesZeros.sortBy(x => x.toString.toInt)\n\
    \        val zerosSorted = zeros.sortBy(x => x.toString.toInt)\n        val onesZerosSortedWithZeros\
    \ = onesZerosSorted.zip(zerosSorted)\n        val onesZerosSortedWithZerosSorted\
    \ = onesZerosSortedWithZeros.sortBy(x => x._1 - x._2)\n        val onesZerosSortedWithZerosSortedWithZeros\
    \ = onesZerosSortedWithZerosSorted.zip(zerosSorted)\n        val onesZerosSortedWithZerosSortedWithZerosSorted\
    \ = onesZerosSortedWithZerosSortedWithZeros.sortBy(x => x._1 - x._2)\n       \
    \ val onesZerosSortedWithZerosSortedWithZerosSortedWithZeros = onesZerosSortedWithZerosSortedWithZerosSorted.zip(zerosSorted)\n\
    \        val onesZerosSortedWithZerosSortedWithZerosSortedWithZerosSorted = onesZerosSortedWithZerosSortedWithZerosSortedWithZeros.sortBy(x\
    \ => x._1 - x._2)\n        val onesZerosSortedWithZerosSortedWithZerosSortedWithZerosSortedWithZeros\
    \ = onesZerosSortedWithZerosSortedWithZerosSortedWithZerosSorted.zip(zerosSorted)\n\
    \        val onesZerosSortedWithZerosSortedWithZerosSortedWithZerosSortedWithZerosSorted\
    \ = onesZerosSortedWithZerosSortedWithZerosSortedWithZerosSortedWithZeros.sortBy(x\
    \ => x._1 - x._2)\n        val onesZerosSortedWithZerosSortedWithZerosSortedWithZerosSortedWithZerosSortedWithZeros\
    \ = onesZerosSortedWithZerosSortedWithZerosSortedWithZerosSortedWithZerosSortedWithZeros.sortBy(x\
    \ => x._1 - x._2)\n        val onesZerosSortedWith", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesArr = arr.filter(_\
    \ == 1).sortBy(_.toString.toInt)\n        val zerosArr = arr.filter(_ == 0).sortBy(_.toString.toInt)\n\
    \        val onesZeros = ones + zeros\n        val onesZeroArr = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr2 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr3\
    \ = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr4 = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr5 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr6\
    \ = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr7 = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr8 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr9\
    \ = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr10 = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr11 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr12\
    \ = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr13 = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr14 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr15\
    \ = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr16 = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr17 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr18\
    \ = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr19 = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr20 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr21\
    \ = onesZeros.sortBy(", "        val ones = arr.filter(x => x == 1).toList\n \
    \       val zeros = arr.filter(x => x == 0).toList\n        val onesCount = ones.map(x\
    \ => ones.count(_ == x)).sum\n        val zerosCount = zeros.map(x => zeros.count(_\
    \ == x)).sum\n        val onesDecimal = ones.map(x => x.toString.toDouble).sum\n\
    \        val zerosDecimal = zeros.map(x => x.toString.toDouble).sum\n        val\
    \ onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n        val zerosDecimalCount\
    \ = zeros.map(x => zeros.count(_ == x)).sum\n        val onesDecimalCount = ones.map(x\
    \ => ones.count(_ == x)).sum\n        val zerosDecimalCount = zeros.map(x => zeros.count(_\
    \ == x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n        val onesDecimalCount\
    \ = ones.map(x => ones.count(_ == x)).sum\n        val zerosDecimalCount = zeros.map(x\
    \ => zeros.count(_ == x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_\
    \ == x)).sum\n        val zerosDecimalCount = zeros.map(x => zeros.count(_ ==\
    \ x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n        val onesDecimalCount\
    \ = ones.map(x => ones.count(_ == x)).sum\n        val zerosDecimalCount = zeros.map(x\
    \ => zeros.count(_ == x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_\
    \ == x)).sum\n        val zerosDecimalCount = zeros.map(x => zeros.count(_ ==\
    \ x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n   \
    \     val onesDecimalCount = ones.map(", "        val ones = arr.filter(_ % 2\
    \ == 0).toList\n        val zeros = arr.filter(_ % 2 == 1).toList\n        val\
    \ onesCount = ones.map(x => x.toLong).sum\n        val zerosCount = zeros.map(x\
    \ => x.toLong).sum\n        val onesDecimal = onesCount / 2\n        val zerosDecimal\
    \ = zerosCount / 2\n        val onesDecimalDecimal = onesDecimal + zerosDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal.toDouble\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal.toInt\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal.toInt\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble",
  "        val ones = arr.filter(_ == 1).toList\n        val zeros = arr.filter(_\
    \ == 0).toList\n        val onesCount = ones.count(_ == 1)\n        val zerosCount\
    \ = zeros.count(_ == 0)\n        val onesZeros = onesCount + zerosCount\n    \
    \    val onesZeroCount = onesZeros + onesCount\n        val onesZeroZero = onesZeroCount\
    \ + zerosCount\n        val onesZeroZeroCount = onesZeroZero + onesCount\n   \
    \     val onesZeroZeroZero = onesZeroZeroCount + zerosCount\n        val onesZeroZeroZeroCount\
    \ = onesZeroZeroZero + onesCount\n        val onesZeroZeroZeroZero = onesZeroZeroZeroCount\
    \ + zerosCount\n        val onesZeroZeroZeroZeroCount = onesZeroZeroZeroZero +\
    \ onesCount\n        val onesZeroZeroZeroZeroCount = onesZeroZeroZeroZeroCount\
    \ + zerosCount\n        val onesZeroZeroZeroZeroZero = onesZeroZeroZeroZeroZeroCount\
    \ + zerosCount\n        val onesZeroZeroZeroZeroZero = onesZeroZeroZeroZeroZeroCount\
    \ + zerosCount\n        val onesZeroZeroZeroZeroZero = onesZeroZeroZeroZeroZeroCount\
    \ + zerosCount\n        val onesZeroZeroZeroZeroZero = onesZeroZeroZeroZeroZeroCount\
    \ + zerosCount\n        val onesZeroZeroZeroZeroZero = onesZeroZeroZeroZeroZeroCount\
    \ + zerosCount\n        val onesZeroZeroZeroZeroZero = onesZeroZeroZeroZeroZeroCount\
    \ + zerosCount\n        val onesZeroZeroZeroZeroZero = onesZeroZeroZeroZeroZeroCount\
    \ + zerosCount\n        val onesZeroZeroZeroZeroZero = onesZeroZeroZeroZeroZeroCount\
    \ + zerosCount\n        val onesZeroZeroZeroZeroZero = onesZeroZeroZeroZeroZeroCount\
    \ + zerosCount\n        val onesZeroZeroZeroZeroZero = onesZeroZeroZeroZeroZeroCount\
    \ + zerosCount\n        val onesZeroZeroZeroZeroZero = onesZeroZeroZeroZeroZeroCount\
    \ + zerosCount\n        val onesZeroZeroZeroZeroZero = onesZeroZeroZeroZeroZeroCount\
    \ + zerosCount\n        val onesZeroZeroZeroZeroZero = onesZeroZeroZeroZeroZeroCount\
    \ + zerosCount\n        val onesZeroZeroZeroZeroZero = onesZeroZeroZeroZeroZeroCount\
    \ + zerosCount\n        val onesZeroZeroZero", '        arr.sortWith((x, y) =>
    x.toLong == y.toLong ? x.toLong - y.toLong : x.toLong - y.toLong * 2)', '        arr.sortWith((x,
    y) => x.toLong == y.toLong ? x.toLong - y.toLong : x.toLong > y.toLong ? 1 : -1)',
  "        val ones = arr.count(x => x == 1l)\n        val zeros = arr.count(x =>\
    \ x == 0l)\n        val onesZeros = ones + zeros\n        val onesZeroArray =\
    \ arr.map(x => if (x == 1l) 1 else 0)\n        val onesZeroArraySorted = onesZeroArray.sortWith(_\
    \ < _)\n        val onesZeroArraySortedSortedWithOnes = onesZeroArraySorted.take(onesZeros)\n\
    \        val onesZeroArraySortedSortedWithZeros = onesZeroArraySorted.drop(onesZeros)\n\
    \        val onesZeroArraySortedSortedWithOnesAndZeros = onesZeroArraySorted.take(onesZeros).zip(onesZeroArraySortedSortedWithOnes)\n\
    \        val onesZeroArraySortedSortedWithOnesAndZerosSortedWithOnes = onesZeroArraySortedSortedWithOnesAndZeros.sortWith(_\
    \ < _)\n        val onesZeroArraySortedSortedWithOnesAndZerosSortedWithZeros =\
    \ onesZeroArraySortedSortedWithOnesAndZeros.sortWith(_ > _)\n        val onesZeroArraySortedSortedWithOnesAndZerosSortedWithOnesAndZeros\
    \ = onesZeroArraySortedSortedWithOnesAndZeros.sortWith(_ < _)\n        val onesZeroArraySortedSortedWithOnesAndZerosSortedWithOnesAndZerosSortedWithOnes\
    \ = onesZeroArraySortedSortedWithOnesAndZerosSortedWithOnes.sortWith(_ < _)\n\
    \        val onesZeroArraySortedSortedWithOnesAndZerosSortedWithOnesAndZerosSortedWithZeros\
    \ = onesZeroArraySortedSortedWithOnesAndZerosSortedWithOnesAndZeros.sortWith(_\
    \ > _)\n        val onesZeroArraySortedSortedWithOnesAndZerosSortedWithOnesAndZerosSortedWithOnesAndZeros\
    \ = onesZeroArraySortedSortedWithOnesAndZerosSortedWithOnesAndZerosSortedWithOnes.sortWith(_\
    \ > _)\n        val onesZeroArraySortedSortedWithOnesAndZerosSortedWithOnesAndZerosSortedWithOnesAndZerosSortedWithOnes\
    \ = onesZeroArraySortedSortedWithOnesAndZerosSortedWithOnesAndZerosSortedWithOnesAndZeros.sortWith(_\
    \ > _)\n        val onesZeroArraySortedSortedWithOnesAndZerosSortedWithOnesAndZerosSorted",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / ones\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(_ == 1l)\n        val zeros = arr.filter(_ == 0l)\n\
    \        val onesCount = ones.count\n        val zerosCount = zeros.count\n  \
    \      val onesDecimal = onesCount / 2\n        val zerosDecimal = zerosCount\
    \ / 2\n        val onesDecimalDecimal = onesDecimal + zerosDecimal\n        val\
    \ zerosDecimalDecimal = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal.toDouble\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = ones", "        val ones = arr.filter(_ % 2 == 0).toList\n        val zeros\
    \ = arr.filter(_ % 2 == 1).toList\n        val onesCount = ones.map(x => 1l <<\
    \ x).toList\n        val zerosCount = zeros.map(x => 1l << x).toList\n       \
    \ val onesZeros = ones.zip(zeros)\n        val onesZerosCount = onesZeros.map(x\
    \ => (x._1, 1l << x._2)).toList\n        val onesZerosCountSorted = onesZerosCount.sortBy(_._1).reverse\n\
    \        val zerosZerosCount = zeros.zip(zeros).map(x => (x._1, 1l << x._2)).toList\n\
    \        val zerosZerosCountSorted = zerosZerosCount.sortBy(_._1).reverse\n  \
    \      val onesZerosCountSortedSorted: Seq[(Long, Long)] = onesZerosCountSorted.sortBy(_._1).reverse\n\
    \        val zerosZerosCountSortedSorted: Seq[(Long, Long)] = zerosZerosCountSorted.sortBy(_._1).reverse\n\
    \        val onesZerosCountSortedSortedSorted: Seq[(Long, Long)] = onesZerosCountSortedSorted.sortBy(_._1).reverse\n\
    \        val zerosZerosCountSortedSortedSorted: Seq[(Long, Long)] = zerosZerosCountSortedSorted.sortBy(_._1).reverse\n\
    \        val onesZerosCountSortedSortedSortedSorted: Seq[(Long, Long)] = onesZerosCountSortedSortedSorted.sortBy(_._1).reverse\n\
    \        val zerosZerosCountSortedSortedSortedSorted: Seq[(Long, Long)] = zerosZerosCountSortedSortedSorted.sortBy(_._1).reverse\n\
    \        val onesZerosCountSortedSortedSortedSortedSorted: Seq[(Long, Long)] =\
    \ onesZerosCountSortedSortedSortedSorted.sortBy(_._1).reverse\n        val zerosZerosCountSortedSortedSortedSortedSorted:\
    \ Seq[(Long, Long)] = zerosZerosCountSortedSortedSortedSorted.sortBy(_._1).reverse\n\
    \        val onesZerosCountSortedSortedSortedSortedSortedSorted: Seq[(Long, Long)]\
    \ = onesZerosCountSortedSortedSortedSortedSorted.sortBy(_._1).reverse\n      \
    \  val zerosZerosCountSortedSortedSortedSortedSortedSorted: Seq[(Long, Long)]\
    \ = zerosZerosCountSortedSortedSortedSortedSor", "        val ones = arr.filter(_\
    \ % 2 == 0).toList\n        val zeros = arr.filter(_ % 2 == 1).toList\n      \
    \  val onesCount = ones.map(x => x.toLong).count(_ == 1)\n        val zerosCount\
    \ = zeros.map(x => x.toLong).count(_ == 0)\n        val onesZeros = ones.zip(zeros)\n\
    \        val onesZeroCount = onesZeros.map(x => x._1.toLong).count(_ == 1)\n \
    \       val onesZeroZeros = onesZeros.map(x => x._2.toLong).count(_ == 0)\n  \
    \      val onesZeroOnes = onesZeros.map(x => x._2.toLong).count(_ == 1)\n    \
    \    val onesZeroOnesCount = onesZeroOnes.map(x => x.toLong).count(_ == 1)\n \
    \       val onesZeroOnesZeros = onesZeroOnes.map(x => x._2.toLong).count(_ ==\
    \ 0)\n        val onesZeroOnesOnes = onesZeroOnes.map(x => x._2.toLong).count(_\
    \ == 1)\n        val onesZeroOnesOnesCount = onesZeroOnesOnes.map(x => x.toLong).count(_\
    \ == 1)\n        val onesZeroOnesOnesZeros = onesZeroOnesOnes.map(x => x._2.toLong).count(_\
    \ == 0)\n        val onesZeroOnesOnesOnes = onesZeroOnesOnes.map(x => x._2.toLong).count(_\
    \ == 1)\n        val onesZeroOnesOnesOnesCount = onesZeroOnesOnesOnes.map(x =>\
    \ x.toLong).count(_ == 1)\n        val onesZeroOnesOnesOnesZeros = onesZeroOnesOnesOnes.map(x\
    \ => x._2.toLong).count(_ == 0)\n        val onesZeroOnesOnesOnesOnes = onesZeroOnesOnesOnes.map(x\
    \ => x._2.toLong).count(_ == 1)\n        val onesZeroOnesOnesOnesOnesCount = onesZeroOnesOnesOnesOnes.map(x\
    \ => x.toLong).count(_ == 1)\n        val onesZeroOnesOnesOnesOnesZeros = onesZeroOnesOnesOnesOnes.map(x\
    \ => x._2.toLong).count(_ == 0)\n        val onesZeroOne", "        val ones =\
    \ arr.filter(x => x == 1).toList\n        val zeros = arr.filter(x => x == 0).toList\n\
    \        val onesCount = ones.count(_ == 1)\n        val zerosCount = zeros.count(_\
    \ == 0)\n        val onesZeros = ones + zeros\n        val onesZeroCount = onesZeros.count(_\
    \ == 1)\n        val onesZeroZeros = onesZeros + ones\n        val onesZeroZeroCount\
    \ = onesZeroZeros.count(_ == 1)\n        val onesZeroZeroZeros = onesZeroZeros\
    \ + onesZeros\n        val onesZeroZeroZeroCount = onesZeroZeroZeros.count(_ ==\
    \ 1)\n        val onesZeroZeroZeroZeros = onesZeroZeroZeros + onesZeroZeros\n\
    \        val onesZeroZeroZeroZeroCount = onesZeroZeroZeroZeros.count(_ == 1)\n\
    \        val onesZeroZeroZeroZeroZeros = onesZeroZeroZeroZeros + onesZeroZeroZeros\n\
    \        val onesZeroZeroZeroZeroZeroCount = onesZeroZeroZeroZeroZeros.count(_\
    \ == 1)\n        val onesZeroZeroZeroZeroZeros = onesZeroZeroZeroZeroZeros + onesZeroZeroZeros\n\
    \        val onesZeroZeroZeroZeroZeroCount = onesZeroZeroZeroZeroZeroZeros.count(_\
    \ == 1)\n        val onesZeroZeroZeroZeroZeros = onesZeroZeroZeroZeroZeros + onesZeroZeroZeros\n\
    \        val onesZeroZeroZeroZeroZeroCount = onesZeroZeroZeroZeroZeroZeros.count(_\
    \ == 1)\n        val onesZeroZeroZeroZeroZeroZeros = onesZeroZeroZeroZeroZeroZeros\
    \ + onesZeroZeroZeros\n        val onesZeroZeroZeroZeroZeroZeroCount = onesZeroZeroZeroZeroZeroZeroZeros.count(_\
    \ == 1)\n        val onesZeroZeroZeroZeroZeroZeros = onesZeroZeroZeroZeroZeroZeroZeros\
    \ + onesZeroZeroZeros\n        val onesZeroZeroZeroZeroZeroZeroCount = onesZeroZeroZeroZeroZeroZeroZeroZeros.count(_\
    \ == 1)\n        val onesZeroZeroZeroZeroZeroZeroZeros = onesZeroZeroZeroZeroZeroZeroZeroZeroZeros\
    \ + onesZeroZeroZeros\n        val onesZeroZeroZeroZeroZeroZeroZeroCount = onesZeroZeroZeroZeroZeroZeroZeroZeroZeros.count(_\
    \ == ", '        arr.sortWith(compare)', "        val ones = arr.filter(_ % 2\
    \ == 0).toList\n        val zeros = arr.filter(_ % 2 == 1).toList\n        val\
    \ onesCount = ones.map(_.toInt).sum\n        val zerosCount = zeros.map(_.toInt).sum\n\
    \        val onesDecimal = ones.map(_.toDouble).sum\n        val zerosDecimal\
    \ = zeros.map(_.toDouble).sum\n        val onesDecimal = ones.map(_.toDouble).sum\n\
    \        val zerosDecimal = zeros.map(_.toDouble).sum\n        val onesDecimal\
    \ = ones.map(_.toDouble).sum\n        val zerosDecimal = zeros.map(_.toDouble).sum\n\
    \        val onesDecimal = ones.map(_.toDouble).sum\n        val zerosDecimal\
    \ = zeros.map(_.toDouble).sum\n        val onesDecimal = ones.map(_.toDouble).sum\n\
    \        val zerosDecimal = zeros.map(_.toDouble).sum\n        val onesDecimal\
    \ = ones.map(_.toDouble).sum\n        val zerosDecimal = zeros.map(_.toDouble).sum\n\
    \        val onesDecimal = ones.map(_.toDouble).sum\n        val zerosDecimal\
    \ = zeros.map(_.toDouble).sum\n        val onesDecimal = ones.map(_.toDouble).sum\n\
    \        val zerosDecimal = zeros.map(_.toDouble).sum\n        val onesDecimal\
    \ = ones.map(_.toDouble).sum\n        val zerosDecimal = zeros.map(_.toDouble).sum\n\
    \        val onesDecimal = ones.map(_.toDouble).sum\n        val zerosDecimal\
    \ = zeros.map(_.toDouble).sum\n        val onesDecimal = ones.map(_.toDouble).sum\n\
    \        val zerosDecimal = zeros.map(_.toDouble).sum\n        val onesDecimal\
    \ = ones.map(_.toDouble).sum\n        val zerosDecimal = zeros.map(_.toDouble).sum\n\
    \        val onesDecimal = ones.map(_.toDouble).sum\n        val zerosDecimal\
    \ = zeros.map(_.toDouble).sum\n        val onesDecimal = ones.map(_.toDouble).sum\n\
    \        val zerosDecimal = zeros.map(_.toDouble).sum\n        val onesDecimal\
    \ = ones.map(_.toDouble).sum\n        val zerosDecimal = zeros.map(_.toDouble).sum\n\
    \        val onesDecimal = ones.map(_.toDouble).sum\n        val zerosDecimal\
    \ = zeros.map(_.toDouble).sum\n        val onesDecimal = ones.map(_.toDouble)."]
stop_tokens:
- "\n    }\n"
