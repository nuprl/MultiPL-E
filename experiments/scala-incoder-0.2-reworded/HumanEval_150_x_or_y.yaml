name: HumanEval_150_x_or_y
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // A simple program which should return the value of x if n is \n    // a prime\
  \ number and should return the value of y otherwise.\n    // Examples:\n    // >>>\
  \ xOrY((7l), (34l), (12l))\n    // (34l)\n    // >>> xOrY((15l), (8l), (5l))\n \
  \   // (5l)\n    def xOrY(n : Long, x : Long, y : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(xOrY((7l), (34l),\
  \ (12l)) == (34l));\n    assert(xOrY((15l), (8l), (5l)) == (5l));\n    assert(xOrY((3l),\
  \ (33l), (5212l)) == (33l));\n    assert(xOrY((1259l), (3l), (52l)) == (3l));\n\
  \    assert(xOrY((7919l), (-1l), (12l)) == (-1l));\n    assert(xOrY((3609l), (1245l),\
  \ (583l)) == (583l));\n    assert(xOrY((91l), (56l), (129l)) == (129l));\n    assert(xOrY((6l),\
  \ (34l), (1234l)) == (1234l));\n    assert(xOrY((1l), (2l), (0l)) == (0l));\n  \
  \  assert(xOrY((2l), (2l), (0l)) == (2l));\n    }\n\n}\n"
completions: ["        if (n % 2 == 0) {\n            x\n        } else {\n      \
    \      y\n        }", "        if (n % 2 == 0) {\n            x\n        } else\
    \ {\n            y\n        }", "        if (n%x == 0) {\n            return x\n\
    \        }\n        else {\n            return y\n        }", "        val isPrime\
    \ = n % 2 == 0\n        if (isPrime) {\n            x\n        } else {\n    \
    \        y\n        }", "        val isPrime = n match {\n            case _ if\
    \ n < 2 => false\n            case _ if n == 2 => true\n            case _ if\
    \ n % 2 == 0 => false\n            case _ if n % 3 == 0 => false\n           \
    \ case _ => true\n        }\n        if (isPrime) {\n            x\n        }\
    \ else {\n            y\n        }", "        val primes = primeFactors(n)\n \
    \       val x = primes.find(_ == x).getOrElse(x)\n        val y = primes.find(_\
    \ == y).getOrElse(y)\n        if (n % x == 0 && n % y == 0) {\n            x\n\
    \        } else {\n            y\n        }", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val x = if (n % primes.contains(x)) x else y\n    \
    \    x", "        val isPrime = n % 2 == 0\n        if (isPrime) {\n         \
    \   return x\n        } else {\n            return y\n        }", "        val\
    \ isPrime = n % 2 == 0\n        if (isPrime) {\n            x\n        } else\
    \ {\n            y\n        }", "        val isPrime = n % 2 == 0\n        val\
    \ isOdd = n % 2 == 1\n        if (isPrime) {\n            if (isOdd) {\n     \
    \           return x\n            } else {\n                return y\n       \
    \     }\n        } else {\n            return x\n        }", "        val primes\
    \ = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n        val\
    \ isNotPrime = mutable.Set[Long]()\n        val isPrime2 = mutable.Set[Long]()\n\
    \        val isNotPrime2 = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n\
    \        val isNotPrime3 = mutable.Set[Long]()\n        val isPrime4 = mutable.Set[Long]()\n\
    \        val isNotPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isNotPrime5 = mutable.Set[Long]()\n        val isPrime6 = mutable.Set[Long]()\n\
    \        val isNotPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isNotPrime7 = mutable.Set[Long]()\n        val isPrime8 = mutable.Set[Long]()\n\
    \        val isNotPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isNotPrime9 = mutable.Set[Long]()\n        val isPrime10 = mutable.Set[Long]()\n\
    \        val isNotPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isNotPrime11 = mutable.Set[Long]()\n        val isPrime12 = mutable.Set[Long]()\n\
    \        val isNotPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isNotPrime13 = mutable.Set[Long]()\n        val isPrime14 = mutable.Set[Long]()\n\
    \        val isNotPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isNotPrime15 = mutable.Set[Long]()\n        val isPrime16 = mutable.Set[Long]()\n\
    \        val isNotPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isNotPrime17 = mutable.Set[Long", "        val isPrime = n match\
    \ {\n            case 2l | 3l | 5l | 7l | 11l | 13l | 17l | 19l | 23l | 29l |\
    \ 31l | 37l | 41l | 43l | 47l | 53l | 59l | 61l | 67l | 71l | 73l | 79l | 83l\
    \ | 89l | 97l => true\n            case _ => false\n        }\n        if (isPrime)\
    \ {\n            return x\n        } else {\n            return y\n        }",
  "        val isPrime = n match {\n            case x if x < 2 => false\n       \
    \     case x if x == 2 => true\n            case x if x % 2 == 0 => false\n  \
    \          case x if x % 3 == 0 => true\n            case x if x % 5 == 0 => false\n\
    \            case x if x % 7 == 0 => true\n            case x if x % 11 == 0 =>\
    \ false\n            case x if x % 13 == 0 => true\n            case x if x %\
    \ 17 == 0 => false\n            case x if x % 19 == 0 => true\n            case\
    \ x if x % 23 == 0 => false\n            case x if x % 29 == 0 => true\n     \
    \       case x if x % 31 == 0 => false\n            case x if x % 37 == 0 => true\n\
    \            case x if x % 41 == 0 => false\n            case x if x % 43 == 0\
    \ => true\n            case x if x % 47 == 0 => false\n            case x if x\
    \ % 53 == 0 => true\n            case x if x % 59 == 0 => false\n            case\
    \ x if x % 61 == 0 => true\n            case x if x % 67 == 0 => false\n     \
    \       case x if x % 71 == 0 => true\n            case x if x % 73 == 0 => true\n\
    \            case x if x % 79 == 0 => true\n            case x if x % 83 == 0\
    \ => true\n            case x if x % 89 == 0 => true\n            case x if x\
    \ % 97 == 0 => true\n            case x if x % 101 == 0 => true\n            case\
    \ x if x % 103 == 0 => true\n            case x if x % 107 == 0 => true\n    \
    \        case x if x % 109 == 0 => true\n            case x if x % 113 == 0 =>\
    \ true\n            case x if x % 117 == 0 => true\n            case x if x %\
    \ 121 == 0 => true\n            case x if x % 123 == 0 => true\n            case\
    \ x if x % 127 == 0 => true\n            case x if x % 131 == 0 => true\n    \
    \        case x if x % 137 == 0 => true\n            case x if x % 139 == 0 =>\
    \ true\n            case x if x % 143 == 0 => true\n            case x if x %\
    \ 147 == 0 => true\n            case x if x % 151 == 0 => true\n            case\
    \ x if x % 157 == 0 => true\n            case x if x % 159 == 0 => true\n    \
    \        case x if x % 163 == 0 => true\n            case x if x % 167 == 0 =>\
    \ true\n            case x if x ", "        val isPrime = n match {\n        \
    \    case x if x < 2 => false\n            case x if x == 2 => true\n        \
    \    case x if x % 2 == 0 => false\n            case x if x % 3 == 0 => true\n\
    \            case x if x % 5 == 0 => true\n            case x if x % 7 == 0 =>\
    \ true\n            case x if x % 11 == 0 => true\n            case x if x % 13\
    \ == 0 => true\n            case x if x % 17 == 0 => true\n            case x\
    \ if x % 19 == 0 => true\n            case x if x % 23 == 0 => true\n        \
    \    case x if x % 29 == 0 => true\n            case x if x % 31 == 0 => true\n\
    \            case x if x % 37 == 0 => true\n            case x if x % 41 == 0\
    \ => true\n            case x if x % 43 == 0 => true\n            case x if x\
    \ % 47 == 0 => true\n            case x if x % 53 == 0 => true\n            case\
    \ x if x % 59 == 0 => true\n            case x if x % 61 == 0 => true\n      \
    \      case x if x % 67 == 0 => true\n            case x if x % 71 == 0 => true\n\
    \            case x if x % 73 == 0 => true\n            case x if x % 79 == 0\
    \ => true\n            case x if x % 83 == 0 => true\n            case x if x\
    \ % 89 == 0 => true\n            case x if x % 97 == 0 => true\n            case\
    \ x if x % 101 == 0 => true\n            case x if x % 103 == 0 => true\n    \
    \        case x if x % 107 == 0 => true\n            case x if x % 109 == 0 =>\
    \ true\n            case x if x % 113 == 0 => true\n            case x if x %\
    \ 117 == 0 => true\n            case x if x % 121 == 0 => true\n            case\
    \ x if x % 123 == 0 => true\n            case x if x % 127 == 0 => true\n    \
    \        case x if x % 131 == 0 => true\n            case x if x % 137 == 0 =>\
    \ true\n            case x if x % 139 == 0 => true\n            case x if x %\
    \ 143 == 0 => true\n            case x if x % 147 == 0 => true\n            case\
    \ x if x % 151 == 0 => true\n            case x if x % 157 == 0 => true\n    \
    \        case x if x % 159 == 0 => true\n            case x if x % 163 == 0 =>\
    \ true\n            case x if x % 167 == 0 => true\n            case x if x ",
  "        if (n % 2 == 0) x\n        else y", "        val isPrime = n % 2 == 0\n\
    \        if(isPrime) {\n            if(n == 2) return x\n            else return\
    \ y\n        }\n        else return x", "        if (n % 2 == 0) x\n        else\
    \ y", "        val isPrime = n % 2 == 0\n        if (isPrime) {\n            val\
    \ div = n / 2\n            if (div == 2) {\n                return x\n       \
    \     } else {\n                return y\n            }\n        } else {\n  \
    \          return y\n        }", "        if (n % 2 == 0) x\n        else y",
  "        val isPrime = n % 2 == 0\n        if (isPrime) {\n            return x\n\
    \        } else {\n            return y\n        }", "        if (n % 2 == 0)\
    \ x\n        else y", "        if (n == 1l) x\n        else if (n % 2 == 0l) y\n\
    \        else xOrY(n / 2l, xOrY(n / 2l, x, y), y)", "        if (n % 2 == 0) x\n\
    \        else y", "        if (n % 2 == 0) {\n            x\n        } else {\n\
    \            y\n        }", "        if (n % 2 == 0) x\n        else y", "   \
    \     if (n % 2 == 0) x\n        else y", "        if (n % 2 == 0) {\n       \
    \     return x\n        }\n        else {\n            return y\n        }", " \
    \       if (n % 2 == 0) {\n            return x\n        } else {\n          \
    \  return y\n        }", "        val isPrime = n % 2 == 0\n        if(isPrime)\
    \ x else y", "        if (n % 2 == 0) x\n        else y", "        if (n == 1l)\
    \ x\n        else y", "        val isPrime = n % 2 == 0\n        if (isPrime)\
    \ {\n            val isDivisibleByX = n % x == 0\n            if (isDivisibleByX)\
    \ {\n                val isDivisibleByY = n % y == 0\n                if (isDivisibleByY)\
    \ {\n                    x\n                } else {\n                    y\n\
    \                }\n            } else {\n                x\n            }\n \
    \       } else {\n            y\n        }", "        if (n % 2 == 0) x\n    \
    \    else y", "        if (n % 2 == 0) {\n            x\n        } else {\n  \
    \          y\n        }", "        val isPrime = n % 2 == 0\n        if(isPrime)\
    \ {\n            if(n == 2) {\n                return x\n            } else {\n\
    \                return y\n            }\n        } else {\n            return\
    \ x\n        }", "        val primes = primeFactors(n)\n        val isPrime =\
    \ primes.contains(x)\n        if (isPrime) {\n            x\n        } else {\n\
    \            y\n        }", "        if (n % 2 == 0) {\n            x\n      \
    \  } else {\n            y\n        }", "        val primes = mutable.ListBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.count(_ == n)\n        if\
    \ (primesCount == 0) {\n            return y\n        } else {\n            return\
    \ x\n        }", "        if (n % 2 == 0) x\n        else y", "        val isPrime\
    \ = n % 2 == 0\n        if (isPrime) {\n            x\n        } else {\n    \
    \        y\n        }", "        if (n % 2 == 0) x\n        else y", "       \
    \ val primes = mutable.Set[Long]()\n        val composites = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Boolean]()\n        val isComposite = mutable.Set[Boolean]()\n\
    \        val isPrimePrime = mutable.Set[Boolean]()\n        val isPrimeComposite\
    \ = mutable.Set[Boolean]()\n        val isCompositeComposite = mutable.Set[Boolean]()\n\
    \        val isPrimePrimePrime = mutable.Set[Boolean]()\n        val isPrimeCompositeComposite\
    \ = mutable.Set[Boolean]()\n        val isCompositePrime = mutable.Set[Boolean]()\n\
    \        val isPrimePrimePrime = mutable.Set[Boolean]()\n        val isPrimeCompositeComposite\
    \ = mutable.Set[Boolean]()\n        val isCompositeCompositePrime = mutable.Set[Boolean]()\n\
    \        val isPrimePrimePrimePrime = mutable.Set[Boolean]()\n        val isPrimeCompositeCompositePrime\
    \ = mutable.Set[Boolean]()\n        val isCompositeCompositePrimePrime = mutable.Set[Boolean]()\n\
    \        val isPrimePrimePrimePrime = mutable.Set[Boolean]()\n        val isPrimeCompositeCompositePrimePrime\
    \ = mutable.Set[Boolean]()\n        val isCompositeCompositePrimePrimePrime =\
    \ mutable.Set[Boolean]()\n        val isPrimePrimePrimePrimePrime = mutable.Set[Boolean]()\n\
    \        val isPrimeCompositeCompositePrimePrimePrime = mutable.Set[Boolean]()\n\
    \        val isCompositeCompositePrimePrimePrimePrime = mutable.Set[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrime = mutable.Set[Boolean]()\n     \
    \   val isPrimeCompositeCompositePrimePrimePrimePrime = mutable.Set[Boolean]()\n\
    \        val isCompositeCompositePrimePrimePrimePrimePrime = mutable.Set[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.Set[Boolean]()\n\
    \        val isPrimeCompositeCompositePrimePrimePrimePrimePrime = mutable.Set[Boolean]()\n\
    \        val isCompositeCompositePrimePrimePrime", "        val isPrime = n match\
    \ {\n            case x if x < 2 => false\n            case x if x == 2 => true\n\
    \            case x if x == 3 => true\n            case x if x == 5 => true\n\
    \            case x if x == 7 => true\n            case x if x == 11 => true\n\
    \            case x if x == 13 => true\n            case x if x == 17 => true\n\
    \            case x if x == 19 => true\n            case x if x == 23 => true\n\
    \            case x if x == 29 => true\n            case x if x == 37 => true\n\
    \            case x if x == 47 => true\n            case x if x == 59 => true\n\
    \            case x if x == 67 => true\n            case x if x == 79 => true\n\
    \            case x if x == 89 => true\n            case x if x == 97 => true\n\
    \            case x if x == 101 => true\n            case x if x == 103 => true\n\
    \            case x if x == 107 => true\n            case x if x == 109 => true\n\
    \            case x if x == 113 => true\n            case x if x == 127 => true\n\
    \            case x if x == 131 => true\n            case x if x == 137 => true\n\
    \            case x if x == 139 => true\n            case x if x == 149 => true\n\
    \            case x if x == 151 => true\n            case x if x == 157 => true\n\
    \            case x if x == 163 => true\n            case x if x == 167 => true\n\
    \            case x if x == 173 => true\n            case x if x == 179 => true\n\
    \            case x if x == 181 => true\n            case x if x == 191 => true\n\
    \            case x if x == 193 => true\n            case x if x == 197 => true\n\
    \            case x if x == 199 => true\n            case x if x == 203 => true\n\
    \            case x if x == 211 => true\n            case x if x == 217 => true\n\
    \            case x if x == 223 => true\n            case x if x == 229 => true\n\
    \            case x if x == 233 => true\n            case x if x == 239 => true\n\
    \            case x if x == 241 => true\n            case x if x == 243 => true\n\
    \            case x if x == 247 => true\n            case x if x == 251 => true\n\
    \            case x if x == 253 => true\n            case x if x == 257 => true\n\
    \            case x if x == 263 => true\n            case x if x == 269 => true\n\
    \            case x if x == 271 => true\n            case x if x == 277 => true\n\
    \            case x if x == 281 => true\n            case ", '        if (n %
    2 == 0) x else y', "        val isPrime = n match {\n            case x if x <\
    \ 2 => false\n            case x if x == 2 => true\n            case x if x %\
    \ 2 == 0 => false\n            case x if x % 3 == 0 => false\n            case\
    \ x if x % 5 == 0 => false\n            case x if x % 7 == 0 => false\n      \
    \      case x if x % 11 == 0 => false\n            case x if x % 13 == 0 => false\n\
    \            case x if x % 17 == 0 => false\n            case x if x % 19 == 0\
    \ => false\n            case x if x % 23 == 0 => false\n            case x if\
    \ x % 29 == 0 => false\n            case x if x % 31 == 0 => false\n         \
    \   case x if x % 37 == 0 => false\n            case x if x % 41 == 0 => false\n\
    \            case x if x % 43 == 0 => false\n            case x if x % 47 == 0\
    \ => false\n            case x if x % 53 == 0 => false\n            case x if\
    \ x % 59 == 0 => false\n            case x if x % 61 == 0 => false\n         \
    \   case x if x % 67 == 0 => false\n            case x if x % 71 == 0 => false\n\
    \            case x if x % 73 == 0 => false\n            case x if x % 79 == 0\
    \ => false\n            case x if x % 83 == 0 => false\n            case x if\
    \ x % 89 == 0 => false\n            case x if x % 97 == 0 => false\n         \
    \   case x if x % 101 == 0 => false\n            case x if x % 103 == 0 => false\n\
    \            case x if x % 107 == 0 => false\n            case x if x % 109 ==\
    \ 0 => false\n            case x if x % 113 == 0 => false\n            case x\
    \ if x % 117 == 0 => false\n            case x if x % 121 == 0 => false\n    \
    \        case x if x % 123 == 0 => false\n            case x if x % 127 == 0 =>\
    \ false\n            case x if x % 131 == 0 => false\n            case x if x\
    \ % 137 == 0 => false\n            case x if x % 139 == 0 => false\n         \
    \   case x if x % 143 == 0 => false\n            case x if x % 147 == 0 => false\n\
    \            case x if x % 151 == 0 => false\n            case x if x % 157 ==\
    \ 0 => false\n            case x if x % 159 == 0 => false\n            case x\
    \ if x % 163 == 0 => false\n            case x if x % 167 == 0 => false\n    \
    \        case x if x ", "        val isPrime = n match {\n            case x if\
    \ x < 2 => false\n            case x if x == 2 => true\n            case x if\
    \ x == 3 => true\n            case x if x == 5 => true\n            case x if\
    \ x == 7 => true\n            case x if x == 11 => true\n            case x if\
    \ x == 13 => true\n            case x if x == 17 => true\n            case x if\
    \ x == 19 => true\n            case x if x == 23 => true\n            case x if\
    \ x == 29 => true\n            case x if x == 37 => true\n            case x if\
    \ x == 47 => true\n            case x if x == 59 => true\n            case x if\
    \ x == 67 => true\n            case x if x == 79 => true\n            case x if\
    \ x == 89 => true\n            case x if x == 97 => true\n            case x if\
    \ x == 103 => true\n            case x if x == 109 => true\n            case x\
    \ if x == 113 => true\n            case x if x == 121 => true\n            case\
    \ x if x == 127 => true\n            case x if x == 131 => true\n            case\
    \ x if x == 137 => true\n            case x if x == 139 => true\n            case\
    \ x if x == 149 => true\n            case x if x == 151 => true\n            case\
    \ x if x == 157 => true\n            case x if x == 163 => true\n            case\
    \ x if x == 167 => true\n            case x if x == 173 => true\n            case\
    \ x if x == 179 => true\n            case x if x == 181 => true\n            case\
    \ x if x == 191 => true\n            case x if x == 193 => true\n            case\
    \ x if x == 197 => true\n            case x if x == 199 => true\n            case\
    \ x if x == 203 => true\n            case x if x == 209 => true\n            case\
    \ x if x == 211 => true\n            case x if x == 217 => true\n            case\
    \ x if x == 223 => true\n            case x if x == 229 => true\n            case\
    \ x if x == 233 => true\n            case x if x == 239 => true\n            case\
    \ x if x == 241 => true\n            case x if x == 243 => true\n            case\
    \ x if x == 247 => true\n            case x if x == 251 => true\n            case\
    \ x if x == 253 => true\n            case x if x == 257 => true\n            case\
    \ x if x == 263 => true\n            case x if x == 269 => true\n            case\
    \ x if x == 271 => true\n            case x if x == 277 => true\n            case\
    \ x if x == 281 => true\n            case ", "        val isPrime = n match {\n\
    \            case x if x < 2 => false\n            case x if x == 2 => true\n\
    \            case x if x % 2 == 0 => false\n            case x if x % 3 == 0 =>\
    \ false\n            case x if x % 5 == 0 => false\n            case x if x %\
    \ 7 == 0 => false\n            case x if x % 11 == 0 => false\n            case\
    \ x if x % 13 == 0 => false\n            case x if x % 17 == 0 => false\n    \
    \        case x if x % 19 == 0 => false\n            case x if x % 23 == 0 =>\
    \ false\n            case x if x % 29 == 0 => false\n            case x if x %\
    \ 31 == 0 => false\n            case x if x % 37 == 0 => false\n            case\
    \ x if x % 41 == 0 => false\n            case x if x % 43 == 0 => false\n    \
    \        case x if x % 47 == 0 => false\n            case x if x % 53 == 0 =>\
    \ false\n            case x if x % 59 == 0 => false\n            case x if x %\
    \ 61 == 0 => false\n            case x if x % 67 == 0 => false\n            case\
    \ x if x % 71 == 0 => false\n            case x if x % 73 == 0 => false\n    \
    \        case x if x % 79 == 0 => false\n            case x if x % 83 == 0 =>\
    \ false\n            case x if x % 89 == 0 => false\n            case x if x %\
    \ 97 == 0 => false\n            case x if x % 101 == 0 => false\n            case\
    \ x if x % 103 == 0 => false\n            case x if x % 107 == 0 => false\n  \
    \          case x if x % 109 == 0 => false\n            case x if x % 113 == 0\
    \ => false\n            case x if x % 117 == 0 => false\n            case x if\
    \ x % 121 == 0 => false\n            case x if x % 123 == 0 => false\n       \
    \     case x if x % 127 == 0 => false\n            case x if x % 131 == 0 => false\n\
    \            case x if x % 137 == 0 => false\n            case x if x % 139 ==\
    \ 0 => false\n            case x if x % 143 == 0 => false\n            case x\
    \ if x % 147 == 0 => false\n            case x if x % 151 == 0 => false\n    \
    \        case x if x % 157 == 0 => false\n            case x if x % 159 == 0 =>\
    \ false\n            case x if x % 163 == 0 => false\n            case x if x\
    \ % 167 == 0 => false\n            case x if x ", "        val primes = mutable.Set[Long]()\n\
    \        val composites = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isComposite = mutable.Set[Long]()\n        val isPrimeAndComposite\
    \ = mutable.Set[Long]()\n        val isPrimeAndPrimeAndComposite = mutable.Set[Long]()\n\
    \        val isPrimeAndPrimeAndPrimeAndComposite = mutable.Set[Long]()\n     \
    \   val isPrimeAndPrimeAndPrimeAndPrimeAndComposite = mutable.Set[Long]()\n  \
    \      val isPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndComposite = mutable.Set[Long]()\n\
    \        val isPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndComposite\
    \ = mutable.Set[Long]()\n        val isPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndComposite\
    \ = mutable.Set[Long]()\n        val isPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPrimeAndPri",
  "        val primes = mutable.ArrayBuffer.empty[Long]\n        val primesCount =\
    \ mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeCount = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSum\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSumCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeSumSum = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSumSumCount\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSumSumSum = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeSumSumSumCount = mutable.ArrayBuffer.empty[Boolean]\n    \
    \    val isPrimeSumSumSumSum = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeSumSumSumSumCount = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSumSumSumSumSumCount\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSumSumSumSumSumCount\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSumSumSumSumSumSumCount\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSumSumSumSumSumSumCount\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSumSumSumSumSumSumSumCount\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSumSumSumSumSumSumSumSumCount\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSumSumSumSumSumSumSumSumSumCount\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSumSumSumSumSumSum",
  "        val isPrime = n % 2 == 0\n        val isOdd = n % 2 != 0\n        if (isPrime\
    \ && isOdd)\n            x \n        else \n            y", "        val isPrime\
    \ = n % 2 == 0\n        if (isPrime) {\n            x\n        } else {\n    \
    \        y\n        }", "        if (n % 2 == 0) return x\n        else return\
    \ y", "        val isPrime = n % 2 == 0\n        if (isPrime) {\n            x\n\
    \        } else {\n            y\n        }", "        val isPrime = n match {\n\
    \            case x if x < 2 => false\n            case x if x == 2 => true\n\
    \            case x if x % 2 == 0 => false\n            case x if x % 3 == 0 =>\
    \ false\n            case x if x % 5 == 0 => false\n            case x if x %\
    \ 7 == 0 => false\n            case x if x % 11 == 0 => false\n            case\
    \ x if x % 13 == 0 => false\n            case x if x % 17 == 0 => false\n    \
    \        case x if x % 19 == 0 => false\n            case x if x % 23 == 0 =>\
    \ false\n            case x if x % 29 == 0 => false\n            case x if x %\
    \ 31 == 0 => false\n            case x if x % 37 == 0 => false\n            case\
    \ x if x % 41 == 0 => false\n            case x if x % 43 == 0 => false\n    \
    \        case x if x % 47 == 0 => false\n            case x if x % 53 == 0 =>\
    \ false\n            case x if x % 59 == 0 => false\n            case x if x %\
    \ 61 == 0 => false\n            case x if x % 67 == 0 => false\n            case\
    \ x if x % 71 == 0 => false\n            case x if x % 73 == 0 => false\n    \
    \        case x if x % 79 == 0 => false\n            case x if x % 83 == 0 =>\
    \ false\n            case x if x % 89 == 0 => false\n            case x if x %\
    \ 97 == 0 => false\n            case x if x % 101 == 0 => false\n            case\
    \ x if x % 103 == 0 => false\n            case x if x % 107 == 0 => false\n  \
    \          case x if x % 109 == 0 => false\n            case x if x % 113 == 0\
    \ => false\n            case x if x % 117 == 0 => false\n            case x if\
    \ x % 121 == 0 => false\n            case x if x % 123 == 0 => false\n       \
    \     case x if x % 127 == 0 => false\n            case x if x % 131 == 0 => false\n\
    \            case x if x % 137 == 0 => false\n            case x if x % 139 ==\
    \ 0 => false\n            case x if x % 143 == 0 => false\n            case x\
    \ if x % 147 == 0 => false\n            case x if x % 151 == 0 => false\n    \
    \        case x if x % 157 == 0 => false\n            case x if x % 159 == 0 =>\
    \ false\n            case x if x % 163 == 0 => false\n            case x if x\
    \ % 167 == 0 => false\n            case x if x ", "        if (n == 1l) x\n  \
    \      else if (n % 2 == 0l) y\n        else xOrY(n / 2l, xOrY(n / 2l, x, y),\
    \ y)", "        val isPrime = n match {\n            case x if x < 2 => false\n\
    \            case x if x == 2 => true\n            case x if x == n => true\n\
    \            case x => \n                val isPrime2 = x % 2 != 0\n         \
    \       val isPrime3 = x % 3 != 0\n                val isPrime5 = x % 5 != 0\n\
    \                val isPrime7 = x % 7 != 0\n                val isPrime11 = x\
    \ % 11 != 0\n                val isPrime13 = x % 13 != 0\n                val\
    \ isPrime17 = x % 17 != 0\n                val isPrime19 = x % 19 != 0\n     \
    \           val isPrime23 = x % 23 != 0\n                val isPrime29 = x % 29\
    \ != 0\n                val isPrime31 = x % 31 != 0\n                val isPrime37\
    \ = x % 37 != 0\n                val isPrime41 = x % 41 != 0\n               \
    \ val isPrime43 = x % 43 != 0\n                val isPrime47 = x % 47 != 0\n \
    \               val isPrime51 = x % 51 != 0\n                val isPrime55 = x\
    \ % 55 != 0\n                val isPrime59 = x % 59 != 0\n                val\
    \ isPrime61 = x % 61 != 0\n                val isPrime67 = x % 67 != 0\n     \
    \           val isPrime71 = x % 71 != 0\n                val isPrime73 = x % 73\
    \ != 0\n                val isPrime79 = x % 79 != 0\n                val isPrime83\
    \ = x % 83 != 0\n                val isPrime89 = x % 89 != 0\n               \
    \ val isPrime93 = x % 93 != 0\n                val isPrime97 = x % 97 != 0\n \
    \               val isPrime101 = x % 101 != 0\n                val isPrime105\
    \ = x % 105 != 0\n                val isPrime109 = x % 109 != 0\n            \
    \    val isPrime113 = x % 113 != 0\n                val isPrime117 = x % 117 !=\
    \ 0\n                val isPrime121 = x % 121 != 0\n                val isPrime125\
    \ = x % 125 != 0\n                val isPrime129 = x % 129 != 0\n            \
    \    val isPrime133 = x % 133 != 0\n                val isPri", "        val isPrime\
    \ = n.isPrime\n        val isEven = n.toInt % 2 == 0\n        val isOdd = n.toInt\
    \ % 2 != 0\n        val isPrimeEven = isPrime && isEven\n        val isPrimeOdd\
    \ = isPrime && isOdd\n        val isPrimeEvenOdd = isPrimeEven && isOdd\n    \
    \    val isPrimeEvenOddEven = isPrimeEven && isOdd && isEven\n        val isPrimeEvenOddEvenOdd\
    \ = isPrimeEven && isOdd && isEven && isOdd\n        val isPrimeEvenOddEvenOddEven\
    \ = isPrimeEven && isOdd && isEven && isOdd && isEven\n        val isPrimeEvenOddEvenOddEvenOdd\
    \ = isPrimeEven && isOdd && isEven && isOdd && isEven && isOdd\n        val isPrimeEvenOddEvenOddEvenOddEven\
    \ = isPrimeEven && isOdd && isEven && isOdd && isEven && isOdd && isEven\n   \
    \     val isPrimeEvenOddEvenOddEvenOddEvenOdd = isPrimeEven && isOdd && isEven\
    \ && isOdd && isEven && isOdd && isEven && isOdd\n        val isPrimeEvenOddEvenOddEvenOddEvenOddEven\
    \ = isPrimeEven && isOdd && isEven && isOdd && isEven && isOdd && isEven && isOdd\n\
    \        val isPrimeEvenOddEvenOddEvenOddEvenOddEvenOdd = isPrimeEven && isOdd\
    \ && isEven && isOdd && isEven && isOdd && isEven && isOdd && isEven\n       \
    \ val isPrimeEvenOddEvenOddEvenOddEvenOddEvenOddEven = isPrimeEven && isOdd &&\
    \ isEven && isOdd && isEven && isOdd && isEven && isOdd && isEven && isOdd\n \
    \       val isPrimeEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = isPrimeEven &&\
    \ isOdd && isEven && isOdd && isEven && isOdd && isEven && isOdd && isEven &&\
    \ isOdd\n", "        val primes = mutable.Set[Long]()\n        val isPrime = (n\
    \ : Long) => {\n            if (primes.contains(n)) \n                primes.contains(n)\n\
    \            else \n                primes += n\n            primes.contains(n)\n\
    \        }\n        val isNotPrime = (n : Long) => {\n            if (primes.contains(n))\
    \ \n                primes.contains(n)\n            else \n                primes\
    \ -= n\n            primes.contains(n)\n        }\n        val isDivisibleBy =\
    \ (n : Long) => {\n            if (n % x == 0) \n                isPrime(n)\n\
    \            else \n                isNotPrime(n)\n        }\n        val isNotDivisibleBy\
    \ = (n : Long) => {\n            if (n % x == 0) \n                isNotPrime(n)\n\
    \            else \n                isPrime(n)\n        }\n        val isEven\
    \ = (n : Long) => {\n            if (n % 2 == 0) \n                isPrime(n)\n\
    \            else \n                isNotPrime(n)\n        }\n        val isOdd\
    \ = (n : Long) => {\n            if (n % 2 == 1) \n                isPrime(n)\n\
    \            else \n                isNotPrime(n)\n        }\n        val isGreaterThan\
    \ = (n : Long) => {\n            if (n > x) \n                isPrime(n)\n   \
    \         else \n                isNotPrime(n)\n        }\n        val isLessThan\
    \ = (n : Long) => {\n            if (n < x) \n                isPrime(n)\n   \
    \         else \n                isNotPrime(n)\n        }\n        val isGreaterThanOrEqualTo\
    \ = (n : Long) => {\n            if (n >= x) \n                isPrime(n)\n  \
    \          else \n                isNotPrime(n)\n        }\n        val isLessThanOrEqualTo\
    \ = (n : Long) => {\n            if (n <= x) \n                isPrime(n)\n  \
    \          else \n                isNotPrime(n)\n        }\n        val isEvenOrOdd\
    \ = (n : Long) => {\n            if (n % 2 == 0) \n                isEven(n)\n\
    \            else \n                isOdd(n)\n        }\n        val isOddOrEven\
    \ = (n : Long) => {\n            if (n % 2 == 1) \n                isEven(n)\n\
    \            else \n                isOdd(n)\n        }\n        val isGreaterThanOrEqualToOrOdd\
    \ = (n : Long) => {\n            if (n >= x || n % 2 == 1) \n                isEven(n)\n\
    \            else \n                isOdd(n)\n        }\n        val isLessThanOrEqualToOrEven\
    \ = (n : Long) => {\n            if (n <= x || n % 2 == 0) \n                isEven(n)\n\
    \            else \n                is", "        if (n % 2 == 0) {\n        \
    \    return x\n        } else {\n            return y\n        }", "        if\
    \ (n%x == 0) {\n            return x\n        } else {\n            return y\n\
    \        }", "        val isPrime = n % 2 == 0\n        val isOdd = n % 2 == 1\n\
    \        val isPrimeOrOdd = isPrime || isOdd\n        val isPrimeOrEven = isPrime\
    \ || isEven\n        val isPrimeOrOddEven = isPrimeOrOdd || isEven\n        val\
    \ isPrimeOrEvenOdd = isPrimeOrEven || isOdd\n        val isPrimeOrOddEvenOdd =\
    \ isPrimeOrOddEven || isEven\n        val isPrimeOrEvenOddEven = isPrimeOrEvenOdd\
    \ || isOddEven\n        val isPrimeOrOddEvenOddEven = isPrimeOrOddEvenOdd || isEvenOddEven\n\
    \        val isPrimeOrEvenOddEvenOdd = isPrimeOrEvenOddEven || isOddEvenOdd\n\
    \        val isPrimeOrOddEvenOddEvenOdd = isPrimeOrOddEvenOddEven || isEvenOddEvenOdd\n\
    \        val isPrimeOrEvenOddEvenOddEven = isPrimeOrEvenOddEvenOdd || isOddEvenOddEven\n\
    \        val isPrimeOrOddEvenOddEvenOddEven = isPrimeOrOddEvenOddEvenOdd || isEvenOddEvenOddEven\n\
    \        val isPrimeOrEvenOddEvenOddEvenOdd = isPrimeOrEvenOddEvenOddEven || isOddEvenOddEvenOdd\n\
    \        val isPrimeOrOddEvenOddEvenOddEvenOdd = isPrimeOrOddEvenOddEvenOddEven\
    \ || isEvenOddEvenOddEvenOdd\n        val isPrimeOrEvenOddEvenOddEvenOddEven =\
    \ isPrimeOrEvenOddEvenOddEvenOdd || isOddEvenOddEvenOddEven\n        val isPrimeOrOddEvenOddEvenOddEvenOdd\
    \ = isPrimeOrOddEvenOddEvenOddEven || isEvenOddEvenOddEvenOdd\n        val isPrimeOrEvenOddEvenOddEvenOddEvenOdd\
    \ = isPrimeOrEvenOddEvenOddEvenOddEven || isOddEvenOddEvenOddEvenOdd\n       \
    \ val isPrimeOrOddEvenOddEvenOddEvenOddEven = isPri", "        val isPrime = n\
    \ % 2 == 0\n        if (isPrime) {\n            val isOdd = n % 2 == 1\n     \
    \       if (isOdd) {\n                val isEven = n % 2 == 0\n              \
    \  if (isEven) {\n                    x\n                } else {\n          \
    \          y\n                }\n            } else {\n                x\n   \
    \         }\n        } else {\n            y\n        }", "        val isPrime\
    \ = n match {\n            case _ if n <= 1 => false\n            case _ if n\
    \ % 2 == 0 => false\n            case _ if n % 3 == 0 => false\n            case\
    \ _ if n % 5 == 0 => false\n            case _ => true\n        }\n        if\
    \ (isPrime) {\n            return x\n        } else {\n            return y\n\
    \        }", "        if (n % 2 == 0) x\n        else y", "        if (n % 2 ==\
    \ 0) x\n        else y", "        if (n % 2 == 0) x\n        else y", "      \
    \  if (n % 2 == 0) return x\n        else return y", "        if (n % 2 == 0)\
    \ x\n        else y", "        val isPrime = n match {\n            case _ if\
    \ n <= 1 => true\n            case _ if n == 2 => true\n            case _ if\
    \ n % 2 == 0 => false\n            case _ if n % 3 == 0 => false\n           \
    \ case _ if n % 5 == 0 => false\n            case _ => true\n        }\n     \
    \   if (isPrime) {\n            return x\n        } else {\n            return\
    \ y\n        }", "        val isPrime = n match {\n            case x if x < 2\
    \ => false\n            case x if x == 2 => true\n            case x if x == 3\
    \ => true\n            case x if x == 5 => true\n            case x if x == 7\
    \ => true\n            case x if x == 11 => true\n            case x if x == 13\
    \ => true\n            case x if x == 17 => true\n            case x if x == 19\
    \ => true\n            case x if x == 23 => true\n            case x if x == 29\
    \ => true\n            case x if x == 37 => true\n            case x if x == 47\
    \ => true\n            case x if x == 59 => true\n            case x if x == 67\
    \ => true\n            case x if x == 79 => true\n            case x if x == 89\
    \ => true\n            case x if x == 97 => true\n            case x if x == 103\
    \ => true\n            case x if x == 109 => true\n            case x if x ==\
    \ 113 => true\n            case x if x == 121 => true\n            case x if x\
    \ == 127 => true\n            case x if x == 131 => true\n            case x if\
    \ x == 137 => true\n            case x if x == 139 => true\n            case x\
    \ if x == 143 => true\n            case x if x == 149 => true\n            case\
    \ x if x == 151 => true\n            case x if x == 157 => true\n            case\
    \ x if x == 163 => true\n            case x if x == 169 => true\n            case\
    \ x if x == 173 => true\n            case x if x == 179 => true\n            case\
    \ x if x == 181 => true\n            case x if x == 191 => true\n            case\
    \ x if x == 193 => true\n            case x if x == 197 => true\n            case\
    \ x if x == 199 => true\n            case x if x == 203 => true\n            case\
    \ x if x == 209 => true\n            case x if x == 211 => true\n            case\
    \ x if x == 217 => true\n            case x if x == 223 => true\n            case\
    \ x if x == 229 => true\n            case x if x == 233 => true\n            case\
    \ x if x == 239 => true\n            case x if x == 241 => true\n            case\
    \ x if x == 243 => true\n            case x if x == 247 => true\n            case\
    \ x if x == 251 => true\n            case x if x == 253 => true\n            case\
    \ x if x == 257 => true\n            case x if x == 263 => true\n            case\
    \ x if x == 269 => true\n            case x if x == 271 => true\n            case\
    \ x if x == 277 => true\n            case ", "        if (n % 2 == 0) x\n    \
    \    else y", "        if (n % 2 == 0) x\n        else y", "        if (n % 2\
    \ == 0) x\n        else y", "        if (n%x == 0) {\n            return x\n \
    \       }\n        else {\n            return y\n        }", "        val isPrime\
    \ = n % 2 == 0\n        if (isPrime) {\n            val isDivisibleByX = n % x\
    \ == 0\n            val isDivisibleByY = n % y == 0\n            if (isDivisibleByX\
    \ && isDivisibleByY) {\n                return x\n            } else {\n     \
    \           return y\n            }\n        } else {\n            return n\n\
    \        }", "        if (n % 2 == 0) x\n        else y", "        val isPrime\
    \ = n match {\n            case _ if n <= 1 => false\n            case _ if n\
    \ % 2 == 0 => false\n            case _ if n % 3 == 0 => false\n            case\
    \ _ if n % 5 == 0 => false\n            case _ if n % 7 == 0 => false\n      \
    \      case _ => true\n        }\n        if (isPrime) {\n            x\n    \
    \    } else {\n            y\n        }", "        val isPrime = n % 2 == 0\n\
    \        val isOdd = n % 2 != 0\n        val isEven = n % 2 == 0\n        val\
    \ isOddEven = n % 2 != 0 && n % 2 == 0\n        val isOddEvenOdd = n % 2 != 0\
    \ && n % 2 != 0 && n % 2 == 0\n        val isOddEvenOddEven = n % 2 != 0 && n\
    \ % 2 != 0 && n % 2 != 0 && n % 2 == 0\n        val isOddEvenOddEvenOdd = n %\
    \ 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 == 0\n        val\
    \ isOddEvenOddEvenOddEven = n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 !=\
    \ 0 && n % 2 != 0 && n % 2 == 0\n        val isOddEvenOddEvenOddEvenOdd = n %\
    \ 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 != 0\
    \ && n % 2 == 0\n        val isOddEvenOddEvenOddEvenOddEven = n % 2 != 0 && n\
    \ % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 !=\
    \ 0 && n % 2 == 0\n        val isOddEvenOddEvenOddEvenOddEvenOdd = n % 2 != 0\
    \ && n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n %\
    \ 2 != 0 && n % 2 != 0 && n % 2 == 0\n        val isOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n %\
    \ 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 == 0\n        val\
    \ isOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n % 2 != 0 && n % 2 != 0 && n % 2\
    \ != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 != 0 &&\
    \ n % 2 != 0 && n % 2 != 0 && n % 2 == 0\n        val isOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n %\
    \ 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 != 0 && n % 2 != 0\
    \ && n % 2 == 0\n        val isOddEvenOddEvenOddEven", "        val isPrime =\
    \ n % 2 == 0\n        val isNotPrime = n % 2 != 0\n        if (isPrime) {\n  \
    \          return x\n        } else {\n            return y\n        }", "   \
    \     val primes = primeFactors(n)\n        val xFactors = primes.filter(_ % x\
    \ == 0)\n        val yFactors = primes.filter(_ % y == 0)\n        val xFactor\
    \ = if (xFactors.isEmpty) x else xFactors.head\n        val yFactor = if (yFactors.isEmpty)\
    \ y else yFactors.head\n        (xFactor, yFactor)", "        if (n % 2 == 0)\
    \ {\n            x\n        } else {\n            y\n        }", "        val\
    \ isPrime = n % 2 == 0\n        if (isPrime) {\n            return x\n       \
    \ } else {\n            return y\n        }", "        if (n % 2 == 0) x\n   \
    \     else y", "        if (n % 2 == 0) x\n        else y", "        if (n % 2\
    \ == 0) x\n        else y", "        if (n % 2 == 0) x\n        else y", "   \
    \     val isPrime = n % 2 == 0\n        if (isPrime) {\n            x\n      \
    \  } else {\n            y\n        }", "        val primes = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Boolean]()\n        val isPrime2 = mutable.Set[Boolean]()\n\
    \        val isPrime3 = mutable.Set[Boolean]()\n        val isPrime4 = mutable.Set[Boolean]()\n\
    \        val isPrime5 = mutable.Set[Boolean]()\n        val isPrime6 = mutable.Set[Boolean]()\n\
    \        val isPrime7 = mutable.Set[Boolean]()\n        val isPrime8 = mutable.Set[Boolean]()\n\
    \        val isPrime9 = mutable.Set[Boolean]()\n        val isPrime10 = mutable.Set[Boolean]()\n\
    \        val isPrime11 = mutable.Set[Boolean]()\n        val isPrime12 = mutable.Set[Boolean]()\n\
    \        val isPrime13 = mutable.Set[Boolean]()\n        val isPrime14 = mutable.Set[Boolean]()\n\
    \        val isPrime15 = mutable.Set[Boolean]()\n        val isPrime16 = mutable.Set[Boolean]()\n\
    \        val isPrime17 = mutable.Set[Boolean]()\n        val isPrime18 = mutable.Set[Boolean]()\n\
    \        val isPrime19 = mutable.Set[Boolean]()\n        val isPrime20 = mutable.Set[Boolean]()\n\
    \        val isPrime21 = mutable.Set[Boolean]()\n        val isPrime22 = mutable.Set[Boolean]()\n\
    \        val isPrime23 = mutable.Set[Boolean]()\n        val isPrime24 = mutable.Set[Boolean]()\n\
    \        val isPrime25 = mutable.Set[Boolean]()\n        val isPrime26 = mutable.Set[Boolean]()\n\
    \        val isPrime27 = mutable.Set[Boolean]()\n        val isPrime28 = mutable.Set[Boolean]()\n\
    \        val isPrime29 = mutable.Set[Boolean]()\n        val isPrime30 = mutable.Set[Boolean]()\n\
    \        val isPrime31 = mutable.Set[Boolean]()\n        val isPrime32 = mutable.Set[Boolean]()\n\
    \        val isPrime33 = mutable.Set[Boolean]()\n        val isPrime34 = mutable.Set[Boolean]()\n\
    \        val ", "        val primes = List(n, x, y)\n        val isPrime = primes.forall(p\
    \ => n % p == 0)\n        if (isPrime) x else y", "        val primes = mutable.ListBuffer(2l)\
    \ \n        val composites = mutable.ListBuffer(3l) \n        val isPrime = true\n\
    \        val isComposite = false\n        val isPrimeOrComposite = true\n    \
    \    val isPrimeOrCompositeOrNotPrime = true\n        val isPrimeOrCompositeOrNotPrimeOrNotComposite\
    \ = true\n        val isPrimeOrCompositeOrNotPrimeOrNotCompositeOrNotPrime = true\n\
    \        val isPrimeOrCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotComposite\
    \ = true\n        val isPrimeOrCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrime\
    \ = true\n        val isPrimeOrCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotComposite\
    \ = true\n        val isPrimeOrCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrime\
    \ = true\n        val isPrimeOrCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotComposite\
    \ = true\n        val isPrimeOrCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrime\
    \ = true\n        val isPrimeOrCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotComposite\
    \ = true\n        val isPrimeOrCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrime\
    \ = true\n        val isPrimeOrCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotComposite\
    \ = true\n        val isPrimeOrCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrime\
    \ = true\n        val isPrimeOrCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNotCompositeOrNotPrimeOrNot",
  "        if (n % 2 == 0) x\n        else y", "        val isPrime = n % 2 == 0\n\
    \        if (isPrime) {\n            x\n        } else {\n            y\n    \
    \    }", "        if (n % 2 == 0) x\n        else y", "        val isPrime = n\
    \ match {\n            case x if x < 2 => false\n            case x if x == 2\
    \ => true\n            case x if x % 2 == 0 => false\n            case x if x\
    \ % 3 == 0 => true\n            case x if x % 5 == 0 => true\n            case\
    \ x if x % 7 == 0 => true\n            case x if x % 11 == 0 => true\n       \
    \     case x if x % 13 == 0 => true\n            case x if x % 17 == 0 => true\n\
    \            case x if x % 19 == 0 => true\n            case x if x % 23 == 0\
    \ => true\n            case x if x % 29 == 0 => true\n            case x if x\
    \ % 31 == 0 => true\n            case x if x % 37 == 0 => true\n            case\
    \ x if x % 41 == 0 => true\n            case x if x % 43 == 0 => true\n      \
    \      case x if x % 47 == 0 => true\n            case x if x % 53 == 0 => true\n\
    \            case x if x % 59 == 0 => true\n            case x if x % 61 == 0\
    \ => true\n            case x if x % 67 == 0 => true\n            case x if x\
    \ % 71 == 0 => true\n            case x if x % 73 == 0 => true\n            case\
    \ x if x % 79 == 0 => true\n            case x if x % 83 == 0 => true\n      \
    \      case x if x % 89 == 0 => true\n            case x if x % 97 == 0 => true\n\
    \            case x if x % 101 == 0 => true\n            case x if x % 103 ==\
    \ 0 => true\n            case x if x % 107 == 0 => true\n            case x if\
    \ x % 109 == 0 => true\n            case x if x % 113 == 0 => true\n         \
    \   case x if x % 117 == 0 => true\n            case x if x % 121 == 0 => true\n\
    \            case x if x % 123 == 0 => true\n            case x if x % 127 ==\
    \ 0 => true\n            case x if x % 131 == 0 => true\n            case x if\
    \ x % 137 == 0 => true\n            case x if x % 139 == 0 => true\n         \
    \   case x if x % 143 == 0 => true\n            case x if x % 147 == 0 => true\n\
    \            case x if x % 151 == 0 => true\n            case x if x % 157 ==\
    \ 0 => true\n            case x if x % 159 == 0 => true\n            case x if\
    \ x % 163 == 0 => true\n            case x if x % 167 == 0 => true\n         \
    \   case x if x ", "        val primes = mutable.Set[Long]()\n        primes +=\
    \ 2l\n        primes += 3l\n        primes += 5l\n        primes += 7l\n     \
    \   primes += 11l\n        primes += 13l\n        primes += 17l\n        primes\
    \ += 19l\n        primes += 23l\n        primes += 29l\n        primes += 31l\n\
    \        primes += 37l\n        primes += 41l\n        primes += 43l\n       \
    \ primes += 47l\n        primes += 53l\n        primes += 59l\n        primes\
    \ += 61l\n        primes += 67l\n        primes += 71l\n        primes += 73l\n\
    \        primes += 79l\n        primes += 83l\n        primes += 89l\n       \
    \ primes += 97l\n        primes += 101l\n        primes += 103l\n        primes\
    \ += 107l\n        primes += 109l\n        primes += 113l\n        primes += 127l\n\
    \        primes += 131l\n        primes += 137l\n        primes += 139l\n    \
    \    primes += 147l\n        primes += 151l\n        primes += 157l\n        primes\
    \ += 163l\n        primes += 167l\n        primes += 173l\n        primes += 179l\n\
    \        primes += 181l\n        primes += 191l\n        primes += 193l\n    \
    \    primes += 197l\n        primes += 199l\n        primes += 211l\n        primes\
    \ += 223l\n        primes += 227l\n        primes += 229l\n        primes += 233l\n\
    \        primes += 239l\n        primes += 241l\n        primes += 247l\n    \
    \    primes += 251l\n        primes += 257l\n        primes += 263l\n        primes\
    \ += 269l\n        primes += 271l\n        primes += 277l\n        primes += 281l\n\
    \        primes += 283l\n        primes += 293l\n        primes += 307l\n    \
    \    primes += 311l\n        primes += 313l\n        primes += 317l\n        primes\
    \ += 321l\n        primes += 327l\n        primes += 331l\n        primes += 337l\n\
    \        primes += 347l\n        primes += 349l\n        primes += 353l\n    \
    \    primes += 359l\n        primes += 363l\n        primes += 369l\n        primes\
    \ += 373l\n        primes += 379l\n        primes += 383l", "        val isPrime\
    \ = n % 2 == 0\n        if (isPrime) {\n            x\n        } else {\n    \
    \        y\n        }", "        val isPrime = n match {\n            case x if\
    \ x < 2 => false\n            case x if x == 2 => true\n            case x if\
    \ x % 2 == 0 => false\n            case x if x % 3 == 0 => false\n           \
    \ case x if x % 5 == 0 => false\n            case x if x % 7 == 0 => false\n \
    \           case x if x % 11 == 0 => false\n            case x if x % 13 == 0\
    \ => false\n            case x if x % 17 == 0 => false\n            case x if\
    \ x % 19 == 0 => false\n            case x if x % 23 == 0 => false\n         \
    \   case x if x % 29 == 0 => false\n            case x if x % 31 == 0 => false\n\
    \            case x if x % 37 == 0 => false\n            case x if x % 41 == 0\
    \ => false\n            case x if x % 43 == 0 => false\n            case x if\
    \ x % 47 == 0 => false\n            case x if x % 53 == 0 => false\n         \
    \   case x if x % 59 == 0 => false\n            case x if x % 61 == 0 => false\n\
    \            case x if x % 67 == 0 => false\n            case x if x % 71 == 0\
    \ => false\n            case x if x % 73 == 0 => false\n            case x if\
    \ x % 79 == 0 => false\n            case x if x % 83 == 0 => false\n         \
    \   case x if x % 89 == 0 => false\n            case x if x % 97 == 0 => false\n\
    \            case x if x % 103 == 0 => false\n            case x if x % 107 ==\
    \ 0 => false\n            case x if x % 111 == 0 => false\n            case x\
    \ if x % 117 == 0 => false\n            case x if x % 121 == 0 => false\n    \
    \        case x if x % 127 == 0 => false\n            case x if x % 131 == 0 =>\
    \ false\n            case x if x % 137 == 0 => false\n            case x if x\
    \ % 141 == 0 => false\n            case x if x % 147 == 0 => false\n         \
    \   case x if x % 151 == 0 => false\n            case x if x % 157 == 0 => false\n\
    \            case x if x % 161 == 0 => false\n            case x if x % 167 ==\
    \ 0 => false\n            case x if x % 173 == 0 => false\n            case x\
    \ if x % 179 == 0 => false\n            case x if x % 183 == 0 => false\n    \
    \        case x if x % 187 == 0 => false\n            case x if x % 191 == 0 =>\
    \ false\n            case x if x ", "        val isPrime = n % 2 == 0\n      \
    \  if (isPrime) {\n            val isOdd = n % 2 == 1\n            if (isOdd)\
    \ {\n                return y\n            } else {\n                return x\n\
    \            }\n        } else {\n            return x\n        }", "        val\
    \ primes = List(n, x, y)\n        val primesSet = primes.toSet\n        val primesSetSize\
    \ = primesSet.size\n        val isPrime = primes.forall(x => primesSet.contains(x)\
    \ && x != 1 && x != n && x != x && x != n && x != x && x != n && x != x && x !=\
    \ n && x != x && x != n && x != x && x != n && x != x && x != n && x != x && x\
    \ != n && x != x && x != n && x != x && x != n && x != x && x != n && x != x &&\
    \ x != n && x != x && x != n && x != x && x != n && x != x && x != n && x != x\
    \ && x != n && x != x && x != n && x != x && x != n && x != x && x != n && x !=\
    \ x && x != n && x != x && x != n && x != x && x != n && x != x && x != n && x\
    \ != x && x != n && x != x && x != n && x != x && x != n && x != x && x != n &&\
    \ x != x && x != n && x != x && x != n && x != x && x != n && x != x && x != n\
    \ && x != x && x != n && x != x && x != n && x != x && x != n && x != x && x !=\
    \ n && x != x && x != n && x != x && x != n && x != x && x != n && x != x && x\
    \ != n && x != x && x != n && x != x && x != n && x != x && x != n && x != x &&\
    \ x != n && x != x && x != n && x != x && x != n && x != x && x != n && x != x\
    \ && x != n && x != x && x != n && x != x && x != n && x != x && x != n && x !=\
    \ x && x != n && x != x && x != n && x != x && x != n && x != x && x != n && x\
    \ != x && x != n && x != x && x != n && x != x && x != n && x != x && x != n &&\
    \ x ", "        val primes = List(n, x, y)\n        val primesSet = primes.toSet\n\
    \        val isPrime = primes.forall(p => primesSet.contains(p) && p > 1)\n  \
    \      if (isPrime) x else y", "        val isPrime = n match {\n            case\
    \ _ if n < 2l => false\n            case _ if n == 2l => true\n            case\
    \ _ if n % 2l == 0l => false\n            case _ if n % 3l == 0l => false\n  \
    \          case _ if n % 5l == 0l => false\n            case _ if n % 7l == 0l\
    \ => false\n            case _ => true\n        }\n        if (isPrime) {\n  \
    \          x\n        } else {\n            y\n        }", "        val primes\
    \ = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n      \
    \  for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n                primes\
    \ += i\n                isPrime += true\n            }\n        }\n        if\
    \ (primes.size == 1 && isPrime.size == 1) {\n            if (primes.contains(x))\
    \ {\n                return x\n            } else {\n                return y\n\
    \            }\n        } else {\n            return n\n        }", "        val\
    \ isPrime = n match {\n            case x if x < 2 => false\n            case\
    \ x if x == 2 => true\n            case x if x == 3 => true\n            case\
    \ x if x == 5 => true\n            case x if x == 7 => true\n            case\
    \ x if x == 11 => true\n            case x if x == 13 => true\n            case\
    \ x if x == 17 => true\n            case x if x == 19 => true\n            case\
    \ x if x == 23 => true\n            case x if x == 29 => true\n            case\
    \ x if x == 37 => true\n            case x if x == 47 => true\n            case\
    \ x if x == 59 => true\n            case x if x == 67 => true\n            case\
    \ x if x == 79 => true\n            case x if x == 89 => true\n            case\
    \ x if x == 97 => true\n            case x if x == 103 => true\n            case\
    \ x if x == 109 => true\n            case x if x == 113 => true\n            case\
    \ x if x == 121 => true\n            case x if x == 127 => true\n            case\
    \ x if x == 131 => true\n            case x if x == 137 => true\n            case\
    \ x if x == 139 => true\n            case x if x == 143 => true\n            case\
    \ x if x == 149 => true\n            case x if x == 151 => true\n            case\
    \ x if x == 157 => true\n            case x if x == 163 => true\n            case\
    \ x if x == 169 => true\n            case x if x == 173 => true\n            case\
    \ x if x == 179 => true\n            case x if x == 181 => true\n            case\
    \ x if x == 191 => true\n            case x if x == 193 => true\n            case\
    \ x if x == 197 => true\n            case x if x == 199 => true\n            case\
    \ x if x == 203 => true\n            case x if x == 209 => true\n            case\
    \ x if x == 211 => true\n            case x if x == 217 => true\n            case\
    \ x if x == 223 => true\n            case x if x == 229 => true\n            case\
    \ x if x == 233 => true\n            case x if x == 239 => true\n            case\
    \ x if x == 241 => true\n            case x if x == 243 => true\n            case\
    \ x if x == 247 => true\n            case x if x == 251 => true\n            case\
    \ x if x == 257 => true\n            case x if x == 263 => true\n            case\
    \ x if x == 269 => true\n            case x if x == 271 => true\n            case\
    \ x if x == 277 => true\n            case x if x == 281 => true\n            case ",
  "        val primes = List(n, x, y)\n        val primesSet = primes.toSet\n    \
    \    val primesSetSize = primesSet.size\n        val isPrime = primesSet.contains(n)\
    \ && primesSet.contains(x) && primesSet.contains(y)\n        if (isPrime) {\n\
    \            return n\n        } else {\n            return y\n        }", " \
    \       if (n % 2 == 0) x\n        else y", "        val primes = List((2l), 3l,\
    \ 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l,\
    \ 67l, 71l, 73l, 79l, 83l, 89l, 97l, 101l, 103l, 107l, 109l, 113l, 127l, 131l,\
    \ 137l, 139l, 149l, 151l, 157l, 163l, 167l, 173l, 179l, 181l, 191l, 193l, 197l,\
    \ 199l, 211l, 223l, 227l, 229l, 233l, 239l, 241l, 251l, 257l, 263l, 269l, 271l,\
    \ 277l, 281l, 283l, 293l, 307l, 311l, 313l, 317l, 331l, 337l, 347l, 349l, 353l,\
    \ 359l, 367l, 373l, 379l, 383l, 389l, 397l, 401l, 409l, 419l, 421l, 431l, 433l,\
    \ 439l, 443l, 449l, 457l, 461l, 463l, 467l, 479l, 487l, 491l, 499l, 503l, 509l,\
    \ 521l, 523l, 529l, 531l, 537l, 541l, 547l, 557l, 561l, 563l, 569l, 573l, 587l,\
    \ 593l, 599l, 601l, 607l, 613l, 617l, 619l, 631l, 641l, 643l, 647l, 653l, 659l,\
    \ 661l, 673l, 677l, 683l, 691l, 701l, 709l, 719l, 727l, 733l, 739l, 743l, 751l,\
    \ 757l, 761l, 769l, 773l, 787l, 797l, 803l, 809l, 811l, 821l, 823l, 827l, 829l,\
    \ 839l, 853l, 857l, 859l, 863l, 877l, 881l, 883l, 887l, 907l, 911l, 919l, 929l,\
    \ 937l, 941l, 947l, 953l, 967l, 971l, 977l, 983l, 991l, 997l)\n        val isPrime\
    \ = primes.contains(n)\n        if (isPrime) {\n            x\n        } else\
    \ {\n            y\n        }", "        if (n % 2 == 0) {\n            x\n  \
    \      } else {\n            y\n        }", "        val isPrime = n % 2 == 0\n\
    \        if (isPrime) {\n            x\n        } else {\n            y\n    \
    \    }", "        val primes = mutable.Set[Long]()\n        val primesCount =\
    \ mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n        val\
    \ isPrimeCount = mutable.Set[Boolean]()\n        val isPrimePrime = mutable.Set[Boolean]()\n\
    \        val isPrimePrimeCount = mutable.Set[Boolean]()\n        val isPrimePrimePrime\
    \ = mutable.Set[Boolean]()\n        val isPrimePrimePrimeCount = mutable.Set[Boolean]()\n\
    \        val isPrimePrimePrimePrime = mutable.Set[Boolean]()\n        val isPrimePrimePrimePrimeCount\
    \ = mutable.Set[Boolean]()\n        val isPrimePrimePrimePrimePrime = mutable.Set[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimeCount = mutable.Set[Boolean]()\n     \
    \   val isPrimePrimePrimePrimePrimePrime = mutable.Set[Boolean]()\n        val\
    \ isPrimePrimePrimePrimePrimePrimeCount = mutable.Set[Boolean]()\n        val\
    \ isPrimePrimePrimePrimePrimePrimePrime = mutable.Set[Boolean]()\n        val\
    \ isPrimePrimePrimePrimePrimePrimePrimeCount = mutable.Set[Boolean]()\n      \
    \  val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.Set[Boolean]()\n \
    \       val isPrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.Set[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.Set[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.Set[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.Set[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.Set[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mut",
  "        val isPrime = n % 2 == 0\n        if (isPrime) {\n            return x\n\
    \        } else {\n            return y\n        }", "        if (n % 2 == 0)\
    \ {\n            x\n        } else {\n            y\n        }", "        if (n\
    \ % 2 == 0) x\n        else y", "        if (n % 2 == 0) return x\n        else\
    \ return y", "        val isPrime = n % 2 == 0\n        if (isPrime) {\n     \
    \       x\n        } else {\n            y\n        }", "        val primes =\
    \ mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val n = n % primes.last\n \
    \       if (primes.contains(n)) {\n            primes.last\n        } else {\n\
    \            y\n        }", "        if (n % 2 == 0) x\n        else y", "   \
    \     val isPrime = n % 2 == 0\n        if (isPrime) {\n            x\n      \
    \  } else {\n            y\n        }", "        if (n % 2 == 0) {\n         \
    \   x\n        } else {\n            y\n        }", "        val primes = mutable.Set[Long]()\n\
    \        val composites = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isComposite = mutable.Set[Long]()\n        val isPrimePrime = mutable.Set[Long]()\n\
    \        val isPrimeComposite = mutable.Set[Long]()\n        val isCompositeComposite\
    \ = mutable.Set[Long]()\n        val isPrimePrimePrime = mutable.Set[Long]()\n\
    \        val isPrimeCompositeComposite = mutable.Set[Long]()\n        val isCompositePrimePrime\
    \ = mutable.Set[Long]()\n        val isCompositeCompositePrime = mutable.Set[Long]()\n\
    \        val isPrimePrimePrimePrime = mutable.Set[Long]()\n        val isPrimeCompositeCompositePrime\
    \ = mutable.Set[Long]()\n        val isCompositePrimePrimePrime = mutable.Set[Long]()\n\
    \        val isCompositeCompositePrimePrime = mutable.Set[Long]()\n        val\
    \ isPrimePrimeCompositePrime = mutable.Set[Long]()\n        val isPrimeCompositeCompositePrime\
    \ = mutable.Set[Long]()\n        val isCompositePrimePrimeComposite = mutable.Set[Long]()\n\
    \        val isCompositeCompositePrimeComposite = mutable.Set[Long]()\n      \
    \  val isPrimePrimePrimePrimeComposite = mutable.Set[Long]()\n        val isPrimeCompositeCompositePrimeComposite\
    \ = mutable.Set[Long]()\n        val isCompositePrimePrimePrimeComposite = mutable.Set[Long]()\n\
    \        val isCompositeCompositePrimePrimeComposite = mutable.Set[Long]()\n \
    \       val isPrimePrimeCompositeCompositeComposite = mutable.Set[Long]()\n  \
    \      val isPrimeCompositeCompositeCompositeComposite = mutable.Set[Long]()\n\
    \        val isPrimePrimePrimePrimePrimeComposite = mutable.Set[Long]()\n    \
    \    val isPrimeCompositeCompositePrimePrimeComposite = mutable.Set[Long]()\n\
    \        val isPrimeCompositeCompositePrimePrimeComposite = mutable.Set[Long]()\n\
    \        val isPrimePrimePrimePrimePrimePrimeComposite = mutable.Set[", "    \
    \    val primes = primeFactors(n)\n        val xIsPrime = primes.contains(x)\n\
    \        val yIsPrime = primes.contains(y)\n        if (xIsPrime && yIsPrime)\
    \ n else y", "        if (n % 2 == 0) x\n        else y", "        val isPrime\
    \ = n.toInt == 2\n        if (isPrime) {\n            x\n        } else {\n  \
    \          y\n        }", "        if (n % 2 == 0) x\n        else y", "     \
    \   val isPrime = n % 2 == 0\n        if (isPrime) {\n            x\n        }\
    \ else {\n            y\n        }", "        val primes = mutable.Set[Long]()\n\
    \        primes.add(2)\n        primes.add(3)\n        primes.add(5)\n       \
    \ primes.add(7)\n        primes.add(11)\n        primes.add(13)\n        primes.add(17)\n\
    \        primes.add(19)\n        primes.add(23)\n        primes.add(29)\n    \
    \    primes.add(31)\n        primes.add(37)\n        primes.add(41)\n        primes.add(43)\n\
    \        primes.add(47)\n        primes.add(53)\n        primes.add(59)\n    \
    \    primes.add(61)\n        primes.add(67)\n        primes.add(71)\n        primes.add(73)\n\
    \        primes.add(79)\n        primes.add(83)\n        primes.add(89)\n    \
    \    primes.add(97)\n        primes.add(101)\n        primes.add(103)\n      \
    \  primes.add(107)\n        primes.add(109)\n        primes.add(111)\n       \
    \ primes.add(127)\n        primes.add(131)\n        primes.add(137)\n        primes.add(139)\n\
    \        primes.add(149)\n        primes.add(151)\n        primes.add(157)\n \
    \       primes.add(163)\n        primes.add(167)\n        primes.add(173)\n  \
    \      primes.add(179)\n        primes.add(181)\n        primes.add(191)\n   \
    \     primes.add(193)\n        primes.add(197)\n        primes.add(199)\n    \
    \    primes.add(211)\n        primes.add(223)\n        primes.add(227)\n     \
    \   primes.add(229)\n        primes.add(233)\n        primes.add(239)\n      \
    \  primes.add(241)\n        primes.add(251)\n        primes.add(257)\n       \
    \ primes.add(263)\n        primes.add(269)\n        primes.add(271)\n        primes.add(277)\n\
    \        primes.add(281)\n        primes.add(283)\n        primes.add(293)\n \
    \       primes.add(307)\n        primes.add(311)\n        primes.add(313)\n  \
    \      primes.add(317)\n        primes.add(331)\n        primes.add(337)\n   \
    \     primes.add(347)\n        primes.add(349)\n        primes.add(353)\n    \
    \    primes.add(359)\n        primes.add(367)\n        primes.add(373)\n     \
    \   primes.add(379)\n        primes.add(383)\n        primes.add(389)\n      \
    \  primes.add(397)\n        primes.add(401)\n        primes.add(409)\n       \
    \ primes.add(419)\n        primes.add(421)\n        primes.add(433)\n        primes.add(439)\n\
    \        primes.add(", "        val isPrime = n % 2 == 0\n        if (isPrime)\
    \ {\n            x\n        } else {\n            y\n        }", "        if (n\
    \ == 1l) x\n        else y", "        val isPrime = n % 2 == 0\n        if(isPrime)\
    \ {\n            if(n == 2) return x\n            else return y\n        }\n \
    \       else return x", "        val primes = mutable.ListBuffer[Long]()\n   \
    \     val composites = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isComposite = mutable.ListBuffer[Boolean]()\n        val isPrimeIter\
    \ = mutable.ListBuffer[Boolean]()\n        val isCompositeIter = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter2 = mutable.ListBuffer[Boolean]()\n        val isCompositeIter2\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter3 = mutable.ListBuffer[Boolean]()\n\
    \        val isCompositeIter3 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter4\
    \ = mutable.ListBuffer[Boolean]()\n        val isCompositeIter4 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter5 = mutable.ListBuffer[Boolean]()\n        val isCompositeIter5\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter6 = mutable.ListBuffer[Boolean]()\n\
    \        val isCompositeIter6 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter7\
    \ = mutable.ListBuffer[Boolean]()\n        val isCompositeIter7 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter8 = mutable.ListBuffer[Boolean]()\n        val isCompositeIter8\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter9 = mutable.ListBuffer[Boolean]()\n\
    \        val isCompositeIter9 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter10\
    \ = mutable.ListBuffer[Boolean]()\n        val isCompositeIter10 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter11 = mutable.ListBuffer[Boolean]()\n        val isCompositeIter11\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter12 = mutable.ListBuffer[Boolean]()\n\
    \        val isCompositeIter12 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter13\
    \ = mutable.ListBuffer[Boolean]()\n        val isCompositeIter13 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter14 = mutable.ListBuffer[Boolean]()\n        val isCompositeIter14\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter15 = mutable.ListBuffer[Boolean]()\n\
    \        val ", "        val isPrime = n match {\n            case x if x < 2\
    \ => false\n            case x if x == 2 => true\n            case x if x == 3\
    \ => true\n            case x if x == 5 => true\n            case x if x == 7\
    \ => true\n            case x if x == 11 => true\n            case x if x == 13\
    \ => true\n            case x if x == 17 => true\n            case x if x == 19\
    \ => true\n            case x if x == 23 => true\n            case x if x == 29\
    \ => true\n            case x if x == 37 => true\n            case x if x == 47\
    \ => true\n            case x if x == 59 => true\n            case x if x == 67\
    \ => true\n            case x if x == 79 => true\n            case x if x == 89\
    \ => true\n            case x if x == 97 => true\n            case x if x == 99\
    \ => true\n            case x if x == 103 => true\n            case x if x ==\
    \ 107 => true\n            case x if x == 109 => true\n            case x if x\
    \ == 113 => true\n            case x if x == 127 => true\n            case x if\
    \ x == 131 => true\n            case x if x == 137 => true\n            case x\
    \ if x == 139 => true\n            case x if x == 143 => true\n            case\
    \ x if x == 147 => true\n            case x if x == 151 => true\n            case\
    \ x if x == 157 => true\n            case x if x == 163 => true\n            case\
    \ x if x == 167 => true\n            case x if x == 173 => true\n            case\
    \ x if x == 179 => true\n            case x if x == 181 => true\n            case\
    \ x if x == 191 => true\n            case x if x == 193 => true\n            case\
    \ x if x == 197 => true\n            case x if x == 199 => true\n            case\
    \ x if x == 203 => true\n            case x if x == 207 => true\n            case\
    \ x if x == 209 => true\n            case x if x == 213 => true\n            case\
    \ x if x == 217 => true\n            case x if x == 223 => true\n            case\
    \ x if x == 227 => true\n            case x if x == 229 => true\n            case\
    \ x if x == 233 => true\n            case x if x == 239 => true\n            case\
    \ x if x == 243 => true\n            case x if x == 247 => true\n            case\
    \ x if x == 251 => true\n            case x if x == 257 => true\n            case\
    \ x if x == 259 => true\n            case x if x == 263 => true\n            case\
    \ x if x == 269 => true\n            case ", "        val isPrime = n % 2 == 0\n\
    \        if (isPrime) {\n            x\n        } else {\n            y\n    \
    \    }", "        if (n % 2 == 0) x\n        else y", "        if (n % 2 == 0)\
    \ x\n        else y", "        val primes = primeFactors(n)\n        val x = primes.find(_\
    \ == x).map(_ * n).toList\n        val y = primes.find(_ != x).map(_ * n).toList\n\
    \        val sum = x.sum + y.sum\n        if (sum == n) x\n        else y", " \
    \       val isPrime = n % 2 == 0\n        if (isPrime) {\n            x\n    \
    \    } else {\n            y\n        }", "        val isPrime = n % 2 == 0\n\
    \        if (isPrime) {\n            x\n        } else {\n            y\n    \
    \    }", "        val primes = mutable.Set[Long]()\n        primes += 2l\n   \
    \     primes += 3l\n        primes += 5l\n        primes += 7l\n        primes\
    \ += 11l\n        primes += 13l\n        primes += 17l\n        primes += 19l\n\
    \        primes += 23l\n        primes += 29l\n        primes += 31l\n       \
    \ primes += 37l\n        primes += 41l\n        primes += 43l\n        primes\
    \ += 47l\n        primes += 53l\n        primes += 59l\n        primes += 61l\n\
    \        primes += 67l\n        primes += 71l\n        primes += 73l\n       \
    \ primes += 79l\n        primes += 83l\n        primes += 89l\n        primes\
    \ += 97l\n        primes += 101l\n        primes += 103l\n        primes += 107l\n\
    \        primes += 109l\n        primes += 113l\n        primes += 127l\n    \
    \    primes += 131l\n        primes += 137l\n        primes += 139l\n        primes\
    \ += 147l\n        primes += 151l\n        primes += 157l\n        primes += 163l\n\
    \        primes += 167l\n        primes += 173l\n        primes += 179l\n    \
    \    primes += 181l\n        primes += 191l\n        primes += 193l\n        primes\
    \ += 197l\n        primes += 199l\n        primes += 211l\n        primes += 223l\n\
    \        primes += 227l\n        primes += 229l\n        primes += 233l\n    \
    \    primes += 239l\n        primes += 241l\n        primes += 243l\n        primes\
    \ += 247l\n        primes += 249l\n        primes += 251l\n        primes += 253l\n\
    \        primes += 257l\n        primes += 263l\n        primes += 269l\n    \
    \    primes += 271l\n        primes += 277l\n        primes += 281l\n        primes\
    \ += 283l\n        primes += 293l\n        primes += 307l\n        primes += 311l\n\
    \        primes += 313l\n        primes += 317l\n        primes += 321l\n    \
    \    primes += 323l\n        primes += 327l\n        primes += 331l\n        primes\
    \ += 333l\n        primes += 337l\n        primes += 341l\n        primes += 343l\n\
    \        primes += 347l\n        primes += ", "        if (n % 2 == 0) x\n   \
    \     else y", "        val isPrime = n % 2 == 0\n        val isOdd = n % 2 ==\
    \ 1\n        val isEven = n % 2 == 0\n        val isPrimeEven = n % 2 == 0\n \
    \       val isPrimeOdd = n % 2 == 1\n        val isPrimeEvenOdd = n % 2 == 0\n\
    \        val isPrimeOddEven = n % 2 == 1\n        val isPrimeEvenOddEven = n %\
    \ 2 == 0\n        val isPrimeEvenOddOdd = n % 2 == 1\n        val isPrimeOddEvenOddEven\
    \ = n % 2 == 0\n        val isPrimeEvenOddOddOdd = n % 2 == 1\n        val isPrimeOddEvenOddEvenOdd\
    \ = n % 2 == 0\n        val isPrimeEvenOddOddEvenOddEven = n % 2 == 1\n      \
    \  val isPrimeOddEvenOddEvenOddOdd = n % 2 == 0\n        val isPrimeEvenOddOddEvenOddEvenOdd\
    \ = n % 2 == 1\n        val isPrimeOddEvenOddEvenOddOddEven = n % 2 == 0\n   \
    \     val isPrimeEvenOddOddEvenOddEvenOddEven = n % 2 == 1\n        val isPrimeOddEvenOddEvenOddOddEvenOdd\
    \ = n % 2 == 0\n        val isPrimeEvenOddOddEvenOddEvenOddEvenOdd = n % 2 ==\
    \ 1\n        val isPrimeOddEvenOddEvenOddOddEvenOddEven = n % 2 == 0\n       \
    \ val isPrimeEvenOddOddEvenOddEvenOddEvenOddEven = n % 2 == 1\n        val isPrimeOddEvenOddEvenOddOddEvenOddEvenOdd\
    \ = n % 2 == 0\n        val isPrimeEvenOddOddEvenOddEvenOddEvenOddEven = n % 2\
    \ == 1\n        val isPrimeOddEvenOddEvenOddOddEvenOddEvenOddEven = n % 2 == 0\n\
    \        val isPrimeEvenOddOddEvenOddEvenOddEvenOddEvenOdd = n % 2 == 1\n    \
    \    val isPrimeOddEvenOddEvenOddOddEvenOddEvenOddEvenOdd = n % 2 == 0\n     \
    \   val isPrimeEvenOddOddEvenOddEvenOddEvenOddEvenO", "        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l, 37l, 41l, 43l, 47l, 53l, 59l,\
    \ 61l, 67l, 71l, 73l, 79l, 83l, 89l, 97l)\n        val x = n % primes.last\n \
    \       val y = primes.find(_ == x).map(_ * n).last\n        x match {\n     \
    \       case 0 => y\n            case _ => x\n        }", "        val isPrime\
    \ = n % 2 == 0\n        if (isPrime) {\n            x\n        } else {\n    \
    \        y\n        }", "        if (n % 2 == 0) x\n        else y", "       \
    \ if (n == 1l) x\n        else if (n % 2 == 0l) xOrY(n / 2l, x, y)\n        else\
    \ y", "        val primes = mutable.ListBuffer[Long]()\n        val divisors =\
    \ mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount = mutable.ListBuffer[Long]()\n        val primeFactorsCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount2 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount3 = mutable.ListBuffer[Long]()\n        val primeFactorsCount4\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount5 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount6 = mutable.ListBuffer[Long]()\n        val primeFactorsCount7\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount8 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount9 = mutable.ListBuffer[Long]()\n        val primeFactorsCount10\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount11 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount12 = mutable.ListBuffer[Long]()\n        val primeFactorsCount13\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount14 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount15 = mutable.ListBuffer[Long]()\n        val primeFactorsCount16\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount17 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount18 = mutable.ListBuffer[Long]()\n        val primeFactorsCount19\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount20 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount21 = mutable.ListBuffer[Long]()\n        val primeFactorsCount22\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount23 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount24 = mutable.ListBuffer[Long]()\n        val primeFactorsCount25\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount26 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount27 = mutable.ListBuffer[Long]()\n        val primeFactorsCount28\
    \ = mutable.ListBuffer", "        if (n % 2 == 0) x\n        else y", "      \
    \  val isPrime = n match {\n            case 2l | 3l | 5l | 7l | 11l => true\n\
    \            case _ => false\n        }\n        if (isPrime) {\n            return\
    \ x\n        } else {\n            return y\n        }", "        val primes =\
    \ mutable.Set[Long]()\n        val composites = mutable.Set[Long]()\n        val\
    \ factors = mutable.Set[Long]()\n        val primeFactors = mutable.Set[Long]()\n\
    \        val compositeFactors = mutable.Set[Long]()\n        val factorsOfPrimes\
    \ = mutable.Set[Long]()\n        val factorsOfComposites = mutable.Set[Long]()\n\
    \        val factorsOfPrimeFactors = mutable.Set[Long]()\n        val factorsOfCompositeFactors\
    \ = mutable.Set[Long]()\n        val primeFactorsOfPrimes = mutable.Set[Long]()\n\
    \        val primeFactorsOfComposites = mutable.Set[Long]()\n        val primeFactorsOfPrimeFactors\
    \ = mutable.Set[Long]()\n        val primeFactorsOfCompositeFactors = mutable.Set[Long]()\n\
    \        val compositeFactorsOfPrimes = mutable.Set[Long]()\n        val compositeFactorsOfComposites\
    \ = mutable.Set[Long]()\n        val compositeFactorsOfPrimeFactors = mutable.Set[Long]()\n\
    \        val compositeFactorsOfCompositeFactors = mutable.Set[Long]()\n      \
    \  val primeFactorsOfPrimesOfPrimes = mutable.Set[Long]()\n        val primeFactorsOfPrimesOfComposites\
    \ = mutable.Set[Long]()\n        val primeFactorsOfPrimesOfPrimeFactors = mutable.Set[Long]()\n\
    \        val primeFactorsOfPrimesOfCompositeFactors = mutable.Set[Long]()\n  \
    \      val primeFactorsOfCompositesOfPrimes = mutable.Set[Long]()\n        val\
    \ primeFactorsOfCompositesOfComposites = mutable.Set[Long]()\n        val primeFactorsOfCompositesOfPrimeFactors\
    \ = mutable.Set[Long]()\n        val primeFactorsOfCompositesOfCompositeFactors\
    \ = mutable.Set[Long]()\n        val compositeFactorsOfPrimesOfPrimes = mutable.Set[Long]()\n\
    \        val compositeFactorsOfPrimesOfComposites = mutable.Set[Long]()\n    \
    \    val compositeFactorsOfPrimesOfPrimeFactors = mutable.Set[Long]()\n      \
    \  val compositeFactorsOfPrimesOfCompositeFactors = mutable.Set[Long]()\n    \
    \    val compositeFactorsOfCompositesOfPri", "        val isPrime = n % 2 == 0\n\
    \        if (isPrime) {\n            x\n        } else {\n            y\n    \
    \    }", "        val isPrime = n % 2 == 0\n        val isOdd = n % 2 == 1\n \
    \       val isEven = n % 2 == 0\n        val isPrimeEven = n % 2 == 0\n      \
    \  val isPrimeOdd = n % 2 == 1\n        val isPrimeEvenOdd = n % 2 == 1\n    \
    \    val isPrimeOddEven = n % 2 == 1\n        val isPrimeEvenOddEven = n % 2 ==\
    \ 1\n        val isPrimeEvenOddOdd = n % 2 == 1\n        val isPrimeOddEvenOdd\
    \ = n % 2 == 1\n        val isPrimeEvenOddEvenOdd = n % 2 == 1\n        val isPrimeEvenOddOddEven\
    \ = n % 2 == 1\n        val isPrimeOddEvenOddOdd = n % 2 == 1\n        val isPrimeEvenOddEvenOddOdd\
    \ = n % 2 == 1\n        val isPrimeEvenOddOddEvenOdd = n % 2 == 1\n        val\
    \ isPrimeOddEvenOddOddEven = n % 2 == 1\n        val isPrimeEvenOddEvenOddOddEven\
    \ = n % 2 == 1\n        val isPrimeEvenOddOddEvenOddEven = n % 2 == 1\n      \
    \  val isPrimeEvenOddOddEvenOddOddEven = n % 2 == 1\n        val isPrimeEvenOddOddEvenOddOddOddEven\
    \ = n % 2 == 1\n        val isPrimeEvenOddOddEvenOddOddOddEvenOdd = n % 2 == 1\n\
    \        val isPrimeEvenOddOddEvenOddOddOddEvenOddEven = n % 2 == 1\n        val\
    \ isPrimeEvenOddOddEvenOddOddOddEvenOddEvenOdd = n % 2 == 1\n        val isPrimeEvenOddOddEvenOddOddOddEvenOddEvenOddEven\
    \ = n % 2 == 1\n        val isPrimeEvenOddOddEvenOddOddOddEvenOddEvenOddEvenOdd\
    \ = n % 2 == 1\n        val isPrimeEvenOddOddEvenOddOddOddEvenOddEvenOddEvenOddEven\
    \ = n % 2 == 1\n        val isPrimeEvenOddOddEvenOddOddOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n % 2 == 1\n", "        if (n % 2 == 0) x\n        else y", "        if (n\
    \ % 2 == 0) x\n        else y", "        if (n % 2 == 0) x\n        else y", " \
    \       val isPrime = n % 2 == 0\n        if (isPrime) {\n            x\n    \
    \    } else {\n            y\n        }", "        if (n % 2 == 0) {\n       \
    \     return x\n        } else {\n            return y\n        }", "        val\
    \ isPrime = n % 2 == 0\n        if (isPrime) {\n            x\n        } else\
    \ {\n            y\n        }", "        if (n % 2 == 0) x\n        else y", " \
    \       val primes = mutable.Set[Long]()\n        primes.add(2)\n        primes.add(3)\n\
    \        primes.add(5)\n        primes.add(7)\n        primes.add(11)\n      \
    \  primes.add(13)\n        primes.add(17)\n        primes.add(19)\n        primes.add(23)\n\
    \        primes.add(29)\n        primes.add(31)\n        primes.add(37)\n    \
    \    primes.add(41)\n        primes.add(43)\n        primes.add(47)\n        primes.add(53)\n\
    \        primes.add(59)\n        primes.add(61)\n        primes.add(67)\n    \
    \    primes.add(71)\n        primes.add(73)\n        primes.add(79)\n        primes.add(83)\n\
    \        primes.add(89)\n        primes.add(97)\n        primes.add(101)\n   \
    \     primes.add(103)\n        primes.add(107)\n        primes.add(109)\n    \
    \    primes.add(111)\n        primes.add(127)\n        primes.add(131)\n     \
    \   primes.add(137)\n        primes.add(139)\n        primes.add(149)\n      \
    \  primes.add(151)\n        primes.add(157)\n        primes.add(163)\n       \
    \ primes.add(167)\n        primes.add(173)\n        primes.add(179)\n        primes.add(181)\n\
    \        primes.add(191)\n        primes.add(193)\n        primes.add(197)\n \
    \       primes.add(199)\n        primes.add(211)\n        primes.add(223)\n  \
    \      primes.add(227)\n        primes.add(229)\n        primes.add(233)\n   \
    \     primes.add(239)\n        primes.add(241)\n        primes.add(251)\n    \
    \    primes.add(257)\n        primes.add(263)\n        primes.add(269)\n     \
    \   primes.add(271)\n        primes.add(277)\n        primes.add(281)\n      \
    \  primes.add(283)\n        primes.add(293)\n        primes.add(307)\n       \
    \ primes.add(311)\n        primes.add(313)\n        primes.add(317)\n        primes.add(331)\n\
    \        primes.add(337)\n        primes.add(347)\n        primes.add(349)\n \
    \       primes.add(353)\n        primes.add(359)\n        primes.add(367)\n  \
    \      primes.add(373)\n        primes.add(379)\n        primes.add(383)\n   \
    \     primes.add(389)\n        primes.add(397)\n        primes.add(409)\n    \
    \    primes.add(419)\n        primes.add(421)\n        primes.add(433)\n     \
    \   primes.add(439)\n        primes.add(443)\n        primes.add(", "        val\
    \ isPrime = n % 2 == 0\n        if (isPrime) {\n            return x\n       \
    \ } else {\n            return y\n        }", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val composites = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isComposite = mutable.ListBuffer[Boolean]()\n        val isPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isComposite = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isComposite\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isComposite = mutable.ListBuffer[Boolean]()\n        val isPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isComposite = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isComposite\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isComposite = mutable.ListBuffer[Boolean]()\n        val isPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isComposite = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isComposite\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isComposite = mutable.ListBuffer[Boolean]()\n        val isPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isComposite = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isComposite\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isComposite = mutable.ListBuffer[Boolean]()\n        val isPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isComposite = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isComposite\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isComposite = mutable.ListBuffer[Boolean]()\n        val isPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isComposite = mutable.", "    \
    \    val isPrime = n % 2 == 0\n        val isOdd = n % 2 == 1\n        val isPrimeOdd\
    \ = isPrime && isOdd\n        val isPrimeEven = isPrime && !isOdd\n        val\
    \ isPrimeEvenOdd = isPrimeEven && isOdd\n        val isPrimeEvenOddEven = isPrimeEvenOdd\
    \ && isOdd\n        val isPrimeEvenOddEvenOdd = isPrimeEvenOddEven && isOdd\n\
    \        val isPrimeEvenOddEvenOddEven = isPrimeEvenOddEvenOdd && isOdd\n    \
    \    val isPrimeEvenOddEvenOddEvenOdd = isPrimeEvenOddEvenOddEven && isOdd\n \
    \       val isPrimeEvenOddEvenOddEvenOddEven = isPrimeEvenOddEvenOddEvenOddEven\
    \ && isOdd\n        val isPrimeEvenOddEvenOddEvenOddEvenOdd = isPrimeEvenOddEvenOddEvenOddEvenOdd\
    \ && isOdd\n        val isPrimeEvenOddEvenOddEvenOddEvenOddEven = isPrimeEvenOddEvenOddEvenOddEvenOddEven\
    \ && isOdd\n        val isPrimeEvenOddEvenOddEvenOddEvenOddEvenOdd = isPrimeEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ && isOdd\n        val isPrimeEvenOddEvenOddEvenOddEvenOddEvenOddEven = isPrimeEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ && isOdd\n        val isPrimeEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = isPrimeEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ && isOdd\n        val isPrimeEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = isPrimeEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven && isOdd\n        val\
    \ isPrimeEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = isPrimeEvenOddEvenOddEvenOddEvenOddEvenO",
  "        val isPrime = n % 2 == 0\n        if (isPrime) {\n            return x\n\
    \        } else {\n            return y\n        }", "        if (n % 2 == 0)\
    \ x\n        else y", "        if (n % 2 == 0) x\n        else y", "        if\
    \ (n % 2 == 0) {\n            return x\n        } else {\n            return y\n\
    \        }", "        val isPrime = n % 2 == 0\n        if (isPrime) {\n     \
    \       x\n        } else {\n            y\n        }", "        val primes =\
    \ mutable.ArrayBuffer(2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l, 37l,\
    \ 41l, 43l, 47l, 53l, 59l, 61l, 67l, 71l, 73l, 79l, 83l, 89l, 97l)\n        val\
    \ isPrime = mutable.ArrayBuffer(true, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, ", "        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        val ", "        if (n % 2 == 0) {\n            x\n        } else {\n\
    \            y\n        }"]
stop_tokens:
- "\n    }\n"
