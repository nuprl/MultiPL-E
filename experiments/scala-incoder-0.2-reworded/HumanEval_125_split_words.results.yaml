language: scala
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val numWords = words.length\n        val numLetters\
    \ = txt.length.toString.toInt\n        val numLettersOdd = numLetters % 2\n  \
    \      val numLettersEven = numLetters - numLettersOdd\n        val numLettersEvenOdd\
    \ = numLettersEven % 2\n        val numLettersEvenEven = numLettersEven - numLettersEvenOdd\n\
    \        val numLettersOddOdd = numLettersOdd - numLettersEvenOdd\n        val\
    \ numLettersEvenOddOdd = numLettersEvenOdd - numLettersOddOdd\n        val numLettersEvenEvenOdd\
    \ = numLettersEvenEven - numLettersOddOdd\n        val numLettersOddEvenOdd =\
    \ numLettersOddOdd - numLettersEvenOdd\n        val numLettersEvenOddEvenOdd =\
    \ numLettersEvenOddOdd - numLettersEvenEvenOdd\n        val numLettersEvenEvenEvenOdd\
    \ = numLettersEvenEvenOdd - numLettersOddOdd\n        val numLettersOddOddEvenOdd\
    \ = numLettersOddEvenOdd - numLettersEvenOdd\n        val numLettersEvenOddOddEvenOdd\
    \ = numLettersEvenOddOddEvenOdd - numLettersEvenEvenOdd\n        val numLettersEvenEvenEvenOddOdd\
    \ = numLettersEvenEvenEvenOddOdd - numLettersOddOddEvenOdd\n        val numLettersOddEvenOddEvenOdd\
    \ = numLettersOddEvenOddEvenOdd - numLettersEvenOddOddEvenOdd\n        val numLettersEvenOddEvenOddEvenOdd\
    \ = numLettersEvenOddEvenOddEvenOdd - numLettersEvenEvenOddOddEvenOdd\n      \
    \  val numLettersEvenEvenEvenOddEvenOdd = numLettersEvenEvenEvenOddEvenOdd - numLettersOddOddEvenOddEvenOdd\n\
    \        val numLettersOddOddEvenOddEvenOdd = numLettersOddOddEvenOddEvenOddEvenOdd\
    \ - numLettersEvenOddOddEvenOddEven\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplq2bhrkf.scala:29:42 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOddOddEvenOdd\e\
    [0m = numLettersEvenOddOddEvenOdd - numLettersEvenEvenOdd\n\e[31m\e[31m   |\e\
    [0m                                          ^\e[0m\n\e[31m   |\e[0m         \
    \         Recursive \e[33mvalue\e[0m \e[35mnumLettersEvenOddOddEvenOdd\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplq2bhrkf.scala:30:43\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumLettersEvenEvenEvenOddOdd\e[0m = numLettersEvenEvenEvenOddOdd - numLettersOddOddEvenOdd\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                 Recursive \e[33mvalue\e[0m \e[35mnumLettersEvenEvenEvenOddOdd\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplq2bhrkf.scala:31:42\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumLettersOddEvenOddEvenOdd\e[0m = numLettersOddEvenOddEvenOdd - numLettersEvenOddOddEvenOdd\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35mnumLettersOddEvenOddEvenOdd\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplq2bhrkf.scala:32:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumLettersEvenOddEvenOddEvenOdd\e[0m = numLettersEvenOddEvenOddEvenOdd\
    \ - numLettersEvenEvenOddOddEvenOdd\n\e[31m\e[31m   |\e[0m                   \
    \                           ^\e[0m\n\e[31m   |\e[0m              Recursive \e\
    [33mvalue\e[0m \e[35mnumLettersEvenOddEvenOddEvenOdd\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplq2bhrkf.scala:33:47 ------------------------"
  stdout: ''
  timestamp: 1659800226
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ even = words.filter(_.toLowerCase contains \"a\") map { _.toLowerCase } filter\
    \ { _.toLowerCase contains \"b\" } map { _.toLowerCase } filter { _.toLowerCase\
    \ contains \"c\" } map { _.toLowerCase } filter { _.toLowerCase contains \"d\"\
    \ } map { _.toLowerCase } filter { _.toLowerCase contains \"e\" } map { _.toLowerCase\
    \ } filter { _.toLowerCase contains \"f\" } map { _.toLowerCase } filter { _.toLowerCase\
    \ contains \"g\" } map { _.toLowerCase } filter { _.toLowerCase contains \"h\"\
    \ } map { _.toLowerCase } filter { _.toLowerCase contains \"i\" } map { _.toLowerCase\
    \ } filter { _.toLowerCase contains \"j\" } map { _.toLowerCase } filter { _.toLowerCase\
    \ contains \"k\" } map { _.toLowerCase } filter { _.toLowerCase contains \"l\"\
    \ } map { _.toLowerCase } filter { _.toLowerCase contains \"m\" } map { _.toLowerCase\
    \ } filter { _.toLowerCase contains \"n\" } map { _.toLowerCase } filter { _.toLowerCase\
    \ contains \"o\" } map { _.toLowerCase } filter { _.toLowerCase contains \"p\"\
    \ } map { _.toLowerCase } filter { _.toLowerCase contains \"q\" } map { _.toLowerCase\
    \ } filter { _.toLowerCase contains \"r\" } map { _.toLowerCase } filter { _.toLowerCase\
    \ contains \"s\" } map { _.toLowerCase } filter { _.toLowerCase contains \"t\"\
    \ } map { _.toLowerCase } filter { _.toLowerCase contains \"u\" } map { _.toLowerCase\
    \ } filter { _.toLowerCase contains \"v\" } map { _.toLowerCase } filter { _.toLowerCase\
    \ contains \"w\" } map { _.toLowerCase } filter { _.toLowerCase contains \"x\"\
    \ } map { _.toLowerCase } filter { _.toLowerCase contains \"y\" } map { _.toLowerCase\
    \ } filter { _.toLowerCase contains \"z\" } map { _.toLowerCase } filter { _.toLowerCase\
    \ contains \"\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpg9yqt4v5.scala:19:1618 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(_.toLowerCase\
    \ contains \e[31m\"a\"\e[0m) map { _.toLowerCase } filter { _.toLowerCase contains\
    \ \e[31m\"b\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains \e\
    [31m\"c\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"\
    d\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"e\"\e\
    [0m } map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"f\"\e[0m }\
    \ map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"g\"\e[0m } map\
    \ { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"h\"\e[0m } map { _.toLowerCase\
    \ } filter { _.toLowerCase contains \e[31m\"i\"\e[0m } map { _.toLowerCase } filter\
    \ { _.toLowerCase contains \e[31m\"j\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase\
    \ contains \e[31m\"k\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains\
    \ \e[31m\"l\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains \e\
    [31m\"m\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"\
    n\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"o\"\e\
    [0m } map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"p\"\e[0m }\
    \ map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"q\"\e[0m } map\
    \ { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"r\"\e[0m } map { _.toLowerCase\
    \ } filter { _.toLowerCase contains \e[31m\"s\"\e[0m } map { _.toLowerCase } filter\
    \ { _.toLowerCase contains \e[31m\"t\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase\
    \ contains \e[31m\"u\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains\
    \ \e[31m\"v\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains \e\
    [31m\"w\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"\
    x\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"y\"\e\
    [0m } map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"z\"\e[0m }\
    \ map { _.toLowerCase } filter { _.toLowerCase contains \"\n\e[31m\e[31m   |\e\
    [0m                                              "
  stdout: ''
  timestamp: 1659800228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val wordList = words.toList\n            val evenWords = wordList.filter(word\
    \ => word.length % 2 == 0)\n            val oddWords = wordList.filter(word =>\
    \ word.length % 2 != 0)\n            val evenLetters = evenWords.map(word => word.map(_.toLowerCase).toSet).flatten.toSet\n\
    \            val oddLetters = oddWords.map(word => word.map(_.toLowerCase).toSet).flatten.toSet\n\
    \            val evenLetterCount = evenLetters.count(_ % 2 == 0)\n           \
    \ val oddLetterCount = oddLetters.count(_ % 2 != 0)\n            val evenLetterCountEq\
    \ = evenLetters.count(_ == _)\n            val oddLetterCountEq = oddLetters.count(_\
    \ == _)\n            val evenLetterCountOdd = evenLetters.count(_ != _)\n    \
    \        val oddLetterCountOdd = oddLetters.count(_ != _)\n            val evenLetterCountEven\
    \ = evenLetters.count(_ == _)\n            val oddLetterCountEven = oddLetters.count(_\
    \ == _)\n            val evenLetterCountOddEven = evenLetters.count(_ != _)\n\
    \            val oddLetterCountOddEven = oddLetters.count(_ != _)\n          \
    \  val evenLetterCountOddOdd = evenLetters.count(_ == _)\n            val oddLetterCountOddOdd\
    \ = oddLetters.count(_ == _)\n            val evenLetterCountOddEvenOdd = evenLetters.count(_\
    \ != _)\n            val oddLetterCountOddEvenOdd = oddLetters.count(_ != _)\n\
    \            val evenLetterCountOddOddEven = evenLetters.count(_ == _)\n     \
    \       val oddLetterCountOddOddEven = oddLetters.count(_ == _)\n            val\
    \ evenLetterCountOddOddOdd = evenLetters.count(_ != _)\n            val oddLetterCountOddOddOdd\
    \ = oddLetters.count(_ != _)\n            val evenLetterCountOddEvenOddOdd = evenLetters.count(_\
    \ == _)\n            val oddLetterCountOddEvenOddOdd = oddLetters.count(_ == _)\n\
    \            val evenLetterCountOddEvenOddEvenOdd = evenLetters.count(_ != _)\n\
    \            val \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpcekwlwtb.scala:45:15 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcekwlwtb.scala:59:0 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcekwlwtb.scala:22:63\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLetters\e[0m = evenWords.map(\e[36mword\e[0m => word.map(_.toLowerCase).toSet).flatten.toSet\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpcekwlwtb.scala:23:61 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            \e[33mval\e[0m \e[36moddLetters\e[0m = oddWords.map(\e[36mword\e\
    [0m => word.map(_.toLowerCase).toSet).flatten.toSet\n\e[31m\e[31m   |\e[0m   \
    \                                                        ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcekwlwtb.scala:24:54\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLetterCount\e[0m = evenLetters.count(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \  ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of Nothing, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e\
    [0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e\
    [0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\e[31m\
    \   |\e[0m  "
  stdout: ''
  timestamp: 1659800228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0)\n            Left(List[String]())\n\
    \        else if (words.length == 1)\n            Right(words.length)\n      \
    \  else {\n            val wordList = words.toList\n            val wordCount\
    \ = wordList.map(_.length).sum\n            val oddCount = wordList.filter(_.toString.toLowerCase\
    \ == \"a\" || _.toString.toLowerCase == \"b\" || _.toString.toLowerCase == \"\
    c\" || _.toString.toLowerCase == \"d\" || _.toString.toLowerCase == \"e\" || _.toString.toLowerCase\
    \ == \"f\" || _.toString.toLowerCase == \"g\" || _.toString.toLowerCase == \"\
    h\" || _.toString.toLowerCase == \"i\" || _.toString.toLowerCase == \"j\" || _.toString.toLowerCase\
    \ == \"k\" || _.toString.toLowerCase == \"l\" || _.toString.toLowerCase == \"\
    m\" || _.toString.toLowerCase == \"n\" || _.toString.toLowerCase == \"o\" || _.toString.toLowerCase\
    \ == \"p\" || _.toString.toLowerCase == \"q\" || _.toString.toLowerCase == \"\
    r\" || _.toString.toLowerCase == \"s\" || _.toString.toLowerCase == \"t\" || _.toString.toLowerCase\
    \ == \"u\" || _.toString.toLowerCase == \"v\" || _.toString.toLowerCase == \"\
    w\" || _.toString.toLowerCase == \"x\" || _.toString.toLowerCase == \"y\" || _.toString.toLowerCase\
    \ == \"z\").length\n            Right(wordCount)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpx86g4bdv.scala:23:43 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36moddCount\e[0m = wordList.filter(_.toString.toLowerCase\
    \ == \e[31m\"a\"\e[0m || _.toString.toLowerCase == \e[31m\"b\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"c\"\e[0m || _.toString.toLowerCase == \e[31m\"d\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"e\"\e[0m || _.toString.toLowerCase == \e[31m\"f\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"g\"\e[0m || _.toString.toLowerCase == \e[31m\"h\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"i\"\e[0m || _.toString.toLowerCase == \e[31m\"j\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"k\"\e[0m || _.toString.toLowerCase == \e[31m\"l\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"m\"\e[0m || _.toString.toLowerCase == \e[31m\"n\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"o\"\e[0m || _.toString.toLowerCase == \e[31m\"p\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"q\"\e[0m || _.toString.toLowerCase == \e[31m\"r\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"s\"\e[0m || _.toString.toLowerCase == \e[31m\"t\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"u\"\e[0m || _.toString.toLowerCase == \e[31m\"v\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"w\"\e[0m || _.toString.toLowerCase == \e[31m\"x\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"y\"\e[0m || _.toString.toLowerCase == \e[31m\"z\"\e[0m).length\n\e\
    [31m\e[31m   |\e[0m
  stdout: ''
  timestamp: 1659800223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnav5eu4l.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else Left(words)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp__w49_q1.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800226
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(0) else Right(words.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4my0rzy1.scala:19)\n\tat Problem.main(tmp4my0rzy1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.length)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(_.length%2 == 0)\n            val odd = words.filter(_.length%2\
    \ != 0)\n            val evenCount = even.map(_.length).sum\n            val oddCount\
    \ = odd.map(_.length).sum\n            val evenLetters = even.map(_.toLowerCase).filter(_.isLetter).map(_.toInt)\n\
    \            val oddLetters = odd.map(_.toLowerCase).filter(_.isLetter).map(_.toInt)\n\
    \            val evenLettersCount = evenLetters.sum\n            val oddLettersCount\
    \ = oddLetters.sum\n            val evenLettersCountInt = evenLettersCount.toInt\n\
    \            val oddLettersCountInt = oddLettersCount.toInt\n            val evenLettersCountInt\
    \ = evenLettersCount.toInt\n            val oddLettersCountInt = oddLettersCount.toInt\n\
    \            val evenLettersCountInt = evenLettersCount.toInt\n            val\
    \ oddLettersCountInt = oddLettersCount.toInt\n            val evenLettersCountInt\
    \ = evenLettersCount.toInt\n            val oddLettersCountInt = oddLettersCount.toInt\n\
    \            val evenLettersCountInt = evenLettersCount.toInt\n            val\
    \ oddLettersCountInt = oddLettersCount.toInt\n            val evenLettersCountInt\
    \ = evenLettersCount.toInt\n            val oddLettersCountInt = oddLettersCount.toInt\n\
    \            val evenLettersCountInt = evenLettersCount.toInt\n            val\
    \ oddLettersCountInt = oddLettersCount.toInt\n            val evenLettersCountInt\
    \ = evenLettersCount.toInt\n            val oddLettersCountInt = oddLettersCount.toInt\n\
    \            val evenLettersCountInt = evenLettersCount.toInt\n            val\
    \ oddLettersCountInt = oddLettersCount.toInt\n            val evenLettersCountInt\
    \ = evenLettersCount.toInt\n            val oddLettersCountInt = oddLettersCount.toInt\n\
    \            val evenLettersCountInt = evenLettersCount.toInt\n            val\
    \ oddLettersCountInt = oddLettersCount.toInt\n            val evenLettersCountInt\
    \ = evenLettersCoun\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg3ljtuyv.scala:63:0 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg3ljtuyv.scala:29:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCountInt\e[0m = evenLettersCount.toInt\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mevenLettersCountInt is already defined as \e[33mvalue\e[0m \e[35mevenLettersCountInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg3ljtuyv.scala:30:16 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountInt\e[0m = oddLettersCount.toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountInt is already defined as \e[33mvalue\e[0m\
    \ \e[35moddLettersCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpg3ljtuyv.scala:31:16 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountInt\e\
    [0m = evenLettersCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenLettersCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpg3ljtuyv.scala:32:16 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountInt\e\
    [0m = oddLettersCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountInt is already defined as \e[33mvalue\e[0m\
    \ \e[35moddLettersCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that"
  stdout: ''
  timestamp: 1659800228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg8_y8cem.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        if (words.length == 0) Left(Nil)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val numWords = words.length\n            val numLetters = txt.length\n\
    \            val numLettersOddOrder = numLetters.toCharArray.filter(x => x.toInt\
    \ % 2 != 0).length\n            val numLettersEvenOrder = numLetters.toCharArray.filter(x\
    \ => x.toInt % 2 == 0).length\n            val numLettersOddOrderInAlphabet =\
    \ numLettersOddOrder.toCharArray.filter(x => x.toInt <= 26).length\n         \
    \   val numLettersEvenOrderInAlphabet = numLettersEvenOrder.toCharArray.filter(x\
    \ => x.toInt <= 26).length\n            val numLettersOddOrderInAlphabetInWords\
    \ = numLettersOddOrderInAlphabet * numWords\n            val numLettersEvenOrderInAlphabetInWords\
    \ = numLettersEvenOrderInAlphabet * numWords\n            val numLettersOddOrderInAlphabetInWordsOddOrder\
    \ = numLettersOddOrderInAlphabetInWords - numLettersOddOrder\n            val\
    \ numLettersEvenOrderInAlphabetInWordsOddOrder = numLettersEvenOrderInAlphabetInWords\
    \ - numLettersEvenOrder\n            val numLettersOddOrderInAlphabetInWordsEvenOrder\
    \ = numLettersOddOrderInAlphabetInWordsOddOrder - numLettersEvenOrderInAlphabet\n\
    \            val numLettersEvenOrderInAlphabetInWordsEvenOrder = numLettersEvenOrderInAlphabetInWordsOddOrder\
    \ - numLettersEvenOrderInAlphabet\n            val numLettersOddOrderInAlphabetInWordsEvenOrderInAlphabet\
    \ = numLettersOddOrderInAlphabetInWordsEvenOrder - numLettersEvenOrderInAlphabetInAlphabet\n\
    \            val numLettersEvenOrderInAlphabetInWordsEvenOrderInAlphabet = numLettersEvenOrderInAlphabetInWordsOddOrder\
    \ - numLettersEvenOrderInAlphabetInAlphabet\n            val numLettersOddOrderInAlphabetInWordsEvenOrderInAlphabetInAlphabet\
    \ = numLettersOddOrderInAlphabetInWordsEvenOrderInAlphabet - numLetter\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4zzaz3h3.scala:47:0 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4zzaz3h3.scala:21:48\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnumLettersOddOrder\e[0m = numLetters.toCharArray.filter(\e[36mx\e[0m =>\
    \ x.toInt % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m      \
    \                               ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                               value toCharArray is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp4zzaz3h3.scala:22:49 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mnumLettersEvenOrder\e\
    [0m = numLetters.toCharArray.filter(\e[36mx\e[0m => x.toInt % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m                                \
    \      ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \      value toCharArray is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4zzaz3h3.scala:46:1 ---------------------\e[0m\e[0m\n\e[31m46\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp4zzaz3h3.scala:35:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m35 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659800228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        if (words.length == 0) Left(Nil)\n\
    \        else if (words.length == 1) Right(words.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbh8ikhmv.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq51k7eki.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800226
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val even = words.filter(word => word.forall(_.isLetter) && word.forall(_.isLower))\n\
    \            val odd = words.filter(word => word.forall(_.isLetter) && word.forall(_.isLower)\
    \ && word.forall(_.isDigit))\n            val evenCount = even.filter(word =>\
    \ word.forall(_.isDigit)).size\n            val oddCount = odd.filter(word =>\
    \ word.forall(_.isDigit)).size\n            val count = evenCount + oddCount\n\
    \            Right(count)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqise8727.scala:28)\n\tat Problem.main(tmpqise8727.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        val wordList = words.toList\n        val wordCount = wordList.size\n\
    \        if (wordCount == 0) Right(wordCount)\n        val lowerCaseCount = wordList.count(_.toLowerCase\
    \ == _)\n        if (lowerCaseCount == 0) Right(lowerCaseCount)\n        val oddOrderCount\
    \ = wordList.count(_ % 2 == 1)\n        if (oddOrderCount == 0) Right(oddOrderCount)\n\
    \        val oddOrderCount = wordList.count(_ % 2 == 1)\n        if (oddOrderCount\
    \ == 0) Right(oddOrderCount)\n        val oddOrderCount = wordList.count(_ % 2\
    \ == 1)\n        if (oddOrderCount == 0) Right(oddOrderCount)\n        Right(wordCount)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbfwa63al.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36moddOrderCount\e[0m = wordList.count(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddOrderCount is already defined as \e[33mvalue\e[0m \e[35moddOrderCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbfwa63al.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36moddOrderCount\e[0m = wordList.count(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddOrderCount is already defined as \e[33mvalue\e[0m \e[35moddOrderCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E086] Syntax\
    \ Error: /tmp/tmpbfwa63al.scala:20:44 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseCount\e[0m = wordList.count(_.toLowerCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbfwa63al.scala:22:45\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36moddOrderCount\e[0m = wordList.count(_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9l3icwe6.scala:42:18\
    \ --------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800226
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.isEmpty) Left(List.empty)\n\
    \        else if (words.size == 1) Right(words.size)\n        else {\n       \
    \     val letters = words.map(_.toLowerCase + words.drop(1).mkString(\"\"))\n\
    \            val odd = letters.filter(letter => letters.count(_ == letter) % 2\
    \ == 1).length\n            Right(odd)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5kes_n8v.scala:25)\n\tat Problem.main(tmp5kes_n8v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.head.length)\n        else {\n          \
    \  val even = words.filter(_.length == words.length)\n            val odd = words.filter(_.length\
    \ % 2 != 0)\n            val evenCount = even.map(_.length).sum\n            val\
    \ oddCount = odd.map(_.length).sum\n            val evenLetters = even.map(_.toLowerCase).filter(_.isLetter).length\n\
    \            val oddLetters = odd.map(_.toLowerCase).filter(_.isLetter).length\n\
    \            val evenOrder = even.map(_.toLowerCase).filter(_.isLetter).map(_.ord).sum\n\
    \            val oddOrder = odd.map(_.toLowerCase).filter(_.isLetter).map(_.ord).sum\n\
    \            val evenLettersOdd = evenLetters % oddLetters\n            val evenOrderOdd\
    \ = evenOrder % oddOrder\n            val evenLettersEven = evenLetters % evenLetters\n\
    \            val evenOrderEven = evenOrder % evenOrder\n            val evenLettersOddEven\
    \ = evenLettersEven % oddLetters\n            val evenOrderOddEven = evenOrderEven\
    \ % oddOrder\n            val evenLettersOddOdd = evenLettersOdd % oddLetters\n\
    \            val evenOrderOddEvenOdd = evenOrderOdd % oddOrder\n            val\
    \ evenLettersOddEvenOddEven = evenLettersOddEven % evenLetters\n            val\
    \ evenOrderOddEvenOddEven = evenOrderOddEven % evenOrder\n            val evenLettersOddEvenOddOdd\
    \ = evenLettersOddOdd % evenLetters\n            val evenOrderOddEvenOddOdd =\
    \ evenOrderOddOdd % evenOrder\n            val evenLettersOddEvenOddEvenOdd =\
    \ evenLettersOddEvenOdd % evenLetters\n            val evenOrderOddEvenOddEvenOdd\
    \ = evenOrderOddEvenOdd % evenOrder\n            val evenLettersOddEvenOddOddEven\
    \ = evenLettersOddEvenOddEven % evenLetters\n            val evenOrderOddEvenOddOddEven\
    \ = evenOrderOddEvenOddEven % evenOrder\n            val evenLettersOddEvenOddOddOdd\
    \ = evenLettersOddEvenOddOdd % \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptq71lm9b.scala:43:72 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            \e[33mval\e[0m \e[36mevenLettersOddEvenOddOddOdd\e\
    [0m = evenLettersOddEvenOddOdd % \n\e[31m\e[31m   |\e[0m                     \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                     expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptq71lm9b.scala:57:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmptq71lm9b.scala:23:63 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = even.map(_.toLowerCase).filter(_.isLetter).length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value isLetter\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptq71lm9b.scala:24:61\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddLetters\e[0m = odd.map(_.toLowerCase).filter(_.isLetter).length\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \ ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value isLetter\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptq71lm9b.scala:25:61\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenOrder\e[0m = even.map(_.toLowerCase).filter(_.isLetter).map(_.ord).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value isLetter\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptq71lm9b.scala:25:77\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenOrder\e[0m = even.map(_.toLowerCase).filter(_.isLetter).map(_.ord).sum\n\
    \e"
  stdout: ''
  timestamp: 1659800228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(x => x.toLowerCase == \"even\")\n          \
    \  val odd = words.filter(x => x.toLowerCase == \"odd\")\n            val evenCount\
    \ = even.map(x => x.length).sum\n            val oddCount = odd.map(x => x.length).sum\n\
    \            Right(evenCount + oddCount)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpussl_smu.scala:27)\n\tat Problem.main(tmpussl_smu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ even = words.filter(_.length == evenLetterCount(txt))\n            val odd =\
    \ words.filter(_.length == oddLetterCount(txt))\n            val evenCount = even.map(_.length).sum\n\
    \            val oddCount = odd.map(_.length).sum\n            Right(evenCount\
    \ + oddCount)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpue5iugd4.scala:19:48 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(_.length\
    \ == evenLetterCount(txt))\n\e[31m\e[31m   |\e[0m                            \
    \                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                           Not found: evenLetterCount\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpue5iugd4.scala:20:47 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(_.length\
    \ == oddLetterCount(txt))\n\e[31m\e[31m   |\e[0m                             \
    \                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                         Not found: oddLetterCount\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800223
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.head.length)\n        else Right(words.map(_.length).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbvlmssg5.scala:21)\n\tat Problem.main(tmpbvlmssg5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        val wordList = words.toList\n        val wordCount\
    \ = wordList.size\n        val oddWords = wordList.filter(word => word.forall(c\
    \ => c.isLetter) && word.count(_ == 'a') % 2 == 1)\n        val evenWords = wordList.filter(word\
    \ => word.forall(c => c.isLetter) && word.count(_ == 'a') % 2 == 0)\n        val\
    \ evenLetters = evenWords.map(word => word.count(_ == 'a'))\n        val oddLetters\
    \ = oddWords.map(word => word.count(_ == 'a'))\n        val oddLettersCount =\
    \ oddLetters.sum\n        val evenLettersCount = evenLetters.sum\n        val\
    \ wordCountRight = wordCount\n        val oddWordsRight = oddWords\n        val\
    \ evenWordsRight = evenWords\n        val evenLettersRight = evenLetters\n   \
    \     val oddLettersRight = oddLetters\n        val oddLettersRightCount = oddLettersRight.sum\n\
    \        val evenLettersRightCount = evenLettersRight.sum\n        val wordCountLeft\
    \ = wordCount\n        val oddWordsLeft = oddWords\n        val evenWordsLeft\
    \ = evenWords\n        val evenLettersLeft = evenLetters\n        val oddLettersLeft\
    \ = oddLetters\n        val oddLettersLeftCount = oddLettersLeft.sum\n       \
    \ val evenLettersLeftCount = evenLettersLeft.sum\n        val wordCountRightCount\
    \ = wordCountRight\n        val oddWordsRightCount = oddWordsRight\n        val\
    \ evenWordsRightCount = evenWordsRight\n        val evenLettersRightCount = evenLettersRight\n\
    \        val oddLettersRightCount = oddLettersRight\n        val oddLettersRightCountCount\
    \ = oddLettersRightCount\n        val evenLettersRightCountCount = evenLettersRightCount\n\
    \        val wordCountLeftCount = wordCountLeft\n        val oddWordsLeftCount\
    \ = oddWordsLeft\n        val evenWordsLeftCount = evenWordsLeft\n        val\
    \ evenLettersLeftCount = evenLettersLeft\n        val oddLettersLeftCount = oddLettersLeft\n\
    \        val oddLettersLeftCountCount = oddLettersLeftCount\n        val evenLettersLeftCountCount\
    \ = evenLettersLeftCount\n        val wordCountRightCountCount = wordCountRightCount\n\
    \        val oddWordsRightCountCount = oddWordsRightCount\n        val evenWordsRightCountCount\
    \ = evenWordsRightCount\n        val evenLettersRightCountCount = evenLettersRightCount\n\
    \        val oddLetter\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0lflrcba.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0lflrcba.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenLettersRightCount\e[0m = evenLettersRight\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenLettersRightCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mevenLettersRightCount\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0lflrcba.scala:42:12 ---------------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m        \e[33mval\e[0m \e[36moddLettersRightCount\e[0m = oddLettersRight\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0moddLettersRightCount is already defined as \e[33mvalue\e[0m \e\
    [35moddLettersRightCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0lflrcba.scala:48:12 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mevenLettersLeftCount\e[0m\
    \ = evenLettersLeft\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersLeftCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenLettersLeftCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0lflrcba.scala:49:12 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36moddLettersLeftCount\e[0m\
    \ = oddLettersLeft\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersLeftCount is already defined as \e[33mvalue\e[0m\
    \ \e[35moddLettersLeftCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the "
  stdout: ''
  timestamp: 1659800225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.head.length)\n        else {\n          \
    \  val even = words.filter(_.length == words.length)\n            val odd = words.filter(_.length\
    \ % 2 == 1)\n            val evenCount = even.map(_.length).sum\n            val\
    \ oddCount = odd.map(_.length).sum\n            if (evenCount == 0) Right(evenCount)\n\
    \            else if (oddCount == 0) Left(odd.length)\n            else Left(evenCount)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3iacprtl.scala:24:45\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33melse\e[0m \e\
    [33mif\e[0m (oddCount == \e[31m0\e[0m) Left(odd.length)\n\e[31m\e[31m   |\e[0m\
    \                                         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                      Found:    Int\n\e[31m   |\e[0m        \
    \                                 Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3iacprtl.scala:25:22 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33melse\e[0m Left(evenCount)\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \           Found:    (evenCount : Int)\n\e[31m   |\e[0m                     \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800227
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val splitWords = words.map(_.toLowerCase)\n            val evenLetters\
    \ = splitWords.filter(_.toString.length == 1).map(_.toString.toInt)\n        \
    \    val oddLetters = splitWords.filter(_.toString.length == 2).map(_.toString.toInt)\n\
    \            val evenLettersCount = evenLetters.count(_ % 2 == 0)\n          \
    \  val oddLettersCount = oddLetters.count(_ % 2 == 0)\n            if (evenLettersCount\
    \ == oddLettersCount) Right(evenLettersCount)\n            else Left(List[String](evenLetters.take(oddLettersCount).mkString(\"\
    ,\"), oddLetters.take(evenLettersCount).mkString(\",\")))\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbbj5nb1e.scala:29)\n\tat Problem.main(tmpbbj5nb1e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.head.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprlv3_emj.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ even = words.filter(word => word.length % 2 == 0)\n            val odd = words.filter(word\
    \ => word.length % 2 != 0)\n            val evenOrder = even.map(word => word.map(_.toLowerCase\
    \ - 'a').sum).sum\n            val oddOrder = odd.map(word => word.map(_.toLowerCase\
    \ - 'a').sum).sum\n            val result = if (evenOrder == oddOrder) evenOrder\
    \ else oddOrder\n            Right(result)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz1bxxh6b.scala:21:56 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(\e\
    [36mword\e[0m => word.map(_.toLowerCase - \e[31m'a'\e[0m).sum).sum\n\e[31m\e[31m\
    \   |\e[0m                                                      ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmpz1bxxh6b.scala:21:79 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(\e\
    [36mword\e[0m => word.map(_.toLowerCase - \e[31m'a'\e[0m).sum).sum\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \            ^\e[0m\n\e[31m   |\e[0m                                         \
    \ No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m              \
    \                            where:    B is a type variable\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpz1bxxh6b.scala:22:54 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddOrder\e[0m = odd.map(\e\
    [36mword\e[0m => word.map(_.toLowerCase - \e[31m'a'\e[0m).sum).sum\n\e[31m\e[31m\
    \   |\e[0m                                                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmpz1bxxh6b.scala:22:77 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddOrder\e[0m = odd.map(\e\
    [36mword\e[0m => word.map(_.toLowerCase - \e[31m'a'\e[0m).sum).sum\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \          ^\e[0m\n\e[31m   |\e[0m                                          No\
    \ ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                 \
    \                         where:    B is a type variable\n4 errors found\n"
  stdout: ''
  timestamp: 1659800236
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").map(_.toLowerCase).toList\n        if (words.isEmpty)\
    \ Left(List.empty)\n        else if (words.size == 1) Right(words.size)\n    \
    \    else if (words.size == 2) Right(List(words.head, words.last))\n        else\
    \ if (words.size == 3) Right(List(words.head, words.last, words.last))\n     \
    \   else if (words.size == 4) Right(List(words.head, words.last, words.last, words.last))\n\
    \        else if (words.size == 5) Right(List(words.head, words.last, words.last,\
    \ words.last, words.last))\n        else if (words.size == 6) Right(List(words.head,\
    \ words.last, words.last, words.last, words.last, words.last))\n        else if\
    \ (words.size == 7) Right(List(words.head, words.last, words.last, words.last,\
    \ words.last, words.last, words.last))\n        else if (words.size == 8) Right(List(words.head,\
    \ words.last, words.last, words.last, words.last, words.last, words.last, words.last))\n\
    \        else if (words.size == 9) Right(List(words.head, words.last, words.last,\
    \ words.last, words.last, words.last, words.last, words.last, words.last))\n \
    \       else if (words.size == 10) Right(List(words.head, words.last, words.last,\
    \ words.last, words.last, words.last, words.last, words.last, words.last))\n \
    \       else if (words.size == 11) Right(List(words.head, words.last, words.last,\
    \ words.last, words.last, words.last, words.last, words.last, words.last))\n \
    \       else if (words.size == 12) Right(List(words.head, words.last, words.last,\
    \ words.last, words.last, words.last, words.last, words.last, words.last, words.last))\n\
    \        else if (words.size == 13) Right(List(words.head, words.last, words.last,\
    \ words.last, words.last, words.last, words.last, words.last, words.last, words.last,\
    \ words.last))\n        else if (words.size == 14) Right(List(words.head, words.last,\
    \ words.last, words.last, words.last, words.last, words.last, words.last, words.last,\
    \ words.last, words.last))\n        else if (words.size == 15) Right(List(words.head,\
    \ words.last, words.last, words.last, words.last, words.last, words.last, words.last,\
    \ words.last, words.last, words.last, words.last))\n        else if (words.size\
    \ == 16) Right(List(words.head, words.last, words.last, words.last, words.last,\
    \ words.last, words.last, words.last, words.last, words.last, words.last, words.last,\
    \ words.last))\n        else if (words.size == 17) Right(List(\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpce9p7dvb.scala:33:46 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.size ==\
    \ \e[31m17\e[0m) Right(List(\n\e[31m\e[31m   |\e[0m                          \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \      expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpce9p7dvb.scala:18:44 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.size ==\
    \ \e[31m2\e[0m) Right(List(words.head, words.last))\n\e[31m\e[31m   |\e[0m   \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Found:    List[String]\n\e[31m\
    \   |\e[0m                                        Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpce9p7dvb.scala:19:44 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.size ==\
    \ \e[31m3\e[0m) Right(List(words.head, words.last, words.last))\n\e[31m\e[31m\
    \   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    List[String]\n\
    \e[31m   |\e[0m                                        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpce9p7dvb.scala:20:44 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.size ==\
    \ \e[31m4\e[0m) Right(List(words.head, words.last, words.last, words.last))\n\e\
    [31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    List[String]\n\
    \e[31m   |\e[0m                                        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m l"
  stdout: ''
  timestamp: 1659800240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val letterWords = words.filter(_.contains(\"a\"))\n        val\
    \ letterWordsOdd = letterWords.filter(_.toString.toLowerCase % 2 == 1)\n     \
    \   val letterWordsEven = letterWords.filter(_.toString.toLowerCase % 2 == 0)\n\
    \        val letterWordsOddCount = letterWordsOdd.length\n        val letterWordsEvenCount\
    \ = letterWordsEven.length\n        val letterWordsOddOrder = letterWordsOdd.map(_.toString.toLowerCase\
    \ % 26).sum\n        val letterWordsEvenOrder = letterWordsEven.map(_.toString.toLowerCase\
    \ % 26).sum\n        val letterWordsOddOrderCount = letterWordsOddOrder.length\n\
    \        val letterWordsEvenOrderCount = letterWordsEvenOrder.length\n       \
    \ val letterWordsOddLetterCount = letterWordsOdd.map(_.length).sum\n        val\
    \ letterWordsEvenLetterCount = letterWordsEven.map(_.length).sum\n        val\
    \ letterWordsOddLetterOrderCount = letterWordsOddLetterCount.length\n        val\
    \ letterWordsEvenLetterOrderCount = letterWordsEvenLetterCount.length\n      \
    \  val letterWordsOddLetterOrderCount = letterWordsOddLetterCount.length\n   \
    \     val letterWordsEvenLetterOrderCount = letterWordsEvenLetterCount.length\n\
    \        val letterWordsOddLetterOrderCount = letterWordsOddLetterCount.length\n\
    \        val letterWordsEvenLetterOrderCount = letterWordsEvenLetterCount.length\n\
    \        val letterWordsOddLetterOrderCount = letterWordsOddLetterCount.length\n\
    \        val letterWordsEvenLetterOrderCount = letterWordsEvenLetterCount.length\n\
    \        val letterWordsOddLetterOrderCount = letterWordsOddLetterCount.length\n\
    \        val letterWordsEvenLetterOrderCount = letterWordsEvenLetterCount.length\n\
    \        val letterWordsOddLetterOrderCount = letterWordsOddLetterCount.length\n\
    \        val letterWordsEvenLetterOrderCount = letterWordsEvenLetterCount.length\n\
    \        val letterWordsOddLetterOrderCount = letterWordsOddLetterCount.length\n\
    \        val letterWordsEvenLetterOrderCount = letterWordsEvenLetterCount.length\n\
    \        val letterWordsOddLetterOrder\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp82qq84qi.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp82qq84qi.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mletterWordsOddLetterOrderCount\e[0m = letterWordsOddLetterCount.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mletterWordsOddLetterOrderCount is already defined as \e[33mvalue\e\
    [0m \e[35mletterWordsOddLetterOrderCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp82qq84qi.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mletterWordsEvenLetterOrderCount\e\
    [0m = letterWordsEvenLetterCount.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mletterWordsEvenLetterOrderCount is already defined as \e[33mvalue\e\
    [0m \e[35mletterWordsEvenLetterOrderCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp82qq84qi.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mletterWordsOddLetterOrderCount\e[0m = letterWordsOddLetterCount.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mletterWordsOddLetterOrderCount is already defined as \e[33mvalue\e\
    [0m \e[35mletterWordsOddLetterOrderCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp82qq84qi.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mletterWordsEvenLetterOrderCount\e\
    [0m = letterWordsEvenLetterCount.length\n"
  stdout: ''
  timestamp: 1659800239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").map(_.toLowerCase).toList\n        val commas = txt.split(\"\
    ,\").map(_.toLowerCase).toList\n        val letters = txt.map(_.toLowerCase).toList\n\
    \        val oddLetters = letters.filter(x => x % 2 != 0)\n        val evenLetters\
    \ = letters.filter(x => x % 2 == 0)\n        val evenLettersCount = evenLetters.count(x\
    \ => x != 0)\n        val oddLettersCount = oddLetters.count(x => x != 0)\n  \
    \      val evenLettersCountEq = evenLetters.count(x => x == 0)\n        val oddLettersCountEq\
    \ = oddLetters.count(x => x == 0)\n        val evenLettersCountEq2 = evenLetters.count(x\
    \ => x == 1)\n        val oddLettersCountEq2 = oddLetters.count(x => x == 1)\n\
    \        val evenLettersCountEq3 = evenLetters.count(x => x == 2)\n        val\
    \ oddLettersCountEq3 = oddLetters.count(x => x == 2)\n        val evenLettersCountEq4\
    \ = evenLetters.count(x => x == 3)\n        val oddLettersCountEq4 = oddLetters.count(x\
    \ => x == 3)\n        val evenLettersCountEq5 = evenLetters.count(x => x == 4)\n\
    \        val oddLettersCountEq5 = oddLetters.count(x => x == 4)\n        val evenLettersCountEq6\
    \ = evenLetters.count(x => x == 5)\n        val oddLettersCountEq6 = oddLetters.count(x\
    \ => x == 5)\n        val evenLettersCountEq7 = evenLetters.count(x => x == 6)\n\
    \        val oddLettersCountEq7 = oddLetters.count(x => x == 6)\n        val evenLettersCountEq8\
    \ = evenLetters.count(x => x == 7)\n        val oddLettersCountEq8 = oddLetters.count(x\
    \ => x == 7)\n        val evenLettersCountEq9 = evenLetters.count(x => x == 8)\n\
    \        val oddLettersCountEq9 = oddLetters.count(x => x == 8)\n        val evenLettersCountEq10\
    \ = evenLetters.count(x => x == 9)\n        val oddLettersCountEq10 = oddLetters.count(x\
    \ => x == 9)\n        val evenLettersCountEq11 = evenLetters.count(x => x == 10)\n\
    \        val oddLettersCountEq11 = oddLetters.count(x => x == 10)\n        val\
    \ evenLettersCountEq12 = evenLetters.count(x => x == 11)\n        val oddLettersCountEq12\
    \ = oddLetters.count(x => x == 11)\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpypzh2vo1.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = txt.map(_.toLowerCase).toList\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              value toLowerCase is not a member of Char\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpypzh2vo1.scala:47:5 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Either[List[String], Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ letters = words.map(_.toLowerCase)\n            val odd = letters.filter(letter\
    \ => letter % 2 != 0).length\n            Right(odd)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxkerjs1z.scala:20:54 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = letters.filter(\e\
    [36mletter\e[0m => letter % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e[31m\
    \   |\e[0m                                               ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659800237
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        val commaWords = txt.split(\"\
    ,\").filter(_.nonEmpty)\n        val letters = txt.filter(_.isLetter).length\n\
    \        val oddLetters = letters.filter(x => x % 2 != 0)\n        val result\
    \ = if (words.length == commaWords.length) Right(words.length) else Left(commaWords.length)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3htmmg1z.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36moddLetters\e[0m = letters.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   value filter is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp3htmmg1z.scala:20:8 ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    (result : Either[Int, Int])\n\e[31m   |\e[0m        Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.length == 0) Left(Nil)\n\
    \        else if (words.length == 1) Right(words.head.length)\n        else splitWords(words.tail).fold(Left(Nil),\
    \ Right(_))\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph3gqyiiv.scala:18:30\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m splitWords(words.tail).fold(Left(Nil),\
    \ Right(_))\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    \e[1m\e[31mArray\e[0m\e[1m\e[31m[\e\
    [0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                        Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph3gqyiiv.scala:18:45\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m splitWords(words.tail).fold(Left(Nil),\
    \ Right(_))\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Left[scala.collection.immutable.Nil.type,\
    \ Nothing]\n\e[31m   |\e[0m            Required: List[String] => Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val letters = words.map(_.toLowerCase)\n            val odd = letters.filter(letter\
    \ => letter % 2 == 1).size\n            Right(odd)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpni6zk53a.scala:20:54 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = letters.filter(\e\
    [36mletter\e[0m => letter % \e[31m2\e[0m == \e[31m1\e[0m).size\n\e[31m\e[31m \
    \  |\e[0m                                               ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659800239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.isEmpty) {\n            Left(List[String]())\n\
    \        } else {\n            val splitWords = words.filter(_.nonEmpty)\n   \
    \         val splitWordsCount = splitWords.map(_.length).sum\n            val\
    \ splitWordsCountOdd = splitWordsCount % 2\n            val splitWordsCountEven\
    \ = splitWordsCount - splitWordsCountOdd\n            val splitWordsCountEvenOdd\
    \ = splitWordsCountEven % 2\n            val splitWordsCountEvenOddOdd = splitWordsCountEvenOdd\
    \ % 2\n            val splitWordsCountEvenOddEven = splitWordsCountEvenOddOdd\
    \ % 2\n            val splitWordsCountEvenOddEvenOdd = splitWordsCountEvenOddEvenOdd\
    \ % 2\n            val splitWordsCountEvenOddEvenOddOdd = splitWordsCountEvenOddEvenOddOdd\
    \ % 2\n            val splitWordsCountEvenOddEvenOddEvenOdd = splitWordsCountEvenOddEvenOddEvenOddOdd\
    \ % 2\n            val splitWordsCountEvenOddEvenOddEvenOddOdd = splitWordsCountEvenOddEvenOddEvenOddOdd\
    \ % 2\n            val splitWordsCountEvenOddEvenOddEvenOddEvenOdd = splitWordsCountEvenOddEvenOddEvenOddEvenOddOdd\
    \ % 2\n            val splitWordsCountEvenOddEvenOddEvenOddEvenOddOdd = splitWordsCountEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ % 2\n            val splitWordsCountEvenOddEvenOddEvenOddEvenOddEvenOdd = splitWordsCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ % 2\n            val splitWordsCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = splitWordsCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd % 2\n   \
    \         val splitWordsCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = splitWordsCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuewu1h23.scala:48:0 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuewu1h23.scala:26:48\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e\
    [0m \e[36msplitWordsCountEvenOddEvenOdd\e[0m = splitWordsCountEvenOddEvenOdd %\
    \ \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                        \
    \        ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e[0m \e\
    [35msplitWordsCountEvenOddEvenOdd\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpuewu1h23.scala:27:51 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36msplitWordsCountEvenOddEvenOddOdd\e\
    [0m = splitWordsCountEvenOddEvenOddOdd % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m \
    \                                                  ^\e[0m\n\e[31m   |\e[0m   \
    \          Recursive \e[33mvalue\e[0m \e[35msplitWordsCountEvenOddEvenOddOdd\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuewu1h23.scala:29:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e\
    [0m \e[36msplitWordsCountEvenOddEvenOddEvenOddOdd\e[0m = splitWordsCountEvenOddEvenOddEvenOddOdd\
    \ % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                    ^\e[0m\n\e[31m   |\e[0m      Recursive \e[33mvalue\e[0m \e\
    [35msplitWordsCountEvenOddEvenOddEvenOddOdd\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpuewu1h23.scala:31:65 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36msplitWordsCountEvenOddEvenOddEvenOddEvenOddOdd\e\
    [0m = splitWordsCountEvenOddEvenOddEvenOddEvenOddEvenOddOdd % \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ wordList = new mutable.ListBuffer[String]()\n            val wordCount = 0\n\
    \            for (word <- words) {\n                if (word.isEmpty) Left(Nil)\n\
    \                else if (word.length == 1) wordCount += 1\n                else\
    \ {\n                    val lowerCaseLetters = word.filter(c => c.isLetter).length\n\
    \                    if (lowerCaseLetters % 2 == 0) wordCount += 1\n         \
    \           else wordList += word\n                }\n            }\n        \
    \    Right(wordCount)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsr4vf6p2.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsr4vf6p2.scala:23:53\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33melse\e\
    [0m \e[33mif\e[0m (word.length == \e[31m1\e[0m) wordCount += \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value += is not a member of Int - did you mean wordCount.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsr4vf6p2.scala:26:61 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    \e[33mif\e[0m (lowerCaseLetters %\
    \ \e[31m2\e[0m == \e[31m0\e[0m) wordCount += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                   ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value += is not a member of Int - did you mean wordCount.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val evenWords = words.filter(_.length%2 == 0)\n            val oddWords\
    \ = words.filter(_.length%2 != 0)\n            val evenWordsCount = evenWords.map(_.length).sum\n\
    \            val oddWordsCount = oddWords.map(_.length).sum\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountIn\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5c5bjv6_.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5c5bjv6_.scala:63:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5c5bjv6_.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountInt\e[0m = evenWordsCount.toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevenWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5c5bjv6_.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountInt\e[0m\
    \ = oddWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35moddWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5c5bjv6_.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountInt\e\
    [0m = evenWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevenWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5c5bjv6_.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountInt\e[0m\
    \ = oddWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val wordList = new mutable.ListBuffer[String]()\n            val wordCount\
    \ = 0\n            for (word <- words) {\n                if (word.matches(\"\
    [a-z]+\")) {\n                    wordCount += 1\n                    wordList\
    \ += word\n                }\n            }\n            if (wordCount % 2 ==\
    \ 0) Right(wordList.toList)\n            else Left(wordList.toList)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplozwarhs.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplozwarhs.scala:23:30\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                    wordCount\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value += is not a member of Int - did you mean wordCount.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val letterWords = words.filter(_.contains(\"a\"))\n        val\
    \ letterWordsCount = letterWords.map(_.length).sum\n        val commaWordsCount\
    \ = commaWords.map(_.length).sum\n        val letterWordsCountOdd = letterWords.map(_.length).filter(_\
    \ % 2 != 0).sum\n        val commaWordsCountOdd = commaWords.map(_.length).filter(_\
    \ % 2 != 0).sum\n        val letterWordsCountEven = letterWords.map(_.length).filter(_\
    \ % 2 == 0).sum\n        val commaWordsCountEven = commaWords.map(_.length).filter(_\
    \ % 2 == 0).sum\n        val letterWordsCountEvenOdd = letterWords.map(_.length).filter(_\
    \ % 2 == 0).filter(_ % 2 != 0).sum\n        val commaWordsCountEvenOdd = commaWords.map(_.length).filter(_\
    \ % 2 == 0).filter(_ % 2 != 0).sum\n        val letterWordsCountEvenEven = letterWords.map(_.length).filter(_\
    \ % 2 == 0).filter(_ % 2 == 0).sum\n        val commaWordsCountEvenEven = commaWords.map(_.length).filter(_\
    \ % 2 == 0).filter(_ % 2 == 0).sum\n        val letterWordsCountEvenOddEven =\
    \ letterWords.map(_.length).filter(_ % 2 == 0).filter(_ % 2 != 0).filter(_ % 2\
    \ == 0).sum\n        val commaWordsCountEvenOddEven = commaWords.map(_.length).filter(_\
    \ % 2 == 0).filter(_ % 2 != 0).filter(_ % 2 == 0).sum\n        val letterWordsCountOddEven\
    \ = letterWords.map(_.length).filter(_ % 2 != 0).filter(_ % 2 == 0).filter(_ %\
    \ 2 != 0).sum\n        val commaWordsCountOddEven = commaWords.map(_.length).filter(_\
    \ % 2 != 0).filter(_ % 2 == 0).filter(_ % 2 != 0).sum\n        val letterWordsCountOddOdd\
    \ = letterWords.map(_.length).filter(_ % 2 != 0).filter(_ % 2 != 0).filter(_ %\
    \ 2 != 0).sum\n        val commaWordsCountOddOdd = commaWords.map(_.length).filter(_\
    \ % 2 != 0).filter(_ % 2 != 0).filter(_ % 2 != 0).sum\n        val letterWordsCountOddEvenOdd\
    \ = letter\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_zsoho4d.scala:34:41 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mletterWordsCountOddEvenOdd\e\
    [0m = letter\n\e[31m\e[31m   |\e[0m                                         ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         Not found: letter\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_zsoho4d.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(word => word.length % 2 == 0)\n            val\
    \ odd = words.filter(word => word.length % 2 != 0)\n            val evenSize =\
    \ even.map(_.length).sum\n            val oddSize = odd.map(_.length).sum\n  \
    \          val evenLetters = even.map(_.toLowerCase).filter(_.isLetter).filter(_.isLower)\n\
    \            val oddLetters = odd.map(_.toLowerCase).filter(_.isLetter).filter(_.isLower)\n\
    \            val evenLettersCount = evenLetters.map(_.length).sum\n          \
    \  val oddLettersCount = oddLetters.map(_.length).sum\n            val evenLettersCountOdd\
    \ = evenLettersCount + oddLettersCount\n            val evenLettersCountEven =\
    \ evenLettersCount - evenLettersCountOdd\n            val oddLettersCountEven\
    \ = oddLettersCount - evenLettersCountOdd\n            val evenLettersCountOddEven\
    \ = evenLettersCountEven + oddLettersCountEven\n            val evenLettersCountEvenOdd\
    \ = evenLettersCountOdd + oddLettersCountEven\n            val evenLettersCountOddEvenOdd\
    \ = evenLettersCountEvenOdd + oddLettersCountOddEven\n            val evenLettersCountEvenOddOdd\
    \ = evenLettersCountOddEven + oddLettersCountOddOdd\n            val evenLettersCountEvenOddEvenOdd\
    \ = evenLettersCountEvenOddOdd + oddLettersCountEvenOdd\n            val evenLettersCountEvenOddEvenOddOdd\
    \ = evenLettersCountEvenOddEvenOdd + oddLettersCountEvenOddOdd\n            val\
    \ evenLettersCountEvenOddEvenOddEvenOdd = evenLettersCountEvenOddEvenOddOdd +\
    \ oddLettersCountEvenOddEvenOdd\n            val evenLettersCountEvenOddEvenOddEvenOddOdd\
    \ = evenLettersCountEvenOddEvenOddEvenOddOdd + oddLettersCountEvenOddEvenOddOdd\n\
    \            val evenLettersCountEvenOddEvenOddEvenOddEvenOdd = evenLettersCountEvenOddEvenOddEvenOddEvenOddOdd\
    \ + \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpj90ct6na.scala:38:112 --------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountEvenOddEvenOddEvenOddEvenOdd\e\
    [0m = evenLettersCountEvenOddEvenOddEvenOddEvenOddOdd + \n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                      expression expected but \e[31m'}'\e[0m found\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj90ct6na.scala:52:0 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj90ct6na.scala:23:63\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLetters\e[0m = even.map(_.toLowerCase).filter(_.isLetter).filter(_.isLower)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value isLetter\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj90ct6na.scala:23:82\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLetters\e[0m = even.map(_.toLowerCase).filter(_.isLetter).filter(_.isLower)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \            value isLower is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpj90ct6na.scala:24:61 ------------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = odd.map(_.toLowerCase).filter(_.isLetter).filter(_.isLower)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value isLetter\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj90ct6na.scala:24:80\
    \ ------------------------"
  stdout: ''
  timestamp: 1659800242
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Left(Nil)\n        else\
    \ if (words.size == 1) Right(words.head.toLong)\n        else Right(words.map(_.toLong).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.splitWords$$anonfun$1(tmpq93d0292.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.splitWords(tmpq93d0292.scala:18)\n\
    \tat Problem$.main(tmpq93d0292.scala:21)\n\tat Problem.main(tmpq93d0292.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ wordList = words.toList\n            val wordCount = wordList.map(_.length).sum\n\
    \            val oddOrder = wordList.map(_.toLowerCase - 'a').filter(x => x %\
    \ 2 == 1).length\n            Right(wordCount + oddOrder)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvprz6wt0.scala:21:54 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36moddOrder\e[0m = wordList.map(_.toLowerCase\
    \ - \e[31m'a'\e[0m).filter(\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m).length\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpvprz6wt0.scala:21:75 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36moddOrder\e[0m = wordList.map(_.toLowerCase\
    \ - \e[31m'a'\e[0m).filter(\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m).length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of Nothing,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\
    \e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\
    \e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659800242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else Left(words.size)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbtpq6mvg.scala:42:24\
    \ --------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33melse\e[0m Left(words.size)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \            Found:    Int\n\e[31m   |\e[0m                  Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(0) else {\n  \
    \          val wordCounts = words.map(word => word.split(\"\\\\W+\")).map(words\
    \ => words.map(word => word.toLowerCase).filter(word => word.length != 0).filter(word\
    \ => word.contains(\",\")).map(word => word.length).sum)\n            val wordCount:\
    \ Long = wordCounts.sum\n            val oddWordCount: Long = wordCounts.filter(x\
    \ => x % 2 != 0).sum\n            val evenWordCount: Long = wordCounts.filter(x\
    \ => x % 2 == 0).sum\n            val evenWordCountWithComma: Long = wordCounts.filter(x\
    \ => x % 2 == 0).filter(x => x % 2 != 0).sum\n            val evenWordCountWithCommaAndLowercase:\
    \ Long = wordCounts.filter(x => x % 2 == 0).filter(x => x % 2 != 0).filter(x =>\
    \ x % 26 == 0).sum\n            val evenWordCountWithCommaAndLowercaseAndUppercase:\
    \ Long = wordCounts.filter(x => x % 2 == 0).filter(x => x % 2 != 0).filter(x =>\
    \ x % 26 == 0).filter(x => x % 26 == 0).sum\n            val evenWordCountWithCommaAndLowercaseAndUppercaseAndNumber:\
    \ Long = wordCounts.filter(x => x % 2 == 0).filter(x => x % 2 != 0).filter(x =>\
    \ x % 26 == 0).filter(x => x % 26 == 0).filter(x => x % 26 == 0).filter(x => x\
    \ % 26 == 0).sum\n            val evenWordCountWithCommaAndLowercaseAndUppercaseAndNumberAndUppercase:\
    \ Long = wordCounts.filter(x => x % 2 == 0).filter(x => x % 2 != 0).filter(x =>\
    \ x % 26 == 0).filter(x => x % 26 == 0).filter(x => x % 26 == 0).filter(x => x\
    \ % 26 == 0).filter(x => x % 26 == 0).filter(x => x % 26 == 0).filter(x => x %\
    \ 26 == 0).filter(x => x % 26 == 0).filter(x => x % 26 == 0).filter(x => x % 26\
    \ == 0).filter(x => x % 26 == 0).filter(x => x % 26 == 0).filter(x => x % 26 ==\
    \ 0).filter(x => x % 26 == 0).filter(x => x % 26 == 0).filter(x => x % 26 == 0).filter(x\
    \ => x % 26 == 0).filter(x => x % 26 == 0).filter(x => x % 26 == 0).\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx_uuau__.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpx_uuau__.scala:39:0 ----------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_uuau__.scala:38:1 ---------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpx_uuau__.scala:27:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m27 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length == 0) Right(words.size)\n     \
    \   val result = words.map(word => word.split(\"[,]\")).flatten\n        if (result.length\
    \ == 0) Right(result.size)\n        val even = result.filter(_.length == 2).map(_.map(_.toLowerCase).toSet)\n\
    \        val odd = result.filter(_.length == 1).map(_.map(_.toLowerCase).toSet)\n\
    \        val evenCount = even.count(_ % 2 == 0)\n        val oddCount = odd.count(_\
    \ % 2 == 1)\n        if (evenCount == 0) Right(evenCount)\n        if (oddCount\
    \ == 0) Right(oddCount)\n        if (evenCount == oddCount) Right(evenCount)\n\
    \        Left(result)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaqoi9ige.scala:19:60 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = result.filter(_.length\
    \ == \e[31m2\e[0m).map(_.map(_.toLowerCase).toSet)\n\e[31m\e[31m   |\e[0m    \
    \                                                      ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- Error: /tmp/tmpaqoi9ige.scala:19:79 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = result.filter(_.length\
    \ == \e[31m2\e[0m).map(_.map(_.toLowerCase).toSet)\n\e[31m\e[31m   |\e[0m    \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpaqoi9ige.scala:20:59 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36modd\e[0m = result.filter(_.length == \e[31m1\e\
    [0m).map(_.map(_.toLowerCase).toSet)\n\e[31m\e[31m   |\e[0m                  \
    \                                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- Error: /tmp/tmpaqoi9ige.scala:20:78 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = result.filter(_.length\
    \ == \e[31m1\e[0m).map(_.map(_.toLowerCase).toSet)\n\e[31m\e[31m   |\e[0m    \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpaqoi9ige.scala:26:13 --------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \        Left(result)\n\e[31m\e[31m   |\e[0m             ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m             Found:    (result : Array[String])\n\e[31m   "
  stdout: ''
  timestamp: 1659800242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else if (words.length\
    \ == 26) Right(words.length)\n        else if (words.length == 27) Right(words.length)\n\
    \        else if (words.length == 28) Right(words.length)\n        else if (words.length\
    \ == 29) Right(words.length)\n        else if (words.length == 30) Right(words.length)\n\
    \        else if (words.length == 31) Right(words.length)\n        else if (words.length\
    \ == 32) Right(words.length)\n        else if (words.length == 33) Right(words.length)\n\
    \        else if (words.length == 34) Right(words.length)\n        else if (words.length\
    \ == 35) Right(words.length)\n        else if (words.length == 36) Right(words.length)\n\
    \        else if (words.length == 37) Right(words.length)\n        else if (words.length\
    \ == 38) Right(words.length)\n        else if (words.length == 39) Right(words.length)\n\
    \        else if (words.length == 40) Right(words.length)\n        else if (words.length\
    \ == 41) Right(words.length)\n        else if (words.length == 42) Right(words.length)\n\
    \        else if (words.length == 43) Right(word\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7snxi0xj.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7snxi0xj.scala:59:43\
    \ ------------------------\e[0m\e[0m\n\e[31m59 |\e[0m        \e[33melse\e[0m \e\
    [33mif\e[0m (words.length == \e[31m43\e[0m) Right(word\n\e[31m\e[31m   |\e[0m\
    \                                           ^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                    Not found: word\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ even = words.filter(word => word.forall(c => c.isLetter) && c.toLower.toInt\
    \ % 2 == 0)\n            val odd = words.filter(word => word.forall(c => c.isLetter)\
    \ && c.toLower.toInt % 2 != 0)\n            val evenCount = even.filter(word =>\
    \ word.forall(c => c.isLetter)).size\n            val oddCount = odd.filter(word\
    \ => word.forall(c => c.isLetter)).size\n            val count = evenCount + oddCount\n\
    \            Right(count)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptn4smni6.scala:19:76 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower.toInt %\
    \ \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                                            Not found: c\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptn4smni6.scala:20:75\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36modd\e[0m = words.filter(\e[36mword\e[0m => word.forall(\e[36mc\e[0m =>\
    \ c.isLetter) && c.toLower.toInt % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \        ^\e[0m\n\e[31m   |\e[0m                                             \
    \               Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0)\n            Left(List[String]())\n\
    \        else if (words.length == 1)\n            Right(words.length)\n      \
    \  else {\n            val wordList = words.toList\n            val wordCount\
    \ = wordList.map(_.length).sum\n            val oddOrderWords = wordList.filter(word\
    \ => word.count(_ == 'a') % 2 == 1)\n            val evenOrderWords = wordList.filter(word\
    \ => word.count(_ == 'a') % 2 == 0)\n            val oddOrderWordCount = oddOrderWords.map(_.length).sum\n\
    \            val evenOrderWordCount = evenOrderWords.map(_.length).sum\n     \
    \       val oddOrderWordCount = oddOrderWords.map(_.length).sum\n            val\
    \ evenOrderWordCount = evenOrderWords.map(_.length).sum\n            val oddOrderWordCount\
    \ = oddOrderWords.map(_.length).sum\n            val evenOrderWordCount = evenOrderWords.map(_.length).sum\n\
    \            val oddOrderWordCount = oddOrderWords.map(_.length).sum\n       \
    \     val evenOrderWordCount = evenOrderWords.map(_.length).sum\n            val\
    \ oddOrderWordCount = oddOrderWords.map(_.length).sum\n            val evenOrderWordCount\
    \ = evenOrderWords.map(_.length).sum\n            val oddOrderWordCount = oddOrderWords.map(_.length).sum\n\
    \            val evenOrderWordCount = evenOrderWords.map(_.length).sum\n     \
    \       val oddOrderWordCount = oddOrderWords.map(_.length).sum\n            val\
    \ evenOrderWordCount = evenOrderWords.map(_.length).sum\n            val oddOrderWordCount\
    \ = oddOrderWords.map(_.length).sum\n            val evenOrderWordCount = evenOrderWords.map(_.length).sum\n\
    \            val oddOrderWordCount = oddOrderWords.map(_.length).sum\n       \
    \     val evenOrderWordCount = evenOrderWords.map(_.length).sum\n            val\
    \ oddOrderWordCount = oddOrderWords.map(_.length).sum\n            val evenOrderWordCount\
    \ = evenOrderWords.map(_.length).sum\n            val oddOrderWordCount = oddOrderWords.map(_.length).sum\n\
    \            val evenOrderWordCount = evenOrderWords.map(_.length).sum\n     \
    \       val oddOrderWordCount = oddOrderWords.map(_.length).sum\n            val\
    \ evenOrderWordCount = evenOrderWords.map(_.length).sum\n            val oddOrderWordCount\
    \ = oddOrderWords.map(_.length).sum\n            val evenOrderWordCount = evenOrderWords.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpr_ys476z.scala:50:56 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m            \e[33mval\e[0m \e[36mevenOrderWordCount\e\
    [0m = evenOrderWords.map(\n\e[31m\e[31m   |\e[0m                             \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \             expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpr_ys476z.scala:64:0 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr_ys476z.scala:27:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e\
    [0m \e[36moddOrderWordCount\e[0m = oddOrderWords.map(_.length).sum\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddOrderWordCount is already defined as \e[33mvalue\e[0m \e\
    [35moddOrderWordCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr_ys476z.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mevenOrderWordCount\e\
    [0m = evenOrderWords.map(_.length).sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderWordCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenOrderWordCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr_ys476z.scala:29:16 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36moddOrderWordCount\e\
    [0m = oddOrderWords.map(_.length).sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddOrderWordCount is already defined as \e[33mvalue\e[0m \e\
    [35moddOrderWordCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNo"
  stdout: ''
  timestamp: 1659800243
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val lowerCaseWords = words.map(_.toLowerCase)\n            val evenOrderWords\
    \ = lowerCaseWords.filter(word => word.count(_ == 'a') % 2 == 0)\n           \
    \ val oddOrderWords = lowerCaseWords.filter(word => word.count(_ == 'a') % 2 !=\
    \ 0)\n            val evenOrderWordsCount = evenOrderWords.size\n            val\
    \ oddOrderWordsCount = oddOrderWords.size\n            Right(evenOrderWordsCount\
    \ + oddOrderWordsCount)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfcgks80o.scala:28)\n\tat Problem.main(tmpfcgks80o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.isEmpty) {\n            Left(Nil)\n  \
    \      } else {\n            val splitWords = words.map(_.toLowerCase)\n     \
    \       val splitWordsCount = splitWords.filter(_.nonEmpty).size\n           \
    \ val oddLettersCount = splitWords.filter(_.toLowerCase contains \"a\").filter(_.toLowerCase\
    \ contains \"b\").filter(_.toLowerCase contains \"c\").filter(_.toLowerCase contains\
    \ \"d\").filter(_.toLowerCase contains \"e\").filter(_.toLowerCase contains \"\
    f\").filter(_.toLowerCase contains \"g\").filter(_.toLowerCase contains \"h\"\
    ).filter(_.toLowerCase contains \"i\").filter(_.toLowerCase contains \"j\").filter(_.toLowerCase\
    \ contains \"k\").filter(_.toLowerCase contains \"l\").filter(_.toLowerCase contains\
    \ \"m\").filter(_.toLowerCase contains \"n\").filter(_.toLowerCase contains \"\
    o\").filter(_.toLowerCase contains \"p\").filter(_.toLowerCase contains \"q\"\
    ).filter(_.toLowerCase contains \"r\").filter(_.toLowerCase contains \"s\").filter(_.toLowerCase\
    \ contains \"t\").filter(_.toLowerCase contains \"u\").filter(_.toLowerCase contains\
    \ \"v\").filter(_.toLowerCase contains \"w\").filter(_.toLowerCase contains \"\
    x\").filter(_.toLowerCase contains \"y\").filter(_.toLowerCase contains \"z\"\
    ).filter(_.toLowerCase contains \"A\").filter(_.toLowerCase contains \"B\").filter(_.toLowerCase\
    \ contains \"C\").filter(_.toLowerCase contains \"D\").filter(_.toLowerCase contains\
    \ \"E\").filter(_.toLowerCase contains \"F\").filter(_.toLowerCase contains \"\
    G\").filter(_.toLowerCase contains \"H\").filter(_.toLowerCase contains \"I\"\
    ).filter(_.toLowerCase contains \"J\").filter(_.toLowerCase contains \"K\").filter(_.toLowerCase\
    \ contains \"L\").filter(_.toLowerCase contains \"M\").filter(_.toLowerCase contains\
    \ \"N\").filter(_.toLowerCase contains \"O\").filter(_.toLowerCase contains \"\
    P\").filter(_.toLowerCase contains \"Q\").filter(_.toLowerCase contains \"R\"\
    ).filter(_.toLowerCase contains \"S\").filter(_.toLowerCase contains \"T\").filter(_.toLowerCase\
    \ contains \"U\").filter(_.toLowerCase contains \"V\").filter(_.toLowerCase contains\
    \ \"W\").filter(_.toLowerCase contains \"X\").filter(_.toLower\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp17ln45h9.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp17ln45h9.scala:35:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m35 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp17ln45h9.scala:21:1804 ----------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m = splitWords.filter(_.toLowerCase\
    \ contains \e[31m\"a\"\e[0m).filter(_.toLowerCase contains \e[31m\"b\"\e[0m).filter(_.toLowerCase\
    \ contains \e[31m\"c\"\e[0m).filter(_.toLowerCase contains \e[31m\"d\"\e[0m).filter(_.toLowerCase\
    \ contains \e[31m\"e\"\e[0m).filter(_.toLowerCase contains \e[31m\"f\"\e[0m).filter(_.toLowerCase\
    \ contains \e[31m\"g\"\e[0m).filter(_.toLowerCase contains \e[31m\"h\"\e[0m).filter(_.toLowerCase\
    \ contains \e[31m\"i\"\e[0m).filter(_.toLowerCase contains \e[31m\"j\"\e[0m).filter(_.toLowerCase\
    \ contains \e[31m\"k\"\e[0m).filter(_.toLowerCase contains \e[31m\"l\"\e[0m).filter(_.toLowerCase\
    \ contains \e[31m\"m\"\e[0m).filter(_.toLowerCase contains \e[31m\"n\"\e[0m).filter(_.toLowerCase\
    \ contains \e[31m\"o\"\e[0m).filter(_.toLowerCase contains \e[31m\"p\"\e[0m).filter(_.toLowerCase\
    \ contains \e[31m\"q\"\e[0m).filter(_.toLowerCase contains \e[31m\"r\"\e[0m).filter(_.toLowerCase\
    \ contains \e[31m\"s\"\e[0m).filter(_.toLowerCase contains \e[31m\"t\"\e[0m).filter(_.toLowerCase\
    \ contains \e[31m\"u\"\e[0m).filter(_.toLowerCase contains \e[31m\"v\"\e[0m).filter(_.toLowerCase\
    \ contains \e[31m\"w\"\e[0m).filter(_.toLowerCase contains \e[31m\"x\"\e[0m).filter(_.toLowerCase\
    \ contains \e[31m\"y\"\e[0m).filter(_.toLowerCase contains \e[31m\"z\"\e[0m).filter(_.toLowerCase\
    \ contains \e[31m\"A\"\e[0m).filter(_.toLowerCase contains \e[31m\"B\"\e[0m).filter(_.toLowerCase\
    \ contains \e[31m\"C\"\e[0m).filter(_.toLowerCase contains \e[31m\"D\"\e[0m).filter(_.toLowerCase\
    \ contains \e[31m\"E\"\e[0m).filter(_.toLowerCase contains \e[31m\"F\"\e[0m).filter(_.toLowerCase\
    \ contains \e[31m\"G\"\e[0m).filter(_.toLowerCase contains \e[31m\"H\"\e[0m).filter(_"
  stdout: ''
  timestamp: 1659800252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ letters = words.map(_.toLowerCase)\n            val odd = letters.filter(letter\
    \ => letter % 2 != 0).length\n            Right(odd)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxkerjs1z.scala:20:54 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = letters.filter(\e\
    [36mletter\e[0m => letter % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e[31m\
    \   |\e[0m                                               ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659800237
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ even = words.filter(word => word.forall(c => c.isLetter) && c.toLower.toInt\
    \ % 2 == 0)\n            val odd = words.filter(word => word.forall(c => c.isLetter)\
    \ && c.toLower.toInt % 2 != 0)\n            val evenCount = even.filter(word =>\
    \ word.forall(c => c.isLetter)).size\n            val oddCount = odd.filter(word\
    \ => word.forall(c => c.isLetter)).size\n            Right(evenCount + oddCount)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmnkgp59.scala:19:76 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower.toInt %\
    \ \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                                            Not found: c\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmnkgp59.scala:20:75\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36modd\e[0m = words.filter(\e[36mword\e[0m => word.forall(\e[36mc\e[0m =>\
    \ c.isLetter) && c.toLower.toInt % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \        ^\e[0m\n\e[31m   |\e[0m                                             \
    \               Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ lowerCaseLetters = words.filter(_.forall(_.isLower))\n            val oddOrderLetters\
    \ = lowerCaseLetters.filter(letter => letter % 2 != 0)\n            Right(oddOrderLetters.length)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprtl8nw_p.scala:20:75 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36moddOrderLetters\e[0m\
    \ = lowerCaseLetters.filter(\e[36mletter\e[0m => letter % \e[31m2\e[0m != \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659800251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val noOfWords = words.length\n        val noOfCommas\
    \ = txt.split(\",\").length - 1\n        val noOfLetters = txt.length.toString.toInt\n\
    \        val noOfLettersOdd = noOfLetters % 2\n        val noOfLettersEven = noOfLetters\
    \ - noOfLettersOdd\n        val noOfLettersEvenOdd = noOfLettersEven % 2\n   \
    \     val noOfLettersEvenEven = noOfLettersEven - noOfLettersEvenOdd\n       \
    \ val noOfLettersOddOdd = noOfLettersOdd % 2\n        val noOfLettersOddEven =\
    \ noOfLettersOdd - noOfLettersOddOdd\n        val noOfLettersOddEvenOdd = noOfLettersOddEven\
    \ % 2\n        val noOfLettersOddEvenEven = noOfLettersOddEven - noOfLettersOddEvenOdd\n\
    \        val noOfLettersEvenOddOdd = noOfLettersEvenOdd % 2\n        val noOfLettersEvenOddEven\
    \ = noOfLettersEvenOdd - noOfLettersEvenOddOdd\n        val noOfLettersEvenEvenOdd\
    \ = noOfLettersEvenEvenOdd % 2\n        val noOfLettersEvenEvenEven = noOfLettersEvenEvenOdd\
    \ - noOfLettersEvenEvenOdd\n        val noOfLettersOddEvenOdd = noOfLettersOddEvenOdd\
    \ % 2\n        val noOfLettersOddEvenEven = noOfLettersOddEvenOdd - noOfLettersOddEvenEven\n\
    \        val noOfLettersOddEvenEvenOdd = noOfLettersOddEvenEvenOdd % 2\n     \
    \   val noOfLettersOddEvenEvenEven = noOfLettersOddEvenEvenOdd - noOfLettersOddEvenEvenEven\n\
    \        val noOfLettersEvenOddEvenOdd = noOfLettersEvenOddEvenOdd % 2\n     \
    \   val noOfLettersEvenOddEvenEven = noOfLettersEvenOddEvenOdd - noOfLettersEvenOddEvenEven\n\
    \        val noOfLettersEvenEvenOddEvenOdd = noOfLettersEvenEvenO\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmm2s6_dn.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnoOfLettersOddEvenOdd\e\
    [0m = noOfLettersOddEvenOdd % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnoOfLettersOddEvenOdd is already defined as \e[33mvalue\e\
    [0m \e[35mnoOfLettersOddEvenOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmm2s6_dn.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnoOfLettersOddEvenEven\e\
    [0m = noOfLettersOddEvenOdd - noOfLettersOddEvenEven\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnoOfLettersOddEvenEven is already defined as \e[33mvalue\e\
    [0m \e[35mnoOfLettersOddEvenEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmm2s6_dn.scala:29:37 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnoOfLettersEvenEvenOdd\e\
    [0m = noOfLettersEvenEvenOdd % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m           \
    \                          ^\e[0m\n\e[31m   |\e[0m                       Recursive\
    \ \e[33mvalue\e[0m \e[35mnoOfLettersEvenEvenOdd\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmm2s6_dn.scala:33:40 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mnoOfLettersOddEvenEvenOdd\e\
    [0m = noOfLettersOddEvenEvenOdd % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        \
    \                                ^\e[0m\n\e[31m   |\e[0m                    Recursive\
    \ \e[33mvalue\e[0m \e[35mnoOfLettersOddEvenEvenOdd\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmm2s6_dn.scala:35:40 ---------------"
  stdout: ''
  timestamp: 1659800250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val even = words.filter(_.length == words.length)\n            val odd\
    \ = words.filter(_.length % 2 == 0)\n            val evenSize = even.map(_.length).sum\n\
    \            val oddSize = odd.map(_.length).sum\n            val evenOrder =\
    \ even.map(_.toLowerCase - ord('a')).sum\n            val oddOrder = odd.map(_.toLowerCase\
    \ - ord('a')).sum\n            val evenOrderOdd = evenOrder + oddOrder\n     \
    \       val evenOrderEven = evenOrder - evenOrderOdd\n            val oddOrderEven\
    \ = oddOrder - evenOrderOdd\n            val evenOrderEvenOdd = evenOrderEven\
    \ + oddOrderEven\n            val evenOrderEvenOddSize = evenOrderEvenOdd + evenOrderOddSize\n\
    \            val evenOrderEvenOddSizeSize = evenOrderEvenOddSize + oddOrderEvenSize\n\
    \            val evenOrderEvenOddSizeSizeSize = evenOrderEvenOddSizeSize + evenOrderOddSizeSize\n\
    \            val evenOrderEvenOddSizeSizeSizeSize = evenOrderEvenOddSizeSizeSize\
    \ + oddOrderEvenSizeSize\n            val evenOrderEvenOddSizeSizeSizeSize = evenOrderEvenOddSizeSizeSize\
    \ + evenOrderOddSizeSizeSize\n            val evenOrderEvenOddSizeSizeSizeSizeSize\
    \ = evenOrderEvenOddSizeSizeSizeSize + oddOrderEvenSizeSizeSizeSize\n        \
    \    val evenOrderEvenOddSizeSizeSizeSizeSize = evenOrderEvenOddSizeSizeSizeSize\
    \ + evenOrderOddSizeSizeSizeSize\n            val evenOrderEvenOddSizeSizeSizeSizeSize\
    \ = evenOrderEvenOddSizeSizeSizeSize\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdj_1u1jx.scala:33:16 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e[36mevenOrderEvenOddSizeSizeSizeSize\e\
    [0m = evenOrderEvenOddSizeSizeSize + evenOrderOddSizeSizeSize\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderEvenOddSizeSizeSizeSize is already defined as \e\
    [33mvalue\e[0m \e[35mevenOrderEvenOddSizeSizeSizeSize\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdj_1u1jx.scala:35:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m            \e[33mval\e\
    [0m \e[36mevenOrderEvenOddSizeSizeSizeSizeSize\e[0m = evenOrderEvenOddSizeSizeSizeSize\
    \ + evenOrderOddSizeSizeSizeSize\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderEvenOddSizeSizeSizeSizeSize is already defined as\
    \ \e[33mvalue\e[0m \e[35mevenOrderEvenOddSizeSizeSizeSizeSize\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdj_1u1jx.scala:36:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m            \e[33mval\e\
    [0m \e[36mevenOrderEvenOddSizeSizeSizeSizeSize\e[0m = evenOrderEvenOddSizeSizeSizeSize\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderEvenOddSizeSizeSizeSizeSize is already defined as\
    \ \e[33mvalue\e[0m \e[35mevenOrderEvenOddSizeSizeSizeSizeSize\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdj_1u1jx.scala:23:51\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenOrder\e[0m = even.map(_.toLowerCase - ord(\e[31m'a'\e[0m)).sum\n\e\
    [31m\e[31m   "
  stdout: ''
  timestamp: 1659800255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.isEmpty) Left(List.empty)\n\
    \        else if (words.size == 1) Right(words.head.toLong)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2kimxdq6.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").map(_.toLowerCase).toList\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val commaWordsCount = commaWords.count(_.contains(\",\"))\n   \
    \     val commaWordsCountOdd = commaWordsCount % 2 != 0\n        val wordCountOdd\
    \ = words.count(_.toLowerCase == words.last.toLowerCase)\n        val wordCountEven\
    \ = words.count(_.toLowerCase == words.last.toLowerCase)\n        val wordCountEvenOdd\
    \ = words.count(_.toLowerCase == words.last.toLowerCase)\n        val wordCountEvenOddCount\
    \ = words.count(_.toLowerCase == words.last.toLowerCase)\n        val wordCountEvenOddCountOdd\
    \ = words.count(_.toLowerCase == words.last.toLowerCase)\n        val wordCountEvenOddCountEven\
    \ = words.count(_.toLowerCase == words.last.toLowerCase)\n        val wordCountEvenOddCountEvenOdd\
    \ = words.count(_.toLowerCase == words.last.toLowerCase)\n        val wordCountEvenOddCountEvenEven\
    \ = words.count(_.toLowerCase == words.last.toLowerCase)\n        val wordCountEvenOddCountEvenEvenOdd\
    \ = words.count(_.toLowerCase == words.last.toLowerCase)\n        val wordCountEvenOddCountEvenEvenEven\
    \ = words.count(_.toLowerCase == words.last.toLowerCase)\n        val wordCountEvenOddCountEvenEvenEvenOdd\
    \ = words.count(_.toLowerCase == words.last.toLowerCase)\n        val wordCountEvenOddCountEvenEvenEvenEven\
    \ = words.count(_.toLowerCase == words.last.toLowerCase)\n        val wordCountEvenOddCountEvenEvenEvenEvenOdd\
    \ = words.count(_.toLowerCase == words.last.toLowerCase)\n        val wordCountEvenOddCountEvenEvenEvenEvenEven\
    \ = words.count(_.toLowerCase == words.last.toLowerCase)\n        val wordCountEvenOddCountEvenEvenEvenEvenEvenOdd\
    \ = words.count(_.toLowerCase == words.last.toLowerCase)\n        val wordCountEvenOddCountEvenEvenEvenEvenEvenEven\
    \ = words.count(_.toLowerCase == words.last.toLowerCase)\n        val wordCountEvenOddCountEvenEvenEvenEvenEvenEvenOdd\
    \ = words.count(_.toLowerCase == words.last.toLowerCase)\n        val wordCountEvenOddCountEvenEvenEvenEvenEvenEvenEven\
    \ = words.count(_.toLowerCase == words.last.toLowerCase)\n        val wordCountEvenOddCountEvenEvenEvenEvenEvenEvenEvenOd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpualq5w16.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpualq5w16.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ evenWords = words.filter(word => word.forall(_.isLetter) && word.forall(_.isLower))\n\
    \            val oddWords = words.filter(word => word.forall(_.isLetter) && word.forall(_.isLower)\
    \ && word.forall(_.isDigit))\n            val evenLetters = evenWords.filter(word\
    \ => word.forall(_.isLetter)).length\n            val oddLetters = oddWords.filter(word\
    \ => word.forall(_.isLetter)).length\n            val evenLettersCount = evenLetters.toLong\n\
    \            val oddLettersCount = oddLetters.toLong\n            val evenLettersCountOdd\
    \ = evenLettersCount - oddLettersCount\n            val oddLettersCountOdd = oddLettersCount\
    \ - evenLettersCount\n            val evenLettersCountEven = evenLettersCount\
    \ - evenLettersCountOdd\n            val oddLettersCountEven = oddLettersCount\
    \ - oddLettersCountOdd\n            val evenLettersCountOddEven = evenLettersCountOdd\
    \ - evenLettersCountEven\n            val oddLettersCountOddEven = oddLettersCountOdd\
    \ - oddLettersCountEven\n            val evenLettersCountOddEvenOdd = evenLettersCountOddEven\
    \ - oddLettersCountOddEven\n            val oddLettersCountOddEvenOdd = oddLettersCountOddEven\
    \ - evenLettersCountOddEven\n            val evenLettersCountOddEvenOddEven =\
    \ evenLettersCountOddEvenOdd - oddLettersCountOddEvenOdd\n            val oddLettersCountOddEvenOddEven\
    \ = oddLettersCountOddEvenOdd - evenLettersCountOddEvenOdd\n            val evenLettersCountOddEvenOddEvenOdd\
    \ = evenLettersCountOddEvenOddEven - oddLettersCountOddEvenOddEven\n         \
    \   val oddLettersCountOddEvenOddEvenOdd = oddLettersCountOddEvenOddEven - evenLettersCountOddEvenOddEven\n\
    \            val evenLettersCountOddEvenOddEvenOddEven = evenLettersCountOddEvenOddEvenOddEven\
    \ - oddLettersCountOddEvenOdd\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd5hetcyo.scala:51:0 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpd5hetcyo.scala:37:56\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCountOddEvenOddEvenOddEven\e[0m = evenLettersCountOddEvenOddEvenOddEven\
    \ - oddLettersCountOddEvenOdd\n\e[31m\e[31m   |\e[0m                         \
    \                               ^\e[0m\n\e[31m   |\e[0m        Recursive \e[33mvalue\e\
    [0m \e[35mevenLettersCountOddEvenOddEvenOddEven\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd5hetcyo.scala:50:1 ---------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpd5hetcyo.scala:39:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m39 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800253
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val wordCounts = words.map(_.toLowerCase).map(_.length).filter(x\
    \ => x % 2 == 1).map(x => x + 1)\n        val wordCountEither = Either.fromRight[List[String],\
    \ Long](wordCounts)\n        val wordCountEither2 = Either.fromRight[List[String],\
    \ Long](wordCounts.map(x => x + 1))\n        val wordCountEither3 = Either.fromRight[List[String],\
    \ Long](wordCounts.filter(x => x % 2 == 1).map(x => x + 1))\n        val wordCountEither4\
    \ = Either.fromRight[List[String], Long](wordCounts.filter(x => x % 2 == 1).map(x\
    \ => x + 1))\n        val wordCountEither5 = Either.fromRight[List[String], Long](wordCounts.filter(x\
    \ => x % 2 == 1).map(x => x + 1))\n        val wordCountEither6 = Either.fromRight[List[String],\
    \ Long](wordCounts.filter(x => x % 2 == 1).map(x => x + 1))\n        val wordCountEither7\
    \ = Either.fromRight[List[String], Long](wordCounts.filter(x => x % 2 == 1).map(x\
    \ => x + 1))\n        val wordCountEither8 = Either.fromRight[List[String], Long](wordCounts.filter(x\
    \ => x % 2 == 1).map(x => x + 1))\n        val wordCountEither9 = Either.fromRight[List[String],\
    \ Long](wordCounts.filter(x => x % 2 == 1).map(x => x + 1))\n        val wordCountEither10\
    \ = Either.fromRight[List[String], Long](wordCounts.filter(x => x % 2 == 1).map(x\
    \ => x + 1))\n        val wordCountEither11 = Either.fromRight[List[String], Long](wordCounts.filter(x\
    \ => x % 2 == 1).map(x => x + 1))\n        val wordCountEither12 = Either.fromRight[List[String],\
    \ Long](wordCounts.filter(x => x % 2 == 1).map(x => x + 1))\n        val wordCountEither13\
    \ = Either.fromRight[List[String], Long](wordCounts.filter(x => x % 2 == 1).map(x\
    \ => x + 1))\n        val wordCountEither14 = Either.fromRight[List[String], Long](wordCounts.filter(x\
    \ => x % 2 == 1).map(x => x + 1))\n        val wordCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy9mdow_6.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy9mdow_6.scala:17:37\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mwordCountEither\e[0m = Either.fromRight[\e[35mList\e[0m[\e[35mString\e[0m],\
    \ \e[35mLong\e[0m](wordCounts)\n\e[31m\e[31m   |\e[0m                        \
    \      ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value fromRight is not\
    \ a member of object scala.util.Either\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpy9mdow_6.scala:18:38 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mwordCountEither2\e[0m = Either.fromRight[\e[35mList\e\
    [0m[\e[35mString\e[0m], \e[35mLong\e[0m](wordCounts.map(\e[36mx\e[0m => x + \e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value fromRight is not a member of object scala.util.Either\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy9mdow_6.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwordCountEither3\e[0m =\
    \ Either.fromRight[\e[35mList\e[0m[\e[35mString\e[0m], \e[35mLong\e[0m](wordCounts.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m).map(\e[36mx\e[0m => x + \e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value fromRight is not a member of object scala.util.Either\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy9mdow_6.scala:20:38 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mwordCountEither4\e[0m =\
    \ Either.fromRight[\e[35mList\e[0m[\e[35mString\e[0m], \e[35mLong\e[0m](wordCounts.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m).map(\e[36mx\e[0m => x + \e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value fromRight is not a member of object scala.util.Either\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy9mdow_6.scala:21:38 -----------------"
  stdout: ''
  timestamp: 1659800255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val letters = words.map(_.toLowerCase)\n            val evenLetters =\
    \ letters.filter(letter => letter % 2 == 0)\n            val oddLetters = letters.filter(letter\
    \ => letter % 2 != 0)\n            val evenLettersCount = evenLetters.count(letter\
    \ => letter >= 'a' && letter <= 'z')\n            val oddLettersCount = oddLetters.count(letter\
    \ => letter >= 'a' && letter <= 'z')\n            val evenLettersCountString =\
    \ evenLettersCount.toString\n            val oddLettersCountString = oddLettersCount.toString\n\
    \            Right(List(evenLettersCountString, oddLettersCountString))\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpszjufqb9.scala:20:62 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = letters.filter(\e\
    [36mletter\e[0m => letter % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                       ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpszjufqb9.scala:21:61 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = letters.filter(\e\
    [36mletter\e[0m => letter % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                      ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpszjufqb9.scala:22:73 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = evenLetters.count(\e[36mletter\e[0m => letter >= \e[31m'a'\e[0m && letter\
    \ <= \e[31m'z'\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                                       ^^^\e[0m\n\e[31m   |\e[0m            \
    \                                      Found:    (\e[31m'a'\e[0m : Char)\n\e[31m\
    \   |\e[0m                                                  Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpszjufqb9.scala:22:90\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e\
    [36mevenLettersCount\e[0m = evenLetters.count(\e[36mletter\e[0m => letter >= \e\
    [31m'a'\e[0m && lett"
  stdout: ''
  timestamp: 1659800254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ even = words.filter(_.length%2 == 0)\n            val odd = words.filter(_.length%2\
    \ != 0)\n            val evenOrder = even.map(_.toLowerCase - 'a')\n         \
    \   val oddOrder = odd.map(_.toLowerCase - 'a')\n            val evenOrderCount\
    \ = evenOrder.count(_%2 == 0)\n            val oddOrderCount = oddOrder.count(_%2\
    \ == 0)\n            val evenOrderCountStr = evenOrderCount.toString\n       \
    \     val oddOrderCountStr = oddOrderCount.toString\n            val evenOrderCountLong\
    \ = evenOrderCount.toLong\n            val oddOrderCountLong = oddOrderCount.toLong\n\
    \            val evenOrderCountLongStr = evenOrderCountLong.toString\n       \
    \     val oddOrderCountLongStr = oddOrderCountLong.toString\n            val evenOrderCountLongLong\
    \ = evenOrderCountLong.toLong\n            val oddOrderCountLongLong = oddOrderCountLong.toLong\n\
    \            val evenOrderCountLongLongStr = evenOrderCountLongLong.toString\n\
    \            val oddOrderCountLongLongStr = oddOrderCountLongLong.toString\n \
    \           val evenOrderCountLongLongLong = evenOrderCountLongLong.toLong\n \
    \           val oddOrderCountLongLongLong = oddOrderCountLongLong.toLong\n   \
    \         val evenOrderCountLongLongLongStr = evenOrderCountLongLongLong.toString\n\
    \            val oddOrderCountLongLongLongStr = oddOrderCountLongLongLong.toString\n\
    \            val evenOrderCountLongLongLongLong = evenOrderCountLongLongLong.toLong\n\
    \            val oddOrderCountLongLongLongLong = oddOrderCountLongLongLong.toLong\n\
    \            val evenOrderCountLongLongLongLongStr = evenOrderCountLongLongLongLongStr.toString\n\
    \            val oddOrderCountLongLongLongLongStr = oddOrderCountLongLongLongLongStr.toString\n\
    \            val evenOrderCountLongLongLongLongLong = evenOrderCountLongLongLongLongLong.toLong\n\
    \            val oddOrderCountLongLongLongLongLong = oddOrderCountLongLongLongLongLong.toLong\n\
    \            val evenOrderCountLongLongLongLongLongStr = evenOrderCountLongLongLongLongLongLongStr.toString\n\
    \            val oddOrderCountLongLongLongLongLongStr = oddOrderCountLongLongLongLongLongLongStr.toString\n\
    \            val evenOrderCountLongLongLongLongLongLong = evenOrderCountLongLongLongLongLongLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz1hpr2m8.scala:61:0 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz1hpr2m8.scala:21:51\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenOrder\e[0m = even.map(_.toLowerCase - \e[31m'a'\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue - is not a member of String, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpz1hpr2m8.scala:21:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(_.toLowerCase\
    \ - \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \           No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m    \
    \                                      where:    B is a type variable\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpz1hpr2m8.scala:22:49 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddOrder\e[0m = odd.map(_.toLowerCase\
    \ - \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- Error:\
    \ /tm"
  stdout: ''
  timestamp: 1659800256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ wordList = words.toList\n            val evenWords = wordList.filter(word =>\
    \ word.forall(_.isLetter) && word.forall(_.isLower))\n            val oddWords\
    \ = wordList.filter(word => word.forall(_.isLetter) && word.forall(_.isLower)\
    \ && !word.forall(_.isUpper))\n            val evenLetters = evenWords.filter(word\
    \ => word.forall(_.isLetter)).length\n            val oddLetters = oddWords.filter(word\
    \ => word.forall(_.isLetter)).length\n            val evenOrder = evenLetters\
    \ / (evenLetters + oddLetters)\n            val oddOrder = oddLetters / (evenLetters\
    \ + oddLetters)\n            val result = if (evenOrder > oddOrder) evenOrder\
    \ else oddOrder\n            Right(result)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.splitWords(tmp70pk4i98.scala:24)\n\
    \tat Problem$.main(tmp70pk4i98.scala:31)\n\tat Problem.main(tmp70pk4i98.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val evens = words.filter(_.toString.length == words.length)\n      \
    \      val odds = words.filter(_.toString.length != words.length)\n          \
    \  val evensCount = evens.filter(_.toString.toLowerCase == \"a\".toLowerCase ||\
    \ _.toString.toLowerCase == \"b\".toLowerCase || _.toString.toLowerCase == \"\
    c\".toLowerCase || _.toString.toLowerCase == \"d\".toLowerCase || _.toString.toLowerCase\
    \ == \"e\".toLowerCase || _.toString.toLowerCase == \"f\".toLowerCase || _.toString.toLowerCase\
    \ == \"g\".toLowerCase || _.toString.toLowerCase == \"h\".toLowerCase || _.toString.toLowerCase\
    \ == \"i\".toLowerCase || _.toString.toLowerCase == \"j\".toLowerCase || _.toString.toLowerCase\
    \ == \"k\".toLowerCase || _.toString.toLowerCase == \"l\".toLowerCase || _.toString.toLowerCase\
    \ == \"m\".toLowerCase || _.toString.toLowerCase == \"n\".toLowerCase || _.toString.toLowerCase\
    \ == \"o\".toLowerCase || _.toString.toLowerCase == \"p\".toLowerCase || _.toString.toLowerCase\
    \ == \"q\".toLowerCase || _.toString.toLowerCase == \"r\".toLowerCase || _.toString.toLowerCase\
    \ == \"s\".toLowerCase || _.toString.toLowerCase == \"t\".toLowerCase || _.toString.toLowerCase\
    \ == \"u\".toLowerCase || _.toString.toLowerCase == \"v\".toLowerCase || _.toString.toLowerCase\
    \ == \"w\".toLowerCase || _.toString.toLowerCase == \"x\".toLowerCase || _.toString.toLowerCase\
    \ == \"y\".toLowerCase || _.toString.toLowerCase == \"z\".toLowerCase || _.toString.toLowerCase\
    \ == \"A\".toLowerCase || _.toString.toLowerCase == \"B\".toLowerCase || _.toString.toLowerCase\
    \ == \"C\".toLowerCase || _.toString.toLowerCase == \"D\".toLowerCase || _.toString.toLowerCase\
    \ == \"E\".toLowerCase || _.toString.toLowerCase == \"F\".toLowerCase || _.toString.toLowerCase\
    \ == \"G\".toLowerCase || _.toString.toLowerCase == \"H\".to\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnu0es82i.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnu0es82i.scala:35:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m35 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E086] Syntax\
    \ Error: /tmp/tmpnu0es82i.scala:21:42 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m            \e[33mval\e[0m \e[36mevensCount\e[0m = evens.filter(_.toString.toLowerCase\
    \ == \e[31m\"a\"\e[0m.toLowerCase || _.toString.toLowerCase == \e[31m\"b\"\e[0m.toLowerCase\
    \ || _.toString.toLowerCase == \e[31m\"c\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"d\"\e[0m.toLowerCase || _.toString.toLowerCase == \e[31m\"e\"\e[0m.toLowerCase\
    \ || _.toString.toLowerCase == \e[31m\"f\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"g\"\e[0m.toLowerCase || _.toString.toLowerCase == \e[31m\"h\"\e[0m.toLowerCase\
    \ || _.toString.toLowerCase == \e[31m\"i\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"j\"\e[0m.toLowerCase || _.toString.toLowerCase == \e[31m\"k\"\e[0m.toLowerCase\
    \ || _.toString.toLowerCase == \e[31m\"l\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"m\"\e[0m.toLowerCase || _.toString.toLowerCase == \e[31m\"n\"\e[0m.toLowerCase\
    \ || _.toString.toLowerCase == \e[31m\"o\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"p\"\e[0m.toLowerCase || _.toString.toLowerCase == \e[31m\"q\"\e[0m.toLowerCase\
    \ || _.toString.toLowerCase == \e[31m\"r\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"s\"\e[0m.toLowerCase || _.toString.toLowerCase == \e[31m\"t\"\e[0m.toLowerCase\
    \ || _.toString.toLowerCase == \e[31m\"u\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"v\"\e[0m.toLowerCase || _.toString.toLowerCase == \e[31m\"w\"\e[0m.toLowerCase\
    \ || _.toString.toLowerCase == \e[31m\"x\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"y\"\e[0m.toLowerCase || _.toString.toLowerCase == \e[31m\"z\"\e[0m.toLowerCase\
    \ || _.toString.toLowerCase == \e[31m\"A\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"B\"\e[0m.toLowerCas"
  stdout: ''
  timestamp: 1659800254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val counts = words.map(_.toLowerCase).map(_.length).filter(_.isEven).map(_.toInt)\n\
    \        val evenCount = counts.filter(x => x % 2 == 0).sum\n        val oddCount\
    \ = counts.filter(x => x % 2 == 1).sum\n        val result = if (evenCount ==\
    \ 0) List(txt) else List(txt, evenCount.toString, oddCount.toString)\n       \
    \ Left(result)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiuocsjuf.scala:16:69 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = words.map(_.toLowerCase).map(_.length).filter(_.isEven).map(_.toInt)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \  value isEven is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659800255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0)\n            Right(words.size)\n\
    \        else if (words.length == 1)\n            Right(words.head.length)\n \
    \       else {\n            val letters = words.map(_.length).sum\n          \
    \  val oddLetters = letters.filter(_ % 2 == 1).sum\n            Right(oddLetters)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps70q3_rm.scala:22:37 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = letters.filter(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).sum\n\e[31m\e[31m   |\e[0m                 \
    \            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \ value filter is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659800254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.length == 0) Left(Nil)\n\
    \        else if (words.length == 1) Right(words.head.length)\n        else Left(words.map(_.length).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7fsiyd3d.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words.map(_.length).sum)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Found:    Int\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length == 0) Left(Nil)\n        else if\
    \ (words.length == 1) Right(words.length)\n        else {\n            val words1\
    \ = words.filter(_.nonEmpty)\n            val words2 = words1.filter(_.nonEmpty)\n\
    \            val words3 = words2.filter(_.nonEmpty)\n            val words4 =\
    \ words3.filter(_.nonEmpty)\n            val words5 = words4.filter(_.nonEmpty)\n\
    \            val words6 = words5.filter(_.nonEmpty)\n            val words7 =\
    \ words6.filter(_.nonEmpty)\n            val words8 = words7.filter(_.nonEmpty)\n\
    \            val words9 = words8.filter(_.nonEmpty)\n            val words10 =\
    \ words9.filter(_.nonEmpty)\n            val words11 = words10.filter(_.nonEmpty)\n\
    \            val words12 = words11.filter(_.nonEmpty)\n            val words13\
    \ = words12.filter(_.nonEmpty)\n            val words14 = words13.filter(_.nonEmpty)\n\
    \            val words15 = words14.filter(_.nonEmpty)\n            val words16\
    \ = words15.filter(_.nonEmpty)\n            val words17 = words16.filter(_.nonEmpty)\n\
    \            val words18 = words17.filter(_.nonEmpty)\n            val words19\
    \ = words18.filter(_.nonEmpty)\n            val words20 = words19.filter(_.nonEmpty)\n\
    \            val words21 = words20.filter(_.nonEmpty)\n            val words22\
    \ = words21.filter(_.nonEmpty)\n            val words23 = words22.filter(_.nonEmpty)\n\
    \            val words24 = words23.filter(_.nonEmpty)\n            val words25\
    \ = words24.filter(_.nonEmpty)\n            val words26 = words25.filter(_.nonEmpty)\n\
    \            val words27 = words26.filter(_.nonEmpty)\n            val words28\
    \ = words27.filter(_.nonEmpty)\n            val words29 = words28.filter(_.nonEmpty)\n\
    \            val words30 = words29.filter(_.nonEmpty)\n            val words31\
    \ = words30.filter(_.nonEmpty)\n            val words32 = words31.filter(_.nonEmpty)\n\
    \            val words33 = words32.filter(_.nonEmpty)\n            val words34\
    \ = words33.filter(_.nonEmpty)\n            val words35 = words34.filter(_.nonEmpty)\n\
    \            val words36 = words35.filter(_.nonEmpty)\n            val words37\
    \ = words36.filter(_.nonEmpty)\n            val words38 = words37.filter(_.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkd7g3on7.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpkd7g3on7.scala:70:0 ----------------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkd7g3on7.scala:69:1 ---------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpkd7g3on7.scala:58:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m58 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800257
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ words = txt.split(\",\")\n            if (words.length == 0) Left(Nil)\n   \
    \         else if (words.length == 1) Right(words.length)\n            else {\n\
    \                val letters = txt.map(_.toLower)\n                val odd = letters.filter(x\
    \ => x % 2 == 1).length\n                Right(odd)\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_3t0gw9r.scala:30)\n\tat Problem.main(tmp_3t0gw9r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").map(_.toLowerCase).toList\n        val commaWords = txt.split(\"\
    ,\").map(_.toLowerCase).toList\n        val letters = txt.map(_.toLowerCase).toList\n\
    \        val evenLetters = letters.filter(x => x % 2 == 0)\n        val oddLetters\
    \ = letters.filter(x => x % 2 != 0)\n        val evenLettersCount = evenLetters.count(x\
    \ => x != \"\")\n        val oddLettersCount = oddLetters.count(x => x != \"\"\
    )\n        val evenLettersCount2 = evenLetters.count(x => x != \"\")\n       \
    \ val oddLettersCount2 = oddLetters.count(x => x != \"\")\n        val evenLettersCount3\
    \ = evenLetters.count(x => x != \"\")\n        val oddLettersCount3 = oddLetters.count(x\
    \ => x != \"\")\n        val evenLettersCount4 = evenLetters.count(x => x != \"\
    \")\n        val oddLettersCount4 = oddLetters.count(x => x != \"\")\n       \
    \ val evenLettersCount5 = evenLetters.count(x => x != \"\")\n        val oddLettersCount5\
    \ = oddLetters.count(x => x != \"\")\n        val evenLettersCount6 = evenLetters.count(x\
    \ => x != \"\")\n        val oddLettersCount6 = oddLetters.count(x => x != \"\"\
    )\n        val evenLettersCount7 = evenLetters.count(x => x != \"\")\n       \
    \ val oddLettersCount7 = oddLetters.count(x => x != \"\")\n        val evenLettersCount8\
    \ = evenLetters.count(x => x != \"\")\n        val oddLettersCount8 = oddLetters.count(x\
    \ => x != \"\")\n        val evenLettersCount9 = evenLetters.count(x => x != \"\
    \")\n        val oddLettersCount9 = oddLetters.count(x => x != \"\")\n       \
    \ val evenLettersCount10 = evenLetters.count(x => x != \"\")\n        val oddLettersCount10\
    \ = oddLetters.count(x => x != \"\")\n        val evenLettersCount11 = evenLetters.count(x\
    \ => x != \"\")\n        val oddLettersCount11 = oddLetters.count(x => x != \"\
    \")\n        val evenLettersCount12 = evenLetters.count(x => x != \"\")\n    \
    \    val oddLettersCount12 = oddLetters.count(x => x != \"\")\n        val evenLettersCount13\
    \ = evenLetters.count(x => x != \"\")\n        val oddLettersCount13 = oddLetters.count(x\
    \ => x != \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf0shwtfq.scala:45:58 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36moddLettersCount13\e[0m =\
    \ oddLetters.count(\e[36mx\e[0m => x != \n\e[31m\e[31m   |\e[0m              \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf0shwtfq.scala:17:32\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mletters\e[0m = txt.map(_.toLowerCase).toList\n\e[31m\e[31m   |\e[0m      \
    \                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpf0shwtfq.scala:46:5 ---------------------\e[0m\e\
    [0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Either[List[String], Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ even = words.filter(w => w.length == w.toLowerCase && !w.contains(\",\"))\n\
    \            val odd = words.filter(w => w.length == w.toLowerCase && w.contains(\"\
    ,\"))\n            val evenCount = even.map(w => w.toLowerCase countBy (_.toLowerCase)\
    \ toList).sum\n            val oddCount = odd.map(w => w.toLowerCase countBy (_.toLowerCase)\
    \ toList).sum\n            Right(evenCount + oddCount)\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqt78z2lo.scala:21:86 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenCount\e[0m = even.map(\e\
    [36mw\e[0m => w.toLowerCase countBy (_.toLowerCase) toList).sum\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \     expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmpqt78z2lo.scala:22:84 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddCount\e[0m = odd.map(\e\
    [36mw\e[0m => w.toLowerCase countBy (_.toLowerCase) toList).sum\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \   expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpqt78z2lo.scala:19:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && !w.contains(\e[31m\",\"\e[0m))\n\e\
    [31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpqt78z2lo.scala:20:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && w.contains(\e[31m\",\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqt78z2lo.scala:21:56\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenCount\e[0m = even.map(\e[36mw\e[0m => w.to"
  stdout: ''
  timestamp: 1659800256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.isEmpty) Left(List.empty)\n\
    \        else if (words.size == 1) Right(words.head.toLong)\n        else {\n\
    \            val even = words.filter(_.toString.toLowerCase == \"even\")\n   \
    \         val odd = words.filter(_.toString.toLowerCase == \"odd\")\n        \
    \    val evenCount = even.count(_.toString.toLowerCase == \"even\")\n        \
    \    val oddCount = odd.count(_.toString.toLowerCase == \"odd\")\n           \
    \ val evenLetters = even.count(_.toString.toLowerCase == \"a\")\n            val\
    \ oddLetters = odd.count(_.toString.toLowerCase == \"a\")\n            val evenLettersOdd\
    \ = evenLetters + oddLetters\n            val evenLettersEven = evenLetters -\
    \ evenLettersOdd\n            val oddLettersEven = oddLetters - evenLettersOdd\n\
    \            val evenLettersOddCount = evenLettersOdd + oddLettersEven\n     \
    \       val evenLettersEvenCount = evenLettersEven - evenLettersOddCount\n   \
    \         val oddLettersEvenCount = oddLettersEven - evenLettersOddCount\n   \
    \         val evenLettersOddCount2 = evenLettersOddCount + oddLettersEvenCount\n\
    \            val evenLettersEvenCount2 = evenLettersEvenCount - evenLettersOddCount2\n\
    \            val oddLettersEvenCount2 = oddLettersEvenCount - evenLettersOddCount2\n\
    \            val evenLettersOddCount3 = evenLettersOddCount2 + oddLettersEvenCount2\n\
    \            val evenLettersEvenCount3 = evenLettersEvenCount2 - evenLettersOddCount3\n\
    \            val oddLettersEvenCount3 = oddLettersEvenCount2 - evenLettersOddCount3\n\
    \            val evenLettersOddCount4 = evenLettersOddCount3 + oddLettersEvenCount3\n\
    \            val evenLettersEvenCount4 = evenLettersEvenCount3 - evenLettersOddCount4\n\
    \            val oddLettersEvenCount4 = oddLettersEvenCount3 - evenLettersOddCount4\n\
    \            val evenLettersOddCount5 = evenLettersOddCount4 + oddLettersEvenCount4\n\
    \            val evenLettersEvenCount5 = evenLettersEvenCount4 - evenLettersOddCount5\n\
    \            val oddLettersEvenCount5 = oddLettersEvenCount4 - evenLettersOddCount5\n\
    \            \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpji72nd9v.scala:57:0 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpji72nd9v.scala:56:1\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpji72nd9v.scala:45:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659800256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val lowerCaseWords = words.map(_.toLowerCase)\n            val evenOrderWords\
    \ = lowerCaseWords.filter(word => word.count(_ == 'a') % 2 == 0)\n           \
    \ val oddOrderWords = lowerCaseWords.filter(word => word.count(_ == 'a') % 2 !=\
    \ 0)\n            val evenOrderWordsCount = evenOrderWords.count(word => word.count(_\
    \ == 'a') % 2 == 0)\n            val oddOrderWordsCount = oddOrderWords.count(word\
    \ => word.count(_ == 'a') % 2 != 0)\n            val evenOrderWordsCountString\
    \ = evenOrderWordsCount.toString\n            val oddOrderWordsCountString = oddOrderWordsCount.toString\n\
    \            val evenOrderWordsCountLong = Long.parseLong(evenOrderWordsCountString)\n\
    \            val oddOrderWordsCountLong = Long.parseLong(oddOrderWordsCountString)\n\
    \            if (evenOrderWordsCountLong < oddOrderWordsCountLong) Right(evenOrderWordsCount)\n\
    \            else Left(oddOrderWordsCount)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9hfd19fb.scala:26:47 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mevenOrderWordsCountLong\e\
    [0m = Long.parseLong(evenOrderWordsCountString)\n\e[31m\e[31m   |\e[0m       \
    \                                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                     value parseLong is not a member of object Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp9hfd19fb.scala:27:46 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36moddOrderWordsCountLong\e\
    [0m = Long.parseLong(oddOrderWordsCountString)\n\e[31m\e[31m   |\e[0m        \
    \                                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                   value parseLong is not a member of object Long\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9hfd19fb.scala:29:22 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33melse\e[0m Left(oddOrderWordsCount)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Found:    (oddOrderWordsCount : Int)\n\e[31m   |\e[0m\
    \                      Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.head.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprlv3_emj.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.head.length)\n        else {\n          \
    \  val even = words.filter(x => x.toLowerCase % 2 == 0).length\n            val\
    \ odd = words.filter(x => x.toLowerCase % 2 != 0).length\n            Right(even\
    \ + odd)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2gnpq6wc.scala:19:55 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mx\e[0m => x.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m\
    \   |\e[0m                                         ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp2gnpq6wc.scala:20:54 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mx\e[0m => x.toLowerCase % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e[31m\
    \   |\e[0m                                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(0) else {\n  \
    \          val numWords = words.length\n            val numLetters = txt.length.toString.toInt\n\
    \            val oddLetters = numLetters.filter(_ % 2 != 0)\n            Right(numWords\
    \ * numLetters - oddLetters)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwpcelna4.scala:19:40 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = numLetters.filter(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             value\
    \ filter is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659800262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Left(Nil)\n        else\
    \ if (words.size == 1) Right(words.head.toLong)\n        else Left(words)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqk35zm4o.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        val commaWords = txt.split(\"\
    ,\").filter(_.nonEmpty)\n        val letters = txt.filter(_.isLetter).filter(_.isLower).length\n\
    \        val oddLetters = letters.filter(_ % 2 != 0)\n        val result = if\
    \ (words.length == commaWords.length) words else commaWords\n        Right(result)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2pd4f1j0.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36moddLetters\e[0m = letters.filter(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value filter\
    \ is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2pd4f1j0.scala:20:14\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        Right(result)\n\e[31m\e\
    [31m   |\e[0m              ^^^^^^\e[0m\n\e[31m   |\e[0m              Found:  \
    \  (result : Array[String])\n\e[31m   |\e[0m              Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.head.length)\n        else {\n          \
    \  val evenWords = words.filter(_.length == words.length)\n            val oddWords\
    \ = words.filter(_.length != words.length)\n            val evenWordsCount = evenWords.map(_.length).sum\n\
    \            val oddWordsCount = oddWords.map(_.length).sum\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val even\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvkfqeh36.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvkfqeh36.scala:63:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvkfqeh36.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountInt\e[0m = evenWordsCount.toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevenWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpvkfqeh36.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountInt\e[0m\
    \ = oddWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35moddWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpvkfqeh36.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountInt\e\
    [0m = evenWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevenWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpvkfqeh36.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountInt\e[0m\
    \ = oddWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val noOfWords = words.length\n        val noOfChars\
    \ = txt.length\n        val noOfLetters = noOfChars.toString.toCharArray.filter(_.isLetter).length\n\
    \        val noOfOddLetters = noOfLetters.filter(_ % 2 != 0).length\n        val\
    \ noOfEvenLetters = noOfLetters.filter(_ % 2 == 0).length\n        val noOfComma\
    \ = noOfChars.toString.toCharArray.filter(_.isLetter).count(_ == ',')\n      \
    \  val noOfCommaWithOddOrder = noOfChars.toString.toCharArray.count(_ == ',' &&\
    \ _ % 2 != 0)\n        val noOfCommaWithEvenOrder = noOfChars.toString.toCharArray.count(_\
    \ == ',' && _ % 2 == 0)\n        val noOfSpace = noOfChars.toString.toCharArray.count(_\
    \ == ' ')\n        val noOfSpaceWithOddOrder = noOfChars.toString.toCharArray.count(_\
    \ == ' ' && _ % 2 != 0)\n        val noOfSpaceWithEvenOrder = noOfChars.toString.toCharArray.count(_\
    \ == ' ' && _ % 2 == 0)\n        val noOfNewLine = noOfChars.toString.toCharArray.count(_\
    \ == '\\n')\n        val noOfNewLineWithOddOrder = noOfChars.toString.toCharArray.count(_\
    \ == '\\n' && _ % 2 != 0)\n        val noOfNewLineWithEvenOrder = noOfChars.toString.toCharArray.count(_\
    \ == '\\n' && _ % 2 == 0)\n        val noOfNewLineWithSpace = noOfChars.toString.toCharArray.count(_\
    \ == '\\n' && _ == ' ')\n        val noOfNewLineWithSpaceWithOddOrder = noOfChars.toString.toCharArray.count(_\
    \ == '\\n' && _ == ' ' && _ % 2 != 0)\n        val noOfNewLineWithSpaceWithEvenOrder\
    \ = noOfChars.toString.toCharArray.count(_ == '\\n' && _ == ' ' && _ % 2 == 0)\n\
    \        val noOfNewLineWithNewLine = noOfChars.toString.toCharArray.count(_ ==\
    \ '\\n' && _ == '\\n')\n        val noOfNewLineWithNewLineWithOddOrder = noOfChars.toString.toCharArray.count(_\
    \ == '\\n' && _ == '\\n' && _ % 2 != 0)\n        val noOfNewLineWithNewLineWithEvenOrder\
    \ = no\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg2p3fpik.scala:19:41 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnoOfOddLetters\e[0m = noOfLetters.filter(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \        value filter is not a member of Int\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpg2p3fpik.scala:20:42 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnoOfEvenLetters\e[0m = noOfLetters.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \          value filter is not a member of Int\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmpg2p3fpik.scala:22:73 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mnoOfCommaWithOddOrder\e[0m = noOfChars.toString.toCharArray.count(_\
    \ == \e[31m','\e[0m && _ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                                         ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpg2p3fpik.scala:23:74\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnoOfCommaWithEvenOrder\e[0m = noOfChars.toString.toCharArray.count(_ ==\
    \ \e[31m','\e[0m && _ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                                                                         ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpg2p3fpik.scala:25:73\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnoOfSpaceWithOddOrder\e[0m = noOfChars.toString.toCharArray.count(_ ==\
    \ \e[31m' '\e[0m && _ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                                                                        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                "
  stdout: ''
  timestamp: 1659800267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val wordList = new mutable.ListBuffer[String]()\n            words.foreach(word\
    \ => {\n                if (word.length == 0) wordList += word\n             \
    \   else if (word.length == 1) wordList += word\n                else {\n    \
    \                val letters = word.split(\"\")\n                    val odd =\
    \ letters.count(_ % 2 == 0)\n                    if (odd > 0) wordList += word\n\
    \                }\n            })\n            Right(wordList.size)\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl95nkw_g.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl95nkw_g.scala:25:46\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    \e[33mval\e\
    [0m \e[36modd\e[0m = letters.count(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                            ^^^\e[0m\n\e[31m   |\e\
    [0mvalue % is not a member of String, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659800265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ oddLetters = words.map(_.toLowerCase filter (c => c % 2 == 1))\n           \
    \ val evenLetters = words.map(_.toLowerCase filter (c => c % 2 == 0))\n      \
    \      val evenLettersCount = evenLetters.count(_ % 2 == 0)\n            val oddLettersCount\
    \ = oddLetters.count(_ % 2 == 1)\n            if (evenLettersCount == oddLettersCount)\
    \ Right(evenLettersCount)\n            else Left(oddLettersCount)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprmf_7_ky.scala:21:55 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = evenLetters.count(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                     ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprmf_7_ky.scala:22:53\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddLettersCount\e[0m = oddLetters.count(_ % \e[31m2\e[0m == \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \ ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following\
    \ import might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmf_7_ky.scala:24:22 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33melse\e[0m Left(oddLettersCount)\n\e\
    [31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Found:    (oddLettersCount : Int)\n\e[31m   |\e[0m    \
    \                  Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val wordSet = words.toSet\n            if (wordSet.size == 1) Right(words.length)\n\
    \            else {\n                val oddWords = wordSet.filter(x => x % 2\
    \ == 1).size\n                val evenWords = wordSet.filter(x => x % 2 == 0).size\n\
    \                Right(oddWords + evenWords)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprd1zc_s8.scala:22:53 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36moddWords\e[0m =\
    \ wordSet.filter(\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m).size\n\e[31m\e\
    [31m   |\e[0m                                                   ^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmprd1zc_s8.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36mevenWords\e[0m =\
    \ wordSet.filter(\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).size\n\e[31m\e\
    [31m   |\e[0m                                                    ^^^\e[0m\n\e\
    [31m   |\e[0mvalue % is not a member of String, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnav5eu4l.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.length == 0) Left(Nil)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(x => x.toLowerCase == \"even\")\n          \
    \  val odd = words.filter(x => x.toLowerCase == \"odd\")\n            val evenCount\
    \ = even.count(x => x.toLowerCase == \"a\")\n            val oddCount = odd.count(x\
    \ => x.toLowerCase == \"a\")\n            val evenOddCount = evenCount + oddCount\n\
    \            val evenOddCountString = evenOddCount.toString\n            if (evenOddCountString.length\
    \ == 1) Right(evenOddCount)\n            else Left(evenOddCountString)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpot4d0y39.scala:26:22\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33melse\e[0m Left(evenOddCountString)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Found:    (evenOddCountString : String)\n\e[31m   |\e\
    [0m                      Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ letters = words.map(_.toLowerCase)\n            val evenLetters = letters.filter(letter\
    \ => letter % 2 == 0)\n            val oddLetters = letters.filter(letter => letter\
    \ % 2 != 0)\n            val evenLettersCount = evenLetters.count(_ == 'a')\n\
    \            val oddLettersCount = oddLetters.count(_ == 'a')\n            val\
    \ evenLettersCountString = evenLettersCount.toString\n            val oddLettersCountString\
    \ = oddLettersCount.toString\n            val evenLettersCountLong = Long.parseLong(evenLettersCountString)\n\
    \            val oddLettersCountLong = Long.parseLong(oddLettersCountString)\n\
    \            val evenLettersCountLongString = evenLettersCountLong.toString\n\
    \            val oddLettersCountLongString = oddLettersCountLong.toString\n  \
    \          val evenLettersCountLongLong = Long.parseLong(evenLettersCountLongString)\n\
    \            val oddLettersCountLongLong = Long.parseLong(oddLettersCountLongString)\n\
    \            val evenLettersCountLongLongString = evenLettersCountLongLong.toString\n\
    \            val oddLettersCountLongLongString = oddLettersCountLongLong.toString\n\
    \            val evenLettersCountLongLongLong = Long.parseLong(evenLettersCountLongLongString)\n\
    \            val oddLettersCountLongLongLong = Long.parseLong(oddLettersCountLongLongString)\n\
    \            val evenLettersCountLongLongLongString = evenLettersCountLongLongLong.toString\n\
    \            val oddLettersCountLongLongLongString = oddLettersCountLongLongLong.toString\n\
    \            val evenLettersCountLongLongLongLong = Long.parseLong(evenLettersCountLongLongLongString)\n\
    \            val oddLettersCountLongLongLongLong = Long.parseLong(oddLettersCountLongLongLongString)\n\
    \            val evenLettersCountLongLongLongLongString = evenLettersCountLongLongLongLong.toString\n\
    \            val oddLettersCountLongLongLongLongString = oddLettersCountLongLongLongLongLong.toString\n\
    \            val evenLettersCountLongLongLongLongLong = Long.parseLong(evenLettersCountLongLongLongLongLongString)\n\
    \            val oddLettersCountLongLongLongLongLong = Long.parseLong(oddLettersCountLongLongLongLongLongString)\n\
    \            val evenLetter\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl8w35034.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl8w35034.scala:58:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpl8w35034.scala:20:62 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = letters.filter(\e\
    [36mletter\e[0m => letter % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                       ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpl8w35034.scala:21:61 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = letters.filter(\e\
    [36mletter\e[0m => letter % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                      ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmpl8w35034.scala:22:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = evenLetters.count(_ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \   Values of types String and Char cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpl8w35034.scala:23:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m2"
  stdout: ''
  timestamp: 1659800271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Left(Nil)\n        else\
    \ if (words.size == 1) Right(words.head.length)\n        else Right(words.map(_.length).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw4kxofa5.scala:21)\n\tat Problem.main(tmpw4kxofa5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        if (words.isEmpty) Right(words.size)\n\
    \        else if (words.size == 1) Right(words.head.size)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82wh063_.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnav5eu4l.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0)\n            Left(Nil)\n\
    \        else if (words.length == 1)\n            Right(words.length)\n      \
    \  else {\n            val evenWords = words.filter(_.length == words.length)\n\
    \            val oddWords = words.filter(_.length != words.length)\n         \
    \   val evenLetters = evenWords.map(_.toLowerCase diff \"a\")\n            val\
    \ oddLetters = oddWords.map(_.toLowerCase diff \"a\")\n            val evenLettersCount\
    \ = evenLetters.count(_ % 2 == 0)\n            val oddLettersCount = oddLetters.count(_\
    \ % 2 == 0)\n            val evenLettersCountString = evenLettersCount.toString\n\
    \            val oddLettersCountString = oddLettersCount.toString\n          \
    \  val evenLettersCountLong = Long.parseLong(evenLettersCountString)\n       \
    \     val oddLettersCountLong = Long.parseLong(oddLettersCountString)\n      \
    \      val evenLettersCountLongString = evenLettersCountLong.toString\n      \
    \      val oddLettersCountLongString = oddLettersCountLong.toString\n        \
    \    val evenLettersCountLongLong = Long.parseLong(evenLettersCountLongString)\n\
    \            val oddLettersCountLongLong = Long.parseLong(oddLettersCountLongString)\n\
    \            val evenLettersCountLongLongString = evenLettersCountLongLong.toString\n\
    \            val oddLettersCountLongLongString = oddLettersCountLongLong.toString\n\
    \            val evenLettersCountLongLongLong = Long.parseLong(evenLettersCountLongLongString)\n\
    \            val oddLettersCountLongLongLong = Long.parseLong(oddLettersCountLongLongString)\n\
    \            val evenLettersCountLongLongLongString = evenLettersCountLongLongLong.toString\n\
    \            val oddLettersCountLongLongLongString = oddLettersCountLongLongLong.toString\n\
    \            val evenLettersCountLongLongLongLong = Long.parseLong(evenLettersCountLongLongLongString)\n\
    \            val oddLettersCountLongLongLongLong = Long.parseLong(oddLettersCountLongLongLongString)\n\
    \            val evenLettersCountLongLongLongLongString = evenLettersCountLongLongLongLongLong.toString\n\
    \            val oddLettersCountLongLongLongLongString = oddLettersCountLongLongLongLongLong.toString\n\
    \            val evenLettersCountLongLongLongLongLong = Long.parseLong(evenLettersCountLongLongLongLongLongString)\n\
    \            val oddLetter\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8goosao4.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8goosao4.scala:60:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m60 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp8goosao4.scala:25:55 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m = evenLetters.count(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member\
    \ of String, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mThe following import might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8goosao4.scala:26:53\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddLettersCount\e[0m = oddLetters.count(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \ ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following\
    \ import might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8goosao4.scala:29:44 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountLong\e\
    [0m = Long.parseLong(evenLettersCountString)\n\e[31m\e[31m   |\e[0m          \
    \                             ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \               value parseLong is not a member of object Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp8goosao4.scala:30:43 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36moddLettersCou"
  stdout: ''
  timestamp: 1659800272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else if (words.length\
    \ == 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else if (words.length\
    \ == 26) Right(words.length)\n        else if (words.length == 27) Right(words.length)\n\
    \        else if (words.length == 28) Right(words.length)\n        else if (words.length\
    \ == 29) Right(words.length)\n        else if (words.length == 30) Right(words.length)\n\
    \        else if (words.length == 31) Right(words.length)\n        else if (words.length\
    \ == 32) Right(words.length)\n        else if (words.length == 33) Right(words.length)\n\
    \        else if (words.length == 34) Right(words.length)\n        else if (words.length\
    \ == 35) Right(words.length)\n        else if (words.length == 36) Right(words.length)\n\
    \        else if (words.length == 37) Right(words.length)\n        else if (words.length\
    \ == 38) Right(words.length)\n        else if (words.length == 39) Right(words.length)\n\
    \        else if (words.length == 40) Right(words.length)\n        else if (words.length\
    \ == 41) Right(words.length)\n        else if (words.length == 42) Right(words.length)\n\
    \        else if (word\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvxjkzuau.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvxjkzuau.scala:59:17\
    \ ------------------------\e[0m\e[0m\n\e[31m59 |\e[0m        \e[33melse\e[0m \e\
    [33mif\e[0m (word\n\e[31m\e[31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e\
    [0m                 Not found: word\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Left(List.empty)\n     \
    \   else if (words.size == 1) Right(words.head)\n        else Right(words.map(_.toLowerCase).filter(_.isLetter).count(_\
    \ % 2 == 1))\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3j0yjr32.scala:17:46\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.size == \e[31m1\e[0m) Right(words.head)\n\e[31m\e[31m   |\e[0m    \
    \                                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                Found:    String\n\e[31m   |\e[0m           \
    \                             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp3j0yjr32.scala:18:53 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Right(words.map(_.toLowerCase).filter(_.isLetter).count(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                    \
    \                               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   value isLetter is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp3j0yjr32.scala:18:71 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Right(words.map(_.toLowerCase).filter(_.isLetter).count(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                    \
    \                                                 ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659800269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val letterWords = words.filter(_.contains(\"a\"))\n        val\
    \ letterWordsCount = letterWords.count(_.toLowerCase == \"a\")\n        val letterWordsCountOdd\
    \ = letterWordsCount % 2\n        val commaWordsCount = commaWords.count(_.toLowerCase\
    \ == \"a\")\n        val commaWordsCountOdd = commaWordsCount % 2\n        val\
    \ wordCount = words.length\n        val wordCountOdd = wordCount % 2\n       \
    \ val wordCountEven = wordCount % 2 == 0\n        val wordCountEvenOdd = wordCountEven\
    \ % 2\n        val wordCountEvenEven = wordCountEven % 2 == 0\n        val wordCountEvenEvenOdd\
    \ = wordCountEvenEven % 2\n        val wordCountEvenEvenEven = wordCountEvenEven\
    \ % 2 == 0\n        val wordCountEvenEvenEvenOdd = wordCountEvenEvenEven % 2\n\
    \        val wordCountEvenEvenEvenEven = wordCountEvenEvenEven % 2 == 0\n    \
    \    val wordCountEvenEvenEvenEvenOdd = wordCountEvenEvenEvenEven % 2 == 0\n \
    \       val wordCountEvenEvenEvenEvenEven = wordCountEvenEvenEvenEven % 2 == 0\n\
    \        val wordCountEvenEvenEvenEvenEvenEvenOdd = wordCountEvenEvenEvenEvenEven\
    \ % 2 == 0\n        val wordCountEvenEvenEvenEvenEvenEvenEven = wordCountEvenEvenEvenEvenEven\
    \ % 2 == 0\n        val wordCountEvenEvenEvenEvenEvenEvenEvenOdd = wordCountEvenEvenEvenEvenEvenEven\
    \ % 2 == 0\n        val wordCountEvenEvenEvenEvenEvenEvenEvenEven = wordCountEvenEvenEvenEvenEven\
    \ % 2 == 0\n        val wordCountEvenEvenEvenEvenEvenEvenEvenEvenOdd = wordCountEvenEvenEvenEvenEvenEven\
    \ % 2 == 0\n        val wordCountEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = wordCountEvenEvenEvenEvenEvenEven\
    \ % 2 == 0\n        val wordCountEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd =\
    \ wordCountEvenEvenEvenEvenEven % 2 == 0\n        val wordCountEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = wordCountEvenEvenEvenEvenEven % 2 == 0\n        val wordCountEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = wordCountEvenEvenEvenEvenEven % 2 == \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpg04v9_rj.scala:41:115 --------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mwordCountEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\e\
    [0m = wordCountEvenEvenEvenEvenEven % \e[31m2\e[0m == \n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg04v9_rj.scala:25:45 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mwordCountEvenOdd\e[0m =\
    \ wordCountEven % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \       ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of Boolean,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg04v9_rj.scala:26:46\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mwordCountEvenEven\e[0m = wordCountEven % \e[31m2\e[0m == \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of Boolean, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpg04v9_rj.scala:35:55 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mwordCountEvenEvenEvenEvenEvenEvenEvenOdd\e\
    [0m = wordCountEvenEvenEvenEvenEvenEven % \e[31m2\e[0m == \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  "
  stdout: ''
  timestamp: 1659800270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.length)\n\
    \        else if (words.length == 1) Right(words.length)\n        else if (words.length\
    \ == 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else if (words.length\
    \ == 26) Right(words.length)\n        else if (words.length == 27) Right(words.length)\n\
    \        else if (words.length == 28) Right(words.length)\n        else if (words.length\
    \ == 29) Right(words.length)\n        else if (words.length == 30) Right(words.length)\n\
    \        else if (words.length == 31) Right(words.length)\n        else if (words.length\
    \ == 32) Right(words.length)\n        else if (words.length == 33) Right(words.length)\n\
    \        else if (words.length == 34) Right(words.length)\n        else if (words.length\
    \ == 35) Right(words.length)\n        else if (words.length == 36) Right(words.length)\n\
    \        else if (words.length == 37) Right(words.length)\n        else if (words.length\
    \ == 38) Right(words.length)\n        else if (words.length == 39) Right(words.length)\n\
    \        else if (words.length == 40) Right(words.length)\n        else if (words.length\
    \ == 41) Right(words.length)\n        else if (words.length == 42) Right(words.length)\n\
    \        else if (words.length == 43) Right\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaawsib2d.scala:59:13\
    \ --------------------\e[0m\e[0m\n\e[31m59 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.length == \e[31m43\e[0m) Right\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Unit\n\e[31m   |\e[0m             Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m             Maybe you are missing\
    \ an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ letters = words.map(_.toLowerCase)\n            val evenLetters = letters.filter(letter\
    \ => letter % 2 == 0)\n            val oddLetters = letters.filter(letter => letter\
    \ % 2 != 0)\n            val evenLettersCount = evenLetters.count(letter => letter.toChar\
    \ == 'a')\n            val oddLettersCount = oddLetters.count(letter => letter.toChar\
    \ == 'a')\n            val evenLettersCountString = evenLettersCount.toString\n\
    \            val oddLettersCountString = oddLettersCount.toString\n          \
    \  if (evenLettersCountString.isEmpty) Right(evenLettersCount)\n            else\
    \ if (oddLettersCountString.isEmpty) Left(oddLettersCount)\n            else Left(evenLettersCount,\
    \ oddLettersCount)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp5wr6anx.scala:20:62 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = letters.filter(\e\
    [36mletter\e[0m => letter % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                       ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpp5wr6anx.scala:21:61 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = letters.filter(\e\
    [36mletter\e[0m => letter % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                      ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpp5wr6anx.scala:22:70 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = evenLetters.count(\e[36mletter\e[0m => letter.toChar == \e[31m'a'\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  value\
    \ toChar is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp5wr6anx.scala:23:68\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddLettersCount\e[0m = oddLetters.count(\e[36mletter\e[0m => letter.toChar\
    \ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    value toChar is not a member of String\n\e[31m\e[31m-- ["
  stdout: ''
  timestamp: 1659800271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnav5eu4l.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val letters = words.map(_.toLowerCase + _.toUpperCase).filter(_.isLetter)\n\
    \            val odd = letters.count(_ % 2 == 1)\n            val even = letters.count(_\
    \ % 2 == 0)\n            if (odd == even) Right(odd)\n            else Left(List(words.mkString(\"\
    ,\"), even.toString))\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp_hpru009.scala:19:36 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = words.map(_.toLowerCase\
    \ + _.toUpperCase).filter(_.isLetter)\n\e[31m\e[31m   |\e[0m                 \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                           Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- Error: /tmp/tmp_hpru009.scala:19:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = words.map(_.toLowerCase\
    \ + _.toUpperCase).filter(_.isLetter)\n\e[31m\e[31m   |\e[0m                 \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                      No ClassTag available for B\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                          where:    B is a\
    \ type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ even = words.filter(word => word.forall(c => c.isLetter) && c.toLower.toInt\
    \ % 2 == 0)\n            val odd = words.filter(word => word.forall(c => c.isLetter)\
    \ && c.toLower.toInt % 2 != 0)\n            val evenCount = even.filter(word =>\
    \ word.forall(c => c.isLetter)).size\n            val oddCount = odd.filter(word\
    \ => word.forall(c => c.isLetter)).size\n            Right(evenCount + oddCount)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmnkgp59.scala:19:76 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower.toInt %\
    \ \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                                            Not found: c\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmnkgp59.scala:20:75\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36modd\e[0m = words.filter(\e[36mword\e[0m => word.forall(\e[36mc\e[0m =>\
    \ c.isLetter) && c.toLower.toInt % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \        ^\e[0m\n\e[31m   |\e[0m                                             \
    \               Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        if (words.isEmpty) Right(words.size)\n\
    \        else {\n            val commaWords = words.filter(_.contains(\",\"))\n\
    \            val commaWordsCount = commaWords.map(_.length).sum\n            val\
    \ evenWordsCount = words.filter(_.contains(\"a\")).map(_.length).sum\n       \
    \     val oddWordsCount = words.filter(_.contains(\"b\")).map(_.length).sum\n\
    \            val evenWordsCountOdd = evenWordsCount - oddWordsCount\n        \
    \    val evenWordsCountEven = evenWordsCount - evenWordsCountOdd\n           \
    \ val evenWordsCountEvenOdd = evenWordsCountEven - oddWordsCountEven\n       \
    \     val evenWordsCountEvenOddOdd = evenWordsCountEvenOdd - oddWordsCountEvenOdd\n\
    \            val evenWordsCountEvenOddOddOdd = evenWordsCountEvenOddOdd - oddWordsCountEvenOddOdd\n\
    \            val evenWordsCountEvenOddOddOddOdd = evenWordsCountEvenOddOddOdd\
    \ - oddWordsCountEvenOddOddOdd\n            val evenWordsCountEvenOddOddOddOddOdd\
    \ = evenWordsCountEvenOddOddOddOdd - oddWordsCountEvenOddOddOddOdd\n         \
    \   val evenWordsCountEvenOddOddOddOddOddOdd = evenWordsCountEvenOddOddOddOddOddOdd\
    \ - oddWordsCountEvenOddOddOddOddOddOdd\n            val evenWordsCountEvenOddOddOddOddOddOddOdd\
    \ = evenWordsCountEvenOddOddOddOddOddOddOdd - oddWordsCountEvenOddOddOddOddOddOddOdd\n\
    \            val evenWordsCountEvenOddOddOddOddOddOddOddOdd = evenWordsCountEvenOddOddOddOddOddOddOddOdd\
    \ - oddWordsCountEvenOddOddOddOddOddOddOddOdd\n            val evenWordsCountEvenOddOddOddOddOddOddOddOddO\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcrugk1u2.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcrugk1u2.scala:46:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m46 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpcrugk1u2.scala:24:61 ------------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountEvenOdd\e[0m = evenWordsCountEven\
    \ - oddWordsCountEven\n\e[31m\e[31m   |\e[0m                                 \
    \                            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                                   Not found: oddWordsCountEven\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcrugk1u2.scala:29:55 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountEvenOddOddOddOddOddOdd\e\
    [0m = evenWordsCountEvenOddOddOddOddOddOdd - oddWordsCountEvenOddOddOddOddOddOdd\n\
    \e[31m\e[31m   |\e[0m                                                       ^\e\
    [0m\n\e[31m   |\e[0m         Recursive \e[33mvalue\e[0m \e[35mevenWordsCountEvenOddOddOddOddOddOdd\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcrugk1u2.scala:30:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e\
    [0m \e[36mevenWordsCountEvenOddOddOddOddOddOddOdd\e[0m = evenWordsCountEvenOddOddOddOddOddOddOdd\
    \ - oddWordsCountEvenOddOddOddOddOddOddOdd\n\e[31m\e[31m   |\e[0m            \
    \                                              ^\e[0m\n\e[31m   |\e[0m      Recursive\
    \ \e[33mvalue\e[0m \e[35mevenWordsCountEvenOddOddOddOddOddOddOdd\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcrugk1u2.scala:31:61\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m         "
  stdout: ''
  timestamp: 1659800271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val noWhiteSpaceWords = words.filter(_.nonEmpty)\n\
    \        val noCommaWords = words.filter(_.contains(\",\"))\n        val noLettersWords\
    \ = words.filter(_.forall(_.toLowerCase == 'a' || _.toLowerCase == 'b' || _.toLowerCase\
    \ == 'c' || _.toLowerCase == 'd' || _.toLowerCase == 'e' || _.toLowerCase == 'f'\
    \ || _.toLowerCase == 'g' || _.toLowerCase == 'h' || _.toLowerCase == 'i' || _.toLowerCase\
    \ == 'j' || _.toLowerCase == 'k' || _.toLowerCase == 'l' || _.toLowerCase == 'm'\
    \ || _.toLowerCase == 'n' || _.toLowerCase == 'o' || _.toLowerCase == 'p' || _.toLowerCase\
    \ == 'q' || _.toLowerCase == 'r' || _.toLowerCase == 's' || _.toLowerCase == 't'\
    \ || _.toLowerCase == 'u' || _.toLowerCase == 'v' || _.toLowerCase == 'w' || _.toLowerCase\
    \ == 'x' || _.toLowerCase == 'y' || _.toLowerCase == 'z'))\n        val noLettersWordsCount\
    \ = noLettersWords.size\n        val noLettersWordsCountOdd = noLettersWordsCount\
    \ % 2\n        val noLettersWordsCountEven = noLettersWordsCount - noLettersWordsCountOdd\n\
    \        val noLettersWordsCountEvenOdd = noLettersWordsCountEven % 2\n      \
    \  val noLettersWordsCountEvenEven = noLettersWordsCountEven - noLettersWordsCountEvenOdd\n\
    \        val noLettersWordsCountEvenOddOdd = noLettersWordsCountEvenOdd % 2\n\
    \        val noLettersWordsCountEvenEvenOdd = noLettersWordsCountEvenEven - noLettersWordsCountEvenOdd\n\
    \        val noLettersWordsCountEvenOddEven = noLettersWordsCountEvenOdd - noLettersWordsCountEvenEven\n\
    \        val noLettersWordsCountEvenEvenOddOdd = noLettersWordsCountEvenEvenOdd\
    \ % 2\n        val noLettersWordsCountEvenEvenEvenOdd = noLettersWordsCountEvenEvenOdd\
    \ - noLettersWordsCountEvenOddOdd\n        val noLettersWordsCountEvenOddEvenO\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpke4nj0rf.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpke4nj0rf.scala:18:51\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnoLettersWords\e[0m = words.filter(_.forall(_.toLowerCase == \e[31m'a'\e\
    [0m || _.toLowerCase == \e[31m'b'\e[0m || _.toLowerCase == \e[31m'c'\e[0m || _.toLowerCase\
    \ == \e[31m'd'\e[0m || _.toLowerCase == \e[31m'e'\e[0m || _.toLowerCase == \e\
    [31m'f'\e[0m || _.toLowerCase == \e[31m'g'\e[0m || _.toLowerCase == \e[31m'h'\e\
    [0m || _.toLowerCase == \e[31m'i'\e[0m || _.toLowerCase == \e[31m'j'\e[0m || _.toLowerCase\
    \ == \e[31m'k'\e[0m || _.toLowerCase == \e[31m'l'\e[0m || _.toLowerCase == \e\
    [31m'm'\e[0m || _.toLowerCase == \e[31m'n'\e[0m || _.toLowerCase == \e[31m'o'\e\
    [0m || _.toLowerCase == \e[31m'p'\e[0m || _.toLowerCase == \e[31m'q'\e[0m || _.toLowerCase\
    \ == \e[31m'r'\e[0m || _.toLowerCase == \e[31m's'\e[0m || _.toLowerCase == \e\
    [31m't'\e[0m || _.toLowerCase == \e[31m'u'\e[0m || _.toLowerCase == \e[31m'v'\e\
    [0m || _.toLowerCase == \e[31m'w'\e[0m || _.toLowerCase == \e[31m'x'\e[0m || _.toLowerCase\
    \ == \e[31m'y'\e[0m || _.toLowerCase == \e[31m'z'\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E007] Type Mismatch Error"
  stdout: ''
  timestamp: 1659800271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0)\n            Right(words.size)\n\
    \        else if (words.length == 1)\n            Right(words.length)\n      \
    \  else {\n            val oddOrderWords = words.filter(word => word.forall(c\
    \ => c >= 'a' && c <= 'z'))\n            val evenOrderWords = words.filter(word\
    \ => word.forall(c => c >= 'a' && c <= 'z' && c % 2 != 0))\n            val evenOrderWordsCount\
    \ = evenOrderWords.filter(word => word.forall(c => c >= 'a' && c <= 'z' && c %\
    \ 2 == 0)).size\n            val oddOrderWordsCount = oddOrderWords.filter(word\
    \ => word.forall(c => c >= 'a' && c <= 'z')).size\n            Right(oddOrderWordsCount\
    \ + evenOrderWordsCount)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuhv5ex9g.scala:29)\n\tat Problem.main(tmpuhv5ex9g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9l3icwe6.scala:42:18\
    \ --------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800226
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val even = words.filter(_.toLowerCase == \"even\")\n            val odd\
    \ = words.filter(_.toLowerCase == \"odd\")\n            val evenCount = even.map(_.length).sum\n\
    \            val oddCount = odd.map(_.length).sum\n            Right(evenCount\
    \ + oddCount)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppyu8k4yk.scala:27)\n\tat Problem.main(tmppyu8k4yk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.length)\n\
    \        else if (words.length == 1) Right(words.length)\n        else if (words.length\
    \ == 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else if (words.length\
    \ == 26) Right(words.length)\n        else if (words.length == 27) Right(words.length)\n\
    \        else if (words.length == 28) Right(words.length)\n        else if (words.length\
    \ == 29) Right(words.length)\n        else if (words.length == 30) Right(words.length)\n\
    \        else if (words.length == 31) Right(words.length)\n        else if (words.length\
    \ == 32) Right(words.length)\n        else if (words.length == 33) Right(words.length)\n\
    \        else if (words.length == 34) Right(words.length)\n        else if (words.length\
    \ == 35) Right(words.length)\n        else if (words.length == 36) Right(words.length)\n\
    \        else if (words.length == 37) Right(words.length)\n        else if (words.length\
    \ == 38) Right(words.length)\n        else if (words.length == 39) Right(words.length)\n\
    \        else if (words.length == 40) Right(words.length)\n        else if (words.length\
    \ == 41) Right(words.length)\n        else if (words.length == 42) Right(words.length)\n\
    \        else if (words.length == 43) Right\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaawsib2d.scala:59:13\
    \ --------------------\e[0m\e[0m\n\e[31m59 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.length == \e[31m43\e[0m) Right\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Unit\n\e[31m   |\e[0m             Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m             Maybe you are missing\
    \ an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Left(List.empty)\n     \
    \   else if (words.size == 1) Right(words.head.length)\n        else Left(words.map(_.length).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkp3tx59q.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words.map(_.length).sum)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Found:    Int\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        val wordList = words.toList\n        if (wordList.length == 0) Right(words.size)\n\
    \        val evenWords = wordList.filter(word => word.forall(c => c.isLetter)\
    \ && c.toLower.toInt % 2 == 0)\n        if (evenWords.isEmpty) Right(words.size)\n\
    \        val oddWords = wordList.filter(word => word.forall(c => c.isLetter) &&\
    \ c.toLower.toInt % 2 != 0)\n        if (oddWords.isEmpty) Right(words.size)\n\
    \        val evenWordsCount = evenWords.map(word => word.length).sum\n       \
    \ val oddWordsCount = oddWords.map(word => word.length).sum\n        Right(evenWordsCount\
    \ + oddWordsCount)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu4lfaunb.scala:19:80 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevenWords\e[0m = wordList.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower.toInt %\
    \ \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                                            Not found: c\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu4lfaunb.scala:21:79\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36moddWords\e[0m = wordList.filter(\e[36mword\e[0m => word.forall(\e[36mc\e[0m\
    \ => c.isLetter) && c.toLower.toInt % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \                      Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Right(words.size)\n    \
    \    else if (words.size == 1) Right(words.head.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp95veqkx3.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800276
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else Right(words.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5c2khv_l.scala:21)\n\tat Problem.main(tmp5c2khv_l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ evenWords = words.filter(word => word.forall(c => c.isLetter) && c.toLower.toInt\
    \ % 2 == 0)\n            val oddWords = words.filter(word => word.forall(c =>\
    \ c.isLetter) && c.toLower.toInt % 2 != 0)\n            val evenLetters = evenWords.map(word\
    \ => word.length).sum\n            val oddLetters = oddWords.map(word => word.length).sum\n\
    \            val evenLettersCount = evenLetters.toLong\n            val oddLettersCount\
    \ = oddLetters.toLong\n            val evenLettersCountStr = evenLetters.toString\n\
    \            val oddLettersCountStr = oddLetters.toString\n            val evenLettersCountStrLen\
    \ = evenLettersCountStr.length\n            val oddLettersCountStrLen = oddLettersCountStr.length\n\
    \            val evenLettersCountStrLenStr = evenLettersCountStr.length.toString\n\
    \            val oddLettersCountStrLenStr = oddLettersCountStr.length.toString\n\
    \            val evenLettersCountStrLenLong = evenLettersCountStrLen.toLong\n\
    \            val oddLettersCountStrLenLong = oddLettersCountStrLen.toLong\n  \
    \          val evenLettersCountStrLenLongStr = evenLettersCountStrLenLong.toString\n\
    \            val oddLettersCountStrLenLongStr = oddLettersCountStrLenLong.toString\n\
    \            val evenLettersCountStrLenLongLong = evenLettersCountStrLenLong.toLong\n\
    \            val oddLettersCountStrLenLongLong = oddLettersCountStrLenLong.toLong\n\
    \            val evenLettersCountStrLenLongLongStr = evenLettersCountStrLenLongLong.toString\n\
    \            val oddLettersCountStrLenLongLongStr = oddLettersCountStrLenLongLong.toString\n\
    \            val evenLettersCountStrLenLongLongLong = evenLettersCountStrLenLongLong.toLong\n\
    \            val oddLettersCountStrLenLongLongLong = oddLettersCountStrLenLongLong.toLong\n\
    \            val evenLettersCountStrLenLongLongLongStr = evenLettersCountStrLenLongLongLongStr.toString\n\
    \            val oddLettersCountStrLenLongLongLongStr =\n                oddLettersCountStrLenLongLongLongStr.toString\n\
    \            val evenLettersCountStrLenLongLongLongLong = evenLettersCountStr\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5x3tdeav.scala:58:0 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5x3tdeav.scala:19:81\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenWords\e[0m = words.filter(\e[36mword\e[0m => word.forall(\e[36mc\e\
    [0m => c.isLetter) && c.toLower.toInt % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \                        Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5x3tdeav.scala:20:80 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower.toInt %\
    \ \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                                            Not found: c\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5x3tdeav.scala:41:56\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCountStrLenLongLongLongStr\e[0m = evenLettersCountStrLenLongLongLongStr.toString\n\
    \e[31m\e[31m   |\e[0m                                                        ^\e\
    [0m\n\e[31m   |\e[0m        Recursive \e[33mvalue\e[0m \e[35mevenLettersCountStrLenLongLongLongStr\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5x3tdeav.scala:43:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m                oddLettersCountStrLenLongLongLongStr.toString\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m         Recursive\
    \ \e[33mvalue\e[0m \e["
  stdout: ''
  timestamp: 1659800278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(x => x.toLowerCase == \"even\")\n          \
    \  val odd = words.filter(x => x.toLowerCase == \"odd\")\n            val evenOdd\
    \ = even.zip(odd)\n            val evenOddCount = evenOdd.map(x => x._1.toLowerCase\
    \ + x._2.toLowerCase + x._1.toLowerCase + x._2.toLowerCase + x._1.toLowerCase\
    \ + x._2.toLowerCase + x._1.toLowerCase + x._2.toLowerCase + x._1.toLowerCase\
    \ + x._2.toLowerCase + x._1.toLowerCase + x._2.toLowerCase + x._1.toLowerCase\
    \ + x._2.toLowerCase + x._1.toLowerCase + x._2.toLowerCase + x._1.toLowerCase\
    \ + x._2.toLowerCase + x._1.toLowerCase + x._2.toLowerCase + x._1.toLowerCase\
    \ + x._2.toLowerCase + x._1.toLowerCase + x._2.toLowerCase + x._1.toLowerCase\
    \ + x._2.toLowerCase + x._1.toLowerCase + x._2.toLowerCase + x._1.toLowerCase\
    \ + x._2.toLowerCase + x._1.toLowerCase + x._2.toLowerCase + x._1.toLowerCase\
    \ + x._2.toLowerCase + x._1.toLowerCase + x._2.toLowerCase + x._1.toLowerCase\
    \ + x._2.toLowerCase + x._1.toLowerCase + x._2.toLowerCase + x._1.toLowerCase\
    \ + x._2.toLowerCase + x._1.toLowerCase + x._2.toLowerCase + x._1.toLowerCase\
    \ + x._2.toLowerCase + x._1.toLowerCase + x._2.toLowerCase + x._1.toLowerCase\
    \ + x._2.toLowerCase + x._1.toLowerCase + x._2.toLowerCase + x._1.toLowerCase\
    \ + x._2.toLowerCase + x._1.toLowerCase + x._2.toLowerCase + x._1.toLowerCase\
    \ + x._2.toLowerCase + x._1.toLowerCase + x._2.toLowerCase + x._1.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuzfx62hk.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpuzfx62hk.scala:36:0 ----------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuzfx62hk.scala:35:1 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpuzfx62hk.scala:24:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m24 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(0) else {\n  \
    \          val counts = words.map(_.toLowerCase).groupBy(identity).mapValues(_.length)\n\
    \            val odd = counts.filter(_._2 % 2 == 1).map(_._1).sum\n          \
    \  Right(odd)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpy8xidtqf.scala:18:64 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = counts.filter(_._2\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).map(_._1).sum\n\e[31m\e[31m   |\e[0m       \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                No implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                where:    B is a type variable with constraint >: String\n\
    \e[31m   |\e[0m                .\n1 error found\n"
  stdout: ''
  timestamp: 1659800277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.isEmpty) Left(List())\n\
    \        else if (words.size == 1) Right(words.head.toLong)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo4fjvzue.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0)\n            Left(List[String]())\n\
    \        else if (words.length == 1)\n            Right(words.length)\n      \
    \  else {\n            val wordList = words.toList\n            val wordList2\
    \ = wordList.map(_.toLowerCase)\n            val wordList3 = wordList2.filter(x\
    \ => x.contains(\",\"))\n            val wordList4 = wordList3.filter(x => x.contains(\"\
    a\"))\n            val wordList5 = wordList4.filter(x => x.contains(\"b\"))\n\
    \            val wordList6 = wordList5.filter(x => x.contains(\"c\"))\n      \
    \      val wordList7 = wordList6.filter(x => x.contains(\"d\"))\n            val\
    \ wordList8 = wordList7.filter(x => x.contains(\"e\"))\n            val wordList9\
    \ = wordList8.filter(x => x.contains(\"f\"))\n            val wordList10 = wordList9.filter(x\
    \ => x.contains(\"g\"))\n            val wordList11 = wordList10.filter(x => x.contains(\"\
    h\"))\n            val wordList12 = wordList11.filter(x => x.contains(\"i\"))\n\
    \            val wordList13 = wordList12.filter(x => x.contains(\"j\"))\n    \
    \        val wordList14 = wordList13.filter(x => x.contains(\"k\"))\n        \
    \    val wordList15 = wordList14.filter(x => x.contains(\"l\"))\n            val\
    \ wordList16 = wordList15.filter(x => x.contains(\"m\"))\n            val wordList17\
    \ = wordList16.filter(x => x.contains(\"n\"))\n            val wordList18 = wordList17.filter(x\
    \ => x.contains(\"o\"))\n            val wordList19 = wordList18.filter(x => x.contains(\"\
    p\"))\n            val wordList20 = wordList19.filter(x => x.contains(\"q\"))\n\
    \            val wordList21 = wordList20.filter(x => x.contains(\"r\"))\n    \
    \        val wordList22 = wordList21.filter(x => x.contains(\"s\"))\n        \
    \    val wordList23 = wordList22.filter(x => x.contains(\"t\"))\n            val\
    \ wordList24 = wordList23.filter(x => x.contains(\"u\"))\n            val wordList25\
    \ = wordList24.filter(x => x.contains(\"v\"))\n            val wordList26 = wordList25.filter(x\
    \ => x.contains(\"w\"))\n            val wordList27 = wordList26.filter(x => x.contains(\"\
    x\"))\n            val wordList28 = wordList27.filter(x => x.\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdp30a68u.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpdp30a68u.scala:62:0 ----------------------------\e[0m\e[0m\n\e[31m62\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdp30a68u.scala:61:1 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpdp30a68u.scala:50:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m50 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ wordList = words.toList\n            val evenWords = wordList.filter(word =>\
    \ word.forall(c => c.isLetter) && word.forall(c => c.isLower) && word.forall(c\
    \ => c.toString.length == 1))\n            val oddWords = wordList.filter(word\
    \ => word.forall(c => c.isLetter) && word.forall(c => c.isLower) && word.forall(c\
    \ => c.toString.length == 2))\n            val evenLetters = evenWords.map(word\
    \ => word.map(c => c.toString.toInt).sum)\n            val oddLetters = oddWords.map(word\
    \ => word.map(c => c.toString.toInt).sum)\n            val evenLettersCount =\
    \ evenLetters.sum\n            val oddLettersCount = oddLetters.sum\n        \
    \    val evenLettersCountString = evenLetters.map(c => c.toString).sum.toString\n\
    \            val oddLettersCountString = oddLetters.map(c => c.toString).sum.toString\n\
    \            val evenLettersCountString = evenLetters.map(c => c.toString).sum.toString\n\
    \            val oddLettersCountString = oddLetters.map(c => c.toString).sum.toString\n\
    \            val evenLettersCountString = evenLetters.map(c => c.toString).sum.toString\n\
    \            val oddLettersCountString = oddLetters.map(c => c.toString).sum.toString\n\
    \            val evenLettersCountString = evenLetters.map(c => c.toString).sum.toString\n\
    \            val oddLettersCountString = oddLetters.map(c => c.toString).sum.toString\n\
    \            val evenLettersCountString = evenLetters.map(c => c.toString).sum.toString\n\
    \            val oddLettersCountString = oddLetters.map(c => c.toString).sum.toString\n\
    \            val evenLettersCountString = evenLetters.map(c => c.toString).sum.toString\n\
    \            val oddLettersCountString = oddLetters.map(c => c.toString).sum.toString\n\
    \            val evenLettersCountString = evenLetters.map(c => c.toString).sum.toString\n\
    \            val oddLettersCountString = oddLetters.map(c => c.toString).sum.toString\n\
    \            val evenLettersCountString = evenLetters.map(c => c.toString).sum.toString\n\
    \            val oddLettersCountString = oddLetters.map(c => c.toString).sum.toString\n\
    \            val evenLettersCountString = evenLetters.map(c => c.toString).\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqpoozih3.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpqpoozih3.scala:56:0 ----------------------------\e[0m\e[0m\n\e[31m56\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqpoozih3.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountString\e\
    [0m = evenLetters.map(\e[36mc\e[0m => c.toString).sum.toString\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountString is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqpoozih3.scala:29:16 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountString\e\
    [0m = oddLetters.map(\e[36mc\e[0m => c.toString).sum.toString\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountString is already defined as \e[33mvalue\e\
    [0m \e[35moddLettersCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqpoozih3.scala:30:16 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountString\e\
    [0m = evenLetters.map(\e[36mc\e[0m => c.toString).sum.toString\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountString is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e"
  stdout: ''
  timestamp: 1659800283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.length)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val lowerCaseWords = words.map(_.toLowerCase)\n            val evenOrderWords\
    \ = lowerCaseWords.filter(word => word.count(_ == 'a') % 2 == 0)\n           \
    \ val oddOrderWords = lowerCaseWords.filter(word => word.count(_ == 'a') % 2 !=\
    \ 0)\n            val evenOrderWordsCount = evenOrderWords.count(_ == 'a')\n \
    \           val oddOrderWordsCount = oddOrderWords.count(_ == 'a')\n         \
    \   val evenOrderWordsCountString = evenOrderWordsCount.toString\n           \
    \ val oddOrderWordsCountString = oddOrderWordsCount.toString\n            val\
    \ evenOrderWordsCountLong = Long.parseLong(evenOrderWordsCountString)\n      \
    \      val oddOrderWordsCountLong = Long.parseLong(oddOrderWordsCountString)\n\
    \            val evenOrderWordsCountLongString = evenOrderWordsCountLong.toString\n\
    \            val oddOrderWordsCountLongString = oddOrderWordsCountLong.toString\n\
    \            val evenOrderWordsCountLongLong = Long.parseLong(evenOrderWordsCountLongString)\n\
    \            val oddOrderWordsCountLongLong = Long.parseLong(oddOrderWordsCountLongString)\n\
    \            val evenOrderWordsCountLongLongString = evenOrderWordsCountLongLong.toString\n\
    \            val oddOrderWordsCountLongLongString = oddOrderWordsCountLongLong.toString\n\
    \            val evenOrderWordsCountLongLongLong = Long.parseLong(evenOrderWordsCountLongLongString)\n\
    \            val oddOrderWordsCountLongLongLong = Long.parseLong(oddOrderWordsCountLongLongString)\n\
    \            val evenOrderWordsCountLongLongLongString = evenOrderWordsCountLongLongLong.toString\n\
    \            val oddOrderWordsCountLongLongLongString = oddOrderWordsCountLongLongLong.toString\n\
    \            val evenOrderWordsCountLongLongLongLong = Long.parseLong(evenOrderWordsCountLongLongLongString)\n\
    \            val oddOrderWordsCountLongLongLongLong = Long.parseLong(oddOrderWordsCountLongLongLongString)\n\
    \            val evenOrderWordsCountLongLongLongLongString = evenOrderWordsCountLongLongLongLongLong.toString\n\
    \            val oddOrderWordsCountLongLongLongLongString = oddOrderWordsCountLongLongLongLongLong.toString\n\
    \            val evenOrder\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8wsxgyz0.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8wsxgyz0.scala:56:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m56 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmp8wsxgyz0.scala:22:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \     \e[33mval\e[0m \e[36mevenOrderWordsCount\e[0m = evenOrderWords.count(_ ==\
    \ \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8wsxgyz0.scala:23:57\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \     \e[33mval\e[0m \e[36moddOrderWordsCount\e[0m = oddOrderWords.count(_ ==\
    \ \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp8wsxgyz0.scala:26:47 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m            \e[33mval\e[0m \e[36mevenOrderWordsCountLong\e[0m = Long.parseLong(evenOrderWordsCountString)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value parseLong is not a member\
    \ of object Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8wsxgyz0.scala:27:46\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddOrderWordsCountLong\e[0m = Long.parseLong(oddOrderWordsCountString)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value parseLong is not a member\
    \ of object Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8wsxgyz0.scala:30:51\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenOrderWordsCoun"
  stdout: ''
  timestamp: 1659800284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ wordList = new mutable.ListBuffer[String]()\n            words.foreach(word\
    \ => wordList += word)\n            val evenWords = wordList.filter(word => word.forall(c\
    \ => c.isLetter) && word.count(_ == 'a') % 2 == 0)\n            val oddWords =\
    \ wordList.filter(word => word.forall(c => c.isLetter) && word.count(_ == 'a')\
    \ % 2 != 0)\n            val evenLetters = evenWords.map(word => word.count(_\
    \ == 'a'))\n            val oddLetters = oddWords.map(word => word.count(_ ==\
    \ 'a'))\n            val evenLettersCount = evenLetters.sum\n            val oddLettersCount\
    \ = oddLetters.sum\n            val evenLettersCountString = evenLetters.mkString(\"\
    ,\")\n            val oddLettersCountString = oddLetters.mkString(\",\")\n   \
    \         val evenLettersCountLong = Long.parseLong(evenLettersCountString)\n\
    \            val oddLettersCountLong = Long.parseLong(oddLettersCountString)\n\
    \            val evenLettersCountLongString = evenLettersCountLong.toString\n\
    \            val oddLettersCountLongString = oddLettersCountLong.toString\n  \
    \          val evenLettersCountLongLong = Long.parseLong(evenLettersCountLongString)\n\
    \            val oddLettersCountLongLong = Long.parseLong(oddLettersCountLongString)\n\
    \            val evenLettersCountLongLongString = evenLettersCountLongLong.toString\n\
    \            val oddLettersCountLongLongString = oddLettersCountLongLong.toString\n\
    \            val evenLettersCountLongLongLong = Long.parseLong(evenLettersCountLongLongString)\n\
    \            val oddLettersCountLongLongLong = Long.parseLong(oddLettersCountLongLongString)\n\
    \            val evenLettersCountLongLongLongString = evenLettersCountLongLongLong.toString\n\
    \            val oddLettersCountLongLongLongString = oddLettersCountLongLongLong.toString\n\
    \            val evenLettersCountLongLongLongLong = Long.parseLong(evenLettersCountLongLongLongString)\n\
    \            val oddLettersCountLongLongLongLong = Long.parseLong(oddLettersCountLongLongLongString)\n\
    \            val evenLettersCountLongLongLongLongString = evenLettersCountLongLongLongLongLong.toString\n\
    \            val oddLettersCount\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpik_bk_jp.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpik_bk_jp.scala:58:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpik_bk_jp.scala:19:31 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpik_bk_jp.scala:29:44\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLettersCountLong\e[0m = Long.parseLong(evenLettersCountString)\n\e\
    [31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          value parseLong is not a member of object\
    \ Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpik_bk_jp.scala:30:43 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountLong\e\
    [0m = Long.parseLong(oddLettersCountString)\n\e[31m\e[31m   |\e[0m           \
    \                           ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \             value parseLong is not a member of object Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpik_bk_jp.scala:33:48 ------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountLongLong\e\
    [0m = Long.parseLong(evenLettersCountLongString)\n\e[31m\e[31m   |\e[0m      \
    \                                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       value parseLong is not a member of object Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpik_bk_jp.scala:34:47 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659800282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val wordList = words.toList\n            val evenWords = wordList.filter(word\
    \ => word.forall(_.isLetter) && word.forall(_.isLower))\n            val oddWords\
    \ = wordList.filter(word => word.forall(_.isLetter) && word.forall(_.isLower)\
    \ && !word.forall(_.isUpper))\n            val evenLetters = evenWords.filter(word\
    \ => word.forall(_.isLetter)).length\n            val oddLetters = oddWords.filter(word\
    \ => word.forall(_.isLetter)).length\n            val evenLettersCount = evenLetters.toLong\n\
    \            val oddLettersCount = oddLetters.toLong\n            val evenLettersCountString\
    \ = evenLetters.toString.toLong\n            val oddLettersCountString = oddLetters.toString.toLong\n\
    \            val evenLettersCountString = evenLetters.toString.toLong\n      \
    \      val oddLettersCountString = oddLetters.toString.toLong\n            val\
    \ evenLettersCountString = evenLetters.toString.toLong\n            val oddLettersCountString\
    \ = oddLetters.toString.toLong\n            val evenLettersCountString = evenLetters.toString.toLong\n\
    \            val oddLettersCountString = oddLetters.toString.toLong\n        \
    \    val evenLettersCountString = evenLetters.toString.toLong\n            val\
    \ oddLettersCountString = oddLetters.toString.toLong\n            val evenLettersCountString\
    \ = evenLetters.toString.toLong\n            val oddLettersCountString = oddLetters.toString.toLong\n\
    \            val evenLettersCountString = evenLetters.toString.toLong\n      \
    \      val oddLettersCountString = oddLetters.toString.toLong\n            val\
    \ evenLettersCountString = evenLetters.toString.toLong\n            val oddLettersCountString\
    \ = oddLetters.toString.toLong\n            val evenLettersCountString = evenLetters.toString.toLong\n\
    \            val oddLettersCountString = oddLetters.toString.toLong\n        \
    \    val evenLettersCountString = evenLetters.toString.toLong\n            val\
    \ oddLettersCountString = oddLetters.toString.toLong\n            val evenLettersCountString\
    \ = evenLetters.toString.toLong\n            val oddLettersCountString = oddLetters.toString.toLong\n\
    \            val evenLettersCountString = evenLetters.toString.toLong\n      \
    \      val odd\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdq1wil0o.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdq1wil0o.scala:63:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdq1wil0o.scala:28:16 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountString\e[0m = evenLetters.toString.toLong\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountString is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdq1wil0o.scala:29:16 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountString\e\
    [0m = oddLetters.toString.toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountString is already defined as \e[33mvalue\e\
    [0m \e[35moddLettersCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdq1wil0o.scala:30:16 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountString\e\
    [0m = evenLetters.toString.toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountString is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdq1wil0o.scala:31:16 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36moddL"
  stdout: ''
  timestamp: 1659800283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val letters = words.map(_.toLowerCase).toSet\n            val oddLetters\
    \ = letters.filter(_ % 2 != 0)\n            val evenLetters = letters.filter(_\
    \ % 2 == 0)\n            val evenLettersCount = evenLetters.size\n           \
    \ val oddLettersCount = oddLetters.size\n            if (evenLettersCount == oddLettersCount)\
    \ Right(evenLettersCount)\n            else Left(List(evenLetters, oddLetters))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpglkn22kt.scala:20:46 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = letters.filter(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                       ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpglkn22kt.scala:21:47\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLetters\e[0m = letters.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                             ^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpglkn22kt.scala:25:27 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33melse\e[0m Left(List(evenLetters, oddLetters))\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    (evenLetters : Set[String])\n\e[31m  \
    \ |\e[0m                           Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpglkn22kt.scala:25:40 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33melse\e[0m Left(List(evenLetters, oddLetters))\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    Found:    (oddLetters : Set[String])\n\
    \e[31m   |\e[0m                                    Required: String\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compi"
  stdout: ''
  timestamp: 1659800284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val wordList = new mutable.ListBuffer[String]()\n            val wordCounts\
    \ = new mutable.ListBuffer[Long]()\n            words.foreach(word => {\n    \
    \            if (word.length == 0) return\n                val wordList = wordList\
    \ :+ word\n                val wordCount = word.length\n                wordCounts\
    \ :+= wordCount\n            })\n            val wordCounts = wordCounts.toList\n\
    \            val wordCountSum = wordCounts.sum\n            val wordCountSum =\
    \ wordCountSum.toLong\n            if (wordCountSum == 0) Left(List[String]())\n\
    \            else if (wordCountSum == 1) Right(wordList(0))\n            else\
    \ {\n                val wordCounts = wordCounts.sortBy(_._1)\n              \
    \  val wordCountSum = wordCounts.last._1\n                val wordCountSum = wordCountSum.toLong\n\
    \                if (wordCountSum == 0) Left(List[String]())\n               \
    \ else if (wordCountSum == 1) Right(wordList(0))\n                else {\n   \
    \                 val wordCounts = wordCounts.sortBy(_._2)\n                 \
    \   val wordCountSum = wordCounts.last._2\n                    val wordCountSum\
    \ = wordCountSum.toLong\n                    if (wordCountSum == 0) Left(List[String]())\n\
    \                    else if (wordCountSum == 1) Right(wordList(0))\n        \
    \            else {\n                        val wordCounts = wordCounts.sortBy(_._3)\n\
    \                        val wordCountSum = wordCounts.last._3\n             \
    \           val wordCountSum = wordCountSum.toLong\n                        if\
    \ (wordCountSum == 0) Left(List[String]())\n                        else if (wordCountSum\
    \ == 1) Right(wordList(0))\n                        else {\n                 \
    \           val wordCounts = wordCounts.sortBy(_._4)\n                       \
    \     val wordCountSum = wordCounts.last._4\n                            val wordCountSum\
    \ = wordCountSum.toLong\n                            if (wordCountSum == 0) Left(List[String]())\n\
    \                            else if (wordCountSum == 1) Right(wordList(0))\n\
    \                            else {\n                                val wordCounts\
    \ = wordCounts.sortBy(_._5)\n                                val wordCountSum\
    \ = wordCounts.last._5\n                                val wordCountSum = wordCountSum.toLong\n\
    \                                if (wordCountSum == 0) Left(List[String]())\n\
    \                                else if (wordCountSum == 1) Right(wordList(0))\n\
    \                                \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfjy98cr8.scala:76:0 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfjy98cr8.scala:27:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e\
    [0m \e[36mwordCounts\e[0m = wordCounts.toList\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mwordCounts is already\
    \ defined as \e[33mvalue\e[0m \e[35mwordCounts\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfjy98cr8.scala:29:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e\
    [0m \e[36mwordCountSum\e[0m = wordCountSum.toLong\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mwordCountSum\
    \ is already defined as \e[33mvalue\e[0m \e[35mwordCountSum\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfjy98cr8.scala:19:31\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36mwordList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfjy98cr8.scala:20:33 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mwordCounts\e[0m = \e\
    [33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfjy98cr8.scala:22:38 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            "
  stdout: ''
  timestamp: 1659800284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length == 0) Right(words.size)\n     \
    \   else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) Right(\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4c104vqx.scala:63:43 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.length ==\
    \ \e[31m47\e[0m) Right(\n\e[31m\e[31m   |\e[0m                               \
    \            ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        val noSpaceWords = words.filter(_.nonEmpty)\n  \
    \      val commaWords = words.filter(_.contains(\",\"))\n        val letterWords\
    \ = words.filter(_.toLowerCase contains \"a\")\n        val oddLetterWords = words.filter(_.toLowerCase\
    \ contains \"a\" && (_.toLowerCase contains \"b\" || (_.toLowerCase contains \"\
    c\" || (_.toLowerCase contains \"d\" || (_.toLowerCase contains \"e\" || (_.toLowerCase\
    \ contains \"f\" || (_.toLowerCase contains \"g\" || (_.toLowerCase contains \"\
    h\" || (_.toLowerCase contains \"i\" || (_.toLowerCase contains \"j\" || (_.toLowerCase\
    \ contains \"k\" || (_.toLowerCase contains \"l\" || (_.toLowerCase contains \"\
    m\" || (_.toLowerCase contains \"n\" || (_.toLowerCase contains \"o\" || (_.toLowerCase\
    \ contains \"p\" || (_.toLowerCase contains \"q\" || (_.toLowerCase contains \"\
    r\" || (_.toLowerCase contains \"s\" || (_.toLowerCase contains \"t\" || (_.toLowerCase\
    \ contains \"u\" || (_.toLowerCase contains \"v\" || (_.toLowerCase contains \"\
    w\" || (_.toLowerCase contains \"x\" || (_.toLowerCase contains \"y\" || (_.toLowerCase\
    \ contains \"z\" || (_.toLowerCase contains \"A\" || (_.toLowerCase contains \"\
    B\" || (_.toLowerCase contains \"C\" || (_.toLowerCase contains \"D\" || (_.toLowerCase\
    \ contains \"E\" || (_.toLowerCase contains \"F\" || (_.toLowerCase contains \"\
    G\" || (_.toLowerCase contains \"H\" || (_.toLowerCase contains \"I\" || (_.toLowerCase\
    \ contains \"J\" || (_.toLowerCase contains \"K\" || (_.toLowerCase contains \"\
    L\" || (_.toLowerCase contains \"M\" || (_.toLowerCase contains \"N\" || (_.toLowerCase\
    \ contains \"O\" || (_.toLowerCase contains \"P\" || (_.toLowerCase contains \"\
    Q\" || (_.toLowerCase contains \"R\" || (_.toLowerCase contains \"S\" || (_.toLowerCase\
    \ contains \"T\" || (_.toLowerCase contains \"U\" || (_.toLowerCase contains \"\
    V\" || (_.toLowerCase contains \"W\" || (_.toLowerCase contains \"X\" || (_.toLowerCase\
    \ contains \"Y\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5cnq2_xs.scala:19:1615 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36moddLetterWords\e[0m = words.filter(_.toLowerCase\
    \ contains \e[31m\"a\"\e[0m && (_.toLowerCase contains \e[31m\"b\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"c\"\e[0m || (_.toLowerCase contains \e[31m\"d\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"e\"\e[0m || (_.toLowerCase contains \e[31m\"f\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"g\"\e[0m || (_.toLowerCase contains \e[31m\"h\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"i\"\e[0m || (_.toLowerCase contains \e[31m\"j\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"k\"\e[0m || (_.toLowerCase contains \e[31m\"l\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"m\"\e[0m || (_.toLowerCase contains \e[31m\"n\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"o\"\e[0m || (_.toLowerCase contains \e[31m\"p\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"q\"\e[0m || (_.toLowerCase contains \e[31m\"r\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"s\"\e[0m || (_.toLowerCase contains \e[31m\"t\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"u\"\e[0m || (_.toLowerCase contains \e[31m\"v\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"w\"\e[0m || (_.toLowerCase contains \e[31m\"x\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"y\"\e[0m || (_.toLowerCase contains \e[31m\"z\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"A\"\e[0m || (_.toLowerCase contains \e[31m\"B\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"C\"\e[0m || (_.toLowerCase contains \e[31m\"D\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"E\"\e[0m || (_.toLowerCase contains \e[31m\"F\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"G\"\e[0m || (_.toLowerCase contains \e[31m\"H\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"I\"\e[0m || (_.toLowerCase contains \e[31m\"J\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"K\"\e[0m || (_.toLowerCase contains \e[31m\"L\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"M\"\e[0m || (_.toLowerCase contains \e[31m\"N\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"O\"\e[0m || (_.toLowerCase contains \e[31m\"P\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"Q\"\e[0m || (_.toLowerCase contains \e[31m\"R\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"S\"\e[0m || (_.toLowerCase contains \e[31m\"T\"\e[0m || (_.toLowerCase\
    \ contains \e[31m\"U\"\e[0m "
  stdout: ''
  timestamp: 1659800283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val evenWords = words.filter(word => word.forall(_.isLetter) && word.forall(_.isLower))\n\
    \            val oddWords = words.filter(word => word.forall(_.isLetter) && !word.forall(_.isLower))\n\
    \            val evenLetters = evenWords.map(word => word.filter(_.isLetter).length)\n\
    \            val oddLetters = oddWords.map(word => word.filter(_.isLetter).length)\n\
    \            val evenLettersSum = evenLetters.sum\n            val oddLettersSum\
    \ = oddLetters.sum\n            if (evenLettersSum == 0) Right(evenLettersSum)\n\
    \            else if (oddLettersSum == 0) Left(oddLettersSum)\n            else\
    \ Left(evenLettersSum + oddLettersSum)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp43s27qp_.scala:26:46\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33melse\e[0m \e\
    [33mif\e[0m (oddLettersSum == \e[31m0\e[0m) Left(oddLettersSum)\n\e[31m\e[31m\
    \   |\e[0m                                              ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                         Found:    (oddLettersSum\
    \ : Int)\n\e[31m   |\e[0m                                         Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp43s27qp_.scala:27:22\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33melse\e[0m Left(evenLettersSum\
    \ + oddLettersSum)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Int\n\e[31m   |\e[0m     \
    \                 Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").map(_.toLowerCase)\n        if (words.isEmpty) Left(List())\n\
    \        else if (words.size == 1) Right(words.head)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcawjmw9b.scala:17:46\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.size == \e[31m1\e[0m) Right(words.head)\n\e[31m\e[31m   |\e[0m    \
    \                                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                Found:    String\n\e[31m   |\e[0m           \
    \                             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpcawjmw9b.scala:18:18 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (words\
    \ : Array[String])\n\e[31m   |\e[0m                  Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val letters = txt.split(\"[,]\").length\n            val odd = letters\
    \ % 2\n            val even = letters % 2 == 0\n            if (even) Right(words.size)\n\
    \            else Left(words.take(words.length - odd).mkString(\",\"))\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2j_kshcj.scala:23:61\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m Left(words.take(words.length\
    \ - odd).mkString(\e[31m\",\"\e[0m))\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    String\n\e[31m   |\e[0m                      Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.length)\n\
    \        else if (words.length == 1) Right(words.head.length)\n        else {\n\
    \            val even = words.filter(w => w.length == w.toLowerCase * 2)\n   \
    \         val odd = words.filter(w => w.length == w.toLowerCase * 2 + 1)\n   \
    \         val evenCount = even.filter(w => w.toLowerCase % 2 == 0).length\n  \
    \          val oddCount = odd.filter(w => w.toLowerCase % 2 == 1).length\n   \
    \         Right(evenCount + oddCount)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpn5ffnj49.scala:19:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase * \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m         Values of types Int and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpn5ffnj49.scala:20:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase * \e[31m2\e[0m + \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn5ffnj49.scala:21:59\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenCount\e[0m = even.filter(\e[36mw\e[0m => w.toLowerCase % \e[31m2\e\
    [0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m                           \
    \                  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member\
    \ of String, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mThe following import might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn5ffnj49.scala:22:57\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddCount\e[0m = odd.filter(\e[36mw\e[0m => w.toLowerCase % \e[31m2\e[0m\
    \ == \e[31m1\e[0m).length\n\e[31m\e[31m   |\e[0m                             \
    \              ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of\
    \ String, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659800286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.length)\n\
    \        else if (words.length == 1) Right(words.length)\n        else if (words.length\
    \ == 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8pyi2kby.scala:42:18\
    \ --------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.head.length)\n        else {\n          \
    \  val even = words.filter(x => x.toLowerCase == \"even\")\n            val odd\
    \ = words.filter(x => x.toLowerCase == \"odd\")\n            val evenLength =\
    \ even.map(_.length).sum\n            val oddLength = odd.map(_.length).sum\n\
    \            if (evenLength == oddLength) Right(evenLength)\n            else\
    \ Left(List(evenLength, oddLength))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps4z_l2cl.scala:24:27\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33melse\e[0m Left(List(evenLength,\
    \ oddLength))\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Found:    (evenLength : Int)\n\e[31m\
    \   |\e[0m                           Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmps4z_l2cl.scala:24:39 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33melse\e[0m Left(List(evenLength, oddLength))\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                       Found:    (oddLength : Int)\n\
    \e[31m   |\e[0m                                       Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val letters = words.map(_.toLowerCase + _.toUpperCase).filter(_.isLetter)\n\
    \            val odd = letters.count(_ % 2 != 0)\n            Right(odd)\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpp5v0lxge.scala:19:36 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = words.map(_.toLowerCase\
    \ + _.toUpperCase).filter(_.isLetter)\n\e[31m\e[31m   |\e[0m                 \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                           Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- Error: /tmp/tmpp5v0lxge.scala:19:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = words.map(_.toLowerCase\
    \ + _.toUpperCase).filter(_.isLetter)\n\e[31m\e[31m   |\e[0m                 \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                      No ClassTag available for B\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                          where:    B is a\
    \ type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ splitWords = words.map(_.toLowerCase)\n            val even = splitWords.filter(x\
    \ => x.forall(_.isLetter) && x.forall(x => x.toLowerCase == 'a' || x.toLowerCase\
    \ == 'b' || x.toLowerCase == 'c' || x.toLowerCase == 'd' || x.toLowerCase == 'e'\
    \ || x.toLowerCase == 'f' || x.toLowerCase == 'g' || x.toLowerCase == 'h' || x.toLowerCase\
    \ == 'i' || x.toLowerCase == 'j' || x.toLowerCase == 'k' || x.toLowerCase == 'l'\
    \ || x.toLowerCase == 'm' || x.toLowerCase == 'n' || x.toLowerCase == 'o' || x.toLowerCase\
    \ == 'p' || x.toLowerCase == 'q' || x.toLowerCase == 'r' || x.toLowerCase == 's'\
    \ || x.toLowerCase == 't' || x.toLowerCase == 'u' || x.toLowerCase == 'v' || x.toLowerCase\
    \ == 'w' || x.toLowerCase == 'x' || x.toLowerCase == 'y' || x.toLowerCase == 'z'))\n\
    \            val odd = splitWords.filter(x => x.forall(_.isLetter) && x.forall(x\
    \ => x.toLowerCase == 'a' || x.toLowerCase == 'b' || x.toLowerCase == 'c' || x.toLowerCase\
    \ == 'd' || x.toLowerCase == 'e' || x.toLowerCase == 'f' || x.toLowerCase == 'g'\
    \ || x.toLowerCase == 'h' || x.toLowerCase == 'i' || x.toLowerCase == 'j' || x.toLowerCase\
    \ == 'k' || x.toLowerCase == 'l' || x.toLowerCase == 'm' || x.toLowerCase == 'n'\
    \ || x.toLowerCase == 'o' || x.toLowerCase == 'p' || x.toLowerCase == 'q' || x.toLowerCase\
    \ == 'r' || x.toLowerCase == 's' || x.toLowerCase == 't' || x.toLowerCase == 'u'\
    \ || x.toLowerCase == 'v' || x.toLowerCase == 'w' || x.toLowerCase == 'x' || x.toLowerCase\
    \ == 'y' || x.toLowerCase == 'z'))\n            val evenCount = even.count\n \
    \           val oddCount = odd.count\n            val evenLetters = even.map(x\
    \ => x.toLowerCase + 'a' - 'a' + 1)\n            val oddLetters = odd.map(x =>\
    \ x.toLowerCase + 'a' - 'a\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpicpp0ies.scala:25:64 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = odd.map(\e\
    [36mx\e[0m => x.toLowerCase + \e[31m'a'\e[0m - \e[31m'a\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0msymbol literal 'a is no longer supported,\n\e[31m   |\e[0muse a string\
    \ literal \"a\" or an application Symbol(\"a\") instead,\n\e[31m   |\e[0mor enclose\
    \ in braces '{a} if you want a quoted expression.\n\e[31m   |\e[0mFor now, you\
    \ can also `import language.deprecated.symbolLiterals` to accept\n\e[31m   |\e\
    [0mthe idiom, but this possibility might no longer be available in the future.\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpicpp0ies.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpicpp0ies.scala:39:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m39 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpicpp0ies.scala:20:86 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = splitWords.filter(\e\
    [36mx\e[0m => x.forall(_.isLetter) && x.forall(\e[36mx\e[0m => x.toLowerCase ==\
    \ \e[31m'a'\e[0m || x.toLowerCase == \e[31m'b'\e[0m || x.toLowerCase == \e[31m'c'\e\
    [0m || x.toLowerCase == \e[31m'd'\e[0m || x.toLowerCase == \e[31m'e'\e[0m || x.toLowerCase\
    \ == \e[31m'f'\e[0m || x.toLowerCase == \e[31m'g'\e[0m || x.toLowerCase == \e\
    [31m'h'\e[0m || x.toLowerCase == \e[31m'i'\e[0m || x.toLowerCase == \e[31m'j'\e\
    [0m || x.toLowerCase == \e[31m'k'\e[0m || x.toLowerCase == \e[31m'l'\e[0m || x.toLowerCase\
    \ == \e[31m'm'\e[0m || x.toLowerCase == \e[31m'n'\e[0m || x.toLowerCase == \e\
    [31m'o'\e[0m || x.toLowerCase == \e[31m'p'\e[0m || x.toLowerCase == \e[31m'q'\e\
    [0m || x.toLowerCase == \e[31m'r'\e[0m || x.toLowerCase == \e[31m's'\e[0m || x.toLowerCase\
    \ == \e[31m't'\e[0m || x.toLowerCase == \e[31m'u'\e[0m || x.toLowerCase == \e\
    [31m'v'\e[0m || x.toLowerCase == \e[31m'w'\e["
  stdout: ''
  timestamp: 1659800291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.head.length)\n        else splitWords(words.tail).fold(Left(Nil),\
    \ Right(_))\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn3pcfpfz.scala:18:30\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m splitWords(words.tail).fold(Left(Nil),\
    \ Right(_))\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    \e[1m\e[31mArray\e[0m\e[1m\e[31m[\e\
    [0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                        Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn3pcfpfz.scala:18:45\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m splitWords(words.tail).fold(Left(Nil),\
    \ Right(_))\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Left[scala.collection.immutable.Nil.type,\
    \ Nothing]\n\e[31m   |\e[0m            Required: List[String] => Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Left(List.empty)\n     \
    \   else if (words.size == 1) Right(words.head.toLong)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7wfwmnxc.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.length)\n\
    \        else if (words.length == 1) Right(words.length)\n        else if (words.length\
    \ == 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else if (words.length\
    \ == 26) Right(words.length)\n        else if (words.length == 27) Right(words.length)\n\
    \        else if (words.length == 28) Right(words.length)\n        else if (words.length\
    \ == 29) Right(words.length)\n        else if (words.length == 30) Right(words.length)\n\
    \        else if (words.length == 31) Right(words.length)\n        else if (words.length\
    \ == 32) Right(words.length)\n        else if (words.length == 33) Right(words.length)\n\
    \        else if (words.length == 34) Right(words.length)\n        else if (words.length\
    \ == 35) Right(words.length)\n        else if (words.length == 36) Right(words.length)\n\
    \        else if (words.length == 37) Right(words.length)\n        else if (words.length\
    \ == 38) Right(words.length)\n        else if (words.length == 39) Right(words.length)\n\
    \        else if (words.length == 40) Right(words.length)\n        else if (words.length\
    \ == 41) Right(words.length)\n        else if (words.length == 42) Right(words.length)\n\
    \        else if (words.length == 43) Right\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaawsib2d.scala:59:13\
    \ --------------------\e[0m\e[0m\n\e[31m59 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.length == \e[31m43\e[0m) Right\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Unit\n\e[31m   |\e[0m             Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m             Maybe you are missing\
    \ an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        if (words.isEmpty) Left(List())\n\
    \        else if (words.size == 1) Right(words.head.toLong)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjoy7_p_y.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").map(_.toLowerCase)\n        val commas = txt.split(\",\"\
    )\n        val letters = txt.length.toLong\n        val oddLetters = letters.filter(_\
    \ % 2 != 0)\n        val evenLetters = letters.filter(_ % 2 == 0)\n        val\
    \ evenLettersCount = evenLetters.toLong\n        val oddLettersCount = oddLetters.toLong\n\
    \        val evenLettersCountString = evenLetters.mkString(\",\")\n        val\
    \ oddLettersCountString = oddLetters.mkString(\",\")\n        val evenLettersCountString\
    \ = evenLetters.mkString(\",\")\n        val oddLettersCountString = oddLetters.mkString(\"\
    ,\")\n        val evenLettersCountString = evenLetters.mkString(\",\")\n     \
    \   val evenLettersCountString = evenLetters.mkString(\",\")\n        val oddLettersCountString\
    \ = oddLetters.mkString(\",\")\n        val evenLettersCountString = evenLetters.mkString(\"\
    ,\")\n        val oddLettersCountString = oddLetters.mkString(\",\")\n       \
    \ val evenLettersCountString = evenLetters.mkString(\",\")\n        val oddLettersCountString\
    \ = oddLetters.mkString(\",\")\n        val evenLettersCountString = evenLetters.mkString(\"\
    ,\")\n        val oddLettersCountString = oddLetters.mkString(\",\")\n       \
    \ val evenLettersCountString = evenLetters.mkString(\",\")\n        val oddLettersCountString\
    \ = oddLetters.mkString(\",\")\n        val evenLettersCountString = evenLetters.mkString(\"\
    ,\")\n        val oddLettersCountString = oddLetters.mkString(\",\")\n       \
    \ val evenLettersCountString = evenLetters.mkString(\",\")\n        val oddLettersCountString\
    \ = oddLetters.mkString(\",\")\n        val evenLettersCountString = evenLetters.mkString(\"\
    ,\")\n        val oddLettersCountString = oddLetters.mkString(\",\")\n       \
    \ val evenLettersCountString = evenLetters.mkString(\",\")\n        val oddLettersCountString\
    \ = oddLetters.mkString(\",\")\n        val evenLettersCountString = evenLetters.mkString(\"\
    ,\")\n        val oddLettersCountString = oddLetters.mkString(\",\")\n       \
    \ val evenLettersCountString = evenLetters.mkString(\",\")\n        val oddLettersCountString\
    \ = oddLetters.mkString(\",\")\n        val evenLettersCountString = evenLetters.mkString(\"\
    ,\")\n        val oddLettersCountString = oddLetters.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmd6g5qiv.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmd6g5qiv.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mevenLettersCountString\e[0m = evenLetters.mkString(\e\
    [31m\",\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountString is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmd6g5qiv.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moddLettersCountString\e\
    [0m = oddLetters.mkString(\e[31m\",\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountString is already defined as \e[33mvalue\e\
    [0m \e[35moddLettersCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmd6g5qiv.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mevenLettersCountString\e\
    [0m = evenLetters.mkString(\e[31m\",\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountString is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmd6g5qiv.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mevenLettersCountString\e\
    [0m = evenLetters.mkString(\e[31m\",\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountString "
  stdout: ''
  timestamp: 1659800292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ evens = words.filter(word => word.forall(c => c.isLetter) && c.toLower.toInt\
    \ % 2 == 0)\n            val odds = words.filter(word => word.forall(c => c.isLetter)\
    \ && c.toLower.toInt % 2 != 0)\n            val evensCount = evens.map(_.length).sum\n\
    \            val oddsCount = odds.map(_.length).sum\n            if (evensCount\
    \ == 0) Right(evensCount)\n            else if (oddsCount == 0) Left(oddsCount)\n\
    \            else Right(evensCount + oddsCount)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcw5puowf.scala:19:77 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mevens\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower.toInt %\
    \ \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                                            Not found: c\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcw5puowf.scala:20:76\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36modds\e[0m = words.filter(\e[36mword\e[0m => word.forall(\e[36mc\e[0m =>\
    \ c.isLetter) && c.toLower.toInt % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \                Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcw5puowf.scala:24:42 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (oddsCount == \e[31m0\e[0m)\
    \ Left(oddsCount)\n\e[31m\e[31m   |\e[0m                                     \
    \     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \  Found:    (oddsCount : Int)\n\e[31m   |\e[0m                              \
    \            Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else Right(words.map(_.toLowerCase).map(_.length).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi1b6jb_o.scala:21)\n\tat Problem.main(tmpi1b6jb_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800295
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.length == 0) Left(Nil)\n\
    \        else if (words.length == 1) Right(words.head.length)\n        else Right(words.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjrl7_pca.scala:21)\n\tat Problem.main(tmpjrl7_pca.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800295
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(0) else Right(words.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4my0rzy1.scala:19)\n\tat Problem.main(tmp4my0rzy1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Right(words.size)\n    \
    \    else if (words.size == 1) Right(words.head.length)\n        else {\n    \
    \        val even = words.filter(_.length == words.length)\n            val odd\
    \ = words.filter(_.length % 2 == 1)\n            val evenSize = even.map(_.length).sum\n\
    \            val oddSize = odd.map(_.length).sum\n            if (evenSize ==\
    \ oddSize) Right(evenSize)\n            else Left(List(evenSize, oddSize))\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzc7cerc9.scala:24:27\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33melse\e[0m Left(List(evenSize,\
    \ oddSize))\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           Found:    (evenSize : Int)\n\e[31m   |\e\
    [0m                           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpzc7cerc9.scala:24:37 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33melse\e[0m Left(List(evenSize, oddSize))\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                     Found:    (oddSize : Int)\n\e[31m\
    \   |\e[0m                                     Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ evenWords = words.filter(w => w.length == w.toLowerCase + 1).map(w => w.toLowerCase\
    \ + w)\n            val oddWords = words.filter(w => w.length == w.toLowerCase\
    \ + 1).map(w => w.toLowerCase + w).filter(w => w.toLowerCase % 2 != 0)\n     \
    \       val evenLetters = evenWords.map(w => w.toLowerCase + w).filter(w => w.toLowerCase\
    \ % 2 == 0).map(w => w.toLowerCase + w).filter(w => w.toLowerCase % 2 != 0)\n\
    \            val oddLetters = oddWords.map(w => w.toLowerCase + w).filter(w =>\
    \ w.toLowerCase % 2 == 0).map(w => w.toLowerCase + w).filter(w => w.toLowerCase\
    \ % 2 != 0)\n            val evenLettersCount = evenLetters.map(w => w.length).sum\n\
    \            val oddLettersCount = oddLetters.map(w => w.length).sum\n       \
    \     val evenLettersCount2 = evenLetters.map(w => w.toLowerCase + w).filter(w\
    \ => w.toLowerCase % 2 == 0).map(w => w.toLowerCase + w).filter(w => w.toLowerCase\
    \ % 2 != 0).map(w => w.toLowerCase + w).filter(w => w.toLowerCase % 2 != 0).map(w\
    \ => w.toLowerCase + w).filter(w => w.toLowerCase % 2 != 0).map(w => w.toLowerCase\
    \ + w).filter(w => w.toLowerCase % 2 != 0).map(w => w.toLowerCase + w).filter(w\
    \ => w.toLowerCase % 2 != 0).map(w => w.toLowerCase + w).filter(w => w.toLowerCase\
    \ % 2 != 0).map(w => w.toLowerCase + w).filter(w => w.toLowerCase % 2 != 0).map(w\
    \ => w.toLowerCase + w).filter(w => w.toLowerCase % 2 != 0).map(w => w.toLowerCase\
    \ + w).filter(w => w.toLowerCase % 2 != 0).map(w => w.toLowerCase + w).filter(w\
    \ => w.toLowerCase % 2 != 0).map(w => w.toLowerCase + w).filter(w => w.toLowerCase\
    \ % 2 != 0).map(w => w.toLowerCase + w).filter(w => w.to\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzihsq4np.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzihsq4np.scala:39:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m39 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmpzihsq4np.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \     \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e[36mw\e[0m => w.length\
    \ == w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase + w)\n\e\
    [31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpzihsq4np.scala:20:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase\
    \ + w).filter(\e[36mw\e[0m => w.toLowerCase % \e[31m2\e[0m != \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzihsq4np.scala:20:130\
    \ -----------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddWords\e[0m = words.filter(\e[36mw\e[0m => w.length == w.toLowerCase\
    \ + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase + w).filter(\e[36mw\e[0m =>\
    \ w.toLowerCase % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \                                 ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue %\
    \ is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Im"
  stdout: ''
  timestamp: 1659800301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else if (words.length\
    \ == 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyokmo_jl.scala:42:18\
    \ --------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ counts = words.map(_.toLowerCase).groupBy(identity).mapValues(_.size)\n    \
    \        val odd = counts.filter(_._2 % 2 == 1).map(_._1).sum\n            val\
    \ even = counts.filter(_._2 % 2 == 0).map(_._1).sum\n            Left(Nil) match\
    \ {\n                case Right(0) => Left(Nil)\n                case Right(even)\
    \ => Left(Nil)\n                case Right(odd) => Left(Nil)\n               \
    \ case Left(Nil) => Right(odd)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpv9rsq1zo.scala:20:64 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = counts.filter(_._2\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).map(_._1).sum\n\e[31m\e[31m   |\e[0m       \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                No implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                where:    B is a type variable with constraint >: String\n\
    \e[31m   |\e[0m                .\n\e[31m\e[31m-- Error: /tmp/tmpv9rsq1zo.scala:21:65\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \     \e[33mval\e[0m \e[36meven\e[0m = counts.filter(_._2 % \e[31m2\e[0m == \e\
    [31m0\e[0m).map(_._1).sum\n\e[31m\e[31m   |\e[0m                             \
    \                                    ^\e[0m\n\e[31m   |\e[0m                No\
    \ implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m          \
    \      where:    B is a type variable with constraint >: String\n\e[31m   |\e\
    [0m                .\n2 errors found\n"
  stdout: ''
  timestamp: 1659800296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        val commaWords = words.filter(_.contains(\",\"))\n\
    \        val commaWordsCount = commaWords.map(_.length).sum\n        val noCommaWordsCount\
    \ = words.filter(_.contains(\",\")).map(_.length).sum\n        val noCommaWordsCountInAlphabet\
    \ = noCommaWordsCount - noCommaWordsCount.toString.toInt\n        val evenWordsCount\
    \ = words.filter(_.contains(\",\")).map(_.length).sum - noCommaWordsCountInAlphabet\n\
    \        val evenWordsCountInAlphabet = evenWordsCount - evenWordsCount.toString.toInt\n\
    \        val oddWordsCount = evenWordsCountInAlphabet - evenWordsCount.toString.toInt\n\
    \        val oddWordsCountInAlphabet = oddWordsCount - oddWordsCount.toString.toInt\n\
    \        val evenWordsCountInAlphabetInAlphabet = evenWordsCountInAlphabet - evenWordsCount.toString.toInt\
    \ - evenWordsCount.toString.toInt.toString.toInt\n        val oddWordsCountInAlphabetInAlphabet\
    \ = oddWordsCountInAlphabetInAlphabet - oddWordsCount.toString.toInt - oddWordsCount.toString.toInt.toString.toInt\n\
    \        val evenWordsCountInAlphabetInAlphabetInAlphabet = evenWordsCountInAlphabetInAlphabetInAlphabet\
    \ - evenWordsCount.toString.toInt.toString.toInt.toString.toInt.toString.toInt\n\
    \        val oddWordsCountInAlphabetInAlphabetInAlphabet = oddWordsCountInAlphabetInAlphabetInAlphabet\
    \ - oddWordsCount.toString.toInt.toString.toInt.toString.toInt.toString.toInt.toString.toInt\n\
    \        val evenWordsCountInAlphabetInAlphabetInAlphabetInAlphabet = evenWordsCountInAlphabetInAlphabetInAlphabetInAlphabet\
    \ - evenWordsCount.toString.toInt.toString.toInt.toString.toInt.toString.toInt.toString.toInt.toString.toInt.toString.toInt\n\
    \        val oddWordsCountInAlphabetInAlphabetInAlphabetInAlphabet = oddWordsCountInAlphabetInAlphabetInAlphabetInAlphab\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp07um49au.scala:25:48 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moddWordsCountInAlphabetInAlphabet\e\
    [0m = oddWordsCountInAlphabetInAlphabet - oddWordsCount.toString.toInt - oddWordsCount.toString.toInt.toString.toInt\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0m            Recursive \e[33mvalue\e[0m \e[35moddWordsCountInAlphabetInAlphabet\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp07um49au.scala:26:59\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenWordsCountInAlphabetInAlphabetInAlphabet\e[0m = evenWordsCountInAlphabetInAlphabetInAlphabet\
    \ - evenWordsCount.toString.toInt.toString.toInt.toString.toInt.toString.toInt\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^\e[0m\n\e[31m   |\e[0m Recursive \e[33mvalue\e[0m \e[35mevenWordsCountInAlphabetInAlphabetInAlphabet\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp07um49au.scala:27:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36moddWordsCountInAlphabetInAlphabetInAlphabet\e[0m = oddWordsCountInAlphabetInAlphabetInAlphabet\
    \ - oddWordsCount.toString.toInt.toString.toInt.toString.toInt.toString.toInt.toString.toInt\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^\e[0m\n\e[31m   |\e[0m  Recursive \e[33mvalue\e[0m \e[35moddWordsCountInAlphabetInAlphabetInAlphabet\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp07um49au.scala:28:69\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenWordsCountInAlphabetInAlphabetInAlphabetInAlphabet\e[0m = evenWordsCountInAlphabetInAlphabetInAlphabetInAlphabet\
    \ - evenWordsCount.toString.toInt.toString.toInt.toString.to"
  stdout: ''
  timestamp: 1659800296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ even = words.filter(_.length == evenLetterCount(_))\n            val odd = words.filter(_.length\
    \ == oddLetterCount(_))\n            val evenCount = even.count(_.toLowerCase().count(_\
    \ == 'a'))\n            val oddCount = odd.count(_.toLowerCase().count(_ == 'a'))\n\
    \            val count = evenCount + oddCount\n            Right(count)\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpj5rkkuil.scala:19:36 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(_.length\
    \ == evenLetterCount(_))\n\e[31m\e[31m   |\e[0m                              \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086]\
    \ Syntax Error: /tmp/tmpj5rkkuil.scala:20:35 ---------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(_.length\
    \ == oddLetterCount(_))\n\e[31m\e[31m   |\e[0m                               \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \            Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpj5rkkuil.scala:21:60 --------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenCount\e[0m = even.count(_.toLowerCase().count(_\
    \ == \e[31m'a'\e[0m))\n\e[31m\e[31m   |\e[0m                                 \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                      Found:    Int\n\e[31m   |\e[0m                        \
    \               Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpj5rkkuil.scala:22:58 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            \e[33mval\e[0m \e[36moddCount\e[0m = odd.count(_.toLowerCase().count(_\
    \ == \e[31m'a'\e[0m))\n\e[31m\e[31m   |\e[0m                                 \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                  Found:    Int\n\e[31m   |\e[0m                            \
    \         Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ letters = words.map(_.toLowerCase)\n            val odd = letters.filter(letter\
    \ => letter % 2 != 0).length\n            Right(odd)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxkerjs1z.scala:20:54 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = letters.filter(\e\
    [36mletter\e[0m => letter % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e[31m\
    \   |\e[0m                                               ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659800237
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.isEmpty) Left(Nil)\n        else {\n \
    \           val splitWords = words.map(_.toLowerCase)\n            val countLetters\
    \ = splitWords.map(_.toCharArray).map(_.length).sum\n            Right(splitWords.length)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1sqtv3in.scala:24)\n\tat Problem.main(tmp1sqtv3in.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800299
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").map(_.toLowerCase)\n        val commaWords = txt.split(\"\
    ,\").map(_.toLowerCase)\n        val letters = txt.map(_.toLowerCase).filter(_.isLetter)\n\
    \        val lettersWithOddOrder = letters.filter(letter => letter.toString.toInt%2\
    \ != 0)\n        val lettersWithEvenOrder = letters.filter(letter => letter.toString.toInt%2\
    \ == 0)\n        val evenLetters = lettersWithEvenOrder.length\n        val oddLetters\
    \ = lettersWithOddOrder.length\n        val evenLettersWithOddOrder = lettersWithOddOrder.filter(letter\
    \ => letter.toString.toInt%2 == 0)\n        val evenLettersWithEvenOrder = lettersWithEvenOrder.filter(letter\
    \ => letter.toString.toInt%2 == 0)\n        val evenLettersWithOddOrderAndEvenLettersWithEvenOrder\
    \ = lettersWithOddOrder.filter(letter => letter.toString.toInt%2 == 0 && lettersWithEvenOrder.filter(letter\
    \ => letter.toString.toInt%2 == 0).length == 0)\n        val evenLettersWithOddOrderAndEvenLettersWithOddOrder\
    \ = lettersWithOddOrder.filter(letter => letter.toString.toInt%2 == 1 && lettersWithEvenOrder.filter(letter\
    \ => letter.toString.toInt%2 == 0).length == 0)\n        val evenLettersWithOddOrderAndEvenLettersWithEvenOrderAndOddLettersWithEvenOrder\
    \ = lettersWithOddOrder.filter(letter => letter.toString.toInt%2 == 1 && lettersWithEvenOrder.filter(letter\
    \ => letter.toString.toInt%2 == 1).length == 0)\n        val evenLettersWithOddOrderAndEvenLettersWithOddOrderAndEvenLettersWithEvenOrder\
    \ = lettersWithOddOrder.filter(letter => letter.toString.toInt%2 == 1 && lettersWithEvenOrder.filter(letter\
    \ => letter.toString.toInt%2 == 1).length == 1)\n        val evenLettersWithOddOrderAndEvenLettersWithOddOrderAndEvenLettersWithOddOrder\
    \ = lettersWithOddOrder.filter(letter => letter.toString.toInt%2 == 1 && lettersWithEvenOrder.filter(letter\
    \ => letter.toString.toInt%2 == 1).length == 0)\n        val evenLettersWithOddOrderAndEvenLettersWithOddOrderAndEvenLettersWithEvenOrderAndOddLettersWithEvenOrder\
    \ = lettersWithOddOrder.filter(letter => letter.toString.toInt%2 == 1 && lettersWithEvenOrder.filter(letter\
    \ => letter.toString.toInt%2 == 1).length == 1)\n        val evenLettersWithOddOrderAndEvenLettersWithOddOrder\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptk1qcciv.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptk1qcciv.scala:17:32\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mletters\e[0m = txt.map(_.toLowerCase).filter(_.isLetter)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                     value toLowerCase is not a member of Char\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptk1qcciv.scala:31:5 ---------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Either[List[String], Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800297
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Left(Nil)\n        else\
    \ if (words.size == 1) Right(words.head.toLong)\n        else Right(words.map(_.toLong).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.splitWords$$anonfun$1(tmpq93d0292.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.splitWords(tmpq93d0292.scala:18)\n\
    \tat Problem$.main(tmpq93d0292.scala:21)\n\tat Problem.main(tmpq93d0292.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length == 0) Right(0) else {\n       \
    \     val wordList = words.toList\n            val wordCount = wordList.size\n\
    \            val lowerCaseLetters = wordList.filter(_.toLowerCase == \"a\" ||\
    \ _.toLowerCase == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase == \"d\" ||\
    \ _.toLowerCase == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase == \"g\" ||\
    \ _.toLowerCase == \"h\" || _.toLowerCase == \"i\" || _.toLowerCase == \"j\" ||\
    \ _.toLowerCase == \"k\" || _.toLowerCase == \"l\" || _.toLowerCase == \"m\" ||\
    \ _.toLowerCase == \"n\" || _.toLowerCase == \"o\" || _.toLowerCase == \"p\" ||\
    \ _.toLowerCase == \"q\" || _.toLowerCase == \"r\" || _.toLowerCase == \"s\" ||\
    \ _.toLowerCase == \"t\" || _.toLowerCase == \"u\" || _.toLowerCase == \"v\" ||\
    \ _.toLowerCase == \"w\" || _.toLowerCase == \"x\" || _.toLowerCase == \"y\" ||\
    \ _.toLowerCase == \"z\").size\n            val oddOrderLetters = wordList.filter(_.toLowerCase\
    \ == \"a\" || _.toLowerCase == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase\
    \ == \"d\" || _.toLowerCase == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase\
    \ == \"g\" || _.toLowerCase == \"h\" || _.toLowerCase == \"i\" || _.toLowerCase\
    \ == \"j\" || _.toLowerCase == \"k\" || _.toLowerCase == \"l\" || _.toLowerCase\
    \ == \"m\" || _.toLowerCase == \"n\" || _.toLowerCase == \"o\" || _.toLowerCase\
    \ == \"p\" || _.toLowerCase == \"q\" || _.toLowerCase == \"r\" || _.toLowerCase\
    \ == \"s\" || _.toLowerCase == \"t\" || _.toLowerCase == \"u\" || _.toLowerCase\
    \ == \"v\" || _.toLowerCase == \"w\" || _.toLowerCase == \"x\" || _.toLowerCase\
    \ == \"y\" || _.toLowerCase == \"z\").filter(_.toLowerCase == \"a\" || _.toLowerCase\
    \ == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase == \"d\" || _.toLowerCase\
    \ == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase == \"g\" || _.toLowerCase\
    \ == \"h\" || _.toLowerCase == \"i\" || _.toLowerCase == \"j\" || _.toLowerCase\
    \ == \"k\" || _.toLowerCase == \"l\" || _.toLowerCase == \"m\" || _.toLower\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbnlm2z7m.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbnlm2z7m.scala:34:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m34 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E086] Syntax\
    \ Error: /tmp/tmpbnlm2z7m.scala:19:51 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m            \e[33mval\e[0m \e[36mlowerCaseLetters\e[0m = wordList.filter(_.toLowerCase\
    \ == \e[31m\"a\"\e[0m || _.toLowerCase == \e[31m\"b\"\e[0m || _.toLowerCase ==\
    \ \e[31m\"c\"\e[0m || _.toLowerCase == \e[31m\"d\"\e[0m || _.toLowerCase == \e\
    [31m\"e\"\e[0m || _.toLowerCase == \e[31m\"f\"\e[0m || _.toLowerCase == \e[31m\"\
    g\"\e[0m || _.toLowerCase == \e[31m\"h\"\e[0m || _.toLowerCase == \e[31m\"i\"\e\
    [0m || _.toLowerCase == \e[31m\"j\"\e[0m || _.toLowerCase == \e[31m\"k\"\e[0m\
    \ || _.toLowerCase == \e[31m\"l\"\e[0m || _.toLowerCase == \e[31m\"m\"\e[0m ||\
    \ _.toLowerCase == \e[31m\"n\"\e[0m || _.toLowerCase == \e[31m\"o\"\e[0m || _.toLowerCase\
    \ == \e[31m\"p\"\e[0m || _.toLowerCase == \e[31m\"q\"\e[0m || _.toLowerCase ==\
    \ \e[31m\"r\"\e[0m || _.toLowerCase == \e[31m\"s\"\e[0m || _.toLowerCase == \e\
    [31m\"t\"\e[0m || _.toLowerCase == \e[31m\"u\"\e[0m || _.toLowerCase == \e[31m\"\
    v\"\e[0m || _.toLowerCase == \e[31m\"w\"\e[0m || _.toLowerCase == \e[31m\"x\"\e\
    [0m || _.toLowerCase == \e[31m\"y\"\e[0m || _.toLowerCase == \e[31m\"z\"\e[0m).size\n\
    \e[31m\e[31m   |\e[0m
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val evenWords = words.filter(word => word.forall(c => c.isLetter) &&\
    \ c.toLower.toInt % 2 == 0)\n            val oddWords = words.filter(word => word.forall(c\
    \ => c.isLetter) && c.toLower.toInt % 2 != 0)\n            val evenWordsCount\
    \ = evenWords.filter(word => word.length == word.length).length\n            val\
    \ oddWordsCount = oddWords.filter(word => word.length == word.length).length\n\
    \            Right(evenWordsCount + oddWordsCount)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplr1qfx9z.scala:19:81 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower.toInt %\
    \ \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                                            Not found: c\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplr1qfx9z.scala:20:80\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddWords\e[0m = words.filter(\e[36mword\e[0m => word.forall(\e[36mc\e\
    [0m => c.isLetter) && c.toLower.toInt % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \                       Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val letterWords = words.filter(_.contains(\"a\"))\n        val\
    \ letterWordsOdd = letterWords.filter(_.toString.toLowerCase % 2 == 1)\n     \
    \   val letterWordsEven = letterWords.filter(_.toString.toLowerCase % 2 == 0)\n\
    \        val letterWordsOddCount = letterWordsOdd.size\n        val letterWordsEvenCount\
    \ = letterWordsEven.size\n        val letterWordsOddCountString = letterWordsOddCount.toString\n\
    \        val letterWordsEvenCountString = letterWordsEvenCount.toString\n    \
    \    val letterWordsOddCountLong = letterWordsOddCount.toLong\n        val letterWordsEvenCountLong\
    \ = letterWordsEvenCount.toLong\n        val letterWordsOddCountLongString = letterWordsOddCountLong.toString\n\
    \        val letterWordsEvenCountLongString = letterWordsEvenCountLong.toString\n\
    \        val letterWordsOddCountLongLong = letterWordsOddCountLong.toLong\n  \
    \      val letterWordsEvenCountLongLong = letterWordsEvenCountLong.toLong\n  \
    \      val letterWordsOddCountLongLongString = letterWordsOddCountLongLong.toString\n\
    \        val letterWordsEvenCountLongLongString = letterWordsEvenCountLongLong.toString\n\
    \        val letterWordsOddCountLongLongLong = letterWordsOddCountLongLong.toLong\n\
    \        val letterWordsEvenCountLongLongLong = letterWordsEvenCountLongLong.toLong\n\
    \        val letterWordsOddCountLongLongLongString = letterWordsOddCountLongLongLong.toString\n\
    \        val letterWordsEvenCountLongLongLongString = letterWordsEvenCountLongLongLong.toString\n\
    \        val letterWordsOddCountLongLongLongLong = letterWordsOddCountLongLongLong.toLong\n\
    \        val letterWordsEvenCountLongLongLongLong = letterWordsEvenCountLongLongLong.toLong\n\
    \        val letterWordsOddCountLongLongLongLongString = letterWordsOddCountLongLongLongLong.toString\n\
    \        val letterWordsEvenCountLongLongLongLongString = letterWordsEvenCountLongLongLongLong.toString\n\
    \        val letterWordsOddCountLongLongLongLongLong = letterWordsOddCountLongLongLongLong.toLong\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_2ueb4ju.scala:18:71 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mletterWordsOdd\e[0m = letterWords.filter(_.toString.toLowerCase\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_2ueb4ju.scala:19:72\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mletterWordsEven\e[0m = letterWords.filter(_.toString.toLowerCase % \e[31m2\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of String, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_2ueb4ju.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(_.toLowerCase == \"even\")\n            val\
    \ odd = words.filter(_.toLowerCase == \"odd\")\n            val evenCount = even.count(_.toLowerCase\
    \ == \"a\")\n            val oddCount = odd.count(_.toLowerCase == \"a\")\n  \
    \          Right(evenCount + oddCount)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu7wrnq1w.scala:27)\n\tat Problem.main(tmpu7wrnq1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800300
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(word => word.forall(_.isLetter) && word.forall(_.isLower))\n\
    \            val odd = words.filter(word => word.forall(_.isLetter) && !word.forall(_.isLower))\n\
    \            val evenCount = even.filter(word => word.forall(_.isLetter)).size\n\
    \            val oddCount = odd.filter(word => word.forall(_.isLetter)).size\n\
    \            Right(evenCount + oddCount)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi686njc1.scala:27)\n\tat Problem.main(tmpi686njc1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnav5eu4l.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val noWhitespaces = words.filter(_.isEmpty)\n\
    \        val noCommas = words.filter(_.contains(\",\"))\n        val noLetters\
    \ = words.filter(_.forall(_.isLetter))\n        val noLettersOdd = words.filter(_.forall(_.isLetter\
    \ && _ % 2 != 0))\n        val noLettersEven = words.filter(_.forall(_.isLetter\
    \ && _ % 2 == 0))\n        val noLettersEvenOdd = words.filter(_.forall(_.isLetter\
    \ && _ % 2 == 0 && _ % 2 != 0))\n        val noLettersOddEven = words.filter(_.forall(_.isLetter\
    \ && _ % 2 != 0 && _ % 2 == 0))\n        val noLettersOddOdd = words.filter(_.forall(_.isLetter\
    \ && _ % 2 != 0 && _ % 2 == 1))\n        val noLettersEvenEven = words.filter(_.forall(_.isLetter\
    \ && _ % 2 == 0 && _ % 2 == 0))\n        val noLettersEvenOdd = words.filter(_.forall(_.isLetter\
    \ && _ % 2 == 0 && _ % 2 == 1))\n        val noLettersOddEvenOdd = words.filter(_.forall(_.isLetter\
    \ && _ % 2 != 0 && _ % 2 == 1))\n        val noLettersOddOddEven = words.filter(_.forall(_.isLetter\
    \ && _ % 2 != 0 && _ % 2 == 0))\n        val noLettersEvenEvenOdd = words.filter(_.forall(_.isLetter\
    \ && _ % 2 == 0 && _ % 2 == 1))\n        val noLettersEvenOddOdd = words.filter(_.forall(_.isLetter\
    \ && _ % 2 == 0 && _ % 2 == 0))\n        val noLettersOddEvenEvenOdd = words.filter(_.forall(_.isLetter\
    \ && _ % 2 != 0 && _ % 2 == 1))\n        val noLettersOddOddEvenEvenOdd = words.filter(_.forall(_.isLetter\
    \ && _ % 2 != 0 && _ % 2 == 0))\n        val noLettersEvenEvenEvenOddOdd = words.filter(_.forall(_.isLetter\
    \ && _ % 2 == 0 && _ % 2 == 1))\n        val noLettersEvenOddOddEvenEvenOdd =\
    \ words.filter(_.forall(_.isLetter && _ % 2 != 0 && _ % 2 == 0))\n        val\
    \ noLettersOddEvenEvenEvenOddOdd = words.filter(_.forall(\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp97tifn9v.scala:34:67 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mnoLettersOddEvenEvenEvenOddOdd\e\
    [0m = words.filter(_.forall(\n\e[31m\e[31m   |\e[0m                          \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                           expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp97tifn9v.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnoLettersEvenOdd\e[0m =\
    \ words.filter(_.forall(_.isLetter && _ % \e[31m2\e[0m == \e[31m0\e[0m && _ %\
    \ \e[31m2\e[0m == \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnoLettersEvenOdd is already defined as \e[33mvalue\e[0m \e\
    [35mnoLettersEvenOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmp97tifn9v.scala:19:49 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnoLettersOdd\e[0m = words.filter(_.forall(_.isLetter\
    \ && _ % \e[31m2\e[0m != \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m               \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Wrong number of parameters, expected: 1\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmp97tifn9v.scala:20:50 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnoLettersEven\e[0m = words.filter(_.forall(_.isLetter\
    \ && _ % \e[31m2\e[0m == \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m               \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Wrong number of parameters, expected: 1\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmp97tifn9v.scala:21:53 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnoLettersEvenOdd\e[0m =\
    \ words.filter(_"
  stdout: ''
  timestamp: 1659800300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnav5eu4l.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.length)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val letters = txt.split(\"\")\n            val evenLetters = letters.filter(x\
    \ => x % 2 == 0)\n            val oddLetters = letters.filter(x => x % 2 != 0)\n\
    \            val evenLettersCount = evenLetters.count(x => x != \"\")\n      \
    \      val oddLettersCount = oddLetters.count(x => x != \"\")\n            val\
    \ evenLettersCountString = evenLettersCount.toString\n            val oddLettersCountString\
    \ = oddLettersCount.toString\n            val evenLettersCountLong = Long.parseLong(evenLettersCountString)\n\
    \            val oddLettersCountLong = Long.parseLong(oddLettersCountString)\n\
    \            val evenLettersCountLongString = evenLettersCountLong.toString\n\
    \            val oddLettersCountLongString = oddLettersCountLong.toString\n  \
    \          val evenLettersCountLongLong = Long.parseLong(evenLettersCountLongString)\n\
    \            val oddLettersCountLongLong = Long.parseLong(oddLettersCountLongString)\n\
    \            val evenLettersCountLongLongString = evenLettersCountLongLong.toString\n\
    \            val oddLettersCountLongLongString = oddLettersCountLongLong.toString\n\
    \            val evenLettersCountLongLongLong = Long.parseLong(evenLettersCountLongLongString)\n\
    \            val oddLettersCountLongLongLong = Long.parseLong(oddLettersCountLongLongString)\n\
    \            val evenLettersCountLongLongLongString = evenLettersCountLongLongLong.toString\n\
    \            val oddLettersCountLongLongLongString = oddLettersCountLongLongLong.toString\n\
    \            val evenLettersCountLongLongLongLong = Long.parseLong(evenLettersCountLongLongLongString)\n\
    \            val oddLettersCountLongLongLongLong = Long.parseLong(oddLettersCountLongLongLongString)\n\
    \            val evenLettersCountLongLongLongLongString = evenLettersCountLongLongLongLong.toString\n\
    \            val oddLettersCountLongLongLongLongString = oddLettersCountLongLongLongLongLong.toString\n\
    \            val evenLettersCountLongLongLongLongLong = Long.parseLong(evenLettersCountLongLongLongLongLongString)\n\
    \            val oddLettersCountLongLongLongLongLong = Long.parseLong(oddLettersCountLongLongLongLongLongString)\n\
    \            val \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpwmfqcbe9.scala:44:15 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwmfqcbe9.scala:58:0 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwmfqcbe9.scala:20:52\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLetters\e[0m = letters.filter(\e[36mx\e[0m => x % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \           ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe\
    \ following import might make progress towards fixing the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m\
    \   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwmfqcbe9.scala:21:51\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddLetters\e[0m = letters.filter(\e[36mx\e[0m => x % \e[31m2\e[0m != \e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \      ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String, but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe\
    \ following import might make progress towards fixing the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m\
    \   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwmfqcbe9.scala:26:44\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLettersCountLong\e[0m = Long.parseLong(evenLettersCountString)\n\e\
    [31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          value parseLong is not a member of object\
    \ Long\n\e[31m\e[31m-- [E008] Not Foun"
  stdout: ''
  timestamp: 1659800304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        val commaWords = txt.split(\"\
    ,\").filter(_.nonEmpty)\n        val letters = txt.map(_.toLower)\n        val\
    \ lettersWithOddOrder = letters.filter(letter => letter % 2 != 0)\n        val\
    \ oddLetters = lettersWithOddOrder.filter(letter => letter % 2 == 0)\n       \
    \ val letterCount = letters.filter(letter => letter % 2 == 0).size\n        val\
    \ commaCount = commaWords.filter(word => word.nonEmpty).size\n        val wordCount\
    \ = words.size\n        val result = if (wordCount == 0) Right(letterCount) else\
    \ Left(wordCount)\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzu58_hmx.scala:24:8\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Either[Int,\
    \ Int])\n\e[31m   |\e[0m        Required: Either[List[String], Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else if (words.length\
    \ == 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else if (words.length\
    \ == 26) Right(words.length)\n        else if (words.length == 27) Right(words.length)\n\
    \        else if (words.length == 28) Right(words.length)\n        else if (words.length\
    \ == 29) Right(words.length)\n        else if (words.length == 30) Right(words.length)\n\
    \        else if (words.length == 31) Right(words.length)\n        else if (words.length\
    \ == 32) Right(words.length)\n        else if (words.length == 33) Right(words.length)\n\
    \        else if (words.length == 34) Right(words.length)\n        else if (words.length\
    \ == 35) Right(words.length)\n        else if (words.length == 36) Right(words.length)\n\
    \        else if (words.length == 37) Right(words.length)\n        else if (words.length\
    \ == 38) Right(words.length)\n        else if (words.length == 39) Right(words.length)\n\
    \        else if (words.length == 40) Right(words.length)\n        else if (words.length\
    \ == 41) Right(words.length)\n        else if (words.length == 42) Right(words.length)\n\
    \        else if (words.length == 43) Right(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprss871lc.scala:59:43 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.length ==\
    \ \e[31m43\e[0m) Right(\n\e[31m\e[31m   |\e[0m                               \
    \            ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Left(List[String]())\n \
    \       else if (words.size == 1) Right(words.head.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2iiawzqh.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val even = words.filter(_.toLowerCase == \"even\")\n            val odd\
    \ = words.filter(_.toLowerCase == \"odd\")\n            val evenSize = even.map(_.length).sum\n\
    \            val oddSize = odd.map(_.length).sum\n            Right(evenSize +\
    \ oddSize)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp81u2i3kw.scala:27)\n\tat Problem.main(tmp81u2i3kw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800306
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val lowerCaseWords = words.filter(_.toLowerCase().matches(\"[a-z]+\"\
    ))\n            val oddOrderWords = lowerCaseWords.filter(word => word.count(_\
    \ == 'a') % 2 == 1)\n            val evenOrderWords = lowerCaseWords.filter(word\
    \ => word.count(_ == 'a') % 2 == 0)\n            val evenOrderWordsCount = evenOrderWords.size\n\
    \            val oddOrderWordsCount = oddOrderWords.size\n            val result\
    \ = if (evenOrderWordsCount > oddOrderWordsCount) evenOrderWordsCount else oddOrderWordsCount\n\
    \            Right(result)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz_q_byph.scala:29)\n\tat Problem.main(tmpz_q_byph.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800305
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else Right(words.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5c2khv_l.scala:21)\n\tat Problem.main(tmp5c2khv_l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.isEmpty) Right(words.size)\n\
    \        else if (words.size == 1) Right(words.head.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5jpocsd1.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val noWhitespaces = words.filter(_.isEmpty)\n\
    \        val noCommas = words.filter(_.contains(\",\"))\n        val noLetters\
    \ = words.filter(_.forall(_.isLetter))\n        val noLettersOdd = words.filter(_.forall(_.isLetter\
    \ && !_.isDigit))\n        val noLettersEven = words.filter(_.forall(_.isLetter\
    \ && _.isDigit))\n        val noLettersOddOrEven = words.filter(_.forall(_.isLetter\
    \ && _.isDigit && !_.isLetter))\n        val noLettersEvenOrOdd = words.filter(_.forall(_.isLetter\
    \ && _.isDigit && _.isLetter))\n        val noLettersOddOrEvenOrOdd = words.filter(_.forall(_.isLetter\
    \ && _.isDigit && _.isLetter && !_.isLetter))\n        val noLettersEvenOrOddOrOdd\
    \ = words.filter(_.forall(_.isLetter && _.isDigit && _.isLetter && _.isLetter))\n\
    \        val noLettersOddOrEvenOrOddOrOdd = words.filter(_.forall(_.isLetter &&\
    \ _.isDigit && _.isLetter && _.isLetter && _.isLetter))\n        val noLettersEvenOrOddOrOddOrOdd\
    \ = words.filter(_.forall(_.isLetter && _.isDigit && _.isLetter && _.isLetter\
    \ && _.isLetter && _.isLetter))\n        val noLettersOddOrEvenOrOddOrOddOrOdd\
    \ = words.filter(_.forall(_.isLetter && _.isDigit && _.isLetter && _.isLetter\
    \ && _.isLetter && _.isLetter && _.isLetter))\n        val noLettersEvenOrOddOrOddOrOddOrOdd\
    \ = words.filter(_.forall(_.isLetter && _.isDigit && _.isLetter && _.isLetter\
    \ && _.isLetter && _.isLetter && _.isLetter && _.isLetter))\n        val noLettersOddOrEvenOrOddOrOddOrOddOrOdd\
    \ = words.filter(_.forall(_.isLetter && _.isDigit && _.isLetter && _.isLetter\
    \ && _.isLetter && _.isLetter && _.isLetter && \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprunly5ym.scala:29:171 --------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnoLettersOddOrEvenOrOddOrOddOrOddOrOdd\e\
    [0m = words.filter(_.forall(_.isLetter && _.isDigit && _.isLetter && _.isLetter\
    \ && _.isLetter && _.isLetter && _.isLetter && \n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \                                                                            \
    \            ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmprunly5ym.scala:19:49 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mnoLettersOdd\e[0m = words.filter(_.forall(_.isLetter\
    \ && !_.isDigit))\n\e[31m\e[31m   |\e[0m                                     \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086]\
    \ Syntax Error: /tmp/tmprunly5ym.scala:20:50 ---------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnoLettersEven\e[0m = words.filter(_.forall(_.isLetter\
    \ && _.isDigit))\n\e[31m\e[31m   |\e[0m                                      \
    \            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \              Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086]\
    \ Syntax Error: /tmp/tmprunly5ym.scala:21:55 ---------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnoLettersOddOrEven\e[0m = words.filter(_.forall(_.isLetter\
    \ && _.isDigit && !_.isLetter))\n\e[31m\e[31m   |\e[0m                       \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmprunly5ym.scala:22:55 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnoLettersEvenOrOdd\e[0m\
    \ = "
  stdout: ''
  timestamp: 1659800308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ words2 = words.map(_.toLowerCase)\n            val even = words2.filter(_.toCharArray.forall(_.toLowerCase\
    \ == 'a'))\n            val odd = words2.filter(_.toCharArray.forall(_.toLowerCase\
    \ == 'z'))\n            val evenOdd = even.zip(odd)\n            val evenOdd2\
    \ = evenOdd.filter(x => x._1 % 2 == 0)\n            val evenOdd3 = evenOdd2.filter(x\
    \ => x._2 % 2 == 0)\n            val evenOdd4 = evenOdd3.filter(x => x._3 % 2\
    \ == 0)\n            val evenOdd5 = evenOdd4.filter(x => x._4 % 2 == 0)\n    \
    \        val evenOdd6 = evenOdd5.filter(x => x._5 % 2 == 0)\n            val evenOdd7\
    \ = evenOdd6.filter(x => x._6 % 2 == 0)\n            val evenOdd8 = evenOdd7.filter(x\
    \ => x._7 % 2 == 0)\n            val evenOdd9 = evenOdd8.filter(x => x._8 % 2\
    \ == 0)\n            val evenOdd10 = evenOdd9.filter(x => x._9 % 2 == 0)\n   \
    \         val evenOdd11 = evenOdd10.filter(x => x._10 % 2 == 0)\n            val\
    \ evenOdd12 = evenOdd11.filter(x => x._11 % 2 == 0)\n            val evenOdd13\
    \ = evenOdd12.filter(x => x._12 % 2 == 0)\n            val evenOdd14 = evenOdd13.filter(x\
    \ => x._13 % 2 == 0)\n            val evenOdd15 = evenOdd14.filter(x => x._14\
    \ % 2 == 0)\n            val evenOdd16 = evenOdd15.filter(x => x._15 % 2 == 0)\n\
    \            val evenOdd17 = evenOdd16.filter(x => x._16 % 2 == 0)\n         \
    \   val evenOdd18 = evenOdd17.filter(x => x._17 % 2 == 0)\n            val evenOdd19\
    \ = evenOdd18.filter(x => x._18 % 2 == 0)\n            val evenOdd20 = evenOdd19.filter(x\
    \ => x._19 % 2 == 0)\n            val evenOdd21 = evenOdd20.filter(x => x._20\
    \ % 2 == 0)\n            val evenOdd22\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpotuh20t4.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpotuh20t4.scala:57:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpotuh20t4.scala:20:60 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words2.filter(_.toCharArray.forall(_.toLowerCase\
    \ == \e[31m'a'\e[0m))\n\e[31m\e[31m   |\e[0m                                 \
    \                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpotuh20t4.scala:21:59 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words2.filter(_.toCharArray.forall(_.toLowerCase\
    \ == \e[31m'z'\e[0m))\n\e[31m\e[31m   |\e[0m                                 \
    \                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \              value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpotuh20t4.scala:23:52 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mevenOdd2\e[0m = evenOdd.filter(\e\
    [36mx\e[0m => x._1 % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                                           ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpotuh20t4.scala:24:53\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenOdd3\e[0m = evenOdd2.filter(\e[36mx\e[0m => x._2 % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \         ^^^^^^\e[0m\n\e["
  stdout: ''
  timestamp: 1659800311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val wordList = new mutable.ListBuffer[String]()\n            val wordCounts\
    \ = new mutable.ListBuffer[Long]()\n            words.foreach(word => {\n    \
    \            val wordList = wordList :+ word\n                val wordCounts =\
    \ wordCounts :+ word.length\n            })\n            val wordCounts = wordCounts.toList\n\
    \            val wordCounts = wordCounts.sortBy(_)\n            val wordCounts\
    \ = wordCounts.reverse\n            val wordCounts = wordCounts.take(wordCounts.length\
    \ / 2)\n            val wordCounts = wordCounts.map(x => x + 1)\n            val\
    \ wordCounts = wordCounts.map(x => x - 1)\n            val wordCounts = wordCounts.map(x\
    \ => x + 1)\n            val wordCounts = wordCounts.map(x => x - 1)\n       \
    \     val wordCounts = wordCounts.map(x => x + 1)\n            val wordCounts\
    \ = wordCounts.map(x => x - 1)\n            val wordCounts = wordCounts.map(x\
    \ => x + 1)\n            val wordCounts = wordCounts.map(x => x - 1)\n       \
    \     val wordCounts = wordCounts.map(x => x + 1)\n            val wordCounts\
    \ = wordCounts.map(x => x - 1)\n            val wordCounts = wordCounts.map(x\
    \ => x + 1)\n            val wordCounts = wordCounts.map(x => x - 1)\n       \
    \     val wordCounts = wordCounts.map(x => x + 1)\n            val wordCounts\
    \ = wordCounts.map(x => x - 1)\n            val wordCounts = wordCounts.map(x\
    \ => x + 1)\n            val wordCounts = wordCounts.map(x => x - 1)\n       \
    \     val wordCounts = wordCounts.map(x => x + 1)\n            val wordCounts\
    \ = wordCounts.map(x => x - 1)\n            val wordCounts = wordCounts.map(x\
    \ => x + 1)\n            val wordCounts = wordCounts.map(x => x - 1)\n       \
    \     val wordCounts = wordCounts.map(x => x + 1)\n            val wordCounts\
    \ = wordCounts.map(x => x - 1)\n            val wordCounts = wordCounts.map(x\
    \ => x + 1)\n            val wordCounts = wordCounts.map(x => x - 1)\n       \
    \     val wordCounts = wordCounts.map(x => x + 1)\n            val wordCounts\
    \ = wordCounts.map(x => x - 1)\n            val wordCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphev201s3.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphev201s3.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphev201s3.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mwordCounts\e[0m = wordCounts.toList\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mwordCounts is already defined as \e[33mvalue\e[0m \e[35mwordCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphev201s3.scala:26:16 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m            \e[33mval\e[0m \e[36mwordCounts\e[0m = wordCounts.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mwordCounts is already defined as \e[33mvalue\e[0m \e[35mwordCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphev201s3.scala:27:16 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m            \e[33mval\e[0m \e[36mwordCounts\e[0m = wordCounts.reverse\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mwordCounts is already defined as \e[33mvalue\e[0m \e[35mwordCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphev201s3.scala:28:16 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m            \e[33mval\e[0m \e[36mwordCounts\e[0m = wordCounts.take(wordCounts.length\
    \ / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordCounts is already defi"
  stdout: ''
  timestamp: 1659800306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.length)\n\
    \        else if (words.length == 1) Right(words.length)\n        else if (words.length\
    \ == 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8pyi2kby.scala:42:18\
    \ --------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else if (words.length ==\
    \ 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphjeiijr7.scala:42:18\
    \ --------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Left(Nil)\n        else\
    \ if (words.size == 1) Right(words.head.toLong)\n        else Left(words.toList)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzwsgzp4t.scala:21)\n\tat Problem.main(tmpzwsgzp4t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        val wordList = words.toList\n        val wordCount\
    \ = wordList.size\n        val wordCountLowercase = wordList.count(_.toLowerCase\
    \ == _)\n        val wordCountOddOrder = wordList.count(_.toString.count(_ ==\
    \ ord('a')).toDouble % 2 == 1)\n        val wordCountEvenOrder = wordList.count(_.toString.count(_\
    \ == ord('z')).toDouble % 2 == 1)\n        val wordCountEvenOrderUppercase = wordList.count(_.toString.count(_\
    \ == ord('Z')).toDouble % 2 == 1)\n        val wordCountEvenOrderLowercase = wordList.count(_.toString.count(_\
    \ == ord('a')).toDouble % 2 == 1)\n        val wordCountEvenOrderUppercaseLowercase\
    \ = wordList.count(_.toString.count(_ == ord('Z')).toDouble % 2 == 1)\n      \
    \  val wordCountEvenOrderUppercaseLowercaseUppercase = wordList.count(_.toString.count(_\
    \ == ord('Z')).toDouble % 2 == 1)\n        val wordCountEvenOrderUppercaseLowercaseUppercaseLowercase\
    \ = wordList.count(_.toString.count(_ == ord('Z')).toDouble % 2 == 1)\n      \
    \  val wordCountEvenOrderUppercaseLowercaseUppercaseLowercaseUppercase = wordList.count(_.toString.count(_\
    \ == ord('Z')).toDouble % 2 == 1)\n        val wordCountEvenOrderUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercase\
    \ = wordList.count(_.toString.count(_ == ord('Z')).toDouble % 2 == 1)\n      \
    \  val wordCountEvenOrderUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercase\
    \ = wordList.count(_.toString.count(_ == ord('Z')).toDouble % 2 == 1)\n      \
    \  val wordCountEvenOrderUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercase\
    \ = wordList.count(_.toString.count(_ == ord('Z')).toDouble % 2 == 1)\n      \
    \  val wordCountEvenOrderUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercase\
    \ = wordList.count(_.toString.count(_ == ord('Z')).toDouble % 2 == 1)\n      \
    \  val wordCountEvenOrderUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercase\
    \ = wordList.count(_.toString.count(_ == \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnxxw2h8l.scala:31:204 --------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mwordCountEvenOrderUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercaseLowercaseUppercase\e\
    [0m = wordList.count(_.toString.count(_ == \n\e[31m\e[31m   |\e[0m           \
    \                                                                            \
    \                                                                            \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                           expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpnxxw2h8l.scala:18:48 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mwordCountLowercase\e[0m\
    \ = wordList.count(_.toLowerCase == _)\n\e[31m\e[31m   |\e[0m                \
    \                                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                             Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpnxxw2h8l.scala:19:69 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwordCountOddOrder\e[0m =\
    \ wordList.count(_.toString.count(_ == ord(\e[31m'a'\e[0m)).toDouble % \e[31m2\e\
    [0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                                   ^^^\e[0m\n\e[31m   |\e[0m                \
    \                                          Not found: ord\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnxxw2h8l.scala:20:70 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mwordCountEvenOrder\e[0m\
    \ = wordList.count(_.toString.count(_ == ord(\e[31m'z'\e[0m)).toDouble % \e[31m2\e\
    [0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                                    ^^^\e[0m\n\e[31m   |\e[0m               \
    \                        "
  stdout: ''
  timestamp: 1659800308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.head.length)\n        else Right(words.map(_.length).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbvlmssg5.scala:21)\n\tat Problem.main(tmpbvlmssg5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        val wordList = words.toList\n        if (wordList.length == 0) Right(words.size)\n\
    \        val wordListWithSpaces = wordList.map(word => if (word.contains(\" \"\
    )) {\n            val splitWord = word.split(\" \")\n            splitWord.map(word\
    \ => if (word.contains(\",\")) {\n                val splitWord = word.split(\"\
    ,\")\n                splitWord.map(word => if (word.contains(\" \")) {\n    \
    \                val splitWord = word.split(\" \")\n                    splitWord.map(word\
    \ => if (word.contains(\" \")) {\n                        val splitWord = word.split(\"\
    \ \")\n                        splitWord.map(word => if (word.contains(\" \"))\
    \ {\n                            val splitWord = word.split(\" \")\n         \
    \                   splitWord.map(word => if (word.contains(\" \")) {\n      \
    \                          val splitWord = word.split(\" \")\n               \
    \                 splitWord.map(word => if (word.contains(\" \")) {\n        \
    \                            val splitWord = word.split(\" \")\n             \
    \                       splitWord.map(word => if (word.contains(\" \")) {\n  \
    \                                      val splitWord = word.split(\" \")\n   \
    \                                     splitWord.map(word => if (word.contains(\"\
    \ \")) {\n                                            val splitWord = word.split(\"\
    \ \")\n                                            splitWord.map(word => if (word.contains(\"\
    \ \")) {\n                                                val splitWord = word.split(\"\
    \ \")\n                                                splitWord.map(word => if\
    \ (word.contains(\" \")) {\n                                                 \
    \   val splitWord = word.split(\" \")\n                                      \
    \              splitWord.map(word => if (word.contains(\" \")) {\n           \
    \                                             val splitWord = word.split(\" \"\
    )\n                                                        splitWord.map(word\
    \ => if (word.contains(\" \")) {\n                                           \
    \                 val splitWord = word.split(\" \")\n                        \
    \                                    splitWord.map(word => if (word.contains(\"\
    \ \")) {\n                                                                val\
    \ splitWord = word.split(\" \")\n                                            \
    \                    splitWord.map(word => if (word.contains(\" \")) {\n     \
    \                                                               val splitWord\
    \ = word.split(\" \")\n                                                      \
    \              splitWord.map(word => if (word.contains(\" \")) {\n           \
    \                                                             val splitWord =\
    \ word.split(\" \")\n                                                        \
    \                splitWord.map(word => if (word.contains(\" \")) {\n         \
    \                                                                   val splitWord\
    \ = word.split(\" \")\n                                                      \
    \                      splitWord.map(word => if (word.contains(\" \")) {\n   \
    \                                                                            \
    \ val splitWord = word.split(\" \")\n                                        \
    \                                        splitWord.map(word => if (word.contains(\"\
    \ \")) {\n                                                                   \
    \                 val splitWord = word.split(\" \")\n                        \
    \                                                            splitWord.map(word\
    \ => if (word.contains(\" \")) {\n                                           \
    \                                             val splitWord = word.split(\" \"\
    )\n                                                                          \
    \              splitWord.map(word => if (word.contains(\" \")) {\n           \
    \                                                                            \
    \     val splitWord = word.split(\" \")\n                                    \
    \                                                        splitWord.map(word =>\
    \ if (word.contains(\" \")) {\n                                              \
    \                  \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjt0kc9bf.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpjt0kc9bf.scala:76:0 ----------------------------\e[0m\e[0m\n\e[31m76\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjt0kc9bf.scala:75:1 ---------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        if (words.isEmpty) Right(words.size)\n\
    \        else if (words.size == 1) Right(words.head.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp09ods80d.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else if (words.length\
    \ == 26) Right(words.length)\n        else if (words.length == 27) Right(words.length)\n\
    \        else if (words.length == 28) Right(words.length)\n        else if (words.length\
    \ == 29) Right(words.length)\n        else if (words.length == 30) Right(words.length)\n\
    \        else if (words.length == 31) Right(words.length)\n        else if (words.length\
    \ == 32) Right(words.length)\n        else if (words.length == 33) Right(words.length)\n\
    \        else if (words.length == 34) Right(words.length)\n        else if (words.length\
    \ == 35) Right(words.length)\n        else if (words.length == 36) Right(words.length)\n\
    \        else if (words.length == 37) Right(words.length)\n        else if (words.length\
    \ == 38) Right(words.length)\n        else if (words.length == 39) Right(words.length)\n\
    \        else if (words.length == 40) Right(words.length)\n        else if (words.length\
    \ == 41) Right(words.length)\n        else if (words.length == 42) Right(words.length)\n\
    \        else if (words.length == 43) Right(word\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7snxi0xj.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7snxi0xj.scala:59:43\
    \ ------------------------\e[0m\e[0m\n\e[31m59 |\e[0m        \e[33melse\e[0m \e\
    [33mif\e[0m (words.length == \e[31m43\e[0m) Right(word\n\e[31m\e[31m   |\e[0m\
    \                                           ^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                    Not found: word\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val numWords = words.length\n        val numLetters\
    \ = txt.length\n        val numLettersWithOddOrder = numLetters.toString.toList.count(_\
    \ % 2 != 0)\n        val numLettersWithEvenOrder = numLetters.toString.toList.count(_\
    \ % 2 == 0)\n        val numLettersWithOddOrderInAlphabet = numLetters.toString.toList.count(_\
    \ % 2 != 0 && _ < 26)\n        val numLettersWithEvenOrderInAlphabet = numLetters.toString.toList.count(_\
    \ % 2 == 0 && _ < 26)\n        val numLettersWithOddOrderInAlphabetInWords = numLetters.toString.toList.count(_\
    \ % 2 != 0 && _ < 26 && _ > 0)\n        val numLettersWithEvenOrderInAlphabetInWords\
    \ = numLetters.toString.toList.count(_ % 2 == 0 && _ < 26 && _ > 0)\n        val\
    \ numLettersWithOddOrderInAlphabetInWordsInWords = numLetters.toString.toList.count(_\
    \ % 2 != 0 && _ < 26 && _ > 0 && _ > 0)\n        val numLettersWithEvenOrderInAlphabetInWordsInWords\
    \ = numLetters.toString.toList.count(_ % 2 == 0 && _ < 26 && _ > 0 && _ > 0)\n\
    \        val numLettersWithOddOrderInAlphabetInWordsInWordsInWords = numLetters.toString.toList.count(_\
    \ % 2 != 0 && _ < 26 && _ > 0 && _ > 0 && _ > 0)\n        val numLettersWithEvenOrderInAlphabetInWordsInWordsInWords\
    \ = numLetters.toString.toList.count(_ % 2 == 0 && _ < 26 && _ > 0 && _ > 0 &&\
    \ _ > 0)\n        val numLettersWithOddOrderInAlphabetInWordsInWordsInWordsInWords\
    \ = numLetters.toString.toList.count(_ % 2 != 0 && _ < 26 && _ > 0 && _ > 0 &&\
    \ _ > 0 && _ > 0)\n        val numLettersWithEvenOrderInAlphabetInWordsInWordsInWordsInWords\
    \ = numLetters.toString.toList.count(_ % 2 == 0 && _ < 26 && _ > 0 && _ > 0 &&\
    \ _ > 0 && _ > 0 && _ > 0)\n        val numLettersWithOddOrderInAlphabetInWordsInWordsInWordsInWords\
    \ = numLetters.toString.toList.count(_ % 2 != 0 && _ < 26 && _ > 0 && _ > 0 &&\
    \ _ > 0 && _ > 0 && _\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw0vqv3gk.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw0vqv3gk.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumLettersWithOddOrderInAlphabetInWordsInWordsInWordsInWords\e[0m = numLetters.toString.toList.count(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m && _ < \e[31m26\e[0m && _ > \e[31m0\e[0m && _\
    \ > \e[31m0\e[0m && _ > \e[31m0\e[0m && _ > \e[31m0\e[0m && _\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumLettersWithOddOrderInAlphabetInWordsInWordsInWordsInWords\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumLettersWithOddOrderInAlphabetInWordsInWordsInWordsInWords\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E086] Syntax\
    \ Error: /tmp/tmpw0vqv3gk.scala:20:80 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnumLettersWithOddOrderInAlphabet\e[0m\
    \ = numLetters.toString.toList.count(_ % \e[31m2\e[0m != \e[31m0\e[0m && _ < \e\
    [31m26\e[0m)\n\e[31m\e[31m   |\e[0m                                          \
    \                                      ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Wrong number of parameters, expected: 1\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmpw0vqv3gk.scala:21:81 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumLettersWithEvenOrderInAlphabet\e\
    [0m = numLetters.toString.toList.count(_ % \e[31m2\e[0m == \e[31m0\e[0m && _ <\
    \ \e[31m26\e[0m)\n\e[31m\e[31m   |\e[0m                                      \
    \                                           ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpw0vqv3gk.scala:22:87 --"
  stdout: ''
  timestamp: 1659800309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        val noWhiteSpaceWords =\
    \ words.filter(_.nonEmpty)\n        val noCommaWords = noWhiteSpaceWords.filter(_.contains(\"\
    ,\"))\n        val noLettersWords = noCommaWords.filter(_.toString.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxyz\")\n        val noLettersWordsCount = noLettersWords.map(_.length).sum\n\
    \        val noLettersWordsCountRight = noLettersWordsCount.right\n        val\
    \ noLettersWordsCountLeft = noLettersWordsCount.left\n        val noLettersWordsCountRightOrLeft\
    \ = noLettersWordsCountRight | noLettersWordsCountLeft\n        val noLettersWordsCountRightOrLeftOrZero\
    \ = noLettersWordsCountRightOrLeft | 0\n        val noLettersWordsCountRightOrLeftOrZeroOrZero\
    \ = noLettersWordsCountRightOrLeftOrZero | 0\n        val noLettersWordsCountRightOrLeftOrZeroOrZeroOrZero\
    \ = noLettersWordsCountRightOrLeftOrZeroOrZero | 0\n        val noLettersWordsCountRightOrLeftOrZeroOrZeroOrZeroOrZero\
    \ = noLettersWordsCountRightOrLeftOrZeroOrZeroOrZero | 0\n        val noLettersWordsCountRightOrLeftOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = noLettersWordsCountRightOrLeftOrZeroOrZeroOrZeroOrZero | 0\n        val noLettersWordsCountRightOrLeftOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = noLettersWordsCountRightOrLeftOrZeroOrZeroOrZeroOrZeroOrZero | 0\n       \
    \ val noLettersWordsCountRightOrLeftOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = noLettersWordsCountRightOrLeftOrZeroOrZeroOrZeroOrZeroOrZeroOrZero | 0\n \
    \       val noLettersWordsCountRightOrLeftOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = noLettersWordsCountRightOrLeftOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ | 0\n        val noLettersWordsCountRightOr\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3znrmpnf.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3znrmpnf.scala:20:59\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mnoLettersWordsCountRight\e[0m = noLettersWordsCount.right\n\e[31m\e[31m  \
    \ |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      value right is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3znrmpnf.scala:21:58\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mnoLettersWordsCountLeft\e[0m = noLettersWordsCount.left\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      value left is not a member of\
    \ Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3znrmpnf.scala:30:99 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnoLettersWordsCountRightOrLeftOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\e\
    [0m = noLettersWordsCountRightOrLeftOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ | \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: noLettersWordsCountRightOrLeftOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3znrmpnf.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659800310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.head.length)\n        else Right(words.map(_.length).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbvlmssg5.scala:21)\n\tat Problem.main(tmpbvlmssg5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(_.toLowerCase == \"even\")\n            val\
    \ odd = words.filter(_.toLowerCase == \"odd\")\n            val evenCount = even.map(_.length).sum\n\
    \            val oddCount = odd.map(_.length).sum\n            Right(evenCount\
    \ + oddCount)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpedfojbi3.scala:27)\n\tat Problem.main(tmpedfojbi3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val numWords = words.length\n        val numLetters\
    \ = txt.length\n        val numLettersOdd = numLetters % 2\n        val numLettersEven\
    \ = numLetters - numLettersOdd\n        val numLettersEvenOrOdd = if (numLettersEven\
    \ == 0) \"even\" else \"odd\"\n        val numLettersEvenOrOddOrZero = if (numLettersEvenOrOdd\
    \ > 0) \"even-or-odd\" else \"zero\"\n        val numLettersEvenOrOddOrOne = if\
    \ (numLettersEvenOrOdd > 1) \"even-or-odd-or-one\" else \"one-or-zero\"\n    \
    \    val numLettersEvenOrOddOrTwo = if (numLettersEvenOrOdd > 2) \"even-or-odd-or-two\"\
    \ else \"two-or-one\"\n        val numLettersEvenOrOddOrThree = if (numLettersEvenOrOdd\
    \ > 3) \"even-or-odd-or-three\" else \"three-or-two\"\n        val numLettersEvenOrOddOrFour\
    \ = if (numLettersEvenOrOdd > 4) \"even-or-odd-or-four\" else \"four-or-three\"\
    \n        val numLettersEvenOrOddOrFive = if (numLettersEvenOrOdd > 5) \"even-or-odd-or-five\"\
    \ else \"five-or-four\"\n        val numLettersEvenOrOddOrSix = if (numLettersEvenOrOdd\
    \ > 6) \"even-or-odd-or-six\" else \"six-or-five\"\n        val numLettersEvenOrOddOrSeven\
    \ = if (numLettersEvenOrOdd > 7) \"even-or-odd-or-seven\" else \"seven-or-six\"\
    \n        val numLettersEvenOrOddOrEight = if (numLettersEvenOrOdd > 8) \"even-or-odd-or-eight\"\
    \ else \"eight-or-seven\"\n        val numLettersEvenOrOddOrNine = if (numLettersEvenOrOdd\
    \ > 9) \"even-or-odd-or-nine\" else \"nine-or-eight\"\n        val numLettersEvenOrOddOrTen\
    \ = if (numLettersEvenOrOdd > \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzdzwbia2.scala:31:64 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrOddOrTen\e\
    [0m = \e[33mif\e[0m (numLettersEvenOrOdd > \n\e[31m\e[31m   |\e[0m           \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzdzwbia2.scala:21:66\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrOddOrZero\e\
    [0m = \e[33mif\e[0m (numLettersEvenOrOdd > \e[31m0\e[0m) \e[31m\"even-or-odd\"\
    \e[0m \e[33melse\e[0m \e[31m\"zero\"\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                                     Found:    (\e[31m0\e[0m\
    \ : Int)\n\e[31m   |\e[0m                                                    \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzdzwbia2.scala:22:65\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrOddOrOne\e\
    [0m = \e[33mif\e[0m (numLettersEvenOrOdd > \e[31m1\e[0m) \e[31m\"even-or-odd-or-one\"\
    \e[0m \e[33melse\e[0m \e[31m\"one-or-zero\"\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                     Found:    (\e[31m1\e[0m\
    \ : Int)\n\e[31m   |\e[0m                                                    \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzdzwbia2.scala:23:65\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrOddOrTwo\e\
    [0m = \e[33mif\e[0m (numLettersEvenOrOdd > \e[31m2\e[0m) \e[31m\"even-or-odd-or-two\"\
    \e[0m \e[33melse\e[0m \e[31m\"two-or-one\"\e[0m\n\e[31m\e[31m   |\e[0m        "
  stdout: ''
  timestamp: 1659800312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").map(_.toLowerCase)\n        val commas = txt.split(\",\"\
    ).map(_.toLowerCase)\n        val letters = txt.filter(_.isLetter).map(_.toLowerCase)\n\
    \        val letterCount = letters.count(_ % 2 == 1)\n        val commasCount\
    \ = commas.count(_ % 2 == 1)\n        val wordsCount = words.count(_ % 2 == 1)\n\
    \        val wordCount = txt.count(_ % 2 == 1)\n        val letterCountRight =\
    \ Right(letterCount)\n        val commasCountRight = Right(commasCount)\n    \
    \    val wordsCountRight = Right(wordsCount)\n        val wordCountRight = Right(wordCount)\n\
    \        val letterCountLeft = Left(letters)\n        val commasCountLeft = Left(commas)\n\
    \        val wordsCountLeft = Left(words)\n        val wordCountLeft = Left(words)\n\
    \        val letterCountRightLeft = Right(letterCountLeft)\n        val commasCountRightLeft\
    \ = Right(commasCountLeft)\n        val wordsCountRightLeft = Right(wordsCountLeft)\n\
    \        val wordCountRightLeft = Right(wordCountLeft)\n        val letterCountLeftLeft\
    \ = Left(letters)\n        val commasCountLeftLeft = Left(commas)\n        val\
    \ wordsCountLeftLeft = Left(words)\n        val wordCountLeftLeft = Left(words)\n\
    \        val letterCountRightLeftLeft = Right(letterCountLeftLeft)\n        val\
    \ commasCountRightLeftLeft = Right(commasCountLeftLeft)\n        val wordsCountRightLeftLeft\
    \ = Right(wordsCountLeftLeft)\n        val wordCountRightLeftLeft = Right(wordCountLeftLeft)\n\
    \        val letterCountLeftLeftLeft = Left(letters)\n        val commasCountLeftLeftLeft\
    \ = Left(commas)\n        val wordsCountLeftLeftLeft = Left(words)\n        val\
    \ wordCountLeftLeftLeft = Left(words)\n        val letterCountRightLeftLeftLeft\
    \ = Right(letterCountLeftLeftLeft)\n        val commasCountRightLeftLeftLeft =\
    \ Right(commasCountLeftLeftLeft)\n        val wordsCountRightLeftLeftLeft = Right(wordsCountLeftLeftLeft)\n\
    \        val wordCountRightLeftLeftLeft = Right(wordCountLeftLeftLeft)\n     \
    \   val letterCountLeftLeftLeftLeft = Left(letters)\n        val commasCountLeftLeftLeftLeft\
    \ = Left(commas)\n        val wordsCountLeftLeftLeftLeft = Left(\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8bg_jm41.scala:52:46 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mwordsCountLeftLeftLeftLeft\e\
    [0m = Left(\n\e[31m\e[31m   |\e[0m                                           \
    \   ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp8bg_jm41.scala:17:51 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mletters\e[0m = txt.filter(_.isLetter).map(_.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8bg_jm41.scala:19:41\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mcommasCount\e[0m = commas.count(_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                       ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8bg_jm41.scala:20:39\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsCount\e[0m = words.count(_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8bg_jm41.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   "
  stdout: ''
  timestamp: 1659800314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val even = words.filter(_.length == words.length)\n            val odd\
    \ = words.filter(_.length % 2 == 1)\n            val evenOrder = even.map(_.toLowerCase\
    \ - 'a')\n            val oddOrder = odd.map(_.toLowerCase - 'a')\n          \
    \  val evenOrderCount = evenOrder.count(_ % 2 == 1)\n            val oddOrderCount\
    \ = oddOrder.count(_ % 2 == 1)\n            val evenOrderCountString = evenOrderCount.toString\n\
    \            val oddOrderCountString = oddOrderCount.toString\n            if\
    \ (evenOrderCountString.isEmpty) Right(evenOrderCount)\n            else if (oddOrderCountString.isEmpty)\
    \ Right(oddOrderCount)\n            else Left(evenOrderCountString + \",\" + oddOrderCountString)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr5bcof9w.scala:21:51 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(_.toLowerCase\
    \ - \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of String, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmpr5bcof9w.scala:21:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(_.toLowerCase\
    \ - \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \           No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m    \
    \                                      where:    B is a type variable\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpr5bcof9w.scala:22:49 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddOrder\e[0m = odd.map(_.toLowerCase\
    \ - \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpr5bcof9w.scala:22:55 -----------------------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddOrder\e[0m = odd.map(_.toLowerCase\
    \ - \e[31m'a'\e[0m)\n\e[31m\e"
  stdout: ''
  timestamp: 1659800314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(0) else {\n  \
    \          val wordList = words.toList\n            val wordCount = wordList.filter(_.isLetter).length\n\
    \            val letterCount = wordList.filter(_.isLetter).map(_.toString.length).sum\n\
    \            val oddLetterCount = wordList.filter(_.isLetter).map(_.toString.length).filter(x\
    \ => x % 2 == 1).sum\n            Right(wordCount + letterCount + oddLetterCount)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgk80zs96.scala:18:46 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mwordCount\e[0m = wordList.filter(_.isLetter).length\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgk80zs96.scala:19:48\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36mletterCount\e[0m = wordList.filter(_.isLetter).map(_.toString.length).sum\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgk80zs96.scala:20:51\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddLetterCount\e[0m = wordList.filter(_.isLetter).map(_.toString.length).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m).sum\n\e[31m\e[31m   |\e[0m   \
    \                                              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                value isLetter is not a member of String\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val wordList = words.toList\n            val wordCount = wordList.map(_.length).sum\n\
    \            if (wordCount == 0) Right(wordCount)\n            else if (wordCount\
    \ == 1) Right(wordCount)\n            else {\n                val even = wordList.filter(_.length\
    \ == wordCount)\n                val odd = wordList.filter(_.length % 2 == 1)\n\
    \                val evenCount = even.map(_.length).sum\n                val oddCount\
    \ = odd.map(_.length).sum\n                if (evenCount == 0) Right(evenCount)\n\
    \                else if (evenCount == 1) Right(evenCount)\n                else\
    \ {\n                    if (oddCount == 0) Right(oddCount)\n                \
    \    else if (oddCount == 1) Right(oddCount)\n                    else {\n   \
    \                     val evenOdd = even.zip(odd)\n                        val\
    \ evenOddCount = evenOdd.map(x => (x._1, x._2.length)).sum\n                 \
    \       if (evenOddCount == 0) Right(evenOddCount)\n                        else\
    \ if (evenOddCount == 1) Right(evenOddCount)\n                        else {\n\
    \                            val evenOddEven = evenOdd.zip(even)\n           \
    \                 val evenOddEvenCount = evenOddEven.map(x => (x._1, x._2.length)).sum\n\
    \                            if (evenOddEvenCount == 0) Right(evenOddEvenCount)\n\
    \                            else if (evenOddEvenCount == 1) Right(evenOddEvenCount)\n\
    \                            else {\n                                val evenOddEvenOdd\
    \ = evenOddEven.zip(odd)\n                                val evenOddEvenOddCount\
    \ = evenOddEvenOdd.map(x => (x._1, x._2.length)).sum\n                       \
    \         if (evenOddEvenOddCount == 0) Right(evenOddEvenOddCount)\n         \
    \                       else if (evenOddEvenOddCount == 1) Right(evenOddEvenOddCount)\n\
    \                                else {\n                                    val\
    \ evenOddEvenOddEven = evenOddEvenOdd.zip(even)\n                            \
    \        val evenOddEvenOddEvenCount = evenOddEvenOddEven.map(x => (x._1, x._2.length)).sum\n\
    \                                    if (evenOddEvenOddEvenCount == 0) Right(evenOddEvenOddEvenCount)\n\
    \                                    else if (evenOddEvenOddEvenCount == 1) Right(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgdnqjeho.scala:52:81 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m                                    \e[33melse\e[0m \e\
    [33mif\e[0m (evenOddEvenOddEvenCount == \e[31m1\e[0m) Right(\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \       ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpgdnqjeho.scala:66:0 ----------------------------\e[0m\e[0m\n\e[31m66\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- Error: /tmp/tmpgdnqjeho.scala:35:84 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                        \e[33mval\e[0m \e[36mevenOddCount\e\
    [0m = evenOdd.map(\e[36mx\e[0m => (x._1, x._2.length)).sum\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \          ^\e[0m\n\e[31m   |\e[0m         No implicit Ordering defined for B\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m         where:    B is a type variable with constraint\
    \ >: (String, Int)\n\e[31m   |\e[0m         .\n\e[31m\e[31m-- Error: /tmp/tmpgdnqjeho.scala:40:96\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m40 |\e[0m       \
    \                     \e[33mval\e[0m \e[36mevenOddEvenCount\e[0m = evenOddEven.map(\e\
    [36mx\e[0m => (x._1, x._2.length)).sum\n\e[31m\e[31m   |\e[0m                \
    \                                                                            \
    \    ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for B\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mwhere:    B is a type variable with constraint >: ((String, String),\
    \ Int)\n\e[31m   |\e[0m.\n\e[31m\e[31m-- Error: /tmp/tmpgdnqjeho.scala:45:106\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \
    \                        \e[33mval\e[0m \e[36mevenOddEvenOddCount\e[0m = evenOddEvenOdd.map(\e\
    [36mx\e[0m => (x._1, x._2.length)).sum\n\e[31m\e[31m   |\e[0m                \
    \                                                "
  stdout: ''
  timestamp: 1659800315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val countLetters = words.map(_.length).sum\n\
    \        val countLettersOdd = countLetters % 2\n        val countLettersEven\
    \ = countLetters % 2 != 0\n        val countLettersEvenOdd = countLettersEven\
    \ && countLettersOdd\n        val countLettersOddEven = countLettersOdd && countLettersEven\n\
    \        val countLettersEvenOddEven = countLettersEvenOdd && countLettersOddEven\n\
    \        val countLettersOddEvenOdd = countLettersOddEven && countLettersEvenOdd\n\
    \        val countLettersEvenOddEvenOdd = countLettersEvenOddEven && countLettersOddEvenOdd\n\
    \        val countLettersOddEvenOddEven = countLettersOddEvenOddEven && countLettersEvenOddEvenOdd\n\
    \        val countLettersEvenOddEvenOddEven = countLettersEvenOddEvenOddEven &&\
    \ countLettersOddEvenOddEvenOdd\n        val countLettersOddEvenOddEvenOddEven\
    \ = countLettersOddEvenOddEvenOddEven && countLettersEvenOddEvenOddEvenOdd\n \
    \       val countLettersEvenOddEvenOddEvenOddEven = countLettersEvenOddEvenOddEvenOddEven\
    \ && countLettersOddEvenOddEvenOddEvenOdd\n        val countLettersOddEvenOddEvenOddEvenOddEven\
    \ = countLettersOddEvenOddEvenOddEvenOddEvenOddEven && countLettersEvenOddEvenOddEvenOddEvenOddEven\n\
    \        val countLettersEvenOddEvenOddEvenOddEvenOddEven = countLettersEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ && countLettersOddEvenOddEvenOddEvenOddEvenOddEven\n        val countLettersOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = countLettersOddEvenOddEvenOddEvenOddEvenOddEvenOddEven && countLettersEvenOddEvenOddEvenOddEvenOddEvenOddEven\n\
    \        val countLettersEvenOddEvenOddEvenOddEven\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0mdefs_a.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0mdefs_a.scala:19:54 --------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \        \e[33mval\e[0m \e[36mcountLettersEvenOdd\e[0m = countLettersEven && countLettersOdd\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    (countLettersOdd\
    \ : Int)\n\e[31m   |\e[0m                                       Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0mdefs_a.scala:20:50\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mcountLettersOddEven\e[0m = countLettersOdd && countLettersEven\n\e[31m\e[31m\
    \   |\e[0m                                  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                  value && is not a member of Int\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0mdefs_a.scala:24:41 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcountLettersOddEvenOddEven\e\
    [0m = countLettersOddEvenOddEven && countLettersEvenOddEvenOdd\n\e[31m\e[31m \
    \  |\e[0m                                         ^\e[0m\n\e[31m   |\e[0m    \
    \               Recursive \e[33mvalue\e[0m \e[35mcountLettersOddEvenOddEven\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0mdefs_a.scala:25:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcountLettersEvenOddEvenOddEven\e[0m = countLettersEvenOddEvenOddEven &&\
    \ countLettersOddEvenOddEvenOdd\n\e[31m\e[31m   |\e[0m                       \
    \                      ^\e[0m\n\e[31m   |\e[0m               Recursive \e[33mvalue\e\
    [0m \e[35mcountLettersEvenOddEvenOddEven\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compilin"
  stdout: ''
  timestamp: 1659800315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(0) else Right(words.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4my0rzy1.scala:19)\n\tat Problem.main(tmp4my0rzy1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ evenWords = words.filter(word => word.forall(c => c.isLetter) && c.toLower ==\
    \ 'a')\n            val oddWords = words.filter(word => word.forall(c => c.isLetter)\
    \ && c.toLower == 'b')\n            val evenLetters = evenWords.map(word => word.size)\n\
    \            val oddLetters = oddWords.map(word => word.size)\n            val\
    \ evenLettersSum = evenLetters.sum\n            val oddLettersSum = oddLetters.sum\n\
    \            if (evenLettersSum == oddLettersSum) Right(evenLettersSum)\n    \
    \        else Left(oddLettersSum)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw9htt1ea.scala:19:81 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower == \e[31m'a'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                                      Not found: c\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpw9htt1ea.scala:20:80 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower == \e[31m'b'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                                     Not found: c\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpw9htt1ea.scala:26:22 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33melse\e[0m Left(oddLettersSum)\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \               Found:    (oddLettersSum : Int)\n\e[31m   |\e[0m             \
    \         Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else if (words.length ==\
    \ 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else if (words.length\
    \ == 26) Right(words.length)\n        else if (words.length == 27) Right(words.length)\n\
    \        else if (words.length == 28) Right(words.length)\n        else if (words.length\
    \ == 29) Right(words.length)\n        else if (words.length == 30) Right(words.length)\n\
    \        else if (words.length == 31) Right(words.length)\n        else if (words.length\
    \ == 32) Right(words.length)\n        else if (words.length == 33) Right(words.length)\n\
    \        else if (words.length == 34) Right(words.length)\n        else if (words.length\
    \ == 35) Right(words.length)\n        else if (words.length == 36) Right(words.length)\n\
    \        else if (words.length == 37) Right(words.length)\n        else if (words.length\
    \ == 38) Right(words.length)\n        else if (words.length == 39) Right(words.length)\n\
    \        else if (words.length == 40) Right(words.length)\n        else if (words.length\
    \ == 41) Right(words.length)\n        else if (words.length == 42) Right(words.length)\n\
    \        else if (words.length == 43) \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8egkqffy.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val noWhiteSpaceWords = words.filter(_.nonEmpty)\n\
    \        val commaWords = words.filter(_.contains(\",\"))\n        val noCommaWords\
    \ = words.filter(_.contains(\",\"))\n        val noLetterWords = words.filter(_.forall(_.toLowerCase\
    \ == 'a'))\n        val noLetterWordsOdd = words.filter(_.forall(_.toLowerCase\
    \ == 'a'))\n        val noLetterWordsEven = words.filter(_.forall(_.toLowerCase\
    \ == 'a'))\n        val noLetterWordsOddEven = words.filter(_.forall(_.toLowerCase\
    \ == 'a'))\n        val noLetterWordsOddEvenOdd = words.filter(_.forall(_.toLowerCase\
    \ == 'a'))\n        val noLetterWordsOddEvenOddEven = words.filter(_.forall(_.toLowerCase\
    \ == 'a'))\n        val noLetterWordsOddEvenOddEvenOdd = words.filter(_.forall(_.toLowerCase\
    \ == 'a'))\n        val noLetterWordsOddEvenOddEvenOddEven = words.filter(_.forall(_.toLowerCase\
    \ == 'a'))\n        val noLetterWordsOddEvenOddEvenOddEvenOdd = words.filter(_.forall(_.toLowerCase\
    \ == 'a'))\n        val noLetterWordsOddEvenOddEvenOddEvenOddEven = words.filter(_.forall(_.toLowerCase\
    \ == 'a'))\n        val noLetterWordsOddEvenOddEvenOddEvenOddEvenOdd = words.filter(_.forall(_.toLowerCase\
    \ == 'a'))\n        val noLetterWordsOddEvenOddEvenOddEvenOddEvenOddEven = words.filter(_.forall(_.toLowerCase\
    \ == 'a'))\n        val noLetterWordsOddEvenOddEvenOddEvenOddEvenOddEvenOdd =\
    \ words.filter(_.forall(_.toLowerCase == 'a'))\n        val noLetterWordsOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = words.filter(_.forall(_.toLowerCase == 'a'))\n        val noLetterWordsOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = words.filter(_.forall(_.toLowerCase == 'a'))\n        val noLetterWordsOddEvenOddEvenOddEvenOddEvenOddEven\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpej856m_b.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpej856m_b.scala:19:52\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mnoLetterWords\e[0m = words.filter(_.forall(_.toLowerCase == \e[31m'a'\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpej856m_b.scala:20:55\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mnoLetterWordsOdd\e[0m = words.filter(_.forall(_.toLowerCase == \e[31m'a'\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value toLowerCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpej856m_b.scala:21:56\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mnoLetterWordsEven\e[0m = words.filter(_.forall(_.toLowerCase == \e[31m'a'\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpej856m_b.scala:22:59 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mnoLetterWordsOddEven\e[0m = words.filter(_.forall(_.toLowerCase\
    \ == \e[31m'a'\e[0m))\n\e[31m\e[31m   |\e[0m                                 \
    \                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \              value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpej856m_b.scala:23:62 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnoLetterWordsOddEvenOdd\e[0m\
    \ = words.filter(_.forall(_.toLowerCase == \e[31m'a'\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                     "
  stdout: ''
  timestamp: 1659800318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnav5eu4l.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ letters = words.map(_.toLower)\n            val odd = letters.filter(letter\
    \ => letter % 2 != 0).length\n            Right(odd)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy49ryikh.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = words.map(_.toLower)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 value toLower is not a member of String\n\
    \e[31m\e[31m-- Error: /tmp/tmpy49ryikh.scala:19:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = words.map(_.toLower)\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                          No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                        \
    \  where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(word => word.length % 2 == 0)\n            val\
    \ odd = words.filter(word => word.length % 2 != 0)\n            val evenCount\
    \ = even.map(word => word.length).sum\n            val oddCount = odd.map(word\
    \ => word.length).sum\n            val evenOrder = even.map(word => word.charAt(0)).map(_.toInt).sum\n\
    \            val oddOrder = odd.map(word => word.charAt(0)).map(_.toInt).sum\n\
    \            val evenLetters = even.map(word => word.charAt(1)).map(_.toInt).sum\n\
    \            val oddLetters = odd.map(word => word.charAt(1)).map(_.toInt).sum\n\
    \            val evenLettersCount = even.map(word => word.charAt(2)).map(_.toInt).sum\n\
    \            val oddLettersCount = odd.map(word => word.charAt(2)).map(_.toInt).sum\n\
    \            val evenLettersOrder = even.map(word => word.charAt(3)).map(_.toInt).sum\n\
    \            val oddLettersOrder = odd.map(word => word.charAt(3)).map(_.toInt).sum\n\
    \            val evenLettersOrderCount = even.map(word => word.charAt(4)).map(_.toInt).sum\n\
    \            val oddLettersOrderCount = odd.map(word => word.charAt(4)).map(_.toInt).sum\n\
    \            val evenLettersOrderOrder = even.map(word => word.charAt(5)).map(_.toInt).sum\n\
    \            val oddLettersOrderOrder = odd.map(word => word.charAt(5)).map(_.toInt).sum\n\
    \            val evenLettersOrderOrderCount = even.map(word => word.charAt(6)).map(_.toInt).sum\n\
    \            val oddLettersOrderOrderCount = odd.map(word => word.charAt(6)).map(_.toInt).sum\n\
    \            val evenLettersOrderOrderOrder = even.map(word => word.charAt(7)).map(_.toInt).sum\n\
    \            val oddLettersOrderOrderOrder = odd.map(word => word.charAt(7)).map(_.toInt).sum\n\
    \            val evenLettersOrderOrderOrderCount = even.map(word => word.charAt(8)).map(_.toInt).sum\n\
    \            val oddLettersOrderOrderOrderCount = odd.map(word => word.charAt(8)).map(_.toInt).sum\n\
    \            val evenLettersOrderOrder\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4o85dgn8.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4o85dgn8.scala:55:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m55 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp4o85dgn8.scala:54:1 ---------------------\e[0m\e[0m\n\
    \e[31m54 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmp4o85dgn8.scala:43:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m43 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val wordList = words.toList\n            val numWords = wordList.size\n\
    \            val numLetters = wordList.map(_.length).sum\n            val numLettersOdd\
    \ = numLetters % 2\n            val numLettersEven = numLetters - numLettersOdd\n\
    \            val numLettersEvenOdd = numLettersEven % 2\n            val numLettersEvenEven\
    \ = numLettersEven - numLettersEvenOdd\n            val numLettersOddEven = numLettersOdd\
    \ - numLettersEvenOdd\n            val numLettersOddOdd = numLettersOdd - numLettersOddEven\n\
    \            val numLettersEvenEvenOdd = numLettersEvenEven - numLettersEvenOdd\n\
    \            val numLettersEvenOddOdd = numLettersEvenOdd - numLettersOddOdd\n\
    \            val numLettersOddEvenOdd = numLettersOddEven - numLettersEvenOdd\n\
    \            val numLettersOddOddEven = numLettersOddOdd - numLettersEvenOdd\n\
    \            val numLettersEvenEvenOddOdd = numLettersEvenEvenOdd - numLettersOddOdd\n\
    \            val numLettersEvenOddOddEven = numLettersEvenOddOdd - numLettersEvenEvenOdd\n\
    \            val numLettersOddEvenOddEven = numLettersOddEvenOdd - numLettersEvenEvenOdd\n\
    \            val numLettersOddOddEvenOdd = numLettersOddOddEven - numLettersEvenOddOdd\n\
    \            val numLettersEvenEvenOddOddEven = numLettersEvenEvenOddOdd - numLettersOddOddEven\n\
    \            val numLettersEvenOddOddEvenOdd = numLettersEvenOddOddEven - numLettersEvenOddOdd\n\
    \            val numLettersOddEvenOddEvenOdd = numLettersOddEvenOddEven - numLettersOddOddEvenOdd\n\
    \            val numLettersEvenEvenOddOddOddEven = numLettersEvenEvenOdd\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmmsa1db1.scala:53:0 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmmsa1db1.scala:52:1\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpmmsa1db1.scala:41:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m41 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659800318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ lowerCaseWords = words.map(_.toLowerCase)\n            val evenOrderWords =\
    \ lowerCaseWords.filter(word => word.forall(_.isLetter) && word.count(_ == 'a')\
    \ % 2 == 0)\n            val oddOrderWords = lowerCaseWords.filter(word => word.forall(_.isLetter)\
    \ && word.count(_ == 'a') % 2 == 1)\n            val evenOrderWordsCount = evenOrderWords.count(_\
    \ == 'a')\n            val oddOrderWordsCount = oddOrderWords.count(_ == 'a')\n\
    \            val evenOrderWordsCountString = evenOrderWordsCount.toString\n  \
    \          val oddOrderWordsCountString = oddOrderWordsCount.toString\n      \
    \      val evenOrderWordsCountLong = Long.parseLong(evenOrderWordsCountString)\n\
    \            val oddOrderWordsCountLong = Long.parseLong(oddOrderWordsCountString)\n\
    \            if (evenOrderWordsCountLong > oddOrderWordsCountLong) Right(evenOrderWordsCount)\n\
    \            else Left(oddOrderWordsCount)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpiwjn6w_s.scala:22:59 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mevenOrderWordsCount\e\
    [0m = evenOrderWords.count(_ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                                    ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpiwjn6w_s.scala:23:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36moddOrderWordsCount\e\
    [0m = oddOrderWords.count(_ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \                                                 ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpiwjn6w_s.scala:26:47 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mevenOrderWordsCountLong\e\
    [0m = Long.parseLong(evenOrderWordsCountString)\n\e[31m\e[31m   |\e[0m       \
    \                                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                     value parseLong is not a member of object Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiwjn6w_s.scala:27:46 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36moddOrderWordsCountLong\e\
    [0m = Long.parseLong(oddOrderWordsCountString)\n\e[31m\e[31m   |\e[0m        \
    \                                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                   value parseLong is not a member of object Long\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpiwjn6w_s.scala:29:22 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33melse\e[0m Left(oddOrderWordsCount)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Found:    (oddOrderWordsCount : Int)\n\e[31m   |\e[0m\
    \                      Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659800318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val evens = words.filter(w => w.length == w.toLowerCase && w.toLowerCase\
    \ % 2 == 0)\n            val odds = words.filter(w => w.length == w.toLowerCase\
    \ && w.toLowerCase % 2 != 0)\n            val evensCount = evens.count(w => w.toLowerCase\
    \ == w.toLowerCase && w.toLowerCase % 2 == 0)\n            val oddsCount = odds.count(w\
    \ => w.toLowerCase == w.toLowerCase && w.toLowerCase % 2 != 0)\n            val\
    \ evensOddsCount = evens.count(w => w.toLowerCase == w.toLowerCase && w.toLowerCase\
    \ % 2 == 0 && w.toLowerCase % 2 != 0)\n            val oddsEvensCount = odds.count(w\
    \ => w.toLowerCase == w.toLowerCase && w.toLowerCase % 2 != 0 && w.toLowerCase\
    \ % 2 == 0)\n            val evensOddsEvensCount = evens.count(w => w.toLowerCase\
    \ == w.toLowerCase && w.toLowerCase % 2 == 0 && w.toLowerCase % 2 != 0 && w.toLowerCase\
    \ % 2 == 0)\n            val evensOddsEvensOddsCount = odds.count(w => w.toLowerCase\
    \ == w.toLowerCase && w.toLowerCase % 2 != 0 && w.toLowerCase % 2 == 0 && w.toLowerCase\
    \ % 2 != 0)\n            val evensOddsEvensOddsEvensCount = evens.count(w => w.toLowerCase\
    \ == w.toLowerCase && w.toLowerCase % 2 == 0 && w.toLowerCase % 2 != 0 && w.toLowerCase\
    \ % 2 == 0 && w.toLowerCase % 2 != 0)\n            val evensOddsEvensOddsEvensOddsCount\
    \ = odds.count(w => w.toLowerCase == w.toLowerCase && w.toLowerCase % 2 != 0 &&\
    \ w.toLowerCase % 2 == 0 && w.toLowerCase % 2 != 0 && w.toLowerCase % 2 == 0)\n\
    \            val evensOddsEvensOddsEvensOddsEvensCount = evens.count(w => w.toLowerCase\
    \ == w.toLowerCase && w.toLowerCase % 2 == 0 && w.toLowerCase % 2 != 0 && w.toLowerCase\
    \ % 2 == 0 && w.toLowerCase % 2 != 0 && w.toLowerCase \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6k12vr_4.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6k12vr_4.scala:43:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m43 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmp6k12vr_4.scala:19:42\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \     \e[33mval\e[0m \e[36mevens\e[0m = words.filter(\e[36mw\e[0m => w.length\
    \ == w.toLowerCase && w.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6k12vr_4.scala:19:85\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevens\e[0m = words.filter(\e[36mw\e[0m => w.length == w.toLowerCase &&\
    \ w.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                                                ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue % is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmp6k12vr_4.scala:20:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modds\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && w.toLowerCase % \e[31m2\e[0m != \e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6k12vr_4.scala:20:84\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36modds\e[0m = words.filter(\e[36mw\e[0m "
  stdout: ''
  timestamp: 1659800320
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Left(List[String]())\n \
    \       else if (words.size == 1) Right(words.head.toLong)\n        else Right(words.map(_.toLong).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.splitWords$$anonfun$1(tmps7x3ptpq.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.splitWords(tmps7x3ptpq.scala:18)\n\
    \tat Problem$.main(tmps7x3ptpq.scala:21)\n\tat Problem.main(tmps7x3ptpq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else if (words.length\
    \ == 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else if (words.length\
    \ == 26) Right(words.length)\n        else if (words.length == 27) Right(words.length)\n\
    \        else if (words.length == 28) Right(words.length)\n        else if (words.length\
    \ == 29) Right(words.length)\n        else if (words.length == 30) Right(words.length)\n\
    \        else if (words.length == 31) Right(words.length)\n        else if (words.length\
    \ == 32) Right(words.length)\n        else if (words.length == 33) Right(words.length)\n\
    \        else if (words.length == 34) Right(words.length)\n        else if (words.length\
    \ == 35) Right(words.length)\n        else if (words.length == 36) Right(words.length)\n\
    \        else if (words.length == 37) Right(words.length)\n        else if (words.length\
    \ == 38) Right(words.length)\n        else if (words.length == 39) Right(words.length)\n\
    \        else if (words.length == 40) Right(words.length)\n        else if (words.length\
    \ == 41) Right(words.length)\n        else if (words.length == 42) Right(words.length)\n\
    \        else if (words.length == 43) Right(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprss871lc.scala:59:43 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.length ==\
    \ \e[31m43\e[0m) Right(\n\e[31m\e[31m   |\e[0m                               \
    \            ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.isEmpty) Left(List.empty)\n\
    \        else if (words.size == 1) Right(words.head.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgwrssbx8.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val numWords = words.length\n        val numLetters\
    \ = txt.length\n        val numLettersOddOrder = numLetters.toSet.filter(_ % 2\
    \ != 0).length\n        val numLettersEvenOrder = numLetters.toSet.filter(_ %\
    \ 2 == 0).length\n        val numLettersEvenOrderOdd = numLettersEvenOrder.toSet.filter(_\
    \ % 2 != 0).length\n        val numLettersEvenOrderEven = numLettersEvenOrder.toSet.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderOddEven = numLettersEvenOrderEven.toSet.filter(_\
    \ % 2 != 0).length\n        val numLettersEvenOrderEvenOdd = numLettersEvenOrderEven.toSet.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderOddEvenOdd = numLettersEvenOrderOddEven.toSet.filter(_\
    \ % 2 != 0).length\n        val numLettersEvenOrderEvenOddEven = numLettersEvenOrderOddEven.toSet.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderOddEvenOddEven = numLettersEvenOrderEvenOddEven.toSet.filter(_\
    \ % 2 != 0).length\n        val numLettersEvenOrderEvenOddEvenOdd = numLettersEvenOrderOddEvenOddEven.toSet.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderOddEvenOddEvenOdd = numLettersEvenOrderEvenOddEvenOddEven.toSet.filter(_\
    \ % 2 != 0).length\n        val numLettersEvenOrderEvenOddEvenOddEvenOdd = numLettersEvenOrderOddEvenOddEvenOddEven.toSet.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderEvenOddEvenOddEvenOddEven =\
    \ numLettersEvenOrderEvenOddEvenOddEvenOddEven.toSet.filter(_ % 2 != 0).length\n\
    \        val numLettersEvenOrderEvenOddEvenOddEvenOddEvenOdd = numLettersEvenOrderEvenOddEvenOddEvenOddEvenOddEven.toSet.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderEvenOddEvenOddEvenOddEvenOddEven\
    \ = numLettersEvenOrderEvenOddEvenOddEvenOddEvenOddEvenOddEven.toSet.filter(_\
    \ % 2 != \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzgidyad0.scala:32:146 --------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrderEvenOddEvenOddEvenOddEvenOddEven\e\
    [0m = numLettersEvenOrderEvenOddEvenOddEvenOddEvenOddEvenOddEven.toSet.filter(_\
    \ % \e[31m2\e[0m != \n\e[31m\e[31m   |\e[0m                                  \
    \                                                                            \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                      expression expected but \e[31m'}'\e[0m found\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzgidyad0.scala:18:44 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumLettersOddOrder\e[0m\
    \ = numLetters.toSet.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m     value toSet is not a member of Int - did you mean numLetters.toInt?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzgidyad0.scala:19:45 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrder\e[0m\
    \ = numLetters.toSet.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e\
    [31m   |\e[0m                                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m     value toSet is not a member of Int - did you mean numLetters.toInt?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzgidyad0.scala:28:51 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrderOddEvenOddEvenOdd\e\
    [0m = numLettersEvenOrderEvenOddEvenOddEven.toSet.filter(_ % \e[31m2\e[0m != \e\
    [31m0\e[0m).length\n\e[31m\e[31m   |\e[0m                                    \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                      Not found: numLettersEvenOrderEvenOddEvenOddEven\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzgidyad0.scala:29:55 ----------------------"
  stdout: ''
  timestamp: 1659800319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val evenWords = words.filter(word => word.forall(_.isLetter) && word.forall(_.isLower))\n\
    \            val oddWords = words.filter(word => word.forall(_.isLetter) && !word.forall(_.isLower))\n\
    \            val evenLetters = evenWords.map(word => word.size)\n            val\
    \ oddLetters = oddWords.map(word => word.size)\n            val evenLettersCount\
    \ = evenLetters.sum\n            val oddLettersCount = oddLetters.sum\n      \
    \      val evenLettersCountInt = evenLettersCount.toInt\n            val oddLettersCountInt\
    \ = oddLettersCount.toInt\n            val evenLettersCountInt = evenLettersCount.toInt\n\
    \            val oddLettersCountInt = oddLettersCount.toInt\n            val evenLettersCountInt\
    \ = evenLettersCount.toInt\n            val oddLettersCountInt = oddLettersCount.toInt\n\
    \            val evenLettersCountInt = evenLettersCount.toInt\n            val\
    \ oddLettersCountInt = oddLettersCount.toInt\n            val evenLettersCountInt\
    \ = evenLettersCount.toInt\n            val oddLettersCountInt = oddLettersCount.toInt\n\
    \            val evenLettersCountInt = evenLettersCount.toInt\n            val\
    \ oddLettersCountInt = oddLettersCount.toInt\n            val evenLettersCountInt\
    \ = evenLettersCount.toInt\n            val oddLettersCountInt = oddLettersCount.toInt\n\
    \            val evenLettersCountInt = evenLettersCount.toInt\n            val\
    \ oddLettersCountInt = oddLettersCount.toInt\n            val evenLettersCountInt\
    \ = evenLettersCount.toInt\n            val oddLettersCountInt = oddLettersCount.toInt\n\
    \            val evenLettersCountInt = evenLettersCount.toInt\n            val\
    \ oddLettersCountInt = oddLettersCount.toInt\n            val evenLettersCountInt\
    \ = evenLettersCount.toInt\n            val oddLettersCountInt = oddLettersCount.toInt\n\
    \            val evenLettersCountInt = evenLettersCount.toInt\n            val\
    \ oddLettersCountInt = oddLettersCount.toInt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsvl2wygz.scala:62:0 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsvl2wygz.scala:27:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCountInt\e[0m = evenLettersCount.toInt\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mevenLettersCountInt is already defined as \e[33mvalue\e[0m \e[35mevenLettersCountInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsvl2wygz.scala:28:16 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountInt\e[0m = oddLettersCount.toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountInt is already defined as \e[33mvalue\e[0m\
    \ \e[35moddLettersCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpsvl2wygz.scala:29:16 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountInt\e\
    [0m = evenLettersCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenLettersCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpsvl2wygz.scala:30:16 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountInt\e\
    [0m = oddLettersCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountInt is already defined as \e[33mvalue\e[0m\
    \ \e[35moddLettersCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that"
  stdout: ''
  timestamp: 1659800319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else if (words.length\
    \ == 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else if (words.length\
    \ == 26) Right(words.length)\n        else if (words.length == 27) Right(words.length)\n\
    \        else if (words.length == 28) Right(words.length)\n        else if (words.length\
    \ == 29) Right(words.length)\n        else if (words.length == 30) Right(words.length)\n\
    \        else if (words.length == 31) Right(words.length)\n        else if (words.length\
    \ == 32) Right(words.length)\n        else if (words.length == 33) Right(words.length)\n\
    \        else if (words.length == 34) Right(words.length)\n        else if (words.length\
    \ == 35) Right(words.length)\n        else if (words.length == 36) Right(words.length)\n\
    \        else if (words.length == 37) Right(words.length)\n        else if (words.length\
    \ == 38) Right(words.length)\n        else if (words.length == 39) Right(words.length)\n\
    \        else if (words.length == 40) Right(words.length)\n        else if (words.length\
    \ == 41) Right(words.length)\n        else if (words.length == 42) Right(words.length)\n\
    \        else if (words.length == 43) Right(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprss871lc.scala:59:43 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.length ==\
    \ \e[31m43\e[0m) Right(\n\e[31m\e[31m   |\e[0m                               \
    \            ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnav5eu4l.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.head.length)\n        else {\n          \
    \  val letters = words.map(_.toLower)\n            val odd = letters.filter(letter\
    \ => letter % 2 != 0).length\n            Right(odd)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeao0aghf.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = words.map(_.toLower)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 value toLower is not a member of String\n\
    \e[31m\e[31m-- Error: /tmp/tmpeao0aghf.scala:19:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = words.map(_.toLower)\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                          No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                        \
    \  where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800319
