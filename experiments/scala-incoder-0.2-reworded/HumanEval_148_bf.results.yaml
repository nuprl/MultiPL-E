language: scala
name: HumanEval_148_bf
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => orbit(planet))\n        val sun = orbits.find(orbit\
    \ => orbit.distance < sunDistance)\n        val planetsBetweenSun = orbits.filter(orbit\
    \ => orbit.distance > sun.distance)\n        planetsBetweenSun.sortBy(orbit =>\
    \ sun.distance - orbit.distance)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmping45lz7.scala:22:43 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36morbits\e[0m = planets.map(\e\
    [36mplanet\e[0m => orbit(planet))\n\e[31m\e[31m   |\e[0m                     \
    \                      ^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                Not found: orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmping45lz7.scala:23:45 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36msun\e[0m = orbits.find(\e[36morbit\e[0m => orbit.distance\
    \ < sunDistance)\n\e[31m\e[31m   |\e[0m                                      \
    \ ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value distance\
    \ is not a member of Nothing\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmping45lz7.scala:24:61\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mplanetsBetweenSun\e[0m = orbits.filter(\e[36morbit\e[0m => orbit.distance\
    \ > sun.distance)\n\e[31m\e[31m   |\e[0m                                     \
    \                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         value distance is not a member of Nothing\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmping45lz7.scala:25:46 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m        planetsBetweenSun.sortBy(\e[36morbit\e[0m => sun.distance\
    \ - orbit.distance)\n\e[31m\e[31m   |\e[0m                                   \
    \       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value distance\
    \ is not a member of Option[Nothing]\n\e[31m\e[31m-- Error: /tmp/tmping45lz7.scala:25:72\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \ planetsBetweenSun.sortBy(\e[36morbit\e[0m => sun.distance - orbit.distance)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Orderi"
  stdout: ''
  timestamp: 1659798193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => orbit(planet))\n        val sun = orbits.map(orbit\
    \ => sun(orbit))\n        val proximity = sun zip orbits\n        proximity.sortBy(_._1).map(_._2).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwdvyv76n.scala:22:43 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36morbits\e[0m = planets.map(\e\
    [36mplanet\e[0m => orbit(planet))\n\e[31m\e[31m   |\e[0m                     \
    \                      ^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                Not found: orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpwdvyv76n.scala:23:38 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = orbits.map(\e[36morbit\e[0m =>\
    \ sun(orbit))\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Recursive \e[33mvalue\e\
    [0m \e[35msun\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpwdvyv76n.scala:25:30\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \ proximity.sortBy(_._1).map(_._2).toList\n\e[31m\e[31m   |\e[0m             \
    \                 ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mBigDecimal\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m\
    \ \e[35mSeqOps\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659798189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , 0.33),\n            Planet(\"Venus\", 0.33),\n            Planet(\"Earth\",\
    \ 0.33),\n            Planet(\"Mars\", 0.33),\n            Planet(\"Jupiter\"\
    , 0.33),\n            Planet(\"Saturn\", 0.33),\n            Planet(\"Uranus\"\
    , 0.33),\n            Planet(\"Neptune\", 0.33)\n        )\n        val sun =\
    \ Planet(\"Sun\", 0)\n        val orbits = planets.map(_.orbit(sun))\n       \
    \ val planetsBetween = orbits.filter(_.contains(planet1)).filter(_.contains(planet2))\n\
    \        val planetsBetweenSorted = planetsBetween.sortBy(_.distance(sun))\n \
    \       val planetsBetweenSortedWithSun = planetsBetweenSorted.filter(_.distance(sun)\
    \ < 0.2)\n        planetsBetweenSortedWithSun.map(_.name).toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcwxzauth.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0.33\e\
    [0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcwxzauth.scala:23:12\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, \e[31m0.33\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpcwxzauth.scala:24:12 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m0.33\e\
    [0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcwxzauth.scala:25:12\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, \e[31m0.33\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpcwxzauth.scala:26:12 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m0.33\e\
    [0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcwxzauth.scala:27:12\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            Planet(\e[31m\"\
    Saturn\"\e[0m, \e[31m0.33\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] No"
  stdout: ''
  timestamp: 1659798193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fpo4j_j.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n     \
    \       Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\
    \ Vector(0,0,0)),\n            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Mars\", Orbit(Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Jupiter\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n     \
    \       Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\
    \ Vector(0,0,0)),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n        )\n        val sun =\
    \ Planet(\"Sun\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n\
    \        val orbits = planets.map(_.orbit)\n        val sunOrbit = sun match {\n\
    \            case Planet(\"Sun\", orbit, _) => orbit\n        }\n        val planet1Orbit\
    \ = planet1 match {\n            case Planet(\"Mercury\", orbit, _) => orbit\n\
    \        }\n        val planet2Orbit = planet2 match {\n            case Planet(\"\
    Mercury\", orbit, _) => orbit\n        }\n        val planet1Orbits = orbits.filter(_.inPlanet(planet1Orbit))\n\
    \        val planet2Orbits = orbits.filter(_.inPlanet(planet2Orbit))\n       \
    \ val planet1SunOrbit = planet1Orbits.filter(_.inPlanet(sunOrbit))\n        val\
    \ planet2SunOrbit = planet2Orbits.filter(_.inPlanet(sunOrbit))\n        val planet1SunOrbits\
    \ = planet1SunOrbit.map(_.orbit)\n        val planet2SunOrbits = planet2SunOrbit.map(_.orbit)\n\
    \        val planet1SunOrbit\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"\
    Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgvofj5up.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgvofj5up.scala:22:12\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m1\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e\
    [0m)), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgvofj5up.scala:22:30 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m                            \
    \  ^^^^^\e[0m\n\e[31m   |\e[0m                              Not found: Orbit\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgvofj5up.scala:23:12\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m1\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e\
    [0m)), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgvofj5up.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m)),"
  stdout: ''
  timestamp: 1659798193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, neptune)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp92as_44v.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp92as_44v.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp92as_44v.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fpo4j_j.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fpo4j_j.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n \
    \       val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(jupiter, saturn, uranu\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprjbe1tr9.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val sun\
    \ = Planet(\"Sun\")\n        val planet1 = planets.find(_.toLowerCase == planet1.toLowerCase).getOrElse(sun)\n\
    \        val planet2 = planets.find(_.toLowerCase == planet2.toLowerCase).getOrElse(sun)\n\
    \        val orbit1 = planet1.orbit(planet2)\n        val orbit2 = planet2.orbit(planet1)\n\
    \        val orbits = orbit1 ++ orbit2\n        val sunOrbit = orbits.find(_.name\
    \ == \"Sun\").getOrElse(orbits.head)\n        val proximity = orbits.map(o =>\
    \ o.distance(sunOrbit))\n        proximity.sortBy(-_)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0gl07z_j.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp0gl07z_j.scala:23:52 ---------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mplanet1\e[0m = planets.find(_.toLowerCase\
    \ == planet1.toLowerCase).getOrElse(sun)\n\e[31m\e[31m   |\e[0m              \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                       Recursive \e[33mvalue\e[0m \e[35mplanet1\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0gl07z_j.scala:24:52\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanet2\e[0m = planets.find(_.toLowerCase == planet2.toLowerCase).getOrElse(sun)\n\
    \e[31m\e[31m   |\e[0m                                                    ^\e[0m\n\
    \e[31m   |\e[0m                                      Recursive \e[33mvalue\e[0m\
    \ \e[35mplanet2\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0gl07z_j.scala:25:29 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36morbit1\e[0m = planet1.orbit(planet2)\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value\
    \ orbit is not a member of String - did you mean planet1.split?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp0gl07z_j.scala:26:29 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36morbit2\e[0m = planet2.orbit(planet1)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \     value orbit is not a member of String - did you mean planet2.split?\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenMercuryAndMars = List(jupiter, saturn, uranus)\n  \
    \      val planetsBetweenMercuryAndJupiter = List(saturn, uranus)\n        val\
    \ planetsBetweenMercuryAndSaturn = List(uranus)\n        val planetsBetweenMercuryAndUranus\
    \ = List(uranus)\n        val planetsBetweenMercuryAndNeptune = List(uranus)\n\
    \        val planetsBetweenVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenVenusAndMars = List(jupiter, saturn, uranus)\n\
    \        val planetsBetweenVenusAndJupiter = List(saturn, \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpthboh50h.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpthboh50h.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpthboh50h.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpthboh50h.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpthboh50h.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpthboh50h.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpt"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, neptune)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp92as_44v.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp92as_44v.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp92as_44v.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(\n                Vector(\n                    Vector(\n             \
    \           Vector(\n                            Vector(\n                   \
    \             Vector(\n                                    Vector(\n         \
    \                               Vector(\n                                    \
    \        Vector(\n                                                Vector(\n  \
    \                                                  Vector(\n                 \
    \                                       Vector(\n                            \
    \                                Vector(\n                                   \
    \                             Vector(\n                                      \
    \                              Vector(\n                                     \
    \                                   Vector(\n                                \
    \                                            Vector(\n                       \
    \                                                         Vector(\n          \
    \                                                                          Vector(\n\
    \                                                                            \
    \            Vector(\n                                                       \
    \                                     Vector(\n                              \
    \                                                                  Vector(\n \
    \                                                                            \
    \                       Vector(\n                                            \
    \                                                            Vector(\n       \
    \                                                                            \
    \                         Vector(\n                                          \
    \                                                                      Vector(\n\
    \                                                                            \
    \                                        Vector(\n                           \
    \                                                                            \
    \                 Vector(\n                                                  \
    \                                                                          Vector(\n\
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                         Vector(\n                          \
    \                                                                            \
    \                                  Vector(\n                                 \
    \                                                                            \
    \                               Vector(\n                                    \
    \                                                                            \
    \                                Vector(\n                                   \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                              Vector(\n                     \
    \                                                                            \
    \                                                           Vector(\n        \
    \                                                                            \
    \                                                                            Vector(\n\
    \                                                                            \
    \                                                                            \
    \            Vector(\n                                                       \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                  Vector(\n \
    \                                                                            \
    \                                                                            \
    \                       Vector(\n                                            \
    \                                                                            \
    \                                                            Vector(\n       \
    \                                                                            \
    \                                                                            \
    \                         Vector(\n                                          \
    \                                                                            \
    \                                                                      Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                        Vector(\n                           \
    \                                                                            \
    \                                                                            \
    \                 Vector(\n                                                  \
    \                                                                            \
    \                                                                          Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                         Vector(\n                          \
    \                                                                            \
    \                                                                            \
    \                                  Vector(\n                                 \
    \                                                                            \
    \                                                                            \
    \                               Vector(\n                                    \
    \                                                                            \
    \                                                                            \
    \                                Vector(\n                                   \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                                              Vector(\n                     \
    \                                                                            \
    \                                                                            \
    \                                                           Vector(\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            Vector(\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                                                                  Vector(\n \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                       Vector(\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                                        Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                            Vector(\n                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                         Vector(\n                                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \          Vector(\n                                                         \
    \                                                                            \
    \                                                                            \
    \                                                                           Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                            Vector(\n       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         Vector(\n          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                          Vector(\n         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                               Vector(\n    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                        Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    Vector(\n                                                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     Vector(\n                                              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                          Vector(\n                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \   Vector(\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                            Vector(\n                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \             Vector(\n                                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                              Vector(\n     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                       Vector(\n                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    Vector(\n                                               \
    \                                                                            \
    \                                                                     \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpouqfizgi.scala:101:359 -------------------------\e\
    [0m\e[0m\n\e[31m101 |\e[0m                                                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                         Vector(\n\
    \e[31m\e[31m    |\e[0m                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            ^\e\
    [0m\n\e[31m    |\e[0m                                     expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpouqfizgi.scala:22:12 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpouqfizgi.scala:22:30 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                             Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpouqfizgi.scala:103:5 --------------------\e\
    [0m\e[0m\n\e[31m103 |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m   \
    \ |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required: List[String]\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, neptune)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp92as_44v.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp92as_44v.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp92as_44v.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(\n                Vector(\n                    Vector(\n             \
    \           Vector(0,0,0),\n                        Vector(0,0,1)\n          \
    \          ),\n                    Vector(\n                        Vector(0,0,0),\n\
    \                        Vector(0,1,0)\n                    )\n              \
    \  ),\n                Vector(\n                    Vector(0,0,0),\n         \
    \           Vector(0,1,0)\n                )\n            )),\n            Planet(\"\
    Venus\", Orbit(\n                Vector(\n                    Vector(\n      \
    \                  Vector(0,0,0),\n                        Vector(0,0,1)\n   \
    \                 ),\n                    Vector(\n                        Vector(0,0,0),\n\
    \                        Vector(0,1,0)\n                    )\n              \
    \  ),\n                Vector(\n                    Vector(0,0,0),\n         \
    \           Vector(0,1,0)\n                )\n            )),\n            Planet(\"\
    Earth\", Orbit(\n                Vector(\n                    Vector(0,0,0),\n\
    \                    Vector(0,0,1)\n                ),\n                Vector(\n\
    \                    Vector(0,0,0),\n                    Vector(0,1,0)\n     \
    \           )\n            )),\n            Planet(\"Mars\", Orbit(\n        \
    \        Vector(\n                    Vector(0,0,0),\n                    Vector(0,0,1)\n\
    \                ),\n                Vector(\n                    Vector(0,0,0),\n\
    \                    Vector(0,1,0)\n                )\n            )),\n     \
    \       Planet(\"Jupiter\", Orbit(\n                Vector(\n                \
    \    Vector(0,0,0),\n                    Vector(0,0,1)\n                ),\n \
    \               Vector(\n                    Vector(0,0,0),\n                \
    \    Vector(0,1,0)\n                )\n            )),\n            Planet(\"\
    Saturn\", Orbit(\n                Vector(\n                    Vector(0,0,0),\n\
    \                    Vector(0,0,1)\n                ),\n                Vector(\n\
    \                    Vector(0,0,0),\n                    Vector(0,1,0)\n     \
    \           )\n            )),\n            Planet(\"Uranus\", Orbit(\n      \
    \          Vector(\n                    Vector(0,0,0),\n                    Vector(0,0,1)\n\
    \                ),\n                Vector(\n                    Vector(0,0,0),\n\
    \                    Vector(0,1,0)\n                )\n            )),\n     \
    \       Planet(\"Neptune\", Orbit(\n                Vector(\n                \
    \    Vector(0,0,0),\n                    Vector(0,0,1)\n                ),\n \
    \               Vector(\n                    Vector(0,0,0),\n                \
    \    Vector(0,1,0)\n                )\n            ))\n        )\n        val\
    \ sun = Planet(\"Sun\", Orbit(\n            Vector(\n                Vector(0,0,0),\n\
    \                Vector(0,0,1)\n            ),\n            Vector(\n        \
    \        Vector(0,0,0),\n                Vector(0,1,0)\n            )\n      \
    \  ))\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpyqd7vrbp.scala:125:11 --------------------------\e\
    [0m\e[0m\n\e[31m125 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m    |\e[0m    \
    \       ^\e[0m\n\e[31m    |\e[0m           pattern expected\n\e[31m    |\e[0m\n\
    \e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqd7vrbp.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqd7vrbp.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                              ^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqd7vrbp.scala:38:12 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqd7vrbp.scala:38:28\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqd7vrbp.scala:54:12 ------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: "
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fpo4j_j.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth, mars, jupiter, saturn, uranus)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Mercury,\n      \
    \      Venus,\n            Earth,\n            Mars,\n            Jupiter,\n \
    \           Saturn,\n            Uranus,\n            Neptune\n        )\n   \
    \     val sun = Sun\n        val planet1Orbit = planets.find(_.name == planet1).getOrElse(throw\
    \ new IllegalArgumentException(\"Planet \" + planet1 + \" does not exist\"))\n\
    \        val planet2Orbit = planets.find(_.name == planet2).getOrElse(throw new\
    \ IllegalArgumentException(\"Planet \" + planet2 + \" does not exist\"))\n   \
    \     val orbits = planet1Orbit.orbits(planet2Orbit)\n        val proximity =\
    \ orbits.map(_.distanceTo(sun))\n        proximity.sortBy(_.abs).take(3).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp31snh8rc.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Mercury,\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Mercury\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp31snh8rc.scala:23:12 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            Venus,\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Venus\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp31snh8rc.scala:24:12 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            Earth,\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Earth\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp31snh8rc.scala:25:12 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            Mars,\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Mars\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp31snh8rc.scala:26:12 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Jupiter,\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Jupiter\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp31snh8rc.scala:27:12 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            Saturn,\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Saturn\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp31snh8rc.scala:28:12 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            Uranus,\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Uranus\n\e[31m   |\e[0m\n"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\"\
    , new Orbit(\n                new Planet(\"Venus\", new Orbit(\n             \
    \       new Planet(\"Earth\", new Orbit(\n                        new Planet(\"\
    Mars\", new Orbit(\n                            new Planet(\"Jupiter\", new Orbit(\n\
    \                                new Planet(\"Saturn\", new Orbit(\n         \
    \                           new Planet(\"Uranus\", new Orbit(\n              \
    \                          new Planet(\"Neptune\", new Orbit(\n              \
    \                              new Planet(\"Mercury\", new Orbit(\n          \
    \                                      new Planet(\"Venus\", new Orbit(\n    \
    \                                                new Planet(\"Earth\", new Orbit(\n\
    \                                                        new Planet(\"Mars\",\
    \ new Orbit(\n                                                            new\
    \ Planet(\"Jupiter\", new Orbit(\n                                           \
    \                     new Planet(\"Saturn\", new Orbit(\n                    \
    \                                                new Planet(\"Uranus\", new Orbit(\n\
    \                                                                        new Planet(\"\
    Neptune\", new Orbit(\n                                                      \
    \                      new Planet(\"Mercury\", new Orbit(\n                  \
    \                                                              new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                     new Planet(\"Earth\", new Orbit(\n                     \
    \                                                                   new Planet(\"\
    Mars\", new Orbit(\n                                                         \
    \                                   new Planet(\"Jupiter\", new Orbit(\n     \
    \                                                                            \
    \               new Planet(\"Saturn\", new Orbit(\n                          \
    \                                                                          new\
    \ Planet(\"Uranus\", new Orbit(\n                                            \
    \                                                            new Planet(\"Neptune\"\
    , new Orbit(\n                                                               \
    \                                             new Planet(\"Mercury\", new Orbit(\n\
    \                                                                            \
    \                                    new Planet(\"Venus\", new Orbit(\n      \
    \                                                                            \
    \                                  new Planet(\"Earth\", new Orbit(\n        \
    \                                                                            \
    \                                    new Planet(\"Mars\", new Orbit(\n       \
    \                                                                            \
    \                                         new Planet(\"Jupiter\", new Orbit(\n\
    \                                                                            \
    \                                                    new Planet(\"Saturn\", new\
    \ Orbit(\n                                                                   \
    \                                                                 new Planet(\"\
    Uranus\", new Orbit(\n                                                       \
    \                                                                            \
    \     new Planet(\"Neptune\", new Orbit(\n                                   \
    \                                                                            \
    \                             new Planet(\"Mercury\", new Orbit(\n           \
    \                                                                            \
    \                                                         new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \         new Planet(\"Earth\", new Orbit(\n                                 \
    \                                                                            \
    \                                           new Planet(\"Mars\", new Orbit(\n\
    \                                                                            \
    \                                                                            \
    \    \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa9m9vyup.scala:57:181 --------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m                                                    \
    \                                                                            \
    \                        \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m,\
    \ \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\nexception occurred while parser /tmp/tmpa9m9vyup.scala\n\
    exception occurred while compiling /tmp/tmpa9m9vyup.scala\nException in thread\
    \ \"main\" java.lang.AssertionError: assertion failed: position error, parent\
    \ span does not contain child span\nparent      = \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m) # -1,\nparent span = <5097..5107>,\nchild       = \e[31mnull\e\
    [0m # -1,\nchild span  = [5107..5269..5269]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m,\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\nerror while checking \e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e\
    [32m\"Venus\"\e[0m, \n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\n\
    )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n\
    \      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n        \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n\
    \      )\n    )\n  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e\
    [0m, \n        \e[33mnew \e[0m\e[35mOrbit\e[0m(\n          \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, "
  timestamp: 1659798186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo5j13vx8.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpo"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , 0.3048, 0.6274, 1.8519, 5.9722),\n            Planet(\"Venus\", 0.6274, 1.8519,\
    \ 5.9722),\n            Planet(\"Earth\", 0.3048, 0.6274, 1.8519, 5.9722),\n \
    \           Planet(\"Mars\", 0.3048, 0.6274, 1.8519, 5.9722),\n            Planet(\"\
    Jupiter\", 0.9072, 1.8761, 1.8458, 7.1492),\n            Planet(\"Saturn\", 0.9072,\
    \ 1.8761, 1.8458, 7.1492),\n            Planet(\"Uranus\", 0.9072, 1.8761, 1.8458,\
    \ 7.1492),\n            Planet(\"Neptune\", 0.9072, 1.8761, 1.8458, 7.1492)\n\
    \        )\n        val sun = Planet(\"Sun\", 0, 0, 0, 0, 0)\n        val planet1Orbit\
    \ = planets.find(_.name == planet1).getOrElse(sun)\n        val planet2Orbit =\
    \ planets.find(_.name == planet2).getOrElse(sun)\n        val planet1OrbitOrbit\
    \ = planet1Orbit.orbit(planet2Orbit)\n        val planet2OrbitOrbit = planet2Orbit.orbit(planet1Orbit)\n\
    \        val planet1OrbitOrbitOrbit = planet1OrbitOrbit.orbit(planet2OrbitOrbit)\n\
    \        val planet2OrbitOrbitOrbit = planet2OrbitOrbit.orbit(planet1OrbitOrbit)\n\
    \        val planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit.orbit(planet2OrbitOrbitOrbit)\n\
    \        val planet2OrbitOrbitOrbitOrbit = planet2OrbitOrbitOrbit.orbit(planet1OrbitOrbitOrbit)\n\
    \        val planet1OrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbitOrbit.orbit(planet2OrbitOrbitOrbit)\n\
    \        val planet2OrbitOrbitOrbitOrbitOrbit = planet2OrbitOrbitOrbitOrbit.orbit(planet1OrbitOrbitOrbitOrbit)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw2ofg83g.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0.3048\e\
    [0m, \e[31m0.6274\e[0m, \e[31m1.8519\e[0m, \e[31m5.9722\e[0m),\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw2ofg83g.scala:23:12\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, \e[31m0.6274\e[0m, \e[31m1.8519\e[0m, \e[31m5.9722\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw2ofg83g.scala:24:12\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, \e[31m0.3048\e[0m, \e[31m0.6274\e[0m, \e[31m1.8519\e[0m, \e[31m5.9722\e\
    [0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw2ofg83g.scala:25:12\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, \e[31m0.3048\e[0m, \e[31m0.6274\e[0m, \e[31m1.8519\e[0m, \e[31m5.9722\e\
    [0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw2ofg83g.scala:26:12\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m, \e[31m0.9072\e[0m, \e[31m1.8761\e[0m, \e[31m1.8458\e[0m, \e[31m7.1492\e\
    [0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw2ofg83g.scala:27:12\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m"
  stdout: ''
  timestamp: 1659798193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n \
    \       val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(jupiter, saturn, uranu\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprjbe1tr9.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(\n                Vector(\n                    Vector(\n             \
    \           Vector(\n                            Vector(\n                   \
    \             Vector(\n                                    Vector(\n         \
    \                               Vector(\n                                    \
    \        Vector(\n                                                Vector(\n  \
    \                                                  Vector(\n                 \
    \                                       Vector(\n                            \
    \                                Vector(\n                                   \
    \                             Vector(\n                                      \
    \                              Vector(\n                                     \
    \                                   Vector(\n                                \
    \                                            Vector(\n                       \
    \                                                         Vector(\n          \
    \                                                                          Vector(\n\
    \                                                                            \
    \            Vector(\n                                                       \
    \                                     Vector(\n                              \
    \                                                                  Vector(\n \
    \                                                                            \
    \                       Vector(\n                                            \
    \                                                            Vector(\n       \
    \                                                                            \
    \                         Vector(\n                                          \
    \                                                                      Vector(\n\
    \                                                                            \
    \                                        Vector(\n                           \
    \                                                                            \
    \                 Vector(\n                                                  \
    \                                                                          Vector(\n\
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                         Vector(\n                          \
    \                                                                            \
    \                                  Vector(\n                                 \
    \                                                                            \
    \                               Vector(\n                                    \
    \                                                                            \
    \                                Vector(\n                                   \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                              Vector(\n                     \
    \                                                                            \
    \                                                           Vector(\n        \
    \                                                                            \
    \                                                                            Vector(\n\
    \                                                                            \
    \                                                                            \
    \            Vector(\n                                                       \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                  Vector(\n \
    \                                                                            \
    \                                                                            \
    \                       Vector(\n                                            \
    \                                                                            \
    \                                                            Vector(\n       \
    \                                                                            \
    \                                                                            \
    \                         Vector(\n                                          \
    \                                                                            \
    \                                                                      Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                        Vector(\n                           \
    \                                                                            \
    \                                                                            \
    \                 Vector(\n                                                  \
    \                                                                            \
    \                                                                          Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                         Vector(\n                          \
    \                                                                            \
    \                                                                            \
    \                                  Vector(\n                                 \
    \                                                                            \
    \                                                                            \
    \                               Vector(\n                                    \
    \                                                                            \
    \                                                                            \
    \                                Vector(\n                                   \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                                              Vector(\n                     \
    \                                                                            \
    \                                                                            \
    \                                                           Vector(\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            Vector(\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                                                                  Vector(\n \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                       Vector(\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                                        Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                            Vector(\n                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                         Vector(\n                                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \          Vector(\n                                                         \
    \                                                                            \
    \                                                                            \
    \                                                                           Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                            Vector(\n       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         Vector(\n          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                          Vector(\n         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                               Vector(\n    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                        Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    Vector(\n                                                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     Vector(\n                                              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                          Vector(\n                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \   Vector(\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                            Vector(\n                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \             Vector(\n                                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                              Vector(\n     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                       Vector(\n                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    Vector(\n                                               \
    \                                                                            \
    \                                                                     \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpouqfizgi.scala:101:359 -------------------------\e\
    [0m\e[0m\n\e[31m101 |\e[0m                                                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                         Vector(\n\
    \e[31m\e[31m    |\e[0m                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            ^\e\
    [0m\n\e[31m    |\e[0m                                     expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpouqfizgi.scala:22:12 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpouqfizgi.scala:22:30 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                             Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpouqfizgi.scala:103:5 --------------------\e\
    [0m\e[0m\n\e[31m103 |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m   \
    \ |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required: List[String]\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo5j13vx8.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpo"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth, mars, jupiter, saturn, uranus)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val sun\
    \ = Vector(0.0, 0.0, 1.0)\n        val planet1Orbit = Vector(0.0, 0.0, 0.0)\n\
    \        val planet2Orbit = Vector(0.0, 0.0, 0.0)\n        val orbits = mutable.ListBuffer[Vector[Vector[Double]]]()\n\
    \        for (planet <- planets) {\n            val planetOrbit = Vector(0.0,\
    \ 0.0, 0.0)\n            val planetOrbitAngle = Vector(0.0, 0.0, 0.0)\n      \
    \      val planetOrbitAngle = Vector(0.0, 0.0, 0.0)\n            val planetOrbitAngle\
    \ = Vector(0.0, 0.0, 0.0)\n            val planetOrbitAngle = Vector(0.0, 0.0,\
    \ 0.0)\n            val planetOrbitAngle = Vector(0.0, 0.0, 0.0)\n           \
    \ val planetOrbitAngle = Vector(0.0, 0.0, 0.0)\n            val planetOrbitAngle\
    \ = Vector(0.0, 0.0, 0.0)\n            val planetOrbitAngle = Vector(0.0, 0.0,\
    \ 0.0)\n            val planetOrbitAngle = Vector(0.0, 0.0, 0.0)\n           \
    \ val planetOrbitAngle = Vector(0.0, 0.0, 0.0)\n            val planetOrbitAngle\
    \ = Vector(0.0, 0.0, 0.0)\n            val planetOrbitAngle = Vector(0.0, 0.0,\
    \ 0.0)\n            val planetOrbitAngle = Vector(0.0, 0.0, 0.0)\n           \
    \ val planetOrbitAngle = Vector(0.0, 0.0, 0.0)\n            val planetOrbitAngle\
    \ = Vector(0.0, 0.0, 0.0)\n            val planetOrbitAngle = Vector(0.0, 0.0,\
    \ 0.0)\n            val planetOrbitAngle = Vector(0.0, 0.0, 0.0)\n           \
    \ val planetOrbitAngle = Vector(0.0, 0.0, 0.0)\n            val planetOrbitAngle\
    \ = Vector(0.0, 0.0, 0.0)\n            val planetOrbitAngle = Vector(0.0, 0.0,\
    \ 0.0)\n            val planetOrbitAngle = Vector(0.0, 0.0, 0.0)\n           \
    \ val planetOrbitAngle = Vector(0.0, 0.0, 0.0)\n            val planetOrbitAngle\
    \ = Vector(0.0, 0.0, 0.0)\n            val planetOrbitAngle = Vector(0.0, 0.0,\
    \ 0.0)\n            val planetOrbitAngle = Vector(0.0, 0.0, 0.0)\n           \
    \ val planetOrbitAngle = Vector(0.0, 0.0, 0.0)\n            val planetOrbitAngle\
    \ = Vector(0.0, 0.0, 0.0)\n            val planetOrbitAngle = Vector(0.0, 0.0,\
    \ 0.0)\n            val planetOrbitAngle = Vector(0.0, 0.0, 0.0)\n           \
    \ val planetOrbitAngle = Vector(0.0, 0.0, 0.0)\n            val planetOrbitAngle\
    \ = Vector(0.0, 0.0, 0.0)\n            val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpkdliz9lh.scala:59:15 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkdliz9lh.scala:72:0 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkdliz9lh.scala:25:21\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36morbits\e[0m = mutable.ListBuffer[\e[35mVector\e[0m[\e[35mVector\e[0m[\e[35mDouble\e\
    [0m]]]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmpkdliz9lh.scala:29:16 ---------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mplanetOrbitAngle\e[0m = Vector(\e\
    [31m0.0\e[0m, \e[31m0.0\e[0m, \e[31m0.0\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mplanetOrbitAngle\
    \ is already defined as \e[33mvalue\e[0m \e[35mplanetOrbitAngle\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpkdliz9lh.scala:30:16 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m            \e[33mval\e[0m \e[36mplanetOrbitAngle\e[0m = Vector(\e[31m0.0\e\
    [0m, \e[31m0.0\e[0m, \e[31m0.0\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetOrbitAngle is already defined as \e[33mvalue\e[0m \e\
    [35mplanetOrbitAngle\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkdliz9lh.scala:31:16 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m "
  stdout: ''
  timestamp: 1659798193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val sun\
    \ = Planet(\"Sun\")\n        val planet1 = planets.find(p => p.equals(planet1))\n\
    \        val planet2 = planets.find(p => p.equals(planet2))\n        val orbit1\
    \ = planet1.orbit(sun)\n        val orbit2 = planet2.orbit(sun)\n        val orbits\
    \ = orbit1 #:: orbit2\n        val sunOrbit = orbits.find(o => o.equals(sun))\n\
    \        val sunOrbits = sunOrbit.map(o => o.name)\n        val planetOrbits =\
    \ orbits.filter(o => o.name == planet1 || o.name == planet2)\n        val planetOrbit\
    \ = planetOrbits.find(o => o.equals(sun))\n        val planetOrbits = planetOrbit.map(o\
    \ => o.name)\n        val planetOrbit = planetOrbits.find(o => o.equals(planet1))\n\
    \        val planetOrbits = planetOrbit.map(o => o.name)\n        val planetOrbit\
    \ = planetOrbits.find(o => o.equals(planet2))\n        val planetOrbits = planetOrbit.map(o\
    \ => o.name)\n        val planetOrbit = planetOrbits.find(o => o.equals(sun))\n\
    \        val planetOrbits = planetOrbit.map(o => o.name)\n        val planetOrbit\
    \ = planetOrbits.find(o => o.equals(planet1))\n        val planetOrbits = planetOrbit.map(o\
    \ => o.name)\n        val planetOrbit = planetOrbits.find(o => o.equals(planet2))\n\
    \        val planetOrbits = planetOrbit.map(o => o.name)\n        val planetOrbit\
    \ = planetOrbits.find(o => o.equals(sun))\n        val planetOrbits = planetOrbit.map(o\
    \ => o.name)\n        val planetOrbit = planetOrbits.find(o => o.equals(planet1))\n\
    \        val planetOrbits = planetOrbit.map(o => o.name)\n        val planetOrbit\
    \ = planetOrbits.find(o => o.equals(planet2))\n        val planetOrbits = planetOrbit.map(o\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"),\
    \ (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5pz1nycu.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5pz1nycu.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetOrbits\e[0m = planetOrbit.map(\e[36mo\e[0m => o.name)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mplanetOrbits is already defined as \e[33mvalue\e[0m \e[35mplanetOrbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5pz1nycu.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mplanetOrbit\e[0m = planetOrbits.find(\e\
    [36mo\e[0m => o.equals(planet1))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetOrbit is already defined as \e[33mvalue\e[0m \e[35mplanetOrbit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5pz1nycu.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mplanetOrbits\e[0m = planetOrbit.map(\e\
    [36mo\e[0m => o.name)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetOrbits is already defined as \e[33mvalue\e[0m \e[35mplanetOrbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5pz1nycu.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mplanetOrbit\e[0m = planetOrbits.find(\e\
    [36mo\e[0m => o.equals(planet2))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetOrbit is already defined as \e[33mvalue\e[0m \e[35mplanetOrbit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659798193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo5j13vx8.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpo"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\"\
    , new Orbit(\n                new Orbit(\n                    new Orbit(\n   \
    \                     new Orbit(\n                            new Orbit(\n   \
    \                             new Orbit(\n                                   \
    \ new Orbit(\n                                        new Orbit(\n           \
    \                                 new Orbit(\n                               \
    \                 new Orbit(\n                                               \
    \     new Orbit(\n                                                        new\
    \ Orbit(\n                                                            new Orbit(\n\
    \                                                                new Orbit(\n\
    \                                                                    new Orbit(\n\
    \                                                                        new Orbit(\n\
    \                                                                            new\
    \ Orbit(\n                                                                   \
    \             new Orbit(\n                                                   \
    \                                 new Orbit(\n                               \
    \                                                         new Orbit(\n       \
    \                                                                            \
    \         new Orbit(\n                                                       \
    \                                         new Orbit(\n                       \
    \                                                                            \
    \ new Orbit(\n                                                               \
    \                                         new Orbit(\n                       \
    \                                                                            \
    \         new Orbit(\n                                                       \
    \                                                         new Orbit(\n       \
    \                                                                            \
    \                                 new Orbit(\n                               \
    \                                                                            \
    \             new Orbit(\n                                                   \
    \                                                                         new\
    \ Orbit(\n                                                                   \
    \                                                             new Orbit(\n   \
    \                                                                            \
    \                                                     new Orbit(\n           \
    \                                                                            \
    \                                                 new Orbit(\n               \
    \                                                                            \
    \                                                 new Orbit(\n               \
    \                                                                            \
    \                                                     new Orbit(\n           \
    \                                                                            \
    \                                                             new Orbit(\n   \
    \                                                                            \
    \                                                                         new\
    \ Orbit(\n                                                                   \
    \                                                                            \
    \             new Orbit(\n                                                   \
    \                                                                            \
    \                                 new Orbit(\n                               \
    \                                                                            \
    \                                                         new Orbit(\n       \
    \                                                                            \
    \                                                                            \
    \         new Orbit(\n                                                       \
    \                                                                            \
    \                                         new Orbit(\n                       \
    \                                                                            \
    \                                                                            \
    \ new Orbit(\n                                                               \
    \                                                                            \
    \                                         new Orbit(\n                       \
    \                                                                            \
    \                                                                            \
    \         new Orbit(\n                                                       \
    \                                                                            \
    \                                                         new Orbit(\n       \
    \                                                                            \
    \                                                                            \
    \                                 new Orbit(\n                               \
    \                                                                            \
    \                                                                            \
    \             new Orbit(\n                                                   \
    \                                                                            \
    \                                                                         new\
    \ Orbit(\n                                                                   \
    \                                                                            \
    \                                                             new Orbit(\n   \
    \                                                                            \
    \                                                                            \
    \                                                     new Orbit(\n           \
    \                                                                            \
    \                                                                            \
    \                                                 new Orbit(\n               \
    \                                                                            \
    \                                                                            \
    \                                                 new Orbit(\n               \
    \                                                                            \
    \                                                                            \
    \                                                     new Orbit(\n           \
    \                                                                            \
    \                                                                            \
    \                                                             new Orbit(\n   \
    \                                                                            \
    \                                                                            \
    \                                                                         new\
    \ Orbit(\n                                                                   \
    \                                                                            \
    \                                                                            \
    \             new Orbit(\n                                                   \
    \                                                                            \
    \                                                                            \
    \                                 new Orbit(\n                               \
    \                                                                            \
    \                                                                            \
    \                                                         new Orbit(\n       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \         new Orbit(\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                         new Orbit(\n                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \ new Orbit(\n                                                               \
    \                                                                            \
    \                                                                            \
    \                                         new Orbit(\n                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \         new Orbit(\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                         new Orbit(\n       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                 new Orbit(\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4w95y4bz.scala:86:278 --------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                \e[33mnew\e[0m\
    \ \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \ expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\nexception occurred\
    \ while parser /tmp/tmp4w95y4bz.scala\nexception occurred while compiling /tmp/tmp4w95y4bz.scala\n\
    Exception in thread \"main\" java.lang.AssertionError: assertion failed: position\
    \ error, parent span does not contain child span\nparent      = \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[31mnull\e[0m) # -1,\nparent span = <10837..10847>,\nchild  \
    \     = \e[31mnull\e[0m # -1,\nchild span  = [10847..10853..10853]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat s"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\n\
    error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e\
    [0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))))\n\
    \  )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))))\n\
    \  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n      \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\n    \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n     \
    \   \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))))\n      )\n    )\n  )\n\
    )\nerror while checking \e[3"
  timestamp: 1659798186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsb4u0xm.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(\n                Vector(\n                    Vector(\n             \
    \           Vector(0, 0, 1),\n                        Vector(0, 0, -1),\n    \
    \                    Vector(1, 0, 0),\n                        Vector(-1, 0, 0)\n\
    \                    ),\n                    Vector(\n                       \
    \ Vector(0, 0, -1),\n                        Vector(0, 0, 1),\n              \
    \          Vector(1, 0, 0),\n                        Vector(-1, 0, 0)\n      \
    \              ),\n                    Vector(\n                        Vector(0,\
    \ 0, 1),\n                        Vector(0, 0, -1),\n                        Vector(1,\
    \ 0, 0),\n                        Vector(-1, 0, 0)\n                    ),\n \
    \                   Vector(\n                        Vector(0, 0, -1),\n     \
    \                   Vector(0, 0, 1),\n                        Vector(1, 0, 0),\n\
    \                        Vector(-1, 0, 0)\n                    )\n           \
    \     )\n            )),\n            Planet(\"Venus\", Orbit(\n             \
    \   Vector(\n                    Vector(\n                        Vector(0, 0,\
    \ 1),\n                        Vector(0, 0, -1),\n                        Vector(1,\
    \ 0, 0),\n                        Vector(-1, 0, 0)\n                    ),\n \
    \                   Vector(\n                        Vector(0, 0, -1),\n     \
    \                   Vector(0, 0, 1),\n                        Vector(1, 0, 0),\n\
    \                        Vector(-1, 0, 0)\n                    ),\n          \
    \          Vector(\n                        Vector(0, 0, 1),\n               \
    \         Vector(0, 0, -1),\n                        Vector(1, 0, 0),\n      \
    \                  Vector(-1, 0, 0)\n                    ),\n                \
    \    Vector(\n                        Vector(0, 0, -1),\n                    \
    \    Vector(0, 0, 1),\n                        Vector(1, 0, 0),\n            \
    \            Vector(-1, 0, 0)\n                    )\n                )\n    \
    \        )),\n            Planet(\"Earth\", Orbit(\n                Vector(\n\
    \                    Vector(\n                        Vector(0, 0, 1),\n     \
    \                   Vector(0, 0, -1),\n                        Vector(1, 0, 0),\n\
    \                        Vector(-1, 0, 0)\n                    ),\n          \
    \          Vector(\n                        Vector(0, 0, -1),\n              \
    \          Vector(0, 0, 1),\n                        Vector(1, 0, 0),\n      \
    \                  Vector(-1, 0, 0)\n                    ),\n                \
    \    Vector(\n                        Vector(0, 0, 1),\n                     \
    \   Vector(0, 0, -1),\n                        Vector(1, 0, 0),\n            \
    \            Vector(-1, 0, 0)\n                    ),\n                    Vector(\n\
    \                        Vector(0, 0, -1),\n                        Vector(0,\
    \ 0, 1),\n                        Vector(1, 0, 0),\n                        Vector(-1,\
    \ 0, 0)\n                    )\n                )\n            )),\n         \
    \   Planet(\"Mars\", Orbit(\n                Vector(\n                    Vector(\n\
    \                        Vector(0, 0, 1),\n                        Vector(0, 0,\
    \ -1),\n                        Vector(1, 0, 0),\n                        Vector(-1,\
    \ 0, 0)\n                    ),\n                    Vector(\n               \
    \         Vector(0, 0, -1),\n                        Vector(0, 0, 1),\n      \
    \                  Vector(1, 0, 0),\n                        Vector(-1, 0, 0)\n\
    \                    ),\n                    Vector(\n                       \
    \ Vector(0, 0, 1),\n                        Vector(0, 0, -1),\n              \
    \          Vector(1, 0, 0),\n                        Vector(-1, 0, 0)\n      \
    \              ),\n                    Vector(\n                        Vector(0,\
    \ 0, -1),\n                        Vector(0, 0, 1),\n                        Vector(1,\
    \ 0, 0),\n                        Vector(-1, 0, 0)\n                    )\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppzagb02h.scala:133:4 ---------------------------\e\
    [0m\e[0m\n\e[31m133 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppzagb02h.scala:22:12\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmppzagb02h.scala:22:30 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmppzagb02h.scala:50:12 ------------------------\e[0m\e\
    [0m\n\e[31m50 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppzagb02h.scala:50:28\
    \ ------------------------\e[0m\e[0m\n\e[31m50 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppzagb02h.scala:78:12 ------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppzagb02h.scala:78:28\
    \ ------------------------\e[0m\e[0m\n\e[31m78 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0"
  stdout: ''
  timestamp: 1659798199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth, mars, jupiter, saturn, uranus)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\"\
    , new Orbit(\n                new Planet(\"Venus\", new Orbit(\n             \
    \       new Planet(\"Earth\", new Orbit(\n                        new Planet(\"\
    Mars\", new Orbit(\n                            new Planet(\"Jupiter\", new Orbit(\n\
    \                                new Planet(\"Saturn\", new Orbit(\n         \
    \                           new Planet(\"Uranus\", new Orbit(\n              \
    \                          new Planet(\"Neptune\", new Orbit(\n              \
    \                              new Planet(\"Mercury\", new Orbit(\n          \
    \                                      new Planet(\"Venus\", new Orbit(\n    \
    \                                                new Planet(\"Earth\", new Orbit(\n\
    \                                                        new Planet(\"Mars\",\
    \ new Orbit(\n                                                            new\
    \ Planet(\"Jupiter\", new Orbit(\n                                           \
    \                     new Planet(\"Saturn\", new Orbit(\n                    \
    \                                                new Planet(\"Uranus\", new Orbit(\n\
    \                                                                        new Planet(\"\
    Neptune\", new Orbit(\n                                                      \
    \                      new Planet(\"Mercury\", new Orbit(\n                  \
    \                                                              new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                     new Planet(\"Earth\", new Orbit(\n                     \
    \                                                                   new Planet(\"\
    Mars\", new Orbit(\n                                                         \
    \                                   new Planet(\"Jupiter\", new Orbit(\n     \
    \                                                                            \
    \               new Planet(\"Saturn\", new Orbit(\n                          \
    \                                                                          new\
    \ Planet(\"Uranus\", new Orbit(\n                                            \
    \                                                            new Planet(\"Neptune\"\
    , new Orbit(\n                                                               \
    \                                             new Planet(\"Mercury\", new Orbit(\n\
    \                                                                            \
    \                                    new Planet(\"Venus\", new Orbit(\n      \
    \                                                                            \
    \                                  new Planet(\"Earth\", new Orbit(\n        \
    \                                                                            \
    \                                    new Planet(\"Mars\", new Orbit(\n       \
    \                                                                            \
    \                                         new Planet(\"Jupiter\", new Orbit(\n\
    \                                                                            \
    \                                                    new Planet(\"Saturn\", new\
    \ Orbit(\n                                                                   \
    \                                                                 new Planet(\"\
    Uranus\", new Orbit(\n                                                       \
    \                                                                            \
    \     new Planet(\"Neptune\", new Orbit(\n                                   \
    \                                                                            \
    \                             new Planet(\"Mercury\", new Orbit(\n           \
    \                                                                            \
    \                                                         new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \         new Planet(\"Earth\", new Orbit(\n                                 \
    \                                                                            \
    \                                           new Planet(\"Mars\", new Orbit(\n\
    \                                                                            \
    \                                                                            \
    \    \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa9m9vyup.scala:57:181 --------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m                                                    \
    \                                                                            \
    \                        \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m,\
    \ \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\nexception occurred while parser /tmp/tmpa9m9vyup.scala\n\
    exception occurred while compiling /tmp/tmpa9m9vyup.scala\nException in thread\
    \ \"main\" java.lang.AssertionError: assertion failed: position error, parent\
    \ span does not contain child span\nparent      = \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m) # -1,\nparent span = <5097..5107>,\nchild       = \e[31mnull\e\
    [0m # -1,\nchild span  = [5107..5269..5269]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m,\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\nerror while checking \e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e\
    [32m\"Venus\"\e[0m, \n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\n\
    )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n\
    \      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n        \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n\
    \      )\n    )\n  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e\
    [0m, \n        \e[33mnew \e[0m\e[35mOrbit\e[0m(\n          \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, "
  timestamp: 1659798186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(\n                Vector(0,0,0),\n                Vector(0,0,0),\n   \
    \             Vector(0,0,0),\n                Vector(0,0,0),\n               \
    \ Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk1prequx.scala:106:4 ---------------------------\e\
    [0m\e[0m\n\e[31m106 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk1prequx.scala:22:12\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpk1prequx.scala:22:30 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpk1prequx.scala:106:5 --------------------\e[0m\e\
    [0m\n\e[31m106 |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m    |\e[0m\
    \     Found:    Unit\n\e[31m    |\e[0m     Required: List[String]\n\e[31m    |\e\
    [0m\n\e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsb4u0xm.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fpo4j_j.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fpo4j_j.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(\n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0),\
    \ \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n \
    \               Vector(0.0, -1.0), \n                Vector(0.0, 1.0), \n    \
    \            Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n        \
    \        Vector(0.0, -1.0), \n                Vector(0.0, 1.0), \n           \
    \     Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n               \
    \ Vector(0.0, -1.0), \n                Vector(0.0, 1.0), \n                Vector(1.0,\
    \ 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, -1.0),\
    \ \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n \
    \               Vector(1.0, 1.0), \n                Vector(0.0, -1.0), \n    \
    \            Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n        \
    \        Vector(1.0, 1.0), \n                Vector(0.0, -1.0), \n           \
    \     Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n               \
    \ Vector(1.0, 1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0,\
    \ 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0),\
    \ \n                Vector(0.0, -1.0), \n                Vector(0.0, 1.0), \n\
    \                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n    \
    \            Vector(0.0, -1.0), \n                Vector(0.0, 1.0), \n       \
    \         Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n           \
    \     Vector(0.0, -1.0), \n                Vector(0.0, 1.0), \n              \
    \  Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0,\
    \ -1.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0),\
    \ \n                Vector(1.0, 1.0), \n                Vector(0.0, -1.0), \n\
    \                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n    \
    \            Vector(1.0, 1.0), \n                Vector(0.0, -1.0), \n       \
    \         Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n           \
    \     Vector(1.0, 1.0), \n                Vector(0.0, -1.0), \n              \
    \  Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0,\
    \ 1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, 1.0),\
    \ \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n \
    \               Vector(0.0, -1.0), \n                Vector(0.0, 1.0), \n    \
    \            Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n        \
    \        Vector(0.0, -1.0), \n                Vector(0.0, 1.0), \n           \
    \     Vector(1.0, \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp77d0q227.scala:94:4 ----------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp77d0q227.scala:22:12\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp77d0q227.scala:22:30 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp77d0q227.scala:94:5 ---------------------\e[0m\e\
    [0m\n\e[31m94 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planet1Orbit\
    \ = planets.indexOf(planet1)\n        val planet2Orbit = planets.indexOf(planet2)\n\
    \        val orbits = planets.filter(_ != \"Mercury\" && _ != \"Venus\" && _ !=\
    \ \"Earth\" && _ != \"Mars\" && _ != \"Jupiter\" && _ != \"Saturn\" && _ != \"\
    Uranus\" && _ != \"Neptune\")\n        val orbit1Orbit = orbits.indexOf(planet1)\n\
    \        val orbit2Orbit = orbits.indexOf(planet2)\n        val orbit1Sun = planets.indexOf(\"\
    Mercury\")\n        val orbit2Sun = planets.indexOf(\"Venus\")\n        val orbit1SunOrbit\
    \ = orbits.indexOf(planet1)\n        val orbit2SunOrbit = orbits.indexOf(planet2)\n\
    \        val sunOrbits = orbits.filter(_ != \"Mercury\" && _ != \"Venus\" && _\
    \ != \"Earth\" && _ != \"Mars\" && _ != \"Jupiter\" && _ != \"Saturn\" && _ !=\
    \ \"Uranus\" && _ != \"Neptune\")\n        val sunOrbit1Orbit = sunOrbits.indexOf(planet1)\n\
    \        val sunOrbit2Orbit = sunOrbits.indexOf(planet2)\n        val sunOrbit1Sun\
    \ = sunOrbits.indexOf(\"Mercury\")\n        val sunOrbit2Sun = sunOrbits.indexOf(\"\
    Venus\")\n        val sunOrbit1SunOrbit = sunOrbits.indexOf(planet1)\n       \
    \ val sunOrbit2SunOrbit = sunOrbits.indexOf(planet2)\n        val sunOrbits =\
    \ sunOrbits.filter(_ != \"Mercury\" && _ != \"Venus\" && _ != \"Earth\" && _ !=\
    \ \"Mars\" && _ != \"Jupiter\" && _ != \"Saturn\" && _ != \"Uranus\" && _ != \"\
    Neptune\")\n        val sunOrbit1Orbit = sunOrbits.indexOf(planet1)\n        val\
    \ sunOrbit2Orbit = sunOrbits.indexOf(planet2)\n        val sunOrbit1Sun = sunOrbits.indexOf(\"\
    Mercury\")\n        val sunOrbit2Sun = sunOrbits.indexOf(\"Venus\")\n        val\
    \ sunOrbit1SunOrbit = sunOrbit\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_as84zz0.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36msunOrbits\e[0m = sunOrbits.filter(_\
    \ != \e[31m\"Mercury\"\e[0m && _ != \e[31m\"Venus\"\e[0m && _ != \e[31m\"Earth\"\
    \e[0m && _ != \e[31m\"Mars\"\e[0m && _ != \e[31m\"Jupiter\"\e[0m && _ != \e[31m\"\
    Saturn\"\e[0m && _ != \e[31m\"Uranus\"\e[0m && _ != \e[31m\"Neptune\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbits is already defined as \e[33mvalue\e[0m \e[35msunOrbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_as84zz0.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36msunOrbit1Orbit\e[0m = sunOrbits.indexOf(planet1)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbit1Orbit is already defined as \e[33mvalue\e[0m \e[35msunOrbit1Orbit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_as84zz0.scala:40:12 ---------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m        \e[33mval\e[0m \e[36msunOrbit2Orbit\e[0m = sunOrbits.indexOf(planet2)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbit2Orbit is already defined as \e[33mvalue\e[0m \e[35msunOrbit2Orbit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_as84zz0.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36msunOrbit1Sun\e[0m = sunOrbits.indexOf(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbit1Sun is already defined as \e[33mvalue\e[0m \e"
  stdout: ''
  timestamp: 1659798202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndMars\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiterAndSaturn\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturnAndUranus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndNeptuneAndMercury\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpt23i_xwv.scala:45:48 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndMercuryAndMars\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpt23i_xwv.scala:22:18 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt23i_xwv.scala:23:22\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mmercury\e[0m = Planet(\e[31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt23i_xwv.scala:24:20\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mvenus\e[0m = Planet(\e[31m\"Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt23i_xwv.scala:25:20\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mearth\e[0m = Planet(\e[31m\"Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt23i_xwv.scala:26:19\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mmars\e[0m = Planet(\e[31m"
  stdout: ''
  timestamp: 1659798202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(\n                Vector(0,0,0),\n                Vector(0,0,0),\n   \
    \             Vector(0,0,0),\n                Vector(0,0,0),\n               \
    \ Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk1prequx.scala:106:4 ---------------------------\e\
    [0m\e[0m\n\e[31m106 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk1prequx.scala:22:12\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpk1prequx.scala:22:30 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpk1prequx.scala:106:5 --------------------\e[0m\e\
    [0m\n\e[31m106 |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m    |\e[0m\
    \     Found:    Unit\n\e[31m    |\e[0m     Required: List[String]\n\e[31m    |\e\
    [0m\n\e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val sun\
    \ = Planet(\"Sun\")\n        val planet1 = planets.filter(planet => planet ==\
    \ planet1).head\n        val planet2 = planets.filter(planet => planet == planet2).head\n\
    \        val orbit1 = Planet(planet1).orbit(sun)\n        val orbit2 = Planet(planet2).orbit(sun)\n\
    \        val orbits = orbit1 ++ orbit2\n        val sunOrbit = orbits.filter(orbit\
    \ => orbit.name == \"Sun\").head\n        val proximity = sunOrbit.distanceTo(sun)\n\
    \        val proximityList = proximity.toList.sortBy(proximity => proximity)\n\
    \        proximityList.take(3).map(orbit => orbit.name).reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptdbg30dw.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmptdbg30dw.scala:23:57 ---------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mplanet1\e[0m = planets.filter(\e\
    [36mplanet\e[0m => planet == planet1).head\n\e[31m\e[31m   |\e[0m            \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                              Recursive \e[33mvalue\e[0m \e[35mplanet1\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptdbg30dw.scala:24:57\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanet2\e[0m = planets.filter(\e[36mplanet\e[0m => planet == planet2).head\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^\e[0m\n\e[31m   |\e[0m                                      Recursive \e[33mvalue\e\
    [0m \e[35mplanet2\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptdbg30dw.scala:25:21 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36morbit1\e[0m = Planet(planet1).orbit(sun)\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptdbg30dw.scala:26:21 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        \e[33mval\e[0m \e[36morbit2\e[0m = Planet(planet2).orbit(sun)\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-"
  stdout: ''
  timestamp: 1659798198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , 6378137.0, 0.01720209),\n            Planet(\"Venus\", 6378145.0, 0.01720195),\n\
    \            Planet(\"Earth\", 6378388.0, 0.01720195),\n            Planet(\"\
    Mars\", 6378206.0, 0.01720195),\n            Planet(\"Jupiter\", 6378140.0, 0.01720195),\n\
    \            Planet(\"Saturn\", 6378160.0, 0.01720195),\n            Planet(\"\
    Uranus\", 6378155.0, 0.01720195),\n            Planet(\"Neptune\", 6378140.0,\
    \ 0.01720195)\n        )\n        val planet1Orbit = planets.find(_.name == planet1).getOrElse(throw\
    \ new IllegalArgumentException(\"Planet \" + planet1 + \" does not exist\"))\n\
    \        val planet2Orbit = planets.find(_.name == planet2).getOrElse(throw new\
    \ IllegalArgumentException(\"Planet \" + planet2 + \" does not exist\"))\n   \
    \     val planet1OrbitOrbit = planet1Orbit.orbit(planet2Orbit)\n        val planet2OrbitOrbit\
    \ = planet2Orbit.orbit(planet1Orbit)\n        val planet1OrbitOrbitOrbit = planet1OrbitOrbit.orbit(planet2OrbitOrbit)\n\
    \        val planet2OrbitOrbitOrbit = planet2OrbitOrbit.orbit(planet1OrbitOrbit)\n\
    \        val planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit.orbit(planet2OrbitOrbitOrbit)\n\
    \        val planet2OrbitOrbitOrbitOrbit = planet2OrbitOrbitOrbit.orbit(planet1OrbitOrbitOrbit)\n\
    \        val planet1OrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbitOrbit.orbit(planet2OrbitOrbitOrbitOrbit)\n\
    \        val planet2OrbitOrbitOrbitOrbitOrbit = planet2OrbitOrbitOrbitOrbit.orbit(planet1OrbitOrbitOrbitOrbit)\n\
    \        val planet1OrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbit\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr45t0va_.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m6378137.0\e\
    [0m, \e[31m0.01720209\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr45t0va_.scala:23:12 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m6378145.0\e\
    [0m, \e[31m0.01720195\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr45t0va_.scala:24:12 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m6378388.0\e\
    [0m, \e[31m0.01720195\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr45t0va_.scala:25:12 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, \e[31m6378206.0\e\
    [0m, \e[31m0.01720195\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr45t0va_.scala:26:12 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m6378140.0\e\
    [0m, \e[31m0.01720195\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr45t0va_.scala:27:12 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m            Planet(\e[31m\"Saturn\"\e[0m, \e[31m6378160.0\e\
    [0m, \e[31m0.01720195\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e["
  stdout: ''
  timestamp: 1659798206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n     \
    \       Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\
    \ Vector(0,0,0)),\n            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Mars\", Orbit(Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Jupiter\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n     \
    \       Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\
    \ Vector(0,0,0)),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n        )\n        val sun =\
    \ Planet(\"Sun\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n\
    \        val orbit1 = planets.find(_.name == planet1).get.orbit\n        val orbit2\
    \ = planets.find(_.name == planet2).get.orbit\n        val orbit = orbit1.intersect(orbit2).sortBy(_.distanceTo(sun))\n\
    \        orbit.map(_.name)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"\
    Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp199zv9fz.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp199zv9fz.scala:22:30 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m                            \
    \  ^^^^^\e[0m\n\e[31m   |\e[0m                              Not found: Orbit\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp199zv9fz.scala:23:12\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m1\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e\
    [0m)), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp199zv9fz.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with"
  stdout: ''
  timestamp: 1659798204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fpo4j_j.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            (\"Mercury\"),\n\
    \            (\"Venus\"),\n            (\"Earth\"),\n            (\"Mars\"),\n\
    \            (\"Jupiter\"),\n            (\"Saturn\"),\n            (\"Uranus\"\
    ),\n            (\"Neptune\")\n        )\n        val planet1Orbit = planets.find(_.toLowerCase\
    \ == planet1.toLowerCase).getOrElse(\"\")\n        val planet2Orbit = planets.find(_.toLowerCase\
    \ == planet2.toLowerCase).getOrElse(\"\")\n        val orbits = planets.filter(_.toLowerCase\
    \ != planet1.toLowerCase).filter(_.toLowerCase != planet2.toLowerCase).map(_.toLowerCase).map(planets.find(_.toLowerCase\
    \ == planet1.toLowerCase).getOrElse(planet1Orbit)).map(planets.find(_.toLowerCase\
    \ == planet2.toLowerCase).getOrElse(planet2Orbit))\n        val sunOrbit = planets.find(_.toLowerCase\
    \ == \"sun\").getOrElse(\"\")\n        val sun = planets.find(_.toLowerCase ==\
    \ \"sun\").getOrElse(\"\")\n        val sunOrbits = orbits.filter(_.toLowerCase\
    \ == sunOrbit.toLowerCase).map(_.toLowerCase)\n        val sunOrbits = sunOrbits.filter(_.toLowerCase\
    \ != sunOrbit.toLowerCase).filter(_.toLowerCase != sunOrbit.toLowerCase).map(_.toLowerCase)\n\
    \        val sunOrbits = sunOrbits.filter(_.toLowerCase != sunOrbit.toLowerCase).filter(_.toLowerCase\
    \ != sunOrbit.toLowerCase).map(_.toLowerCase)\n        val sunOrbits = sunOrbits.filter(_.toLowerCase\
    \ != sunOrbit.toLowerCase).filter(_.toLowerCase != sunOrbit.toLowerCase).map(_.toLowerCase)\n\
    \        val sunOrbits = sunOrbits.filter(_.toLowerCase != sunOrbit.toLowerCase).filter(_.toLowerCase\
    \ != sunOrbit.toLowerCase).map(_.toLowerCase)\n        val sunOrbits = sunOrbits.filter(_.toLowerCase\
    \ != sunOrbit.toLowerCase).filter(_.toLowerCase != sunOrbit.toLowerCase).map(_.toLowerCase)\n\
    \        val sunOrbits = sunOrbits.filter(_.toLowerCase != sunOrbit.toLowerCase).filter(_.toLowerCase\
    \ != sunOrbit.toLowerCase).map(_.toLowerCase)\n        val sunOrbits = sunOrbits.filter(_.toLowerCase\
    \ != sunOrbit.toLowerCase).filter(_.toLowerCase != sunOrbit.toLowerCase).map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplc4sgpm_.scala:43:130 --------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36msunOrbits\e[0m = sunOrbits.filter(_.toLowerCase\
    \ != sunOrbit.toLowerCase).filter(_.toLowerCase != sunOrbit.toLowerCase).map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmplc4sgpm_.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36msunOrbits\e[0m = sunOrbits.filter(_.toLowerCase\
    \ != sunOrbit.toLowerCase).filter(_.toLowerCase != sunOrbit.toLowerCase).map(_.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbits is already defined as \e[33mvalue\e[0m \e[35msunOrbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplc4sgpm_.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36msunOrbits\e[0m = sunOrbits.filter(_.toLowerCase\
    \ != sunOrbit.toLowerCase).filter(_.toLowerCase != sunOrbit.toLowerCase).map(_.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbits is already defined as \e[33mvalue\e[0m \e[35msunOrbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplc4sgpm_.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36msunOrbits\e[0m = sunOrbits.filter(_"
  stdout: ''
  timestamp: 1659798206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => {\n            val planetOrbits = planets.map(planet2\
    \ => {\n                val distance = math.sqrt((planet1.toDouble() - planet2.toDouble())\
    \ * (planet1.toDouble() - planet2.toDouble()) + (planet1.toDouble() - planet2.toDouble())\
    \ * (planet1.toDouble() - planet2.toDouble()))\n                distance\n   \
    \         })\n            val planetOrbit = planetOrbits.min\n            (planet,\
    \ planetOrbit)\n        })\n        val sunOrbit = orbits.min._2\n        val\
    \ sunOrbits = orbits.filter(orbit => orbit == sunOrbit)\n        val sunOrbitList\
    \ = sunOrbits.map(orbit => orbit._1)\n        val sunOrbitListSorted = sunOrbitList.sortWith(sunOrbit\
    \ => sunOrbit < sunOrbit)\n        sunOrbitListSorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmphn_dsloa.scala:24:50 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mdistance\e[0m =\
    \ math.sqrt((planet1.toDouble() - planet2.toDouble()) * (planet1.toDouble() -\
    \ planet2.toDouble()) + (planet1.toDouble() - planet2.toDouble()) * (planet1.toDouble()\
    \ - planet2.toDouble()))\n\e[31m\e[31m   |\e[0m                              \
    \            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \e[33mmethod\e\
    [0m \e[35mtoDouble\e[0m in \e[33mclass\e[0m \e[35mStringOps\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmphn_dsloa.scala:31:47\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m31 |\e[0m       \
    \ \e[33mval\e[0m \e[36msunOrbits\e[0m = orbits.filter(\e[36morbit\e[0m => orbit\
    \ == sunOrbit)\n\e[31m\e[31m   |\e[0m                                        \
    \       ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of types (String, Double)\
    \ and Double cannot be compared with == or !=\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmphn_dsloa.scala:33:64 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36msunOrbitListSorted\e[0m = sunOrbitList.sortWith(\e\
    [36msunOrbit\e[0m => sunOrbit < sunOrbit)\n\e[31m\e[31m   |\e[0m             \
    \                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 2\n3 errors found\n"
  stdout: ''
  timestamp: 1659798203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\"\
    , new Orbit(\n                new Planet(\"Venus\", new Orbit(\n             \
    \       new Planet(\"Earth\", new Orbit(\n                        new Planet(\"\
    Mars\", new Orbit(\n                            new Planet(\"Jupiter\", new Orbit(\n\
    \                                new Planet(\"Saturn\", new Orbit(\n         \
    \                           new Planet(\"Uranus\", new Orbit(\n              \
    \                          new Planet(\"Neptune\", new Orbit(\n              \
    \                              new Planet(\"Mercury\", new Orbit(\n          \
    \                                      new Planet(\"Venus\", new Orbit(\n    \
    \                                                new Planet(\"Earth\", new Orbit(\n\
    \                                                        new Planet(\"Mars\",\
    \ new Orbit(\n                                                            new\
    \ Planet(\"Jupiter\", new Orbit(\n                                           \
    \                     new Planet(\"Saturn\", new Orbit(\n                    \
    \                                                new Planet(\"Uranus\", new Orbit(\n\
    \                                                                        new Planet(\"\
    Neptune\", new Orbit(\n                                                      \
    \                      new Planet(\"Mercury\", new Orbit(\n                  \
    \                                                              new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                     new Planet(\"Earth\", new Orbit(\n                     \
    \                                                                   new Planet(\"\
    Mars\", new Orbit(\n                                                         \
    \                                   new Planet(\"Jupiter\", new Orbit(\n     \
    \                                                                            \
    \               new Planet(\"Saturn\", new Orbit(\n                          \
    \                                                                          new\
    \ Planet(\"Uranus\", new Orbit(\n                                            \
    \                                                            new Planet(\"Neptune\"\
    , new Orbit(\n                                                               \
    \                                             new Planet(\"Mercury\", new Orbit(\n\
    \                                                                            \
    \                                    new Planet(\"Venus\", new Orbit(\n      \
    \                                                                            \
    \                                  new Planet(\"Earth\", new Orbit(\n        \
    \                                                                            \
    \                                    new Planet(\"Mars\", new Orbit(\n       \
    \                                                                            \
    \                                         new Planet(\"Jupiter\", new Orbit(\n\
    \                                                                            \
    \                                                    new Planet(\"Saturn\", new\
    \ Orbit(\n                                                                   \
    \                                                                 new Planet(\"\
    Uranus\", new Orbit(\n                                                       \
    \                                                                            \
    \     new Planet(\"Neptune\", new Orbit(\n                                   \
    \                                                                            \
    \                             new Planet(\"Mercury\", new Orbit(\n           \
    \                                                                            \
    \                                                         new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \         new Planet(\"Earth\", new Orbit(\n                                 \
    \                                                                            \
    \                                           new Planet(\"Mars\", new Orbit(\n\
    \                                                                            \
    \                                                                            \
    \    \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa9m9vyup.scala:57:181 --------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m                                                    \
    \                                                                            \
    \                        \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m,\
    \ \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\nexception occurred while parser /tmp/tmpa9m9vyup.scala\n\
    exception occurred while compiling /tmp/tmpa9m9vyup.scala\nException in thread\
    \ \"main\" java.lang.AssertionError: assertion failed: position error, parent\
    \ span does not contain child span\nparent      = \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m) # -1,\nparent span = <5097..5107>,\nchild       = \e[31mnull\e\
    [0m # -1,\nchild span  = [5107..5269..5269]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m,\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\nerror while checking \e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e\
    [32m\"Venus\"\e[0m, \n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\n\
    )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n\
    \      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n        \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n\
    \      )\n    )\n  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e\
    [0m, \n        \e[33mnew \e[0m\e[35mOrbit\e[0m(\n          \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, "
  timestamp: 1659798186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth, venus)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, earth, mars, venus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, earth, mars, jupiter, venus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus, earth, mars, jupiter, saturn\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwmkr0vyp.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpw"
  stdout: ''
  timestamp: 1659798203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , 6378137.0, 0.0, 0.0),\n            Planet(\"Venus\", 6378145.0, 0.0, 0.0),\n\
    \            Planet(\"Earth\", 6377563.0, 0.0, 0.0),\n            Planet(\"Mars\"\
    , 6378206.0, 0.0, 0.0),\n            Planet(\"Jupiter\", 6378140.0, 0.0, 0.0),\n\
    \            Planet(\"Saturn\", 6378165.0, 0.0, 0.0),\n            Planet(\"Uranus\"\
    , 6378160.0, 0.0, 0.0),\n            Planet(\"Neptune\", 6378140.0, 0.0, 0.0)\n\
    \        )\n        val sun = Planet(\"Sun\", 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)\n\
    \        val planet1 = planets.find(_.name == planet1).get\n        val planet2\
    \ = planets.find(_.name == planet2).get\n        val planet1Orbit = planet1.orbit(sun)\n\
    \        val planet2Orbit = planet2.orbit(sun)\n        val planet1OrbitDistance\
    \ = planet1Orbit.distanceTo(sun)\n        val planet2OrbitDistance = planet2Orbit.distanceTo(sun)\n\
    \        val planet1OrbitProximity = planet1OrbitDistance / planet1.radius\n \
    \       val planet2OrbitProximity = planet2OrbitDistance / planet2.radius\n  \
    \      val planet1OrbitProximityInt = math.round(planet1OrbitProximity)\n    \
    \    val planet2OrbitProximityInt = math.round(planet2OrbitProximity)\n      \
    \  val planet1OrbitProximityInt = math.round(planet1OrbitProximity)\n        val\
    \ planet2OrbitProximityInt = math.round(planet2OrbitProximity)\n        val planet1OrbitProximityInt\
    \ = math.round(planet1OrbitProximity)\n        val planet2OrbitProximityInt =\
    \ math.round(planet2OrbitProximity)\n        val planet1OrbitProximityInt = math.round(planet1OrbitProximity)\n\
    \        val planet2OrbitProximityInt = math.round(planet2OrbitProximity)\n  \
    \      val planet1OrbitProximityInt = math.round(planet1OrbitProximity)\n    \
    \    val planet2OrbitProxim\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"\
    Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwxx4r5z2.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwxx4r5z2.scala:42:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanet1OrbitProximityInt\e[0m = math.round(planet1OrbitProximity)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitProximityInt is already defined as \e[33mvalue\e\
    [0m \e[35mplanet1OrbitProximityInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwxx4r5z2.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mplanet2OrbitProximityInt\e\
    [0m = math.round(planet2OrbitProximity)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet2OrbitProximityInt is already defined as \e[33mvalue\e\
    [0m \e[35mplanet2OrbitProximityInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwxx4r5z2.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mplanet1OrbitProximityInt\e\
    [0m = math.round(planet1OrbitProximity)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitProximityInt is already defined as \e[33mvalue\e\
    [0m \e[35mplanet1OrbitProximityInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwxx4r5z2.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mplanet2OrbitProximityInt\e\
    [0m = math.round(planet2OrbitProximity)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , 0.3048, 0.6366),\n            Planet(\"Venus\", 0.6153, 0.2418),\n         \
    \   Planet(\"Earth\", 0.6954, 0.118),\n            Planet(\"Mars\", 0.3048, -0.9372),\n\
    \            Planet(\"Jupiter\", 0.9871, 0.08),\n            Planet(\"Saturn\"\
    , 0.5962, -0.0417),\n            Planet(\"Uranus\", 0.6954, -0.15),\n        \
    \    Planet(\"Neptune\", 0.8067, -0.2036)\n        )\n        val sun = Planet(\"\
    Sun\", 1, 0)\n        val planet1Orbit = planets.find(_.name == planet1).getOrElse(sun)\n\
    \        val planet2Orbit = planets.find(_.name == planet2).getOrElse(sun)\n \
    \       val orbits = planets.filter(_.name < planet2 && _.name > planet1)\n  \
    \      val orbit1ToPlanet2 = orbits.filter(_.name == planet2).map(_.orbit)\n \
    \       val orbit2ToPlanet1 = orbits.filter(_.name == planet1).map(_.orbit)\n\
    \        val orbit1ToPlanet1Orbit = orbit1ToPlanet2.filter(_.isBefore(planet1Orbit))\n\
    \        val orbit2ToPlanet2Orbit = orbit2ToPlanet1.filter(_.isAfter(planet2Orbit))\n\
    \        val orbit1ToPlanet1OrbitOrbit2ToPlanet2Orbit = orbit1ToPlanet1Orbit.filter(_.isBefore(orbit2ToPlanet2Orbit))\n\
    \        val orbit1ToPlanet1OrbitOrbit2ToPlanet2OrbitOrbit1ToPlanet2OrbitOrbit2ToPlanet1\
    \ = orbit1ToPlanet1OrbitOrbit2ToPlanet2Orbit.filter(_.isAfter(orbit1ToPlanet2Orbit))\n\
    \        val orbit1ToPlanet1OrbitOrbit2ToPlanet2OrbitOrbit1ToPlanet2OrbitOrbit2ToPlanet1Orbit\
    \ = orbit1ToPlanet1OrbitOrbit2ToPlanet2OrbitOrbit1ToPlanet2OrbitOrbit2ToPlanet1.filter(_.isAfter(orbit1ToPlanet2Orbit))\n\
    \        val orbit1ToPlanet1OrbitOr\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8fzfzx8x.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8fzfzx8x.scala:22:12\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m0.3048\e[0m, \e[31m0.6366\e[0m),\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8fzfzx8x.scala:23:12 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m0.6153\e\
    [0m, \e[31m0.2418\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp8fzfzx8x.scala:24:12 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m0.6954\e[0m,\
    \ \e[31m0.118\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8fzfzx8x.scala:25:12 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m            Planet(\e[31m\"Mars\"\e[0m, \e[31m0.3048\e[0m, -\e[31m0.9372\e\
    [0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8fzfzx8x.scala:26:12\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m, \e[31m0.9871\e[0m, \e[31m0.08\e[0m),\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8fzfzx8x.scala:27:12 ----------"
  stdout: ''
  timestamp: 1659798207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(Vector(0.0, 0.0, 0.0), 0.0)),\n            Planet(\"Venus\", Orbit(Vector(0.0,\
    \ 0.0, -1.0), 0.0)),\n            Planet(\"Earth\", Orbit(Vector(0.0, 1.0, 0.0),\
    \ 0.0)),\n            Planet(\"Mars\", Orbit(Vector(0.0, -1.0, 0.0), 0.0)),\n\
    \            Planet(\"Jupiter\", Orbit(Vector(1.0, 0.0, 0.0), 0.0)),\n       \
    \     Planet(\"Saturn\", Orbit(Vector(-1.0, 0.0, 0.0), 0.0)),\n            Planet(\"\
    Uranus\", Orbit(Vector(-1.0, 0.0, -1.0), 0.0)),\n            Planet(\"Neptune\"\
    , Orbit(Vector(-1.0, 0.0, -1.0), 0.0))\n        )\n        val sun = Orbit(Vector(0.0,\
    \ 0.0, -1.0), 1.0)\n        val orbit1 = planets.find(_.name == planet1).map(_.orbit).getOrElse(sun)\n\
    \        val orbit2 = planets.find(_.name == planet2).map(_.orbit).getOrElse(sun)\n\
    \        val orbits = List(orbit1, orbit2)\n        val distances = orbits.map(_.distanceTo(sun))\n\
    \        val sorted = distances.sortBy(_)\n        val result = sorted.takeWhile(_\
    \ < 1.0).reverse.takeWhile(_ > 0.0).reverse.toList\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb1d4ja99.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(Vector(\e\
    [31m0.0\e[0m, \e[31m0.0\e[0m, \e[31m0.0\e[0m), \e[31m0.0\e[0m)),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb1d4ja99.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(Vector(\e[31m0.0\e[0m, \e[31m0.0\e[0m, \e[31m0.0\e[0m),\
    \ \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m                              ^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb1d4ja99.scala:23:12 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(Vector(\e\
    [31m0.0\e[0m, \e[31m0.0\e[0m, -\e[31m1.0\e[0m), \e[31m0.0\e[0m)),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb1d4ja99.scala:23:28\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(Vector(\e[31m0.0\e[0m, \e[31m0.0\e[0m, -\e[31m1.0\e[0m), \e\
    [31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpb1d4ja99.scala:24:12 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Orbit(Vector(\e\
    [31m0.0\e[0m, \e[31m1.0\e[0m, \e[31m0.0\e[0m), \e[31m0.0\e[0m)),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- "
  stdout: ''
  timestamp: 1659798207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planetsBetween\
    \ = planets.filter(planet => planets.contains(planet) && planet != planet1 &&\
    \ planet != planet2)\n        val planetsBetween2 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet2 && planet != planet1)\n        val planetsBetween3 = planets.filter(planet\
    \ => planets.contains(planet) && planet != planet1 && planet != planet2 && planet\
    \ != planet3)\n        val planetsBetween4 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4)\n        val planetsBetween5 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4 && planet != planet5)\n        val planetsBetween6 = planets.filter(planet\
    \ => planets.contains(planet) && planet != planet1 && planet != planet2 && planet\
    \ != planet3 && planet != planet4 && planet != planet5 && planet != planet6)\n\
    \        val planetsBetween7 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4 && planet != planet5 && planet != planet6 && planet != planet7)\n  \
    \      val planetsBetween8 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4 && planet != planet5 && planet != planet6 && planet != planet7 && planet\
    \ != planet8)\n        val planetsBetween9 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4 && planet != planet5 && planet != planet6 && planet != plan\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcorudy_u.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcorudy_u.scala:24:135\
    \ -----------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mplanetsBetween3\e[0m = planets.filter(\e[36mplanet\e[0m => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                      Not\
    \ found: planet3\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcorudy_u.scala:25:135\
    \ -----------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mplanetsBetween4\e[0m = planets.filter(\e[36mplanet\e[0m => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4)\n\e[31m\e[31m   |\e[0m                                            \
    \                                                                            \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \                      Not found: planet3\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcorudy_u.scala:25:156 -----------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetween4\e[0m = planets.filter(\e\
    [36mplanet\e[0m => planets.contains(planet) && planet != planet1 && planet !=\
    \ planet2 && planet != planet3 && planet != planet4)\n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \                                                                            \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                                             \
    \         Not found: planet4\n\e[31m   |\e[0m\n\e["
  stdout: ''
  timestamp: 1659798204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fpo4j_j.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(\n                Vector(0.0, -9.80665, 0.0), \n                Vector(0.0,\
    \ 9.80665, 0.0), \n                Vector(0.0, 0.0, 1.0)), \n            Planet(\"\
    Venus\", Orbit(\n                Vector(0.0, -18.8513, 0.0), \n              \
    \  Vector(0.0, 18.8513, 0.0), \n                Vector(0.0, 0.0, 1.0)), \n   \
    \         Planet(\"Earth\", Orbit(\n                Vector(0.0, -9.80665, 0.0),\
    \ \n                Vector(0.0, 9.80665, 0.0), \n                Vector(0.0, 0.0,\
    \ 1.0)), \n            Planet(\"Mars\", Orbit(\n                Vector(0.0, -9.80665,\
    \ 0.0), \n                Vector(0.0, 9.80665, 0.0), \n                Vector(0.0,\
    \ 0.0, 1.0)), \n            Planet(\"Jupiter\", Orbit(\n                Vector(0.0,\
    \ -18.8513, 0.0), \n                Vector(0.0, 18.8513, 0.0), \n            \
    \    Vector(0.0, 0.0, 1.0)), \n            Planet(\"Saturn\", Orbit(\n       \
    \         Vector(0.0, -9.80665, 0.0), \n                Vector(0.0, 9.80665, 0.0),\
    \ \n                Vector(0.0, 0.0, 1.0)), \n            Planet(\"Uranus\", Orbit(\n\
    \                Vector(0.0, -9.80665, 0.0), \n                Vector(0.0, 9.80665,\
    \ 0.0), \n                Vector(0.0, 0.0, 1.0)), \n            Planet(\"Neptune\"\
    , Orbit(\n                Vector(0.0, -9.80665, 0.0), \n                Vector(0.0,\
    \ 9.80665, 0.0), \n                Vector(0.0, 0.0, 1.0))\n        )\n       \
    \ val sun = Orbit(\n            Vector(0.0, -9.80665, 0.0), \n            Vector(0.0,\
    \ 9.80665, 0.0), \n            Vector(0.0, 0.0, 1.0))\n        val planet1orbit\
    \ = planets.find(_.name == planet1).getOrElse(throw new IllegalArgumentException(\"\
    Planet \" + planet1 + \" not found\")).orbit\n        val planet2orbit = planets.find(_.name\
    \ == planet2).getOrElse(throw new IllegalArgumentException(\"Planet \" + planet2\
    \ + \" not found\")).orbit\n        val planet1orbitorbit = planet1orbit.orbit.orbit\n\
    \        val planet2orbitorbit = planet2orbit.orbit.orbit\n        val planet1orbitorbitorbit\
    \ = planet1orbitorbit.orbit.orbit\n        val plan\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf_lyuqje.scala:55:8 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Orbit(\n\e[31m\e\
    [31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but 'val'\
    \ found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf_lyuqje.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf_lyuqje.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                              ^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf_lyuqje.scala:26:12 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf_lyuqje.scala:26:28\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf_lyuqje.scala:30:12 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf_lyuqje.scala:30:28\
    \ ------------------------\e[0m\e[0m\n\e"
  stdout: ''
  timestamp: 1659798205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = Nil\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = Nil\n   \
    \     val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphu9p4td7.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphu9p4td7.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphu9p4td7.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphu9p4td7.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphu9p4td7.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphu9p4td7.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmph"
  stdout: ''
  timestamp: 1659798205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fpo4j_j.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth, mars, jupiter, saturn, uranus)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, neptune)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp92as_44v.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp92as_44v.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp92as_44v.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fpo4j_j.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => planet -> orbit(planet))\n        val sun = orbits.map(_._2).max\n\
    \        val orbits1 = orbits.filter(_._2 > sun)\n        val orbits2 = orbits.filter(_._2\
    \ < sun)\n        val orbits12 = orbits1.union(orbits2)\n        val orbits121\
    \ = orbits12.filter(_._2 > sun)\n        val orbits122 = orbits12.filter(_._2\
    \ < sun)\n        val orbits123 = orbits121.union(orbits122)\n        val orbits1232\
    \ = orbits123.filter(_._2 > sun)\n        val orbits12321 = orbits1232.filter(_._2\
    \ < sun)\n        val orbits12322 = orbits1232.filter(_._2 < sun)\n        val\
    \ orbits12323 = orbits12321.union(orbits12322)\n        val orbits123213 = orbits12323.filter(_._2\
    \ > sun)\n        val orbits1232131 = orbits123213.filter(_._2 < sun)\n      \
    \  val orbits1232132 = orbits123213.filter(_._2 < sun)\n        val orbits1232133\
    \ = orbits1232132.union(orbits1232131)\n        val orbits12321332 = orbits1232133.filter(_._2\
    \ > sun)\n        val orbits123213321 = orbits12321332.filter(_._2 < sun)\n  \
    \      val orbits123213322 = orbits12321332.filter(_._2 < sun)\n        val orbits123213323\
    \ = orbits123213321.union(orbits123213322)\n        val orbits1232133213 = orbits123213323.filter(_._2\
    \ > sun)\n        val orbits12321332131 = orbits1232133213.filter(_._2 < sun)\n\
    \        val orbits12321332132 = orbits1232133213.filter(_._2 < sun)\n       \
    \ val orbits12321332133 = orbits12321332132.union(orbits12321332131)\n       \
    \ val orbits123213321332 = orbits12321332133.filter(_._2 > sun)\n        val orbit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc1b7tez3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpc1b7tez3.scala:22:53\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e\
    [0m \e[36morbits\e[0m = planets.map(\e[36mplanet\e[0m => planet -> orbit(planet))\n\
    \e[31m\e[31m   |\e[0m                                                     ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    \e[33mvalue\e[0m \e[35morbit\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpc1b7tez3.scala:23:38\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mval\e[0m \e[36msun\e[0m = orbits.map(_._2).max\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0mambiguous given\
    \ instances: both \e[33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mDeprecatedDoubleOrdering\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpc1b7tez3.scala:24:41 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36morbits1\e[0m = orbits.filter(_._2\
    \ > sun)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue > is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\
    \e[31m   |\e[0m  import math.BigDecimal.RoundingMode.Val"
  stdout: ''
  timestamp: 1659798211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth, venus)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, earth, mars, venus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, earth, mars, jupiter, venus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus, earth, mars, jupiter, saturn\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwmkr0vyp.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpw"
  stdout: ''
  timestamp: 1659798203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => (planet, planets.map(planet).map(planet)))\n\
    \        val sun = Planet(\"Sun\")\n        val sunOrbit = orbits.map(_.map(_.map(sun).map(_.orbit)))\n\
    \        val sunOrbits = sunOrbit.map(_.flatten)\n        val sunOrbitsSorted\
    \ = sunOrbits.sortWith((a, b) => a.distance < b.distance)\n        val sunOrbitsSortedWithSun\
    \ = sunOrbitsSorted.filter(_.distance < sunOrbitsSorted.map(_.distance).max)\n\
    \        val sunOrbitsSortedWithSunAndPlanets = sunOrbitsSortedWithSun.filter(_.planets.contains(planet1))\n\
    \        val sunOrbitsSortedWithSunAndPlanetsWithPlanet1 = sunOrbitsSortedWithSunAndPlanets.filter(_.planets.contains(planet2))\n\
    \        val sunOrbitsSortedWithSunAndPlanetsWithPlanet2 = sunOrbitsSortedWithSunAndPlanetsWithPlanet1.filter(_.planets.contains(planet1))\n\
    \        val sunOrbitsSortedWithSunAndPlanetsWithPlanet1AndPlanet2 = sunOrbitsSortedWithSunAndPlanetsWithPlanet2.filter(_.planets.contains(planet2))\n\
    \        val sunOrbitsSortedWithSunAndPlanetsWithPlanet1AndPlanet2AndPlanet3 =\
    \ sunOrbitsSortedWithSunAndPlanetsWithPlanet1AndPlanet2.filter(_.planets.contains(planet1))\n\
    \        val sunOrbitsSortedWithSunAndPlanetsWithPlanet1AndPlanet2AndPlanet3AndPlanet4\
    \ = sunOrbitsSortedWithSunAndPlanetsWithPlanet1AndPlanet2AndPlanet3.filter(_.planets.contains(planet2))\n\
    \        val sunOrbitsSortedWithSunAndPlanetsWithPlanet1AndPlanet2AndPlanet3AndPlanet4AndPlanet5\
    \ = sunOrbitsSortedWithSunAndPlanetsWithPlanet1AndPlanet2AndPlanet3AndPlanet4.filter(_.planets.contains(planet1))\n\
    \        val sunOrbitsSortedWithSunAndPlanetsWithPlanet1AndPlanet2AndPlanet3AndPlanet4AndPlanet5AndPlanet6\
    \ = sunOrbitsSortedWithSunAndPlanetsWithPlanet1AndPlanet2AndPlanet3AndPlan\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc4za13e0.scala:22:64\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36morbits\e\
    [0m = planets.map(\e[36mplanet\e[0m => (planet, planets.map(planet).map(planet)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \     Found:    (planet : String)\n\e[31m   |\e[0m                           \
    \                  Required: String => Any\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpc4za13e0.scala:23:18 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"Sun\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmpc4za13e0.scala:24:40 -----------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36msunOrbit\e[0m = orbits.map(_.map(_.map(sun).map(_.orbit)))\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$2 of expanded function:\n\e[31m   |\e\
    [0m   _$2 => _$2.map(sun).map(_$3 => _$3.orbit).\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpc4za13e0.scala:25:39 ------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36msunOrbits\e[0m = sunOrbit.map(_.flatten)\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     value flatten is not a member of (Nothing, Nothing)\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc4za13e0.scala:26:61 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msunOrbitsSorted\e[0m = sunOrbits.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a.distance < b.distance)\n\e[31m\e[31m   |\e[0m \
    \                                                          ^^^^^^^^^^\e[0m\n\e\
    [31"
  stdout: ''
  timestamp: 1659798208
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n     \
    \       Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\
    \ Vector(0,0,0)),\n            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Mars\", Orbit(Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Jupiter\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n     \
    \       Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\
    \ Vector(0,0,0)),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n        )\n        val sun =\
    \ Planet(\"Sun\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n\
    \        val orbit1 = planets.find(_.name == planet1).getOrElse(sun).orbit\n \
    \       val orbit2 = planets.find(_.name == planet2).getOrElse(sun).orbit\n  \
    \      val orbits = orbit1.zip(orbit2).map(o => o.orbit)\n        val distances\
    \ = orbits.map(o => Vector.dist(o.x, o.y))\n        val sortedDistances = distances.sortBy(d\
    \ => d)\n        val closestPlanets = sortedDistances.takeWhile(d => d < distances.last).reverse\n\
    \        closestPlanets.map(p => planets.find(_.name == p).getOrElse(sun).name)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_qc_1due.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_qc_1due.scala:22:30 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m                            \
    \  ^^^^^\e[0m\n\e[31m   |\e[0m                              Not found: Orbit\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_qc_1due.scala:23:12\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m1\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e\
    [0m)), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_qc_1due.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with"
  stdout: ''
  timestamp: 1659798208
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\"\
    , new Orbit(\n                new Planet(\"Venus\", new Orbit(\n             \
    \       new Planet(\"Earth\", new Orbit(\n                        new Planet(\"\
    Mars\", new Orbit(\n                            new Planet(\"Jupiter\", new Orbit(\n\
    \                                new Planet(\"Saturn\", new Orbit(\n         \
    \                           new Planet(\"Uranus\", new Orbit(\n              \
    \                          new Planet(\"Neptune\", new Orbit(\n              \
    \                              new Planet(\"Mercury\", new Orbit(\n          \
    \                                      new Planet(\"Venus\", new Orbit(\n    \
    \                                                new Planet(\"Earth\", new Orbit(\n\
    \                                                        new Planet(\"Mars\",\
    \ new Orbit(\n                                                            new\
    \ Planet(\"Jupiter\", new Orbit(\n                                           \
    \                     new Planet(\"Saturn\", new Orbit(\n                    \
    \                                                new Planet(\"Uranus\", new Orbit(\n\
    \                                                                        new Planet(\"\
    Neptune\", new Orbit(\n                                                      \
    \                      new Planet(\"Mercury\", new Orbit(\n                  \
    \                                                              new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                     new Planet(\"Earth\", new Orbit(\n                     \
    \                                                                   new Planet(\"\
    Mars\", new Orbit(\n                                                         \
    \                                   new Planet(\"Jupiter\", new Orbit(\n     \
    \                                                                            \
    \               new Planet(\"Saturn\", new Orbit(\n                          \
    \                                                                          new\
    \ Planet(\"Uranus\", new Orbit(\n                                            \
    \                                                            new Planet(\"Neptune\"\
    , new Orbit(\n                                                               \
    \                                             new Planet(\"Mercury\", new Orbit(\n\
    \                                                                            \
    \                                    new Planet(\"Venus\", new Orbit(\n      \
    \                                                                            \
    \                                  new Planet(\"Earth\", new Orbit(\n        \
    \                                                                            \
    \                                    new Planet(\"Mars\", new Orbit(\n       \
    \                                                                            \
    \                                         new Planet(\"Jupiter\", new Orbit(\n\
    \                                                                            \
    \                                                    new Planet(\"Saturn\", new\
    \ Orbit(\n                                                                   \
    \                                                                 new Planet(\"\
    Uranus\", new Orbit(\n                                                       \
    \                                                                            \
    \     new Planet(\"Neptune\", new Orbit(\n                                   \
    \                                                                            \
    \                             new Planet(\"Mercury\", new Orbit(\n           \
    \                                                                            \
    \                                                         new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \         new Planet(\"Earth\", new Orbit(\n                                 \
    \                                                                            \
    \                                           new Planet(\"Mars\", new Orbit(\n\
    \                                                                            \
    \                                                                            \
    \    \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa9m9vyup.scala:57:181 --------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m                                                    \
    \                                                                            \
    \                        \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m,\
    \ \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\nexception occurred while parser /tmp/tmpa9m9vyup.scala\n\
    exception occurred while compiling /tmp/tmpa9m9vyup.scala\nException in thread\
    \ \"main\" java.lang.AssertionError: assertion failed: position error, parent\
    \ span does not contain child span\nparent      = \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m) # -1,\nparent span = <5097..5107>,\nchild       = \e[31mnull\e\
    [0m # -1,\nchild span  = [5107..5269..5269]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m,\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\nerror while checking \e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e\
    [32m\"Venus\"\e[0m, \n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\n\
    )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n\
    \      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n        \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n\
    \      )\n    )\n  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e\
    [0m, \n        \e[33mnew \e[0m\e[35mOrbit\e[0m(\n          \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, "
  timestamp: 1659798186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fpo4j_j.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, neptune)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp92as_44v.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp92as_44v.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp92as_44v.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsb4u0xm.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth, venus)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, earth, mars, venus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, earth, mars, jupiter, venus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus, earth, mars, jupiter, saturn\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwmkr0vyp.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpw"
  stdout: ''
  timestamp: 1659798203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(\n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0),\
    \ \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n \
    \               Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n     \
    \           Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n         \
    \       Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n             \
    \   Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0,\
    \ 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0),\
    \ \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n \
    \               Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n     \
    \           Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n         \
    \       Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n             \
    \   Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n                Vector(0.0,\
    \ 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0),\
    \ \n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n \
    \               Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n     \
    \           Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n         \
    \       Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n             \
    \   Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0,\
    \ 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0),\
    \ \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n \
    \               Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n     \
    \           Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n         \
    \       Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n             \
    \   Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0,\
    \ 1.0), \n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0),\
    \ \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n \
    \               Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n     \
    \           Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n         \
    \       Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n             \
    \   Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0,\
    \ 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0),\
    \ \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n \
    \               Vector(0.0, 1.0), \n                Vector(1.0, \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprbw13c78.scala:94:4 ----------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprbw13c78.scala:22:12\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmprbw13c78.scala:22:30 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmprbw13c78.scala:94:5 ---------------------\e[0m\e\
    [0m\n\e[31m94 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth, mars, jupiter, saturn, uranus)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth, mars, jupiter, saturn, uranus)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(\n                Vector(0.0, 0.0, 0.0), \n                Vector(0.0,\
    \ 0.0, -1.0), \n                Vector(0.0, 1.0, 0.0), \n                Vector(0.0,\
    \ -1.0, 0.0), \n                Vector(1.0, 0.0, 0.0), \n                Vector(-1.0,\
    \ 0.0, 0.0), \n                Vector(0.0, 1.0, 1.0), \n                Vector(0.0,\
    \ -1.0, 1.0), \n                Vector(1.0, 0.0, 1.0), \n                Vector(-1.0,\
    \ 0.0, 1.0), \n                Vector(0.0, 1.0, -1.0), \n                Vector(0.0,\
    \ -1.0, -1.0), \n                Vector(1.0, 0.0, -1.0), \n                Vector(-1.0,\
    \ 0.0, -1.0))),\n            Planet(\"Venus\", Orbit(\n                Vector(0.0,\
    \ 0.0, 0.0), \n                Vector(0.0, 0.0, -1.0), \n                Vector(0.0,\
    \ 1.0, 0.0), \n                Vector(0.0, -1.0, 0.0), \n                Vector(1.0,\
    \ 0.0, 0.0), \n                Vector(-1.0, 0.0, 0.0), \n                Vector(0.0,\
    \ 1.0, 1.0), \n                Vector(0.0, -1.0, 1.0), \n                Vector(1.0,\
    \ 0.0, 1.0), \n                Vector(-1.0, 0.0, 1.0), \n                Vector(0.0,\
    \ 1.0, -1.0), \n                Vector(0.0, -1.0, -1.0), \n                Vector(1.0,\
    \ 0.0, -1.0), \n                Vector(-1.0, 0.0, -1.0))),\n            Planet(\"\
    Earth\", Orbit(\n                Vector(0.0, 0.0, 0.0), \n                Vector(0.0,\
    \ 0.0, -1.0), \n                Vector(0.0, 1.0, 0.0), \n                Vector(0.0,\
    \ -1.0, 0.0), \n                Vector(1.0, 0.0, 0.0), \n                Vector(-1.0,\
    \ 0.0, 0.0), \n                Vector(0.0, 1.0, 1.0), \n                Vector(0.0,\
    \ -1.0, 1.0), \n                Vector(1.0, 0.0, 1.0), \n                Vector(-1.0,\
    \ 0.0, 1.0), \n                Vector(0.0, 1.0, -1.0), \n                Vector(0.0,\
    \ -1.0, -1.0), \n                Vector(1.0, 0.0, -1.0), \n                Vector(-1.0,\
    \ 0.0, -1.0))),\n            Planet(\"Mars\", Orbit(\n                Vector(0.0,\
    \ 0.0, 0.0), \n                Vector(0.0, 0.0, -1.0), \n                Vector(0.0,\
    \ 1.0, 0.0), \n                Vector(0.0, -1.0, 0.0), \n                Vector(1.0,\
    \ 0.0, 0.0), \n                Vector(-1.0, 0.0, 0.0), \n                Vector(0.0,\
    \ 1.0, 1.0), \n                Vector(0.0, -1.0, 1.0), \n                Vector(1.0,\
    \ 0.0, 1.0), \n                Vector(-1.0, 0.0, 1.0), \n                Vector(0.0,\
    \ 1.0, -1.0), \n                Vector(0.0, -1.0, -1.0), \n                Vector(1.0,\
    \ 0.0, -1.0), \n                Vector(-1.0, 0.0, -1.0))),\n            Planet(\"\
    Jupiter\", Orbit(\n                Vector(0.0, 0.0, 0.0), \n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgny6s3gu.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgny6s3gu.scala:22:12\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpgny6s3gu.scala:22:30 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpgny6s3gu.scala:37:12 ------------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgny6s3gu.scala:37:28\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgny6s3gu.scala:52:12 ------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgny6s3gu.scala:52:28\
    \ ------------------------\e[0m\e[0m\n\e[31m52 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, "
  stdout: ''
  timestamp: 1659798205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fpo4j_j.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsb4u0xm.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenMercuryAndVenus = List(venus)\n        val planetsBetweenMercuryAndEarth\
    \ = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenMercuryAndMars\
    \ = List(jupiter, saturn, uranus)\n        val planetsBetweenMercuryAndJupiter\
    \ = List(saturn, uranus)\n        val planetsBetweenMercuryAndSaturn = List(uranus)\n\
    \        val planetsBetweenMercuryAndUranus = List(uranus)\n        val planetsBetweenMercuryAndNeptune\
    \ = List(uranus)\n        val planetsBetweenVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenVenusAndJupiter = List(saturn, uranus)\n\
    \        val planet\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjo5k37wh.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpj"
  stdout: ''
  timestamp: 1659798206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val sun\
    \ = Vector(0.0, 0.0, 1.0)\n        val planet1Orbit = Vector(planet1.toDouble,\
    \ planet2.toDouble, sun.getX)\n        val planet2Orbit = Vector(planet2.toDouble,\
    \ planet1.toDouble, sun.getX)\n        val planet1OrbitDist = planet1Orbit.dist(sun)\n\
    \        val planet2OrbitDist = planet2Orbit.dist(sun)\n        val planet1OrbitAngle\
    \ = planet1Orbit.angle(sun)\n        val planet2OrbitAngle = planet2Orbit.angle(sun)\n\
    \        val planet1OrbitAngleDist = planet1OrbitAngle - planet1OrbitDist\n  \
    \      val planet2OrbitAngleDist = planet2OrbitAngle - planet2OrbitDist\n    \
    \    val planet1OrbitAngleDist = planet1OrbitAngleDist / planet1OrbitDist\n  \
    \      val planet2OrbitAngleDist = planet2OrbitAngleDist / planet2OrbitDist\n\
    \        val planet1OrbitAngleDist = planet1OrbitAngleDist * planet1OrbitDist\n\
    \        val planet2OrbitAngleDist = planet2OrbitAngleDist * planet2OrbitDist\n\
    \        val planet1OrbitAngleDist = planet1OrbitAngleDist * planet1OrbitDist\n\
    \        val planet2OrbitAngleDist = planet2OrbitAngleDist * planet2OrbitDist\n\
    \        val planet1OrbitAngleDist = planet1OrbitAngleDist * planet1OrbitDist\n\
    \        val planet2OrbitAngleDist = planet2OrbitAngleDist * planet2OrbitDist\n\
    \        val planet1OrbitAngleDist = planet1OrbitAngleDist * planet1OrbitDist\n\
    \        val planet2OrbitAngleDist = planet2OrbitAngleDist * planet2OrbitDist\n\
    \        val planet1OrbitAngleDist = planet1OrbitAngleDist * planet1OrbitDist\n\
    \        val planet2OrbitAngleDist = planet\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptmfez07i.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mplanet1OrbitAngleDist\e\
    [0m = planet1OrbitAngleDist / planet1OrbitDist\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitAngleDist is already defined as \e[33mvalue\e\
    [0m \e[35mplanet1OrbitAngleDist\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptmfez07i.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mplanet2OrbitAngleDist\e\
    [0m = planet2OrbitAngleDist / planet2OrbitDist\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet2OrbitAngleDist is already defined as \e[33mvalue\e\
    [0m \e[35mplanet2OrbitAngleDist\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptmfez07i.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mplanet1OrbitAngleDist\e\
    [0m = planet1OrbitAngleDist * planet1OrbitDist\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitAngleDist is already defined as \e[33mvalue\e\
    [0m \e[35mplanet1OrbitAngleDist\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptmfez07i.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mplanet2OrbitAngleDist\e\
    [0m = planet2OrbitAngleDist * planet2OrbitDist\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet2OrbitAngleDist is already defined as \e[33mvalue\e\
    [0m \e[35mplanet2OrbitAngleDist\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods mu"
  stdout: ''
  timestamp: 1659798214
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\"\
    , new Orbit(\n                new Position(new Vector(0,0,0), new Vector(0,0,0)),\n\
    \                new Position(new Vector(0,0,0), new Vector(0,0,0))\n        \
    \    )),\n            new Planet(\"Venus\", new Orbit(\n                new Position(new\
    \ Vector(0,0,0), new Vector(0,0,0)),\n                new Position(new Vector(0,0,0),\
    \ new Vector(0,0,0))\n            )),\n            new Planet(\"Earth\", new Orbit(\n\
    \                new Position(new Vector(0,0,0), new Vector(0,0,0)),\n       \
    \         new Position(new Vector(0,0,0), new Vector(0,0,0))\n            )),\n\
    \            new Planet(\"Mars\", new Orbit(\n                new Position(new\
    \ Vector(0,0,0), new Vector(0,0,0)),\n                new Position(new Vector(0,0,0),\
    \ new Vector(0,0,0))\n            )),\n            new Planet(\"Jupiter\", new\
    \ Orbit(\n                new Position(new Vector(0,0,0), new Vector(0,0,0)),\n\
    \                new Position(new Vector(0,0,0), new Vector(0,0,0))\n        \
    \    )),\n            new Planet(\"Saturn\", new Orbit(\n                new Position(new\
    \ Vector(0,0,0), new Vector(0,0,0)),\n                new Position(new Vector(0,0,0),\
    \ new Vector(0,0,0))\n            )),\n            new Planet(\"Uranus\", new\
    \ Orbit(\n                new Position(new Vector(0,0,0), new Vector(0,0,0)),\n\
    \                new Position(new Vector(0,0,0), new Vector(0,0,0))\n        \
    \    )),\n            new Planet(\"Neptune\", new Orbit(\n                new\
    \ Position(new Vector(0,0,0), new Vector(0,0,0)),\n                new Position(new\
    \ Vector(0,0,0), new Vector(0,0,0))\n            ))\n        )\n        val planet1\
    \ = planets.find(_.name == planet1).get\n        val planet2 = planets.find(_.name\
    \ == planet2).get\n        val orbit1 = planet1.orbit\n        val orbit2 = planet2.orbit\n\
    \        val sun = orbit1.sun\n        val sun2 = orbit2.sun\n        val sun3\
    \ = orbit1.sun\n        val sun4 = orbit2.sun\n        val sun5 = orbit1.sun\n\
    \        val sun6 = orbit2.sun\n        val sun7 = orbit1.sun\n        val sun8\
    \ = orbit2.sun\n        val sun9 = orbit1.sun\n        val sun10 = orbit2.sun\n\
    \        val sun11 = orbit1.sun\n        val sun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpebfzvvxe.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpebfzvvxe.scala:22:16\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Mercury\"\e[0m, \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    Not found: type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpebfzvvxe.scala:26:16 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Venus\"\e[0m, \e[33mnew\e\
    [0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: type Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpebfzvvxe.scala:30:16 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Earth\"\e[0m, \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: type Planet\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpebfzvvxe.scala:34:16\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m, \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \  Not found: type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpebfzvvxe.scala:38:16 ------------------------\e[0m\e[0m\n\e[31m38 |\e\
    [0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Jupiter\"\e[0m, \e[33mnew\e\
    [0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: type Planet\n\e[31m   |\e[0m\n\e[3"
  stdout: ''
  timestamp: 1659798213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndVenusAndMar\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsfp2719s.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsfp2719s.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsfp2719s.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsfp2719s.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsfp2719s.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsfp2719s.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmps"
  stdout: ''
  timestamp: 1659798212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsb4u0xm.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fpo4j_j.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\"\
    , 6378137, 0.01720209),\n            new Planet(\"Venus\", 6378145, 0.009665586),\n\
    \            new Planet(\"Earth\", 6378388, 0.01600202),\n            new Planet(\"\
    Mars\", 6378206, 0.005871556),\n            new Planet(\"Jupiter\", 6378140, 0.00333836),\n\
    \            new Planet(\"Saturn\", 6378165, 0.00341812),\n            new Planet(\"\
    Uranus\", 6378140, 0.00291067),\n            new Planet(\"Neptune\", 6378137,\
    \ 0.00264027)\n        )\n        val sun = new Planet(\"Sun\", 6378160, 0.0)\n\
    \        val planet1Orbit = planets.find(_.name == planet1).getOrElse(sun)\n \
    \       val planet2Orbit = planets.find(_.name == planet2).getOrElse(sun)\n  \
    \      val orbits = planets.filter(_.orbit(planet1Orbit, planet2Orbit)).sortBy(_.distance(planet1Orbit,\
    \ planet2Orbit))\n        orbits.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiwym0v2z.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Mercury\"\e[0m, \e[31m6378137\e[0m, \e[31m0.01720209\e[0m),\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: type\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiwym0v2z.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Venus\"\e[0m, \e[31m6378145\e[0m, \e[31m0.009665586\e\
    [0m),\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \           Not found: type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpiwym0v2z.scala:24:16 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Earth\"\e[0m, \e[31m6378388\e\
    [0m, \e[31m0.01600202\e[0m),\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Not found: type Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpiwym0v2z.scala:25:16 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Mars\"\e[0m, \e[31m6378206\e[0m, \e[31m0.005871556\e[0m),\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: type\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiwym0v2z.scala:26:16\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Jupiter\"\e[0m, \e[31m6378140\e[0m, \e[31m0.00333836\e\
    [0m),\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \           Not found: type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpiwym0v2z.scala:27:"
  stdout: ''
  timestamp: 1659798216
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , 6378137, 0.01720209),\n            Planet(\"Venus\", 6378145, 0.00670546),\n\
    \            Planet(\"Earth\", 6378388, 0.01672),\n            Planet(\"Mars\"\
    , 6378206, 0.0058066),\n            Planet(\"Jupiter\", 6378140, 0.003338),\n\
    \            Planet(\"Saturn\", 6378167, 0.0034),\n            Planet(\"Uranus\"\
    , 6378140, 0.0034),\n            Planet(\"Neptune\", 6378137, 0.0034)\n      \
    \  )\n        val sun = Planet(\"Sun\", 6378167, 0.0034)\n        val planet1Orbit\
    \ = planets.find(_.name == planet1).getOrElse(sun)\n        val planet2Orbit =\
    \ planets.find(_.name == planet2).getOrElse(sun)\n        val orbits = List(planet1Orbit,\
    \ planet2Orbit)\n        val planet1OrbitDistance = orbits.map(_.distanceTo(planet1Orbit))\n\
    \        val planet2OrbitDistance = orbits.map(_.distanceTo(planet2Orbit))\n \
    \       val planet1OrbitDistanceSorted = planet1OrbitDistance.sortBy(_.toDouble)\n\
    \        val planet2OrbitDistanceSorted = planet2OrbitDistance.sortBy(_.toDouble)\n\
    \        val planet1OrbitDistanceSortedIndex = planet1OrbitDistanceSorted.zipWithIndex.filter(_._2\
    \ == 0).map(_._1)\n        val planet2OrbitDistanceSortedIndex = planet2OrbitDistanceSorted.zipWithIndex.filter(_._2\
    \ == 0).map(_._1)\n        val planet1OrbitDistanceSortedIndexReversed = planet1OrbitDistanceSortedIndex.reverse\n\
    \        val planet2OrbitDistanceSortedIndexReversed = planet2OrbitDistanceSortedIndex.reverse\n\
    \        val planet1OrbitDistanceSortedIndexReversedSorted = planet1OrbitDistanceSortedIndexReversed.sortBy(_.toDouble)\n\
    \        val planet2OrbitDistanceSortedIndexReversedSorted = planet2OrbitDistanceSortedIndexReversed.sortBy(_.toDouble)\n\
    \        val planet1OrbitDistanceSortedIndexReversedSortedIndex = planet1OrbitDistanceSortedIndexReversedSorted.zip\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4x954oqb.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m6378137\e\
    [0m, \e[31m0.01720209\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4x954oqb.scala:23:12 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m6378145\e[0m,\
    \ \e[31m0.00670546\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4x954oqb.scala:24:12 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m6378388\e[0m,\
    \ \e[31m0.01672\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4x954oqb.scala:25:12 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, \e[31m6378206\e[0m,\
    \ \e[31m0.0058066\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4x954oqb.scala:26:12 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m6378140\e\
    [0m, \e[31m0.003338\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4x954oqb.scala:27:12 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m            Planet(\e[31m\"Saturn\"\e[0m, \e[31m6378167\e\
    [0m, \e[31m0.0034\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m      "
  stdout: ''
  timestamp: 1659798218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n \
    \       val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(jupiter, saturn, uranu\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprjbe1tr9.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n \
    \       val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(jupiter, saturn, uranu\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprjbe1tr9.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , 6378137.0, 0.01720209),\n            Planet(\"Venus\", 6378145.0, 0.01720195),\n\
    \            Planet(\"Earth\", 6378388.0, 0.01720195),\n            Planet(\"\
    Mars\", 6378206.0, 0.01720195),\n            Planet(\"Jupiter\", 6378140.0, 0.01720195),\n\
    \            Planet(\"Saturn\", 6378165.0, 0.01720195),\n            Planet(\"\
    Uranus\", 6378135.0, 0.01720195),\n            Planet(\"Neptune\", 6378140.0,\
    \ 0.01720195)\n        )\n        val sun = Planet(\"Sun\", 6378160.0, 0.01720195)\n\
    \        val planet1 = planets.find(_.name == planet1).get\n        val planet2\
    \ = planets.find(_.name == planet2).get\n        val planet1Orbit = planet1.orbit(sun)\n\
    \        val planet2Orbit = planet2.orbit(sun)\n        val planet1Orbits = planet1Orbit.map(_.name)\n\
    \        val planet2Orbits = planet2Orbit.map(_.name)\n        val planet1OrbitsBetweenPlanets\
    \ = planet1Orbits.filter(planet1Orbits => planet1Orbits.contains(planet2))\n \
    \       val planet2OrbitsBetweenPlanets = planet2Orbits.filter(planet2Orbits =>\
    \ planet2Orbits.contains(planet1))\n        val planet1OrbitsBetweenPlanetsSorted\
    \ = planet1OrbitsBetweenPlanets.sorted\n        val planet2OrbitsBetweenPlanetsSorted\
    \ = planet2OrbitsBetweenPlanets.sorted\n        val planet1OrbitsBetweenPlanetsSortedWithSun\
    \ = planet1OrbitsBetweenPlanetsSorted.filter(planet1Orbits => planet1Orbits !=\
    \ sun)\n        val planet2OrbitsBetweenPlanetsSortedWithSun = planet2OrbitsBetweenPlanetsSorted.filter(planet2Orbits\
    \ => planet2Orbits != sun)\n        val planet1OrbitsBetweenPlanetsSortedWithSunSorted\
    \ = planet1OrbitsBetweenPlanetsSortedWithSun.sorted\n        val planet2OrbitsBetweenPlanetsSortedWithSunSorted\
    \ = planet\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmdyuvzp.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m6378137.0\e\
    [0m, \e[31m0.01720209\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmprmdyuvzp.scala:23:12 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m6378145.0\e\
    [0m, \e[31m0.01720195\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmprmdyuvzp.scala:24:12 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m6378388.0\e\
    [0m, \e[31m0.01720195\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmprmdyuvzp.scala:25:12 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, \e[31m6378206.0\e\
    [0m, \e[31m0.01720195\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmprmdyuvzp.scala:26:12 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m6378140.0\e\
    [0m, \e[31m0.01720195\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmprmdyuvzp.scala:27:12 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m            Planet(\e[31m\"Saturn\"\e[0m, \e[31m6378165.0\e\
    [0m, \e[31m0.01720195\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e["
  stdout: ''
  timestamp: 1659798217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n     \
    \       Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\
    \ Vector(0,0,0)),\n            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Mars\", Orbit(Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Jupiter\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n     \
    \       Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\
    \ Vector(0,0,0)),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n        )\n        val planet1Orbit\
    \ = planet1.split(\"\\\\W+\").toList\n        val planet2Orbit = planet2.split(\"\
    \\\\W+\").toList\n        val orbits = planets.map(_.orbit).toList\n        val\
    \ orbit1 = orbits.find(_.name == planet1Orbit(0))\n        val orbit2 = orbits.find(_.name\
    \ == planet2Orbit(0))\n        val orbit1Orbit = orbit1.orbit\n        val orbit2Orbit\
    \ = orbit2.orbit\n        val distance = Vector.dot(orbit1Orbit, orbit2Orbit)\n\
    \        val planet1Orbits = orbit1Orbit.map(_.name)\n        val planet2Orbits\
    \ = orbit2Orbit.map(_.name)\n        val planet1OrbitIndex = planet1Orbits.indexOf(planet1Orbit(0))\n\
    \        val planet2OrbitIndex = planet2Orbits.indexOf(planet2Orbit(0))\n    \
    \    val planet1OrbitIndex = planet1Orbits.indexOf(planet1Orbit(0))\n        val\
    \ planet2OrbitIndex = planet2Orbits.indexOf(planet2Orbit(0))\n        val planet1OrbitIndex\
    \ = planet1Orbits.indexOf(planet1Orbit(0))\n        val planet2Or\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm6r07dkw.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm6r07dkw.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanet1OrbitIndex\e[0m = planet1Orbits.indexOf(planet1Orbit(\e[31m0\e\
    [0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitIndex is already defined as \e[33mvalue\e[0m \e\
    [35mplanet1OrbitIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpm6r07dkw.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mplanet2OrbitIndex\e[0m =\
    \ planet2Orbits.indexOf(planet2Orbit(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mplanet2OrbitIndex is already defined as \e[33mvalue\e[0m \e[35mplanet2OrbitIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpm6r07dkw.scala:45:12 ---------------------------\e[0m\e[0m\n\e\
    [31m45 |\e[0m        \e[33mval\e[0m \e[36mplanet1OrbitIndex\e[0m = planet1Orbits.indexOf(planet1Orbit(\e\
    [31m0\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitIndex is already defined as \e[33mvalue\e[0m \e\
    [35mplanet1OrbitIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpm6r07dkw.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0"
  stdout: ''
  timestamp: 1659798219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n \
    \       val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(jupiter, saturn, uranu\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprjbe1tr9.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n \
    \       val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(jupiter, saturn, uranu\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprjbe1tr9.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val sun\
    \ = Vector(0.0, 0.0, 1.0)\n        val planet1 = planets.find(planet => planets.contains(planet))\n\
    \        val planet2 = planets.find(planet => planets.contains(planet))\n    \
    \    if (planet1 == null || planet2 == null) {\n            List()\n        }\
    \ else {\n            val orbit1 = planet1.orbit(sun)\n            val orbit2\
    \ = planet2.orbit(sun)\n            val distance1 = orbit1.dist(sun)\n       \
    \     val distance2 = orbit2.dist(sun)\n            val proximity = distance1.min(distance2)\n\
    \            val planetsBetween = planets.filter(planet => orbit1.dist(planet)\
    \ < proximity && orbit2.dist(planet) < proximity)\n            (planetsBetween.sortBy(planet\
    \ => planet.dist(sun)).map(planet => planet))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcz0oebkq.scala:28:33 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36morbit1\e[0m = planet1.orbit(sun)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue orbit is not a member of Option[String] - did you mean planet1.wait?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcz0oebkq.scala:29:33 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36morbit2\e[0m = planet2.orbit(sun)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue orbit is not a member of Option[String] - did you mean planet2.wait?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcz0oebkq.scala:34:52 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            (planetsBetween.sortBy(\e[36mplanet\e[0m\
    \ => planet.dist(sun)).map(\e[36mplanet\e[0m => planet))\n\e[31m\e[31m   |\e[0m\
    \                                             ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        value dist is not a member of String - did you mean planet.wait?\n\e\
    [31m\e[31m-- Error: /tmp/tmpcz0oebkq.scala:34:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            (planetsBetween.sortBy(\e[36mplanet\e[0m\
    \ => planet.dist(sun)).map(\e[36mplanet\e[0m => planet))\n\e[31m\e[31m   |\e[0m\
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mInt\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659798217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fpo4j_j.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Mercury,\n      \
    \      Venus,\n            Earth,\n            Mars,\n            Jupiter,\n \
    \           Saturn,\n            Uranus,\n            Neptune\n        )\n   \
    \     val planetsBetweenPlanets = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2)\n        val planetsBetweenPlanetsSortedByProximity\
    \ = planetsBetweenPlanets.sortWith(_.distanceTo(Sun) < _.distanceTo(Sun))\n  \
    \      (planetsBetweenPlanetsSortedByProximity)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpanyfwfke.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Mercury,\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Mercury\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpanyfwfke.scala:23:12 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            Venus,\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Venus\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpanyfwfke.scala:24:12 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            Earth,\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Earth\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpanyfwfke.scala:25:12 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            Mars,\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Mars\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpanyfwfke.scala:26:12 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Jupiter,\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Jupiter\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpanyfwfke.scala:27:12 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            Saturn,\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Saturn\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpanyfwfke.scala:28:12 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            Uranus,\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Uranus\n\e[31m   |\e[0m\n"
  stdout: ''
  timestamp: 1659798218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fpo4j_j.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(Vector(0.0, 0.0), 0.0)),\n            Planet(\"Venus\", Orbit(Vector(0.0,\
    \ -1.0), 0.0)),\n            Planet(\"Earth\", Orbit(Vector(0.0, 1.0), 0.0)),\n\
    \            Planet(\"Mars\", Orbit(Vector(1.0, 0.0), 0.0)),\n            Planet(\"\
    Jupiter\", Orbit(Vector(1.0, -1.0), 0.0)),\n            Planet(\"Saturn\", Orbit(Vector(1.0,\
    \ 1.0), 0.0)),\n            Planet(\"Uranus\", Orbit(Vector(-1.0, 0.0), 0.0)),\n\
    \            Planet(\"Neptune\", Orbit(Vector(-1.0, -1.0), 0.0))\n        )\n\
    \        val sun = Orbit(Vector(0.0, 1.0), 0.0)\n        val orbits = planets.map(_.orbit).toList\n\
    \        val planet1Orbit = orbits.find(_.name == planet1)\n        val planet2Orbit\
    \ = orbits.find(_.name == planet2)\n        val planet1OrbitOrbit = planet1Orbit.orbit.map(_.toList)\n\
    \        val planet2OrbitOrbit = planet2Orbit.orbit.map(_.toList)\n        val\
    \ planet1OrbitOrbitOrbit = planet1OrbitOrbit.map(_.toList)\n        val planet2OrbitOrbitOrbit\
    \ = planet2OrbitOrbit.map(_.toList)\n        val planet1OrbitOrbitOrbitOrbit =\
    \ planet1OrbitOrbitOrbit.map(_.toList)\n        val planet2OrbitOrbitOrbitOrbit\
    \ = planet2OrbitOrbitOrbit.map(_.toList)\n        val planet1OrbitOrbitOrbitOrbitOrbit\
    \ = planet1OrbitOrbitOrbitOrbit.map(_.toList)\n        val planet2OrbitOrbitOrbitOrbitOrbit\
    \ = planet2OrbitOrbitOrbitOrbit.map(_.toList)\n        val planet1OrbitOrbitOrbitOrbitOrbitOrbit\
    \ = planet1OrbitOrbitOrbitOrbitOrbit.map(_.toList)\n        val planet2OrbitOrbitOrbitOrbitOrbitOrbit\
    \ = planet2OrbitOrbitOrbitOrbitOrbit.map(_.toList)\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpgikxtcao.scala:45:11 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpgikxtcao.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(Vector(\e\
    [31m0.0\e[0m, \e[31m0.0\e[0m), \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgikxtcao.scala:22:30 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(Vector(\e\
    [31m0.0\e[0m, \e[31m0.0\e[0m), \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m      \
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \     Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgikxtcao.scala:23:12\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(Vector(\e[31m0.0\e[0m, -\e[31m1.0\e[0m), \e[31m0.0\e[0m)),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgikxtcao.scala:23:28\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(Vector(\e[31m0.0\e[0m, -\e[31m1.0\e[0m), \e[31m0.0\e[0m)),\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgikxtcao.scala:24:12 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Orbit(Vector(\e\
    ["
  stdout: ''
  timestamp: 1659798220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fpo4j_j.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n \
    \       val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(jupiter, saturn, uranu\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprjbe1tr9.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, neptune)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp92as_44v.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp92as_44v.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp92as_44v.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n     \
    \       Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\
    \ Vector(0,0,0)),\n            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Mars\", Orbit(Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Jupiter\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n     \
    \       Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\
    \ Vector(0,0,0)),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n        )\n        val sun =\
    \ Planet(\"Sun\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n\
    \        val orbit1 = planets.find(_.name == planet1).get.orbit\n        val orbit2\
    \ = planets.find(_.name == planet2).get.orbit\n        val orbits = orbit1 #::\
    \ orbit2\n        val sunOrbit = sun #:: orbits\n        val sunOrbits = sunOrbit.sortBy(_.distanceTo(sun))\n\
    \        sunOrbits.takeWhile(_.distanceTo(planet1) < planets.find(_.name == planet2).get.distanceTo(sun)).sortBy(_.distanceTo(planet1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphk_ugxww.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphk_ugxww.scala:22:30 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m                            \
    \  ^^^^^\e[0m\n\e[31m   |\e[0m                              Not found: Orbit\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphk_ugxww.scala:23:12\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m1\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e\
    [0m)), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphk_ugxww.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with"
  stdout: ''
  timestamp: 1659798219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\"\
    , new Orbit(\n                new Planet(\"Venus\", new Orbit(\n             \
    \       new Planet(\"Earth\", new Orbit(\n                        new Planet(\"\
    Mars\", new Orbit(\n                            new Planet(\"Jupiter\", new Orbit(\n\
    \                                new Planet(\"Saturn\", new Orbit(\n         \
    \                           new Planet(\"Uranus\", new Orbit(\n              \
    \                          new Planet(\"Neptune\", new Orbit(\n              \
    \                              new Planet(\"Mercury\", new Orbit(\n          \
    \                                      new Planet(\"Venus\", new Orbit(\n    \
    \                                                new Planet(\"Earth\", new Orbit(\n\
    \                                                        new Planet(\"Mars\",\
    \ new Orbit(\n                                                            new\
    \ Planet(\"Jupiter\", new Orbit(\n                                           \
    \                     new Planet(\"Saturn\", new Orbit(\n                    \
    \                                                new Planet(\"Uranus\", new Orbit(\n\
    \                                                                        new Planet(\"\
    Neptune\", new Orbit(\n                                                      \
    \                      new Planet(\"Mercury\", new Orbit(\n                  \
    \                                                              new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                     new Planet(\"Earth\", new Orbit(\n                     \
    \                                                                   new Planet(\"\
    Mars\", new Orbit(\n                                                         \
    \                                   new Planet(\"Jupiter\", new Orbit(\n     \
    \                                                                            \
    \               new Planet(\"Saturn\", new Orbit(\n                          \
    \                                                                          new\
    \ Planet(\"Uranus\", new Orbit(\n                                            \
    \                                                            new Planet(\"Neptune\"\
    , new Orbit(\n                                                               \
    \                                             new Planet(\"Mercury\", new Orbit(\n\
    \                                                                            \
    \                                    new Planet(\"Venus\", new Orbit(\n      \
    \                                                                            \
    \                                  new Planet(\"Earth\", new Orbit(\n        \
    \                                                                            \
    \                                    new Planet(\"Mars\", new Orbit(\n       \
    \                                                                            \
    \                                         new Planet(\"Jupiter\", new Orbit(\n\
    \                                                                            \
    \                                                    new Planet(\"Saturn\", new\
    \ Orbit(\n                                                                   \
    \                                                                 new Planet(\"\
    Uranus\", new Orbit(\n                                                       \
    \                                                                            \
    \     new Planet(\"Neptune\", new Orbit(\n                                   \
    \                                                                            \
    \                             new Planet(\"Mercury\", new Orbit(\n           \
    \                                                                            \
    \                                                         new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \         new Planet(\"Earth\", new Orbit(\n                                 \
    \                                                                            \
    \                                           new Planet(\"Mars\", new Orbit(\n\
    \                                                                            \
    \                                                                            \
    \    \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa9m9vyup.scala:57:181 --------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m                                                    \
    \                                                                            \
    \                        \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m,\
    \ \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\nexception occurred while parser /tmp/tmpa9m9vyup.scala\n\
    exception occurred while compiling /tmp/tmpa9m9vyup.scala\nException in thread\
    \ \"main\" java.lang.AssertionError: assertion failed: position error, parent\
    \ span does not contain child span\nparent      = \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m) # -1,\nparent span = <5097..5107>,\nchild       = \e[31mnull\e\
    [0m # -1,\nchild span  = [5107..5269..5269]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m,\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\nerror while checking \e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e\
    [32m\"Venus\"\e[0m, \n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\n\
    )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n\
    \      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n        \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n\
    \      )\n    )\n  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e\
    [0m, \n        \e[33mnew \e[0m\e[35mOrbit\e[0m(\n          \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, "
  timestamp: 1659798186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => Orbit(planet))\n        val sun = Orbit(\"Sun\"\
    )\n        val sunOrbit = Orbit(\"Sun\")\n        val sunOrbits = List(sunOrbit)\n\
    \        val orbitsBetweenSunAndPlanet1 = orbits.filter(orbit => orbit.planet\
    \ == planet1)\n        val orbitsBetweenSunAndPlanet2 = orbits.filter(orbit =>\
    \ orbit.planet == planet2)\n        val orbitsBetweenPlanetAndSun = orbits.filter(orbit\
    \ => orbit.planet == sunOrbit.planet)\n        val orbitsBetweenPlanetAndSunOrbits\
    \ = orbitsBetweenPlanetAndSun.filter(orbit => orbit.planet == sunOrbit.planet)\n\
    \        val orbitsBetweenPlanetAndSunOrbitsBetweenPlanetAndSun = orbitsBetweenPlanetAndSunOrbits.filter(orbit\
    \ => orbit.planet == sunOrbit.planet)\n        val orbitsBetweenPlanetAndSunOrbitsBetweenPlanetAndSunOrbits\
    \ = orbitsBetweenPlanetAndSunOrbitsBetweenPlanetAndSun.filter(orbit => orbit.planet\
    \ == sunOrbit.planet)\n        val orbitsBetweenPlanetAndSunOrbitsBetweenPlanetAndSunOrbitsBetweenPlanetAndSun\
    \ = orbitsBetweenPlanetAndSunOrbitsBetweenPlanetAndSunOrbits.filter(orbit => orbit.planet\
    \ == sunOrbit.planet)\n        val orbitsBetweenPlanetAndSunOrbitsBetweenPlanetAndSunOrbitsBetweenPlanetAndSunOrbits\
    \ = orbitsBetweenPlanetAndSunOrbitsBetweenPlanetAndSunOrbitsBetweenPlanetAndSun.filter(orbit\
    \ => orbit.planet == sunOrbit.planet)\n        val orbitsBetweenPlanetAndSunOrbitsBetweenPlanetAndSunOrbitsBetweenPlanetAndSunOrbitsBetweenPlanetAndSun\
    \ = orbitsBetweenPlanetAndSunOrbitsBetweenPlanetAndSunOrbitsBetweenPlanetAndSunOrbits.filter(orbit\
    \ => orbit.planet == sunOrbit.planet)\n        val orbitsBetweenPlanetAndSunOrbitsBetweenPlanetAndSunOrbitsBetweenPlanetAndSunOrbitsBetweenPlanetAndSunOrbits\
    \ = orbitsBetweenPlanetAndSunOr\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpssxshb2v.scala:22:43 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36morbits\e[0m = planets.map(\e\
    [36mplanet\e[0m => Orbit(planet))\n\e[31m\e[31m   |\e[0m                     \
    \                      ^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpssxshb2v.scala:23:18 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36msun\e[0m = Orbit(\e[31m\"Sun\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpssxshb2v.scala:24:23\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36msunOrbit\e[0m = Orbit(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: Orbit\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpssxshb2v.scala:26:70\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36morbitsBetweenSunAndPlanet1\e[0m = orbits.filter(\e[36morbit\e[0m => orbit.planet\
    \ == planet1)\n\e[31m\e[31m   |\e[0m                                         \
    \                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \              value planet is not a member of Nothing\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpssxshb2v.scala:27:70 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36morbitsBetweenSunAndPlanet2\e\
    [0m = orbits.filter(\e[36morbit\e[0m => orbit.planet == planet2)\n\e[31m\e[31m\
    \   |\e[0m                                                                ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value planet is not a member\
    \ of Nothing\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpssxshb2v.scala:28:69\
    \ --------"
  stdout: ''
  timestamp: 1659798219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, neptune)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp92as_44v.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp92as_44v.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp92as_44v.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenMercuryAndVenus = List(venus)\n        val planetsBetweenMercuryAndEarth\
    \ = List(earth)\n        val planetsBetweenMercuryAndMars = List(mars)\n     \
    \   val planetsBetweenMercuryAndJupiter = List(jupiter)\n        val planetsBetweenMercuryAndSaturn\
    \ = List(saturn)\n        val planetsBetweenMercuryAndUranus = List(uranus)\n\
    \        val planetsBetweenMercuryAndNeptune = List(uranus)\n        val planetsBetweenVenusAndEarth\
    \ = List(earth)\n        val planetsBetweenVenusAndMars = List(mars)\n       \
    \ val planetsBetweenVenusAndJupiter = List(jupiter)\n        val planetsBetweenVenusAndSaturn\
    \ = List(saturn)\n        val planetsBetweenVenusAndUranus = List(uranus)\n  \
    \      val planetsBetweenVenusAndNeptune = List(uranu\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd1juewi6.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd1juewi6.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd1juewi6.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpd1juewi6.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpd1juewi6.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpd1juewi6.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpd"
  stdout: ''
  timestamp: 1659798218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth, venus)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, earth, mars, venus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, earth, mars, jupiter, venus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus, earth, mars, jupiter, saturn\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwmkr0vyp.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpw"
  stdout: ''
  timestamp: 1659798203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planet1\
    \ = planets.find(planet => planet == planet1)\n        val planet2 = planets.find(planet\
    \ => planet == planet2)\n        if (planet1 == null || planet2 == null) return\
    \ Nil\n        val orbit1 = planet1.orbit(planet2)\n        val orbit2 = planet2.orbit(planet1)\n\
    \        val orbits = orbit1 :: orbit2 :: Nil\n        val sun = planets.find(planet\
    \ => planet == \"Sun\")\n        val sunOrbit = sun.orbit(planet1)\n        val\
    \ sunOrbits = sunOrbit :: Nil\n        val sunOrbits = sunOrbits ++ orbits\n \
    \       val sunOrbits = sunOrbits.sortBy(sunOrbit => sunOrbit.distance(planet1))\n\
    \        val sunOrbits = sunOrbits.sortBy(sunOrbit => sunOrbit.distance(planet2))\n\
    \        val sunOrbits = sunOrbits.sortBy(sunOrbit => sunOrbit.distance(planet1))\n\
    \        val sunOrbits = sunOrbits.sortBy(sunOrbit => sunOrbit.distance(planet2))\n\
    \        val sunOrbits = sunOrbits.sortBy(sunOrbit => sunOrbit.distance(planet1))\n\
    \        val sunOrbits = sunOrbits.sortBy(sunOrbit => sunOrbit.distance(planet2))\n\
    \        val sunOrbits = sunOrbits.sortBy(sunOrbit => sunOrbit.distance(planet1))\n\
    \        val sunOrbits = sunOrbits.sortBy(sunOrbit => sunOrbit.distance(planet2))\n\
    \        val sunOrbits = sunOrbits.sortBy(sunOrbit => sunOrbit.distance(planet1))\n\
    \        val sunOrbits = sunOrbits.sortBy(sunOrbit => sunOrbit.distance(planet2))\n\
    \        val sunOrbits = sunOrbits.sortBy(sunOrbit => sunOrbit.distance(planet1))\n\
    \        val sunOrbits = sunOrbits.sortBy(sunOrbit => sunOrbit.distance(planet2))\n\
    \        val sunOrbits = sunOrbits.sortBy(sunOrbit => sunOrbit.distance(planet1))\n\
    \        val sunOrbits = sun\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"\
    Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcio_oddt.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36msunOrbits\e[0m = sunOrbits\
    \ ++ orbits\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbits is already defined as \e[33mvalue\e[0m \e[35msunOrbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcio_oddt.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36msunOrbits\e[0m = sunOrbits.sortBy(\e\
    [36msunOrbit\e[0m => sunOrbit.distance(planet1))\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbits is already defined as \e[33mvalue\e[0m \e[35msunOrbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcio_oddt.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36msunOrbits\e[0m = sunOrbits.sortBy(\e\
    [36msunOrbit\e[0m => sunOrbit.distance(planet2))\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbits is already defined as \e[33mvalue\e[0m \e[35msunOrbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcio_oddt.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36msunOrbits\e[0m = sunOrbits.sortBy(\e\
    [36msunOrbit\e[0m => sunOrbit.distance(planet1))\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbits is already defined as \e[33mvalue\e[0m \e[35msunOrbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcio_oddt."
  stdout: ''
  timestamp: 1659798221
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth, mars, jupiter, saturn, uranus)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , 6378137.0, 0.01720209),\n            Planet(\"Venus\", 6378145.0, 0.01720195),\n\
    \            Planet(\"Earth\", 6378388.0, 0.01720195),\n            Planet(\"\
    Mars\", 6378206.0, 0.01720195),\n            Planet(\"Jupiter\", 6378140.0, 0.01720195),\n\
    \            Planet(\"Saturn\", 6378165.0, 0.01720195),\n            Planet(\"\
    Uranus\", 6378135.0, 0.01720195),\n            Planet(\"Neptune\", 6378140.0,\
    \ 0.01720195)\n        )\n        val sun = Planet(\"Sun\", 6378160.0, 0.01720195)\n\
    \        val orbits = planets.map(_.orbit(sun))\n        val proximity = orbits.map(_.map(_.distanceTo(sun)).sum)\n\
    \        proximity.sortBy(_._2).reverse.takeWhile(_._2 > 0).map(_._1).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprbmol1_8.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m6378137.0\e\
    [0m, \e[31m0.01720209\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmprbmol1_8.scala:23:12 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m6378145.0\e\
    [0m, \e[31m0.01720195\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmprbmol1_8.scala:24:12 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m6378388.0\e\
    [0m, \e[31m0.01720195\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmprbmol1_8.scala:25:12 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, \e[31m6378206.0\e\
    [0m, \e[31m0.01720195\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmprbmol1_8.scala:26:12 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m6378140.0\e\
    [0m, \e[31m0.01720195\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmprbmol1_8.scala:27:12 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m            Planet(\e[31m\"Saturn\"\e[0m, \e[31m6378165.0\e\
    [0m, \e[31m0.01720195\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e["
  stdout: ''
  timestamp: 1659798222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planetsBetween\
    \ = planets.filter(planet => planets.contains(planet) && planet != planet1 &&\
    \ planet != planet2)\n        val planetsBetweenWithSun = planetsBetween.filter(planet\
    \ => planet != planet1 && planet != planet2)\n        val planetsBetweenWithSunWithSun\
    \ = planetsBetweenWithSun.filter(planet => planet != planet1 && planet != planet2\
    \ && planet != planet1)\n        val planetsBetweenWithSunWithSunWithSun = planetsBetweenWithSunWithSun.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planet1 && planet !=\
    \ planet2)\n        val planetsBetweenWithSunWithSunWithSunWithSun = planetsBetweenWithSunWithSunWithSun.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planet1 && planet !=\
    \ planet2 && planet != planet1)\n        val planetsBetweenWithSunWithSunWithSunWithSunWithSun\
    \ = planetsBetweenWithSunWithSunWithSunWithSun.filter(planet => planet != planet1\
    \ && planet != planet2 && planet != planet1 && planet != planet2 && planet !=\
    \ planet1 && planet != planet2)\n        val planetsBetweenWithSunWithSunWithSunWithSunWithSun\
    \ = planetsBetweenWithSunWithSunWithSunWithSunWithSun.filter(planet => planet\
    \ != planet1 && planet != planet2 && planet != planet1 && planet != planet2 &&\
    \ planet != planet1 && planet != planet2 && planet != planet1)\n        val planetsBetweenWithSunWithSunWithSunWithSunWithSunWithSun\
    \ = planetsBetweenWithSunWithSunWithSunWithSunWithSunWithSun.filter(planet =>\
    \ planet != planet1 && planet != planet2 && planet != planet1 && planet != planet2\
    \ && planet != planet1 && planet != planet2 && planet != planet1 && planet !=\
    \ planet2)\n        val planetsBetweenWithSunWithSunWithSunWithSunWithSunWithSunWithSun\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeyq8jcrv.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeyq8jcrv.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenWithSunWithSunWithSunWithSunWithSun\e[0m = planetsBetweenWithSunWithSunWithSunWithSunWithSun.filter(\e\
    [36mplanet\e[0m => planet != planet1 && planet != planet2 && planet != planet1\
    \ && planet != planet2 && planet != planet1 && planet != planet2 && planet !=\
    \ planet1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenWithSunWithSunWithSunWithSunWithSun is already\
    \ defined as \e[33mvalue\e[0m \e[35mplanetsBetweenWithSunWithSunWithSunWithSunWithSun\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpeyq8jcrv.scala:29:71 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenWithSunWithSunWithSunWithSunWithSunWithSun\e\
    [0m = planetsBetweenWithSunWithSunWithSunWithSunWithSunWithSun.filter(\e[36mplanet\e\
    [0m => planet != planet1 && planet != planet2 && planet != planet1 && planet !=\
    \ planet2 && planet != planet1 && planet != planet2 && planet != planet1 && planet\
    \ != planet2)\n\e[31m\e[31m   |\e[0m                                         \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mplanetsBetweenWithSunWithSunWithSunWithSunWithSunWithSun\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeyq8jcrv.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e"
  stdout: ''
  timestamp: 1659798218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fpo4j_j.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            new Orbit(planet1,\
    \ new Vector(0.0, 0.0), new Vector(0.0, 1.0)),\n            new Orbit(planet2,\
    \ new Vector(0.0, -1.0), new Vector(0.0, 1.0)),\n            new Orbit(planet1,\
    \ new Vector(0.0, -1.0), new Vector(0.0, -1.0)),\n            new Orbit(planet2,\
    \ new Vector(0.0, 1.0), new Vector(0.0, -1.0)),\n            new Orbit(planet1,\
    \ new Vector(0.0, 1.0), new Vector(0.0, -1.0)),\n            new Orbit(planet2,\
    \ new Vector(1.0, 0.0), new Vector(0.0, -1.0)),\n            new Orbit(planet1,\
    \ new Vector(1.0, 0.0), new Vector(0.0, 1.0)),\n            new Orbit(planet2,\
    \ new Vector(1.0, -1.0), new Vector(0.0, -1.0)),\n            new Orbit(planet1,\
    \ new Vector(1.0, -1.0), new Vector(0.0, 1.0))\n        )\n        val sun = new\
    \ Orbit(\"Sun\", new Vector(0.0, 0.0), new Vector(0.0, 1.0))\n        val sunOrbit\
    \ = planets.find(_.name == \"Sun\").map(_.orbit)\n        val sunOrbits = sunOrbit.map(_.orbit)\n\
    \        val sunOrbitDist = sunOrbits.zip(sunOrbits).map(x => x._1 - x._2).sum\n\
    \        val planetDist = planets.map(_.orbit).map(x => x._1 - x._2).sum\n   \
    \     val planetDists = planets.map(_.orbit).map(x => x._1 - x._2).sortBy(x =>\
    \ x._1).reverse\n        val planetDists2 = planets.map(_.orbit).map(x => x._1\
    \ - x._2).sortBy(x => x._1).reverse\n        val planetDists3 = planets.map(_.orbit).map(x\
    \ => x._1 - x._2).sortBy(x => x._1).reverse\n        val planetDists4 = planets.map(_.orbit).map(x\
    \ => x._1 - x._2).sortBy(x => x._1).reverse\n        val planetDists5 = planets.map(_.orbit).map(x\
    \ => x._1 - x._2).sortBy(x => x._1).reverse\n        val planetDists6 = planets.map(_.orbit).map(x\
    \ => x._1 - x._2).sortBy(x => x._1).reverse\n        val planetDists7 = planets.map(_.orbit).map(x\
    \ => \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp49iu59_k.scala:43:56 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mplanetDists7\e[0m = planets.map(_.orbit).map(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp49iu59_k.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mnew\e[0m \e[35mOrbit\e[0m(planet1,\
    \ \e[33mnew\e[0m \e[35mVector\e[0m(\e[31m0.0\e[0m, \e[31m0.0\e[0m), \e[33mnew\e\
    [0m \e[35mVector\e[0m(\e[31m0.0\e[0m, \e[31m1.0\e[0m)),\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: type Orbit\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp49iu59_k.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mOrbit\e[0m(planet2, \e[33mnew\e[0m \e[35mVector\e[0m(\e[31m0.0\e[0m, -\e\
    [31m1.0\e[0m), \e[33mnew\e[0m \e[35mVector\e[0m(\e[31m0.0\e[0m, \e[31m1.0\e[0m)),\n\
    \e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Not found: type Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp49iu59_k.scala:24:16 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m            \e[33mnew\e[0m \e[35mOrbit\e[0m(planet1, \e[33mnew\e[0m \e[35mVector\e\
    [0m(\e[31m0.0\e[0m, -\e[31m1.0\e[0m), \e[33mnew\e[0m \e[35mVector\e[0m(\e[31m0.0\e\
    [0m, -\e[31m1.0\e[0m)),\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: type Orbit\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp49iu59_k.scala:25:16 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mnew\e[0m \e[35mOrbit\e[0m(planet2,\
    \ \e[33mnew\e[0m \e[35mVector\e[0m(\e[31m0.0\e[0m"
  stdout: ''
  timestamp: 1659798224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth, venus)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, earth, mars, venus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, earth, mars, jupiter, venus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus, earth, mars, jupiter, saturn\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwmkr0vyp.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpw"
  stdout: ''
  timestamp: 1659798203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , 0, 0),\n            Planet(\"Venus\", 0, 0),\n            Planet(\"Earth\",\
    \ 0, 0),\n            Planet(\"Mars\", 0, 0),\n            Planet(\"Jupiter\"\
    , 0, 0),\n            Planet(\"Saturn\", 0, 0),\n            Planet(\"Uranus\"\
    , 0, 0),\n            Planet(\"Neptune\", 0, 0)\n        )\n        val sun =\
    \ Planet(\"Sun\", 0, 0)\n        val orbits = planets.map(p => (p.name, p.orbit))\n\
    \        val orbits1 = orbits.filter(_._1 == planet1).map(_._2)\n        val orbits2\
    \ = orbits.filter(_._1 == planet2).map(_._2)\n        val orbits12 = orbits1 ++\
    \ orbits2\n        val distances = orbits12.map(p => p.distanceTo(sun))\n    \
    \    val sortedDistances = distances.sortBy(p => p)\n        val result = sortedDistances.takeWhile(p\
    \ => p < sun).takeWhile(p => p < orbits12.length).map(p => orbits12(p))\n    \
    \    if (result.isEmpty) {\n            List()\n        } else {\n           \
    \ result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkmm3851o.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkmm3851o.scala:23:12 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkmm3851o.scala:24:12\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpkmm3851o.scala:25:12 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, \e[31m0\e[0m,\
    \ \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkmm3851o.scala:26:12 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkmm3851o.scala:27:12\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            Planet(\e[31m\"\
    Saturn\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available"
  stdout: ''
  timestamp: 1659798220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => (planet, planets.map(planet).sum))\n        val\
    \ sun = orbits.map(orbit => (orbit._1, orbit._2)).minBy(_._1)._2\n        val\
    \ orbitsBetweenSun = orbits.filter(orbit => orbit._2 > sun)\n        val planetsBetweenSun\
    \ = orbitsBetweenSun.map(orbit => orbit._1).filter(planet => planet != planet1)\n\
    \        val planetsBetweenSunAndPlanet1 = orbitsBetweenSun.filter(orbit => orbit._1\
    \ == planet1)\n        val planetsBetweenSunAndPlanet2 = orbitsBetweenSun.filter(orbit\
    \ => orbit._1 == planet2)\n        val planetsBetweenSunAndPlanet = planetsBetweenSunAndPlanet1\
    \ ++ planetsBetweenSunAndPlanet2\n        planetsBetweenSunAndPlanet.sortBy(planet\
    \ => planets.map(planet).sum - planets.map(planet).count(planet))\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptheott3t.scala:22:64\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36morbits\e\
    [0m = planets.map(\e[36mplanet\e[0m => (planet, planets.map(planet).sum))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \   Found:    (planet : String)\n\e[31m   |\e[0m                             \
    \                Required: String => Any\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmptheott3t.scala:22:75 -----------------------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36morbits\e[0m = planets.map(\e\
    [36mplanet\e[0m => (planet, planets.map(planet).sum))\n\e[31m\e[31m   |\e[0m \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mIntIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mDoubleIsFractional\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptheott3t.scala:24:63 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36morbitsBetweenSun\e[0m =\
    \ orbits.filter(\e[36morbit\e[0m => orbit._2 > sun)\n\e[31m\e[31m   |\e[0m   \
    \                                                   ^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue > is not a member of Nothing, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\
    \e[31m   |\e[0m  impor"
  stdout: ''
  timestamp: 1659798223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fpo4j_j.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => Orbit(planet))\n        val sun = Orbit(\"Sun\"\
    )\n        val sunOrbit = Orbit(\"Sun\")\n        val sunOrbits = List(sunOrbit)\n\
    \        val orbitsBetweenSunAndPlanet = orbits.filter(orbit => orbit.planet1.equals(sunOrbit.planet1)\
    \ && orbit.planet2.equals(sunOrbit.planet2))\n        val orbitsBetweenSunAndPlanetWithSun\
    \ = orbitsBetweenSunAndPlanet.filter(orbit => orbit.planet1.equals(sunOrbit.planet1)\
    \ && orbit.planet2.equals(sun))\n        val orbitsBetweenSunAndPlanetWithSunAndPlanet\
    \ = orbitsBetweenSunAndPlanetWithSun.filter(orbit => orbit.planet1.equals(sun)\
    \ && orbit.planet2.equals(sunOrbit.planet2))\n        val orbitsBetweenSunAndPlanetWithSunAndPlanetWithSun\
    \ = orbitsBetweenSunAndPlanetWithSunAndPlanet.filter(orbit => orbit.planet1.equals(sun)\
    \ && orbit.planet2.equals(sun))\n        val orbitsBetweenSunAndPlanetWithSunAndPlanetWithSunAndPlanet\
    \ = orbitsBetweenSunAndPlanetWithSunAndPlanetWithSun.filter(orbit => orbit.planet1.equals(sun)\
    \ && orbit.planet2.equals(sun))\n        val orbitsBetweenSunAndPlanetWithSunAndPlanetWithSunAndPlanetWithSun\
    \ = orbitsBetweenSunAndPlanetWithSunAndPlanetWithSunAndPlanet.filter(orbit =>\
    \ orbit.planet1.equals(sun) && orbit.planet2.equals(sun))\n        val orbitsBetweenSunAndPlanetWithSunAndPlanetWithSunAndPlanetWithSunAndPlanet\
    \ = orbitsBetweenSunAndPlanetWithSunAndPlanetWithSunAndPlanetWithSun.filter(orbit\
    \ => orbit.planet1.equals(sun) && orbit.planet2.equals(sun))\n        val orbitsBetweenSunAndPlanetWithSunAndPlanetWithSunAndPlanetWithSunAndPlanetWithSun\
    \ = orbitsBetweenSunAndPlanetWithSunAndPlanetWithSunAndPlanetWithSunAndPlanet.filter(orbit\
    \ => orbit.planet1.equals(sun) && orbit.planet2.equals(sun))\n        val orbits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp12vgvgqn.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp12vgvgqn.scala:22:43\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36morbits\e[0m = planets.map(\e[36mplanet\e[0m => Orbit(planet))\n\e[31m\e[31m\
    \   |\e[0m                                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                           Not found: Orbit\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp12vgvgqn.scala:23:18 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Orbit(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp12vgvgqn.scala:24:23 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36msunOrbit\e[0m = Orbit(\e[31m\"Sun\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \               Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp12vgvgqn.scala:26:69 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        \e[33mval\e[0m \e[36morbitsBetweenSunAndPlanet\e[0m = orbits.filter(\e\
    [36morbit\e[0m => orbit.planet1.equals(sunOrbit.planet1) && orbit.planet2.equals(sunOrbit.planet2))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value\
    \ planet1 is not a member of Nothing\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp12vgvgqn.scala:27:95\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36morbitsBetweenSunAndPlanetWithSun\e[0m = orbitsBetweenSunAndPlanet.filter(\e\
    [36morbit\e[0m => orbit.planet"
  stdout: ''
  timestamp: 1659798222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, neptune)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4h_vxvqf.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4h_vxvqf.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4h_vxvqf.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4h_vxvqf.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4h_vxvqf.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4h_vxvqf.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4"
  stdout: ''
  timestamp: 1659798222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => {\n            val planetOrbit = planets.map(planet2\
    \ => {\n                val planetOrbit = planets.map(planet1 => {\n         \
    \           val planetOrbit = planets.map(planet1 => {\n                     \
    \   val planetOrbit = planets.map(planet1 => {\n                            val\
    \ planetOrbit = planets.map(planet1 => {\n                                val\
    \ planetOrbit = planets.map(planet1 => {\n                                   \
    \ val planetOrbit = planets.map(planet1 => {\n                               \
    \         val planetOrbit = planets.map(planet1 => {\n                       \
    \                     val planetOrbit = planets.map(planet1 => {\n           \
    \                                     val planetOrbit = planets.map(planet1 =>\
    \ {\n                                                    val planetOrbit = planets.map(planet1\
    \ => {\n                                                        val planetOrbit\
    \ = planets.map(planet1 => {\n                                               \
    \             val planetOrbit = planets.map(planet1 => {\n                   \
    \                                             val planetOrbit = planets.map(planet1\
    \ => {\n                                                                    val\
    \ planetOrbit = planets.map(planet1 => {\n                                   \
    \                                     val planetOrbit = planets.map(planet1 =>\
    \ {\n                                                                        \
    \    val planetOrbit = planets.map(planet1 => {\n                            \
    \                                                    val planetOrbit = planets.map(planet1\
    \ => {\n                                                                     \
    \               val planetOrbit = planets.map(planet1 => {\n                 \
    \                                                                       val planetOrbit\
    \ = planets.map(planet1 => {\n                                               \
    \                                             val planetOrbit = planets.map(planet1\
    \ => {\n                                                                     \
    \                           val planetOrbit = planets.map(planet1 => {\n     \
    \                                                                            \
    \                   val planetOrbit = planets.map(planet1 => {\n             \
    \                                                                            \
    \               val planetOrbit = planets.map(planet1 => {\n                 \
    \                                                                            \
    \               val planetOrbit = planets.map(planet1 => {\n                 \
    \                                                                            \
    \                   val planetOrbit = planets.map(planet1 => {\n             \
    \                                                                            \
    \                           val planetOrbit = planets.map(planet1 => {\n     \
    \                                                                            \
    \                                       val planetOrbit = planets.map(planet1\
    \ => {\n                                                                     \
    \                                                       val planetOrbit = planets.map(planet1\
    \ => {\n                                                                     \
    \                                                                           val\
    \ planetOrbit\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpknn7x31o.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpknn7x31o.scala:54:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m54 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpknn7x31o.scala:65:0 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpknn7x31o.scala:64:1\
    \ ---------------------\e[0m\e[0m\n\e[31m64 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n     \
    \       Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,1,0), Vector(0,-1,0)),\
    \ Vector(0,0,0)),\n            Planet(\"Earth\", Orbit(Vector(1,0,0), Vector(0,1,0),\
    \ Vector(0,-1,0)), Vector(0,0,0)),\n            Planet(\"Mars\", Orbit(Vector(0,0,1),\
    \ Vector(0,1,0), Vector(0,-1,0)), Vector(0,0,0)),\n            Planet(\"Jupiter\"\
    , Orbit(Vector(0,0,0), Vector(1,0,0), Vector(-1,0,0)), Vector(0,0,0)),\n     \
    \       Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,1,0), Vector(0,-1,0)),\
    \ Vector(0,0,0)),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,1,0),\
    \ Vector(0,-1,0)), Vector(0,0,0)),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0),\
    \ Vector(0,1,0), Vector(0,-1,0)), Vector(0,0,0))\n        )\n        val sun =\
    \ Planet(\"Sun\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n\
    \        val orbit1 = planets.find(_.name == planet1).get.orbit\n        val orbit2\
    \ = planets.find(_.name == planet2).get.orbit\n        val orbits = orbit1.orbit.intersect(orbit2).sortBy(_.distanceTo(sun))\n\
    \        val result = orbits.map(_.name).filterNot(_.equals(planet1) || _.equals(planet2))\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8hykjrub.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp8hykjrub.scala:22:30 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m                            \
    \  ^^^^^\e[0m\n\e[31m   |\e[0m                              Not found: Orbit\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8hykjrub.scala:23:12\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e\
    [31m0\e[0m,\e[31m1\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,-\e[31m1\e[0m,\e[31m0\e\
    [0m)), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8hykjrub.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m1\e[0m,\e[31m0\e\
    [0m), Vector(\e[31m0\e[0m,-\e[31m1\e[0m,\e[31m0\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with"
  stdout: ''
  timestamp: 1659798226
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth, mars, jupiter, saturn, uranus)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, neptune)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4h_vxvqf.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4h_vxvqf.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4h_vxvqf.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4h_vxvqf.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4h_vxvqf.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4h_vxvqf.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4"
  stdout: ''
  timestamp: 1659798222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => (planet, planets.map(planet).map(planet.orbit)))\n\
    \        val sun = planets.map(planet => (planet, planet.orbit.sun))\n       \
    \ val sunOrbits = sun ++ orbits\n        val sunOrbitsSorted = sunOrbits.sortBy(sunOrbit\
    \ => sunOrbit._2._1.distance(sunOrbit._2._2))\n        val sunOrbitsSortedWithSun\
    \ = sunOrbitsSorted.filter(sunOrbit => sunOrbit._2._2.contains(sun))\n       \
    \ val sunOrbitsSortedWithSunAndPlanet = sunOrbitsSortedWithSun.filter(sunOrbit\
    \ => sunOrbit._2._2.contains(planet1))\n        val sunOrbitsSortedWithSunAndPlanetAndPlanet2\
    \ = sunOrbitsSortedWithSunAndPlanet.filter(sunOrbit => sunOrbit._2._2.contains(planet2))\n\
    \        val sunOrbitsSortedWithSunAndPlanetAndPlanet2AndPlanet3 = sunOrbitsSortedWithSunAndPlanetAndPlanet2.filter(sunOrbit\
    \ => sunOrbit._2._2.contains(planet1))\n        val sunOrbitsSortedWithSunAndPlanetAndPlanet2AndPlanet3AndPlanet4\
    \ = sunOrbitsSortedWithSunAndPlanetAndPlanet2AndPlanet3.filter(sunOrbit => sunOrbit._2._2.contains(planet2))\n\
    \        val sunOrbitsSortedWithSunAndPlanetAndPlanet2AndPlanet3AndPlanet4AndPlanet5\
    \ = sunOrbitsSortedWithSunAndPlanetAndPlanet2AndPlanet3AndPlanet4.filter(sunOrbit\
    \ => sunOrbit._2._2.contains(planet1))\n        val sunOrbitsSortedWithSunAndPlanetAndPlanet2AndPlanet3AndPlanet4AndPlanet5AndPlanet6\
    \ = sunOrbitsSortedWithSunAndPlanetAndPlanet2AndPlanet3AndPlanet4AndPlanet5.filter(sunOrbit\
    \ => sunOrbit._2._2.contains(planet2))\n        val sunOrbitsSortedWithSunAndPlanetAndPlanet2AndPlanet3AndPlanet4AndPlanet5AndPlanet6AndPlanet7\
    \ = sunOrbitsSortedWithSunAndPlanetAndPlanet2AndPlanet3AndPlanet\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0owzlx5f.scala:22:64\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36morbits\e\
    [0m = planets.map(\e[36mplanet\e[0m => (planet, planets.map(planet).map(planet.orbit)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \     Found:    (planet : String)\n\e[31m   |\e[0m                           \
    \                  Required: String => Any\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp0owzlx5f.scala:22:83 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36morbits\e[0m = planets.map(\e\
    [36mplanet\e[0m => (planet, planets.map(planet).map(planet.orbit)))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value orbit is not a member\
    \ of String - did you mean planet.split?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0owzlx5f.scala:23:56 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36msun\e[0m = planets.map(\e[36mplanet\e[0m => (planet,\
    \ planet.orbit.sun))\n\e[31m\e[31m   |\e[0m                                  \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value orbit is not a member\
    \ of String - did you mean planet.split?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0owzlx5f.scala:25:71 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36msunOrbitsSorted\e[0m = sunOrbits.sortBy(\e[36msunOrbit\e\
    [0m => sunOrbit._2._1.distance(sunOrbit._2._2))\n\e[31m\e[31m   |\e[0m       \
    \                                                    ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value _1 is not a member of List[Nothing]\n\
    \e[31m\e[31m-- Error: /tmp/tmp0owzlx5f.scala:25:99 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msunOrbitsSorted\e[0m = sunOrbits.sortBy(\e\
    [36msunOrbit\e[0m => sunOrbit._2._1.distance(sunOrbit._2._2))\n\e[3"
  stdout: ''
  timestamp: 1659798225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth, mars, jupiter, saturn, uranus)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , 0, 0),\n            Planet(\"Venus\", 0, 0),\n            Planet(\"Earth\",\
    \ 0, 0),\n            Planet(\"Mars\", 0, 0),\n            Planet(\"Jupiter\"\
    , 0, 0),\n            Planet(\"Saturn\", 0, 0),\n            Planet(\"Uranus\"\
    , 0, 0),\n            Planet(\"Neptune\", 0, 0)\n        )\n        val sun =\
    \ Planet(\"Sun\", 0, 0)\n        val orbits = planets.map(_.orbit(sun))\n    \
    \    val planet1Orbits = orbits.filter(_.name == planet1)\n        val planet2Orbits\
    \ = orbits.filter(_.name == planet2)\n        val planet1OrbitsAndPlanet2Orbits\
    \ = planet1Orbits.zip(planet2Orbits)\n        val planet1OrbitsAndPlanet2OrbitsAndSun\
    \ = planet1OrbitsAndPlanet2Orbits.filter(_._1 == sun)\n        val planet1OrbitsAndPlanet2OrbitsAndSunAndPlanet1\
    \ = planet1OrbitsAndPlanet2OrbitsAndSun.filter(_._2 == planet1)\n        val planet1OrbitsAndPlanet2OrbitsAndSunAndPlanet2\
    \ = planet1OrbitsAndPlanet2OrbitsAndSun.filter(_._2 == planet2)\n        val planet1OrbitsAndPlanet2OrbitsAndSunAndPlanet1AndPlanet2\
    \ = planet1OrbitsAndPlanet2OrbitsAndSunAndPlanet1.zip(planet2Orbits)\n       \
    \ val planet1OrbitsAndPlanet2OrbitsAndSunAndPlanet1AndPlanet2AndSun = planet1OrbitsAndPlanet2OrbitsAndSunAndPlanet1AndPlanet2.filter(_._1\
    \ == sun)\n        val planet1OrbitsAndPlanet2OrbitsAndSunAndPlanet1AndPlanet2AndSunAndPlanet1\
    \ = planet1OrbitsAndPlanet2OrbitsAndSunAndPlanet1AndPlanet2AndSun.filter(_._2\
    \ == planet1)\n        val planet1OrbitsAndPlanet2OrbitsAndSunAndPlanet1AndPlanet2AndSunAndPlanet2\
    \ = planet1OrbitsAndPlanet2OrbitsAndSunAndPlanet1AndPlanet2AndSun.filter(_.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvr5przjg.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpvr5przjg.scala:22:12 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvr5przjg.scala:23:12\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpvr5przjg.scala:24:12 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m0\e[0m,\
    \ \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpvr5przjg.scala:25:12 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m            Planet(\e[31m\"Mars\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvr5przjg.scala:26:12\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvr5przjg.scala:27:12 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m  "
  stdout: ''
  timestamp: 1659798228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n \
    \       val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(jupiter, saturn, uranu\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprjbe1tr9.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprjbe1tr9.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(\n                Vector(0.0, 0.0, 0.0), \n                Vector(0.0,\
    \ 0.0, 1.0), \n                Vector(0.0, 1.0, 0.0), \n                Vector(0.0,\
    \ -1.0, 0.0), \n                Vector(1.0, 0.0, 0.0), \n                Vector(-1.0,\
    \ 0.0, 0.0), \n                Vector(0.0, 1.0, 1.0), \n                Vector(0.0,\
    \ -1.0, 1.0), \n                Vector(1.0, 0.0, 1.0), \n                Vector(-1.0,\
    \ 0.0, 1.0), \n                Vector(1.0, 0.0, -1.0), \n                Vector(-1.0,\
    \ 0.0, -1.0), \n                Vector(0.0, 1.0, -1.0), \n                Vector(0.0,\
    \ -1.0, -1.0), \n                Vector(1.0, 0.0, -1.0), \n                Vector(-1.0,\
    \ 0.0, -1.0), \n                Vector(1.0, 0.0, 1.0), \n                Vector(-1.0,\
    \ 0.0, 1.0), \n                Vector(0.0, 1.0, 1.0), \n                Vector(0.0,\
    \ -1.0, 1.0), \n                Vector(1.0, 0.0, -1.0), \n                Vector(-1.0,\
    \ 0.0, -1.0), \n                Vector(0.0, 1.0, -1.0), \n                Vector(0.0,\
    \ -1.0, -1.0), \n                Vector(1.0, 0.0, -1.0), \n                Vector(-1.0,\
    \ 0.0, -1.0), \n                Vector(0.0, 1.0, 1.0), \n                Vector(0.0,\
    \ -1.0, 1.0), \n                Vector(1.0, 0.0, 1.0), \n                Vector(-1.0,\
    \ 0.0, 1.0), \n                Vector(0.0, 1.0, -1.0), \n                Vector(0.0,\
    \ -1.0, -1.0), \n                Vector(1.0, 0.0, -1.0), \n                Vector(-1.0,\
    \ 0.0, -1.0), \n                Vector(0.0, 1.0, 1.0), \n                Vector(0.0,\
    \ -1.0, 1.0), \n                Vector(1.0, 0.0, 1.0), \n                Vector(-1.0,\
    \ 0.0, 1.0), \n                Vector(0.0, 1.0, -1.0), \n                Vector(0.0,\
    \ -1.0, -1.0), \n                Vector(1.0, 0.0, -1.0), \n                Vector(-1.0,\
    \ 0.0, -1.0), \n                Vector(0.0, 1.0, 1.0), \n                Vector(0.0,\
    \ -1.0, 1.0), \n                Vector(1.0, 0.0, 1.0), \n                Vector(-1.0,\
    \ 0.0, 1.0), \n                Vector(0.0, 1.0, -1.0), \n                Vector(0.0,\
    \ -1.0, -1.0), \n                Vector(1.0, 0.0, -1.0), \n                Vector(-1.0,\
    \ 0.0, -1.0), \n                Vector(0.0, 1.0, 1.0), \n                Vector(0.0,\
    \ -1.0, 1.0), \n                Vector(1.0, 0.0, 1.0), \n                Vector(-1.0,\
    \ 0.0, 1.0), \n                Vector(0.0, 1.0, -1.0), \n                Vector(0.0,\
    \ -1.0, -1.0), \n                Vector(1.0, 0.0, -1.0), \n                Vector(-1.0,\
    \ 0.0, -1.0), \n                Vector(0.0, 1.0, 1.0), \n                Vector(0.0,\
    \ -1.0, 1.0), \n                Vector(1.0, 0.0, 1.0), \n                Vector(-1.0,\
    \ 0.0, 1.0), \n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpux18z8gc.scala:86:4 ----------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpux18z8gc.scala:22:12\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpux18z8gc.scala:22:30 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpux18z8gc.scala:86:5 ---------------------\e[0m\e\
    [0m\n\e[31m86 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsb4u0xm.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsb4u0xm.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth, venus)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, earth, mars, venus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, earth, mars, jupiter, venus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus, earth, mars, jupiter, saturn\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwmkr0vyp.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwmkr0vyp.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpw"
  stdout: ''
  timestamp: 1659798203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\"\
    , 0, 0),\n            new Planet(\"Venus\", 0, 0),\n            new Planet(\"\
    Earth\", 0, 0),\n            new Planet(\"Mars\", 0, 0),\n            new Planet(\"\
    Jupiter\", 0, 0),\n            new Planet(\"Saturn\", 0, 0),\n            new\
    \ Planet(\"Uranus\", 0, 0),\n            new Planet(\"Neptune\", 0, 0)\n     \
    \   )\n        val sun = new Planet(\"Sun\", 0, 0)\n        val planet1 = planets.find(_.name\
    \ == planet1).get\n        val planet2 = planets.find(_.name == planet2).get\n\
    \        val orbit1 = planet1.orbit(sun)\n        val orbit2 = planet2.orbit(sun)\n\
    \        val orbits = orbit1 #:: orbit2\n        val distances = orbits.map(_.distanceTo(sun))\n\
    \        val sortedDistances = distances.sortBy(_)\n        val result = sortedDistances.takeWhile(_\
    \ <= 0).reverse\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7zm6pe16.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Mercury\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: type Planet\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7zm6pe16.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Venus\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7zm6pe16.scala:24:16\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Earth\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7zm6pe16.scala:25:16\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7zm6pe16.scala:26:16\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Jupiter\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7zm6pe16.scala:27:16\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mnew\e[0m\
    \ \e[3"
  stdout: ''
  timestamp: 1659798228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(Vector(0.0, 0.0, 0.0), 0.0)),\n            Planet(\"Venus\", Orbit(Vector(0.0,\
    \ 0.0, -1.0), 0.0)),\n            Planet(\"Earth\", Orbit(Vector(0.0, 1.0, 0.0),\
    \ 0.0)),\n            Planet(\"Mars\", Orbit(Vector(0.0, -1.0, 0.0), 0.0)),\n\
    \            Planet(\"Jupiter\", Orbit(Vector(1.0, 0.0, 0.0), 0.0)),\n       \
    \     Planet(\"Saturn\", Orbit(Vector(-1.0, 0.0, 0.0), 0.0)),\n            Planet(\"\
    Uranus\", Orbit(Vector(-1.0, 1.0, 0.0), 0.0)),\n            Planet(\"Neptune\"\
    , Orbit(Vector(-1.0, -1.0, 0.0), 0.0))\n        )\n        val sun = Orbit(Vector(0.0,\
    \ 0.0, 1.0), 0.0)\n        val planet1Orbit = planets.find(_.name == planet1).getOrElse(sys.error(\"\
    Planet 1 not found\")).orbit\n        val planet2Orbit = planets.find(_.name ==\
    \ planet2).getOrElse(sys.error(\"Planet 2 not found\")).orbit\n        val planet1OrbitToSun\
    \ = planet1Orbit - sun\n        val planet2OrbitToSun = planet2Orbit - sun\n \
    \       val planet1OrbitToPlanet2 = planet1OrbitToSun - planet2Orbit\n       \
    \ val planet2OrbitToPlanet1 = planet2OrbitToSun - planet1Orbit\n        val planet1OrbitToPlanets\
    \ = planet1OrbitToPlanet2.map(_.toVector)\n        val planet2OrbitToPlanets =\
    \ planet2OrbitToPlanet1.map(_.toVector)\n        val planet1OrbitToPlanetsSorted\
    \ = planet1OrbitToPlanets.sortWith((a, b) => a.dot(b) < 0.0)\n        val planet2OrbitToPlanetsSorted\
    \ = planet2OrbitToPlanets.sortWith((a, b) => a.dot(b) < 0.0)\n        val planet1OrbitToPlanetsSortedReversed\
    \ = planet1OrbitToPlanetsSorted.reverse\n        val planet2OrbitToPlanetsSortedReversed\
    \ = planet2OrbitToPlanetsSorted.reverse\n        val planet1OrbitToPlanetsSortedReversedSorted\
    \ = planet\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt8evel25.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(Vector(\e\
    [31m0.0\e[0m, \e[31m0.0\e[0m, \e[31m0.0\e[0m), \e[31m0.0\e[0m)),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt8evel25.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(Vector(\e[31m0.0\e[0m, \e[31m0.0\e[0m, \e[31m0.0\e[0m),\
    \ \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m                              ^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt8evel25.scala:23:12 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(Vector(\e\
    [31m0.0\e[0m, \e[31m0.0\e[0m, -\e[31m1.0\e[0m), \e[31m0.0\e[0m)),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt8evel25.scala:23:28\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(Vector(\e[31m0.0\e[0m, \e[31m0.0\e[0m, -\e[31m1.0\e[0m), \e\
    [31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpt8evel25.scala:24:12 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Orbit(Vector(\e\
    [31m0.0\e[0m, \e[31m1.0\e[0m, \e[31m0.0\e[0m), \e[31m0.0\e[0m)),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- "
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth, mars, jupiter, saturn, uranus)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => Orbit(planet))\n        val sun = Orbit(\"Sun\"\
    )\n        val sunOrbit = Orbit(\"Sun\")\n        val sunOrbits = List(sunOrbit)\n\
    \        val planetOrbits = orbits.map(orbit1 => orbit1.orbit.map(orbit2 => orbit2.orbit))\n\
    \        val planetOrbit = planetOrbits.map(orbit1 => orbit1.map(orbit2 => orbit2.orbit))\n\
    \        val planetOrbits = planetOrbit.map(orbit1 => orbit1.map(orbit2 => orbit2.orbit))\n\
    \        val planetOrbit = planetOrbits.map(orbit1 => orbit1.map(orbit2 => orbit2.orbit))\n\
    \        val planetOrbits = planetOrbit.map(orbit1 => orbit1.map(orbit2 => orbit2.orbit))\n\
    \        val planetOrbit = planetOrbits.map(orbit1 => orbit1.map(orbit2 => orbit2.orbit))\n\
    \        val planetOrbits = planetOrbit.map(orbit1 => orbit1.map(orbit2 => orbit2.orbit))\n\
    \        val planetOrbit = planetOrbits.map(orbit1 => orbit1.map(orbit2 => orbit2.orbit))\n\
    \        val planetOrbits = planetOrbit.map(orbit1 => orbit1.map(orbit2 => orbit2.orbit))\n\
    \        val planetOrbit = planetOrbits.map(orbit1 => orbit1.map(orbit2 => orbit2.orbit))\n\
    \        val planetOrbits = planetOrbit.map(orbit1 => orbit1.map(orbit2 => orbit2.orbit))\n\
    \        val planetOrbit = planetOrbits.map(orbit1 => orbit1.map(orbit2 => orbit2.orbit))\n\
    \        val planetOrbits = planetOrbit.map(orbit1 => orbit1.map(orbit2 => orbit2.orbit))\n\
    \        val planetOrbit = planetOrbits.map(orbit1 => orbit1.map(orbit2 => orbit2.orbit))\n\
    \        val planetOrbits = planetOrbit.map(orbit1 => orbit1.map(orbit2 => orbit2.orbit))\n\
    \        val planetOrbit = planetOrbits.map(orbit1 => orbit1.map(orbit2 => orbit2.orbit))\n\
    \        val planetOrbits = planetOrbit.map(orbit1 => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmph9t92svj.scala:42:52 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mplanetOrbits\e[0m = planetOrbit.map(\e\
    [36morbit1\e[0m => \n\e[31m\e[31m   |\e[0m                                   \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmph9t92svj.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mplanetOrbits\e[0m = planetOrbit.map(\e\
    [36morbit1\e[0m => orbit1.map(\e[36morbit2\e[0m => orbit2.orbit))\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetOrbits is already defined as \e[33mvalue\e[0m \e[35mplanetOrbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph9t92svj.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mplanetOrbit\e[0m = planetOrbits.map(\e\
    [36morbit1\e[0m => orbit1.map(\e[36morbit2\e[0m => orbit2.orbit))\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetOrbit is already defined as \e[33mvalue\e[0m \e[35mplanetOrbit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph9t92svj.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mplanetOrbits\e[0m = planetOrbit.map(\e\
    [36morbit1\e[0m => orbit1.map(\e[36morbit2\e[0m => orbit2.orbit))\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetOrbits is already defined as \e[33mvalue\e[0m \e[35mplanetOrbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must al"
  stdout: ''
  timestamp: 1659798230
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(\n                Vector(0,0,0), \n                Vector(0,0,1), \n \
    \               Vector(0,1,0), \n                Vector(0,1,1), \n           \
    \     Vector(1,0,0), \n                Vector(1,0,1), \n                Vector(1,1,0),\
    \ \n                Vector(1,1,1))),\n            Planet(\"Venus\", Orbit(\n \
    \               Vector(0,0,0), \n                Vector(0,0,1), \n           \
    \     Vector(0,1,0), \n                Vector(0,1,1), \n                Vector(1,0,0),\
    \ \n                Vector(1,0,1), \n                Vector(1,1,0), \n       \
    \         Vector(1,1,1))),\n            Planet(\"Earth\", Orbit(\n           \
    \     Vector(0,0,0), \n                Vector(0,0,1), \n                Vector(0,1,0),\
    \ \n                Vector(0,1,1), \n                Vector(1,0,0), \n       \
    \         Vector(1,0,1), \n                Vector(1,1,0), \n                Vector(1,1,1))),\n\
    \            Planet(\"Mars\", Orbit(\n                Vector(0,0,0), \n      \
    \          Vector(0,0,1), \n                Vector(0,1,0), \n                Vector(0,1,1),\
    \ \n                Vector(1,0,0), \n                Vector(1,0,1), \n       \
    \         Vector(1,1,0), \n                Vector(1,1,1))),\n            Planet(\"\
    Jupiter\", Orbit(\n                Vector(0,0,0), \n                Vector(0,0,1),\
    \ \n                Vector(0,1,0), \n                Vector(0,1,1), \n       \
    \         Vector(1,0,0), \n                Vector(1,0,1), \n                Vector(1,1,0),\
    \ \n                Vector(1,1,1))),\n            Planet(\"Saturn\", Orbit(\n\
    \                Vector(0,0,0), \n                Vector(0,0,1), \n          \
    \      Vector(0,1,0), \n                Vector(0,1,1), \n                Vector(1,0,0),\
    \ \n                Vector(1,0,1), \n                Vector(1,1,0), \n       \
    \         Vector(1,1,1))),\n            Planet(\"Uranus\", Orbit(\n          \
    \      Vector(0,0,0), \n                Vector(0,0,1), \n                Vector(0,1,0),\
    \ \n                Vector(0,1,1), \n                Vector(1,0,0), \n       \
    \         Vector(1,0,1), \n                Vector(1,1,0), \n                Vector(1,1,1))),\n\
    \            Planet(\"Neptune\", Orbit(\n                Vector(0,0,0), \n   \
    \             Vector(0,0,1), \n                Vector(0,1,0), \n             \
    \   Vector(0,1,1), \n                Vector(1,0,0), \n                Vector(1,0,1),\
    \ \n                Vector(1,1,0), \n                Vector(1,1,1))))\n      \
    \  val planet1 = planets.find(_.name == planet1).get\n        val planet2 = planet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr__ufbba.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr__ufbba.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                              ^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr__ufbba.scala:31:12 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr__ufbba.scala:31:28\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr__ufbba.scala:40:12 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr__ufbba.scala:40:28\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compilin"
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val sun\
    \ = Vector(0.0, 0.0, 1.0)\n        val planet1Orbit = Vector(planet1.toDouble,\
    \ planet2.toDouble, sun.getX)\n        val planet2Orbit = Vector(planet2.toDouble,\
    \ planet1.toDouble, sun.getX)\n        val planet1OrbitDistance = planet1Orbit.mag\n\
    \        val planet2OrbitDistance = planet2Orbit.mag\n        val planet1OrbitAngle\
    \ = planet1Orbit.angle(sun)\n        val planet2OrbitAngle = planet2Orbit.angle(sun)\n\
    \        val planet1OrbitDistanceAngle = planet1OrbitDistance * planet1OrbitAngle\n\
    \        val planet2OrbitDistanceAngle = planet2OrbitDistance * planet2OrbitAngle\n\
    \        val planet1OrbitAngleAngle = planet1OrbitAngle * planet1OrbitAngle\n\
    \        val planet2OrbitAngleAngle = planet2OrbitAngle * planet2OrbitAngle\n\
    \        val planet1OrbitDistanceAngleAngle = planet1OrbitDistanceAngle * planet1OrbitAngleAngle\n\
    \        val planet2OrbitDistanceAngleAngle = planet2OrbitDistanceAngle * planet2OrbitAngleAngle\n\
    \        val planet1OrbitAngleAngleAngle = planet1OrbitAngleAngle * planet1OrbitAngleAngle\n\
    \        val planet2OrbitAngleAngleAngle = planet2OrbitAngleAngle * planet2OrbitAngleAngle\n\
    \        val planet1OrbitDistanceAngleAngleAngle = planet1OrbitDistanceAngleAngle\
    \ * planet1OrbitAngleAngleAngle\n        val planet2OrbitDistanceAngleAngleAngle\
    \ = planet2OrbitDistanceAngleAngle * planet2OrbitAngleAngleAngle\n        val\
    \ planet1OrbitAngleAngleAngleAngle = planet1OrbitAngleAngleAngle * planet1OrbitAngleAngleAngle\n\
    \        val planet2OrbitAngleAngleAngleAngle = planet2OrbitAngleAngleAngle *\
    \ planet2OrbitAngleAngleAngle\n        val planet1OrbitDistanceAngleAngleAngleAngle\
    \ = planet1OrbitDistance\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3gs2ivfh.scala:23:74 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mplanet1Orbit\e[0m = Vector(planet1.toDouble,\
    \ planet2.toDouble, sun.getX)\n\e[31m\e[31m   |\e[0m                         \
    \                                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \  value getX is not a member of Vector[Double] - did you mean sun.head?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp3gs2ivfh.scala:24:74 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mplanet2Orbit\e[0m = Vector(planet2.toDouble,\
    \ planet1.toDouble, sun.getX)\n\e[31m\e[31m   |\e[0m                         \
    \                                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \  value getX is not a member of Vector[Double] - did you mean sun.head?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp3gs2ivfh.scala:25:48 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mplanet1OrbitDistance\e[0m\
    \ = planet1Orbit.mag\n\e[31m\e[31m   |\e[0m                                  \
    \ ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue mag is not a member of Vector[Double]\
    \ - did you mean planet1Orbit.map?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3gs2ivfh.scala:26:48\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mplanet2OrbitDistance\e[0m = planet2Orbit.mag\n\e[31m\e[31m   |\e[0m      \
    \                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue mag\
    \ is not a member of Vector[Double] - did you mean planet2Orbit.map?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp3gs2ivfh.scala:27:45 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mplanet1OrbitAngle\e[0m =\
    \ planet1Orbit.angle(sun)\n\e[31m\e[31m   |\e[0m                             \
    \   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue angle is not a member of Vector[Double]\
    \ - did you mean planet1Orbit.apply?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3gs2ivfh.scala:28:45\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mplanet2OrbitAngle\e[0m = planet2Orbit.angle(sun)\n\e[31m\e[31m   |\e[0m  \
    \   "
  stdout: ''
  timestamp: 1659798230
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenMercuryAndMars = List(jupiter, saturn, uranus)\n  \
    \      val planetsBetweenMercuryAndJupiter = List(saturn, uranus)\n        val\
    \ planetsBetweenMercuryAndSaturn = List(uranus)\n        val planetsBetweenMercuryAndUranus\
    \ = List(uranus)\n        val planetsBetweenMercuryAndNeptune = List(uranus)\n\
    \        val planetsBetweenVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenVenusAndMars = List(jupiter, saturn, uranus)\n\
    \        val planetsBetweenVenusAndJupiter = List(saturn, \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpthboh50h.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpthboh50h.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpthboh50h.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpthboh50h.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpthboh50h.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpthboh50h.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpt"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val sun\
    \ = Vector(0.0, 0.0, 1.0)\n        val planet1 = planets.find(planet => planets.contains(planet))\n\
    \        val planet2 = planets.find(planet => planets.contains(planet))\n    \
    \    val orbit1 = planet1.map(planet => (planet, Vector(planets.indexOf(planet),\
    \ planets.indexOf(planet) + 1, sun)))\n        val orbit2 = planet2.map(planet\
    \ => (planet, Vector(planets.indexOf(planet), planets.indexOf(planet) + 1, sun)))\n\
    \        val orbits = orbit1 ++ orbit2\n        val distances = orbits.map(orbit\
    \ => (orbit._1, orbit._2.map(planet => (planet, Vector(planets.indexOf(planet),\
    \ planets.indexOf(planet) + 1, sun)))))\n        val sorted = distances.sortBy(distance\
    \ => distance._2.map(planet => (planet, distance._1._2)).min._2._1)\n        val\
    \ result = sorted.flatMap(distance => distance._2.map(planet => (planet, distance._1._2)).filter(planet\
    \ => planet._1 == planet._2))\n        if (result.isEmpty) List()\n        else\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpre6u0r6e.scala:29:31 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36msorted\e[0m = distances.sortBy(\e\
    [36mdistance\e[0m => distance._2.map(\e[36mplanet\e[0m => (planet, distance._1._2)).min._2._1)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue sortBy is not a member of Iterable[(String, Vector[(Matchable, Vector[Matchable])])]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndMars\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndJupiter\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndSaturn\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndUranus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndNeptune\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenusAndEarth\
    \ = List(earth, \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxu60whzz.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxu60whzz.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxu60whzz.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxu60whzz.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxu60whzz.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxu60whzz.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpx"
  stdout: ''
  timestamp: 1659798228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => (planet, planets.map(planet).map(planet)))\n\
    \        val sun = Planet(\"Sun\")\n        val sunOrbit = orbits.find(_._1 ==\
    \ sun).map(_._2)\n        val sunOrbits = sunOrbit.map(orbits.find(_._1 == _._2).map(_._2))\n\
    \        val sunOrbitPairs = sunOrbits.map(sunOrbit.zip(_))\n        val sunOrbitPairsSorted\
    \ = sunOrbitPairs.sortBy(_._1.distance(_._2))\n        val planetPairs = sunOrbitPairsSorted.map(sunOrbitPairsSorted.find(_._1\
    \ == _._2).map(_._2))\n        val planetPairsSorted = planetPairs.sortBy(_._1.distance(_._2))\n\
    \        val planetPairsSortedWithSun = planetPairsSorted.find(_._1 == sun).map(_._2)\n\
    \        val planetPairsWithSun = planetPairsSortedWithSun.map(planetPairsSortedWithSun.find(_._1\
    \ == _._2).map(_._2))\n        val planetPairsWithSunSorted = planetPairsWithSun.sortBy(_._1.distance(_._2))\n\
    \        val planetPairsWithSunSortedWithSun = planetPairsWithSunSortedWithSun.find(_._1\
    \ == sun).map(_._2)\n        val planetPairsWithSunSortedWithSunSorted = planetPairsWithSunSortedWithSun.sortBy(_._1.distance(_._2))\n\
    \        val planetPairsWithSunSortedWithSunSortedWithSun = planetPairsWithSunSortedWithSunSortedWithSun.find(_._1\
    \ == sun).map(_._2)\n        val planetPairsWithSunSortedWithSunSortedWithSunSorted\
    \ = planetPairsWithSunSortedWithSunSortedWithSun.sortBy(_._1.distance(_._2))\n\
    \        val planetPairsWithSunSortedWithSunSortedWithSunSortedWithSun = planetPairsWithSunSortedWithSunSortedWithSunSortedWithSun.find(_._1\
    \ == sun).map(_._2)\n        val planetPairsWithSunSortedWithSunSortedWithSunSortedWithSunSorted\
    \ = planetPairsWithSunSortedWithSunSortedWithSunSortedWithSun.sortBy(_._1.distance(_._2))\n\
    \        val planetPairsWithSunSortedWith\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpthnz2c3m.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpthnz2c3m.scala:22:64 --------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \        \e[33mval\e[0m \e[36morbits\e[0m = planets.map(\e[36mplanet\e[0m => (planet,\
    \ planets.map(planet).map(planet)))\n\e[31m\e[31m   |\e[0m                   \
    \                                             ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                          Found:    (planet : String)\n\e[31m\
    \   |\e[0m                                             Required: String => Any\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpthnz2c3m.scala:23:18\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpthnz2c3m.scala:25:51 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msunOrbits\e[0m = sunOrbit.map(orbits.find(_._1\
    \ == _._2).map(_._2))\n\e[31m\e[31m   |\e[0m                                 \
    \                ^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \    value _1 is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpthnz2c3m.scala:27:48 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m        \e[33mval\e[0m \e[36msunOrbitPairsSorted\e[0m = sunOrbitPairs.sortBy(_._1.distance(_._2))\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m   value sortBy is not a member of Option[Option[(List[Char],\
    \ Nothing)]]\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpthnz2c3m.scala:33:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetPairsWithSunSortedWithSun\e[0m = planetPairsWithSu"
  stdout: ''
  timestamp: 1659798230
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(\n                Vector(0,0,0),\n                Vector(0,0,0),\n   \
    \             Vector(0,0,0),\n                Vector(0,0,0),\n               \
    \ Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk1prequx.scala:106:4 ---------------------------\e\
    [0m\e[0m\n\e[31m106 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk1prequx.scala:22:12\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpk1prequx.scala:22:30 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpk1prequx.scala:106:5 --------------------\e[0m\e\
    [0m\n\e[31m106 |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m    |\e[0m\
    \     Found:    Unit\n\e[31m    |\e[0m     Required: List[String]\n\e[31m    |\e\
    [0m\n\e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fpo4j_j.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_fpo4j_j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n     \
    \       Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\
    \ Vector(0,0,0)),\n            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Mars\", Orbit(Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Jupiter\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n     \
    \       Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\
    \ Vector(0,0,0)),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n        )\n        val planet1\
    \ = planets.find(_.name == planet1).get\n        val planet2 = planets.find(_.name\
    \ == planet2).get\n        val orbit1 = planet1.orbit\n        val orbit2 = planet2.orbit\n\
    \        val sun = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n     \
    \   val orbits = orbit1 #:: orbit2 #:: sun\n        val proximity = orbits.map(o\
    \ => o.distance(sun))\n        proximity.sortBy(_.distance)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps9pvkggo.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmps9pvkggo.scala:22:30 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m                            \
    \  ^^^^^\e[0m\n\e[31m   |\e[0m                              Not found: Orbit\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps9pvkggo.scala:23:12\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m1\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e\
    [0m)), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps9pvkggo.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with"
  stdout: ''
  timestamp: 1659798230
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(Vector(0.0, 0.0, 0.0), 0.0)),\n            Planet(\"Venus\", Orbit(Vector(0.0,\
    \ 0.0, -1.0), 0.0)),\n            Planet(\"Earth\", Orbit(Vector(0.0, 1.0, 0.0),\
    \ 0.0)),\n            Planet(\"Mars\", Orbit(Vector(0.0, -1.0, 0.0), 0.0)),\n\
    \            Planet(\"Jupiter\", Orbit(Vector(1.0, 0.0, 0.0), 0.0)),\n       \
    \     Planet(\"Saturn\", Orbit(Vector(-1.0, 0.0, 0.0), 0.0)),\n            Planet(\"\
    Uranus\", Orbit(Vector(-1.0, 1.0, 0.0), 0.0)),\n            Planet(\"Neptune\"\
    , Orbit(Vector(-1.0, -1.0, 0.0), 0.0))\n        )\n        val planet1Orbit =\
    \ planets.find(_.name == planet1).getOrElse(throw new IllegalArgumentException(\"\
    Planet \" + planet1 + \" does not exist\")).orbit\n        val planet2Orbit =\
    \ planets.find(_.name == planet2).getOrElse(throw new IllegalArgumentException(\"\
    Planet \" + planet2 + \" does not exist\")).orbit\n        val sunOrbit = Orbit(Vector(0.0,\
    \ 0.0, 1.0), 0.0)\n        val orbits = planets.map(_.orbit).filter(_.mag > 0.0).map(_.mag).zip(planets.map(_.orbit).filter(_.mag\
    \ > 0.0).map(_.mag)).sortBy(_._1).takeWhile(_._2 > 0.0).sortBy(_._1).map(x =>\
    \ x._2).zip(planets.map(_.orbit).filter(_.mag > 0.0).map(_.mag)).sortBy(_._1).takeWhile(_._2\
    \ > 0.0).sortBy(_._1).map(x => x._2).zip(planets.map(_.orbit).filter(_.mag > 0.0).map(_.mag)).sortBy(_._1).takeWhile(_._2\
    \ > 0.0).sortBy(_._1).map(x => x._2).zip(planets.map(_.orbit).filter(_.mag > 0.0).map(_.mag)).sortBy(_._1).takeWhile(_._2\
    \ > 0.0).sortBy(_._1).map(x => x._2).zip(planets.map(_.orbit).filter(_.mag > 0.0).map(_.mag)).sortBy(_._1).takeWhile(_._2\
    \ > 0.0).sortBy(_._1).map(x => x._2).zip(planets.map(_.orbit).filter(_.mag > 0.0).map(_.mag)).sortBy(_._1).takeWhile(_._2\
    \ > \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqmznidcn.scala:34:759 --------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36morbits\e[0m = planets.map(_.orbit).filter(_.mag\
    \ > \e[31m0.0\e[0m).map(_.mag).zip(planets.map(_.orbit).filter(_.mag > \e[31m0.0\e\
    [0m).map(_.mag)).sortBy(_._1).takeWhile(_._2 > \e[31m0.0\e[0m).sortBy(_._1).map(\e\
    [36mx\e[0m => x._2).zip(planets.map(_.orbit).filter(_.mag > \e[31m0.0\e[0m).map(_.mag)).sortBy(_._1).takeWhile(_._2\
    \ > \e[31m0.0\e[0m).sortBy(_._1).map(\e[36mx\e[0m => x._2).zip(planets.map(_.orbit).filter(_.mag\
    \ > \e[31m0.0\e[0m).map(_.mag)).sortBy(_._1).takeWhile(_._2 > \e[31m0.0\e[0m).sortBy(_._1).map(\e\
    [36mx\e[0m => x._2).zip(planets.map(_.orbit).filter(_.mag > \e[31m0.0\e[0m).map(_.mag)).sortBy(_._1).takeWhile(_._2\
    \ > \e[31m0.0\e[0m).sortBy(_._1).map(\e[36mx\e[0m => x._2).zip(planets.map(_.orbit).filter(_.mag\
    \ > \e[31m0.0\e[0m).map(_.mag)).sortBy(_._1).takeWhile(_._2 > \e[31m0.0\e[0m).sortBy(_._1).map(\e\
    [36mx\e[0m => x._2).zip(planets.map(_.orbit).filter(_.mag > \e[31m0.0\e[0m).map(_.mag)).sortBy(_._1).takeWhile(_._2\
    \ > \n\e[31m\e[31m   |\e[0m                                                  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \           expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /"
  stdout: ''
  timestamp: 1659798231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn,\
    \ uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus,\
    \ saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n  \
    \      val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenusAndMars = List(\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8s401ibj.scala:47:52 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndVenusAndMars\e\
    [0m = List(\n\e[31m\e[31m   |\e[0m                                           \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8s401ibj.scala:22:18 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8s401ibj.scala:23:22\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mmercury\e[0m = Planet(\e[31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8s401ibj.scala:24:20\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mvenus\e[0m = Planet(\e[31m\"Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8s401ibj.scala:25:20\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mearth\e[0m = Planet(\e[31m\"Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8s401ibj.scala:26:19\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mmars\e[0m = Plane"
  stdout: ''
  timestamp: 1659798230
