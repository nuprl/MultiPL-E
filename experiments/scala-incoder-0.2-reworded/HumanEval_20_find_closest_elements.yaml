name: HumanEval_20_find_closest_elements
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n    // other and return them in order (smaller\
  \ number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n    //\
  \ ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n    // ((2.0f, 2.0f))\n\
  \    def findClosestElements(numbers : List[Float]) : Tuple2[Float, Float] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
  \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
  \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
  \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
  \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
completions: ["        val minDistance = math.min(numbers.min)(math.max(numbers.max))\n\
    \        val minIndex = (numbers, minDistance).zipped.minBy(_._1)._2\n       \
    \ (minIndex, minDistance)", "        val sortedNumbers = numbers.sortWith(_ <\
    \ _)\n        val closestTo = sortedNumbers.take(2)\n        val closestTo2 =\
    \ sortedNumbers.drop(2).take(2)\n        (closestTo, closestTo2)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).get\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.head\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        (closestTo, closestToIndex)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.zipWithIndex.filter(_._2 < sortedNumbers.size)\n\
    \        closestTo.head._1 -> closestTo.head._2", "        val minDistance = math.min(numbers.map(x\
    \ => math.abs(x - numbers.min)).toList)\n        val maxDistance = math.min(numbers.map(x\
    \ => math.abs(x - numbers.max)).toList)\n        (numbers.min, numbers.max)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        (closestPair._1, closestPair._2)", "        val sortedNumbers\
    \ = numbers.sortBy(math.abs)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestTo2 = sortedNumbers.drop(2).take(2)\n        (closestTo, closestTo2)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.head\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        (closestTo, closestToIndex)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        (closestTo(0), closestTo(1))", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val firstClosest = sortedNumbers.head\n        val secondClosest\
    \ = sortedNumbers.last\n        (firstClosest, secondClosest)", "        val minDistance\
    \ = math.abs(numbers.min() - numbers.max())\n        val minIndex = 0\n      \
    \  val minElement = numbers(minIndex)\n        val maxIndex = 0\n        val maxElement\
    \ = numbers(maxIndex)\n        val minDistanceIndex = -1\n        val maxDistanceIndex\
    \ = -1\n        numbers.zipWithIndex.foreach { case (number, index) =>\n     \
    \       if (number < minElement) {\n                minDistanceIndex = index\n\
    \                minElement = number\n            } else if (number > maxElement)\
    \ {\n                maxDistanceIndex = index\n                maxElement = number\n\
    \            }\n        }\n        (minElement, maxElement)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n \
    \       val closestTo2 = sortedNumbers.drop(2).take(2)\n        closestTo.zip(closestTo2).map\
    \ { case (a, b) => a -> b }", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.zip(sortedNumbers.tail).map\
    \ {\n            case (first, second) => (first - second).abs.min\n        }\n\
    \        closestTo.min", "        val sortedNumbers = numbers.sortBy(math.abs)\n\
    \        val closestToFirst = sortedNumbers.head\n        val closestToSecond\
    \ = sortedNumbers.last\n        (closestToFirst, closestToSecond)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.head)\n        val secondClosestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.last)\n        (sortedNumbers(firstClosestIndex), sortedNumbers(secondClosestIndex))",
  "        val smallest = numbers.min\n        val largest = numbers.max\n       \
    \ val difference = largest - smallest\n        val differences = numbers.map(x\
    \ => (x - smallest) / difference)\n        val smallestDifference = differences.min\n\
    \        val largestDifference = differences.max\n        val smallestDifferenceIndex\
    \ = differences.indexOf(smallestDifference)\n        val largestDifferenceIndex\
    \ = differences.indexOf(largestDifference)\n        (smallestDifference, largestDifference)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest =\
    \ sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n       \
    \ (firstClosest, secondClosest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n\
    \        val largestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n\
    \        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))", "     \
    \   val sortedNumbers = numbers.sortBy(math.abs(_))\n        val firstClosestIndex\
    \ = sortedNumbers.indexWhere(math.abs(_) < sortedNumbers(1))\n        val secondClosestIndex\
    \ = sortedNumbers.indexWhere(math.abs(_) < sortedNumbers(2))\n        (sortedNumbers(firstClosestIndex),\
    \ sortedNumbers(secondClosestIndex))", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        closestPair.getOrElse(sortedNumbers.last, sortedNumbers.head)",
  "        val smallest = math.min(numbers)\n        val largest = math.max(numbers)\n\
    \        val mid = (smallest + largest) / 2\n        val closest = (smallest,\
    \ largest)\n        val closestIndex = 0\n        val closestDistance = math.abs(mid\
    \ - closest._1)\n        val closestElement = closest._2\n        val closestElementIndex\
    \ = numbers.indexWhere(x => x == closestElement)\n        val closestElementDistance\
    \ = math.abs(mid - closestElement)\n        if (closestDistance < closestElementDistance)\
    \ {\n            closest = (mid, closestElement)\n            closestIndex = closestElementIndex\n\
    \        }\n        closest", "        val minDistance = numbers.min\n       \
    \ val maxDistance = numbers.max\n        val minIndex = numbers.indexOf(minDistance)\n\
    \        val maxIndex = numbers.indexOf(maxDistance)\n        (minDistance, maxDistance)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallest = sortedNumbers.head\n\
    \        val largest = sortedNumbers.last\n        (smallest, largest)", "   \
    \     val smallest = numbers.min\n        val largest = numbers.max\n        (smallest,\
    \ largest)", "        val sortedNumbers = numbers.sortWith(_ < _)\n        val\
    \ smallestNumber = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n\
    \        (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ minDistance = math.abs(numbers.min() - numbers.max())\n        val minIndex\
    \ = numbers.indexWhere(x => math.abs(x - numbers.min()) < minDistance)\n     \
    \   (numbers.min(), numbers.max())", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortBy(math.abs(_))\n        val closestPair = sortedNumbers.take(2)\n\
    \        (closestPair(0), closestPair(1))", "        val minDistance = numbers.minBy(x\
    \ => Math.abs(x - numbers.last))\n        val maxDistance = numbers.maxBy(x =>\
    \ Math.abs(x - numbers.last))\n        (minDistance, maxDistance)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.head)\n        val largestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.last)\n        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.head\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        (closestTo, closestToIndex)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val firstClosest = sortedNumbers.head\n        val secondClosest\
    \ = sortedNumbers.last\n        (firstClosest, secondClosest)", "        val minDistance\
    \ = math.abs(numbers.min() - numbers.max())\n        val minIndex = 0\n      \
    \  val minValue = numbers.min\n        val maxValue = numbers.max\n        numbers.zipWithIndex.foreach\
    \ { case (number, index) =>\n            val distance = math.abs(number - minValue)\n\
    \            if (distance < minDistance) {\n                minDistance = distance\n\
    \                minIndex = index\n                minValue = number\n       \
    \     } else if (distance == minDistance) {\n                if (number < minValue)\
    \ {\n                    minValue = number\n                }\n            }\n\
    \        }\n        (minValue, minValue)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.head\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = ", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.take(2)\n        val secondClosest\
    \ = sortedNumbers.last\n        (closestTo, secondClosest)", "        val smallestDifference\
    \ = math.abs(numbers.min() - numbers.max())\n        val smallestElement = numbers.min\n\
    \        val largestElement = numbers.max\n        val smallestDifferenceIndex\
    \ = numbers.indexWhere(x => math.abs(x - smallestElement) < smallestDifference)\n\
    \        val largestDifferenceIndex = numbers.indexWhere(x => math.abs(x - largestElement)\
    \ < smallestDifference)\n        (smallestElement, largestElement)", "       \
    \ val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (first, second) => math.abs(first - second) }.min\n        val closestToIndex\
    \ = sortedNumbers.zipWithIndex.map { case (number, index) => math.abs(number -\
    \ closestTo) }.min\n        val closestToIndex = closestToIndex._2\n        val\
    \ closestToValue = sortedNumbers(closestToIndex)\n        (closestToValue, closestToIndex)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1)._2\n\
    \        val closestTo2 = sortedNumbers.zip(sortedNumbers.tail).minBy(_._2)._1\n\
    \        (closestTo, closestTo2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestDifference = sortedNumbers.head - sortedNumbers.last\n\
    \        (sortedNumbers.head, sortedNumbers.last)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.head\n    \
    \    val closestToIndex = sortedNumbers.indexOfSlice(closestTo)\n        val closestToNext\
    \ = sortedNumbers(closestToIndex + 1)\n        val closestToPrevious = sortedNumbers(closestToIndex\
    \ - 1)\n        val closestToNextPrevious = sortedNumbers(closestToIndex - 2)\n\
    \        val closestToNextNext = sortedNumbers(closestToIndex + 2)\n        val\
    \ closestToPreviousToPrevious = sortedNumbers(closestToIndex - 3)\n        val\
    \ closestToNextPreviousToNext = sortedNumbers(closestToIndex + 3)\n        val\
    \ closestToNextPreviousToPreviousToNext = sortedNumbers(closestToIndex - 4)\n\
    \        val closestToNextPreviousToPreviousToPreviousToNext = sortedNumbers(closestToIndex\
    \ + 4)\n        val closestToNextPreviousToPreviousToPreviousToPreviousToNext\
    \ = sortedNumbers(closestToIndex - 5)\n        val closestToNextPreviousToPreviousToPreviousToPreviousToPreviousToNext\
    \ = sortedNumbers(closestToIndex + 5)\n        val closestToNextPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToNext\
    \ = sortedNumbers(closestToIndex - 6)\n        val closestToNextPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToNext\
    \ = sortedNumbers(closestToIndex + 6)\n        val closestToNextPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToNext\
    \ = sortedNumbers(closestToIndex - 7)\n        val closestToNextPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToNext\
    \ = sortedNumbers(closestToIndex + 7)\n        val closestToNextPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToNext\
    \ = sortedNumbers(closestToIndex - 8)\n        val closestToNextPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToNext\
    \ = sortedNumbers(closestToIndex + 8)\n        val closestToNextPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousToPreviousTo",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n\
    \        val largestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n\
    \        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))", "     \
    \   val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        closestPair.getOrElse((sortedNumbers.head,sortedNumbers.last))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val first = sortedNumbers.head\n\
    \        val second = sortedNumbers.last\n        (first, second)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.head)\n        val secondClosestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.last)\n        (sortedNumbers(firstClosestIndex), sortedNumbers(secondClosestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zipWithIndex.find(_._2 < _._2).getOrElse(sortedNumbers.last)\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.head\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        (closestTo, closestToIndex)",
  "        val smallestDifference = math.abs(numbers.min() - numbers.max())\n    \
    \    val smallestElement = numbers.min\n        val largestElement = numbers.max\n\
    \        val smallestElementIndex = numbers.indexWhere(x => x == smallestElement)\n\
    \        val largestElementIndex = numbers.indexWhere(x => x == largestElement)\n\
    \        (smallestElement, largestElement)", "        val sortedNumbers = numbers.sortBy(math.abs(_))\n\
    \        val smallestNumber = sortedNumbers.head\n        val largestNumber =\
    \ sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val minDistance\
    \ = numbers.minBy(x => Math.abs(x - numbers.last))\n        val maxDistance =\
    \ numbers.maxBy(x => Math.abs(x - numbers.last))\n        (minDistance, maxDistance)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestTo2 = sortedNumbers.drop(2)\n        (closestTo, closestTo2)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestDifference\
    \ = sortedNumbers.headOption.map(_ - sortedNumbers.last).getOrElse(0.0)\n    \
    \    val largestDifference = sortedNumbers.lastOption.map(_ - sortedNumbers.head).getOrElse(0.0)\n\
    \        (smallestDifference, largestDifference)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val firstClosestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.head)\n        val secondClosestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.last)\n        (sortedNumbers(firstClosestIndex), sortedNumbers(secondClosestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.head\n        val closestToIndex\
    \ = sortedNumbers.indexOfSlice(closestTo)\n        val closestToNext = sortedNumbers(closestToIndex\
    \ + 1)\n        val closestToPrev = sortedNumbers(closestToIndex - 1)\n      \
    \  val closestToClosest = sortedNumbers.minBy(_ - _)\n        val closestToClosestIndex\
    \ = sortedNumbers.indexOfSlice(closestToClosest)\n        val closestToClosestNext\
    \ = sortedNumbers(closestToClosestIndex + 1)\n        val closestToClosestPrev\
    \ = sortedNumbers(closestToClosestIndex - 1)\n        val closestToClosestClosest\
    \ = sortedNumbers.minBy(_ - _)\n        val closestToClosestClosestIndex = sortedNumbers.indexOfSlice(closestToClosestClosest)\n\
    \        val closestToClosestClosestNext = sortedNumbers(closestToClosestClosestIndex\
    \ + 1)\n        val closestToClosestClosestPrev = sortedNumbers(closestToClosestClosestIndex\
    \ - 1)\n        val closestToClosestClosestClosest = sortedNumbers.minBy(_ - _)\n\
    \        val closestToClosestClosestClosestIndex = sortedNumbers.indexOfSlice(closestToClosestClosestClosest)\n\
    \        val closestToClosestClosestClosestNext = sortedNumbers(closestToClosestClosestClosestIndex\
    \ + 1)\n        val closestToClosestClosestClosestPrev = sortedNumbers(closestToClosestClosestClosestIndex\
    \ - 1)\n        val closestToClosestClosestClosestClosest = sortedNumbers.minBy(_\
    \ - _)\n        val closestToClosestClosestClosestClosestIndex = sortedNumbers.indexOfSlice(closestToClosestClosestClosestClosest)\n\
    \        val closestToClosestClosestClosestNext = sortedNumbers(closestToClosestClosestClosestIndex\
    \ + 1)\n        val closestToClosestClosestClosestPrev = sortedNumbers(closestToClosestClosestClosestIndex\
    \ - 1)\n        val closestToClosestClosestClosestClosest = sortedNumbers.minBy(_\
    \ - _)\n        val closestToClosestClosestClosestClosestIndex = sortedNumbers.indexOfSlice(closestToClosestClosestClosestClosest)\n\
    \        val closestToClosestClosestClosestNext = sortedNumbers(closestToClosestClosestClosestIndex\
    \ + 1)\n        val closestToClosestClosestClosestPrev = ", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val first = sortedNumbers.head\n        val\
    \ second = sortedNumbers.last\n        (first, second)", "        val sortedNumbers\
    \ = numbers.sortBy(math.abs(_))\n        val firstClosestIndex = sortedNumbers.indexWhere(math.abs(_)\
    \ == sortedNumbers(0))\n        val secondClosestIndex = sortedNumbers.indexWhere(math.abs(_)\
    \ == sortedNumbers(1))\n        (sortedNumbers(firstClosestIndex), sortedNumbers(secondClosestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosestIndex\
    \ = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n        val secondClosestIndex\
    \ = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n        (sortedNumbers(firstClosestIndex),\
    \ sortedNumbers(secondClosestIndex))", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestIndex = sortedNumbers.indexOf(0)\n\
    \        val largestIndex = sortedNumbers.lastIndexOf(0)\n        (sortedNumbers(smallestIndex),\
    \ sortedNumbers(largestIndex))", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest = sortedNumbers.head\n\
    \        val secondClosest = sortedNumbers.last\n        (firstClosest, secondClosest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        (closestPair._1, closestPair._2)", "        val mins = numbers.minBy(_.abs)\n\
    \        val maxs = numbers.maxBy(_.abs)\n        (mins, maxs)", "        val\
    \ minDistance = numbers.minBy(x => Math.abs(x - numbers.last))\n        val maxDistance\
    \ = numbers.maxBy(x => Math.abs(x - numbers.last))\n        (minDistance, maxDistance)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        closestTo.map(_._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestDifference = sortedNumbers.headOption.map(_ - sortedNumbers.last).getOrElse(0.0)\n\
    \        val largestDifference = sortedNumbers.lastOption.map(_ - sortedNumbers.head).getOrElse(0.0)\n\
    \        (smallestDifference, largestDifference)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.head)\n        val largestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.last)\n        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val first = sortedNumbers.head\n\
    \        val second = sortedNumbers.last\n        (first, second)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val first = sortedNumbers.head\n\
    \        val second = sortedNumbers.last\n        (first, second)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).get\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ smallest = numbers.min\n        val largest = numbers.max\n        val smallestIndex\
    \ = numbers.indexOf(smallest)\n        val largestIndex = numbers.indexOf(largest)\n\
    \        (smallest, largest)", "        val mins = numbers.minBy(_)\n        val\
    \ maxs = numbers.maxBy(_)\n        (mins, maxs)", "        val sortedNumbers =\
    \ numbers.sortWith(_ < _)\n        val first = sortedNumbers.head\n        val\
    \ second = sortedNumbers.last\n        (first, second)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestToFirst = sortedNumbers.head\n\
    \        val closestToSecond = sortedNumbers.last\n        (closestToFirst, closestToSecond)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).get\n        (closestPair._1,\
    \ closestPair._2)", "        val minDistance = math.abs(numbers.min() - numbers.max())\n\
    \        val minIndex = numbers.indexWhere(x => math.abs(x - numbers.min()) <\
    \ minDistance)\n        val maxIndex = numbers.indexWhere(x => math.abs(x - numbers.max())\
    \ < minDistance)\n        (numbers.min(), numbers.max())", "        val minDistance\
    \ = math.abs(numbers.min.asInstanceOf[Float] - numbers.max.asInstanceOf[Float])\n\
    \        val minIndex = numbers.indexWhere(x => math.abs(x - numbers.min.asInstanceOf[Float])\
    \ < minDistance)\n        val maxIndex = numbers.indexWhere(x => math.abs(x -\
    \ numbers.max.asInstanceOf[Float]) < minDistance)\n        (numbers(minIndex),\
    \ numbers(maxIndex))", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val smallestNumber = sortedNumbers.head\n        val largestNumber =\
    \ sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val minDistance\
    \ = math.abs(numbers.min() - numbers.max())\n        val minIndex = (numbers.min(),\
    \ numbers.max())\n        val maxIndex = (numbers.max(), numbers.min())\n    \
    \    (minIndex, maxIndex)", "        val sortedNumbers = numbers.sortWith(_ <\
    \ _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestDifference = sortedNumbers.last.minus(sortedNumbers.head)\n\
    \        val largestDifference = sortedNumbers.head.minus(sortedNumbers.last)\n\
    \        (smallestDifference, largestDifference)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.head\n    \
    \    val closestTo2 = sortedNumbers.last\n        (closestTo, closestTo2)", " \
    \       val minDistance = math.abs(numbers.min() - numbers.max())\n        val\
    \ minIndex = 0\n        val minValue = numbers.min\n        val maxValue = numbers.max\n\
    \        numbers.zipWithIndex.foreach { case (number, index) =>\n            val\
    \ distance = Math.abs(number - minValue)\n            if (distance < minDistance)\
    \ {\n                minDistance = distance\n                minIndex = index\n\
    \                minValue = number\n            }\n            if (distance ==\
    \ minDistance) {\n                val nextNumber = numbers.drop(index).min\n \
    \               val nextDistance = Math.abs(number - nextNumber)\n           \
    \     if (nextDistance < minDistance) {\n                    minDistance = nextDistance\n\
    \                    minIndex = index\n                    minValue = nextNumber\n\
    \                }\n            }\n        }\n        (minValue, minIndex)", " \
    \       val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).minBy(_._1)\n        closestPair._2",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest =\
    \ sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n       \
    \ (firstClosest, secondClosest)", "        val smallest = numbers.min\n      \
    \  val largest = numbers.max\n        val smallestIndex = numbers.indexOf(smallest)\n\
    \        val largestIndex = numbers.indexOf(largest)\n        (smallest, largest)",
  "        val minDistance = math.abs(numbers(0) - numbers(1))\n        val minIndex\
    \ = 0\n        val minValue = numbers(0)\n        numbers.foreach { number =>\n\
    \            val distance = Math.abs(number - numbers(1))\n            if (distance\
    \ < minDistance) {\n                minDistance = distance\n                minIndex\
    \ = numbers.indexOf(number)\n                minValue = number\n            }\n\
    \        }\n        (minValue, numbers(minIndex))", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.head)\n        val largestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.last)\n        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestToLeft\
    \ = sortedNumbers.takeWhile(_ < sortedNumbers.head).last\n        val closestToRight\
    \ = sortedNumbers.takeWhile(_ > sortedNumbers.last).head\n        (closestToLeft,\
    \ closestToRight)", "        val minDistance = numbers.minBy(_.abs) - numbers.minBy(_.abs)\n\
    \        val maxDistance = numbers.maxBy(_.abs) - numbers.minBy(_.abs)\n     \
    \   (numbers.minBy(_.abs), numbers.maxBy(_.abs))", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest =\
    \ sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n       \
    \ (firstClosest, secondClosest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val firstClosestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n\
    \        val secondClosestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n\
    \        (sortedNumbers(firstClosestIndex), sortedNumbers(secondClosestIndex))",
  "        val mins = numbers.minBy(_.toFloat)\n        val maxs = numbers.maxBy(_.toFloat)\n\
    \        (mins, maxs)", "        val smallest = numbers.min\n        val largest\
    \ = numbers.max\n        val smallestIndex = numbers.indexOf(smallest)\n     \
    \   val largestIndex = numbers.indexOf(largest)\n        (smallest, largest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.head\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        (closestTo, closestToIndex)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val smallestDifference = math.abs(numbers.min() - numbers.max())\n    \
    \    val smallestElement = numbers.min\n        val largestElement = numbers.max\n\
    \        val smallestIndex = numbers.indexWhere(x => x == smallestElement)\n \
    \       val largestIndex = numbers.indexWhere(x => x == largestElement)\n    \
    \    (smallestElement, smallestIndex)", "        val minDistance = numbers.minBy(_.abs)\
    \ / numbers.size // find the smallest distance between any two numbers\n     \
    \   val closestToMin = numbers.filter(n => n.abs < minDistance).minBy(_.abs)\n\
    \        val closestToMax = numbers.filter(n => n.abs > minDistance).maxBy(_.abs)\n\
    \        (closestToMin, closestToMax)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).get\n\
    \        (closestPair._1, closestPair._2)", "        val minDistance = math.abs(numbers.min.asInstanceOf[Float]\
    \ - numbers.max.asInstanceOf[Float])\n        val minIndex = (numbers.zipWithIndex.filter(_._2\
    \ < minDistance).minBy(_._1)._2)._2\n        val maxIndex = (numbers.zipWithIndex.filter(_._2\
    \ < minDistance).maxBy(_._1)._2)._2\n        (numbers.min.asInstanceOf[Float],\
    \ numbers.max.asInstanceOf[Float])", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.head\n        val closestTo2 = sortedNumbers.last\n\
    \        (closestTo, closestTo2)", "        val minDistance = math.abs(numbers.min()\
    \ - numbers.max())\n        val minIndex = numbers.indexWhere(x => math.abs(x\
    \ - numbers.min()) < minDistance)\n        val maxIndex = numbers.indexWhere(x\
    \ => math.abs(x - numbers.max()) < minDistance)\n        (numbers(minIndex), numbers(maxIndex))",
  "        val minDistance = numbers.minBy(_.abs) + numbers.maxBy(_.abs)\n       \
    \ val minIndex = numbers.indexOf(minDistance)\n        (minDistance, minIndex)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).get\n        (closestPair._1,\
    \ closestPair._2)", "        val sortedNumbers = numbers.sortWith(_ < _)\n   \
    \     val firstClosest = sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n\
    \        (firstClosest, secondClosest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.head\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        (closestTo, closestToIndex)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest = sortedNumbers.head\n\
    \        val secondClosest = sortedNumbers.last\n        (firstClosest, secondClosest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).find(_._1 < _._1)\n        (closestPair._1,\
    \ closestPair._2)", "        val sortedNumbers = numbers.sortWith(_ < _)\n   \
    \     val smallestNumber = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n\
    \        (smallestNumber, largestNumber)", "        val smallest: Float = numbers.min\n\
    \        val largest: Float = numbers.max\n        val smallestIndex: Int = numbers.indexWhere(x\
    \ => x == smallest)\n        val largestIndex: Int = numbers.indexWhere(x => x\
    \ == largest)\n        (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortBy(math.abs(_))\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestTo2 = sortedNumbers.takeRight(2)\n        (closestTo, closestTo2)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).get\n        (closestPair._1,\
    \ closestPair._2)", "        val sortedNumbers = numbers.sortWith(_ < _)\n   \
    \     val firstClosestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n\
    \        val secondClosestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n\
    \        (sortedNumbers(firstClosestIndex), sortedNumbers(secondClosestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val first = sortedNumbers.head\n\
    \        val second = sortedNumbers.last\n        (first, second)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest = sortedNumbers.head\n\
    \        val secondClosest = sortedNumbers.last\n        (firstClosest, secondClosest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestToFirst\
    \ = sortedNumbers.head\n        val closestToSecond = sortedNumbers.last\n   \
    \     (closestToFirst, closestToSecond)", "        val sortedNumbers = numbers.sortBy(math.abs)\n\
    \        val smallestNumber = sortedNumbers.head\n        val largestNumber =\
    \ sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zipWithIndex.find(_._2\
    \ < _._2).getOrElse(sortedNumbers.last)\n        (closestPair._1, closestPair._2)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        (closestTo(0), closestTo(1))", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1)\n\
    \        closestPair._1", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val first = sortedNumbers.head\n        val second = sortedNumbers.last\n\
    \        (first, second)", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val smallestDifference = sortedNumbers.head - sortedNumbers.last\n  \
    \      val largestDifference = sortedNumbers.last - sortedNumbers.head\n     \
    \   (smallestDifference, largestDifference)", "        val minDistance = numbers.minBy(_\
    \ - _)\n        val maxDistance = numbers.maxBy(_ - _)\n        (minDistance,\
    \ maxDistance)", "        val sortedNumbers = numbers.sortWith(_ < _)\n      \
    \  val closestPair = sortedNumbers.zipWithIndex.filter(_._2 < sortedNumbers.size\
    \ - 1).head\n        (closestPair._1, closestPair._2)", "        val smallest:\
    \ Float = numbers.min\n        val largest: Float = numbers.max\n        val smallestIndex:\
    \ Int = numbers.indexWhere(x => x == smallest)\n        val largestIndex: Int\
    \ = numbers.indexWhere(x => x == largest)\n        (smallest, largest)", "   \
    \     val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1)\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val firstClosest = sortedNumbers.head\n        val secondClosest\
    \ = sortedNumbers.last\n        (firstClosest, secondClosest)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        closestPair.getOrElse(sortedNumbers.head, (sortedNumbers.head,sortedNumbers.last))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestToLeft\
    \ = sortedNumbers.head\n        val closestToRight = sortedNumbers.last\n    \
    \    (closestToLeft, closestToRight)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.head\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        (closestTo, closestToIndex)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val minDistance = math.abs(numbers.min() - numbers.max())\n        val\
    \ minIndex = 0\n        val minValue = numbers.min\n        val maxValue = numbers.max\n\
    \        val maxIndex = numbers.size - 1\n        val maxDistance = math.abs(maxValue\
    \ - numbers.max)\n        val maxIndexOfMinValue = numbers.indexWhere(x => x ==\
    \ minValue)\n        val maxIndexOfMaxValue = numbers.indexWhere(x => x == maxValue)\n\
    \        val minIndexOfMinValue = numbers.indexWhere(x => x == minValue)\n   \
    \     val minIndexOfMaxValue = numbers.indexWhere(x => x == maxValue)\n      \
    \  val minIndexOfMinValueInRange = minIndexOfMinValue + 1\n        val minIndexOfMaxValueInRange\
    \ = minIndexOfMaxValue + 1\n        val minIndexOfMinValueInRangeInRange = minIndexOfMinValueInRange\
    \ + 1\n        val minIndexOfMaxValueInRangeInRange = minIndexOfMaxValueInRange\
    \ + 1\n        val minIndexOfMinValueInRangeInRangeInRange = minIndexOfMinValueInRangeInRange\
    \ + 1\n        val minIndexOfMaxValueInRangeInRangeInRange = minIndexOfMaxValueInRangeInRange\
    \ + 1\n        val minIndexOfMinValueInRangeInRangeInRangeInRange = minIndexOfMinValueInRangeInRangeInRange\
    \ + 1\n        val minIndexOfMaxValueInRangeInRangeInRangeInRange = minIndexOfMaxValueInRangeInRangeInRange\
    \ + 1\n        val minIndexOfMinValueInRangeInRangeInRangeInRangeInRange = minIndexOfMinValueInRangeInRangeInRangeInRange\
    \ + 1\n        val minIndexOfMaxValueInRangeInRangeInRangeInRangeInRange = minIndexOfMaxValueInRangeInRangeInRangeInRange\
    \ + 1\n        val minIndexOfMinValueInRangeInRangeInRangeInRangeInRange = minIndexOfMinValueInRangeInRangeInRangeInRange\
    \ + 1\n        val minIndexOfMaxValueInRangeInRangeInRangeInRangeInRange = minIndexOfMaxValueInRangeInRangeInRangeInRange\
    \ + 1\n        val minIndexOfMinValueInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minIndexOfMinValueInRangeInRangeInRangeInRangeInRange + 1\n        val minIndexOfMaxValueInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minIndexOfMaxValueInRangeInRangeInRangeInRangeInRange + 1", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallest = sortedNumbers.head\n     \
    \   val largest = sortedNumbers.last\n        (smallest, largest)", "        val\
    \ smallestDifference = numbers.minBy(math.abs)\n        val largestDifference\
    \ = numbers.maxBy(math.abs)\n        (smallestDifference, largestDifference)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestDifference\
    \ = sortedNumbers.head - sortedNumbers.last\n        val largestDifference = sortedNumbers.last\
    \ - sortedNumbers.head\n        (smallestDifference, largestDifference)", "  \
    \      val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.head\n\
    \        val closestToIndex = sortedNumbers.indexOfSlice(closestTo)\n        val\
    \ closestToIndex = if (closestToIndex == 0) sortedNumbers.length - 1 else closestToIndex\
    \ - 1\n        val closestToNext = sortedNumbers(closestToIndex + 1)\n       \
    \ val closestToPrevious = sortedNumbers(closestToIndex - 1)\n        val closestToNextIndex\
    \ = sortedNumbers.indexOfSlice(closestToNext)\n        val closestToNextIndex\
    \ = if (closestToNextIndex == 0) sortedNumbers.length - 1 else closestToNextIndex\
    \ - 1\n        val closestToPreviousIndex = sortedNumbers.indexOfSlice(closestToPrevious)\n\
    \        val closestToPreviousIndex = if (closestToPreviousIndex == 0) sortedNumbers.length\
    \ - 1 else closestToPreviousIndex - 1\n        val closestToNextNext = sortedNumbers(closestToNextIndex\
    \ + 1)\n        val closestToNextNextIndex = sortedNumbers.indexOfSlice(closestToNextNext)\n\
    \        val closestToNextNextIndex = if (closestToNextNextIndex == 0) sortedNumbers.length\
    \ - 1 else closestToNextNextIndex - 1\n        val closestToNextPreviousIndex\
    \ = sortedNumbers.indexOfSlice(closestToNextPreviousIndex)\n        val closestToNextPreviousIndex\
    \ = if (closestToNextPreviousIndex == 0) sortedNumbers.length - 1 else closestToNextPreviousIndex\
    \ - 1\n        val closestToPreviousPreviousIndex = sortedNumbers.indexOfSlice(closestToPreviousPreviousIndex)\n\
    \        val closestToPreviousPreviousIndex = if (closestToPreviousPreviousIndex\
    \ == 0) sortedNumbers.length - 1 else closestToPreviousPreviousIndex - 1\n   \
    \     val closestToPreviousNext = sortedNumbers(closestToPreviousIndex + 1)\n\
    \        val closestToPreviousNextIndex = sortedNumbers.indexOfSlice(closestToPreviousNext)\n\
    \        val closestToPreviousNextIndex = if (closestToPreviousNextIndex == 0)\
    \ sortedNumbers.length - 1 else closestToPreviousNextIndex - 1\n        val closestToPreviousPreviousIndex\
    \ = sortedNumbers.indexOfSlice(closestToPreviousPreviousIndex)\n        val closestToPreviousPreviousIndex\
    \ = if (closestToPreviousPreviousIndex == 0) sortedNumbers.length - 1 else closestToPreviousPreviousIndex\
    \ - 1\n        val closestToNextNextNext = sortedNumbers(closestToNextNextIndex\
    \ + 1)\n        val closestToNextNextNextIndex = sortedNumbers.indexOfSlice(closestToNextNextNext)\n\
    \        val closestToNextNextNextIndex = if (closestToNextNextNextIndex == 0)\
    \ sortedNumbers.length - 1 else closestToNextNextNextIndex - 1\n        val closestToNextNextPreviousIndex\
    \ = sortedNumbers.indexOf", "        val sortedNumbers = numbers.sortWith(_ <\
    \ _)\n        val closestTo = sortedNumbers.zip(sortedNumbers.tail).map {\n  \
    \          case (first, second) => (first - second).abs.min\n        }.min\n \
    \       val closestTo2 = sortedNumbers.zip(sortedNumbers.tail).map {\n       \
    \     case (first, second) => (first - second).abs.min\n        }.min\n      \
    \  sortedNumbers.find(_ == closestTo).zip(sortedNumbers.find(_ == closestTo2))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val first = sortedNumbers.head\n\
    \        val second = sortedNumbers.last\n        (first, second)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).minBy(_._1)\n        (closestPair._1,\
    \ closestPair._2)", "        val sortedNumbers = numbers.sortWith(_ < _)\n   \
    \     val closestTo = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).getOrElse(sortedNumbers.last)\n\
    \        val closestTo2 = sortedNumbers.zip(sortedNumbers.tail).minBy(_._2).getOrElse(sortedNumbers.last)\n\
    \        (closestTo, closestTo2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val firstClosestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n\
    \        val secondClosestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n\
    \        (sortedNumbers(firstClosestIndex), sortedNumbers(secondClosestIndex))",
  "        val smallest = numbers.min\n        val largest = numbers.max\n       \
    \ val smallestIndex = numbers.indexWhere(x => x == smallest)\n        val largestIndex\
    \ = numbers.indexWhere(x => x == largest)\n        (smallest, largest)", "   \
    \     val minDistance = math.abs(numbers.min() - numbers.max())\n        val minIndex\
    \ = numbers.indexWhere(x => math.abs(x - numbers.min()) < minDistance)\n     \
    \   val maxIndex = numbers.indexWhere(x => math.abs(x - numbers.max()) < minDistance)\n\
    \        (numbers.min(), numbers.max())", "        val smallest = numbers.min\n\
    \        val largest = numbers.max\n        val smallestIndex = numbers.indexOf(smallest)\n\
    \        val largestIndex = numbers.indexOf(largest)\n        (smallest, largest)",
  "        val minDistance = numbers.minBy(_.abs) - numbers.maxBy(_.abs)\n       \
    \ val closestToMin = numbers.minBy(_.abs)\n        val closestToMax = numbers.maxBy(_.abs)\n\
    \        (closestToMin, closestToMax)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.zip(sortedNumbers.tail).filter(_._1\
    \ < _._1).map(_._2)\n        val closestToTail = sortedNumbers.zip(sortedNumbers.tail).filter(_._1\
    \ > _._1).map(_._2)\n        (closestTo, closestToTail)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestToFirst = sortedNumbers.head\n\
    \        val closestToSecond = sortedNumbers.last\n        (closestToFirst, closestToSecond)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestTo2 = sortedNumbers.takeRight(2)\n        (closestTo, closestTo2)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestIndex\
    \ = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n        val largestIndex\
    \ = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n        (sortedNumbers(smallestIndex),\
    \ sortedNumbers(largestIndex))"]
stop_tokens:
- "\n    }\n"
