name: HumanEval_160_do_algebra
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n    // the second list is a list of integers. Use the two given\
  \ lists to build the algebric \n    // expression and return the evaluation of this\
  \ expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n  \
  \  // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division (\
  \ // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*',\
  \ '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result\
  \ = 9\n    // Note:\n    // The length of operator list is equal to the length of\
  \ operand list minus one.\n    // Operand is a list of of non-negative integers.\n\
  \    // Operator list has at least one operator, and operand list has at least two\
  \ operands.\n    def doAlgebra(op : List[String], operand : List[Long]) : Long =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
  **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
  \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
  //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
  \n}\n"
completions: ["        val ops = op.mkString(\"+\")\n        val ops = ops.replaceAll(\"\
    \\\\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val\
    \ ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val ops = ops.replaceAll(\"\\\
    \\//\", \"/\")\n        val ops = ops.replaceAll(\"\\\\**\", \"**\")\n       \
    \ val ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\
    \\\\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"", "        val opList = op.mkString(\"+\")\n       \
    \ val opList2 = op.mkString(\"-\")\n        val opList3 = op.mkString(\"*\")\n\
    \        val opList4 = op.mkString(\"//\")\n        val opList5 = op.mkString(\"\
    **\")\n        val opList6 = op.mkString(\"+\")\n        val opList7 = op.mkString(\"\
    -\")\n        val opList8 = op.mkString(\"*\")\n        val opList9 = op.mkString(\"\
    //\")\n        val opList10 = op.mkString(\"**\")\n        val opList11 = op.mkString(\"\
    +\")\n        val opList12 = op.mkString(\"-\")\n        val opList13 = op.mkString(\"\
    *\")\n        val opList14 = op.mkString(\"//\")\n        val opList15 = op.mkString(\"\
    **\")\n        val opList16 = op.mkString(\"+\")\n        val opList17 = op.mkString(\"\
    -\")\n        val opList18 = op.mkString(\"*\")\n        val opList19 = op.mkString(\"\
    //\")\n        val opList20 = op.mkString(\"**\")\n        val opList21 = op.mkString(\"\
    +\")\n        val opList22 = op.mkString(\"-\")\n        val opList23 = op.mkString(\"\
    *\")\n        val opList24 = op.mkString(\"//\")\n        val opList25 = op.mkString(\"\
    **\")\n        val opList26 = op.mkString(\"+\")\n        val opList27 = op.mkString(\"\
    -\")\n        val opList28 = op.mkString(\"*\")\n        val opList29 = op.mkString(\"\
    //\")\n        val opList30 = op.mkString(\"**\")\n        val opList31 = op.mkString(\"\
    +\")\n        val opList32 = op.mkString(\"-\")\n        val opList33 = op.mkString(\"\
    *\")\n        val opList34 = op.mkString(\"//\")\n        val opList35 = op.mkString(\"\
    **\")\n        val opList36 = op.mkString(\"+\")\n        val opList37 = op.mkString(\"\
    -\")\n        val opList38 = op.mkString(\"*\")\n        val opList39 = op.mkString(\"\
    //\")\n        val opList40 = op.mkString(\"**\")\n        val opList41 = op.mkString(\"\
    +\")\n        val opList42 = op.mkString(\"-\")\n        val opList43 = op.mkString(\"\
    *\")\n        val opList44 = op.mkString(\"//\")\n        val opList45 = op.mkString(\"\
    **\")\n        val op", "        val opList = op.map(_.toUpperCase)\n        val\
    \ operandList = operand.map(_.toLong)\n        val opLen = opList.size\n     \
    \   val operandLen = operandList.size\n        val opIndex = opList.indexOf(\"\
    +\")\n        val operandIndex = operandList.indexOf(0)\n        val op1 = opList(0)\n\
    \        val op2 = opList(1)\n        val op3 = opList(opIndex+1)\n        val\
    \ op4 = opList(opIndex+2)\n        val op5 = opList(opIndex+3)\n        val op6\
    \ = opList(opIndex+4)\n        val op7 = opList(opIndex+5)\n        val op8 =\
    \ opList(opIndex+6)\n        val op9 = opList(opIndex+7)\n        val op10 = opList(opIndex+8)\n\
    \        val op11 = opList(opIndex+9)\n        val op12 = opList(opIndex+10)\n\
    \        val op13 = opList(opIndex+11)\n        val op14 = opList(opIndex+12)\n\
    \        val op15 = opList(opIndex+13)\n        val op16 = opList(opIndex+14)\n\
    \        val op17 = opList(opIndex+15)\n        val op18 = opList(opIndex+16)\n\
    \        val op19 = opList(opIndex+17)\n        val op20 = opList(opIndex+18)\n\
    \        val op21 = opList(opIndex+19)\n        val op22 = opList(opIndex+20)\n\
    \        val op23 = opList(opIndex+21)\n        val op24 = opList(opIndex+22)\n\
    \        val op25 = opList(opIndex+23)\n        val op26 = opList(opIndex+24)\n\
    \        val op27 = opList(opIndex+25)\n        val op28 = opList(opIndex+26)\n\
    \        val op29 = opList(opIndex+27)\n        val op30 = opList(opIndex+28)\n\
    \        val op31 = opList(opIndex+29)\n        val op32 = opList(opIndex+30)\n\
    \        val op33 = opList(opIndex+31)\n        val op34 = opList(opIndex+32)\n\
    \        val op35 = opList(opIndex+33)\n        val op36 = opList(opIndex+34)\n\
    \        val op37 = opList(opIndex+35)\n        val op38 = opList(opIndex+36)\n\
    \        val op39", "        val ops = op.map(_.toUpperCase)\n        val opList\
    \ = ops.toList\n        val operands = operand.toList\n        val operandList\
    \ = operands.toList\n        val opLen = opList.size\n        val operandLen =\
    \ operandList.size\n        val opIndex = ops.indexOf(\"+\")\n        val opIndex2\
    \ = ops.indexOf(\"-\")\n        val opIndex3 = ops.indexOf(\"*\")\n        val\
    \ opIndex4 = ops.indexOf(\"/\")\n        val opIndex5 = ops.indexOf(\"**\")\n\
    \        val opIndex6 = ops.indexOf(\"//\")\n        val opIndex7 = ops.indexOf(\"\
    %\")\n        val opIndex8 = ops.indexOf(\"*\")\n        val opIndex9 = ops.indexOf(\"\
    +\")\n        val opIndex10 = ops.indexOf(\"+\")\n        val opIndex11 = ops.indexOf(\"\
    *\")\n        val opIndex12 = ops.indexOf(\"*\")\n        val opIndex13 = ops.indexOf(\"\
    *\")\n        val opIndex14 = ops.indexOf(\"*\")\n        val opIndex15 = ops.indexOf(\"\
    *\")\n        val opIndex16 = ops.indexOf(\"*\")\n        val opIndex17 = ops.indexOf(\"\
    *\")\n        val opIndex18 = ops.indexOf(\"*\")\n        val opIndex19 = ops.indexOf(\"\
    *\")\n        val opIndex20 = ops.indexOf(\"*\")\n        val opIndex21 = ops.indexOf(\"\
    *\")\n        val opIndex22 = ops.indexOf(\"*\")\n        val opIndex23 = ops.indexOf(\"\
    *\")\n        val opIndex24 = ops.indexOf(\"*\")\n        val opIndex25 = ops.indexOf(\"\
    *\")\n        val opIndex26 = ops.indexOf(\"*\")\n        val opIndex27 = ops.indexOf(\"\
    *\")\n        val opIndex28 = ops.indexOf(\"*\")\n        val opIndex29 = ops.indexOf(\"\
    *\")\n        val opIndex30 = ops.indexOf(\"*\")\n        val opIndex31 = ops.indexOf(\"\
    *\")\n        val opIndex32 = ops.indexOf(\"*\")\n        val opIndex33 = ops.indexOf(\"\
    *\")\n        val opIndex34 = ops.indexOf(\"*\")\n        val opIndex35 = ops.indexOf(\"\
    *\")\n        val opIndex36 = ops.indexOf(\"*\")\n        val opIndex37 = ops.indexOf(\"\
    *\")\n        val opIndex38 = ops.indexOf(\"*\")\n        val opIndex39 = ops.indexOf(\"\
    *\")\n        val opIndex40 = ops.indexOf(\"*\")\n        val opIndex41 = ops.indexOf(\"\
    *\")\n        val opIndex42 = ops.indexOf(\"*\")\n        val opIndex43 = ", " \
    \       val ops = op.map(x => x.toChar)\n        val operands = operand.map(x\
    \ => x.toLong)\n        val opLen = ops.size\n        val operandLen = operands.size\n\
    \        val opIndex = ops.indexOf(\"+\")\n        val op1 = ops(opIndex - 1)\n\
    \        val op2 = ops(opIndex)\n        val op3 = ops(opIndex + 1)\n        val\
    \ op4 = ops(opIndex + 2)\n        val op5 = ops(opIndex + 3)\n        val op6\
    \ = ops(opIndex + 4)\n        val op7 = ops(opIndex + 5)\n        val op8 = ops(opIndex\
    \ + 6)\n        val op9 = ops(opIndex + 7)\n        val op10 = ops(opIndex + 8)\n\
    \        val op11 = ops(opIndex + 9)\n        val op12 = ops(opIndex + 10)\n \
    \       val op13 = ops(opIndex + 11)\n        val op14 = ops(opIndex + 12)\n \
    \       val op15 = ops(opIndex + 13)\n        val op16 = ops(opIndex + 14)\n \
    \       val op17 = ops(opIndex + 15)\n        val op18 = ops(opIndex + 16)\n \
    \       val op19 = ops(opIndex + 17)\n        val op20 = ops(opIndex + 18)\n \
    \       val op21 = ops(opIndex + 19)\n        val op22 = ops(opIndex + 20)\n \
    \       val op23 = ops(opIndex + 21)\n        val op24 = ops(opIndex + 22)\n \
    \       val op25 = ops(opIndex + 23)\n        val op26 = ops(opIndex + 24)\n \
    \       val op27 = ops(opIndex + 25)\n        val op28 = ops(opIndex + 26)\n \
    \       val op29 = ops(opIndex + 27)\n        val op30 = ops(opIndex + 28)\n \
    \       val op31 = ops(opIndex + 29)\n        val op32 = ops(opIndex + 30)\n \
    \       val op33 = ops(opIndex + 31)\n        val op34 = ops(opIndex + 32)\n \
    \       val op35 = ops(opIndex + 33)\n        val op36 = ops(opIndex + 34)\n \
    \       val op37 = ops(opIndex + 35)\n        val op38 = ops(opIndex + 36)\n \
    \       val op39 = ops(opIndex", "        val ops = op.map(_.toLowerCase)\n  \
    \      val operands = operand.map(_.toLong)\n        val opLen = ops.size\n  \
    \      val opLenMinusOne = opLen - 1\n        val operandLen = operands.size -\
    \ 1\n        val opLenMinusOneMinusOne = opLenMinusOne - 1\n        val opLenMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOne = operandLen\
    \ - 1 - 1\n        val operandLenMinusOneMinusOneMinusOne = operandLenMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne = operandLenMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne = operandLenMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val\
    \ operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne =\
    \ operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne -\
    \ 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = ", "        val opList = op.map(_.toLowerCase).toList\n        val operandList\
    \ = operand.map(_.toLong).toList\n        val opLen = opList.size\n        val\
    \ operandLen = operandList.size\n        val opLenMinusOne = opLen - 1\n     \
    \   val operandLenMinusOne = operandLen - 1\n        val opLenMinusTwo = opLen\
    \ - 2\n        val operandLenMinusTwo = operandLen - 2\n        val opLenMinusThree\
    \ = opLen - 3\n        val operandLenMinusThree = operandLen - 3\n        val\
    \ opLenMinusFour = opLen - 4\n        val operandLenMinusFour = operandLen - 4\n\
    \        val opLenMinusFive = opLen - 5\n        val operandLenMinusFive = operandLen\
    \ - 5\n        val opLenMinusSix = opLen - 6\n        val operandLenMinusSix =\
    \ operandLen - 6\n        val opLenMinusSeven = opLen - 7\n        val operandLenMinusSeven\
    \ = operandLen - 7\n        val opLenMinusEight = opLen - 8\n        val operandLenMinusEight\
    \ = operandLen - 8\n        val opLenMinusNine = opLen - 9\n        val operandLenMinusNine\
    \ = operandLen - 9\n        val opLenMinusTen = opLen - 10\n        val operandLenMinusTen\
    \ = operandLen - 10\n        val opLenMinusEleven = opLen - 11\n        val operandLenMinusEleven\
    \ = operandLen - 11\n        val opLenMinusTwelve = opLen - 12\n        val operandLenMinusTwelve\
    \ = operandLen - 12\n        val opLenMinusThirteen = opLen - 13\n        val\
    \ operandLenMinusThirteen = operandLen - 13\n        val opLenMinusFourteen =\
    \ opLen - 14\n        val operandLenMinusFourteen = operandLen - 14\n        val\
    \ opLenMinusFifteen = opLen - 15\n        val operandLenMinusFifteen = operandLen\
    \ - 15\n        val opLenMinusSixteen = opLen - 16\n        val operandLenMinusSixteen\
    \ = operandLen - 16\n        val opLenMinusSeventeen = opLen - 17\n        val\
    \ operandLenMinusSeventeen = operandLen - 17\n", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLength = opList.length\n\
    \        val operandLength = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val opMap2 = new mutable.HashMap[String, Long]()\n        val operandMap2\
    \ = new mutable.HashMap[String, Long]()\n        val opMap3 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap3 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap4 = new mutable.HashMap[String, Long]()\n        val operandMap4\
    \ = new mutable.HashMap[String, Long]()\n        val opMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap5 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap6 = new mutable.HashMap[String, Long]()\n        val operandMap6\
    \ = new mutable.HashMap[String, Long]()\n        val opMap7 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap7 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap8 = new mutable.HashMap[String, Long]()\n        val operandMap8\
    \ = new mutable.HashMap[String, Long]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap9 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap10 = new mutable.HashMap[String, Long]()\n        val operandMap10\
    \ = new mutable.HashMap[String, Long]()\n        val opMap11 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap11 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap12 = new mutable.HashMap[String, Long]()\n        val operandMap12\
    \ = new mutable.HashMap[String, Long]()\n        val opMap13 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap13 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap14 = new mutable.HashMap[String, Long]()\n        val operandMap14\
    \ = new mutable.HashMap[String, Long]()\n        val opMap15 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap15 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap16 = new mutable.HashMap[String, Long]()\n        val operandMap16\
    \ = new mutable.Hash", "        val opList = op.map(_.toUpperCase)\n        val\
    \ operandList = operand.map(_.toLong)\n        val opLen = opList.length\n   \
    \     val operandLen = operandList.length\n        val opMap = opList.zip(operandList)\n\
    \        val opMapLen = opMap.length\n        val opMapSet = opMap.map(x => x._1\
    \ + \"*\" + x._2)\n        val opMapSetLen = opMapSet.length\n        val opMapSetSet\
    \ = opMapSet.map(x => x.toUpperCase)\n        val opMapSetSetLen = opMapSetSet.length\n\
    \        val opMapSetSetSet = opMapSetSet.map(x => x.toUpperCase)\n        val\
    \ opMapSetSetSetLen = opMapSetSet.length\n        val opMapSetSetSet = opMapSetSet.map(x\
    \ => x.toUpperCase)\n        val opMapSetSetSetLen = opMapSetSet.length\n    \
    \    val opMapSetSetSet = opMapSetSet.map(x => x.toUpperCase)\n        val opMapSetSetSetLen\
    \ = opMapSetSet.length\n        val opMapSetSetSet = opMapSetSet.map(x => x.toUpperCase)\n\
    \        val opMapSetSetSetLen = opMapSetSet.length\n        val opMapSetSetSet\
    \ = opMapSetSet.map(x => x.toUpperCase)\n        val opMapSetSetSetLen = opMapSetSet.length\n\
    \        val opMapSetSetSet = opMapSetSet.map(x => x.toUpperCase)\n        val\
    \ opMapSetSetSetLen = opMapSetSet.length\n        val opMapSetSetSet = opMapSetSet.map(x\
    \ => x.toUpperCase)\n        val opMapSetSetSetLen = opMapSetSet.length\n    \
    \    val opMapSetSetSet = opMapSetSet.map(x => x.toUpperCase)\n        val opMapSetSetSetLen\
    \ = opMapSetSet.length\n        val opMapSetSetSet = opMapSetSet.map(x => x.toUpperCase)\n\
    \        val opMapSetSetSetLen = opMapSetSet.length\n        val opMapSetSetSet\
    \ = opMapSetSet.map(x => x.toUpperCase)\n        val opMapSetSetSetLen = opMapSetSet.length\n\
    \        val opMapSetSetSet = opMapSetSet.map(x => x.toUpperCase)\n        val\
    \ opMapSetSetSetLen = opMapSetSet.length\n        ", "        val ops = op.map(x\
    \ => x.toDouble)\n        val operands = operand.map(x => x.toDouble)\n      \
    \  val opLen = ops.size\n        val operandLen = operands.size\n        val opIndex\
    \ = ops.indexWhere(x => x == 1.0)\n        val op1 = ops(opIndex).toInt\n    \
    \    val op2 = ops(opIndex + 1).toInt\n        val op3 = ops(opIndex + 2).toInt\n\
    \        val op4 = ops(opIndex + 3).toInt\n        val op5 = ops(opIndex + 4).toInt\n\
    \        val op6 = ops(opIndex + 5).toInt\n        val op7 = ops(opIndex + 6).toInt\n\
    \        val op8 = ops(opIndex + 7).toInt\n        val op9 = ops(opIndex + 8).toInt\n\
    \        val op10 = ops(opIndex + 9).toInt\n        val op11 = ops(opIndex + 10).toInt\n\
    \        val op12 = ops(opIndex + 11).toInt\n        val op13 = ops(opIndex +\
    \ 12).toInt\n        val op14 = ops(opIndex + 13).toInt\n        val op15 = ops(opIndex\
    \ + 14).toInt\n        val op16 = ops(opIndex + 15).toInt\n        val op17 =\
    \ ops(opIndex + 16).toInt\n        val op18 = ops(opIndex + 17).toInt\n      \
    \  val op19 = ops(opIndex + 18).toInt\n        val op20 = ops(opIndex + 19).toInt\n\
    \        val op21 = ops(opIndex + 20).toInt\n        val op22 = ops(opIndex +\
    \ 21).toInt\n        val op23 = ops(opIndex + 22).toInt\n        val op24 = ops(opIndex\
    \ + 23).toInt\n        val op25 = ops(opIndex + 24).toInt\n        val op26 =\
    \ ops(opIndex + 25).toInt\n        val op27 = ops(opIndex + 26).toInt\n      \
    \  val op28 = ops(opIndex + 27).toInt\n        val op29 = ops(opIndex + 28).toInt\n\
    \        val op30 = ops(opIndex + 29).toInt\n        val op31 = ops(opIndex +\
    \ 30).toInt\n        val op32 = ops(opIndex + 31).toInt\n        val op33 = ops(opIndex\
    \ + 32).toInt\n        val op34 = ops(opIndex", "        val opList = op.mkString(\"\
    +\")\n        val opListLength = opList.length\n        val operandList = operand.map(_.toLong)\n\
    \        val operandListLength = operandList.length\n        val result = operandList(0)\n\
    \        val ops = opList.split(\"\\\\+\")\n        val opLength = ops.length\n\
    \        val operand = operandList.take(opLength-1)\n        val operandLength\
    \ = operand.length\n        val op1 = ops.head\n        val op2 = ops.last\n \
    \       val op1Length = op1.length\n        val op2Length = op2.length\n     \
    \   val op1Index = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n\
    \        val op1Value = operand(operandListLength-op1Index-1)\n        val op2Value\
    \ = operand(operandListLength-op2Index-1)\n        val op1Index = ops.indexOf(op1)\n\
    \        val op2Index = ops.indexOf(op2)\n        val op1Value = operand(operandListLength-op1Index-1)\n\
    \        val op2Value = operand(operandListLength-op2Index-1)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Value\
    \ = operand(operandListLength-op1Index-1)\n        val op2Value = operand(operandListLength-op2Index-1)\n\
    \        val op1Index = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n\
    \        val op1Value = operand(operandListLength-op1Index-1)\n        val op2Value\
    \ = operand(operandListLength-op2Index-1)\n        val op1Index = ops.indexOf(op1)\n\
    \        val op2Index = ops.indexOf(op2)\n        val op1Value = operand(operandListLength-op1Index-1)\n\
    \        val op2Value = operand(operandListLength-op2Index-1)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Value\
    \ = operand(operandListLength-op1Index-1)\n        val op2Value = operand(operandListLength-op2Index-1)\n\
    \        val op1Index = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n\
    \        val op1Value = operand(operandListLength-op1Index-1)\n        val op2Value\
    \ = operand(operandListLength-op2Index-1)\n        val op1Index = ops.indexOf(op1)\n\
    \        val op2Index = ops.indexOf(op2)\n        val op1Value = operand(operandListLength-op1Index-1)",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toInt)\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\n\
    \        val opIndex = opList.indexOf(\"+\")\n        val opIndex2 = opList.indexOf(\"\
    *\")\n        val opIndex3 = opList.indexOf(\"/\")\n        val opIndex4 = opList.indexOf(\"\
    **\")\n        val opIndex5 = opList.indexOf(\"//\")\n        val opIndex6 = opList.indexOf(\"\
    %\")\n        val opIndex7 = opList.indexOf(\"*\")\n        val opIndex8 = opList.indexOf(\"\
    +\")\n        val opIndex9 = opList.indexOf(\"-\")\n        val opIndex10 = opList.indexOf(\"\
    +\")\n        val opIndex11 = opList.indexOf(\"*\")\n        val opIndex12 = opList.indexOf(\"\
    +\")\n        val opIndex13 = opList.indexOf(\"*\")\n        val opIndex14 = opList.indexOf(\"\
    +\")\n        val opIndex15 = opList.indexOf(\"*\")\n        val opIndex16 = opList.indexOf(\"\
    +\")\n        val opIndex17 = opList.indexOf(\"*\")\n        val opIndex18 = opList.indexOf(\"\
    +\")\n        val opIndex19 = opList.indexOf(\"*\")\n        val opIndex20 = opList.indexOf(\"\
    +\")\n        val opIndex21 = opList.indexOf(\"*\")\n        val opIndex22 = opList.indexOf(\"\
    +\")\n        val opIndex23 = opList.indexOf(\"*\")\n        val opIndex24 = opList.indexOf(\"\
    +\")\n        val opIndex25 = opList.indexOf(\"*\")\n        val opIndex26 = opList.indexOf(\"\
    +\")\n        val opIndex27 = opList.indexOf(\"*\")\n        val opIndex28 = opList.indexOf(\"\
    +\")\n        val opIndex29 = opList.indexOf(\"*\")\n        val opIndex30 = opList.indexOf(\"\
    +\")\n        val opIndex31 = opList.indexOf(\"*\")\n        val opIndex32 = opList.indexOf(\"\
    +\")\n        val opIndex33 = opList.indexOf(\"*\")\n        val opIndex34 = opList.indexOf(\"\
    +\")\n        val opIndex35 = opList.indexOf(\"*\")\n        val opIndex36 = opList.indexOf(\"\
    +\")\n        val opIndex37 = opList.indexOf(\"*\")\n        val opIndex38 = opList.indexOf(\"\
    +\")\n        val opIndex39 = opList.indexOf(\"*\")\n        val opIndex40 = opList.indexOf(\"\
    +\")\n        val op", "        val opList = op.mkString(\"+\")\n        val opList2\
    \ = op.mkString(\"*\")\n        val opList3 = op.mkString(\"//\")\n        val\
    \ opList4 = op.mkString(\"**\")\n        val opList5 = op.mkString(\"+\")\n  \
    \      val opList6 = op.mkString(\"*\")\n        val opList7 = op.mkString(\"\
    //\")\n        val opList8 = op.mkString(\"**\")\n        val opList9 = op.mkString(\"\
    +\")\n        val opList10 = op.mkString(\"*\")\n        val opList11 = op.mkString(\"\
    //\")\n        val opList12 = op.mkString(\"**\")\n        val opList13 = op.mkString(\"\
    +\")\n        val opList14 = op.mkString(\"*\")\n        val opList15 = op.mkString(\"\
    //\")\n        val opList16 = op.mkString(\"**\")\n        val opList17 = op.mkString(\"\
    +\")\n        val opList18 = op.mkString(\"*\")\n        val opList19 = op.mkString(\"\
    //\")\n        val opList20 = op.mkString(\"**\")\n        val opList21 = op.mkString(\"\
    +\")\n        val opList22 = op.mkString(\"*\")\n        val opList23 = op.mkString(\"\
    //\")\n        val opList24 = op.mkString(\"**\")\n        val opList25 = op.mkString(\"\
    +\")\n        val opList26 = op.mkString(\"*\")\n        val opList27 = op.mkString(\"\
    //\")\n        val opList28 = op.mkString(\"**\")\n        val opList29 = op.mkString(\"\
    +\")\n        val opList30 = op.mkString(\"*\")\n        val opList31 = op.mkString(\"\
    //\")\n        val opList32 = op.mkString(\"**\")\n        val opList33 = op.mkString(\"\
    +\")\n        val opList34 = op.mkString(\"*\")\n        val opList35 = op.mkString(\"\
    //\")\n        val opList36 = op.mkString(\"**\")\n        val opList37 = op.mkString(\"\
    +\")\n        val opList38 = op.mkString(\"*\")\n        val opList39 = op.mkString(\"\
    //\")\n        val opList40 = op.mkString(\"**\")\n        val opList41 = op.mkString(\"\
    +\")\n        val opList42 = op.mkString(\"*\")\n        val opList43 = op.mkString(\"\
    //\")\n        val opList44 = op.mkString(\"**\")\n        val opList45 = op.mkString(\"\
    +\")\n        val opList46 = op.mk", "        val opList = op.mkString(\"+\")\n\
    \        val opListLen = opList.length\n        val operandList = operand.mkString(\"\
    +\")\n        val operandListLen = operandList.length\n        val opListLenMinusOne\
    \ = opListLen - 1\n        val operandListLenMinusOne = operandListLen - 1\n \
    \       val opListLenMinusTwo = opListLen - 2\n        val operandListLenMinusTwo\
    \ = operandListLen - 2\n        val opListLenMinusThree = opListLen - 3\n    \
    \    val operandListLenMinusThree = operandListLen - 3\n        val opListLenMinusFour\
    \ = opListLen - 4\n        val operandListLenMinusFour = operandListLen - 4\n\
    \        val opListLenMinusFive = opListLen - 5\n        val operandListLenMinusFive\
    \ = operandListLen - 5\n        val opListLenMinusSix = opListLen - 6\n      \
    \  val operandListLenMinusSix = operandListLen - 6\n        val opListLenMinusSeven\
    \ = opListLen - 7\n        val operandListLenMinusSeven = operandListLen - 7\n\
    \        val opListLenMinusEight = opListLen - 8\n        val operandListLenMinusEight\
    \ = operandListLen - 8\n        val opListLenMinusNine = opListLen - 9\n     \
    \   val operandListLenMinusNine = operandListLen - 9\n        val opListLenMinusTen\
    \ = opListLen - 10\n        val operandListLenMinusTen = operandListLen - 10\n\
    \        val opListLenMinusEleven = opListLen - 11\n        val operandListLenMinusEleven\
    \ = operandListLen - 11\n        val opListLenMinusTwelve = opListLen - 12\n \
    \       val operandListLenMinusTwelve = operandListLen - 12\n        val opListLenMinusThirteen\
    \ = opListLen - 13\n        val operandListLenMinusThirteen = operandListLen -\
    \ 13\n        val opListLenMinusFourteen = opListLen - 14\n        val operandListLenMinusFourteen\
    \ = operandListLen - 14\n        val opListLenMinusFifteen = opListLen - 15\n\
    \        val operandListLenMinusFifteen = operandListLen - 15\n        val op",
  "        val opList = op.map(_.toUpperCase)\n        val opLen = opList.length\n\
    \        val operandList = operand.map(_.toLong)\n        val operandLen = operandList.length\n\
    \        val result = operandList.foldLeft(operandList.head) { (acc, cur) => \n\
    \            val op = opList.zip(operandList).find(_._1 == cur._1).get._2\n  \
    \          val operand = cur._2\n            val opLen = opList.length\n     \
    \       val operandLen = operandList.length\n            val opIndex = opList.indexOf(op)\n\
    \            val operandIndex = operandList.indexOf(operand)\n            val\
    \ opVal = opIndex.toLong\n            val operandVal = operandIndex.toLong\n \
    \           val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValLong = opVal.toLong\n            val operandValLong = operandVal.toLong\n\
    \            val opValFloat = opVal.toFloat\n            val operandValFloat =\
    \ operandVal.toFloat\n            val opValDouble = opVal.toDouble\n         \
    \   val operandValDouble = operandVal.toDouble\n            val opValString =\
    \ opVal.toString\n            val operandValString = operandVal.toString\n   \
    \         val opValBool = opVal.toBoolean\n            val operandValBool = operandVal.toBoolean\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValLong = opVal.toLong\n            val operandValLong = operandVal.toLong\n\
    \            val opValFloat = opVal.toFloat\n            val operandValFloat =\
    \ operandVal.toFloat\n            val opValDouble = opVal.toDouble\n         \
    \   val operandValDouble = operandVal.toDouble\n            val opValString =\
    \ opVal.toString\n            val operandValString = operandVal.toString\n   \
    \         val opValBool = opVal.toBoolean\n            val operandValBool = operandVal.toBoolean\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValLong = opVal.toLong\n            val operandValLong = operandVal.toLong\n\
    \            val opValFloat = opVal.toFloat\n            val operandValFloat =\
    \ operandVal.toFloat\n            val opValDouble = opVal.toDouble\n         \
    \   val operandValDouble = operandVal.toDouble\n            val opValString =\
    \ opVal.toString\n            val operandValString = operandVal.toString\n   \
    \         val opValBool", "        val opList = op.mkString(\"+\")\n        val\
    \ opList2 = op.mkString(\"*\")\n        val opList3 = op.mkString(\"//\")\n  \
    \      val opList4 = op.mkString(\"**\")\n        val opList5 = op.mkString(\"\
    +\")\n        val opList6 = op.mkString(\"*\")\n        val opList7 = op.mkString(\"\
    //\")\n        val opList8 = op.mkString(\"**\")\n        val opList9 = op.mkString(\"\
    +\")\n        val opList10 = op.mkString(\"*\")\n        val opList11 = op.mkString(\"\
    //\")\n        val opList12 = op.mkString(\"**\")\n        val opList13 = op.mkString(\"\
    +\")\n        val opList14 = op.mkString(\"*\")\n        val opList15 = op.mkString(\"\
    //\")\n        val opList16 = op.mkString(\"**\")\n        val opList17 = op.mkString(\"\
    +\")\n        val opList18 = op.mkString(\"*\")\n        val opList19 = op.mkString(\"\
    //\")\n        val opList20 = op.mkString(\"**\")\n        val opList21 = op.mkString(\"\
    +\")\n        val opList22 = op.mkString(\"*\")\n        val opList23 = op.mkString(\"\
    //\")\n        val opList24 = op.mkString(\"**\")\n        val opList25 = op.mkString(\"\
    +\")\n        val opList26 = op.mkString(\"*\")\n        val opList27 = op.mkString(\"\
    //\")\n        val opList28 = op.mkString(\"**\")\n        val opList29 = op.mkString(\"\
    +\")\n        val opList30 = op.mkString(\"*\")\n        val opList31 = op.mkString(\"\
    //\")\n        val opList32 = op.mkString(\"**\")\n        val opList33 = op.mkString(\"\
    +\")\n        val opList34 = op.mkString(\"*\")\n        val opList35 = op.mkString(\"\
    //\")\n        val opList36 = op.mkString(\"**\")\n        val opList37 = op.mkString(\"\
    +\")\n        val opList38 = op.mkString(\"*\")\n        val opList39 = op.mkString(\"\
    //\")\n        val opList40 = op.mkString(\"**\")\n        val opList41 = op.mkString(\"\
    +\")\n        val opList42 = op.mkString(\"*\")\n        val opList43 = op.mkString(\"\
    //\")\n        val opList44 = op.mkString(\"**\")\n        val opList45 = op.mkString(\"\
    +\")\n        val opList46 = op.mk", "        val opList = op.map(_.toLowerCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.length\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operandList.length\n\
    \        val operandLenMinusOne = operandLen - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val opMapKeys = opList.map(x => x.toLowerCase)\n        val operandMapKeys\
    \ = operandList.map(x => x.toLong)\n        val opMapValues = opList.map(x =>\
    \ 1L)\n        val operandMapValues = operandList.map(x => 1L)\n        val opMapKeysSet\
    \ = opMapKeys.toSet\n        val operandMapKeysSet = operandMapKeys.toSet\n  \
    \      val opMapValueSet = opMapValues.toSet\n        val operandMapValueSet =\
    \ operandMapValues.toSet\n        val opMapKeysSet2 = opMapKeys.filter(x => !opMapKeysSet.contains(x))\n\
    \        val operandMapKeysSet2 = operandMapKeys.filter(x => !operandMapKeysSet.contains(x))\n\
    \        val opMapValueSet2 = opMapValues.filter(x => !opMapValueSet.contains(x))\n\
    \        val operandMapValueSet2 = operandMapValues.filter(x => !operandMapValueSet.contains(x))\n\
    \        val opMapKeysSet3 = opMapKeys.filter(x => !opMapKeysSet2.contains(x))\n\
    \        val operandMapKeysSet3 = operandMapKeys.filter(x => !operandMapKeysSet2.contains(x))\n\
    \        val opMapValueSet3 = opMapValues.filter(x => !opMapValueSet2.contains(x))\n\
    \        val operandMapValueSet3 = operandMapValues.filter(x => !operandMapValueSet2.contains(x))\n\
    \        val opMapKeysSet4 = opMapKeys.filter(x => !opMapKeysSet3.contains(x))\n\
    \        val operandMapKeysSet4 = operandMapKeys.filter(x => !operandMapKeysSet3.contains(x))\n\
    \        val opMapValueSet4 = opMapValues.filter(x => !opMapValueSet3.contains(x))\n\
    \        val operandMapValueSet4 = operandMapValues.filter(x => !operandMapValueSet3.contains(x))\n\
    \        val opMapKeysSet5 = opMapKeys.filter(x => !opMapKeysSet4.contains(x))\n\
    \        val operand", "        val opList = op.map(_.toUpperCase)\n        val\
    \ operandList = operand.map(_.toLong)\n        val opLength = opList.length\n\
    \        val operandLength = operandList.length - 1\n        val opListLength\
    \ = opList.length\n        val operandListLength = operandList.length\n      \
    \  val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opList", "        val ops = op.map(x => x.toChar)\n        val opList\
    \ = ops.toList\n        val operands = operand.toList\n        val opLen = opList.size\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operands.size\
    \ - 1\n        val opLenMinusOneMinusOne = opLenMinusOne - 1\n        val opLenMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOne - 1\n        val operandLenMinusOne = operandLen - 1\n\
    \        val operandLenMinusOneMinusOne = operandLenMinusOne - 1\n        val\
    \ operandLenMinusOneMinusOneMinusOne = operandLenMinusOneMinusOne - 1\n      \
    \  val opLenMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOne -\
    \ 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne = operandLenMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne = operandLenMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n \
    \       val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMin",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opMap2 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap2 = new mutable.HashMap[String, Long]()\n        val opMap3 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap3 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap4 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap4 = new mutable.HashMap[String, Long]()\n        val opMap5 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap6 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap6 = new mutable.HashMap[String, Long]()\n        val opMap7 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap7 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap8 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap8 = new mutable.HashMap[String, Long]()\n        val opMap9 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap10 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap10 = new mutable.HashMap[String, Long]()\n        val opMap11\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap11 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap12 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap12 = new mutable.HashMap[String, Long]()\n        val opMap13\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap13 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap14 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap14 = new mutable.HashMap[String, Long]()\n        val opMap15\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap15 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap16 = new mutable.Hash"]
stop_tokens:
- "\n    }\n"
