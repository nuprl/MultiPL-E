name: HumanEval_160_do_algebra
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n    // the second list is a list of integers. Use the two given\
  \ lists to build the algebric \n    // expression and return the evaluation of this\
  \ expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n  \
  \  // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division (\
  \ // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*',\
  \ '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result\
  \ = 9\n    // Note:\n    // The length of operator list is equal to the length of\
  \ operand list minus one.\n    // Operand is a list of of non-negative integers.\n\
  \    // Operator list has at least one operator, and operand list has at least two\
  \ operands.\n    def doAlgebra(op : List[String], operand : List[Long]) : Long =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
  **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
  \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
  //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
  \n}\n"
completions: ["        val ops = op.mkString(\"+\")\n        val ops = ops.replaceAll(\"\
    \\\\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val\
    \ ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val ops = ops.replaceAll(\"\\\
    \\//\", \"/\")\n        val ops = ops.replaceAll(\"\\\\**\", \"**\")\n       \
    \ val ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\
    \\\\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"\\\\*\", \"*\")\n        val ops = ops.replaceAll(\"\\\
    \\+\", \"+\")\n        val ops = ops.replaceAll(\"\\\\-\", \"-\")\n        val\
    \ ops = ops.replaceAll(\"", "        val opList = op.mkString(\"+\")\n       \
    \ val opList2 = op.mkString(\"-\")\n        val opList3 = op.mkString(\"*\")\n\
    \        val opList4 = op.mkString(\"//\")\n        val opList5 = op.mkString(\"\
    **\")\n        val opList6 = op.mkString(\"+\")\n        val opList7 = op.mkString(\"\
    -\")\n        val opList8 = op.mkString(\"*\")\n        val opList9 = op.mkString(\"\
    //\")\n        val opList10 = op.mkString(\"**\")\n        val opList11 = op.mkString(\"\
    +\")\n        val opList12 = op.mkString(\"-\")\n        val opList13 = op.mkString(\"\
    *\")\n        val opList14 = op.mkString(\"//\")\n        val opList15 = op.mkString(\"\
    **\")\n        val opList16 = op.mkString(\"+\")\n        val opList17 = op.mkString(\"\
    -\")\n        val opList18 = op.mkString(\"*\")\n        val opList19 = op.mkString(\"\
    //\")\n        val opList20 = op.mkString(\"**\")\n        val opList21 = op.mkString(\"\
    +\")\n        val opList22 = op.mkString(\"-\")\n        val opList23 = op.mkString(\"\
    *\")\n        val opList24 = op.mkString(\"//\")\n        val opList25 = op.mkString(\"\
    **\")\n        val opList26 = op.mkString(\"+\")\n        val opList27 = op.mkString(\"\
    -\")\n        val opList28 = op.mkString(\"*\")\n        val opList29 = op.mkString(\"\
    //\")\n        val opList30 = op.mkString(\"**\")\n        val opList31 = op.mkString(\"\
    +\")\n        val opList32 = op.mkString(\"-\")\n        val opList33 = op.mkString(\"\
    *\")\n        val opList34 = op.mkString(\"//\")\n        val opList35 = op.mkString(\"\
    **\")\n        val opList36 = op.mkString(\"+\")\n        val opList37 = op.mkString(\"\
    -\")\n        val opList38 = op.mkString(\"*\")\n        val opList39 = op.mkString(\"\
    //\")\n        val opList40 = op.mkString(\"**\")\n        val opList41 = op.mkString(\"\
    +\")\n        val opList42 = op.mkString(\"-\")\n        val opList43 = op.mkString(\"\
    *\")\n        val opList44 = op.mkString(\"//\")\n        val opList45 = op.mkString(\"\
    **\")\n        val op", "        val opList = op.map(_.toUpperCase)\n        val\
    \ operandList = operand.map(_.toLong)\n        val opLen = opList.size\n     \
    \   val operandLen = operandList.size\n        val opIndex = opList.indexOf(\"\
    +\")\n        val operandIndex = operandList.indexOf(0)\n        val op1 = opList(0)\n\
    \        val op2 = opList(1)\n        val op3 = opList(opIndex+1)\n        val\
    \ op4 = opList(opIndex+2)\n        val op5 = opList(opIndex+3)\n        val op6\
    \ = opList(opIndex+4)\n        val op7 = opList(opIndex+5)\n        val op8 =\
    \ opList(opIndex+6)\n        val op9 = opList(opIndex+7)\n        val op10 = opList(opIndex+8)\n\
    \        val op11 = opList(opIndex+9)\n        val op12 = opList(opIndex+10)\n\
    \        val op13 = opList(opIndex+11)\n        val op14 = opList(opIndex+12)\n\
    \        val op15 = opList(opIndex+13)\n        val op16 = opList(opIndex+14)\n\
    \        val op17 = opList(opIndex+15)\n        val op18 = opList(opIndex+16)\n\
    \        val op19 = opList(opIndex+17)\n        val op20 = opList(opIndex+18)\n\
    \        val op21 = opList(opIndex+19)\n        val op22 = opList(opIndex+20)\n\
    \        val op23 = opList(opIndex+21)\n        val op24 = opList(opIndex+22)\n\
    \        val op25 = opList(opIndex+23)\n        val op26 = opList(opIndex+24)\n\
    \        val op27 = opList(opIndex+25)\n        val op28 = opList(opIndex+26)\n\
    \        val op29 = opList(opIndex+27)\n        val op30 = opList(opIndex+28)\n\
    \        val op31 = opList(opIndex+29)\n        val op32 = opList(opIndex+30)\n\
    \        val op33 = opList(opIndex+31)\n        val op34 = opList(opIndex+32)\n\
    \        val op35 = opList(opIndex+33)\n        val op36 = opList(opIndex+34)\n\
    \        val op37 = opList(opIndex+35)\n        val op38 = opList(opIndex+36)\n\
    \        val op39", "        val ops = op.map(_.toUpperCase)\n        val opList\
    \ = ops.toList\n        val operands = operand.toList\n        val operandList\
    \ = operands.toList\n        val opLen = opList.size\n        val operandLen =\
    \ operandList.size\n        val opIndex = ops.indexOf(\"+\")\n        val opIndex2\
    \ = ops.indexOf(\"-\")\n        val opIndex3 = ops.indexOf(\"*\")\n        val\
    \ opIndex4 = ops.indexOf(\"/\")\n        val opIndex5 = ops.indexOf(\"**\")\n\
    \        val opIndex6 = ops.indexOf(\"//\")\n        val opIndex7 = ops.indexOf(\"\
    %\")\n        val opIndex8 = ops.indexOf(\"*\")\n        val opIndex9 = ops.indexOf(\"\
    +\")\n        val opIndex10 = ops.indexOf(\"+\")\n        val opIndex11 = ops.indexOf(\"\
    *\")\n        val opIndex12 = ops.indexOf(\"*\")\n        val opIndex13 = ops.indexOf(\"\
    *\")\n        val opIndex14 = ops.indexOf(\"*\")\n        val opIndex15 = ops.indexOf(\"\
    *\")\n        val opIndex16 = ops.indexOf(\"*\")\n        val opIndex17 = ops.indexOf(\"\
    *\")\n        val opIndex18 = ops.indexOf(\"*\")\n        val opIndex19 = ops.indexOf(\"\
    *\")\n        val opIndex20 = ops.indexOf(\"*\")\n        val opIndex21 = ops.indexOf(\"\
    *\")\n        val opIndex22 = ops.indexOf(\"*\")\n        val opIndex23 = ops.indexOf(\"\
    *\")\n        val opIndex24 = ops.indexOf(\"*\")\n        val opIndex25 = ops.indexOf(\"\
    *\")\n        val opIndex26 = ops.indexOf(\"*\")\n        val opIndex27 = ops.indexOf(\"\
    *\")\n        val opIndex28 = ops.indexOf(\"*\")\n        val opIndex29 = ops.indexOf(\"\
    *\")\n        val opIndex30 = ops.indexOf(\"*\")\n        val opIndex31 = ops.indexOf(\"\
    *\")\n        val opIndex32 = ops.indexOf(\"*\")\n        val opIndex33 = ops.indexOf(\"\
    *\")\n        val opIndex34 = ops.indexOf(\"*\")\n        val opIndex35 = ops.indexOf(\"\
    *\")\n        val opIndex36 = ops.indexOf(\"*\")\n        val opIndex37 = ops.indexOf(\"\
    *\")\n        val opIndex38 = ops.indexOf(\"*\")\n        val opIndex39 = ops.indexOf(\"\
    *\")\n        val opIndex40 = ops.indexOf(\"*\")\n        val opIndex41 = ops.indexOf(\"\
    *\")\n        val opIndex42 = ops.indexOf(\"*\")\n        val opIndex43 = ", " \
    \       val ops = op.map(x => x.toChar)\n        val operands = operand.map(x\
    \ => x.toLong)\n        val opLen = ops.size\n        val operandLen = operands.size\n\
    \        val opIndex = ops.indexOf(\"+\")\n        val op1 = ops(opIndex - 1)\n\
    \        val op2 = ops(opIndex)\n        val op3 = ops(opIndex + 1)\n        val\
    \ op4 = ops(opIndex + 2)\n        val op5 = ops(opIndex + 3)\n        val op6\
    \ = ops(opIndex + 4)\n        val op7 = ops(opIndex + 5)\n        val op8 = ops(opIndex\
    \ + 6)\n        val op9 = ops(opIndex + 7)\n        val op10 = ops(opIndex + 8)\n\
    \        val op11 = ops(opIndex + 9)\n        val op12 = ops(opIndex + 10)\n \
    \       val op13 = ops(opIndex + 11)\n        val op14 = ops(opIndex + 12)\n \
    \       val op15 = ops(opIndex + 13)\n        val op16 = ops(opIndex + 14)\n \
    \       val op17 = ops(opIndex + 15)\n        val op18 = ops(opIndex + 16)\n \
    \       val op19 = ops(opIndex + 17)\n        val op20 = ops(opIndex + 18)\n \
    \       val op21 = ops(opIndex + 19)\n        val op22 = ops(opIndex + 20)\n \
    \       val op23 = ops(opIndex + 21)\n        val op24 = ops(opIndex + 22)\n \
    \       val op25 = ops(opIndex + 23)\n        val op26 = ops(opIndex + 24)\n \
    \       val op27 = ops(opIndex + 25)\n        val op28 = ops(opIndex + 26)\n \
    \       val op29 = ops(opIndex + 27)\n        val op30 = ops(opIndex + 28)\n \
    \       val op31 = ops(opIndex + 29)\n        val op32 = ops(opIndex + 30)\n \
    \       val op33 = ops(opIndex + 31)\n        val op34 = ops(opIndex + 32)\n \
    \       val op35 = ops(opIndex + 33)\n        val op36 = ops(opIndex + 34)\n \
    \       val op37 = ops(opIndex + 35)\n        val op38 = ops(opIndex + 36)\n \
    \       val op39 = ops(opIndex", "        val ops = op.map(_.toLowerCase)\n  \
    \      val operands = operand.map(_.toLong)\n        val opLen = ops.size\n  \
    \      val opLenMinusOne = opLen - 1\n        val operandLen = operands.size -\
    \ 1\n        val opLenMinusOneMinusOne = opLenMinusOne - 1\n        val opLenMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOne = operandLen\
    \ - 1 - 1\n        val operandLenMinusOneMinusOneMinusOne = operandLenMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne = operandLenMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne = operandLenMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val\
    \ operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne =\
    \ operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne -\
    \ 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = ", "        val opList = op.map(_.toLowerCase).toList\n        val operandList\
    \ = operand.map(_.toLong).toList\n        val opLen = opList.size\n        val\
    \ operandLen = operandList.size\n        val opLenMinusOne = opLen - 1\n     \
    \   val operandLenMinusOne = operandLen - 1\n        val opLenMinusTwo = opLen\
    \ - 2\n        val operandLenMinusTwo = operandLen - 2\n        val opLenMinusThree\
    \ = opLen - 3\n        val operandLenMinusThree = operandLen - 3\n        val\
    \ opLenMinusFour = opLen - 4\n        val operandLenMinusFour = operandLen - 4\n\
    \        val opLenMinusFive = opLen - 5\n        val operandLenMinusFive = operandLen\
    \ - 5\n        val opLenMinusSix = opLen - 6\n        val operandLenMinusSix =\
    \ operandLen - 6\n        val opLenMinusSeven = opLen - 7\n        val operandLenMinusSeven\
    \ = operandLen - 7\n        val opLenMinusEight = opLen - 8\n        val operandLenMinusEight\
    \ = operandLen - 8\n        val opLenMinusNine = opLen - 9\n        val operandLenMinusNine\
    \ = operandLen - 9\n        val opLenMinusTen = opLen - 10\n        val operandLenMinusTen\
    \ = operandLen - 10\n        val opLenMinusEleven = opLen - 11\n        val operandLenMinusEleven\
    \ = operandLen - 11\n        val opLenMinusTwelve = opLen - 12\n        val operandLenMinusTwelve\
    \ = operandLen - 12\n        val opLenMinusThirteen = opLen - 13\n        val\
    \ operandLenMinusThirteen = operandLen - 13\n        val opLenMinusFourteen =\
    \ opLen - 14\n        val operandLenMinusFourteen = operandLen - 14\n        val\
    \ opLenMinusFifteen = opLen - 15\n        val operandLenMinusFifteen = operandLen\
    \ - 15\n        val opLenMinusSixteen = opLen - 16\n        val operandLenMinusSixteen\
    \ = operandLen - 16\n        val opLenMinusSeventeen = opLen - 17\n        val\
    \ operandLenMinusSeventeen = operandLen - 17\n", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLength = opList.length\n\
    \        val operandLength = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val opMap2 = new mutable.HashMap[String, Long]()\n        val operandMap2\
    \ = new mutable.HashMap[String, Long]()\n        val opMap3 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap3 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap4 = new mutable.HashMap[String, Long]()\n        val operandMap4\
    \ = new mutable.HashMap[String, Long]()\n        val opMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap5 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap6 = new mutable.HashMap[String, Long]()\n        val operandMap6\
    \ = new mutable.HashMap[String, Long]()\n        val opMap7 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap7 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap8 = new mutable.HashMap[String, Long]()\n        val operandMap8\
    \ = new mutable.HashMap[String, Long]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap9 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap10 = new mutable.HashMap[String, Long]()\n        val operandMap10\
    \ = new mutable.HashMap[String, Long]()\n        val opMap11 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap11 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap12 = new mutable.HashMap[String, Long]()\n        val operandMap12\
    \ = new mutable.HashMap[String, Long]()\n        val opMap13 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap13 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap14 = new mutable.HashMap[String, Long]()\n        val operandMap14\
    \ = new mutable.HashMap[String, Long]()\n        val opMap15 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap15 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap16 = new mutable.HashMap[String, Long]()\n        val operandMap16\
    \ = new mutable.Hash", "        val opList = op.map(_.toUpperCase)\n        val\
    \ operandList = operand.map(_.toLong)\n        val opLen = opList.length\n   \
    \     val operandLen = operandList.length\n        val opMap = opList.zip(operandList)\n\
    \        val opMapLen = opMap.length\n        val opMapSet = opMap.map(x => x._1\
    \ + \"*\" + x._2)\n        val opMapSetLen = opMapSet.length\n        val opMapSetSet\
    \ = opMapSet.map(x => x.toUpperCase)\n        val opMapSetSetLen = opMapSetSet.length\n\
    \        val opMapSetSetSet = opMapSetSet.map(x => x.toUpperCase)\n        val\
    \ opMapSetSetSetLen = opMapSetSet.length\n        val opMapSetSetSet = opMapSetSet.map(x\
    \ => x.toUpperCase)\n        val opMapSetSetSetLen = opMapSetSet.length\n    \
    \    val opMapSetSetSet = opMapSetSet.map(x => x.toUpperCase)\n        val opMapSetSetSetLen\
    \ = opMapSetSet.length\n        val opMapSetSetSet = opMapSetSet.map(x => x.toUpperCase)\n\
    \        val opMapSetSetSetLen = opMapSetSet.length\n        val opMapSetSetSet\
    \ = opMapSetSet.map(x => x.toUpperCase)\n        val opMapSetSetSetLen = opMapSetSet.length\n\
    \        val opMapSetSetSet = opMapSetSet.map(x => x.toUpperCase)\n        val\
    \ opMapSetSetSetLen = opMapSetSet.length\n        val opMapSetSetSet = opMapSetSet.map(x\
    \ => x.toUpperCase)\n        val opMapSetSetSetLen = opMapSetSet.length\n    \
    \    val opMapSetSetSet = opMapSetSet.map(x => x.toUpperCase)\n        val opMapSetSetSetLen\
    \ = opMapSetSet.length\n        val opMapSetSetSet = opMapSetSet.map(x => x.toUpperCase)\n\
    \        val opMapSetSetSetLen = opMapSetSet.length\n        val opMapSetSetSet\
    \ = opMapSetSet.map(x => x.toUpperCase)\n        val opMapSetSetSetLen = opMapSetSet.length\n\
    \        val opMapSetSetSet = opMapSetSet.map(x => x.toUpperCase)\n        val\
    \ opMapSetSetSetLen = opMapSetSet.length\n        ", "        val ops = op.map(x\
    \ => x.toDouble)\n        val operands = operand.map(x => x.toDouble)\n      \
    \  val opLen = ops.size\n        val operandLen = operands.size\n        val opIndex\
    \ = ops.indexWhere(x => x == 1.0)\n        val op1 = ops(opIndex).toInt\n    \
    \    val op2 = ops(opIndex + 1).toInt\n        val op3 = ops(opIndex + 2).toInt\n\
    \        val op4 = ops(opIndex + 3).toInt\n        val op5 = ops(opIndex + 4).toInt\n\
    \        val op6 = ops(opIndex + 5).toInt\n        val op7 = ops(opIndex + 6).toInt\n\
    \        val op8 = ops(opIndex + 7).toInt\n        val op9 = ops(opIndex + 8).toInt\n\
    \        val op10 = ops(opIndex + 9).toInt\n        val op11 = ops(opIndex + 10).toInt\n\
    \        val op12 = ops(opIndex + 11).toInt\n        val op13 = ops(opIndex +\
    \ 12).toInt\n        val op14 = ops(opIndex + 13).toInt\n        val op15 = ops(opIndex\
    \ + 14).toInt\n        val op16 = ops(opIndex + 15).toInt\n        val op17 =\
    \ ops(opIndex + 16).toInt\n        val op18 = ops(opIndex + 17).toInt\n      \
    \  val op19 = ops(opIndex + 18).toInt\n        val op20 = ops(opIndex + 19).toInt\n\
    \        val op21 = ops(opIndex + 20).toInt\n        val op22 = ops(opIndex +\
    \ 21).toInt\n        val op23 = ops(opIndex + 22).toInt\n        val op24 = ops(opIndex\
    \ + 23).toInt\n        val op25 = ops(opIndex + 24).toInt\n        val op26 =\
    \ ops(opIndex + 25).toInt\n        val op27 = ops(opIndex + 26).toInt\n      \
    \  val op28 = ops(opIndex + 27).toInt\n        val op29 = ops(opIndex + 28).toInt\n\
    \        val op30 = ops(opIndex + 29).toInt\n        val op31 = ops(opIndex +\
    \ 30).toInt\n        val op32 = ops(opIndex + 31).toInt\n        val op33 = ops(opIndex\
    \ + 32).toInt\n        val op34 = ops(opIndex", "        val opList = op.mkString(\"\
    +\")\n        val opListLength = opList.length\n        val operandList = operand.map(_.toLong)\n\
    \        val operandListLength = operandList.length\n        val result = operandList(0)\n\
    \        val ops = opList.split(\"\\\\+\")\n        val opLength = ops.length\n\
    \        val operand = operandList.take(opLength-1)\n        val operandLength\
    \ = operand.length\n        val op1 = ops.head\n        val op2 = ops.last\n \
    \       val op1Length = op1.length\n        val op2Length = op2.length\n     \
    \   val op1Index = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n\
    \        val op1Value = operand(operandListLength-op1Index-1)\n        val op2Value\
    \ = operand(operandListLength-op2Index-1)\n        val op1Index = ops.indexOf(op1)\n\
    \        val op2Index = ops.indexOf(op2)\n        val op1Value = operand(operandListLength-op1Index-1)\n\
    \        val op2Value = operand(operandListLength-op2Index-1)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Value\
    \ = operand(operandListLength-op1Index-1)\n        val op2Value = operand(operandListLength-op2Index-1)\n\
    \        val op1Index = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n\
    \        val op1Value = operand(operandListLength-op1Index-1)\n        val op2Value\
    \ = operand(operandListLength-op2Index-1)\n        val op1Index = ops.indexOf(op1)\n\
    \        val op2Index = ops.indexOf(op2)\n        val op1Value = operand(operandListLength-op1Index-1)\n\
    \        val op2Value = operand(operandListLength-op2Index-1)\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Value\
    \ = operand(operandListLength-op1Index-1)\n        val op2Value = operand(operandListLength-op2Index-1)\n\
    \        val op1Index = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n\
    \        val op1Value = operand(operandListLength-op1Index-1)\n        val op2Value\
    \ = operand(operandListLength-op2Index-1)\n        val op1Index = ops.indexOf(op1)\n\
    \        val op2Index = ops.indexOf(op2)\n        val op1Value = operand(operandListLength-op1Index-1)",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toInt)\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\n\
    \        val opIndex = opList.indexOf(\"+\")\n        val opIndex2 = opList.indexOf(\"\
    *\")\n        val opIndex3 = opList.indexOf(\"/\")\n        val opIndex4 = opList.indexOf(\"\
    **\")\n        val opIndex5 = opList.indexOf(\"//\")\n        val opIndex6 = opList.indexOf(\"\
    %\")\n        val opIndex7 = opList.indexOf(\"*\")\n        val opIndex8 = opList.indexOf(\"\
    +\")\n        val opIndex9 = opList.indexOf(\"-\")\n        val opIndex10 = opList.indexOf(\"\
    +\")\n        val opIndex11 = opList.indexOf(\"*\")\n        val opIndex12 = opList.indexOf(\"\
    +\")\n        val opIndex13 = opList.indexOf(\"*\")\n        val opIndex14 = opList.indexOf(\"\
    +\")\n        val opIndex15 = opList.indexOf(\"*\")\n        val opIndex16 = opList.indexOf(\"\
    +\")\n        val opIndex17 = opList.indexOf(\"*\")\n        val opIndex18 = opList.indexOf(\"\
    +\")\n        val opIndex19 = opList.indexOf(\"*\")\n        val opIndex20 = opList.indexOf(\"\
    +\")\n        val opIndex21 = opList.indexOf(\"*\")\n        val opIndex22 = opList.indexOf(\"\
    +\")\n        val opIndex23 = opList.indexOf(\"*\")\n        val opIndex24 = opList.indexOf(\"\
    +\")\n        val opIndex25 = opList.indexOf(\"*\")\n        val opIndex26 = opList.indexOf(\"\
    +\")\n        val opIndex27 = opList.indexOf(\"*\")\n        val opIndex28 = opList.indexOf(\"\
    +\")\n        val opIndex29 = opList.indexOf(\"*\")\n        val opIndex30 = opList.indexOf(\"\
    +\")\n        val opIndex31 = opList.indexOf(\"*\")\n        val opIndex32 = opList.indexOf(\"\
    +\")\n        val opIndex33 = opList.indexOf(\"*\")\n        val opIndex34 = opList.indexOf(\"\
    +\")\n        val opIndex35 = opList.indexOf(\"*\")\n        val opIndex36 = opList.indexOf(\"\
    +\")\n        val opIndex37 = opList.indexOf(\"*\")\n        val opIndex38 = opList.indexOf(\"\
    +\")\n        val opIndex39 = opList.indexOf(\"*\")\n        val opIndex40 = opList.indexOf(\"\
    +\")\n        val op", "        val opList = op.mkString(\"+\")\n        val opList2\
    \ = op.mkString(\"*\")\n        val opList3 = op.mkString(\"//\")\n        val\
    \ opList4 = op.mkString(\"**\")\n        val opList5 = op.mkString(\"+\")\n  \
    \      val opList6 = op.mkString(\"*\")\n        val opList7 = op.mkString(\"\
    //\")\n        val opList8 = op.mkString(\"**\")\n        val opList9 = op.mkString(\"\
    +\")\n        val opList10 = op.mkString(\"*\")\n        val opList11 = op.mkString(\"\
    //\")\n        val opList12 = op.mkString(\"**\")\n        val opList13 = op.mkString(\"\
    +\")\n        val opList14 = op.mkString(\"*\")\n        val opList15 = op.mkString(\"\
    //\")\n        val opList16 = op.mkString(\"**\")\n        val opList17 = op.mkString(\"\
    +\")\n        val opList18 = op.mkString(\"*\")\n        val opList19 = op.mkString(\"\
    //\")\n        val opList20 = op.mkString(\"**\")\n        val opList21 = op.mkString(\"\
    +\")\n        val opList22 = op.mkString(\"*\")\n        val opList23 = op.mkString(\"\
    //\")\n        val opList24 = op.mkString(\"**\")\n        val opList25 = op.mkString(\"\
    +\")\n        val opList26 = op.mkString(\"*\")\n        val opList27 = op.mkString(\"\
    //\")\n        val opList28 = op.mkString(\"**\")\n        val opList29 = op.mkString(\"\
    +\")\n        val opList30 = op.mkString(\"*\")\n        val opList31 = op.mkString(\"\
    //\")\n        val opList32 = op.mkString(\"**\")\n        val opList33 = op.mkString(\"\
    +\")\n        val opList34 = op.mkString(\"*\")\n        val opList35 = op.mkString(\"\
    //\")\n        val opList36 = op.mkString(\"**\")\n        val opList37 = op.mkString(\"\
    +\")\n        val opList38 = op.mkString(\"*\")\n        val opList39 = op.mkString(\"\
    //\")\n        val opList40 = op.mkString(\"**\")\n        val opList41 = op.mkString(\"\
    +\")\n        val opList42 = op.mkString(\"*\")\n        val opList43 = op.mkString(\"\
    //\")\n        val opList44 = op.mkString(\"**\")\n        val opList45 = op.mkString(\"\
    +\")\n        val opList46 = op.mk", "        val opList = op.mkString(\"+\")\n\
    \        val opListLen = opList.length\n        val operandList = operand.mkString(\"\
    +\")\n        val operandListLen = operandList.length\n        val opListLenMinusOne\
    \ = opListLen - 1\n        val operandListLenMinusOne = operandListLen - 1\n \
    \       val opListLenMinusTwo = opListLen - 2\n        val operandListLenMinusTwo\
    \ = operandListLen - 2\n        val opListLenMinusThree = opListLen - 3\n    \
    \    val operandListLenMinusThree = operandListLen - 3\n        val opListLenMinusFour\
    \ = opListLen - 4\n        val operandListLenMinusFour = operandListLen - 4\n\
    \        val opListLenMinusFive = opListLen - 5\n        val operandListLenMinusFive\
    \ = operandListLen - 5\n        val opListLenMinusSix = opListLen - 6\n      \
    \  val operandListLenMinusSix = operandListLen - 6\n        val opListLenMinusSeven\
    \ = opListLen - 7\n        val operandListLenMinusSeven = operandListLen - 7\n\
    \        val opListLenMinusEight = opListLen - 8\n        val operandListLenMinusEight\
    \ = operandListLen - 8\n        val opListLenMinusNine = opListLen - 9\n     \
    \   val operandListLenMinusNine = operandListLen - 9\n        val opListLenMinusTen\
    \ = opListLen - 10\n        val operandListLenMinusTen = operandListLen - 10\n\
    \        val opListLenMinusEleven = opListLen - 11\n        val operandListLenMinusEleven\
    \ = operandListLen - 11\n        val opListLenMinusTwelve = opListLen - 12\n \
    \       val operandListLenMinusTwelve = operandListLen - 12\n        val opListLenMinusThirteen\
    \ = opListLen - 13\n        val operandListLenMinusThirteen = operandListLen -\
    \ 13\n        val opListLenMinusFourteen = opListLen - 14\n        val operandListLenMinusFourteen\
    \ = operandListLen - 14\n        val opListLenMinusFifteen = opListLen - 15\n\
    \        val operandListLenMinusFifteen = operandListLen - 15\n        val op",
  "        val opList = op.map(_.toUpperCase)\n        val opLen = opList.length\n\
    \        val operandList = operand.map(_.toLong)\n        val operandLen = operandList.length\n\
    \        val result = operandList.foldLeft(operandList.head) { (acc, cur) => \n\
    \            val op = opList.zip(operandList).find(_._1 == cur._1).get._2\n  \
    \          val operand = cur._2\n            val opLen = opList.length\n     \
    \       val operandLen = operandList.length\n            val opIndex = opList.indexOf(op)\n\
    \            val operandIndex = operandList.indexOf(operand)\n            val\
    \ opVal = opIndex.toLong\n            val operandVal = operandIndex.toLong\n \
    \           val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValLong = opVal.toLong\n            val operandValLong = operandVal.toLong\n\
    \            val opValFloat = opVal.toFloat\n            val operandValFloat =\
    \ operandVal.toFloat\n            val opValDouble = opVal.toDouble\n         \
    \   val operandValDouble = operandVal.toDouble\n            val opValString =\
    \ opVal.toString\n            val operandValString = operandVal.toString\n   \
    \         val opValBool = opVal.toBoolean\n            val operandValBool = operandVal.toBoolean\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValLong = opVal.toLong\n            val operandValLong = operandVal.toLong\n\
    \            val opValFloat = opVal.toFloat\n            val operandValFloat =\
    \ operandVal.toFloat\n            val opValDouble = opVal.toDouble\n         \
    \   val operandValDouble = operandVal.toDouble\n            val opValString =\
    \ opVal.toString\n            val operandValString = operandVal.toString\n   \
    \         val opValBool = opVal.toBoolean\n            val operandValBool = operandVal.toBoolean\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValLong = opVal.toLong\n            val operandValLong = operandVal.toLong\n\
    \            val opValFloat = opVal.toFloat\n            val operandValFloat =\
    \ operandVal.toFloat\n            val opValDouble = opVal.toDouble\n         \
    \   val operandValDouble = operandVal.toDouble\n            val opValString =\
    \ opVal.toString\n            val operandValString = operandVal.toString\n   \
    \         val opValBool", "        val opList = op.mkString(\"+\")\n        val\
    \ opList2 = op.mkString(\"*\")\n        val opList3 = op.mkString(\"//\")\n  \
    \      val opList4 = op.mkString(\"**\")\n        val opList5 = op.mkString(\"\
    +\")\n        val opList6 = op.mkString(\"*\")\n        val opList7 = op.mkString(\"\
    //\")\n        val opList8 = op.mkString(\"**\")\n        val opList9 = op.mkString(\"\
    +\")\n        val opList10 = op.mkString(\"*\")\n        val opList11 = op.mkString(\"\
    //\")\n        val opList12 = op.mkString(\"**\")\n        val opList13 = op.mkString(\"\
    +\")\n        val opList14 = op.mkString(\"*\")\n        val opList15 = op.mkString(\"\
    //\")\n        val opList16 = op.mkString(\"**\")\n        val opList17 = op.mkString(\"\
    +\")\n        val opList18 = op.mkString(\"*\")\n        val opList19 = op.mkString(\"\
    //\")\n        val opList20 = op.mkString(\"**\")\n        val opList21 = op.mkString(\"\
    +\")\n        val opList22 = op.mkString(\"*\")\n        val opList23 = op.mkString(\"\
    //\")\n        val opList24 = op.mkString(\"**\")\n        val opList25 = op.mkString(\"\
    +\")\n        val opList26 = op.mkString(\"*\")\n        val opList27 = op.mkString(\"\
    //\")\n        val opList28 = op.mkString(\"**\")\n        val opList29 = op.mkString(\"\
    +\")\n        val opList30 = op.mkString(\"*\")\n        val opList31 = op.mkString(\"\
    //\")\n        val opList32 = op.mkString(\"**\")\n        val opList33 = op.mkString(\"\
    +\")\n        val opList34 = op.mkString(\"*\")\n        val opList35 = op.mkString(\"\
    //\")\n        val opList36 = op.mkString(\"**\")\n        val opList37 = op.mkString(\"\
    +\")\n        val opList38 = op.mkString(\"*\")\n        val opList39 = op.mkString(\"\
    //\")\n        val opList40 = op.mkString(\"**\")\n        val opList41 = op.mkString(\"\
    +\")\n        val opList42 = op.mkString(\"*\")\n        val opList43 = op.mkString(\"\
    //\")\n        val opList44 = op.mkString(\"**\")\n        val opList45 = op.mkString(\"\
    +\")\n        val opList46 = op.mk", "        val opList = op.map(_.toLowerCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.length\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operandList.length\n\
    \        val operandLenMinusOne = operandLen - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val opMapKeys = opList.map(x => x.toLowerCase)\n        val operandMapKeys\
    \ = operandList.map(x => x.toLong)\n        val opMapValues = opList.map(x =>\
    \ 1L)\n        val operandMapValues = operandList.map(x => 1L)\n        val opMapKeysSet\
    \ = opMapKeys.toSet\n        val operandMapKeysSet = operandMapKeys.toSet\n  \
    \      val opMapValueSet = opMapValues.toSet\n        val operandMapValueSet =\
    \ operandMapValues.toSet\n        val opMapKeysSet2 = opMapKeys.filter(x => !opMapKeysSet.contains(x))\n\
    \        val operandMapKeysSet2 = operandMapKeys.filter(x => !operandMapKeysSet.contains(x))\n\
    \        val opMapValueSet2 = opMapValues.filter(x => !opMapValueSet.contains(x))\n\
    \        val operandMapValueSet2 = operandMapValues.filter(x => !operandMapValueSet.contains(x))\n\
    \        val opMapKeysSet3 = opMapKeys.filter(x => !opMapKeysSet2.contains(x))\n\
    \        val operandMapKeysSet3 = operandMapKeys.filter(x => !operandMapKeysSet2.contains(x))\n\
    \        val opMapValueSet3 = opMapValues.filter(x => !opMapValueSet2.contains(x))\n\
    \        val operandMapValueSet3 = operandMapValues.filter(x => !operandMapValueSet2.contains(x))\n\
    \        val opMapKeysSet4 = opMapKeys.filter(x => !opMapKeysSet3.contains(x))\n\
    \        val operandMapKeysSet4 = operandMapKeys.filter(x => !operandMapKeysSet3.contains(x))\n\
    \        val opMapValueSet4 = opMapValues.filter(x => !opMapValueSet3.contains(x))\n\
    \        val operandMapValueSet4 = operandMapValues.filter(x => !operandMapValueSet3.contains(x))\n\
    \        val opMapKeysSet5 = opMapKeys.filter(x => !opMapKeysSet4.contains(x))\n\
    \        val operand", "        val opList = op.map(_.toUpperCase)\n        val\
    \ operandList = operand.map(_.toLong)\n        val opLength = opList.length\n\
    \        val operandLength = operandList.length - 1\n        val opListLength\
    \ = opList.length\n        val operandListLength = operandList.length\n      \
    \  val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opList", "        val ops = op.map(x => x.toChar)\n        val opList\
    \ = ops.toList\n        val operands = operand.toList\n        val opLen = opList.size\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operands.size\
    \ - 1\n        val opLenMinusOneMinusOne = opLenMinusOne - 1\n        val opLenMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOne - 1\n        val operandLenMinusOne = operandLen - 1\n\
    \        val operandLenMinusOneMinusOne = operandLenMinusOne - 1\n        val\
    \ operandLenMinusOneMinusOneMinusOne = operandLenMinusOneMinusOne - 1\n      \
    \  val opLenMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOne -\
    \ 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne = operandLenMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne = operandLenMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n \
    \       val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMin",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opMap2 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap2 = new mutable.HashMap[String, Long]()\n        val opMap3 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap3 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap4 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap4 = new mutable.HashMap[String, Long]()\n        val opMap5 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap6 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap6 = new mutable.HashMap[String, Long]()\n        val opMap7 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap7 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap8 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap8 = new mutable.HashMap[String, Long]()\n        val opMap9 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap10 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap10 = new mutable.HashMap[String, Long]()\n        val opMap11\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap11 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap12 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap12 = new mutable.HashMap[String, Long]()\n        val opMap13\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap13 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap14 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap14 = new mutable.HashMap[String, Long]()\n        val opMap15\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap15 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap16 = new mutable.Hash", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toInt)\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val opMap2 = new mutable.HashMap[String, Long]()\n        val operandMap2\
    \ = new mutable.HashMap[String, Long]()\n        val opMap3 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap3 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap4 = new mutable.HashMap[String, Long]()\n        val operandMap4\
    \ = new mutable.HashMap[String, Long]()\n        val opMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap5 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap6 = new mutable.HashMap[String, Long]()\n        val operandMap6\
    \ = new mutable.HashMap[String, Long]()\n        val opMap7 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap7 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap8 = new mutable.HashMap[String, Long]()\n        val operandMap8\
    \ = new mutable.HashMap[String, Long]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap9 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap10 = new mutable.HashMap[String, Long]()\n        val operandMap10\
    \ = new mutable.HashMap[String, Long]()\n        val opMap11 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap11 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap12 = new mutable.HashMap[String, Long]()\n        val operandMap12\
    \ = new mutable.HashMap[String, Long]()\n        val opMap13 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap13 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap14 = new mutable.HashMap[String, Long]()\n        val operandMap14\
    \ = new mutable.HashMap[String, Long]()\n        val opMap15 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap15 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap16 = new mutable.HashMap[String, Long]()\n        val operandMap16\
    \ = new mut", "        val opList = op.map(_.toUpperCase)\n        val operandList\
    \ = operand.map(_.toLong)\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length\n        val opMap : Map[String, String] = opList.zip(opList).map(x\
    \ => (x._1, x._2)).toMap\n        val opMap2 = opList.zip(opList).map(x => (x._1,\
    \ x._2)).toMap\n        val opMap3 = opList.zip(opList).map(x => (x._1, x._2)).toMap\n\
    \        val opMap4 = opList.zip(opList).map(x => (x._1, x._2)).toMap\n      \
    \  val opMap5 = opList.zip(opList).map(x => (x._1, x._2)).toMap\n        val opMap6\
    \ = opList.zip(opList).map(x => (x._1, x._2)).toMap\n        val opMap7 = opList.zip(opList).map(x\
    \ => (x._1, x._2)).toMap\n        val opMap8 = opList.zip(opList).map(x => (x._1,\
    \ x._2)).toMap\n        val opMap9 = opList.zip(opList).map(x => (x._1, x._2)).toMap\n\
    \        val opMap10 = opList.zip(opList).map(x => (x._1, x._2)).toMap\n     \
    \   val opMap11 = opList.zip(opList).map(x => (x._1, x._2)).toMap\n        val\
    \ opMap12 = opList.zip(opList).map(x => (x._1, x._2)).toMap\n        val opMap13\
    \ = opList.zip(opList).map(x => (x._1, x._2)).toMap\n        val opMap14 = opList.zip(opList).map(x\
    \ => (x._1, x._2)).toMap\n        val opMap15 = opList.zip(opList).map(x => (x._1,\
    \ x._2)).toMap\n        val opMap16 = opList.zip(opList).map(x => (x._1, x._2)).toMap\n\
    \        val opMap17 = opList.zip(opList).map(x => (x._1, x._2)).toMap\n     \
    \   val opMap18 = opList.zip(opList).map(x => (x._1, x._2)).toMap\n        val\
    \ opMap19 = opList.zip(opList).map(x => (x._1, x._2)).toMap\n        val opMap20\
    \ = opList.zip(opList).map(x => (x._1, x._2)).toMap", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toLong).toList\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val result = new mutable.HashMap[String, Long]()\n        val opMapKeys =\
    \ opMap.keySet\n        val operandMapKeys = operandMap.keySet\n        val opMapValues\
    \ = opMapKeys.map(x => opMap(x)).toList\n        val operandMapValues = operandMapKeys.map(x\
    \ => operandMap(x)).toList\n        val opMapValueLen = opMapValues.length\n \
    \       val operandMapValueLen = operandMapValues.length - 1\n        val opMapValueMap\
    \ = new mutable.HashMap[String, Long]()\n        val operandMapValueMap = new\
    \ mutable.HashMap[String, Long]()\n        val opMapValueMapKeys = opMapValueMap.keySet\n\
    \        val operandMapValueMapKeys = operandMapValueMap.keySet\n        val opMapValueMapValues\
    \ = opMapValueMapKeys.map(x => opMapValueMap(x)).toList\n        val operandMapValueMapValues\
    \ = operandMapValueMapKeys.map(x => operandMapValueMap(x)).toList\n        val\
    \ opMapValueMapValueLen = opMapValueMapValues.length\n        val operandMapValueMapValueLen\
    \ = operandMapValueMapValues.length - 1\n        val opMapValueMapValueMap = new\
    \ mutable.HashMap[String, Long]()\n        val operandMapValueMapValueMap = new\
    \ mutable.HashMap[String, Long]()\n        val opMapValueMapValueMapKeys = opMapValueMapValueMap.keySet\n\
    \        val operandMapValueMapValueMapKeys = operandMapValueMapValueMap.keySet\n\
    \        val opMapValueMapValueMapValues = opMapValueMapValueMapKeys.map(x =>\
    \ opMapValueMapValueMap(x)).toList\n        val operandMapValueMapValueMapValues\
    \ = operandMapValueMapValueMapKeys.map(x => operandMapValueMapValueMap(x)).toList\n\
    \        val opMapValueMapValueMapValueLen = opMapValueMapValueMapValues.length\n\
    \        val operandMapValueMapValueMapValueLen = operandMapValueMapValueMapValues.length\
    \ - 1\n        val opMapValueMapValueMapValueMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMapValueMapValue", "        val opList = op.map(x\
    \ => x.toChar)\n        val operandList = operand.map(x => x.toLong)\n       \
    \ val opLen = opList.length\n        val operandLen = operandList.length\n   \
    \     val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val opMap2 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap2 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap3 = new mutable.HashMap[String, Long]()\n        val operandMap3\
    \ = new mutable.HashMap[String, Long]()\n        val opMap4 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap4 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap5 = new mutable.HashMap[String, Long]()\n        val operandMap5\
    \ = new mutable.HashMap[String, Long]()\n        val opMap6 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap6 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap7 = new mutable.HashMap[String, Long]()\n        val operandMap7\
    \ = new mutable.HashMap[String, Long]()\n        val opMap8 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap8 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap9 = new mutable.HashMap[String, Long]()\n        val operandMap9\
    \ = new mutable.HashMap[String, Long]()\n        val opMap10 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap10 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap11 = new mutable.HashMap[String, Long]()\n        val operandMap11\
    \ = new mutable.HashMap[String, Long]()\n        val opMap12 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap12 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap13 = new mutable.HashMap[String, Long]()\n        val operandMap13\
    \ = new mutable.HashMap[String, Long]()\n        val opMap14 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap14 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap15 = new mutable.HashMap[String, Long]()\n        val operandMap15\
    \ = new mutable.HashMap[String, Long]()\n        val opMap16 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap", "        val ops = op.map(_.toLowerCase)\n\
    \        val operands = operand.map(_.toLong)\n        val length = ops.size -\
    \ 1\n        val result = operands.foldLeft(0) { (result, operand) =>\n      \
    \      val op = ops.head\n            val operand = operands.head\n          \
    \  val operand2 = operands.tail.head\n            val operand3 = operands.tail.tail.head\n\
    \            val operand4 = operands.tail.tail.tail.head\n            val operand5\
    \ = operands.tail.tail.tail.tail.head\n            val operand6 = operands.tail.tail.tail.tail.tail.head\n\
    \            val operand7 = operands.tail.tail.tail.tail.tail.tail.head\n    \
    \        val operand8 = operands.tail.tail.tail.tail.tail.tail.tail.head\n   \
    \         val operand9 = operands.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand10 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand11 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand12 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand13 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand14 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand15 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand16 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand17 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand18", "        val opList = op.map(_.toUpperCase)\n   \
    \     val operandList = operand.map(_.toLong)\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val opMap2 = new mutable.HashMap[String, Long]()\n        val operandMap2\
    \ = new mutable.HashMap[String, Long]()\n        val opMap3 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap3 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap4 = new mutable.HashMap[String, Long]()\n        val operandMap4\
    \ = new mutable.HashMap[String, Long]()\n        val opMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap5 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap6 = new mutable.HashMap[String, Long]()\n        val operandMap6\
    \ = new mutable.HashMap[String, Long]()\n        val opMap7 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap7 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap8 = new mutable.HashMap[String, Long]()\n        val operandMap8\
    \ = new mutable.HashMap[String, Long]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap9 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap10 = new mutable.HashMap[String, Long]()\n        val operandMap10\
    \ = new mutable.HashMap[String, Long]()\n        val opMap11 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap11 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap12 = new mutable.HashMap[String, Long]()\n        val operandMap12\
    \ = new mutable.HashMap[String, Long]()\n        val opMap13 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap13 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap14 = new mutable.HashMap[String, Long]()\n        val operandMap14\
    \ = new mutable.HashMap[String, Long]()\n        val opMap15 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap15 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap16 = new mutable.HashMap[String, Long]()\n        val operandMap16\
    \ = new mut", "        val ops = op.map(_.toLowerCase).toSet\n        val opList\
    \ = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toLong).toList\n\
    \        val opLen = opList.size\n        val opSet = opList.map(_.toLowerCase).toSet\n\
    \        val operandSet = operandList.map(_.toLong).toSet\n        val opSetLen\
    \ = opSet.size \n        val opSetSet = opSet.map(_.toLowerCase).toSet\n     \
    \   val operandSetLen = operandSet.size \n        val opSetSetLen = opSetSet.size\
    \ \n        val opSetSetSet = opSetSet.map(_.toLowerCase).toSet\n        val operandSetSetLen\
    \ = operandSetSet.size \n        val opSetSetSetLen = opSetSetSet.size \n    \
    \    val opSetSetSetLen = opSetSetSet.size \n        val operandSetSetSetLen =\
    \ operandSetSetSet.size \n        val opSetSetSetLen = opSetSetSet.size\n    \
    \    val operandSetSetSetLen = operandSetSetSet.size\n        val opSetSetSetLen\
    \ = opSetSetSetLen\n        val operandSetSetSetLen = operandSetSetSetLen\n  \
    \      val opSetSetSetLen = opSetSetSetLen\n        val operandSetSetSetLen =\
    \ operandSetSetSetLen\n        val opSetSetSetLen = opSetSetSetLen\n        val\
    \ operandSetSetSetLen = operandSetSetSetLen\n        val opSetSetSetLen = opSetSetSetLen\n\
    \        val operandSetSetSetLen = operandSetSetSetLen\n        val opSetSetSetLen\
    \ = opSetSetSetLen\n        val operandSetSetSetLen = operandSetSetSetLen\n  \
    \      val opSetSetSetLen = opSetSetSetLen\n        val operandSetSetSetLen =\
    \ operandSetSetSetLen\n        val opSetSetSetLen = opSetSetSetLen\n        val\
    \ operandSetSetSetLen = operandSetSetSetLen\n        val opSetSetSetLen = opSetSetSetLen\n\
    \        val operandSetSetSetLen = operandSetSetSetLen\n        val opSetSetSetLen\
    \ = opSetSetSetLen\n        val operandSetSetSetLen = operandSetSetSetLen\n  \
    \      val opSetSetSetLen = opSetSetSetLen\n        val operandSetSetSetLen =\
    \ operandSetSetSetLen\n        val opSetSetSetLen = opSetSetSetLen\n        val\
    \ operand", "        val opList = op.map(_.toLowerCase)\n        val operandList\
    \ = operand.map(_.toLong)\n        val operatorList = opList.filter(_.contains(\"\
    +\")).map(_.toLowerCase)\n        val operandList = operandList.filter(_.contains(\"\
    +\")).map(_.toLong)\n        val operatorList = opList.filter(_.contains(\"-\"\
    )).map(_.toLowerCase)\n        val operandList = operandList.filter(_.contains(\"\
    -\")).map(_.toLong)\n        val operatorList = opList.filter(_.contains(\"*\"\
    )).map(_.toLowerCase)\n        val operandList = operandList.filter(_.contains(\"\
    *\")).map(_.toLong)\n        val operatorList = opList.filter(_.contains(\"//\"\
    )).map(_.toLowerCase)\n        val operandList = operandList.filter(_.contains(\"\
    //\")).map(_.toLong)\n        val operatorList = opList.filter(_.contains(\"**\"\
    )).map(_.toLowerCase)\n        val operandList = operandList.filter(_.contains(\"\
    **\")).map(_.toLong)\n        val operatorList = opList.filter(_.contains(\"%\"\
    )).map(_.toLowerCase)\n        val operandList = operandList.filter(_.contains(\"\
    %\")).map(_.toLong)\n        val operatorList = opList.filter(_.contains(\"^\"\
    )).map(_.toLowerCase)\n        val operandList = operandList.filter(_.contains(\"\
    ^\")).map(_.toLong)\n        val operatorList = opList.filter(_.contains(\"/\"\
    )).map(_.toLowerCase)\n        val operandList = operandList.filter(_.contains(\"\
    /\")).map(_.toLong)\n        val operatorList = opList.filter(_.contains(\"%\"\
    )).map(_.toLowerCase)\n        val operandList = operandList.filter(_.contains(\"\
    %\")).map(_.toLong)\n        val operatorList = opList.filter(_.contains(\"%\"\
    )).map(_.toLowerCase)\n        val operandList = operandList.filter(_.contains(\"\
    %\")).map(_.toLong)\n        val operatorList = opList.filter(_.contains(\"%\"\
    )).map(_.toLowerCase)\n        val operandList = operandList.filter(_.contains(\"\
    %\")).map(_.toLong)\n        val operatorList = opList.filter(_.contains(\"%\"\
    )).map(_.toLowerCase)\n        val operandList = operandList.filter(_.contains(\"\
    %\")).map(_.toLong)\n        val operatorList = opList.filter(_.contains(\"%\"\
    )).map(_.toLowerCase)\n        val operandList = operandList.filter(_.contains(\"\
    %\")).map(_.toLong)\n        val operatorList = opList.filter(_.contain", "  \
    \      val ops = op.map(_.toLowerCase)\n        val op1 = ops(0)\n        val\
    \ op2 = ops(1)\n        val op3 = ops(2)\n        val op4 = ops(3)\n        val\
    \ op5 = ops(4)\n        val op6 = ops(5)\n        val op7 = ops(6)\n        val\
    \ op8 = ops(7)\n        val op9 = ops(8)\n        val op10 = ops(9)\n        val\
    \ op11 = ops(10)\n        val op12 = ops(11)\n        val op13 = ops(12)\n   \
    \     val op14 = ops(13)\n        val op15 = ops(14)\n        val op16 = ops(15)\n\
    \        val op17 = ops(16)\n        val op18 = ops(17)\n        val op19 = ops(18)\n\
    \        val op20 = ops(19)\n        val op21 = ops(20)\n        val op22 = ops(21)\n\
    \        val op23 = ops(22)\n        val op24 = ops(23)\n        val op25 = ops(24)\n\
    \        val op26 = ops(25)\n        val op27 = ops(26)\n        val op28 = ops(27)\n\
    \        val op29 = ops(28)\n        val op30 = ops(29)\n        val op31 = ops(30)\n\
    \        val op32 = ops(31)\n        val op33 = ops(32)\n        val op34 = ops(33)\n\
    \        val op35 = ops(34)\n        val op36 = ops(35)\n        val op37 = ops(36)\n\
    \        val op38 = ops(37)\n        val op39 = ops(38)\n        val op40 = ops(39)\n\
    \        val op41 = ops(40)\n        val op42 = ops(41)\n        val op43 = ops(42)\n\
    \        val op44 = ops(43)\n        val op45 = ops(44)\n        val op46 = ops(45)\n\
    \        val op47 = ops(46)\n        val op48 = ops(47)\n        val op49 = ops(48)\n\
    \        val op50 = ops(49)\n        val op51 = ops(50)\n        val op52 = ops(51)\n\
    \        val op53 = ops(52)\n        val op54 = ops(53)\n        val op", "  \
    \      val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opSet = opList.map(_.toChar)\n        val opSetLen = opSet.length\n\
    \        val opSetSet = opSet.map(c => Set(c))\n        val opSetSetLen = opSetSet.length\n\
    \        val opSetSetSet = opSetSet.map(c => Set(c))\n        val opSetSetSetLen\
    \ = opSetSetSet.length\n        val opSetSetSetSet = opSetSetSet.map(c => Set(c))\n\
    \        val opSetSetSetSetLen = opSetSetSetSet.length\n        val opSetSetSetSetSet\
    \ = opSetSetSetSet.map(c => Set(c))\n        val opSetSetSetSetSetLen = opSetSetSetSetSet.length\n\
    \        val opSetSetSetSetSetSet = opSetSetSetSetSet.map(c => Set(c))\n     \
    \   val opSetSetSetSetSetSetLen = opSetSetSetSetSetSet.length\n        val opSetSetSetSetSetSetSet\
    \ = opSetSetSetSetSetSet.map(c => Set(c))\n        val opSetSetSetSetSetSetLen\
    \ = opSetSetSetSetSetSetSet.length\n        val opSetSetSetSetSetSetSet = opSetSetSetSetSetSetSet.map(c\
    \ => Set(c))\n        val opSetSetSetSetSetSetSetLen = opSetSetSetSetSetSetSetSet.length\n\
    \        val opSetSetSetSetSetSetSetSet = opSetSetSetSetSetSetSetSet.map(c =>\
    \ Set(c))\n        val opSetSetSetSetSetSetSetLen = opSetSetSetSetSetSetSetSet.length\n\
    \        val opSetSetSetSetSetSetSetSet = opSetSetSetSetSetSetSetSet.map(c =>\
    \ Set(c))\n        val opSetSetSetSetSetSetSetLen = opSetSetSetSetSetSetSetSetSet.length\n\
    \        val opSetSetSetSetSetSetSetSet = opSetSetSetSetSetSetSetSetSet.map(c\
    \ => Set(c))\n        val opSetSetSetSetSetSetSetLen = opSetSetSetSetSetSetSetSetSet.length\n\
    \        val opSetSetSetSetSetSetSetSet = opSetSetSetSetSetSetSetSet", "     \
    \   val ops = op.map(_.toUpperCase)\n        val opLen = ops.size\n        val\
    \ opLenMinusOne = opLen - 1\n        val operandLen = operand.size\n        val\
    \ operandLenMinusOne = operandLen - 1\n        val opList = new mutable.ListBuffer[String]()\n\
    \        val operandList = new mutable.ListBuffer[Long]()\n        var i = 0\n\
    \        while (i < opLenMinusOne) {\n            opList += ops(i)\n         \
    \   i += 1\n        }\n        val opLenMinusOneInt = opLenMinusOne - 1\n    \
    \    while (i < operandLenMinusOne) {\n            operandList += operand(i)\n\
    \            i += 1\n        }\n        val opLenMinusOneInt = opLenMinusOne -\
    \ 1\n        val opLenMinusOneLong = opLenMinusOne - 1\n        val opLenMinusOneDouble\
    \ = opLenMinusOne - 1\n        val opLenMinusOneInt = opLenMinusOne - 1\n    \
    \    val opLenMinusOneLong = opLenMinusOne - 1\n        val opLenMinusOneDouble\
    \ = opLenMinusOne - 1\n        val opLenMinusOneInt = opLenMinusOne - 1\n    \
    \    val opLenMinusOneLong = opLenMinusOne - 1\n        val opLenMinusOneDouble\
    \ = opLenMinusOne - 1\n        val opLenMinusOneInt = opLenMinusOne - 1\n    \
    \    val opLenMinusOneLong = opLenMinusOne - 1\n        val opLenMinusOneDouble\
    \ = opLenMinusOne - 1\n        val opLenMinusOneInt = opLenMinusOne - 1\n    \
    \    val opLenMinusOneLong = opLenMinusOne - 1\n        val opLenMinusOneDouble\
    \ = opLenMinusOne - 1\n        val opLenMinusOneInt = opLenMinusOne - 1\n    \
    \    val opLenMinusOneLong = opLenMinusOne - 1\n        val opLenMinusOneDouble\
    \ = opLenMinusOne - 1\n        val opLenMinusOneInt = opLenMinusOne - 1\n    \
    \    val opLenMinusOneLong = opLenMinusOne - 1\n        val opLenMinusOneDouble\
    \ = opLenMinusOne - 1\n        val opLenMinusOneInt = opLenMinusOne - 1\n    \
    \    val opLenMinusOneLong = opLenMinusOne - 1\n        val opLen", "        val\
    \ ops = op.map(x => x.toChar)\n        val opList = ops.toList\n        val opLen\
    \ = opList.size\n        val operands = operand.map(x => x.toLong)\n        val\
    \ operandLen = operands.size\n        val opLenMinusOne = opLen - 1\n        val\
    \ operandLenMinusOne = operandLen - 1\n        val result = operands(0) * (ops(0)\
    \ - operands(0))\n        val operandsCopy = operands.toList\n        val operandsCopyLen\
    \ = operandsCopy.size\n        val opCopy = ops(0)\n        val opCopyLen = opCopy.length\n\
    \        val operandsCopy2 = operandsCopy.drop(1)\n        val operandsCopy2Len\
    \ = operandsCopy2.size\n        val opCopy2 = opCopy.drop(1)\n        val opCopy2Len\
    \ = opCopy2.length\n        val operandsCopy3 = operandsCopy.drop(2)\n       \
    \ val operandsCopy3Len = operandsCopy3.size\n        val opCopy3 = opCopy.drop(2)\n\
    \        val opCopy3Len = opCopy3.length\n        val operandsCopy4 = operandsCopy.drop(3)\n\
    \        val operandsCopy4Len = operandsCopy4.size\n        val opCopy4 = opCopy.drop(3)\n\
    \        val opCopy4Len = opCopy4.length\n        val operandsCopy5 = operandsCopy.drop(4)\n\
    \        val operandsCopy5Len = operandsCopy5.size\n        val opCopy5 = opCopy.drop(4)\n\
    \        val opCopy5Len = opCopy5.length\n        val operandsCopy6 = operandsCopy.drop(5)\n\
    \        val operandsCopy6Len = operandsCopy6.size\n        val opCopy6 = opCopy.drop(5)\n\
    \        val opCopy6Len = opCopy6.length\n        val operandsCopy7 = operandsCopy.drop(6)\n\
    \        val operandsCopy7Len = operandsCopy7.size\n        val opCopy7 = opCopy.drop(6)\n\
    \        val opCopy7Len = opCopy7.length\n        val operandsCopy8 = operandsCopy.drop(7)\n\
    \        val operandsCopy8Len = operandsCopy8.size\n        val opCopy8 = opCopy.drop(7)\n\
    \        val opCopy8Len = opCopy8.length\n        val operandsCopy9 = operandsCopy.drop(8)\n\
    \        val operandsCopy9Len = operandsCopy", "        val ops = op.map(_.toLowerCase)\n\
    \        val opLen = ops.size\n        val operands = operand.map(_.toLong)\n\
    \        val operandLen = operands.size\n        val result = operands.foldLeft(0)\
    \ { (acc, i) => acc + i * ops(ops.size - operandLen - 1) }\n        result", " \
    \       val opList = op.mkString(\"+\")\n        val operandList = operand.mkString(\"\
    +\")\n        val opListLength = opList.length\n        val operandListLength\
    \ = operandList.length\n        val opListLength = opList.length\n        val\
    \ operandListLength = operandList.length\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListLength\
    \ = opList.length\n        val operandListLength = operandList.length\n      \
    \  val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val operatorList = opList.filterNot(_.equals(\"\
    +\")).filterNot(_.equals(\"-\")).filterNot(_.equals(\"*\")).filterNot(_.equals(\"\
    //\")).filterNot(_.equals(\"**\"))\n        val operandListSize = operandList.size\n\
    \        val operatorListSize = operatorList.size\n        val result = 0L\n \
    \       val opIndex = 0\n        val opLength = opListSize\n        val operandIndex\
    \ = 0\n        val operandLength = operandListSize - 1\n        val operatorIndex\
    \ = 0\n        val operatorLength = operatorListSize - 1\n        while (operandIndex\
    \ < operandLength && operatorIndex < operatorLength) {\n            val op1 =\
    \ operatorList(opIndex)\n            val op2 = operatorList(opIndex + 1)\n   \
    \         val op3 = operatorList(opIndex + 2)\n            val op4 = operatorList(opIndex\
    \ + 3)\n            val op5 = operatorList(opIndex + 4)\n            val op6 =\
    \ operatorList(opIndex + 5)\n            val op7 = operatorList(opIndex + 6)\n\
    \            val op8 = operatorList(opIndex + 7)\n            val op9 = operatorList(opIndex\
    \ + 8)\n            val op10 = operatorList(opIndex + 9)\n            val op11\
    \ = operatorList(opIndex + 10)\n            val op12 = operatorList(opIndex +\
    \ 11)\n            val op13 = operatorList(opIndex + 12)\n            val op14\
    \ = operatorList(opIndex + 13)\n            val op15 = operatorList(opIndex +\
    \ 14)\n            val op16 = operatorList(opIndex + 15)\n            val op17\
    \ = operatorList(opIndex + 16)\n            val op18 = operatorList(opIndex +\
    \ 17)\n            val op19 = operatorList(opIndex + 18)\n            val op20\
    \ = operatorList(opIndex + 19)\n            val op21 = operatorList(opIndex +\
    \ 20)\n            val op22 = operatorList(opIndex + 21)\n            val op23\
    \ = operatorList(opIndex + 22)\n            val op24 = operatorList(opIndex +\
    \ 23)\n            val op25 = operatorList(opIndex + 24)\n            val op26\
    \ = operatorList(opIndex + 25)\n            val op27 = operatorList(opIndex +\
    \ 26)\n            val op28 = operatorList(opIndex + 27)\n            val op29\
    \ = operatorList(opIndex + 28)\n            val op30 = operatorList(opIndex +\
    \ 29)\n            val op31 = ", "        val ops = op.map(_.toUpperCase)\n  \
    \      val op1 = ops.head\n        val op2 = ops.last\n        val op1s = op1.toUpperCase\n\
    \        val op2s = op2.toUpperCase\n        val op1i = op1s.indexOf(op1s)\n \
    \       val op2i = op2s.indexOf(op2s)\n        val op1len = op1s.length\n    \
    \    val op2len = op2s.length\n        val op1i = op1s.indexOf(op1s)\n       \
    \ val op2i = op2s.indexOf(op2s)\n        val op1len = op1s.length\n        val\
    \ op2len = op2s.length\n        val op1i = op1s.indexOf(op1s)\n        val op2i\
    \ = op2s.indexOf(op2s)\n        val op1len = op1s.length\n        val op2len =\
    \ op2s.length\n        val op1i = op1s.indexOf(op1s)\n        val op2i = op2s.indexOf(op2s)\n\
    \        val op1len = op1s.length\n        val op2len = op2s.length\n        val\
    \ op1i = op1s.indexOf(op1s)\n        val op2i = op2s.indexOf(op2s)\n        val\
    \ op1len = op1s.length\n        val op2len = op2s.length\n        val op1i = op1s.indexOf(op1s)\n\
    \        val op2i = op2s.indexOf(op2s)\n        val op1len = op1s.length\n   \
    \     val op2len = op2s.length\n        val op1i = op1s.indexOf(op1s)\n      \
    \  val op2i = op2s.indexOf(op2s)\n        val op1len = op1s.length\n        val\
    \ op2len = op2s.length\n        val op1i = op1s.indexOf(op1s)\n        val op2i\
    \ = op2s.indexOf(op2s)\n        val op1len = op1s.length\n        val op2len =\
    \ op2s.length\n        val op1i = op1s.indexOf(op1s)\n        val op2i = op2s.indexOf(op2s)\n\
    \        val op1len = op1s.length\n        val op2len = op2s.length\n        val\
    \ op1i = op1s.indexOf(op1s)\n        val op2i = op2s.indexOf(op2s)\n        val\
    \ op1len = op1s.length\n        val op2len = op2s.length\n        val op1i = op1s.indexOf(op1s)\n\
    \        val op2i = op2s.indexOf(op2s)\n        ", "        val ops = op.map(_.toUpperCase)\n\
    \        val opArray = ops.toArray\n        val operandArray = operand.toArray\n\
    \        val length = opArray.length\n        val result = operandArray(0)\n \
    \       val op1 = opArray(0)\n        val op2 = opArray(1)\n        val op3 =\
    \ opArray(2)\n        val op4 = opArray(3)\n        val op5 = opArray(4)\n   \
    \     val op6 = opArray(5)\n        val op7 = opArray(6)\n        val op8 = opArray(7)\n\
    \        val op9 = opArray(8)\n        val op10 = opArray(9)\n        val op11\
    \ = opArray(10)\n        val op12 = opArray(11)\n        val op13 = opArray(12)\n\
    \        val op14 = opArray(13)\n        val op15 = opArray(14)\n        val op16\
    \ = opArray(15)\n        val op17 = opArray(16)\n        val op18 = opArray(17)\n\
    \        val op19 = opArray(18)\n        val op20 = opArray(19)\n        val op21\
    \ = opArray(20)\n        val op22 = opArray(21)\n        val op23 = opArray(22)\n\
    \        val op24 = opArray(23)\n        val op25 = opArray(24)\n        val op26\
    \ = opArray(25)\n        val op27 = opArray(26)\n        val op28 = opArray(27)\n\
    \        val op29 = opArray(28)\n        val op30 = opArray(29)\n        val op31\
    \ = opArray(30)\n        val op32 = opArray(31)\n        val op33 = opArray(32)\n\
    \        val op34 = opArray(33)\n        val op35 = opArray(34)\n        val op36\
    \ = opArray(35)\n        val op37 = opArray(36)\n        val op38 = opArray(37)\n\
    \        val op39 = opArray(38)\n        val op40 = opArray(39)\n        val op41\
    \ = opArray(40)\n        val op42 = opArray(41)\n        val op43 = opArray(42)\n\
    \        val op44 = opArray(43)\n        val op45 = opArray(44)\n        val op46\
    \ = opArray(45)\n        val op47 = opArray(46)\n        val op48 = opArray(47)\n\
    \        val op49 = opArray(48)\n        val op50 = opArray(49)\n        val op51\
    \ = opArray(50)\n", "        val opList = op.map(_.toLowerCase).toList\n     \
    \   val operandList = operand.map(_.toLong).toList\n        val opLength = opList.size\n\
    \        val operandLength = operandList.size\n        val opListLength = opList.map(_.toString.length).max\n\
    \        val operandListLength = operandList.map(_.toString.length).max\n    \
    \    val opListLength = opList.map(_.toString.length).max\n        val operandListLength\
    \ = operandList.map(_.toString.length).max\n        val opListLength = opList.map(_.toString.length).max\n\
    \        val operandListLength = operandList.map(_.toString.length).max\n    \
    \    val opListLength = opList.map(_.toString.length).max\n        val operandListLength\
    \ = operandList.map(_.toString.length).max\n        val opListLength = opList.map(_.toString.length).max\n\
    \        val operandListLength = operandList.map(_.toString.length).max\n    \
    \    val opListLength = opList.map(_.toString.length).max\n        val operandListLength\
    \ = operandList.map(_.toString.length).max\n        val opListLength = opList.map(_.toString.length).max\n\
    \        val operandListLength = operandList.map(_.toString.length).max\n    \
    \    val opListLength = opList.map(_.toString.length).max\n        val operandListLength\
    \ = operandList.map(_.toString.length).max\n        val opListLength = opList.map(_.toString.length).max\n\
    \        val operandListLength = operandList.map(_.toString.length).max\n    \
    \    val opListLength = opList.map(_.toString.length).max\n        val operandListLength\
    \ = operandList.map(_.toString.length).max\n        val opListLength = opList.map(_.toString.length).max\n\
    \        val operandListLength = operandList.map(_.toString.length).max\n    \
    \    val opListLength = opList.map(_.toString.length).max\n        val operandListLength\
    \ = operandList.map(_.toString.length).max\n        val opListLength = opList.map(_.toString.length).max\n\
    \        val operandListLength = operandList.map(_.toString.length).max\n    \
    \    val opListLength = opList.map(_.toString.length).max\n        val operandListLength\
    \ = operandList.map(_.toString.length).max\n        val opListLength = opList.map(_.toString.length).max\n\
    \        val operandListLength = operandList.map(_.toString.length).max\n    \
    \    val opListLength = opList.map(_.toString.length).max\n        val operandListLength\
    \ = operandList.", "        val opList = op.map(_.toUpperCase)\n        val operandList\
    \ = operand.map(_.toLong)\n        val opLen = opList.size\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLen = operandList.size\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opListLen = opList.length\n        val operandListLen\
    \ = operandList.length\n        val opListLenMinusOne = opListLen - 1\n      \
    \  val operandListLenMinusOne = operandListLen - 1\n        val opListLenMinusOneMinusOne\
    \ = opListLen - 1 - 1\n        val operandListLenMinusOneMinusOne = operandListLen\
    \ - 1 - 1\n        val opListLenMinusOneMinusOneMinusOne = opListLen - 1 - 1 -\
    \ 1\n        val operandListLenMinusOneMinusOneMinusOne = operandListLen - 1 -\
    \ 1 - 1 - 1\n        val opListLenMinusOneMinusOneMinusOneMinusOne = opListLen\
    \ - 1 - 1 - 1 - 1 - 1 - 1\n        val operandListLenMinusOneMinusOneMinusOneMinusOne\
    \ = operandListLen - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opListLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opListLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandListLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandListLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opListLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opListLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandListLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandListLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n \
    \       val opListLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opListLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n\
    \        val operandListLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandListLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\
    \ - 1 - 1\n        ", "        val opList = op.map(x => x.toChar)\n        val\
    \ opLen = opList.length\n        val operandList = operand.map(x => x.toLong)\n\
    \        val operandLen = operandList.length\n        val result = operandList.foldLeft(operandList.head)\
    \ { (acc, x) =>\n            val opIndex = opList.indexOf(x)\n            val\
    \ opVal = opIndex.toChar\n            val opValInt = opVal.toInt\n           \
    \ val opValLong = opVal.toLong\n            val opValFloat = opVal.toFloat\n \
    \           val opValDouble = opVal.toDouble\n            val opValString = opVal.toString\n\
    \            val opValChar = opVal.toChar\n            val opValBoolean = opVal.toBoolean\n\
    \            val opValInt = opVal.toInt\n            val opValLong = opVal.toLong\n\
    \            val opValFloat = opVal.toFloat\n            val opValDouble = opVal.toDouble\n\
    \            val opValString = opVal.toString\n            val opValChar = opVal.toChar\n\
    \            val opValBoolean = opVal.toBoolean\n            val opValInt = opVal.toInt\n\
    \            val opValLong = opVal.toLong\n            val opValFloat = opVal.toFloat\n\
    \            val opValDouble = opVal.toDouble\n            val opValString = opVal.toString\n\
    \            val opValChar = opVal.toChar\n            val opValBoolean = opVal.toBoolean\n\
    \            val opValInt = opVal.toInt\n            val opValLong = opVal.toLong\n\
    \            val opValFloat = opVal.toFloat\n            val opValDouble = opVal.toDouble\n\
    \            val opValString = opVal.toString\n            val opValChar = opVal.toChar\n\
    \            val opValBoolean = opVal.toBoolean\n            val opValInt = opVal.toInt\n\
    \            val opValLong = opVal.toLong\n            val opValFloat = opVal.toFloat\n\
    \            val opValDouble = opVal.toDouble\n            val opValString = opVal.toString\n\
    \            val opValChar = opVal.toChar\n            val opValBoolean = opVal.toBoolean\n\
    \            val opValInt = opVal.toInt\n            val opValLong = opVal.toLong\n\
    \            val opValFloat = opVal.toFloat\n            val opValDouble = opVal.toDouble\n\
    \            val opValString = opVal.toString\n            val ", "        val\
    \ ops = op.map(_.toUpperCase)\n        val opList = ops.toList\n        val operands\
    \ = operand.map(_.toLong)\n        val operandList = operands.toList\n       \
    \ val length = opList.size\n        val result = operandList(0)\n        val op1\
    \ = opList(0)\n        val op2 = opList(1)\n        val op3 = opList(2)\n    \
    \    val op4 = opList(3)\n        val op5 = opList(4)\n        val op6 = opList(5)\n\
    \        val op7 = opList(6)\n        val op8 = opList(7)\n        val op9 = opList(8)\n\
    \        val op10 = opList(9)\n        val op11 = opList(10)\n        val op12\
    \ = opList(11)\n        val op13 = opList(12)\n        val op14 = opList(13)\n\
    \        val op15 = opList(14)\n        val op16 = opList(15)\n        val op17\
    \ = opList(16)\n        val op18 = opList(17)\n        val op19 = opList(18)\n\
    \        val op20 = opList(19)\n        val op21 = opList(20)\n        val op22\
    \ = opList(21)\n        val op23 = opList(22)\n        val op24 = opList(23)\n\
    \        val op25 = opList(24)\n        val op26 = opList(25)\n        val op27\
    \ = opList(26)\n        val op28 = opList(27)\n        val op29 = opList(28)\n\
    \        val op30 = opList(29)\n        val op31 = opList(30)\n        val op32\
    \ = opList(31)\n        val op33 = opList(32)\n        val op34 = opList(33)\n\
    \        val op35 = opList(34)\n        val op36 = opList(35)\n        val op37\
    \ = opList(36)\n        val op38 = opList(37)\n        val op39 = opList(38)\n\
    \        val op40 = opList(39)\n        val op41 = opList(40)\n        val op42\
    \ = opList(41)\n        val op43 = opList(42)\n        val op44 = opList(43)\n\
    \        val op45 = opList(44)\n        val op46 = opList(45)\n        val op47\
    \ = opList(46)\n        val op48 = opList(47)\n        val op49 = opList(48)\n\
    \        val op50 = opList(49", "        val opList = op.mkString(\"+\")\n   \
    \     val operandList = operand.mkString(\"+\")\n        val ops = opList.split(\"\
    \\\\+\")\n        val operands = operandList.split(\"\\\\+\")\n        val opLen\
    \ = ops.size\n        val opLen2 = opLen/2\n        val opLen3 = opLen2/2\n  \
    \      val opLen4 = opLen2/2\n        val opLen5 = opLen2/2\n        val opLen6\
    \ = opLen2/2\n        val opLen7 = opLen2/2\n        val opLen8 = opLen2/2\n \
    \       val opLen9 = opLen2/2\n        val opLen10 = opLen2/2\n        val opLen11\
    \ = opLen2/2\n        val opLen12 = opLen2/2\n        val opLen13 = opLen2/2\n\
    \        val opLen14 = opLen2/2\n        val opLen15 = opLen2/2\n        val opLen16\
    \ = opLen2/2\n        val opLen17 = opLen2/2\n        val opLen18 = opLen2/2\n\
    \        val opLen19 = opLen2/2\n        val opLen20 = opLen2/2\n        val opLen21\
    \ = opLen2/2\n        val opLen22 = opLen2/2\n        val opLen23 = opLen2/2\n\
    \        val opLen24 = opLen2/2\n        val opLen25 = opLen2/2\n        val opLen26\
    \ = opLen2/2\n        val opLen27 = opLen2/2\n        val opLen28 = opLen2/2\n\
    \        val opLen29 = opLen2/2\n        val opLen30 = opLen2/2\n        val opLen31\
    \ = opLen2/2\n        val opLen32 = opLen2/2\n        val opLen33 = opLen2/2\n\
    \        val opLen34 = opLen2/2\n        val opLen35 = opLen2/2\n        val opLen36\
    \ = opLen2/2\n        val opLen37 = opLen2/2\n        val opLen38 = opLen2/2\n\
    \        val opLen39 = opLen2/2\n        val opLen40 = opLen2/2\n        val opLen41\
    \ = opLen2/2\n        val opLen42 = opLen2/2\n        val opLen43 = opLen2/2\n\
    \        val opLen44 = opLen2/2\n        val opLen", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLength = opList.length\n\
    \        val operandLength = operandList.length - 1\n        val result = operandList(0)\n\
    \        val op1 = opList(0)\n        val op2 = opList(1)\n        val op3 = opList(2)\n\
    \        val op4 = opList(3)\n        val op5 = opList(4)\n        val op6 = opList(5)\n\
    \        val op7 = opList(6)\n        val op8 = opList(7)\n        val op9 = opList(8)\n\
    \        val op10 = opList(9)\n        val op11 = opList(10)\n        val op12\
    \ = opList(11)\n        val op13 = opList(12)\n        val op14 = opList(13)\n\
    \        val op15 = opList(14)\n        val op16 = opList(15)\n        val op17\
    \ = opList(16)\n        val op18 = opList(17)\n        val op19 = opList(18)\n\
    \        val op20 = opList(19)\n        val op21 = opList(20)\n        val op22\
    \ = opList(21)\n        val op23 = opList(22)\n        val op24 = opList(23)\n\
    \        val op25 = opList(24)\n        val op26 = opList(25)\n        val op27\
    \ = opList(26)\n        val op28 = opList(27)\n        val op29 = opList(28)\n\
    \        val op30 = opList(29)\n        val op31 = opList(30)\n        val op32\
    \ = opList(31)\n        val op33 = opList(32)\n        val op34 = opList(33)\n\
    \        val op35 = opList(34)\n        val op36 = opList(35)\n        val op37\
    \ = opList(36)\n        val op38 = opList(37)\n        val op39 = opList(38)\n\
    \        val op40 = opList(39)\n        val op41 = opList(40)\n        val op42\
    \ = opList(41)\n        val op43 = opList(42)\n        val op44 = opList(43)\n\
    \        val op45 = opList(44)\n        val op46 = opList(45)\n        val op47\
    \ = opList(46)\n        val op48 = opList(47)\n        val op49 = opList(48)\n\
    \        val op50 = opList(49)\n        val op51 = ", "        val ops = op.map(x\
    \ => x.toChar)\n        val opList = ops.toList\n        val opLen = opList.length\n\
    \        val operands = operand.toList\n        val operandLen = operands.toList.length\n\
    \        val result = operands(0)\n        val operand1 = operands(1)\n      \
    \  val operand2 = operands(2)\n        val operand3 = operands(3)\n        val\
    \ operand4 = operands(4)\n        val operand5 = operands(5)\n        val operand6\
    \ = operands(6)\n        val operand7 = operands(7)\n        val operand8 = operands(8)\n\
    \        val operand9 = operands(9)\n        val operand10 = operands(10)\n  \
    \      val operand11 = operands(11)\n        val operand12 = operands(12)\n  \
    \      val operand13 = operands(13)\n        val operand14 = operands(14)\n  \
    \      val operand15 = operands(15)\n        val operand16 = operands(16)\n  \
    \      val operand17 = operands(17)\n        val operand18 = operands(18)\n  \
    \      val operand19 = operands(19)\n        val operand20 = operands(20)\n  \
    \      val operand21 = operands(21)\n        val operand22 = operands(22)\n  \
    \      val operand23 = operands(23)\n        val operand24 = operands(24)\n  \
    \      val operand25 = operands(25)\n        val operand26 = operands(26)\n  \
    \      val operand27 = operands(27)\n        val operand28 = operands(28)\n  \
    \      val operand29 = operands(29)\n        val operand30 = operands(30)\n  \
    \      val operand31 = operands(31)\n        val operand32 = operands(32)\n  \
    \      val operand33 = operands(33)\n        val operand34 = operands(34)\n  \
    \      val operand35 = operands(35)\n        val operand36 = operands(36)\n  \
    \      val operand37 = operands(37)\n        val operand38 = operands(38)\n  \
    \      val operand39 = operands(39)\n        val operand40 = operands(40)\n  \
    \      val operand41 = operands(41)\n        val operand42 = operands(42)\n  \
    \      val operand43 = operands(43)\n        val operand44 = operands(44)\n  \
    \      val operand45 = operands(45)\n        val operand46 = operands(46)\n  \
    \      val operand47 = operands(47)\n        val operand48 = operands(48)\n  \
    \      val operand49 = operands(49)\n        val operand50 = ", "        val opList\
    \ = op.map(_.toLowerCase)\n        val operandList = operand.map(_.toLong)\n \
    \       val opLen = opList.size\n        val operandLen = operandList.size\n \
    \       val opMap = {\n            val opMap = new mutable.HashMap[String, Long]()\n\
    \            opList.foreach(op => {\n                opMap.put(op, 0L)\n     \
    \       })\n            opMap\n        }\n        val operandMap = {\n       \
    \     val operandMap = new mutable.HashMap[Long, Long]()\n            operandList.foreach(operand\
    \ => {\n                operandMap.put(operand, 0L)\n            })\n        \
    \    operandMap\n        }\n        val opMap2 = {\n            val opMap2 = new\
    \ mutable.HashMap[String, Long]()\n            opList.foreach(op => {\n      \
    \          opMap2.put(op, 0L)\n            })\n            opMap2\n        }\n\
    \        val operandMap2 = {\n            val operandMap2 = new mutable.HashMap[Long,\
    \ Long]()\n            operandList.foreach(operand => {\n                operandMap2.put(operand,\
    \ 0L)\n            })\n            operandMap2\n        }\n        val opMap3\
    \ = {\n            val opMap3 = new mutable.HashMap[String, Long]()\n        \
    \    opList.foreach(op => {\n                opMap3.put(op, 0L)\n            })\n\
    \            opMap3\n        }\n        val operandMap3 = {\n            val operandMap3\
    \ = new mutable.HashMap[Long, Long]()\n            operandList.foreach(operand\
    \ => {\n                operandMap3.put(operand, 0L)\n            })\n       \
    \     operandMap3\n        }\n        val opMap4 = {\n            val opMap4 =\
    \ new mutable.HashMap[String, Long]()\n            opList.foreach(op => {\n  \
    \              opMap4.put(op, 0L)\n            })\n            opMap4\n      \
    \  }\n        val operandMap4 = {\n            val operandMap4 = new mutable.HashMap[Long,\
    \ Long]()\n            operandList.foreach(operand => {\n                operandMap4.put(operand,\
    \ 0L)\n            })\n            operandMap4\n        }\n        val opMap5\
    \ = {\n            val opMap5 = new mutable.HashMap[String, Long]()\n        \
    \    opList.foreach(op => {\n                opMap5.put(op, 0L)\n            })\n\
    \            opMap5\n        }\n        val operandMap5 = {\n            val operandMap5\
    \ = new mutable.HashMap[Long, Long]()\n            operandList.foreach(operand\
    \ => {\n                operandMap5.put(operand, 0L)\n            })\n       \
    \     operandMap5\n        }\n", "        val opList = op.asInstanceOf[List[String]]\n\
    \        val operandList = operand.asInstanceOf[List[Long]]\n        val operatorList\
    \ = opList.asInstanceOf[List[String]]\n        val operandListSize = operandList.size\n\
    \        val operatorListSize = operatorList.size\n        val result = operandList(0)\n\
    \        val op1 = operandList(1)\n        val op2 = operandList(2)\n        val\
    \ op3 = operandList(3)\n        val op4 = operandList(4)\n        val op5 = operandList(5)\n\
    \        val op6 = operandList(6)\n        val op7 = operandList(7)\n        val\
    \ op8 = operandList(8)\n        val op9 = operandList(9)\n        val op10 = operandList(10)\n\
    \        val op11 = operandList(11)\n        val op12 = operandList(12)\n    \
    \    val op13 = operandList(13)\n        val op14 = operandList(14)\n        val\
    \ op15 = operandList(15)\n        val op16 = operandList(16)\n        val op17\
    \ = operandList(17)\n        val op18 = operandList(18)\n        val op19 = operandList(19)\n\
    \        val op20 = operandList(20)\n        val op21 = operandList(21)\n    \
    \    val op22 = operandList(22)\n        val op23 = operandList(23)\n        val\
    \ op24 = operandList(24)\n        val op25 = operandList(25)\n        val op26\
    \ = operandList(26)\n        val op27 = operandList(27)\n        val op28 = operandList(28)\n\
    \        val op29 = operandList(29)\n        val op30 = operandList(30)\n    \
    \    val op31 = operandList(31)\n        val op32 = operandList(32)\n        val\
    \ op33 = operandList(33)\n        val op34 = operandList(34)\n        val op35\
    \ = operandList(35)\n        val op36 = operandList(36)\n        val op37 = operandList(37)\n\
    \        val op38 = operandList(38)\n        val op39 = operandList(39)\n    \
    \    val op40 = operandList(40)\n        val op41 = operandList(41)\n        val\
    \ op42 = operandList(42)\n        val op43 = operandList(43)\n        val op44\
    \ = operandList(44)\n        val op45 = operandList(45)\n        val op46 = operandList(46)\n\
    \        val op47 = operandList(47)\n        val op48 = operandList(48)\n    \
    \    val op49 = ", "        val ops = op.map(x => x.toChar)\n        val op1 =\
    \ ops.head\n        val op2 = ops.last\n        val op3 = ops.dropRight(1).head\n\
    \        val op4 = ops.dropRight(1).last\n        val op5 = ops.dropRight(2).last\n\
    \        val op6 = ops.dropRight(2).head\n        val op7 = ops.dropRight(3).last\n\
    \        val op8 = ops.dropRight(3).head\n        val op9 = ops.dropRight(4).last\n\
    \        val op10 = ops.dropRight(4).head\n        val op11 = ops.dropRight(5).last\n\
    \        val op12 = ops.dropRight(5).head\n        val op13 = ops.dropRight(6).last\n\
    \        val op14 = ops.dropRight(6).head\n        val op15 = ops.dropRight(7).last\n\
    \        val op16 = ops.dropRight(7).head\n        val op17 = ops.dropRight(8).last\n\
    \        val op18 = ops.dropRight(8).head\n        val op19 = ops.dropRight(9).last\n\
    \        val op20 = ops.dropRight(9).head\n        val op21 = ops.dropRight(10).last\n\
    \        val op22 = ops.dropRight(10).head\n        val op23 = ops.dropRight(11).last\n\
    \        val op24 = ops.dropRight(11).head\n        val op25 = ops.dropRight(12).last\n\
    \        val op26 = ops.dropRight(12).head\n        val op27 = ops.dropRight(13).last\n\
    \        val op28 = ops.dropRight(13).head\n        val op29 = ops.dropRight(14).last\n\
    \        val op30 = ops.dropRight(14).head\n        val op31 = ops.dropRight(15).last\n\
    \        val op32 = ops.dropRight(15).head\n        val op33 = ops.dropRight(16).last\n\
    \        val op34 = ops.dropRight(16).head\n        val op35 = ops.dropRight(17).last\n\
    \        val op36 = ops.dropRight(17).head\n        val op37 = ops.dropRight(18).last\n\
    \        val op38 = ops.dropRight(18).head\n        val op39 = ops.dropRight(19).last\n\
    \        val op40 = ops.dropRight(19).head\n        val op41 = ops.dropRight(",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val operatorList = opList.takeRight(opList.size - 1)\n        val resultList\
    \ = operandList.zip(operatorList).map(x => x._1 * x._2)\n        resultList.sum",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toInt)\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\n\
    \        val opSet = scala.collection.mutable.Set[String]()\n        val operandSet\
    \ = scala.collection.mutable.Set[Long]()\n        val opSet2 = scala.collection.mutable.Set[String]()\n\
    \        val operandSet2 = scala.collection.mutable.Set[Long]()\n        val opSet3\
    \ = scala.collection.mutable.Set[String]()\n        val operandSet3 = scala.collection.mutable.Set[Long]()\n\
    \        val opSet4 = scala.collection.mutable.Set[String]()\n        val operandSet4\
    \ = scala.collection.mutable.Set[Long]()\n        val opSet5 = scala.collection.mutable.Set[String]()\n\
    \        val operandSet5 = scala.collection.mutable.Set[Long]()\n        val opSet6\
    \ = scala.collection.mutable.Set[String]()\n        val operandSet6 = scala.collection.mutable.Set[Long]()\n\
    \        val opSet7 = scala.collection.mutable.Set[String]()\n        val operandSet7\
    \ = scala.collection.mutable.Set[Long]()\n        val opSet8 = scala.collection.mutable.Set[String]()\n\
    \        val operandSet8 = scala.collection.mutable.Set[Long]()\n        val opSet9\
    \ = scala.collection.mutable.Set[String]()\n        val operandSet9 = scala.collection.mutable.Set[Long]()\n\
    \        val opSet10 = scala.collection.mutable.Set[String]()\n        val operandSet10\
    \ = scala.collection.mutable.Set[Long]()\n        val opSet11 = scala.collection.mutable.Set[String]()\n\
    \        val operandSet11 = scala.collection.mutable.Set[Long]()\n        val\
    \ opSet12 = scala.collection.mutable.Set[String]()\n        val operandSet12 =\
    \ scala.collection.mutable.Set[Long]()\n        val opSet13 = scala.collection.mutable.Set[String]()\n\
    \        val operandSet13 = scala.collection.mutable.Set[Long]()\n        val\
    \ opSet14 = scala.collection.mutable.Set[String]()\n        val operandSet14 =\
    \ scala.collection.mutable.Set[Long]()\n        val opSet15 = scala.collection.mutable.Set[String]()\n\
    \        val ", "        val opList = op.asInstanceOf[List[String]]\n        val\
    \ operandList = operand.asInstanceOf[List[Long]]\n        val opLen = opList.size\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operandList.size\n\
    \        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOneInt\
    \ = opLenMinusOne - 1\n        val operandLenMinusOneInt = operandLenMinusOne\
    \ - 1\n        val opLenMinusOneLong = opLenMinusOne - 1L\n        val operandLenMinusOneLong\
    \ = operandLenMinusOne - 1L\n        val opLenMinusOneDouble = opLenMinusOne -\
    \ 1.0\n        val operandLenMinusOneDouble = operandLenMinusOne - 1.0\n     \
    \   val opLenMinusOneInt = opLenMinusOne - 1\n        val operandLenMinusOneInt\
    \ = operandLenMinusOne - 1\n        val opLenMinusOneLong = opLenMinusOne - 1L\n\
    \        val operandLenMinusOneLong = operandLenMinusOne - 1L\n        val opLenMinusOneDouble\
    \ = opLenMinusOne - 1.0\n        val operandLenMinusOneDouble = operandLenMinusOne\
    \ - 1.0\n        val opLenMinusOneInt = opLenMinusOne - 1\n        val operandLenMinusOneInt\
    \ = operandLenMinusOne - 1\n        val opLenMinusOneLong = opLenMinusOne - 1L\n\
    \        val operandLenMinusOneLong = operandLenMinusOne - 1L\n        val opLenMinusOneDouble\
    \ = opLenMinusOne - 1.0\n        val operandLenMinusOneDouble = operandLenMinusOne\
    \ - 1.0\n        val opLenMinusOneInt = opLenMinusOne - 1\n        val operandLenMinusOneInt\
    \ = operandLenMinusOne - 1\n        val opLenMinusOneLong = opLenMinusOne - 1L\n\
    \        val operandLenMinusOneLong = operandLenMinusOne - 1L\n        val opLenMinusOneDouble\
    \ = opLenMinusOne - 1.0\n        val operandLenMinusOneDouble = operandLenMinusOne\
    \ - 1.0\n        val opLenMinusOneInt = opLenMinusOne - 1\n        val operandLenMinusOneInt\
    \ = operandLenMinusOne - 1\n        val opLenMinusOneLong = opLen", "        val\
    \ ops = op.map(x => x.toChar)\n        val opList = ops.toList\n        val opLen\
    \ = opList.length\n        val opLenMinusOne = opLen - 1\n        val operandList\
    \ = operand.toList\n        val operandLen = operandList.length\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val result = operandList.foldLeft(0) { (acc, x) =>\
    \ acc + (opList(x) * x) }\n        result", "        val ops = op.map(_.toLowerCase)\n\
    \        val operands = operand.map(_.toLong)\n        val opLength = ops.size\n\
    \        val operandLength = operands.size\n        val opIndex = ops.indexOf(\"\
    +\")\n        val opIndex2 = ops.indexOf(\"*\")\n        val opIndex3 = ops.indexOf(\"\
    /\")\n        val opIndex4 = ops.indexOf(\"**\")\n        val opIndex5 = ops.indexOf(\"\
    //\")\n        val opIndex6 = ops.indexOf(\"%\")\n        val opIndex7 = ops.indexOf(\"\
    *\")\n        val opIndex8 = ops.indexOf(\"+\")\n        val opIndex9 = ops.indexOf(\"\
    -\")\n        val opIndex10 = ops.indexOf(\"*\")\n        val opIndex11 = ops.indexOf(\"\
    /\")\n        val opIndex12 = ops.indexOf(\"**\")\n        val opIndex13 = ops.indexOf(\"\
    //\")\n        val opIndex14 = ops.indexOf(\"%\")\n        val opIndex15 = ops.indexOf(\"\
    *\")\n        val opIndex16 = ops.indexOf(\"+\")\n        val opIndex17 = ops.indexOf(\"\
    -\")\n        val opIndex18 = ops.indexOf(\"*\")\n        val opIndex19 = ops.indexOf(\"\
    /\")\n        val opIndex20 = ops.indexOf(\"**\")\n        val opIndex21 = ops.indexOf(\"\
    //\")\n        val opIndex22 = ops.indexOf(\"%\")\n        val opIndex23 = ops.indexOf(\"\
    *\")\n        val opIndex24 = ops.indexOf(\"+\")\n        val opIndex25 = ops.indexOf(\"\
    -\")\n        val opIndex26 = ops.indexOf(\"*\")\n        val opIndex27 = ops.indexOf(\"\
    /\")\n        val opIndex28 = ops.indexOf(\"**\")\n        val opIndex29 = ops.indexOf(\"\
    //\")\n        val opIndex30 = ops.indexOf(\"%\")\n        val opIndex31 = ops.indexOf(\"\
    *\")\n        val opIndex32 = ops.indexOf(\"+\")\n        val opIndex33 = ops.indexOf(\"\
    -\")\n        val opIndex34 = ops.indexOf(\"*\")\n        val opIndex35 = ops.indexOf(\"\
    /\")\n        val opIndex36 = ops.indexOf(\"**\")\n        val opIndex37 = ops.indexOf(\"\
    //\")\n        val opIndex38 = ops.indexOf(\"%\")\n        val opIndex39 = ops.indexOf(\"\
    *\")\n        val opIndex40 = ops.indexOf(\"+\")\n        val opIndex41 = ops.indexOf(\"\
    -\")\n        val opIndex42 = ops.indexOf(\"*\")\n        val opIndex43 = ops.indexOf(\"\
    /\")\n        ", "        val opList = op.map(_.toUpperCase)\n        val operandList\
    \ = operand.map(_.toLong)\n        val opLen = opList.size\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLen = operandList.size\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operand",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opLenMinusTwo = opLen - 2\n        val operandLenMinusTwo =\
    \ operandLen - 2\n        val opLenMinusThree = opLen - 3\n        val operandLenMinusThree\
    \ = operandLen - 3\n        val opLenMinusFour = opLen - 4\n        val operandLenMinusFour\
    \ = operandLen - 4\n        val opLenMinusFive = opLen - 5\n        val operandLenMinusFive\
    \ = operandLen - 5\n        val opLenMinusSix = opLen - 6\n        val operandLenMinusSix\
    \ = operandLen - 6\n        val opLenMinusSeven = opLen - 7\n        val operandLenMinusSeven\
    \ = operandLen - 7\n        val opLenMinusEight = opLen - 8\n        val operandLenMinusEight\
    \ = operandLen - 8\n        val opLenMinusNine = opLen - 9\n        val operandLenMinusNine\
    \ = operandLen - 9\n        val opLenMinusTen = opLen - 10\n        val operandLenMinusTen\
    \ = operandLen - 10\n        val opLenMinusEleven = opLen - 11\n        val operandLenMinusEleven\
    \ = operandLen - 11\n        val opLenMinusTwelve = opLen - 12\n        val operandLenMinusTwelve\
    \ = operandLen - 12\n        val opLenMinusThirteen = opLen - 13\n        val\
    \ operandLenMinusThirteen = operandLen - 13\n        val opLenMinusFourteen =\
    \ opLen - 14\n        val operandLenMinusFourteen = operandLen - 14\n        val\
    \ opLenMinusFifteen = opLen - 15\n        val operandLenMinusFifteen = operandLen\
    \ - 15\n        val opLenMinusSixteen = opLen - 16\n        val operandLenMinusSixteen\
    \ = operandLen - 16\n        val opLenMinusSeventeen = opLen - 17\n        val\
    \ operandLenMinusSeventeen = operandLen - 17\n        ", "        val ops = op.map(_.toChar)\n\
    \        val opMap = ops.zip(operand).map(t => (t._1, t._2)).toMap\n        val\
    \ opList = ops.toList\n        val operandList = operand.toList\n        val opLen\
    \ = opList.size\n        val operandLen = operandList.size\n        val opMapLen\
    \ = opMap.values.toList\n        val operandMapLen = operandMap.values.toList\n\
    \        val opMapLenLen = opMapLen.zip(operandMapLen).map(t => (t._1, t._2)).toMap\n\
    \        val opMapLenLenLen = opMapLenLen.zip(operandMapLenLen).map(t => (t._1,\
    \ t._2)).toMap\n        val opMapLenLenLenLen = opMapLenLenLen.zip(operandMapLenLenLen).map(t\
    \ => (t._1, t._2)).toMap\n        val opMapLenLenLenLenLen = opMapLenLenLenLen.zip(operandMapLenLenLenLen).map(t\
    \ => (t._1, t._2)).toMap\n        val opMapLenLenLenLenLenLen = opMapLenLenLenLenLen.zip(operandMapLenLenLenLenLen).map(t\
    \ => (t._1, t._2)).toMap\n        val opMapLenLenLenLenLenLenLen = opMapLenLenLenLenLenLen.zip(operandMapLenLenLenLenLenLenLen).map(t\
    \ => (t._1, t._2)).toMap\n        val opMapLenLenLenLenLenLenLenLen = opMapLenLenLenLenLenLenLenLen.zip(operandMapLenLenLenLenLenLenLenLenLen).map(t\
    \ => (t._1, t._2)).toMap\n        val opMapLenLenLenLenLenLenLenLenLen = opMapLenLenLenLenLenLenLenLenLen.zip(operandMapLenLenLenLenLenLenLenLenLenLen).map(t\
    \ => (t._1, t._2)).toMap\n        val opMapLenLenLenLenLenLenLenLenLenLen = opMapLenLenLenLenLenLenLenLenLenLenLen.zip(operandMapLenLenLenLenLenLenLenLenLenLenLenLenLen).map(t\
    \ => (t._1, t._2)).toMap\n        val opMapLenLenLenLenLenLenLenLenLenLenLen =\
    \ opMapLenLenLenLenLenLenLenLenLenLenLenLenLen.zip(operandMapLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen).map(t\
    \ => (t._1, t._2)).toMap\n        val opMapLenLen", "        val ops = op.map(_.toLowerCase)\n\
    \        val opLen = ops.size\n        val opList = ops.map(_.toLong)\n      \
    \  val opLen = ops.size\n        val operandList = operand.map(_.toLong)\n   \
    \     val operandLen = operandList.size\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandListLen = operandList.length\n        val opListLen = opList.length\n\
    \        val operandList", "        val ops = op.map(x => x.toLowerCase)\n   \
    \     val opList = ops.toList\n        val operands = operand.toList\n       \
    \ val opLen = opList.size\n        val operandLen = operands.size\n        val\
    \ opLenMinusOne = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n\
    \        val opLenMinusTwo = opLen - 2\n        val operandLenMinusTwo = operandLen\
    \ - 2\n        val opLenMinusThree = opLen - 3\n        val operandLenMinusThree\
    \ = operandLen - 3\n        val opLenMinusFour = opLen - 4\n        val operandLenMinusFour\
    \ = operandLen - 4\n        val opLenMinusFive = opLen - 5\n        val operandLenMinusFive\
    \ = operandLen - 5\n        val opLenMinusSix = opLen - 6\n        val operandLenMinusSix\
    \ = operandLen - 6\n        val opLenMinusSeven = opLen - 7\n        val operandLenMinusSeven\
    \ = operandLen - 7\n        val opLenMinusEight = opLen - 8\n        val operandLenMinusEight\
    \ = operandLen - 8\n        val opLenMinusNine = opLen - 9\n        val operandLenMinusNine\
    \ = operandLen - 9\n        val opLenMinusTen = opLen - 10\n        val operandLenMinusTen\
    \ = operandLen - 10\n        val opLenMinusEleven = opLen - 11\n        val operandLenMinusEleven\
    \ = operandLen - 11\n        val opLenMinusTwelve = opLen - 12\n        val operandLenMinusTwelve\
    \ = operandLen - 12\n        val opLenMinusThirteen = opLen - 13\n        val\
    \ operandLenMinusThirteen = operandLen - 13\n        val opLenMinusFourteen =\
    \ opLen - 14\n        val operandLenMinusFourteen = operandLen - 14\n        val\
    \ opLenMinusFifteen = opLen - 15\n        val operandLenMinusFifteen = operandLen\
    \ - 15\n        val opLenMinusSixteen = opLen - 16\n        val operandLenMinusSixteen\
    \ = operandLen - 16\n        val opLenMinusSeventeen = opLen - 17\n        val\
    \ operandLenMinusSeventeen = operandLen ", "        val ops = op.map(_.toChar)\n\
    \        val opLen = ops.size\n        val opList = ops.map(_.toInt)\n       \
    \ val opLen = ops.size\n        val operandList = operand.map(_.toInt)\n     \
    \   val operandLen = operandList.size\n        val opListLen = opList.size\n \
    \       val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLen = opList.size\n\
    \        val operand", "        val ops = op.map(x => x.toDouble)\n        val\
    \ operands = operand.map(x => x.toDouble)\n        val result = ops.zip(operands).foldLeft(0.0)\
    \ { (acc, op) =>\n            acc + (op._1 * op._2)\n        }\n        result",
  "        val ops = op.map(_.toLowerCase).toList\n        val op1 = ops.head\n  \
    \      val op2 = ops.last\n        val op1Int = operand.head\n        val op2Int\
    \ = operand.last\n        val op1IntInt = op1Int.toInt\n        val op2IntInt\
    \ = op2Int.toInt\n        val op1IntIntInt = op1IntInt.toInt\n        val op2IntIntInt\
    \ = op2IntInt.toInt\n        val op1IntIntIntInt = op1IntIntInt.toInt\n      \
    \  val op2IntIntIntInt = op2IntIntInt.toInt\n        val op1IntIntIntIntInt =\
    \ op1IntIntIntInt.toInt\n        val op2IntIntIntIntInt = op2IntIntIntInt.toInt\n\
    \        val op1IntIntIntIntIntInt = op1IntIntIntIntInt.toInt\n        val op2IntIntIntIntIntInt\
    \ = op2IntIntIntIntInt.toInt\n        val op1IntIntIntIntIntIntInt = op1IntIntIntIntIntInt.toInt\n\
    \        val op2IntIntIntIntIntIntInt = op2IntIntIntIntIntInt.toInt\n        val\
    \ op1IntIntIntIntIntIntIntIntInt = op1IntIntIntIntIntIntIntInt.toInt\n       \
    \ val op2IntIntIntIntIntIntIntIntInt = op2IntIntIntIntIntIntIntInt.toInt\n   \
    \     val op1IntIntIntIntIntIntIntIntIntInt = op1IntIntIntIntIntIntIntIntInt.toInt\n\
    \        val op2IntIntIntIntIntIntIntIntIntInt = op2IntIntIntIntIntIntIntIntInt.toInt\n\
    \        val op1IntIntIntIntIntIntIntIntIntIntInt = op1IntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val op2IntIntIntIntIntIntIntIntIntIntInt = op2IntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val op1IntIntIntIntIntIntIntIntIntIntIntIntInt = op1IntIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val op2IntIntIntIntIntIntIntIntIntIntIntIntInt = op2", "        val ops\
    \ = op.map(_.toLowerCase)\n        val opLen = ops.size\n        val opArr = ops.toArray\n\
    \        val opArr_len = opArr.length\n        val operandArr = operand.toArray\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operandArr_len = operandArr.length\n        val opArr_len = opArr.length\n\
    \        val operand", "        val ops = op.map(x => x.toChar)\n        val op1\
    \ = ops.head\n        val op2 = ops.last\n        val op1Int = operand.head\n\
    \        val op2Int = operand.last\n        val op1Int = operand.head\n      \
    \  val op2Int = operand.last\n        val op1Int = operand.head\n        val op2Int\
    \ = operand.last\n        val op1Int = operand.head\n        val op2Int = operand.last\n\
    \        val op1Int = operand.head\n        val op2Int = operand.last\n      \
    \  val op1Int = operand.head\n        val op2Int = operand.last\n        val op1Int\
    \ = operand.head\n        val op2Int = operand.last\n        val op1Int = operand.head\n\
    \        val op2Int = operand.last\n        val op1Int = operand.head\n      \
    \  val op2Int = operand.last\n        val op1Int = operand.head\n        val op2Int\
    \ = operand.last\n        val op1Int = operand.head\n        val op2Int = operand.last\n\
    \        val op1Int = operand.head\n        val op2Int = operand.last\n      \
    \  val op1Int = operand.head\n        val op2Int = operand.last\n        val op1Int\
    \ = operand.head\n        val op2Int = operand.last\n        val op1Int = operand.head\n\
    \        val op2Int = operand.last\n        val op1Int = operand.head\n      \
    \  val op2Int = operand.last\n        val op1Int = operand.head\n        val op2Int\
    \ = operand.last\n        val op1Int = operand.head\n        val op2Int = operand.last\n\
    \        val op1Int = operand.head\n        val op2Int = operand.last\n      \
    \  val op1Int = operand.head\n        val op2Int = operand.last\n        val op1Int\
    \ = operand.head\n        val op2Int = operand.last\n        val op1Int = operand.head\n\
    \        val op2Int = operand.last\n        val op1Int = operand.head\n      \
    \  val op2Int = operand.last\n        val op1Int = operand.head\n        val op2Int\
    \ = operand.last\n        val op1In", "        val opList = op.map(x => x.toChar)\n\
    \        val operandList = operand.map(x => x.toLong)\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val opMap = opList.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val operandMap = operandList.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val opKeys = opMap.keySet\n        val operandKeys\
    \ = operandMap.keySet\n        val opKeysLen = opKeys.length\n        val operandKeysLen\
    \ = operandKeys.length\n        val opKeysMap = opKeys.map(x => (x, opMap(x)))\n\
    \        val operandKeysMap = operandKeys.map(x => (x, operandMap(x)))\n     \
    \   val opKeysMapLen = opKeysMap.length\n        val operandKeysMapLen = operandKeysMap.length\n\
    \        val opKeysMapMap = opKeysMap.map(x => (x._1, x._2)).toMap\n        val\
    \ operandKeysMapMap = operandKeysMap.map(x => (x._1, x._2)).toMap\n        val\
    \ opKeysMapMapLen = opKeysMapMap.length\n        val operandKeysMapMapLen = operandKeysMapMap.length\n\
    \        val opKeysMapMapMap = opKeysMapMap.map(x => (x._1, x._2)).toMap\n   \
    \     val operandKeysMapMapMap = operandKeysMapMap.map(x => (x._1, x._2)).toMap\n\
    \        val opKeysMapMapMapLen = opKeysMapMapMap.length\n        val operandKeysMapMapMapLen\
    \ = operandKeysMapMapMap.length\n        val opKeysMapMapMapMap = opKeysMapMapMap.map(x\
    \ => (x._1, x._2)).toMap\n        val operandKeysMapMapMapMap = operandKeysMapMapMap.map(x\
    \ => (x._1, x._2)).toMap\n        val opKeysMapMapMapLen = opKeysMapMapMap.length\n\
    \        val operandKeysMapMapMapLen = operandKeysMapMapMap.length\n        val\
    \ opKeysMapMapMapMap = opKeysMapMapMap.map(x => (x._1, x._2)).toMap\n        val\
    \ operandKeysMapMapMapMap = operandKeysMapMapMap.map(x => (x._1, x._2)).toMap\n\
    \        val opKeysMapMapMapMapLen = op", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLength = opList.length\n\
    \        val operandLength = operandList.length - 1\n        val result = operandList.foldLeft(operandList(0))\
    \ { (acc, i) =>\n            val opIndex = opList.indexOf(i)\n            val\
    \ opVal = opIndex.toLong\n            val operandVal = operandList(opIndex + 1)\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValInt = opValInt * opValInt\n            val operandValInt\
    \ = operandValInt * operandValInt\n            val opValInt = opValInt * opValInt\n\
    \            val operandValInt = operandValInt * operandValInt\n            val\
    \ opValInt = opValInt * opValInt\n            val operandValInt = operandValInt\
    \ * operandValInt\n            val opValInt = opValInt * opValInt\n          \
    \  val operandValInt = operandValInt * operandValInt\n            val opValInt\
    \ = opValInt * opValInt\n            val operandValInt = operandValInt * operandValInt\n\
    \            val opValInt = opValInt * opValInt\n            val operandValInt\
    \ = operandValInt * operandValInt\n            val opValInt = opValInt * opValInt\n\
    \            val operandValInt = operandValInt * operandValInt\n            val\
    \ opValInt = opValInt * opValInt\n            val operandValInt = operandValInt\
    \ * operandValInt\n            val opValInt = opValInt * opValInt\n          \
    \  val operandValInt = operandValInt * operandValInt\n            val opValInt\
    \ = opValInt * opValInt\n            val operandValInt = operandValInt * operandValInt\n\
    \            val opValInt = opValInt * opValInt\n            val operandValInt\
    \ = operandValInt * operandValInt\n            val opValInt = opValInt * opValInt\n\
    \            val operandValInt = operandValInt * operandValInt\n            val\
    \ opValInt = opValInt * opValInt\n            val operandValInt = operandValInt\
    \ * operandValInt\n            val opValInt = opValInt * opValInt\n          \
    \  val operandValInt = operandValInt * operandValInt\n            val opValInt\
    \ = opValInt * ", "        val opList = op.mkString(\"+\")\n        val operandList\
    \ = operand.mkString(\"+\")\n        val opList = opList.split(\"\\\\+\").map(_.trim).toList\n\
    \        val operandList = operandList.split(\"\\\\+\").map(_.trim).toList\n \
    \       val opListLength = opList.size\n        val operandListLength = operandList.size\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val op", "        val\
    \ opList = op.map(_.toUpperCase)\n        val opLen = opList.size\n        val\
    \ operandList = operand.map(_.toLong)\n        val operandLen = operandList.size\n\
    \        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opMapKeys = opList.map(_.toUpperCase)\n        val operandMapKeys\
    \ = operandList.map(_.toLong)\n        val opMapValues = opList.map(_.toUpperCase)\n\
    \        val operandMapValues = operandList.map(_.toLong)\n        val opMapKeySet\
    \ = opMapKeys.toSet\n        val operandMapKeySet = operandMapKeys.toSet\n   \
    \     val opMapValueSet = opMapValues.toSet\n        val operandMapValueSet =\
    \ operandMapValues.toSet\n        val opMapKeysSet = opMapKeys.toSet\n       \
    \ val operandMapKeysSet = operandMapKeys.toSet\n        val opMapValuesSet = opMapValues.toSet\n\
    \        val operandMapValuesSet = operandMapValues.toSet\n        val opMapKeySet\
    \ = opMapKeys.toSet\n        val operandMapKeySet = operandMapKeys.toSet\n   \
    \     val opMapValueSet = opMapValues.toSet\n        val operandMapValueSet =\
    \ operandMapValues.toSet\n        val opMapKeysSet = opMapKeys.toSet\n       \
    \ val operandMapKeysSet = operandMapKeys.toSet\n        val opMapValuesSet = opMapValues.toSet\n\
    \        val operandMapValuesSet = operandMapValues.toSet\n        val opMapKeySet\
    \ = opMapKeys.toSet\n        val operandMapKeySet = operandMapKeys.toSet\n   \
    \     val opMapValueSet = opMapValues.toSet\n        val operandMapValueSet =\
    \ operandMapValues.toSet\n        val opMapKeysSet = opMapKeys.toSet\n       \
    \ val operandMapKeysSet = operandMapKeys.toSet\n        val opMapValuesSet = opMapValues.toSet\n\
    \        val operandMapValuesSet = operandMapValues.toSet\n        val opMapKeySet\
    \ = opMapKeys.toSet\n        val operandMapKeySet = operandMapKeys.toSet\n   \
    \     val opMapValueSet = opMapValues.toSet\n        val operandMap", "      \
    \  val opList = op.mkString(\"+\")\n        val operandList = operand.mkString(\"\
    +\")\n        val ops = opList.split(\"\\\\+\")\n        val operands = operandList.split(\"\
    \\\\+\")\n        val opLen = ops.size\n        val opLen2 = operands.size\n \
    \       val opLen3 = opLen + opLen2\n        val opLen4 = opLen3 - 1\n       \
    \ val opLen5 = opLen4 - 2\n        val opLen6 = opLen5 - 1\n        val opLen7\
    \ = opLen6 - 2\n        val opLen8 = opLen7 - 1\n        val opLen9 = opLen8 -\
    \ 2\n        val opLen10 = opLen9 - 1\n        val opLen11 = opLen10 - 2\n   \
    \     val opLen12 = opLen11 - 1\n        val opLen13 = opLen12 - 2\n        val\
    \ opLen14 = opLen13 - 1\n        val opLen15 = opLen14 - 2\n        val opLen16\
    \ = opLen15 - 1\n        val opLen17 = opLen16 - 2\n        val opLen18 = opLen17\
    \ - 1\n        val opLen19 = opLen18 - 2\n        val opLen20 = opLen19 - 1\n\
    \        val opLen21 = opLen20 - 2\n        val opLen22 = opLen21 - 1\n      \
    \  val opLen23 = opLen22 - 2\n        val opLen24 = opLen23 - 1\n        val opLen25\
    \ = opLen24 - 2\n        val opLen26 = opLen25 - 1\n        val opLen27 = opLen26\
    \ - 2\n        val opLen28 = opLen27 - 1\n        val opLen29 = opLen28 - 2\n\
    \        val opLen30 = opLen29 - 1\n        val opLen31 = opLen30 - 2\n      \
    \  val opLen32 = opLen31 - 1\n        val opLen33 = opLen32 - 2\n        val opLen34\
    \ = opLen33 - 1\n        val opLen35 = opLen34 - 2\n        val opLen36 = opLen35\
    \ - 1\n        val opLen37 = opLen36 - 2\n        val opLen38 = opLen37 - 1\n\
    \        val opLen39 = opLen38 - 2\n        val opLen40 = opLen39 - 1\n      \
    \  val opLen41 = opLen40 - 2\n        val opLen42 = opLen41 - 1\n        val opLen",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\n\
    \        val opIndex = 0\n        val operandIndex = 0\n        val result = operandList.head\n\
    \        while(operandIndex < operandLen) {\n            val op1 = opList(opIndex)\n\
    \            val op2 = opList(opIndex + 1)\n            val op3 = opList(opIndex\
    \ + 2)\n            val op4 = opList(opIndex + 3)\n            val op5 = opList(opIndex\
    \ + 4)\n            val op6 = opList(opIndex + 5)\n            val op7 = opList(opIndex\
    \ + 6)\n            val op8 = opList(opIndex + 7)\n            val op9 = opList(opIndex\
    \ + 8)\n            val op10 = opList(opIndex + 9)\n            val op11 = opList(opIndex\
    \ + 10)\n            val op12 = opList(opIndex + 11)\n            val op13 = opList(opIndex\
    \ + 12)\n            val op14 = opList(opIndex + 13)\n            val op15 = opList(opIndex\
    \ + 14)\n            val op16 = opList(opIndex + 15)\n            val op17 = opList(opIndex\
    \ + 16)\n            val op18 = opList(opIndex + 17)\n            val op19 = opList(opIndex\
    \ + 18)\n            val op20 = opList(opIndex + 19)\n            val op21 = opList(opIndex\
    \ + 20)\n            val op22 = opList(opIndex + 21)\n            val op23 = opList(opIndex\
    \ + 22)\n            val op24 = opList(opIndex + 23)\n            val op25 = opList(opIndex\
    \ + 24)\n            val op26 = opList(opIndex + 25)\n            val op27 = opList(opIndex\
    \ + 26)\n            val op28 = opList(opIndex + 27)\n            val op29 = opList(opIndex\
    \ + 28)\n            val op30 = opList(opIndex + 29)\n            val op31 = opList(opIndex\
    \ + 30)\n            val op32 = opList(opIndex + 31)\n            val op33 = opList(opIndex\
    \ + 32)\n            val op34 = opList(opIndex + 33)\n            val op35 = opList(opIndex\
    \ + 34)\n            val op36 = opList(opIndex + 35)\n            val op37 = opList(opIndex\
    \ + 36)\n            val op", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toLong).toList\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val result = new mutable.HashMap[String, Long]()\n        val opMapKeys =\
    \ opList.map(x => x.toLowerCase)\n        val operandMapKeys = operandList.map(x\
    \ => x.toLong)\n        val opMapValues = opList.map(x => x.toLong)\n        val\
    \ operandMapValues = operandList.map(x => x.toLong)\n        val opMapKeysSet\
    \ = opMapKeys.toSet\n        val operandMapKeysSet = operandMapKeys.toSet\n  \
    \      val opMapValuesSet = opMapValues.toSet\n        val operandMapValuesSet\
    \ = operandMapValues.toSet\n        val opMapKeysNotInSet = opMapKeys.filter(!opMapKeysSet.contains(_))\n\
    \        val operandMapKeysNotInSet = operandMapKeys.filter(!operandMapKeysSet.contains(_))\n\
    \        val opMapValuesNotInSet = opMapValues.filter(!opMapValuesSet.contains(_))\n\
    \        val operandMapValuesNotInSet = operandMapValues.filter(!operandMapValuesSet.contains(_))\n\
    \        val opMapKeysNotInSetSet = opMapKeysNotInSet.map(x => x.toLowerCase).toSet\n\
    \        val operandMapKeysNotInSetSet = operandMapKeysNotInSet.map(x => x.toLong).toSet\n\
    \        val opMapValuesNotInSetSet = opMapValuesNotInSet.map(x => x.toLong).toSet\n\
    \        val operandMapValuesNotInSetSet = operandMapValuesNotInSet.map(x => x.toLong).toSet\n\
    \        val opMapKeysNotInSetSetSet = opMapKeysNotInSetSet.filter(!opMapKeysNotInSetSet.contains(_))\n\
    \        val operandMapKeysNotInSetSet = operandMapKeysNotInSetSet.filter(!operandMapKeysNotInSetSet.contains(_))\n\
    \        val opMapValuesNotInSetSet = opMapValuesNotInSetSet.filter(!opMapValuesNotInSetSet.contains(_))\n\
    \        val operandMapValuesNotInSetSet = operandMapValuesNotIn", "        val\
    \ ops = op.map(_.toLowerCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLen = ops.size\n        val opLenMinusOne = opLen - 1\n       \
    \ val operandLen = operands.size - 1\n        val opLenMinusOneMinusOne = opLenMinusOne\
    \ - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val\
    \ opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n \
    \       val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toInt)\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opMap = new mutable.HashMap[String, Int]()\n        val operandMap\
    \ = new mutable.HashMap[String, Int]()\n        val opMap2 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap2 = new mutable.HashMap[String, Int]()\n     \
    \   val opMap3 = new mutable.HashMap[String, Int]()\n        val operandMap3 =\
    \ new mutable.HashMap[String, Int]()\n        val opMap4 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap4 = new mutable.HashMap[String, Int]()\n     \
    \   val opMap5 = new mutable.HashMap[String, Int]()\n        val operandMap5 =\
    \ new mutable.HashMap[String, Int]()\n        val opMap6 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap6 = new mutable.HashMap[String, Int]()\n     \
    \   val opMap7 = new mutable.HashMap[String, Int]()\n        val operandMap7 =\
    \ new mutable.HashMap[String, Int]()\n        val opMap8 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap8 = new mutable.HashMap[String, Int]()\n     \
    \   val opMap9 = new mutable.HashMap[String, Int]()\n        val operandMap9 =\
    \ new mutable.HashMap[String, Int]()\n        val opMap10 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap10 = new mutable.HashMap[String, Int]()\n    \
    \    val opMap11 = new mutable.HashMap[String, Int]()\n        val operandMap11\
    \ = new mutable.HashMap[String, Int]()\n        val opMap12 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap12 = new mutable.HashMap[String, Int]()\n    \
    \    val opMap13 = new mutable.HashMap[String, Int]()\n        val operandMap13\
    \ = new mutable.HashMap[String, Int]()\n        val opMap14 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap14 = new mutable.HashMap[String, Int]()\n    \
    \    val opMap15 = new mutable.HashMap[String, Int]()\n        val operandMap15\
    \ = new mutable.HashMap[String, Int]()\n        val opMap16 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap16 = new mutable.", "        val opList = op.map(_.toUpperCase)\n\
    \        val opListLength = opList.length\n        val operandList = operand.map(_.toLong)\n\
    \        val operandListLength = operandList.length\n        val operatorList\
    \ = opList.dropRight(1)\n        val operatorListLength = operatorList.length\n\
    \        val operandListLength = operandListLength - 1\n        val operandList1\
    \ = operandList.take(operandListLength)\n        val operandList2 = operandList.drop(operandListLength)\n\
    \        val operandList1Length = operandList1.length\n        val operandList2Length\
    \ = operandList2.length\n        val operandList1Sum = operandList1.sum\n    \
    \    val operandList2Sum = operandList2.sum\n        val operandList1Product =\
    \ operandList1.product\n        val operandList2Product = operandList2.product\n\
    \        val operandList1ProductLength = operandList1Product.length\n        val\
    \ operandList2ProductLength = operandList2Product.length\n        val operandList1ProductSum\
    \ = operandList1Product.sum\n        val operandList2ProductSum = operandList2Product.sum\n\
    \        val operandList1ProductProduct = operandList1Product.product\n      \
    \  val operandList2ProductProduct = operandList2Product.product\n        val operandList1ProductProductLength\
    \ = operandList1ProductProduct.length\n        val operandList2ProductProductLength\
    \ = operandList2ProductProduct.length\n        val operandList1ProductProductSum\
    \ = operandList1ProductProduct.sum\n        val operandList2ProductProductSum\
    \ = operandList2ProductProduct.sum\n        val operandList1ProductProductProduct\
    \ = operandList1ProductProduct.product\n        val operandList2ProductProductProduct\
    \ = operandList2ProductProduct.product\n        val operandList1ProductProductProductLength\
    \ = operandList1ProductProductProduct.length\n        val operandList2ProductProductProductLength\
    \ = operandList2ProductProductProduct.length\n        val operandList1ProductProductProductSum\
    \ = operandList1ProductProductProduct.sum\n        val operandList2ProductProductProductSum\
    \ = operandList2ProductProductProduct.sum\n        val operandList1ProductProductProductProduct\
    \ = operandList1ProductProductProduct.product\n        val operandList2ProductProductProductProduct\
    \ = operandList2ProductProductProduct.product\n        val operandList1ProductProductProductProductLength\
    \ = operandList1ProductProductProductProduct.length\n        val operandList2ProductProductProductProductLength\
    \ = operandList2ProductProductProductProduct.length\n        val operandList1ProductProductProductProductSum\
    \ = operandList1ProductProductProductProduct.sum\n        val operandList", " \
    \       val opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toInt).toList\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opMapKeys = opMap.keySet\n        val operandMapKeys =\
    \ operandMap.keySet\n        val opMapValues = opMapKeys.toList\n        val operandMapValues\
    \ = operandMapKeys.toList\n        val opMapValueLength = opMapValues.length\n\
    \        val operandMapValueLength = operandMapValues.length\n        val opMapValueIndex\
    \ = 0\n        val operandMapValueIndex = 0\n        val opMapValueKey = 0\n \
    \       val operandMapValueKey = 0\n        val opMapValueValue = 0\n        val\
    \ operandMapValueValue = 0\n        val opMapValueKeyIndex = 0\n        val operandMapValueKeyIndex\
    \ = 0\n        val opMapValueValueIndex = 0\n        val operandMapValueValueIndex\
    \ = 0\n        val opMapValueKeyValue = 0\n        val operandMapValueKeyValue\
    \ = 0\n        val opMapValueValueValue = 0\n        val operandMapValueValueValue\
    \ = 0\n        val opMapValueKeyValueIndex = 0\n        val operandMapValueKeyValueIndex\
    \ = 0\n        val opMapValueValueValueIndex = 0\n        val operandMapValueValueValueIndex\
    \ = 0\n        val opMapValueKeyValueValueIndex = 0\n        val operandMapValueKeyValueValueIndex\
    \ = 0\n        val opMapValueValueValueIndex = 0\n        val operandMapValueValueValueIndex\
    \ = 0\n        val opMapValueKeyValueValueIndex = 0\n        val operandMapValueKeyValueValueIndex\
    \ = 0\n        val opMapValueValueValueIndex = 0\n        val operandMapValueValueValueIndex\
    \ = 0\n        val opMapValueKeyValueValueIndex = 0\n        val operandMapValueKeyValueValueIndex\
    \ = 0\n        val opMapValueValueValueIndex = 0\n        val operandMapValueValueValueIndex\
    \ = 0\n        val opMapValueKeyValueValueIndex = 0\n        val operandMapValueKeyValueValueIndex\
    \ = 0\n        val opMapValueValueValueIndex = 0\n        val operandMapValueValueValueIndex\
    \ = 0\n        val opMapValueKeyValueValueIndex = 0\n        val operandMapValueKeyValueValueIndex\
    \ = 0\n        val opMapValueValueValueIndex = 0\n        val ", "        val\
    \ ops = op.map(_.toLowerCase).toList\n        val opLen = ops.size\n        val\
    \ operandLen = operand.size\n        val opIndex = ops.indexOf(\"+\")\n      \
    \  val opIndex2 = ops.indexOf(\"*\")\n        val opIndex3 = ops.indexOf(\"/\"\
    )\n        val opIndex4 = ops.indexOf(\"**\")\n        val opIndex5 = ops.indexOf(\"\
    //\")\n        val opIndex6 = ops.indexOf(\"%\")\n        val opIndex7 = ops.indexOf(\"\
    *\")\n        val opIndex8 = ops.indexOf(\"+\")\n        val opIndex9 = ops.indexOf(\"\
    -\")\n        val opIndex10 = ops.indexOf(\"*\")\n        val opIndex11 = ops.indexOf(\"\
    /\")\n        val opIndex12 = ops.indexOf(\"**\")\n        val opIndex13 = ops.indexOf(\"\
    //\")\n        val opIndex14 = ops.indexOf(\"%\")\n        val opIndex15 = ops.indexOf(\"\
    *\")\n        val opIndex16 = ops.indexOf(\"+\")\n        val opIndex17 = ops.indexOf(\"\
    -\")\n        val opIndex18 = ops.indexOf(\"*\")\n        val opIndex19 = ops.indexOf(\"\
    /\")\n        val opIndex20 = ops.indexOf(\"**\")\n        val opIndex21 = ops.indexOf(\"\
    //\")\n        val opIndex22 = ops.indexOf(\"%\")\n        val opIndex23 = ops.indexOf(\"\
    *\")\n        val opIndex24 = ops.indexOf(\"+\")\n        val opIndex25 = ops.indexOf(\"\
    -\")\n        val opIndex26 = ops.indexOf(\"*\")\n        val opIndex27 = ops.indexOf(\"\
    /\")\n        val opIndex28 = ops.indexOf(\"**\")\n        val opIndex29 = ops.indexOf(\"\
    //\")\n        val opIndex30 = ops.indexOf(\"%\")\n        val opIndex31 = ops.indexOf(\"\
    *\")\n        val opIndex32 = ops.indexOf(\"+\")\n        val opIndex33 = ops.indexOf(\"\
    -\")\n        val opIndex34 = ops.indexOf(\"*\")\n        val opIndex35 = ops.indexOf(\"\
    /\")\n        val opIndex36 = ops.indexOf(\"**\")\n        val opIndex37 = ops.indexOf(\"\
    //\")\n        val opIndex38 = ops.indexOf(\"%\")\n        val opIndex39 = ops.indexOf(\"\
    *\")\n        val opIndex40 = ops.indexOf(\"+\")\n        val opIndex41 = ops.indexOf(\"\
    -\")\n        val opIndex42 = ops.indexOf(\"*\")\n        val opIndex43 = ops.indexOf(\"\
    /\")\n        val opIndex44 = ops.indexOf(\"**", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toLong).toList\n        val opLen = opList.size\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operandList.size\n\
    \        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOneInt\
    \ = opLenMinusOne.toInt\n        val operandLenMinusOneInt = operandLenMinusOne.toInt\n\
    \        val opLenMinusOneLong = opLenMinusOne.toLong\n        val operandLenMinusOneLong\
    \ = operandLenMinusOne.toLong\n        val opLenMinusOneDouble = opLenMinusOne.toDouble\n\
    \        val operandLenMinusOneDouble = operandLenMinusOne.toDouble\n        val\
    \ opLenMinusOneFloat = opLenMinusOne.toFloat\n        val operandLenMinusOneFloat\
    \ = operandLenMinusOne.toFloat\n        val opLenMinusOneInt = opLenMinusOne.toInt\n\
    \        val operandLenMinusOneInt = operandLenMinusOne.toInt\n        val opLenMinusOneLong\
    \ = opLenMinusOne.toLong\n        val operandLenMinusOneLong = operandLenMinusOne.toLong\n\
    \        val opLenMinusOneDouble = opLenMinusOne.toDouble\n        val operandLenMinusOneDouble\
    \ = operandLenMinusOne.toDouble\n        val opLenMinusOneFloat = opLenMinusOne.toFloat\n\
    \        val operandLenMinusOneFloat = operandLenMinusOne.toFloat\n        val\
    \ opLenMinusOneInt = opLenMinusOne.toInt\n        val operandLenMinusOneInt =\
    \ operandLenMinusOne.toInt\n        val opLenMinusOneLong = opLenMinusOne.toLong\n\
    \        val operandLenMinusOneLong = operandLenMinusOne.toLong\n        val opLenMinusOneDouble\
    \ = opLenMinusOne.toDouble\n        val operandLenMinusOneDouble = operandLenMinusOne.toDouble\n\
    \        val opLenMinusOneFloat = opLenMinusOne.toFloat\n        val operandLenMinusOneFloat\
    \ = operandLenMinusOne.toFloat\n        val opLenMinusOneInt = opLenMinusOne.toInt\n\
    \        val operandLenMinusOneInt = operandLenMinusOne.toInt\n        val opLen",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opArray = opList.map(_.toInt)\n        val operandArray = operandList.map(_.toInt)\n\
    \        val opArrayLen = opArray.length\n        val operandArrayLen = operandArray.length\n\
    \        val opArraySum = opArray.reduceLeft(_ + _)\n        val operandArraySum\
    \ = operandArray.reduceLeft(_ + _)\n        val opArrayDiff = opArray.length -\
    \ opArraySum\n        val operandArrayDiff = operandArray.length - operandArraySum\n\
    \        val opArrayMul = opArray.reduceLeft(_ * _)\n        val operandArrayMul\
    \ = operandArray.reduceLeft(_ * _)\n        val opArrayFloorDiv = opArray.reduceLeft(_\
    \ / _)\n        val operandArrayFloorDiv = operandArray.reduceLeft(_ / _)\n  \
    \      val opArrayExp = opArray.reduceLeft(_ ** _)\n        val operandArrayExp\
    \ = operandArray.reduceLeft(_ ** _)\n        val opArraySumExp = opArraySum *\
    \ opArrayExp\n        val operandArraySumExp = operandArraySum * opArrayExp\n\
    \        val opArrayDiffExp = opArrayDiff * opArrayExp\n        val operandArrayDiffExp\
    \ = operandArrayDiff * opArrayExp\n        val opArrayMulExp = opArrayMul * opArrayExp\n\
    \        val operandArrayMulExp = operandArrayMul * opArrayExp\n        val opArrayFloorDivExp\
    \ = opArrayFloorDiv * opArrayExp\n        val operandArrayFloorDivExp = operandArrayFloorDiv\
    \ * opArrayExp\n        val opArraySumExp2 = opArraySum * opArrayExp2\n      \
    \  val operandArraySumExp2 = operandArraySum * opArrayExp2\n        val opArrayDiffExp2\
    \ = opArrayDiff * opArrayExp2\n        val operandArrayDiffExp2 = operandArrayDiff\
    \ * opArrayExp2\n        val opArrayMulExp2 = opArrayMul * opArrayExp2\n     \
    \   val operandArrayMulExp2 = operandArrayMul * opArrayExp2\n        val opArrayFloorDivExp2\
    \ = opArrayFloorDiv * opArrayExp2\n        val operandArrayFloorDivExp2 = operandArrayFloor",
  "        val ops = op.map(_.toLowerCase).toList\n        val operands = operand.map(_.toLong).toList\n\
    \        val operators = op.reverse\n        val length = operands.length - 1\n\
    \        val result = operands.foldLeft(operand(0)) { (acc, x) => \n         \
    \   val op = operators.head\n            val operand = operands.tail.head\n  \
    \          val operand2 = operands.tail.tail.head\n            val operand3 =\
    \ operands.tail.tail.tail.head\n            val operand4 = operands.tail.tail.tail.tail.head\n\
    \            val operand5 = operands.tail.tail.tail.tail.tail.head\n         \
    \   val operand6 = operands.tail.tail.tail.tail.tail.tail.head\n            val\
    \ operand7 = operands.tail.tail.tail.tail.tail.tail.tail.head\n            val\
    \ operand8 = operands.tail.tail.tail.tail.tail.tail.tail.tail.head\n         \
    \   val operand9 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand10 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand11 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand12 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand13 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand14 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand15 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand16 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand17 = operand", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toInt).toList\n        val opLen = opList.size\n\
    \        val operandLen = operandList.size\n        val opMap = {\n          \
    \  val opMap = new mutable.HashMap[String, Int]()\n            opList.foreach(op\
    \ => {\n                opMap(op) += 1\n            })\n            opMap\n  \
    \      }\n        val operandMap = {\n            val operandMap = new mutable.HashMap[String,\
    \ Int]()\n            operandList.foreach(op => {\n                operandMap(op)\
    \ += 1\n            })\n            operandMap\n        }\n        val opKeys\
    \ = opMap.keys\n        val operandKeys = operandMap.keys\n        val opKeySet\
    \ = opKeys.toSet\n        val operandKeySet = operandKeys.toSet\n        val opKeysLen\
    \ = opKeySet.size\n        val operandKeysLen = operandKeySet.size\n        val\
    \ opKeysSet = opKeySet.diff(operandKeySet)\n        val operandKeysSet = operandKeySet.diff(opKeySet)\n\
    \        val opKeysSetLen = opKeysSet.size\n        val operandKeysSetLen = operandKeysSet.size\n\
    \        val opKeysSetSet = opKeysSet.diff(operandKeysSet)\n        val operandKeysSetSet\
    \ = operandKeysSet.diff(opKeysSet)\n        val opKeysSetSetLen = opKeysSetSet.size\n\
    \        val operandKeysSetSetLen = operandKeysSetSet.size\n        val opKeysSetSetSet\
    \ = opKeysSetSet.diff(operandKeysSetSet)\n        val operandKeysSetSetSet = operandKeysSetSet.diff(opKeysSetSet)\n\
    \        val opKeysSetSetSetLen = opKeysSetSetSet.size\n        val operandKeysSetSetSetLen\
    \ = operandKeysSetSetSet.size\n        val opKeysSetSetSetSet = opKeysSetSetSet.diff(operandKeysSetSetSet)\n\
    \        val operandKeysSetSetSetSet = operandKeysSetSetSet.diff(opKeysSetSetSet)\n\
    \        val opKeysSetSetSetSetLen = opKeysSetSetSetSet.size\n        val operandKeysSetSetSetSetLen\
    \ = operandKeysSetSetSetSet.size\n        val opKeysSetSetSetSetSet = opKeysSetSetSetSet.diff(operandKeys",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.length\n        val opLenMinusOne = opLen - 1\n  \
    \      val operandLen = operandList.length\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opLenMinusOnePlusOne = opLen - 1\n        val operandLenMinusOnePlusOne\
    \ = operandLen - 1\n        val opLenMinusOnePlusOnePlusOne = opLen - 1\n    \
    \    val operandLenMinusOnePlusOnePlusOne = operandLen - 1\n        val opLenMinusOnePlusOnePlusOnePlusOne\
    \ = opLen - 1\n        val operandLenMinusOnePlusOnePlusOnePlusOne = operandLen\
    \ - 1\n        val opLenMinusOnePlusOnePlusOnePlusOnePlusOne = opLen - 1\n   \
    \     val operandLenMinusOnePlusOnePlusOnePlusOnePlusOne = operandLen - 1\n  \
    \      val opLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOne = opLen - 1\n    \
    \    val operandLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOne = operandLen -\
    \ 1\n        val opLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne = opLen\
    \ - 1\n        val operandLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = operandLen - 1\n        val opLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = opLen - 1\n        val operandLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = operandLen - 1\n        val opLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = opLen - 1\n        val operandLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = operandLen - 1\n        val opLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = opLen - 1\n        val operandLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = operandLen - 1\n        val opLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = opLen - 1\n        val operand", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLength = opList.length\n\
    \        val operandLength = operandList.length - 1\n        val opMap : Map[String,\
    \ Long] = opList.zip(operandList).map(x => (x._1, x._2)).toMap\n        val operandMap\
    \ : Map[Long, Long] = operandList.zip(operandList).map(x => (x._1, x._2)).toMap\n\
    \        val opMapKeys = opMap.keys\n        val operandMapKeys = operandMap.keys\n\
    \        val opMapValues = opMap.values.toList\n        val operandMapValues =\
    \ operandMap.values.toList\n        val opMapKeysLength = opMapKeys.size\n   \
    \     val operandMapKeysLength = operandMapKeys.size\n        val opMapValuesLength\
    \ = opMapValues.size\n        val operandMapValuesLength = operandMapValues.size\n\
    \        val opMapKeysLength = opMapKeys.size\n        val operandMapKeysLength\
    \ = operandMapKeys.size\n        val opMapValuesLength = opMapValues.size\n  \
    \      val operandMapValuesLength = operandMapValues.size\n        val opMapKeysLength\
    \ = opMapKeys.size\n        val operandMapKeysLength = operandMapKeys.size\n \
    \       val opMapValuesLength = opMapValues.size\n        val operandMapValuesLength\
    \ = operandMapValues.size\n        val opMapKeysLength = opMapKeys.size\n    \
    \    val operandMapKeysLength = operandMapKeys.size\n        val opMapValuesLength\
    \ = opMapValues.size\n        val operandMapValuesLength = operandMapValues.size\n\
    \        val opMapKeysLength = opMapKeys.size\n        val operandMapKeysLength\
    \ = operandMapKeys.size\n        val opMapValuesLength = opMapValues.size\n  \
    \      val operandMapValuesLength = operandMapValues.size\n        val opMapKeysLength\
    \ = opMapKeys.size\n        val operandMapKeysLength = operandMapKeys.size\n \
    \       val opMapValuesLength = opMapValues.size\n        val operandMapValuesLength\
    \ = operandMapValues.size\n        val opMapKeysLength = opMapKeys.size\n    \
    \    val operandMapKeysLength = operandMapKeys.size\n        val opMapValuesLength\
    \ = opMapValues.size\n        val operandMapValuesLength = operandMapValues.size\n\
    \        val opMapKeysLength = opMapKeys.size\n        val operandMapKeysLength\
    \ = operandMapKeys.size\n        val opMapValuesLength = opMapValues.size\n  \
    \      val operandMapValuesLength = operandMapValues.size\n        val op", " \
    \       val opList = op.map(x => x.toChar)\n        val operandList = operand.map(x\
    \ => x.toLong)\n        val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val opMap2 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap2 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap3 = new mutable.HashMap[String, Long]()\n        val operandMap3\
    \ = new mutable.HashMap[String, Long]()\n        val opMap4 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap4 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap5 = new mutable.HashMap[String, Long]()\n        val operandMap5\
    \ = new mutable.HashMap[String, Long]()\n        val opMap6 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap6 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap7 = new mutable.HashMap[String, Long]()\n        val operandMap7\
    \ = new mutable.HashMap[String, Long]()\n        val opMap8 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap8 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap9 = new mutable.HashMap[String, Long]()\n        val operandMap9\
    \ = new mutable.HashMap[String, Long]()\n        val opMap10 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap10 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap11 = new mutable.HashMap[String, Long]()\n        val operandMap11\
    \ = new mutable.HashMap[String, Long]()\n        val opMap12 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap12 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap13 = new mutable.HashMap[String, Long]()\n        val operandMap13\
    \ = new mutable.HashMap[String, Long]()\n        val opMap14 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap14 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap15 = new mutable.HashMap[String, Long]()\n        val operandMap15\
    \ = new mutable.HashMap[String, Long]()\n        val opMap16 = new mutable.HashMap[String,\
    \ Long]()\n        val operand", "        val opList = op.mkString(\"+\")\n  \
    \      val opList2 = op.mkString(\"*\")\n        val opList3 = op.mkString(\"\
    //\")\n        val opList4 = op.mkString(\"**\")\n        val opList5 = op.mkString(\"\
    +\")\n        val opList6 = op.mkString(\"*\")\n        val opList7 = op.mkString(\"\
    //\")\n        val opList8 = op.mkString(\"**\")\n        val opList9 = op.mkString(\"\
    +\")\n        val opList10 = op.mkString(\"*\")\n        val opList11 = op.mkString(\"\
    //\")\n        val opList12 = op.mkString(\"**\")\n        val opList13 = op.mkString(\"\
    +\")\n        val opList14 = op.mkString(\"*\")\n        val opList15 = op.mkString(\"\
    //\")\n        val opList16 = op.mkString(\"**\")\n        val opList17 = op.mkString(\"\
    +\")\n        val opList18 = op.mkString(\"*\")\n        val opList19 = op.mkString(\"\
    //\")\n        val opList20 = op.mkString(\"**\")\n        val opList21 = op.mkString(\"\
    +\")\n        val opList22 = op.mkString(\"*\")\n        val opList23 = op.mkString(\"\
    //\")\n        val opList24 = op.mkString(\"**\")\n        val opList25 = op.mkString(\"\
    +\")\n        val opList26 = op.mkString(\"*\")\n        val opList27 = op.mkString(\"\
    //\")\n        val opList28 = op.mkString(\"**\")\n        val opList29 = op.mkString(\"\
    +\")\n        val opList30 = op.mkString(\"*\")\n        val opList31 = op.mkString(\"\
    //\")\n        val opList32 = op.mkString(\"**\")\n        val opList33 = op.mkString(\"\
    +\")\n        val opList34 = op.mkString(\"*\")\n        val opList35 = op.mkString(\"\
    //\")\n        val opList36 = op.mkString(\"**\")\n        val opList37 = op.mkString(\"\
    +\")\n        val opList38 = op.mkString(\"*\")\n        val opList39 = op.mkString(\"\
    //\")\n        val opList40 = op.mkString(\"**\")\n        val opList41 = op.mkString(\"\
    +\")\n        val opList42 = op.mkString(\"*\")\n        val opList43 = op.mkString(\"\
    //\")\n        val opList44 = op.mkString(\"**\")\n        val opList45 = op.mkString(\"\
    +\")\n        val opList46 = op.mk", "        val opList = op.map(_.toUpperCase)\n\
    \        val opLen = opList.size\n        val opList2 = opList.tail\n        val\
    \ opLen2 = opList2.size\n        val operand2 = operand.tail\n        val operandLen\
    \ = operand2.size\n        val operandList2 = operand2.map(_.toLong)\n       \
    \ val operandLen2 = operandList2.size\n        val operandList3 = operandList2.map(_.toInt)\n\
    \        val operandLen3 = operandList3.size\n        val operandList4 = operandList3.map(_.toDouble)\n\
    \        val operandLen4 = operandList4.size\n        val operandList5 = operandList4.map(_.toFloat)\n\
    \        val operandLen5 = operandList5.size\n        val operandList6 = operandList5.map(_.toChar)\n\
    \        val operandLen6 = operandList6.size\n        val operandList7 = operandList6.map(_.toBoolean)\n\
    \        val operandLen7 = operandList7.size\n        val operandList8 = operandList7.map(_.toByte)\n\
    \        val operandLen8 = operandList8.size\n        val operandList9 = operandList8.map(_.toShort)\n\
    \        val operandLen9 = operandList9.size\n        val operandList10 = operandList9.map(_.toChar)\n\
    \        val operandLen10 = operandList10.size\n        val operandList11 = operandList10.map(_.toBoolean)\n\
    \        val operandLen11 = operandList11.size\n        val operandList12 = operandList11.map(_.toByte)\n\
    \        val operandLen12 = operandList12.size\n        val operandList13 = operandList12.map(_.toShort)\n\
    \        val operandLen13 = operandList13.size\n        val operandList14 = operandList13.map(_.toChar)\n\
    \        val operandLen14 = operandList14.size\n        val operandList15 = operandList14.map(_.toBoolean)\n\
    \        val operandLen15 = operandList15.size\n        val operandList16 = operandList15.map(_.toByte)\n\
    \        val operandLen16 = operandList16.size\n        val operandList17 = operandList16.map(_.toShort)\n\
    \        val operandLen17 = operandList17.size\n        val operandList18 = operandList17.map(_.toChar)\n\
    \        val operandLen18 = operandList18.size\n        val operandList19 = operandList18.map(_.toBoolean)\n\
    \        val operandLen19 = operandList19.size\n        val operandList20 = operandList19.map(_.",
  "        val ops = op.map(_.toLowerCase)\n        val opLen = ops.length\n     \
    \   val operandLen = operand.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val result = new mutable.HashMap[String, Long]()\n        val opMapKeys =\
    \ ops.toList\n        val operandMapKeys = operand.toList\n        val opMapValues\
    \ = ops.map(x => x.toLong)\n        val operandMapValues = operand.map(x => x.toLong)\n\
    \        val opMapKeySet = opMapKeys.toSet\n        val operandMapKeySet = operandMapKeys.toSet\n\
    \        val opMapValueSet = opMapValues.toSet\n        val operandMapValueSet\
    \ = operandMapValues.toSet\n        val opMapKeyIter = opMapKeySet.iterator\n\
    \        val operandMapKeyIter = operandMapKeySet.iterator\n        val opMapValueIter\
    \ = opMapValueSet.iterator\n        val operandMapValueIter = operandMapValueSet.iterator\n\
    \        val opMapKeyIterNext = opMapKeyIter.next\n        val operandMapKeyIterNext\
    \ = operandMapKeyIter.next\n        val opMapValueIterNext = opMapValueIter.next\n\
    \        val operandMapValueIterNext = operandMapValueIter.next\n        val opMapKeyIterPrev\
    \ = opMapKeyIter.prev\n        val operandMapKeyIterPrev = operandMapKeyIter.prev\n\
    \        val opMapValueIterPrev = opMapValueIter.prev\n        val operandMapValueIterPrev\
    \ = operandMapValueIter.prev\n        val opMapKeyIterNextPrev = opMapKeyIterNext.prev\n\
    \        val operandMapKeyIterNextPrev = operandMapKeyIterNext.prev\n        val\
    \ opMapValueIterNextPrev = opMapValueIterNext.prev\n        val operandMapValueIterNextPrev\
    \ = operandMapValueIterNext.prev\n        val opMapKeyIterPrevPrev = opMapKeyIterPrev.prev\n\
    \        val operandMapKeyIterPrevPrev = operandMapKeyIterPrev.prev\n        val\
    \ opMapValueIterPrevPrev = opMapValueIterPrev.prev\n        val operandMapValueIterPrevPrev\
    \ = operandMapValueIterPrev.prev\n        val opMapKeyIterNextNext = opMapKeyIterNext.next\n\
    \        val operandMapKeyIterNextNext = operandMapKeyIterN", "        val ops\
    \ = op.map(_.toLowerCase)\n        val operands = operand.map(_.toLong)\n    \
    \    val opLen = ops.size\n        val operandLen = operands.size\n        val\
    \ opMap = {\n            val opMap = new mutable.HashMap[String, Long]()\n   \
    \         ops.foreach(op => opMap += (op -> (opMap.getOrElse(op, 0) + 1)))\n \
    \           opMap\n        }\n        val opMap2 = {\n            val opMap2 =\
    \ new mutable.HashMap[String, Long]()\n            ops.foreach(op => opMap2 +=\
    \ (op -> (opMap2.getOrElse(op, 0) + 1)))\n            opMap2\n        }\n    \
    \    val operandMap = {\n            val operandMap = new mutable.HashMap[String,\
    \ Long]()\n            operands.foreach(op => operandMap += (op -> (operandMap.getOrElse(op,\
    \ 0) + 1)))\n            operandMap\n        }\n        val opMap3 = {\n     \
    \       val opMap3 = new mutable.HashMap[String, Long]()\n            ops.foreach(op\
    \ => opMap3 += (op -> (opMap3.getOrElse(op, 0) + 1)))\n            opMap3\n  \
    \      }\n        val operandMap2 = {\n            val operandMap2 = new mutable.HashMap[String,\
    \ Long]()\n            operands.foreach(op => operandMap2 += (op -> (operandMap2.getOrElse(op,\
    \ 0) + 1)))\n            operandMap2\n        }\n        val opMap4 = {\n    \
    \        val opMap4 = new mutable.HashMap[String, Long]()\n            ops.foreach(op\
    \ => opMap4 += (op -> (opMap4.getOrElse(op, 0) + 1)))\n            opMap4\n  \
    \      }\n        val operandMap3 = {\n            val operandMap3 = new mutable.HashMap[String,\
    \ Long]()\n            operands.foreach(op => operandMap3 += (op -> (operandMap3.getOrElse(op,\
    \ 0) + 1)))\n            operandMap3\n        }\n        val opMap5 = {\n    \
    \        val opMap5 = new mutable.HashMap[String, Long]()\n            ops.foreach(op\
    \ => opMap5 += (op -> (opMap5.getOrElse(op, 0) + 1)))\n            opMap5\n  \
    \      }\n        val operandMap4 = {\n            val operandMap4 = new mutable.HashMap[String,\
    \ Long]()\n            operands.foreach(op => operandMap4 += (op -> (operandMap4.getOrElse(op,\
    \ 0) + 1)))\n            operandMap4\n        }\n        val opMap6 = {\n    \
    \        val opMap6 = new mutable.", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val opMap2 = new mutable.HashMap[String, Long]()\n        val operandMap2\
    \ = new mutable.HashMap[String, Long]()\n        val opMap3 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap3 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap4 = new mutable.HashMap[String, Long]()\n        val operandMap4\
    \ = new mutable.HashMap[String, Long]()\n        val opMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap5 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap6 = new mutable.HashMap[String, Long]()\n        val operandMap6\
    \ = new mutable.HashMap[String, Long]()\n        val opMap7 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap7 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap8 = new mutable.HashMap[String, Long]()\n        val operandMap8\
    \ = new mutable.HashMap[String, Long]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap9 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap10 = new mutable.HashMap[String, Long]()\n        val operandMap10\
    \ = new mutable.HashMap[String, Long]()\n        val opMap11 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap11 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap12 = new mutable.HashMap[String, Long]()\n        val operandMap12\
    \ = new mutable.HashMap[String, Long]()\n        val opMap13 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap13 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap14 = new mutable.HashMap[String, Long]()\n        val operandMap14\
    \ = new mutable.HashMap[String, Long]()\n        val opMap15 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap15 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap16 = new mutable.HashMap[String, Long]()\n        val operandMap16\
    \ = new mut", "        val opList = op.map(_.toUpperCase)\n        val operandList\
    \ = operand.map(_.toLong)\n        val opLen = opList.size\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLen = operandList.size\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val op",
  "        val ops = op.map(x => x.toChar)\n        val op1 = ops.head\n        val\
    \ op2 = ops.last\n        val operand1 = operand.head\n        val operand2 =\
    \ operand.last\n        val op1Val = op1\n        val op2Val = op2\n        val\
    \ operand1Val = operand1\n        val operand2Val = operand2\n        val op1Int\
    \ = op1Val.toInt\n        val op2Int = op2Val.toInt\n        val operand1Int =\
    \ operand1Val.toInt\n        val operand2Int = operand2Val.toInt\n        val\
    \ op1Char = op1Val.toChar\n        val op2Char = op2Val.toChar\n        val operand1Char\
    \ = operand1Val.toChar\n        val operand2Char = operand2Val.toChar\n      \
    \  val op1ValInt = op1Val.toInt\n        val op2ValInt = op2Val.toInt\n      \
    \  val operand1ValInt = operand1Val.toInt\n        val operand2ValInt = operand2Val.toInt\n\
    \        val op1ValChar = op1Val.toChar\n        val op2ValChar = op2Val.toChar\n\
    \        val operand1ValChar = operand1Val.toChar\n        val operand2ValChar\
    \ = operand2Val.toChar\n        val op1ValInt = op1Val.toInt\n        val op2ValInt\
    \ = op2Val.toInt\n        val operand1ValInt = operand1Val.toInt\n        val\
    \ operand2ValInt = operand2Val.toInt\n        val op1ValChar = op1Val.toChar\n\
    \        val op2ValChar = op2Val.toChar\n        val operand1ValChar = operand1Val.toChar\n\
    \        val operand2ValChar = operand2Val.toChar\n        val op1ValInt = op1Val.toInt\n\
    \        val op2ValInt = op2Val.toInt\n        val operand1ValInt = operand1Val.toInt\n\
    \        val operand2ValInt = operand2Val.toInt\n        val op1ValChar = op1Val.toChar\n\
    \        val op2ValChar = op2Val.toChar\n        val operand1ValChar = operand1Val.toChar\n\
    \        val operand2ValChar = operand2Val.toChar\n        val op1ValInt = op1Val.toInt\n\
    \        val op2ValInt = op2Val.toInt", "        val opList = op.map(x => x.toChar)\n\
    \        val operandList = operand.map(x => x.toLong)\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val result = new mutable.HashMap[String, Long]()\n        val opMapKeys =\
    \ opList.map(x => x.toChar)\n        val operandMapKeys = operandList.map(x =>\
    \ x.toChar)\n        val opMapValues = opList.map(x => x.toLong)\n        val\
    \ operandMapValues = operandList.map(x => x.toLong)\n        val opMapKeysLen\
    \ = opMapKeys.length\n        val operandMapKeysLen = operandMapKeys.length -\
    \ 1\n        val opMapValueLen = opMapValues.length\n        val operandMapValueLen\
    \ = operandMapValues.length - 1\n        val opMapKeysMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMapKeysMap = new mutable.HashMap[String, Long]()\n\
    \        val opMapValueMap = new mutable.HashMap[String, Long]()\n        val\
    \ operandMapValueMap = new mutable.HashMap[String, Long]()\n        val opMapKeysMapKeys\
    \ = opMapKeys.map(x => x.toChar)\n        val operandMapKeysMapKeys = operandMapKeys.map(x\
    \ => x.toChar)\n        val opMapValueMapKeys = opMapValues.map(x => x.toLong)\n\
    \        val operandMapValueMapKeys = operandMapValues.map(x => x.toLong)\n  \
    \      val opMapKeysMapValues = opMapValues.map(x => x.toLong)\n        val operandMapKeysMapValues\
    \ = operandMapValues.map(x => x.toLong)\n        val opMapKeysMapKeysLen = opMapKeysMapKeys.length\n\
    \        val operandMapKeysMapKeysLen = operandMapKeysMapKeys.length - 1\n   \
    \     val opMapValueMapKeysLen = opMapValueMapKeys.length\n        val operandMapValueMapKeysLen\
    \ = operandMapValueMapKeys.length - 1\n        val opMapKeysMapValueLen = opMapKeysMapValues.length\n\
    \        val operandMapKeysMapValueLen = operandMapKeysMapValues.length - 1\n\
    \        val opMapKeysMapValueMap = new ", "        val opList = op.mkString(\"\
    +\")\n        val operandList = operand.mkString(\"+\")\n        val ops = opList.split(\"\
    \\\\+\")\n        val operands = operandList.split(\"\\\\+\")\n        val opLen\
    \ = ops.size\n        val opLen2 = operands.size - 1\n        val opLen3 = opLen\
    \ + opLen2\n        val opLen4 = opLen + opLen2 + opLen3\n        val opLen5 =\
    \ opLen + opLen2 + opLen3 + opLen4\n        val opLen6 = opLen + opLen2 + opLen3\
    \ + opLen4 + opLen5\n        val opLen7 = opLen + opLen2 + opLen3 + opLen4 + opLen5\
    \ + opLen6\n        val opLen8 = opLen + opLen2 + opLen3 + opLen4 + opLen5 + opLen6\
    \ + opLen7\n        val opLen9 = opLen + opLen2 + opLen3 + opLen4 + opLen5 + opLen6\
    \ + opLen7 + opLen8\n        val opLen10 = opLen + opLen2 + opLen3 + opLen4 +\
    \ opLen5 + opLen6 + opLen7 + opLen8 + opLen9\n        val opLen11 = opLen + opLen2\
    \ + opLen3 + opLen4 + opLen5 + opLen6 + opLen7 + opLen8 + opLen9 + opLen10\n \
    \       val opLen12 = opLen + opLen2 + opLen3 + opLen4 + opLen5 + opLen6 + opLen7\
    \ + opLen8 + opLen9 + opLen10 + opLen11\n        val opLen13 = opLen + opLen2\
    \ + opLen3 + opLen4 + opLen5 + opLen6 + opLen7 + opLen8 + opLen9 + opLen10 + opLen11\
    \ + opLen12\n        val opLen14 = opLen + opLen2 + opLen3 + opLen4 + opLen5 +\
    \ opLen6 + opLen7 + opLen8 + opLen9 + opLen10 + opLen11 + opLen12 + opLen13\n\
    \        val opLen15 = opLen + opLen2 + opLen3 + opLen4 + opLen5 + opLen6 + opLen7\
    \ + opLen8 + opLen9 + opLen10 + opLen11 + opLen12 + opLen13 + opLen14\n      \
    \  val opLen16 = opLen + opLen2 + opLen3 + opLen", "        val ops = op.map(x\
    \ => x.toChar)\n        val op1 = ops.head\n        val op2 = ops.last\n     \
    \   val op1Int = operand(0)\n        val op2Int = operand(1)\n        val op1Int2\
    \ = operand(2)\n        val op2Int2 = operand(3)\n        val op1Int3 = operand(4)\n\
    \        val op2Int3 = operand(5)\n        val op1Int4 = operand(6)\n        val\
    \ op2Int4 = operand(7)\n        val op1Int5 = operand(8)\n        val op2Int5\
    \ = operand(9)\n        val op1Int6 = operand(10)\n        val op2Int6 = operand(11)\n\
    \        val op1Int7 = operand(12)\n        val op2Int7 = operand(13)\n      \
    \  val op1Int8 = operand(14)\n        val op2Int8 = operand(15)\n        val op1Int9\
    \ = operand(16)\n        val op2Int9 = operand(17)\n        val op1Int10 = operand(18)\n\
    \        val op2Int10 = operand(19)\n        val op1Int11 = operand(20)\n    \
    \    val op2Int11 = operand(21)\n        val op1Int12 = operand(22)\n        val\
    \ op2Int12 = operand(23)\n        val op1Int13 = operand(24)\n        val op2Int13\
    \ = operand(25)\n        val op1Int14 = operand(26)\n        val op2Int14 = operand(27)\n\
    \        val op1Int15 = operand(28)\n        val op2Int15 = operand(29)\n    \
    \    val op1Int16 = operand(30)\n        val op2Int16 = operand(31)\n        val\
    \ op1Int17 = operand(32)\n        val op2Int17 = operand(33)\n        val op1Int18\
    \ = operand(34)\n        val op2Int18 = operand(35)\n        val op1Int19 = operand(36)\n\
    \        val op2Int19 = operand(37)\n        val op1Int20 = operand(38)\n    \
    \    val op2Int20 = operand(39)\n        val op1Int21 = operand(40)\n        val\
    \ op2Int21 = operand(41)\n        val op1Int22 = operand(42)\n        val op2Int22\
    \ = operand(43)\n        val op1Int23 = operand(44)\n        val op2Int23", " \
    \       val ops = op.map(_.toUpperCase)\n        val opList = ops.toList\n   \
    \     val opLen = opList.size\n        val opLenMinusOne = opLen - 1\n       \
    \ val operandList = operand.toList\n        val operandLen = operandList.size\n\
    \        val operandLenMinusOne = operandLen - 1\n        val operandListMinusOne\
    \ = operandList.drop(1)\n        val operandListMinusOneLen = operandListMinusOne.size\n\
    \        val operandListMinusOneLenMinusOne = operandListMinusOneLen - 1\n   \
    \     val operandListMinusOneLenMinusOneMinusOne = operandListMinusOneLenMinusOne\
    \ - 1\n        val operandListMinusOneLenMinusOneMinusOneMinusOne = operandListMinusOneLenMinusOneMinusOne\
    \ - 1\n        val operandListMinusOneLenMinusOneMinusOneMinusOneMinusOne = operandListMinusOneLenMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandListMinusOneLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandListMinusOneLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n     \
    \   val operandListMinusOneLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandListMinusOneLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n\
    \        val operandListMinusOneLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandListMinusOneLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandListMinusOneLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandListMinusOneLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandListMinusOneLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandListMinusOneLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n", "        val ops = op.map(_.toUpperCase)\n        val opLen = ops.size\n\
    \        val opLenMinusOne = opLen - 1\n        val opLenMinusTwo = opLen - 2\n\
    \        val opLenMinusThree = opLen - 3\n        val opLenMinusFour = opLen -\
    \ 4\n        val opLenMinusFive = opLen - 5\n        val opLenMinusSix = opLen\
    \ - 6\n        val opLenMinusSeven = opLen - 7\n        val opLenMinusEight =\
    \ opLen - 8\n        val opLenMinusNine = opLen - 9\n        val opLenMinusTen\
    \ = opLen - 10\n        val opLenMinusEleven = opLen - 11\n        val opLenMinusTwelve\
    \ = opLen - 12\n        val opLenMinusThirteen = opLen - 13\n        val opLenMinusFourteen\
    \ = opLen - 14\n        val opLenMinusFifteen = opLen - 15\n        val opLenMinusSixteen\
    \ = opLen - 16\n        val opLenMinusSeventeen = opLen - 17\n        val opLenMinusEighteen\
    \ = opLen - 18\n        val opLenMinusNineteen = opLen - 19\n        val opLenMinusTwenty\
    \ = opLen - 20\n        val opLenMinusThirty = opLen - 30\n        val opLenMinusFourty\
    \ = opLen - 40\n        val opLenMinusFifty = opLen - 50\n        val opLenMinusSixty\
    \ = opLen - 60\n        val opLenMinusSeventy = opLen - 70\n        val opLenMinusEighty\
    \ = opLen - 80\n        val opLenMinusNinety = opLen - 90\n        val opLenMinusOneHundred\
    \ = opLen - 100\n        val opLenMinusTwoHundred = opLen - 200\n        val opLenMinusThreeHundred\
    \ = opLen - 300\n        val opLenMinusFourHundred = opLen - 400\n        val\
    \ opLenMinusFiveHundred = opLen - 500\n        val opLenMinusSixHundred = opLen\
    \ - 600\n        val opLenMinusSevenHundred = opLen ", "        val opList = op.map(x\
    \ => x.toLowerCase).toList\n        val operandList = operand.map(x => x.toLong).toList\n\
    \        val opLength = opList.size\n        val operandLength = operandList.size\n\
    \        val opIndex = 0\n        val operandIndex = 0\n        val result = operandList(0)\n\
    \        val opResult = opList(0)\n        val opResultIndex = opList.indexOf(opResult)\n\
    \        val operandResultIndex = operandList.indexOf(result)\n        while (operandIndex\
    \ < operandLength && opIndex < opLength) {\n            val opResultValue = opResultIndex\
    \ + operandIndex\n            val opResultValueIndex = opList.indexOf(opResultValue)\n\
    \            val operandResultValueIndex = operandList.indexOf(result)\n     \
    \       if (opResultValueIndex < opLength && operandResultValueIndex < operandLength)\
    \ {\n                val opResultValue = opResultIndex + operandIndex\n      \
    \          val opResultValueIndex = opList.indexOf(opResultValue)\n          \
    \      val operandResultValueIndex = operandList.indexOf(result)\n           \
    \     if (opResultValueIndex < opLength && operandResultValueIndex < operandLength)\
    \ {\n                    val opResultValue = opResultIndex + operandIndex\n  \
    \                  val opResultValueIndex = opList.indexOf(opResultValue)\n  \
    \                  val operandResultValueIndex = operandList.indexOf(result)\n\
    \                    if (opResultValueIndex < opLength && operandResultValueIndex\
    \ < operandLength) {\n                        val opResultValue = opResultIndex\
    \ + operandIndex\n                        val opResultValueIndex = opList.indexOf(opResultValue)\n\
    \                        val operandResultValueIndex = operandList.indexOf(result)\n\
    \                        if (opResultValueIndex < opLength && operandResultValueIndex\
    \ < operandLength) {\n                            val opResultValue = opResultIndex\
    \ + operandIndex\n                            val opResultValueIndex = opList.indexOf(opResultValue)\n\
    \                            val operandResultValueIndex = operandList.indexOf(result)\n\
    \                            if (opResultValueIndex < opLength && operandResultValueIndex\
    \ < operandLength) {\n                                val opResultValue = opResultIndex\
    \ + operandIndex\n                                val opResultValueIndex = opList.indexOf(opResultValue)\n\
    \                                val operandResultValueIndex = operandList.indexOf(result)\n\
    \                                if (opResultValueIndex < opLength && operandResultValueIndex\
    \ < operandLength) {\n                                    val opResultValue =\
    \ opResultIndex + operandIndex\n                                    val opResultValueIndex\
    \ = opList.indexOf(opResultValue)\n                                    val operandResultValueIndex\
    \ = operandList.indexOf(result)\n                                    if (opResultValueIndex\
    \ < opLength && operandResultValueIndex < operandLength) {\n                 \
    \                       val opResultValue = opResultIndex + operandIndex\n   \
    \                                     val opResultValueIndex = opList.indexOf(opResult",
  "        val opList = op.map(x => x.toChar)\n        val opLen = opList.length\n\
    \        val operandList = operand.map(x => x.toLong)\n        val operandLen\
    \ = operandList.length\n        val opMap = new mutable.HashMap[String, Int]()\n\
    \        val operandMap = new mutable.HashMap[String, Int]()\n        val result\
    \ = new mutable.HashMap[String, Long]()\n        val opMap2 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap2 = new mutable.HashMap[String, Int]()\n     \
    \   val result2 = new mutable.HashMap[String, Long]()\n        val opMap3 = new\
    \ mutable.HashMap[String, Int]()\n        val operandMap3 = new mutable.HashMap[String,\
    \ Int]()\n        val result3 = new mutable.HashMap[String, Long]()\n        val\
    \ opMap4 = new mutable.HashMap[String, Int]()\n        val operandMap4 = new mutable.HashMap[String,\
    \ Int]()\n        val result4 = new mutable.HashMap[String, Long]()\n        val\
    \ opMap5 = new mutable.HashMap[String, Int]()\n        val operandMap5 = new mutable.HashMap[String,\
    \ Int]()\n        val result5 = new mutable.HashMap[String, Long]()\n        val\
    \ opMap6 = new mutable.HashMap[String, Int]()\n        val operandMap6 = new mutable.HashMap[String,\
    \ Int]()\n        val result6 = new mutable.HashMap[String, Long]()\n        val\
    \ opMap7 = new mutable.HashMap[String, Int]()\n        val operandMap7 = new mutable.HashMap[String,\
    \ Int]()\n        val result7 = new mutable.HashMap[String, Long]()\n        val\
    \ opMap8 = new mutable.HashMap[String, Int]()\n        val operandMap8 = new mutable.HashMap[String,\
    \ Int]()\n        val result8 = new mutable.HashMap[String, Long]()\n        val\
    \ opMap9 = new mutable.HashMap[String, Int]()\n        val operandMap9 = new mutable.HashMap[String,\
    \ Int]()\n        val result9 = new mutable.HashMap[String, Long]()\n        val\
    \ opMap10 = new mutable.HashMap[String, Int]()\n        val operandMap10 = new\
    \ mutable.HashMap[String, Int]()\n        val result10 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap11 = new mutable.HashMap[String, Int]()\n        val\
    \ operandMap11 = new mutable.HashMap[String, Int]()\n", "        val ops = op.map(x\
    \ => x.toChar)\n        val op1 = ops.head\n        val op2 = ops.last\n     \
    \   val op1Int = operand(0)\n        val op2Int = operand(1)\n        val op1Int\
    \ = operand(0)\n        val op2Int = operand(1)\n        val op1Int = operand(0)\n\
    \        val op2Int = operand(1)\n        val op1Int = operand(0)\n        val\
    \ op2Int = operand(1)\n        val op1Int = operand(0)\n        val op2Int = operand(1)\n\
    \        val op1Int = operand(0)\n        val op2Int = operand(1)\n        val\
    \ op1Int = operand(0)\n        val op2Int = operand(1)\n        val op1Int = operand(0)\n\
    \        val op2Int = operand(1)\n        val op1Int = operand(0)\n        val\
    \ op2Int = operand(1)\n        val op1Int = operand(0)\n        val op2Int = operand(1)\n\
    \        val op1Int = operand(0)\n        val op2Int = operand(1)\n        val\
    \ op1Int = operand(0)\n        val op2Int = operand(1)\n        val op1Int = operand(0)\n\
    \        val op2Int = operand(1)\n        val op1Int = operand(0)\n        val\
    \ op2Int = operand(1)\n        val op1Int = operand(0)\n        val op2Int = operand(1)\n\
    \        val op1Int = operand(0)\n        val op2Int = operand(1)\n        val\
    \ op1Int = operand(0)\n        val op2Int = operand(1)\n        val op1Int = operand(0)\n\
    \        val op2Int = operand(1)\n        val op1Int = operand(0)\n        val\
    \ op2Int = operand(1)\n        val op1Int = operand(0)\n        val op2Int = operand(1)\n\
    \        val op1Int = operand(0)\n        val op2Int = operand(1)\n        val\
    \ op1Int = operand(0)\n        val op2Int = operand(1)\n        val op1Int = operand(0)\n\
    \        val op2Int = operand(1)\n        val op1Int = operand(0)\n        val\
    \ op2Int = operand(1)\n        val op1Int = operand(0)\n        val op2Int = operand(1)\n\
    \        val op1Int = operand(0)\n        val op2Int = operand(1)\n        val\
    \ op1Int = operand(0)\n        val op2Int = operand(1)", "        val ops = op.map(_.toLowerCase).toSet\n\
    \        val opSet = ops.toSet\n        val operands = operand.map(_.toInt).toSet\n\
    \        val operandSet = operands.toSet\n        val opCount = ops.size\n   \
    \     val operandCount = operands.size\n        val opIndex = ops.toSeq.indexOf(\"\
    +\")\n        val operandIndex = operands.toSeq.indexOf(\"*\")\n        val opIndex2\
    \ = ops.toSeq.indexOf(\"-\")\n        val operandIndex2 = operands.toSeq.indexOf(\"\
    /\")\n        val opIndex3 = ops.toSeq.indexOf(\"**\")\n        val operandIndex3\
    \ = operands.toSeq.indexOf(\"//\")\n        val opIndex4 = ops.toSeq.indexOf(\"\
    %\")\n        val operandIndex4 = operands.toSeq.indexOf(\"%\")\n        val opIndex5\
    \ = ops.toSeq.indexOf(\"*\")\n        val operandIndex5 = operands.toSeq.indexOf(\"\
    *\")\n        val opIndex6 = ops.toSeq.indexOf(\"+\")\n        val operandIndex6\
    \ = operands.toSeq.indexOf(\"+\")\n        val opIndex7 = ops.toSeq.indexOf(\"\
    -\")\n        val operandIndex7 = operands.toSeq.indexOf(\"-\")\n        val opIndex8\
    \ = ops.toSeq.indexOf(\"/\")\n        val operandIndex8 = operands.toSeq.indexOf(\"\
    /\")\n        val opIndex9 = ops.toSeq.indexOf(\"**\")\n        val operandIndex9\
    \ = operands.toSeq.indexOf(\"**\")\n        val opIndex10 = ops.toSeq.indexOf(\"\
    //\")\n        val operandIndex10 = operands.toSeq.indexOf(\"//\")\n        val\
    \ opIndex11 = ops.toSeq.indexOf(\"%\")\n        val operandIndex11 = operands.toSeq.indexOf(\"\
    %\")\n        val opIndex12 = ops.toSeq.indexOf(\"*\")\n        val operandIndex12\
    \ = operands.toSeq.indexOf(\"*\")\n        val opIndex13 = ops.toSeq.indexOf(\"\
    +\")\n        val operandIndex13 = operands.toSeq.indexOf(\"+\")\n        val\
    \ opIndex14 = ops.toSeq.indexOf(\"-\")\n        val operandIndex14 = operands.toSeq.indexOf(\"\
    -\")\n        val opIndex15 = ops.toSeq.indexOf(\"/\")\n        val operandIndex15\
    \ = operands.toSeq.indexOf(\"/\")\n        val opIndex16 = ops.toSeq.indexOf(\"\
    **\")\n        val operandIndex16 = operands.toSeq.indexOf(\"**\")\n        val\
    \ opIndex17", "        val opList = op.map(x => x.toLowerCase)\n        val operandList\
    \ = operand.map(x => x.toLong)\n        val opLen = opList.length\n        val\
    \ opLenMinusOne = opLen - 1\n        val operandLen = operandList.length\n   \
    \     val operandLenMinusOne = operandLen - 1\n        val opLenMinusOneInv =\
    \ opLen - 1 - 1\n        val operandLenMinusOneInv = operandLen - 1 - 1\n    \
    \    val opLenMinusOneInv = opLen - 1 - 1\n        val operandLenMinusOneInv =\
    \ operandLen - 1 - 1\n        val opLenMinusOneInv = opLen - 1 - 1\n        val\
    \ operandLenMinusOneInv = operandLen - 1 - 1\n        val opLenMinusOneInv = opLen\
    \ - 1 - 1\n        val operandLenMinusOneInv = operandLen - 1 - 1\n        val\
    \ opLenMinusOneInv = opLen - 1 - 1\n        val operandLenMinusOneInv = operandLen\
    \ - 1 - 1\n        val opLenMinusOneInv = opLen - 1 - 1\n        val operandLenMinusOneInv\
    \ = operandLen - 1 - 1\n        val opLenMinusOneInv = opLen - 1 - 1\n       \
    \ val operandLenMinusOneInv = operandLen - 1 - 1\n        val opLenMinusOneInv\
    \ = opLen - 1 - 1\n        val operandLenMinusOneInv = operandLen - 1 - 1\n  \
    \      val opLenMinusOneInv = opLen - 1 - 1\n        val operandLenMinusOneInv\
    \ = operandLen - 1 - 1\n        val opLenMinusOneInv = opLen - 1 - 1\n       \
    \ val operandLenMinusOneInv = operandLen - 1 - 1\n        val opLenMinusOneInv\
    \ = opLen - 1 - 1\n        val operandLenMinusOneInv = operandLen - 1 - 1\n  \
    \      val opLenMinusOneInv = opLen - 1 - 1\n        val operandLenMinusOneInv\
    \ = operandLen - 1 - 1\n        val opLenMinusOneInv = opLen - 1 - 1\n       \
    \ val operandLenMinusOneInv = operandLen - 1 - 1\n        val opLenMinusOneInv\
    \ = opLen - 1 - 1\n        val operandLenMinusOneInv = operandLen - 1 - 1\n  \
    \      val opLenMinusOneInv = opLen - 1 - 1\n        val operandLenMinusOneInv\
    \ = ", "        val opList = op.map(_.toUpperCase)\n        val operandList =\
    \ operand.map(_.toLong)\n        val opLength = opList.length\n        val operandLength\
    \ = operandList.length\n        val opIndex = 0\n        val operandIndex = 0\n\
    \        val result = operandList(operandIndex) * operandList(operandIndex) +\
    \ operandList(operandIndex) * operandList(operandIndex + 1)\n        val op1 =\
    \ opList(opIndex)\n        val op2 = opList(opIndex + 1)\n        val op3 = opList(opIndex\
    \ + 2)\n        val op4 = opList(opIndex + 3)\n        val op5 = opList(opIndex\
    \ + 4)\n        val op6 = opList(opIndex + 5)\n        val op7 = opList(opIndex\
    \ + 6)\n        val op8 = opList(opIndex + 7)\n        val op9 = opList(opIndex\
    \ + 8)\n        val op10 = opList(opIndex + 9)\n        val op11 = opList(opIndex\
    \ + 10)\n        val op12 = opList(opIndex + 11)\n        val op13 = opList(opIndex\
    \ + 12)\n        val op14 = opList(opIndex + 13)\n        val op15 = opList(opIndex\
    \ + 14)\n        val op16 = opList(opIndex + 15)\n        val op17 = opList(opIndex\
    \ + 16)\n        val op18 = opList(opIndex + 17)\n        val op19 = opList(opIndex\
    \ + 18)\n        val op20 = opList(opIndex + 19)\n        val op21 = opList(opIndex\
    \ + 20)\n        val op22 = opList(opIndex + 21)\n        val op23 = opList(opIndex\
    \ + 22)\n        val op24 = opList(opIndex + 23)\n        val op25 = opList(opIndex\
    \ + 24)\n        val op26 = opList(opIndex + 25)\n        val op27 = opList(opIndex\
    \ + 26)\n        val op28 = opList(opIndex + 27)\n        val op29 = opList(opIndex\
    \ + 28)\n        val op30 = opList(opIndex + 29)\n        val op31 = opList(opIndex\
    \ + 30)\n        val op32 = opList(opIndex + 31)\n        val op33 = opList(opIndex\
    \ + 32)\n        val op34 = opList(opIndex + 33)\n        val op35 = opList(opIndex\
    \ + 34)\n        val op36 = opList(opIndex + 35)\n        val op37 = opList(opIndex\
    \ + ", "        val opList = op.mkString(\"+\")\n        val opListLength = opList.length\n\
    \        val operandList = operand.mkString(\"+\")\n        val operandListLength\
    \ = operandList.length\n        val opListLength = opList.length\n        val\
    \ operandListLength = operandList.length\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListLength\
    \ = opList.length\n        val operandListLength = operandList.length\n      \
    \  val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opList", "        val opList = op.map(x => x.toChar).toList\n\
    \        val operandList = operand.map(x => x.toLong).toList\n        val opLen\
    \ = opList.length\n        val operandLen = operandList.length - 1\n        val\
    \ opMap = new mutable.HashMap[String, Int]()\n        val operandMap = new mutable.HashMap[String,\
    \ Int]()\n        val opMap2 = new mutable.HashMap[String, Int]()\n        val\
    \ operandMap2 = new mutable.HashMap[String, Int]()\n        val opMap3 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap3 = new mutable.HashMap[String, Int]()\n     \
    \   val opMap4 = new mutable.HashMap[String, Int]()\n        val operandMap4 =\
    \ new mutable.HashMap[String, Int]()\n        val opMap5 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap5 = new mutable.HashMap[String, Int]()\n     \
    \   val opMap6 = new mutable.HashMap[String, Int]()\n        val operandMap6 =\
    \ new mutable.HashMap[String, Int]()\n        val opMap7 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap7 = new mutable.HashMap[String, Int]()\n     \
    \   val opMap8 = new mutable.HashMap[String, Int]()\n        val operandMap8 =\
    \ new mutable.HashMap[String, Int]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap9 = new mutable.HashMap[String, Int]()\n     \
    \   val opMap10 = new mutable.HashMap[String, Int]()\n        val operandMap10\
    \ = new mutable.HashMap[String, Int]()\n        val opMap11 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap11 = new mutable.HashMap[String, Int]()\n    \
    \    val opMap12 = new mutable.HashMap[String, Int]()\n        val operandMap12\
    \ = new mutable.HashMap[String, Int]()\n        val opMap13 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap13 = new mutable.HashMap[String, Int]()\n    \
    \    val opMap14 = new mutable.HashMap[String, Int]()\n        val operandMap14\
    \ = new mutable.HashMap[String, Int]()\n        val opMap15 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap15 = new mutable.HashMap[String, Int]()\n    \
    \    val opMap16 = new mutable.HashMap[String, Int]()\n        ", "        val\
    \ opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toLong).toList\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opIndex = 0\n        val operandIndex = 0\n        val result = operandList(0)\n\
    \        val op1 = opList(0)\n        val op2 = opList(1)\n        val op3 = opList(2)\n\
    \        val op4 = opList(3)\n        val op5 = opList(4)\n        val op6 = opList(5)\n\
    \        val op7 = opList(6)\n        val op8 = opList(7)\n        val op9 = opList(8)\n\
    \        val op10 = opList(9)\n        val op11 = opList(10)\n        val op12\
    \ = opList(11)\n        val op13 = opList(12)\n        val op14 = opList(13)\n\
    \        val op15 = opList(14)\n        val op16 = opList(15)\n        val op17\
    \ = opList(16)\n        val op18 = opList(17)\n        val op19 = opList(18)\n\
    \        val op20 = opList(19)\n        val op21 = opList(20)\n        val op22\
    \ = opList(21)\n        val op23 = opList(22)\n        val op24 = opList(23)\n\
    \        val op25 = opList(24)\n        val op26 = opList(25)\n        val op27\
    \ = opList(26)\n        val op28 = opList(27)\n        val op29 = opList(28)\n\
    \        val op30 = opList(29)\n        val op31 = opList(30)\n        val op32\
    \ = opList(31)\n        val op33 = opList(32)\n        val op34 = opList(33)\n\
    \        val op35 = opList(34)\n        val op36 = opList(35)\n        val op37\
    \ = opList(36)\n        val op38 = opList(37)\n        val op39 = opList(38)\n\
    \        val op40 = opList(39)\n        val op41 = opList(40)\n        val op42\
    \ = opList(41)\n        val op43 = opList(42)\n        val op44 = opList(43)\n\
    \        val op45 = opList(44)\n        val op46 = opList(45)\n        val op47\
    \ = opList(46)\n        val op48 = opList(47)\n        val op49 = opList(48)\n\
    \        ", "        val ops = op.map(_.toUpperCase)\n        val opLen = ops.size\n\
    \        val opList = ops.toList\n        val operandLen = operand.size\n    \
    \    val operandList = operand.toList\n        val opLenMinusOne = opLen - 1\n\
    \        val operandLenMinusOne = operandLen - 1\n        val opLenMinusTwo =\
    \ opLen - 2\n        val operandLenMinusTwo = operandLen - 2\n        val opLenMinusThree\
    \ = opLen - 3\n        val operandLenMinusThree = operandLen - 3\n        val\
    \ opLenMinusFour = opLen - 4\n        val operandLenMinusFour = operandLen - 4\n\
    \        val opLenMinusFive = opLen - 5\n        val operandLenMinusFive = operandLen\
    \ - 5\n        val opLenMinusSix = opLen - 6\n        val operandLenMinusSix =\
    \ operandLen - 6\n        val opLenMinusSeven = opLen - 7\n        val operandLenMinusSeven\
    \ = operandLen - 7\n        val opLenMinusEight = opLen - 8\n        val operandLenMinusEight\
    \ = operandLen - 8\n        val opLenMinusNine = opLen - 9\n        val operandLenMinusNine\
    \ = operandLen - 9\n        val opLenMinusTen = opLen - 10\n        val operandLenMinusTen\
    \ = operandLen - 10\n        val opLenMinusEleven = opLen - 11\n        val operandLenMinusEleven\
    \ = operandLen - 11\n        val opLenMinusTwelve = opLen - 12\n        val operandLenMinusTwelve\
    \ = operandLen - 12\n        val opLenMinusThirteen = opLen - 13\n        val\
    \ operandLenMinusThirteen = operandLen - 13\n        val opLenMinusFourteen =\
    \ opLen - 14\n        val operandLenMinusFourteen = operandLen - 14\n        val\
    \ opLenMinusFifteen = opLen - 15\n        val operandLenMinusFifteen = operandLen\
    \ - 15\n        val opLenMinusSixteen = opLen - 16\n        val operandLenMinusSixteen\
    \ = operandLen - 16\n        val opLenMinusSeventeen = opLen - 17\n        val\
    \ operandLenMinusSeventeen = operandLen - 17", "        val ops = op.map(x =>\
    \ x.toChar)\n        val opLen = ops.length\n        val opList = ops.map(x =>\
    \ x.toLong)\n        val opLenList = opList.length\n        val operandList =\
    \ operand.map(x => x.toLong)\n        val operandLenList = operandList.length\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opLenMinusOneList = opLenList.map(x => x.toLong)\n        val\
    \ operandLenMinusOneList = operandLenList.map(x => x.toLong)\n        val opLenMinusOneListLen\
    \ = opLenMinusOneList.length\n        val operandLenMinusOneListLen = operandLenMinusOneList.length\n\
    \        val opLenMinusOneListLenMinusOne = opLenMinusOneListLen - 1\n       \
    \ val operandLenMinusOneListLenMinusOne = operandLenMinusOneListLen - 1\n    \
    \    val opLenMinusOneListLenMinusOneList = opLenMinusOneListLen.map(x => x.toLong)\n\
    \        val operandLenMinusOneListLenMinusOneList = operandLenMinusOneListLen.map(x\
    \ => x.toLong)\n        val opLenMinusOneListLenMinusOneListLen = opLenMinusOneListLenMinusOne.length\n\
    \        val operandLenMinusOneListLenMinusOneListLen = operandLenMinusOneListLenMinusOne.length\n\
    \        val opLenMinusOneListLenMinusOneListLenMinusOne = opLenMinusOneListLenMinusOneListLen\
    \ - 1\n        val operandLenMinusOneListLenMinusOneListLenMinusOne = operandLenMinusOneListLenMinusOneListLen\
    \ - 1\n        val opLenMinusOneListLenMinusOneListLenMinusOneList = opLenMinusOneListLenMinusOneListLen.map(x\
    \ => x.toLong)\n        val operandLenMinusOneListLenMinusOneListLenMinusOneList\
    \ = operandLenMinusOneListLenMinusOneListLen.map(x => x.toLong)\n        val opLenMinusOneListLenMinusOneListLenMinusOneListLen\
    \ = opLenMinusOneListLenMinusOneListLenMinusOne.length\n        val operandLenMinusOneListLenMinusOneList",
  "        val ops = op.map(_.toLowerCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLen = ops.size\n        val opLenMinusOne = opLen - 1\n       \
    \ val operandLen = operands.size - 1\n        val opLenMinusOneMinusOne = opLenMinusOne\
    \ - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val\
    \ opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n \
    \       val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne",
  "        val ops = op.map(_.toChar)\n        val opLen = ops.size\n        val opList\
    \ = ops.map(_.toLong)\n        val opLen = ops.size\n        val operands = operand.map(_.toLong)\n\
    \        val operandLen = operands.size\n        val result = operands.foldLeft(0L)\
    \ {\n            (acc, elem) => acc + (opList(elem) * operands(elem))\n      \
    \  }\n        result", "        val opList = op.map(_.toUpperCase)\n        val\
    \ operandList = operand.map(_.toLong)\n        val opLen = opList.size\n     \
    \   val operandLen = operandList.size\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val result = new mutable.HashMap[String, Long]()\n        val opMapKeys =\
    \ opList.map(x => x.toUpperCase)\n        val operandMapKeys = operandList.map(x\
    \ => x.toLong)\n        val opMapValues = opList.map(x => x.toUpperCase.charAt(0).toLong)\n\
    \        val operandMapValues = operandList.map(x => x.toLong)\n        val opMapKeysSet\
    \ = opMapKeys.toSet\n        val operandMapKeysSet = operandMapKeys.toSet\n  \
    \      val opMapValuesSet = opMapValues.toSet\n        val operandMapValuesSet\
    \ = operandMapValues.toSet\n        val opMapKeysSet2 = opMapKeys.toSet\n    \
    \    val operandMapKeysSet2 = operandMapKeys.toSet\n        val opMapValuesSet2\
    \ = opMapValues.toSet\n        val operandMapValuesSet2 = operandMapValues.toSet\n\
    \        val opMapKeysSet3 = opMapKeys.toSet\n        val operandMapKeysSet3 =\
    \ operandMapKeys.toSet\n        val opMapValuesSet3 = opMapValues.toSet\n    \
    \    val operandMapValuesSet3 = operandMapValues.toSet\n        val opMapKeysSet4\
    \ = opMapKeys.toSet\n        val operandMapKeysSet4 = operandMapKeys.toSet\n \
    \       val opMapValuesSet4 = opMapValues.toSet\n        val operandMapValuesSet4\
    \ = operandMapValues.toSet\n        val opMapKeysSet5 = opMapKeys.toSet\n    \
    \    val operandMapKeysSet5 = operandMapKeys.toSet\n        val opMapValuesSet5\
    \ = opMapValues.toSet\n        val operandMapValuesSet5 = operandMapValues.toSet\n\
    \        val opMapKeysSet6 = opMapKeys.toSet\n        val operandMapKeysSet6 =\
    \ operandMapKeys.toSet\n        val opMapValuesSet6 = opMapValues.toSet\n    \
    \    val operandMapValuesSet6 = operandMapValues.toSet\n        val opMapKeysSet7\
    \ = opMapKeys.toSet\n        val operandMapKeysSet7 = operandMapKeys.", "    \
    \    val ops = op.map(_.toLowerCase)\n        val opList = ops.toList\n      \
    \  val opLen = opList.size\n        val operands = operand.map(_.toLong)\n   \
    \     val operandLen = operands.size\n        val opIndex = ops.indexOf(\"+\"\
    )\n        val opIndex2 = ops.indexOf(\"*\")\n        val opIndex3 = ops.indexOf(\"\
    /\")\n        val opIndex4 = ops.indexOf(\"**\")\n        val opIndex5 = ops.indexOf(\"\
    //\")\n        val opIndex6 = ops.indexOf(\"%\")\n        val opIndex7 = ops.indexOf(\"\
    *\")\n        val opIndex8 = ops.indexOf(\"+\")\n        val opIndex9 = ops.indexOf(\"\
    -\")\n        val opIndex10 = ops.indexOf(\"+\")\n        val opIndex11 = ops.indexOf(\"\
    *\")\n        val opIndex12 = ops.indexOf(\"/\")\n        val opIndex13 = ops.indexOf(\"\
    **\")\n        val opIndex14 = ops.indexOf(\"//\")\n        val opIndex15 = ops.indexOf(\"\
    %\")\n        val opIndex16 = ops.indexOf(\"*\")\n        val opIndex17 = ops.indexOf(\"\
    +\")\n        val opIndex18 = ops.indexOf(\"-\")\n        val opIndex19 = ops.indexOf(\"\
    +\")\n        val opIndex20 = ops.indexOf(\"*\")\n        val opIndex21 = ops.indexOf(\"\
    /\")\n        val opIndex22 = ops.indexOf(\"**\")\n        val opIndex23 = ops.indexOf(\"\
    //\")\n        val opIndex24 = ops.indexOf(\"%\")\n        val opIndex25 = ops.indexOf(\"\
    *\")\n        val opIndex26 = ops.indexOf(\"+\")\n        val opIndex27 = ops.indexOf(\"\
    -\")\n        val opIndex28 = ops.indexOf(\"+\")\n        val opIndex29 = ops.indexOf(\"\
    *\")\n        val opIndex30 = ops.indexOf(\"/\")\n        val opIndex31 = ops.indexOf(\"\
    **\")\n        val opIndex32 = ops.indexOf(\"//\")\n        val opIndex33 = ops.indexOf(\"\
    %\")\n        val opIndex34 = ops.indexOf(\"*\")\n        val opIndex35 = ops.indexOf(\"\
    +\")\n        val opIndex36 = ops.indexOf(\"-\")\n        val opIndex37 = ops.indexOf(\"\
    +\")\n        val opIndex38 = ops.indexOf(\"*\")\n        val opIndex39 = ops.indexOf(\"\
    /\")\n        val opIndex40 = ops.indexOf(\"**\")\n        val opIndex41 = ops.indexOf(\"\
    //\")\n        val opIndex42 = ops.indexOf(\"%\")\n        ", "        val opList\
    \ = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toInt)\n  \
    \      val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Int]()\n        val operandMap\
    \ = new mutable.HashMap[String, Int]()\n        val result = new mutable.HashMap[String,\
    \ Int]()\n        val opMap2 = new mutable.HashMap[String, Int]()\n        val\
    \ operandMap2 = new mutable.HashMap[String, Int]()\n        val opMap3 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap3 = new mutable.HashMap[String, Int]()\n     \
    \   val opMap4 = new mutable.HashMap[String, Int]()\n        val operandMap4 =\
    \ new mutable.HashMap[String, Int]()\n        val opMap5 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap5 = new mutable.HashMap[String, Int]()\n     \
    \   val opMap6 = new mutable.HashMap[String, Int]()\n        val operandMap6 =\
    \ new mutable.HashMap[String, Int]()\n        val opMap7 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap7 = new mutable.HashMap[String, Int]()\n     \
    \   val opMap8 = new mutable.HashMap[String, Int]()\n        val operandMap8 =\
    \ new mutable.HashMap[String, Int]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap9 = new mutable.HashMap[String, Int]()\n     \
    \   val opMap10 = new mutable.HashMap[String, Int]()\n        val operandMap10\
    \ = new mutable.HashMap[String, Int]()\n        val opMap11 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap11 = new mutable.HashMap[String, Int]()\n    \
    \    val opMap12 = new mutable.HashMap[String, Int]()\n        val operandMap12\
    \ = new mutable.HashMap[String, Int]()\n        val opMap13 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap13 = new mutable.HashMap[String, Int]()\n    \
    \    val opMap14 = new mutable.HashMap[String, Int]()\n        val operandMap14\
    \ = new mutable.HashMap[String, Int]()\n        val opMap15 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap15 = new mutable.HashMap[String, Int]()\n    \
    \    val opMap16 = new mutable.Hash", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val opSet = opList.map(x\
    \ => x.toChar)\n        val opSetLen = opSet.length\n        val opSetSet = opSet.map(x\
    \ => x.toSet)\n        val opSetSetLen = opSetSet.length\n        val opSetSetSet\
    \ = opSetSet.map(x => x.toSet)\n        val opSetSetSetLen = opSetSetSet.length\n\
    \        val opSetSetSetSet = opSetSetSet.map(x => x.toSet)\n        val opSetSetSetSetLen\
    \ = opSetSetSetSet.length\n        val opSetSetSetSetSet = opSetSetSetSet.map(x\
    \ => x.toSet)\n        val opSetSetSetSetSetLen = opSetSetSetSetSet.length\n \
    \       val opSetSetSetSetSetSet = opSetSetSetSetSet.map(x => x.toSet)\n     \
    \   val opSetSetSetSetSetSetLen = opSetSetSetSetSetSet.length\n        val opSetSetSetSetSetSetSet\
    \ = opSetSetSetSetSetSet.map(x => x.toSet)\n        val opSetSetSetSetSetSetSetLen\
    \ = opSetSetSetSetSetSetSet.length\n        val opSetSetSetSetSetSetSetSet = opSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val opSetSetSetSetSetSetSetSetLen = opSetSetSetSetSetSetSetSet.length\n\
    \        val opSetSetSetSetSetSetSetSetSet = opSetSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val opSetSetSetSetSetSetSetSetLen = opSetSetSetSetSetSetSetSet.length\n\
    \        val opSetSetSetSetSetSetSetSetSet = opSetSetSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val opSetSetSetSetSetSetSetSetSetLen = opSetSetSetSetSetSetSetSetSetSet.length\n\
    \        val opSetSetSetSetSetSetSetSetSetSet = opSetSetSetSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val opSetSetSetSetSetSetSetSetSetLen = opSetSetSetSetSet",
  "        val opList = op.mkString(\"+\")\n        val opList2 = opList.split(\"\\\
    \\+\").map(_.toLong)\n        val opList3 = opList2.map(x => x * x)\n        val\
    \ opList4 = opList3.map(x => x / x)\n        val opList5 = opList4.map(x => x\
    \ % x)\n        val opList6 = opList5.map(x => x ** x)\n        val opList7 =\
    \ opList6.map(x => x % x)\n        val opList8 = opList7.map(x => x % x)\n   \
    \     val opList9 = opList8.map(x => x % x)\n        val opList10 = opList9.map(x\
    \ => x % x)\n        val opList11 = opList10.map(x => x % x)\n        val opList12\
    \ = opList11.map(x => x % x)\n        val opList13 = opList12.map(x => x % x)\n\
    \        val opList14 = opList13.map(x => x % x)\n        val opList15 = opList14.map(x\
    \ => x % x)\n        val opList16 = opList15.map(x => x % x)\n        val opList17\
    \ = opList16.map(x => x % x)\n        val opList18 = opList17.map(x => x % x)\n\
    \        val opList19 = opList18.map(x => x % x)\n        val opList20 = opList19.map(x\
    \ => x % x)\n        val opList21 = opList20.map(x => x % x)\n        val opList22\
    \ = opList21.map(x => x % x)\n        val opList23 = opList22.map(x => x % x)\n\
    \        val opList24 = opList23.map(x => x % x)\n        val opList25 = opList24.map(x\
    \ => x % x)\n        val opList26 = opList25.map(x => x % x)\n        val opList27\
    \ = opList26.map(x => x % x)\n        val opList28 = opList27.map(x => x % x)\n\
    \        val opList29 = opList28.map(x => x % x)\n        val opList30 = opList29.map(x\
    \ => x % x)\n        val opList31 = opList30.map(x => x % x)\n        val opList32\
    \ = opList31.map(x => x % x)\n        val opList33 = opList32.map(x => x % x)\n\
    \        val ", "        val ops = op.map(_.toLowerCase)\n        val opList =\
    \ ops.toList\n        val opLen = opList.size\n        val operands = operand.toList\n\
    \        val operandLen = operands.size\n        val opLenMinusOne = opLen - 1\n\
    \        val operandLenMinusOne = operandLen - 1\n        val opLenMinusTwo =\
    \ opLen - 2\n        val operandLenMinusTwo = operandLen - 2\n        val opLenMinusThree\
    \ = opLen - 3\n        val operandLenMinusThree = operandLen - 3\n        val\
    \ opLenMinusFour = opLen - 4\n        val operandLenMinusFour = operandLen - 4\n\
    \        val opLenMinusFive = opLen - 5\n        val operandLenMinusFive = operandLen\
    \ - 5\n        val opLenMinusSix = opLen - 6\n        val operandLenMinusSix =\
    \ operandLen - 6\n        val opLenMinusSeven = opLen - 7\n        val operandLenMinusSeven\
    \ = operandLen - 7\n        val opLenMinusEight = opLen - 8\n        val operandLenMinusEight\
    \ = operandLen - 8\n        val opLenMinusNine = opLen - 9\n        val operandLenMinusNine\
    \ = operandLen - 9\n        val opLenMinusTen = opLen - 10\n        val operandLenMinusTen\
    \ = operandLen - 10\n        val opLenMinusEleven = opLen - 11\n        val operandLenMinusEleven\
    \ = operandLen - 11\n        val opLenMinusTwelve = opLen - 12\n        val operandLenMinusTwelve\
    \ = operandLen - 12\n        val opLenMinusThirteen = opLen - 13\n        val\
    \ operandLenMinusThirteen = operandLen - 13\n        val opLenMinusFourteen =\
    \ opLen - 14\n        val operandLenMinusFourteen = operandLen - 14\n        val\
    \ opLenMinusFifteen = opLen - 15\n        val operandLenMinusFifteen = operandLen\
    \ - 15\n        val opLenMinusSixteen = opLen - 16\n        val operandLenMinusSixteen\
    \ = operandLen - 16\n        val opLenMinusSeventeen = opLen - 17\n        val\
    \ operandLenMinusSeventeen = operandLen - 17", "        val ops = op.map(_.toLowerCase).toList\n\
    \        val operands = operand.map(_.toLong).toList\n        val length = operands.length\
    \ - 1\n        val result = operands.foldLeft(0L) { (acc, x) => acc + x * ops(length)\
    \ }\n        result", "        val ops = op.map(x => x.toChar)\n        val op1\
    \ = ops(0)\n        val op2 = ops(1)\n        val op3 = ops(2)\n        val op4\
    \ = ops(3)\n        val op5 = ops(4)\n        val op6 = ops(5)\n        val op7\
    \ = ops(6)\n        val op8 = ops(7)\n        val op9 = ops(8)\n        val op10\
    \ = ops(9)\n        val op11 = ops(10)\n        val op12 = ops(11)\n        val\
    \ op13 = ops(12)\n        val op14 = ops(13)\n        val op15 = ops(14)\n   \
    \     val op16 = ops(15)\n        val op17 = ops(16)\n        val op18 = ops(17)\n\
    \        val op19 = ops(18)\n        val op20 = ops(19)\n        val op21 = ops(20)\n\
    \        val op22 = ops(21)\n        val op23 = ops(22)\n        val op24 = ops(23)\n\
    \        val op25 = ops(24)\n        val op26 = ops(25)\n        val op27 = ops(26)\n\
    \        val op28 = ops(27)\n        val op29 = ops(28)\n        val op30 = ops(29)\n\
    \        val op31 = ops(30)\n        val op32 = ops(31)\n        val op33 = ops(32)\n\
    \        val op34 = ops(33)\n        val op35 = ops(34)\n        val op36 = ops(35)\n\
    \        val op37 = ops(36)\n        val op38 = ops(37)\n        val op39 = ops(38)\n\
    \        val op40 = ops(39)\n        val op41 = ops(40)\n        val op42 = ops(41)\n\
    \        val op43 = ops(42)\n        val op44 = ops(43)\n        val op45 = ops(44)\n\
    \        val op46 = ops(45)\n        val op47 = ops(46)\n        val op48 = ops(47)\n\
    \        val op49 = ops(48)\n        val op50 = ops(49)\n        val op51 = ops(50)\n\
    \        val op52 = ops(51)\n        val op53 = ops(52)\n        val op54 = ops(53)\n",
  "        var sum = 0L\n        for(i <- 0 until operand.size) {\n            val\
    \ op = op(i)\n            val operand = operand(i)\n            val value = operand\
    \ match {\n                case 0 => 0\n                case 1 => 1\n        \
    \        case _ => operand.toLong * operand.toLong\n            }\n          \
    \  val result = if(op == \"+\") {\n                sum + value\n            }\
    \ else if(op == \"-\") {\n                sum - value\n            } else if(op\
    \ == \"*\") {\n                sum * value\n            } else if(op == \"/\"\
    ) {\n                sum / value\n            } else if(op == \"//\") {\n    \
    \            sum // value\n            } else if(op == \"**\") {\n           \
    \     sum ** value\n            } else {\n                throw new Exception(\"\
    Invalid operator: \" + op)\n            }\n            sum = result\n        }\n\
    \        return sum", "        val opList = op.map(x => x.toChar)\n        val\
    \ opLen = opList.length\n        val operandList = operand.map(x => x.toLong)\n\
    \        val operandLen = operandList.length\n        val result = operandList.foldLeft(operandList(0))\
    \ { (acc, x) => \n            val opIndex = opList.indexOf(x)\n            if\
    \ (opIndex < 0) acc\n            else opIndex == opList.length - 1 \n        \
    \        ? acc + operandList(x)\n                : opIndex == opList.length -\
    \ 2 \n                    ? acc + operandList(x) * operandList(opIndex + 1)\n\
    \                    : acc + operandList(x) * operandList(opIndex + 1) * operandList(opIndex\
    \ + 2)\n        }\n        result", "        val ops = op.map(_.toLowerCase).toList\n\
    \        val opList = ops.toList\n        val opLen = opList.size\n        val\
    \ opLenMinusOne = opLen - 1\n        val operandLen = operand.size\n        val\
    \ operandLenMinusOne = operandLen - 1\n        val operandList = operand.toList\n\
    \        val operandListLen = operandList.size\n        val operandListLenMinusOne\
    \ = operandListLen - 1\n        val operandListMinusOne = operandListLen - 1\n\
    \        val operandListMinusOne = operandListLen - 1\n        val operandListMinusOne\
    \ = operandListLen - 1\n        val operandListMinusOne = operandListLen - 1\n\
    \        val operandListMinusOne = operandListLen - 1\n        val operandListMinusOne\
    \ = operandListLen - 1\n        val operandListMinusOne = operandListLen - 1\n\
    \        val operandListMinusOne = operandListLen - 1\n        val operandListMinusOne\
    \ = operandListLen - 1\n        val operandListMinusOne = operandListLen - 1\n\
    \        val operandListMinusOne = operandListLen - 1\n        val operandListMinusOne\
    \ = operandListLen - 1\n        val operandListMinusOne = operandListLen - 1\n\
    \        val operandListMinusOne = operandListLen - 1\n        val operandListMinusOne\
    \ = operandListLen - 1\n        val operandListMinusOne = operandListLen - 1\n\
    \        val operandListMinusOne = operandListLen - 1\n        val operandListMinusOne\
    \ = operandListLen - 1\n        val operandListMinusOne = operandListLen - 1\n\
    \        val operandListMinusOne = operandListLen - 1\n        val operandListMinusOne\
    \ = operandListLen - 1\n        val operandListMinusOne = operandListLen - 1\n\
    \        val operandListMinusOne = operandListLen - 1\n        val operandListMinusOne\
    \ = operandListLen - 1\n        val operandListMinusOne = operandListLen - 1\n\
    \        val operandListMinusOne = operandListLen - 1\n        val operandListMinusOne\
    \ = operandListLen - 1\n        val operandListMinusOne = operandListLen - 1\n\
    \        val operandListMinusOne = operandListLen - 1\n        val operandListMinusOne\
    \ = operandListLen - 1\n        val operandListMinusOne = operandListLen - 1\n\
    \        val operandListMinusOne = operandListLen - 1\n        val operandList",
  "        val opList = op.map(x => x.toChar)\n        val operandList = operand.map(x\
    \ => x.toLong)\n        val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opMap2 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap2 = new mutable.HashMap[String, Long]()\n        val result2 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap3 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap3 = new mutable.HashMap[String, Long]()\n   \
    \     val result3 = new mutable.HashMap[String, Long]()\n        val opMap4 =\
    \ new mutable.HashMap[String, Long]()\n        val operandMap4 = new mutable.HashMap[String,\
    \ Long]()\n        val result4 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap5 = new mutable.HashMap[String, Long]()\n        val operandMap5 =\
    \ new mutable.HashMap[String, Long]()\n        val result5 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap6 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap6 = new mutable.HashMap[String, Long]()\n        val result6 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap7 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap7 = new mutable.HashMap[String, Long]()\n   \
    \     val result7 = new mutable.HashMap[String, Long]()\n        val opMap8 =\
    \ new mutable.HashMap[String, Long]()\n        val operandMap8 = new mutable.HashMap[String,\
    \ Long]()\n        val result8 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap9 = new mutable.HashMap[String, Long]()\n        val operandMap9 =\
    \ new mutable.HashMap[String, Long]()\n        val result9 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap10 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap10 = new mutable.HashMap[String, Long]()\n        val result10\
    \ = new mutable.HashMap[String, Long]()\n        val opMap11 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap11 = new mutable.HashMap[String, Long]()", " \
    \       val ops = op.map(x => x.toChar)\n        val op1 = ops(0)\n        val\
    \ op2 = ops(1)\n        val op3 = ops(2)\n        val op4 = ops(3)\n        val\
    \ op5 = ops(4)\n        val op6 = ops(5)\n        val op7 = ops(6)\n        val\
    \ op8 = ops(7)\n        val op9 = ops(8)\n        val op10 = ops(9)\n        val\
    \ op11 = ops(10)\n        val op12 = ops(11)\n        val op13 = ops(12)\n   \
    \     val op14 = ops(13)\n        val op15 = ops(14)\n        val op16 = ops(15)\n\
    \        val op17 = ops(16)\n        val op18 = ops(17)\n        val op19 = ops(18)\n\
    \        val op20 = ops(19)\n        val op21 = ops(20)\n        val op22 = ops(21)\n\
    \        val op23 = ops(22)\n        val op24 = ops(23)\n        val op25 = ops(24)\n\
    \        val op26 = ops(25)\n        val op27 = ops(26)\n        val op28 = ops(27)\n\
    \        val op29 = ops(28)\n        val op30 = ops(29)\n        val op31 = ops(30)\n\
    \        val op32 = ops(31)\n        val op33 = ops(32)\n        val op34 = ops(33)\n\
    \        val op35 = ops(34)\n        val op36 = ops(35)\n        val op37 = ops(36)\n\
    \        val op38 = ops(37)\n        val op39 = ops(38)\n        val op40 = ops(39)\n\
    \        val op41 = ops(40)\n        val op42 = ops(41)\n        val op43 = ops(42)\n\
    \        val op44 = ops(43)\n        val op45 = ops(44)\n        val op46 = ops(45)\n\
    \        val op47 = ops(46)\n        val op48 = ops(47)\n        val op49 = ops(48)\n\
    \        val op50 = ops(49)\n        val op51 = ops(50)\n        val op52 = ops(51)\n\
    \        val op53 = ops(52)\n        val op54 = ops(53)\n", "        val opList\
    \ = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toLong).toList\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opMinusOne = opLen - 1\n        val operandMinusOne = operandLen\
    \ - 1\n        val opMinusTwo = opLen - 2\n        val operandMinusTwo = operandLen\
    \ - 2\n        val opMinusThree = opLen - 3\n        val operandMinusThree = operandLen\
    \ - 3\n        val opMinusFour = opLen - 4\n        val operandMinusFour = operandLen\
    \ - 4\n        val opMinusFive = opLen - 5\n        val operandMinusFive = operandLen\
    \ - 5\n        val opMinusSix = opLen - 6\n        val operandMinusSix = operandLen\
    \ - 6\n        val opMinusSeven = opLen - 7\n        val operandMinusSeven = operandLen\
    \ - 7\n        val opMinusEight = opLen - 8\n        val operandMinusEight = operandLen\
    \ - 8\n        val opMinusNine = opLen - 9\n        val operandMinusNine = operandLen\
    \ - 9\n        val opMinusTen = opLen - 10\n        val operandMinusTen = operandLen\
    \ - 10\n        val opMinusEleven = opLen - 11\n        val operandMinusEleven\
    \ = operandLen - 11\n        val opMinusTwelve = opLen - 12\n        val operandMinusTwelve\
    \ = operandLen - 12\n        val opMinusThirteen = opLen - 13\n        val operandMinusThirteen\
    \ = operandLen - 13\n        val opMinusFourteen = opLen - 14\n        val operandMinusFourteen\
    \ = operandLen - 14\n        val opMinusFifteen = opLen - 15\n        val operandMinusFifteen\
    \ = operandLen - 15\n        val opMinusSixteen = opLen - 16\n        val operandMinusSixteen\
    \ = operandLen - 16\n        val opMinusSeventeen = opLen - 17\n        val operandMinusSeventeen\
    \ = operandLen - 17\n        val opMinusEighteen = opLen - 18\n        val operandMinusEighteen\
    \ = operandLen - 18\n        val opMinusN", "        val ops = op.map(_.toUpperCase)\n\
    \        val opLen = ops.size\n        val opList = ops.map(_.toInt)\n       \
    \ val opLen = ops.size\n        val operandLen = operand.size\n        val operandList\
    \ = operand.map(_.toInt)\n        val operandLen = operand.size\n        val result\
    \ = operandList.foldLeft(0) { (acc, x) => acc + (opList(x) * x) }\n        result",
  "        val opList = op.map(_.toUpperCase)\n        val opSet = opList.map(x =>\
    \ x.toInt)\n        val opSetSize = opSet.size\n        val operandList = operand.map(_.toLong)\n\
    \        val operandSet = operandList.map(x => x.toInt)\n        val operandSetSize\
    \ = operandSet.size\n        val resultSet = opSet.zip(operandSet).map(x => x._1\
    \ * x._2)\n        val resultSetSize = resultSet.size\n        val resultSetSum\
    \ = resultSet.sum\n        val resultSetSumSize = resultSetSum.size\n        val\
    \ resultSetSumSum = resultSetSum.sum\n        val resultSetSumSumSize = resultSetSumSum.size\n\
    \        val resultSetSumSumSum = resultSetSumSum.sum\n        val resultSetSumSumSumSize\
    \ = resultSetSumSumSum.size\n        val resultSetSumSumSumSum = resultSetSumSumSum.sum\n\
    \        val resultSetSumSumSumSumSize = resultSetSumSumSumSum.size\n        val\
    \ resultSetSumSumSumSumSum = resultSetSumSumSumSum.sum\n        val resultSetSumSumSumSumSumSize\
    \ = resultSetSumSumSumSumSum.size\n        val resultSetSumSumSumSumSumSum = resultSetSumSumSumSumSum.sum\n\
    \        val resultSetSumSumSumSumSumSumSize = resultSetSumSumSumSumSumSum.size\n\
    \        val resultSetSumSumSumSumSumSumSum = resultSetSumSumSumSumSumSumSum.sum\n\
    \        val resultSetSumSumSumSumSumSumSumSize = resultSetSumSumSumSumSumSumSum.size\n\
    \        val resultSetSumSumSumSumSumSumSumSum = resultSetSumSumSumSumSumSumSumSum.sum\n\
    \        val resultSetSumSumSumSumSumSumSumSize = resultSetSumSumSumSumSumSumSumSum.size\n\
    \        val resultSetSumSumSumSumSumSumSumSumSum = resultSetSumSumSumSumSumSumSumSumSum.sum\n\
    \        val resultSetSumSumSumSumSumSumSumSumSumSize = resultSetSumSumSumSumSumSumSumSumSum.size\n\
    \        val resultSetSumSumSumSumSumSumSumSumSumSum = resultSetSumSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val resultSetSumSumSumSumSumSumSumSumSumSize = resultSetSumSumSumSumSumSumSumSumSumSumSum.size\n\
    \        val resultSetSumSumSumSum", "        val ops = op.map(_.toUpperCase)\n\
    \        val operands = operand.map(_.toLong)\n        val opLen = ops.size\n\
    \        val operandLen = operands.size\n        val opIndex = ops.indexOf(\"\
    +\")\n        val opIndex2 = ops.indexOf(\"-\")\n        val opIndex3 = ops.indexOf(\"\
    *\")\n        val opIndex4 = ops.indexOf(\"/\")\n        val opIndex5 = ops.indexOf(\"\
    **\")\n        val opIndex6 = ops.indexOf(\"//\")\n        val opIndex7 = ops.indexOf(\"\
    %\")\n        val opIndex8 = ops.indexOf(\"&\")\n        val opIndex9 = ops.indexOf(\"\
    |\")\n        val opIndex10 = ops.indexOf(\"^\")\n        val opIndex11 = ops.indexOf(\"\
    ~\")\n        val opIndex12 = ops.indexOf(\"<<\")\n        val opIndex13 = ops.indexOf(\"\
    >>\")\n        val opIndex14 = ops.indexOf(\"==\")\n        val opIndex15 = ops.indexOf(\"\
    !=\")\n        val opIndex16 = ops.indexOf(\"<\")\n        val opIndex17 = ops.indexOf(\"\
    >\")\n        val opIndex18 = ops.indexOf(\"<=\")\n        val opIndex19 = ops.indexOf(\"\
    >=\")\n        val opIndex20 = ops.indexOf(\"&&\")\n        val opIndex21 = ops.indexOf(\"\
    ||\")\n        val opIndex22 = ops.indexOf(\"!~\")\n        val opIndex23 = ops.indexOf(\"\
    !%\")\n        val opIndex24 = ops.indexOf(\"!&\")\n        val opIndex25 = ops.indexOf(\"\
    !|\")\n        val opIndex26 = ops.indexOf(\"!^\")\n        val opIndex27 = ops.indexOf(\"\
    !~\")\n        val opIndex28 = ops.indexOf(\"!<<\")\n        val opIndex29 = ops.indexOf(\"\
    !>>\")\n        val opIndex30 = ops.indexOf(\"!==\")\n        val opIndex31 =\
    \ ops.indexOf(\"!!=\")\n        val opIndex32 = ops.indexOf(\"!<\")\n        val\
    \ opIndex33 = ops.indexOf(\"!>\")\n        val opIndex34 = ops.indexOf(\"!<=\"\
    )\n        val opIndex35 = ops.indexOf(\"!>=\")\n        val opIndex36 = ops.indexOf(\"\
    !&&\")\n        val opIndex37 = ops.indexOf(\"!||\")\n        val opIndex38 =\
    \ ops.indexOf(\"!~\")\n        val opIndex39 = ops.indexOf(\"!%\")\n        val\
    \ opIndex40 = ops.indexOf(\"!", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val result = new mutable.HashMap[String, Long]()\n        val opMap2 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap2 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap3 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap3 = new mutable.HashMap[String, Long]()\n        val opMap4 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap4 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap5 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap5 = new mutable.HashMap[String, Long]()\n        val opMap6 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap6 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap7 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap7 = new mutable.HashMap[String, Long]()\n        val opMap8 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap8 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap9 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap9 = new mutable.HashMap[String, Long]()\n        val opMap10 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap10 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap11 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap11 = new mutable.HashMap[String, Long]()\n        val opMap12\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap12 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap13 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap13 = new mutable.HashMap[String, Long]()\n        val opMap14\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap14 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap15 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap15 = new mutable.HashMap[String, Long]()\n        val opMap16\
    \ = new mutable.Hash", "        val opList = op.map(_.toUpperCase)\n        val\
    \ operandList = operand.map(_.toLong)\n        val opLength = opList.length\n\
    \        val operandLength = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val opMap2 = new mutable.HashMap[String, Long]()\n        val operandMap2\
    \ = new mutable.HashMap[String, Long]()\n        val opMap3 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap3 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap4 = new mutable.HashMap[String, Long]()\n        val operandMap4\
    \ = new mutable.HashMap[String, Long]()\n        val opMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap5 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap6 = new mutable.HashMap[String, Long]()\n        val operandMap6\
    \ = new mutable.HashMap[String, Long]()\n        val opMap7 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap7 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap8 = new mutable.HashMap[String, Long]()\n        val operandMap8\
    \ = new mutable.HashMap[String, Long]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap9 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap10 = new mutable.HashMap[String, Long]()\n        val operandMap10\
    \ = new mutable.HashMap[String, Long]()\n        val opMap11 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap11 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap12 = new mutable.HashMap[String, Long]()\n        val operandMap12\
    \ = new mutable.HashMap[String, Long]()\n        val opMap13 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap13 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap14 = new mutable.HashMap[String, Long]()\n        val operandMap14\
    \ = new mutable.HashMap[String, Long]()\n        val opMap15 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap15 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap16 = new mutable.HashMap[String, Long]()\n        val operandMap16\
    \ = new mutable.Hash", "        val opList = op.map(x => x.toChar)\n        val\
    \ operandList = operand.map(x => x.toLong)\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val opIndex = 0\n        val operandIndex = 0\n        val opStack = new\
    \ mutable.Stack[String]()\n        val operandStack = new mutable.Stack[Long]()\n\
    \        val opStackLen = 0\n        val operandStackLen = 0\n        val opStackOpMap\
    \ = new mutable.HashMap[String, Long]()\n        val operandStackOpMap = new mutable.HashMap[String,\
    \ Long]()\n        val opStackOpIndex = 0\n        val operandStackOpIndex = 0\n\
    \        val opStackOpLen = 0\n        val operandStackOpLen = 0\n        val\
    \ opStackOpMapLen = 0\n        val operandStackOpMapLen = 0\n        val opStackOpIndexLen\
    \ = 0\n        val operandStackOpIndexLen = 0\n        val opStackOpLenLen = 0\n\
    \        val operandStackOpLenLen = 0\n        val opStackOpMapLenLen = 0\n  \
    \      val operandStackOpMapLenLen = 0\n        val opStackOpIndexLenLen = 0\n\
    \        val operandStackOpIndexLenLen = 0\n        val opStackOpLenLenLen = 0\n\
    \        val operandStackOpLenLenLen = 0\n        val opStackOpMapLenLenLen =\
    \ 0\n        val operandStackOpMapLenLenLen = 0\n        val opStackOpIndexLenLenLen\
    \ = 0\n        val operandStackOpIndexLenLenLen = 0\n        val opStackOpLenLenLenLen\
    \ = 0\n        val operandStackOpLenLenLenLen = 0\n        val opStackOpMapLenLenLenLen\
    \ = 0\n        val operandStackOpMapLenLenLenLen = 0\n        val opStackOpIndexLenLenLenLen\
    \ = 0\n        val operandStackOpIndexLenLenLenLen = 0\n        val opStackOpLenLenLenLenLen\
    \ = 0\n        val operandStackOpLenLenLenLenLen = 0\n        val opStackOpMapLenLenLenLenLen\
    \ = 0\n        val operandStackOpMapLenLenLenLenLen = 0\n        val opStackOpIndexLenLenLenLenLen\
    \ = 0\n        val operandStackOpIndexLenLenLenLenLen = 0\n        val opStackOpLenLenLenLenLenLen\
    \ = 0\n        val operandStackOp", "        val opList = op.map(_.toUpperCase)\n\
    \        val opListLength = opList.length\n        val operandList = operand.map(_.toLong)\n\
    \        val operandListLength = operandList.length\n        val result = operandList(0)\n\
    \        val op1 = opList(0)\n        val op2 = opList(1)\n        val op3 = opList(2)\n\
    \        val op4 = opList(3)\n        val op5 = opList(4)\n        val op6 = opList(5)\n\
    \        val op7 = opList(6)\n        val op8 = opList(7)\n        val op9 = opList(8)\n\
    \        val op10 = opList(9)\n        val op11 = opList(10)\n        val op12\
    \ = opList(11)\n        val op13 = opList(12)\n        val op14 = opList(13)\n\
    \        val op15 = opList(14)\n        val op16 = opList(15)\n        val op17\
    \ = opList(16)\n        val op18 = opList(17)\n        val op19 = opList(18)\n\
    \        val op20 = opList(19)\n        val op21 = opList(20)\n        val op22\
    \ = opList(21)\n        val op23 = opList(22)\n        val op24 = opList(23)\n\
    \        val op25 = opList(24)\n        val op26 = opList(25)\n        val op27\
    \ = opList(26)\n        val op28 = opList(27)\n        val op29 = opList(28)\n\
    \        val op30 = opList(29)\n        val op31 = opList(30)\n        val op32\
    \ = opList(31)\n        val op33 = opList(32)\n        val op34 = opList(33)\n\
    \        val op35 = opList(34)\n        val op36 = opList(35)\n        val op37\
    \ = opList(36)\n        val op38 = opList(37)\n        val op39 = opList(38)\n\
    \        val op40 = opList(39)\n        val op41 = opList(40)\n        val op42\
    \ = opList(41)\n        val op43 = opList(42)\n        val op44 = opList(43)\n\
    \        val op45 = opList(44)\n        val op46 = opList(45)\n        val op47\
    \ = opList(46)\n        val op48 = opList(47)\n        val op49 = opList(48)\n\
    \        val op50 = opList(49)\n        val op5", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.length\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operandList.length\n\
    \        val operandLenMinusOne = operandLen - 1\n        val opIndex = opList.indexOf(\"\
    +\")\n        val opIndexMinusOne = opIndex - 1\n        val opIndexMinusTwo =\
    \ opIndex - 1\n        val opIndexMinusThree = opIndex - 1\n        val opIndexMinusFour\
    \ = opIndex - 1\n        val opIndexMinusFive = opIndex - 1\n        val opIndexMinusSix\
    \ = opIndex - 1\n        val opIndexMinusSeven = opIndex - 1\n        val opIndexMinusEight\
    \ = opIndex - 1\n        val opIndexMinusNine = opIndex - 1\n        val opIndexMinusTen\
    \ = opIndex - 1\n        val opIndexMinusEleven = opIndex - 1\n        val opIndexMinusTwelve\
    \ = opIndex - 1\n        val opIndexMinusThirteen = opIndex - 1\n        val opIndexMinusFourteen\
    \ = opIndex - 1\n        val opIndexMinusFifteen = opIndex - 1\n        val opIndexMinusSixteen\
    \ = opIndex - 1\n        val opIndexMinusSeventeen = opIndex - 1\n        val\
    \ opIndexMinusEighteen = opIndex - 1\n        val opIndexMinusNineteen = opIndex\
    \ - 1\n        val opIndexMinusTwenty = opIndex - 1\n        val opIndexMinusThirty\
    \ = opIndex - 1\n        val opIndexMinusFourty = opIndex - 1\n        val opIndexMinusFifty\
    \ = opIndex - 1\n        val opIndexMinusSixty = opIndex - 1\n        val opIndexMinusSeventy\
    \ = opIndex - 1\n        val opIndexMinusEighty = opIndex - 1\n        val opIndexMinusNinety\
    \ = opIndex - 1\n        val opIndexMinusOnehundred = opIndex - 1\n        val\
    \ opIndexMinusOnethousand = opIndex - 1\n        val opIndexMinusOnemillion =\
    \ opIndex - 1\n        val opIndexMinusOnebillion = opIndex - 1\n        val opIndexMinusOnetrillion\
    \ = opIndex - 1\n        val opIndexMinusOnequadrillion = opIndex", "        val\
    \ opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val opIndex = 0\n        val\
    \ operandIndex = 0\n        val opMapKeys = opList.iterator\n        val operandMapKeys\
    \ = operandList.iterator\n        val opMapValues = opMap.iterator\n        val\
    \ operandMapValues = operandMap.iterator\n        val opMapKeysLength = opMapKeys.size\n\
    \        val operandMapKeysLength = operandMapKeys.size\n        val opMapValuesLength\
    \ = opMapValues.size\n        val operandMapValuesLength = operandMapValues.size\n\
    \        val opMapKeysLength = opMapKeys.size\n        val operandMapKeysLength\
    \ = operandMapKeys.size\n        val opMapValuesLength = opMapValues.size\n  \
    \      val operandMapValuesLength = operandMapValues.size\n        val opMapKeysLength\
    \ = opMapKeys.size\n        val operandMapKeysLength = operandMapKeys.size\n \
    \       val opMapValuesLength = opMapValues.size\n        val operandMapValuesLength\
    \ = operandMapValues.size\n        val opMapKeysLength = opMapKeys.size\n    \
    \    val operandMapKeysLength = operandMapKeys.size\n        val opMapValuesLength\
    \ = opMapValues.size\n        val operandMapValuesLength = operandMapValues.size\n\
    \        val opMapKeysLength = opMapKeys.size\n        val operandMapKeysLength\
    \ = operandMapKeys.size\n        val opMapValuesLength = opMapValues.size\n  \
    \      val operandMapValuesLength = operandMapValues.size\n        val opMapKeysLength\
    \ = opMapKeys.size\n        val operandMapKeysLength = operandMapKeys.size\n \
    \       val opMapValuesLength = opMapValues.size\n        val operandMapValuesLength\
    \ = operandMapValues.size\n        val opMapKeysLength = opMapKeys.size\n    \
    \    val operandMapKeysLength = operandMapKeys.size\n        val opMapValuesLength\
    \ = opMapValues.size\n        val operandMapValuesLength = operandMapValues.size\n\
    \        val opMapKeysLength = opMapKeys.size\n        val operandMapKeysLength\
    \ = operandMapKeys.size\n        val opMapValuesLength = opMapValues.size\n  \
    \      val operandMapValuesLength = operandMapValues.size\n        val opMapKeysLength\
    \ = opMapKeys.size\n        val operandMapKeysLength = operandMapKeys.size", " \
    \       val opList = op.map(x => x.toChar)\n        val operandList = operand.map(x\
    \ => x.toLong)\n        val opLength = opList.length\n        val operandLength\
    \ = operandList.length - 1\n        val opMap = new mutable.HashMap[String, Long]()\n\
    \        val operandMap = new mutable.HashMap[String, Long]()\n        val opMap2\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap2 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap3 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap3 = new mutable.HashMap[String, Long]()\n        val opMap4 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap4 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap5 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap5 = new mutable.HashMap[String, Long]()\n        val opMap6 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap6 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap7 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap7 = new mutable.HashMap[String, Long]()\n        val opMap8 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap8 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap9 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap9 = new mutable.HashMap[String, Long]()\n        val opMap10 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap10 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap11 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap11 = new mutable.HashMap[String, Long]()\n        val opMap12\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap12 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap13 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap13 = new mutable.HashMap[String, Long]()\n        val opMap14\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap14 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap15 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap15 = new mutable.HashMap[String, Long]()\n        val opMap16\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap16", "        val\
    \ ops = op.map(_.toUpperCase)\n        val opLen = ops.length\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLenMinusTwo = opLen - 2\n        val operandLen =\
    \ operand.length\n        val operandLenMinusOne = operandLen - 1\n        val\
    \ operandLenMinusTwo = operandLen - 2\n        val operandLenMinusThree = operandLen\
    \ - 3\n        val operandLenMinusFour = operandLen - 4\n        val operandLenMinusFive\
    \ = operandLen - 5\n        val operandLenMinusSix = operandLen - 6\n        val\
    \ operandLenMinusSeven = operandLen - 7\n        val operandLenMinusEight = operandLen\
    \ - 8\n        val operandLenMinusNine = operandLen - 9\n        val operandLenMinusTen\
    \ = operandLen - 10\n        val operandLenMinusEleven = operandLen - 11\n   \
    \     val operandLenMinusTwelve = operandLen - 12\n        val operandLenMinusThirteen\
    \ = operandLen - 13\n        val operandLenMinusFourteen = operandLen - 14\n \
    \       val operandLenMinusFifteen = operandLen - 15\n        val operandLenMinusSixteen\
    \ = operandLen - 16\n        val operandLenMinusSeventeen = operandLen - 17\n\
    \        val operandLenMinusEighteen = operandLen - 18\n        val operandLenMinusNineteen\
    \ = operandLen - 19\n        val operandLenMinusTwenty = operandLen - 20\n   \
    \     val operandLenMinusThirty = operandLen - 30\n        val operandLenMinusFourty\
    \ = operandLen - 40\n        val operandLenMinusFifty = operandLen - 50\n    \
    \    val operandLenMinusSixty = operandLen - 60\n        val operandLenMinusSeventy\
    \ = operandLen - 70\n        val operandLenMinusEighty = operandLen - 80\n   \
    \     val operandLenMinusNinety = operandLen - 90\n        val operandLenMinusEleventy\
    \ = operandLen - 100\n        val operandLenMinusTwelvety = operandLen - 110\n\
    \        val operandLenMinusThirtyty = operandLen - 120\n        val operandLenMinusFourtyty\
    \ = operandLen - 130\n        val operandLenMinusFiftyty = operandLen - 140\n\
    \        val ", "        val ops = op.map(_.toLowerCase)\n        val operands\
    \ = operand.map(_.toLong)\n        val opLen = ops.size\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLen = operands.size - 1\n        val opLenMinusOneMinusOne\
    \ = opLenMinusOne - 1\n        val operandLenMinusOne = operandLen - 1\n     \
    \   val operandLenMinusOneMinusOne = operandLenMinusOne - 1\n        val opLenMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val\
    \ opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n \
    \       val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOne", "        val ops = op.map(x => x.toChar)\n\
    \        val opList = ops.toList\n        val opLen = opList.length\n        val\
    \ operands = operand.toList\n        val operandLen = operands.toList.length\n\
    \        val result = operands.foldLeft(operands(0))((acc, x) => acc + x * ops(opList.length\
    \ - operandLen))\n        result", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.size\n\
    \        val operandLen = operandList.size\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val result = new mutable.HashMap[String, Long]()\n        val opIndex = 0\n\
    \        val operandIndex = 0\n        val opLen = opList.size\n        val operandLen\
    \ = operandList.size\n        val opMap = new mutable.HashMap[String, Long]()\n\
    \        val operandMap = new mutable.HashMap[String, Long]()\n        val result\
    \ = new mutable.HashMap[String, Long]()\n        val opIndex = 0\n        val\
    \ operandIndex = 0\n        val opLen = opList.size\n        val operandLen =\
    \ operandList.size\n        val opMap = new mutable.HashMap[String, Long]()\n\
    \        val operandMap = new mutable.HashMap[String, Long]()\n        val result\
    \ = new mutable.HashMap[String, Long]()\n        val opIndex = 0\n        val\
    \ operandIndex = 0\n        val opLen = opList.size\n        val operandLen =\
    \ operandList.size\n        val opMap = new mutable.HashMap[String, Long]()\n\
    \        val operandMap = new mutable.HashMap[String, Long]()\n        val result\
    \ = new mutable.HashMap[String, Long]()\n        val opIndex = 0\n        val\
    \ operandIndex = 0\n        val opLen = opList.size\n        val operandLen =\
    \ operandList.size\n        val opMap = new mutable.HashMap[String, Long]()\n\
    \        val operandMap = new mutable.HashMap[String, Long]()\n        val result\
    \ = new mutable.HashMap[String, Long]()\n        val opIndex = 0\n        val\
    \ operandIndex = 0\n        val opLen = opList.size\n        val operandLen =\
    \ operandList.size\n        val opMap = new mutable.HashMap[String, Long]()\n\
    \        val operandMap = new mutable.HashMap[String, Long]()\n        val result\
    \ = new mutable.HashMap[String, Long]()\n        val opIndex = 0\n        val\
    \ operandIndex = 0\n        val opLen = opList.size\n        val operandLen =\
    \ operandList.size\n        val opMap = new mutable.HashMap[String, Long]()\n\
    \        val operandMap = new mutable.HashMap[String, Long]()\n        val result\
    \ = new mutable.HashMap[String, Long]()\n        val opIndex", "        val opList\
    \ = op.map(_.toUpperCase)\n        val opLen = opList.length\n        val operandList\
    \ = operand.map(_.toLong)\n        val operandLen = operandList.length\n     \
    \   val result = operandList.foldLeft(operandList.head) { (acc, i) => \n     \
    \       val opIndex = opList.indexOf(i)\n            val opVal = opIndex.toLong\n\
    \            val opVal2 = opIndex.toLong * opIndex.toLong\n            val opVal3\
    \ = opIndex.toLong / opIndex.toLong\n            val opVal4 = opIndex.toLong **\
    \ opIndex.toLong\n            val opVal5 = opIndex.toLong % opIndex.toLong\n \
    \           val opVal6 = opIndex.toLong * opIndex.toLong * opIndex.toLong\n  \
    \          val opVal7 = opIndex.toLong / opIndex.toLong / opIndex.toLong\n   \
    \         val opVal8 = opIndex.toLong % opIndex.toLong / opIndex.toLong\n    \
    \        val opVal9 = opIndex.toLong * opIndex.toLong * opIndex.toLong / opIndex.toLong\n\
    \            val opVal10 = opIndex.toLong / opIndex.toLong % opIndex.toLong\n\
    \            val opVal11 = opIndex.toLong % opIndex.toLong / opIndex.toLong\n\
    \            val opVal12 = opIndex.toLong * opIndex.toLong * opIndex.toLong /\
    \ opIndex.toLong % opIndex.toLong\n            val opVal13 = opIndex.toLong /\
    \ opIndex.toLong / opIndex.toLong % opIndex.toLong\n            val opVal14 =\
    \ opIndex.toLong % opIndex.toLong / opIndex.toLong / opIndex.toLong % opIndex.toLong\n\
    \            val opVal15 = opIndex.toLong * opIndex.toLong * opIndex.toLong /\
    \ opIndex.toLong / opIndex.toLong % opIndex.toLong\n            val opVal16 =\
    \ opIndex.toLong / opIndex.toLong / opIndex.toLong / opIndex.toLong % opIndex.toLong\
    \ / opIndex.toLong % opIndex.toLong\n            val opVal17 = opIndex.toLong\
    \ % opIndex.toLong / opIndex.toLong / opIndex.toLong / opIndex.toLong % opIndex.toLong\
    \ / opIndex.toLong % opIndex.toLong\n            val opVal18 = opIndex.toLong\
    \ * opIndex.toLong * opIndex.toLong / opIndex.toLong / opIndex.toLong / opIndex.toLong\
    \ % opIndex.to", "        val opList = op.map(_.toLowerCase)\n        val opLen\
    \ = opList.length\n        val operandList = operand.map(_.toLong)\n        val\
    \ operandLen = operandList.length\n        val opMap = {\n            val opMap\
    \ = new mutable.HashMap[String, Long]()\n            for(i <- 0 until opLen) opMap.put(opList(i),\
    \ i)\n            opMap\n        }\n        val operandMap = {\n            val\
    \ operandMap = new mutable.HashMap[Long, Long]()\n            for(i <- 0 until\
    \ operandLen) operandMap.put(operandList(i), i)\n            operandMap\n    \
    \    }\n        val opKeys = opMap.keys\n        val opValues = opMap.values.toList\n\
    \        val operandKeys = operandMap.keys\n        val operandValues = operandMap.values.toList\n\
    \        val opKeySet = opKeys.toSet\n        val opValueSet = opValues.toSet\n\
    \        val operandKeySet = operandKeys.toSet\n        val operandValueSet =\
    \ operandValues.toSet\n        val opKeySet2 = opKeySet.diff(opKeySet2)\n    \
    \    val opValueSet2 = opValueSet.diff(opValueSet2)\n        val operandKeySet2\
    \ = operandKeySet.diff(operandKeySet2)\n        val operandValueSet2 = operandValueSet.diff(operandValueSet2)\n\
    \        val opKeySet3 = opKeySet.diff(opKeySet3)\n        val opValueSet3 = opValueSet.diff(opValueSet3)\n\
    \        val operandKeySet3 = operandKeySet.diff(operandKeySet3)\n        val\
    \ operandValueSet3 = operandValueSet.diff(operandValueSet3)\n        val opKeySet4\
    \ = opKeySet.diff(opKeySet4)\n        val opValueSet4 = opValueSet.diff(opValueSet4)\n\
    \        val operandKeySet4 = operandKeySet.diff(operandKeySet4)\n        val\
    \ operandValueSet4 = operandValueSet.diff(operandValueSet4)\n        val opKeySet5\
    \ = opKeySet.diff(opKeySet5)\n        val opValueSet5 = opValueSet.diff(opValueSet5)\n\
    \        val operandKeySet5 = operandKeySet.diff(operandKeySet5)\n        val\
    \ operandValueSet5 = operandValueSet.diff(operandValueSet5)\n        val opKeySet6\
    \ = opKeySet.diff(opKeySet6)\n        val opValueSet6 = opValueSet.diff(opValueSet6)\n\
    \        val operandKeySet6 = operandKeySet.diff(operandKeySet6)\n        val\
    \ operandValueSet6 = operandValueSet.diff(operand", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.size\n\
    \        val operandLen = operandList.size\n        val opArray = opList.map(_.toChar)\n\
    \        val operandArray = operandList.map(_.toChar)\n        val opArrayLen\
    \ = opArray.length\n        val operandArrayLen = operandArray.length\n      \
    \  val opArrayArray = opArray.map(_.toChar)\n        val operandArrayArray = operandArray.map(_.toChar)\n\
    \        val opArrayArrayLen = opArrayArray.length\n        val operandArrayArrayLen\
    \ = operandArrayArray.length\n        val opArrayArrayArray = opArrayArray.map(_.toChar)\n\
    \        val operandArrayArrayArray = operandArrayArray.map(_.toChar)\n      \
    \  val opArrayArrayArrayLen = opArrayArrayArray.length\n        val operandArrayArrayArrayLen\
    \ = operandArrayArrayArray.length\n        val opArrayArrayArrayArray = opArrayArrayArray.map(_.toChar)\n\
    \        val operandArrayArrayArrayArray = operandArrayArrayArray.map(_.toChar)\n\
    \        val opArrayArrayArrayArrayLen = opArrayArrayArrayArray.length\n     \
    \   val operandArrayArrayArrayArrayLen = operandArrayArrayArrayArray.length\n\
    \        val opArrayArrayArrayArrayArray = opArrayArrayArrayArray.map(_.toChar)\n\
    \        val operandArrayArrayArrayArrayArray = operandArrayArrayArrayArray.map(_.toChar)\n\
    \        val opArrayArrayArrayArrayArrayLen = opArrayArrayArrayArrayArray.length\n\
    \        val operandArrayArrayArrayArrayArrayLen = operandArrayArrayArrayArrayArray.length\n\
    \        val opArrayArrayArrayArrayArrayArray = opArrayArrayArrayArrayArray.map(_.toChar)\n\
    \        val operandArrayArrayArrayArrayArrayArray = operandArrayArrayArrayArrayArray.map(_.toChar)\n\
    \        val opArrayArrayArrayArrayArrayLen = opArrayArrayArrayArrayArray.length\n\
    \        val operandArrayArrayArrayArrayArrayLen = operandArrayArrayArrayArrayArrayArray.length\n\
    \        val opArrayArrayArrayArrayArrayArrayLen = opArrayArrayArrayArrayArrayArray.length\n\
    \        val operandArrayArrayArrayArrayArrayArrayLen = operandArrayArrayArrayArrayArrayArrayArray.length\n\
    \        val opArrayArrayArrayArrayArrayArrayArrayLen = opArrayArrayArrayArrayArrayArrayArray.length\n\
    \        val operandArrayArrayArrayArrayArrayArrayLen = operandArrayArrayArrayArrayArrayArrayArray.length\n\
    \        val opArray", "        val opList = op.map(_.toUpperCase)\n        val\
    \ opLen = opList.length\n        val opMap = new mutable.HashMap[String, Long]()\n\
    \        val opMap2 = new mutable.HashMap[String, Long]()\n        val opMap3\
    \ = new mutable.HashMap[String, Long]()\n        val opMap4 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap5 = new mutable.HashMap[String, Long]()\n        val\
    \ opMap6 = new mutable.HashMap[String, Long]()\n        val opMap7 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap8 = new mutable.HashMap[String, Long]()\n        val\
    \ opMap9 = new mutable.HashMap[String, Long]()\n        val opMap10 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap11 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap12 = new mutable.HashMap[String, Long]()\n        val opMap13 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap14 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap15 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap16 = new mutable.HashMap[String, Long]()\n        val opMap17 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap18 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap19 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap20 = new mutable.HashMap[String, Long]()\n        val opMap21 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap22 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap23 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap24 = new mutable.HashMap[String, Long]()\n        val opMap25 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap26 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap27 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap28 = new mutable.HashMap[String, Long]()\n        val opMap29 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap30 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap31 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap32 = new mutable.HashMap[String, Long]()\n        val opMap33 = new\
    \ mutable.HashMap[String, ", "        val opList = op.map(_.toUpperCase)\n   \
    \     val operandList = operand.map(_.toLong)\n        val opLength = opList.length\n\
    \        val operandLength = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val opMapKeys = opList.map(_.toUpperCase)\n        val operandMapKeys = operandList.map(_.toLong)\n\
    \        val opMapValues = opList.map(_.toUpperCase)\n        val operandMapValues\
    \ = operandList.map(_.toLong)\n        val opMapKeysLength = opMapKeys.length\n\
    \        val operandMapKeysLength = operandMapKeys.length - 1\n        val opMapValueLength\
    \ = opMapValues.length\n        val operandMapValueLength = operandMapValues.length\
    \ - 1\n        val opMapKeysLength = opMapKeysLength\n        val operandMapKeysLength\
    \ = operandMapKeysLength\n        val opMapValueLength = opMapValueLength\n  \
    \      val operandMapValueLength = operandMapValueLength\n        val opMapKeysLength\
    \ = opMapKeysLength\n        val operandMapKeysLength = operandMapKeysLength\n\
    \        val opMapValueLength = opMapValueLength\n        val operandMapValueLength\
    \ = operandMapValueLength\n        val opMapKeysLength = opMapKeysLength\n   \
    \     val operandMapKeysLength = operandMapKeysLength\n        val opMapValueLength\
    \ = opMapValueLength\n        val operandMapValueLength = operandMapValueLength\n\
    \        val opMapKeysLength = opMapKeysLength\n        val operandMapKeysLength\
    \ = operandMapKeysLength\n        val opMapValueLength = opMapValueLength\n  \
    \      val operandMapValueLength = operandMapValueLength\n        val opMapKeysLength\
    \ = opMapKeysLength\n        val operandMapKeysLength = operandMapKeysLength\n\
    \        val opMapValueLength = opMapValueLength\n        val operandMapValueLength\
    \ = operandMapValueLength\n        val opMapKeysLength = opMapKeysLength\n   \
    \     val operandMapKeysLength = operandMapKeysLength\n        val opMapValueLength\
    \ = opMapValueLength\n        val operandMapValueLength = operandMapValueLength\n\
    \        val opMapKeysLength = opMapKeysLength\n        val operandMapKeysLength\
    \ = operandMapKeysLength\n        val opMapValueLength = opMapValueLength\n  \
    \      val operandMapValueLength = operandMapValueLength\n        val opMap",
  "        val ops = op.map(_.toLowerCase).toList\n        val opLen = ops.length\n\
    \        val operandLen = operand.length - 1\n        val opMap = ops.zip(operand)\n\
    \        val opMapLen = opMap.length\n        val opMapSet = opMap.map(x => x._1).distinct\n\
    \        val opMapSetLen = opMapSet.length\n        val opMapSetSet = opMapSet.map(x\
    \ => x._2).distinct\n        val opMapSetSetLen = opMapSetSet.length\n       \
    \ val opMapSetSetSet = opMapSetSet.map(x => x._2).distinct\n        val opMapSetSetSetLen\
    \ = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSetSetLen\n        val\
    \ opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSetSetLen\n\
    \        val opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen\
    \ = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSetSetLen\n        val\
    \ opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSetSetLen\n\
    \        val opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen\
    \ = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSetSetLen\n        val\
    \ opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSetSetLen\n\
    \        val opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen\
    \ = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSetSetLen\n        val\
    \ opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSetSetLen\n\
    \        val opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen\
    \ = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSetSetLen\n        val\
    \ opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen = opMapSetSetLen\n\
    \        val opMapSetSetSetLen = opMapSetSetLen\n        val opMapSetSetSetLen\
    \ = op", "        val opList = op.map(_.toUpperCase)\n        val opSet = opList.map(_.toChar)\n\
    \        val opSetSize = opSet.length\n        val operandSize = operand.length\
    \ - 1\n        val opSetSize = opSetSize\n        val opSetSize = opSetSize\n\
    \        val opSetSize = opSetSize\n        val opSetSize = opSetSize\n      \
    \  val opSetSize = opSetSize\n        val opSetSize = opSetSize\n        val opSetSize\
    \ = opSetSize\n        val opSetSize = opSetSize\n        val opSetSize = opSetSize\n\
    \        val opSetSize = opSetSize\n        val opSetSize = opSetSize\n      \
    \  val opSetSize = opSetSize\n        val opSetSize = opSetSize\n        val opSetSize\
    \ = opSetSize\n        val opSetSize = opSetSize\n        val opSetSize = opSetSize\n\
    \        val opSetSize = opSetSize\n        val opSetSize = opSetSize\n      \
    \  val opSetSize = opSetSize\n        val opSetSize = opSetSize\n        val opSetSize\
    \ = opSetSize\n        val opSetSize = opSetSize\n        val opSetSize = opSetSize\n\
    \        val opSetSize = opSetSize\n        val opSetSize = opSetSize\n      \
    \  val opSetSize = opSetSize\n        val opSetSize = opSetSize\n        val opSetSize\
    \ = opSetSize\n        val opSetSize = opSetSize\n        val opSetSize = opSetSize\n\
    \        val opSetSize = opSetSize\n        val opSetSize = opSetSize\n      \
    \  val opSetSize = opSetSize\n        val opSetSize = opSetSize\n        val opSetSize\
    \ = opSetSize\n        val opSetSize = opSetSize\n        val opSetSize = opSetSize\n\
    \        val opSetSize = opSetSize\n        val opSetSize = opSetSize\n      \
    \  val opSetSize = opSetSize\n        val opSetSize = opSetSize\n        val opSetSize\
    \ = opSetSize\n        val opSetSize = opSetSize\n        val opSetSize = opSetSize\n\
    \        val opSetSize = opSetSize\n        val opSetSize = opSetSize\n      \
    \  val opSetSize = opSetSize\n        val opSetSize = opSetSize\n        val opSetSize\
    \ = opSetSize\n        val opSetSize = opSetSize\n        val opSetSize = opSetSize\n\
    \        val opSetSize = opSetSize\n        val op", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.size\n\
    \        val operandLen = operandList.size\n        val opLenMinusOne = opLen\
    \ - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusTwo\
    \ = opLen - 2\n        val operandLenMinusTwo = operandLen - 2\n        val opLenMinusThree\
    \ = opLen - 3\n        val operandLenMinusThree = operandLen - 3\n        val\
    \ opLenMinusFour = opLen - 4\n        val operandLenMinusFour = operandLen - 4\n\
    \        val opLenMinusFive = opLen - 5\n        val operandLenMinusFive = operandLen\
    \ - 5\n        val opLenMinusSix = opLen - 6\n        val operandLenMinusSix =\
    \ operandLen - 6\n        val opLenMinusSeven = opLen - 7\n        val operandLenMinusSeven\
    \ = operandLen - 7\n        val opLenMinusEight = opLen - 8\n        val operandLenMinusEight\
    \ = operandLen - 8\n        val opLenMinusNine = opLen - 9\n        val operandLenMinusNine\
    \ = operandLen - 9\n        val opLenMinusTen = opLen - 10\n        val operandLenMinusTen\
    \ = operandLen - 10\n        val opLenMinusEleven = opLen - 11\n        val operandLenMinusEleven\
    \ = operandLen - 11\n        val opLenMinusTwelve = opLen - 12\n        val operandLenMinusTwelve\
    \ = operandLen - 12\n        val opLenMinusThirteen = opLen - 13\n        val\
    \ operandLenMinusThirteen = operandLen - 13\n        val opLenMinusFourteen =\
    \ opLen - 14\n        val operandLenMinusFourteen = operandLen - 14\n        val\
    \ opLenMinusFifteen = opLen - 15\n        val operandLenMinusFifteen = operandLen\
    \ - 15\n        val opLenMinusSixteen = opLen - 16\n        val operandLenMinusSixteen\
    \ = operandLen - 16\n        val opLenMinusSeventeen = opLen - 17\n        val\
    \ operandLenMinusSeventeen = operandLen - 17\n        ", "        val ops = op.map(x\
    \ => x.toLowerCase)\n        val op1 = ops(0)\n        val op2 = ops(1)\n    \
    \    val op3 = ops(2)\n        val op4 = ops(3)\n        val op5 = ops(4)\n  \
    \      val op6 = ops(5)\n        val op7 = ops(6)\n        val op8 = ops(7)\n\
    \        val op9 = ops(8)\n        val op10 = ops(9)\n        val op11 = ops(10)\n\
    \        val op12 = ops(11)\n        val op13 = ops(12)\n        val op14 = ops(13)\n\
    \        val op15 = ops(14)\n        val op16 = ops(15)\n        val op17 = ops(16)\n\
    \        val op18 = ops(17)\n        val op19 = ops(18)\n        val op20 = ops(19)\n\
    \        val op21 = ops(20)\n        val op22 = ops(21)\n        val op23 = ops(22)\n\
    \        val op24 = ops(23)\n        val op25 = ops(24)\n        val op26 = ops(25)\n\
    \        val op27 = ops(26)\n        val op28 = ops(27)\n        val op29 = ops(28)\n\
    \        val op30 = ops(29)\n        val op31 = ops(30)\n        val op32 = ops(31)\n\
    \        val op33 = ops(32)\n        val op34 = ops(33)\n        val op35 = ops(34)\n\
    \        val op36 = ops(35)\n        val op37 = ops(36)\n        val op38 = ops(37)\n\
    \        val op39 = ops(38)\n        val op40 = ops(39)\n        val op41 = ops(40)\n\
    \        val op42 = ops(41)\n        val op43 = ops(42)\n        val op44 = ops(43)\n\
    \        val op45 = ops(44)\n        val op46 = ops(45)\n        val op47 = ops(46)\n\
    \        val op48 = ops(47)\n        val op49 = ops(48)\n        val op50 = ops(49)\n\
    \        val op51 = ops(50)\n        val op52 = ops(51)\n        val op53 = ops(52)\n\
    \        val op54 = ops(53)\n        ", "        val ops = op.map(x => x.toChar)\n\
    \        val op1 = ops.head\n        val op2 = ops.last\n        val operand1\
    \ = operand.head\n        val operand2 = operand.last\n        val op1Val = op1.toLong\n\
    \        val op2Val = op2.toLong\n        val operand1Val = operand1.toLong\n\
    \        val operand2Val = operand2.toLong\n        val op1Val2 = op1Val * op2Val\n\
    \        val op1Val3 = op1Val * operand2Val\n        val op1Val4 = op1Val * op2Val\
    \ * operand2Val\n        val op1Val5 = op1Val * op2Val * operand2Val * operand2Val\n\
    \        val op1Val6 = op1Val * op2Val * operand2Val * operand2Val * operand2Val\n\
    \        val op1Val7 = op1Val * op2Val * operand2Val * operand2Val * operand2Val\
    \ * operand2Val\n        val op1Val8 = op1Val * op2Val * operand2Val * operand2Val\
    \ * operand2Val * operand2Val * operand2Val\n        val op1Val9 = op1Val * op2Val\
    \ * operand2Val * operand2Val * operand2Val * operand2Val * operand2Val * operand2Val\
    \ * operand2Val\n        val op1Val10 = op1Val * op2Val * operand2Val * operand2Val\
    \ * operand2Val * operand2Val * operand2Val * operand2Val * operand2Val * operand2Val\
    \ * operand2Val * operand2Val * operand2Val * operand2Val * operand2Val * operand2Val\
    \ * operand2Val * operand2Val * operand2Val * operand2Val * operand2Val * operand2Val\
    \ * operand2Val * operand2Val * operand2Val * operand2Val * operand2Val * operand2Val\
    \ * operand2Val * operand2Val * operand2Val * operand2Val * operand2Val * operand2Val\
    \ * operand2Val * operand2Val * operand2Val * operand2Val * operand2Val * operand2Val\
    \ * operand2Val * operand2Val * operand2Val * operand2Val * operand2Val * operand2Val\
    \ * operand2Val * operand2Val * operand2Val * operand2Val * operand2Val * operand2Val\
    \ * operand2Val * operand2Val * operand2Val", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toInt).toList\n        val length = opList.size\n\
    \        val operandListLength = operandList.size\n        val opListLength =\
    \ opList.size\n        val opListLength = opListLength + 1\n        val operandListLength\
    \ = operandListLength + 1\n        val opListLength = opListLength + 1\n     \
    \   val operandListLength = operandListLength + 1\n        val opListLength =\
    \ opListLength + 1\n        val operandListLength = operandListLength + 1\n  \
    \      val opListLength = opListLength + 1\n        val operandListLength = operandListLength\
    \ + 1\n        val opListLength = opListLength + 1\n        val operandListLength\
    \ = operandListLength + 1\n        val opListLength = opListLength + 1\n     \
    \   val operandListLength = operandListLength + 1\n        val opListLength =\
    \ opListLength + 1\n        val operandListLength = operandListLength + 1\n  \
    \      val opListLength = opListLength + 1\n        val operandListLength = operandListLength\
    \ + 1\n        val opListLength = opListLength + 1\n        val operandListLength\
    \ = operandListLength + 1\n        val opListLength = opListLength + 1\n     \
    \   val operandListLength = operandListLength + 1\n        val opListLength =\
    \ opListLength + 1\n        val operandListLength = operandListLength + 1\n  \
    \      val opListLength = opListLength + 1\n        val operandListLength = operandListLength\
    \ + 1\n        val opListLength = opListLength + 1\n        val operandListLength\
    \ = operandListLength + 1\n        val opListLength = opListLength + 1\n     \
    \   val operandListLength = operandListLength + 1\n        val opListLength =\
    \ opListLength + 1\n        val operandListLength = operandListLength + 1\n  \
    \      val opListLength = opListLength + 1\n        val operandListLength = operandListLength\
    \ + 1\n        val opListLength = opListLength + 1\n        val operandListLength\
    \ = operandListLength + 1\n        val opListLength = opListLength + 1\n     \
    \   val operandListLength = operandListLength + 1\n        val opListLength =\
    \ opListLength + 1\n        val operandListLength = operandListLength + 1\n  \
    \      val opListLength = opListLength + 1\n        val operandListLength = operandListLength\
    \ + 1\n        val opListLength = opListLength + 1\n        val operandListLength\
    \ = operandListLength + 1\n        val opListLength = opListLength + 1\n     \
    \   val operandListLength = operandListLength + 1\n        val opListLength =\
    \ opListLength + 1\n        val operandListLength = operandListLength + 1\n  \
    \      val op", "        var sum = 0L\n        var i = 0\n        while(i < operand.size)\
    \ {\n            val op = op(i)\n            val operand = operand(i)\n      \
    \      val value = if (op == \"+\") {\n                sum + operand\n       \
    \     } else if (op == \"-\") {\n                sum - operand\n            }\
    \ else if (op == \"*\") {\n                sum * operand\n            } else if\
    \ (op == \"//\") {\n                sum / (operand * operand)\n            } else\
    \ if (op == \"**\") {\n                sum ** (operand * operand)\n          \
    \  } else {\n                throw new Exception(\"Invalid operator\")\n     \
    \       }\n            i += 1\n            sum = value\n        }\n        return\
    \ sum", "        val ops = op.map(_.toLowerCase)\n        val op1 = ops.head\n\
    \        val op2 = ops.last\n        val operand1 = operand.head\n        val\
    \ operand2 = operand.last\n        val op1Int = op1.toInt\n        val op2Int\
    \ = op2.toInt\n        val operand1Int = operand1.toInt\n        val operand2Int\
    \ = operand2.toInt\n        val op1Int = op1.toInt\n        val op2Int = op2.toInt\n\
    \        val operand1Int = operand1.toInt\n        val operand2Int = operand2.toInt\n\
    \        val op1Int = op1.toInt\n        val op2Int = op2.toInt\n        val operand1Int\
    \ = operand1.toInt\n        val operand2Int = operand2.toInt\n        val op1Int\
    \ = op1.toInt\n        val op2Int = op2.toInt\n        val operand1Int = operand1.toInt\n\
    \        val operand2Int = operand2.toInt\n        val op1Int = op1.toInt\n  \
    \      val op2Int = op2.toInt\n        val operand1Int = operand1.toInt\n    \
    \    val operand2Int = operand2.toInt\n        val op1Int = op1.toInt\n      \
    \  val op2Int = op2.toInt\n        val operand1Int = operand1.toInt\n        val\
    \ operand2Int = operand2.toInt\n        val op1Int = op1.toInt\n        val op2Int\
    \ = op2.toInt\n        val operand1Int = operand1.toInt\n        val operand2Int\
    \ = operand2.toInt\n        val op1Int = op1.toInt\n        val op2Int = op2.toInt\n\
    \        val operand1Int = operand1.toInt\n        val operand2Int = operand2.toInt\n\
    \        val op1Int = op1.toInt\n        val op2Int = op2.toInt\n        val operand1Int\
    \ = operand1.toInt\n        val operand2Int = operand2.toInt\n        val op1Int\
    \ = op1.toInt\n        val op2Int = op2.toInt\n        val operand1Int = operand1.toInt\n\
    \        val operand2Int = operand2.toInt\n        val op1Int = op1.toInt\n  \
    \      val op2Int = op2.toInt\n        val operand1Int = operand1.toInt", "  \
    \      val ops = op.map(_.toLowerCase)\n        val opLen = ops.length\n     \
    \   val operands = operand.map(_.toLong)\n        val operandLen = operands.length\n\
    \        val opIndex = ops.indexOf(\"+\")\n        val opIndex2 = ops.indexOf(\"\
    *\")\n        val opIndex3 = ops.indexOf(\"/\")\n        val opIndex4 = ops.indexOf(\"\
    **\")\n        val opIndex5 = ops.indexOf(\"//\")\n        val opIndex6 = ops.indexOf(\"\
    %\")\n        val opIndex7 = ops.indexOf(\"|\")\n        val opIndex8 = ops.indexOf(\"\
    &\")\n        val opIndex9 = ops.indexOf(\"^\")\n        val opIndex10 = ops.indexOf(\"\
    ~\")\n        val opIndex11 = ops.indexOf(\"<<\")\n        val opIndex12 = ops.indexOf(\"\
    >>\")\n        val opIndex13 = ops.indexOf(\"==\")\n        val opIndex14 = ops.indexOf(\"\
    !=\")\n        val opIndex15 = ops.indexOf(\"<\")\n        val opIndex16 = ops.indexOf(\"\
    >\")\n        val opIndex17 = ops.indexOf(\"<=\")\n        val opIndex18 = ops.indexOf(\"\
    >=\")\n        val opIndex19 = ops.indexOf(\"!=\")\n        val opIndex20 = ops.indexOf(\"\
    ==\")\n        val opIndex21 = ops.indexOf(\"!=\")\n        val opIndex22 = ops.indexOf(\"\
    ==\")\n        val opIndex23 = ops.indexOf(\"!=\")\n        val opIndex24 = ops.indexOf(\"\
    ==\")\n        val opIndex25 = ops.indexOf(\"!=\")\n        val opIndex26 = ops.indexOf(\"\
    ==\")\n        val opIndex27 = ops.indexOf(\"!=\")\n        val opIndex28 = ops.indexOf(\"\
    ==\")\n        val opIndex29 = ops.indexOf(\"!=\")\n        val opIndex30 = ops.indexOf(\"\
    ==\")\n        val opIndex31 = ops.indexOf(\"!=\")\n        val opIndex32 = ops.indexOf(\"\
    ==\")\n        val opIndex33 = ops.indexOf(\"!=\")\n        val opIndex34 = ops.indexOf(\"\
    ==\")\n        val opIndex35 = ops.indexOf(\"!=\")\n        val opIndex36 = ops.indexOf(\"\
    ==\")\n        val opIndex37 = ops.indexOf(\"!=\")\n        val opIndex38 = ops.indexOf(\"\
    ==\")\n        val opIndex39 = ops.indexOf(\"!=\")\n        val opIndex40 = ops.indexOf(\"\
    ==\")\n        val opIndex41 = ops.indexOf(\"!=\")\n        val ", "        val\
    \ ops = op.map(_.toLowerCase).toList\n        val opLen = ops.size\n        val\
    \ opLenMinusOne = opLen - 1\n        val operandLen = operand.size\n        val\
    \ operandLenMinusOne = operandLen - 1\n        val operands = operand.map(_.toLong).toList\n\
    \        val operandsLen = operands.size\n        val operandsLenMinusOne = operandsLen\
    \ - 1\n        val operandsMinusOne = operandsLen - 1\n        val operandsMinusOneMinusOne\
    \ = operandsMinusOne - 1\n        val operandsMinusOneMinusOneMinusOne = operandsMinusOneMinusOne\
    \ - 1\n        val operandsMinusOneMinusOneMinusOneMinusOne = operandsMinusOneMinusOneMinusOne\
    \ - 1\n        val operandsMinusOneMinusOneMinusOneMinusOneMinusOne = operandsMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne =\
    \ operandsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne -\
    \ 1\n        val operandsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandsMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne", "     \
    \   val ops = op.map(_.toLowerCase)\n        val operands = operand.map(_.toLong)\n\
    \        val length = ops.length\n        val stack = mutable.Stack[Long]()\n\
    \        val result = operands.head\n        val op1 = ops.head\n        val op2\
    \ = ops.last\n        val op1Int = operands.head.toInt\n        val op2Int = operands.last.toInt\n\
    \        val op1Int2 = operands.tail.head.toInt\n        val op2Int2 = operands.tail.last.toInt\n\
    \        val op1Int3 = operands.tail.tail.head.toInt\n        val op2Int3 = operands.tail.tail.last.toInt\n\
    \        val op1Int4 = operands.tail.tail.tail.head.toInt\n        val op2Int4\
    \ = operands.tail.tail.tail.last.toInt\n        val op1Int5 = operands.tail.tail.tail.tail.head.toInt\n\
    \        val op2Int5 = operands.tail.tail.tail.tail.last.toInt\n        val op1Int6\
    \ = operands.tail.tail.tail.tail.tail.head.toInt\n        val op2Int6 = operands.tail.tail.tail.tail.tail.last.toInt\n\
    \        val op1Int7 = operands.tail.tail.tail.tail.tail.tail.head.toInt\n   \
    \     val op2Int7 = operands.tail.tail.tail.tail.tail.tail.last.toInt\n      \
    \  val op1Int8 = operands.tail.tail.tail.tail.tail.tail.tail.head.toInt\n    \
    \    val op2Int8 = operands.tail.tail.tail.tail.tail.tail.tail.last.toInt\n  \
    \      val op1Int9 = operands.tail.tail.tail.tail.tail.tail.tail.tail.head.toInt\n\
    \        val op2Int9 = operands.tail.tail.tail.tail.tail.tail.tail.tail.last.toInt\n\
    \        val op1Int10 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.head.toInt\n\
    \        val op2Int10 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.last.toInt\n\
    \        val op1Int11 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head.toInt",
  "        val opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toLong).toList\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opIndex = opList.indexOf(\"+\")\n        val opIndex2 = opList.indexOf(\"\
    *\")\n        val opIndex3 = opList.indexOf(\"/\")\n        val opIndex4 = opList.indexOf(\"\
    **\")\n        val opIndex5 = opList.indexOf(\"//\")\n        val opIndex6 = opList.indexOf(\"\
    %\")\n        val opIndex7 = opList.indexOf(\"&\")\n        val opIndex8 = opList.indexOf(\"\
    |\")\n        val opIndex9 = opList.indexOf(\"^\")\n        val opIndex10 = opList.indexOf(\"\
    ~\")\n        val opIndex11 = opList.indexOf(\"=\")\n        val opIndex12 = opList.indexOf(\"\
    ==\")\n        val opIndex13 = opList.indexOf(\"!=\")\n        val opIndex14 =\
    \ opList.indexOf(\"<\")\n        val opIndex15 = opList.indexOf(\">\")\n     \
    \   val opIndex16 = opList.indexOf(\"<=\")\n        val opIndex17 = opList.indexOf(\"\
    >=\")\n        val opIndex18 = opList.indexOf(\"==\")\n        val opIndex19 =\
    \ opList.indexOf(\"!=\")\n        val opIndex20 = opList.indexOf(\"&&\")\n   \
    \     val opIndex21 = opList.indexOf(\"||\")\n        val opIndex22 = opList.indexOf(\"\
    ??\")\n        val opIndex23 = opList.indexOf(\"??=\")\n        val opIndex24\
    \ = opList.indexOf(\"???\")\n        val opIndex25 = opList.indexOf(\"????\")\n\
    \        val opIndex26 = opList.indexOf(\"????=\")\n        val opIndex27 = opList.indexOf(\"\
    ?????\")\n        val opIndex28 = opList.indexOf(\"??????\")\n        val opIndex29\
    \ = opList.indexOf(\"??????=\")\n        val opIndex30 = opList.indexOf(\"???????\"\
    )\n        val opIndex31 = opList.indexOf(\"????????\")\n        val opIndex32\
    \ = opList.indexOf(\"????????=\")\n        val opIndex33 = opList.indexOf(\"?????????\"\
    )\n        val opIndex34 = opList.indexOf(\"??????????\")\n        val opIndex35\
    \ = opList.indexOf(\"??????????=\")\n        val opIndex36 = opList.indexOf(\"",
  "        val opList = op.map(x => x.toChar)\n        val opLen = opList.length\n\
    \        val operandList = operand.map(x => x.toLong)\n        val operandLen\
    \ = operandList.length\n        val result = operandList.foldLeft(0L) { (acc,\
    \ x) => \n            val opIndex = opList.indexOf(x)\n            val opVal =\
    \ opIndex.toChar\n            val opValInt = opVal.toInt\n            val opValLong\
    \ = opVal.toLong\n            val opValFloat = opVal.toFloat\n            val\
    \ opValDouble = opVal.toDouble\n            val opValString = opVal.toString\n\
    \            val opValChar = opVal.toChar\n            val opValBoolean = opVal.toBoolean\n\
    \            val opValInt = opVal.toInt\n            val opValLong = opVal.toLong\n\
    \            val opValFloat = opVal.toFloat\n            val opValDouble = opVal.toDouble\n\
    \            val opValString = opVal.toString\n            val opValChar = opVal.toChar\n\
    \            val opValBoolean = opVal.toBoolean\n            val opValInt = opVal.toInt\n\
    \            val opValLong = opVal.toLong\n            val opValFloat = opVal.toFloat\n\
    \            val opValDouble = opVal.toDouble\n            val opValString = opVal.toString\n\
    \            val opValChar = opVal.toChar\n            val opValBoolean = opVal.toBoolean\n\
    \            val opValInt = opVal.toInt\n            val opValLong = opVal.toLong\n\
    \            val opValFloat = opVal.toFloat\n            val opValDouble = opVal.toDouble\n\
    \            val opValString = opVal.toString\n            val opValChar = opVal.toChar\n\
    \            val opValBoolean = opVal.toBoolean\n            val opValInt = opVal.toInt\n\
    \            val opValLong = opVal.toLong\n            val opValFloat = opVal.toFloat\n\
    \            val opValDouble = opVal.toDouble\n            val opValString = opVal.toString\n\
    \            val opValChar = opVal.toChar\n            val opValBoolean = opVal.toBoolean\n\
    \            val opValInt = opVal.toInt\n            val opValLong = opVal.toLong\n\
    \            val opValFloat = opVal.toFloat\n            val opValDouble = opVal.toDouble\n\
    \            val opValString = opVal.toString\n            val op", "        val\
    \ opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toInt)\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Int]()\n        val operandMap\
    \ = new mutable.HashMap[String, Int]()\n        val opMap2 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap2 = new mutable.HashMap[String, Int]()\n     \
    \   val opMap3 = new mutable.HashMap[String, Int]()\n        val operandMap3 =\
    \ new mutable.HashMap[String, Int]()\n        val opMap4 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap4 = new mutable.HashMap[String, Int]()\n     \
    \   val opMap5 = new mutable.HashMap[String, Int]()\n        val operandMap5 =\
    \ new mutable.HashMap[String, Int]()\n        val opMap6 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap6 = new mutable.HashMap[String, Int]()\n     \
    \   val opMap7 = new mutable.HashMap[String, Int]()\n        val operandMap7 =\
    \ new mutable.HashMap[String, Int]()\n        val opMap8 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap8 = new mutable.HashMap[String, Int]()\n     \
    \   val opMap9 = new mutable.HashMap[String, Int]()\n        val operandMap9 =\
    \ new mutable.HashMap[String, Int]()\n        val opMap10 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap10 = new mutable.HashMap[String, Int]()\n    \
    \    val opMap11 = new mutable.HashMap[String, Int]()\n        val operandMap11\
    \ = new mutable.HashMap[String, Int]()\n        val opMap12 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap12 = new mutable.HashMap[String, Int]()\n    \
    \    val opMap13 = new mutable.HashMap[String, Int]()\n        val operandMap13\
    \ = new mutable.HashMap[String, Int]()\n        val opMap14 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap14 = new mutable.HashMap[String, Int]()\n    \
    \    val opMap15 = new mutable.HashMap[String, Int]()\n        val operandMap15\
    \ = new mutable.HashMap[String, Int]()\n        val opMap16 = new mutable.HashMap[String,\
    \ Int]()\n        val operandMap16 = new mut", "        val ops = op.map(x =>\
    \ x.toChar)\n        val op1 = ops(0)\n        val op2 = ops(1)\n        val op3\
    \ = ops(2)\n        val op4 = ops(3)\n        val op5 = ops(4)\n        val op6\
    \ = ops(5)\n        val op7 = ops(6)\n        val op8 = ops(7)\n        val op9\
    \ = ops(8)\n        val op10 = ops(9)\n        val op11 = ops(10)\n        val\
    \ op12 = ops(11)\n        val op13 = ops(12)\n        val op14 = ops(13)\n   \
    \     val op15 = ops(14)\n        val op16 = ops(15)\n        val op17 = ops(16)\n\
    \        val op18 = ops(17)\n        val op19 = ops(18)\n        val op20 = ops(19)\n\
    \        val op21 = ops(20)\n        val op22 = ops(21)\n        val op23 = ops(22)\n\
    \        val op24 = ops(23)\n        val op25 = ops(24)\n        val op26 = ops(25)\n\
    \        val op27 = ops(26)\n        val op28 = ops(27)\n        val op29 = ops(28)\n\
    \        val op30 = ops(29)\n        val op31 = ops(30)\n        val op32 = ops(31)\n\
    \        val op33 = ops(32)\n        val op34 = ops(33)\n        val op35 = ops(34)\n\
    \        val op36 = ops(35)\n        val op37 = ops(36)\n        val op38 = ops(37)\n\
    \        val op39 = ops(38)\n        val op40 = ops(39)\n        val op41 = ops(40)\n\
    \        val op42 = ops(41)\n        val op43 = ops(42)\n        val op44 = ops(43)\n\
    \        val op45 = ops(44)\n        val op46 = ops(45)\n        val op47 = ops(46)\n\
    \        val op48 = ops(47)\n        val op49 = ops(48)\n        val op50 = ops(49)\n\
    \        val op51 = ops(50)\n        val op52 = ops(51)\n        val op53 = ops(52)\n\
    \        val op54 = ops(53)\n", "        val ops = op.mkString(\"+\")\n      \
    \  val opList = ops.split(\"+\")\n        val opLen = opList.size\n        val\
    \ opLenMinusOne = opLen - 1\n        val opLenMinusOnePlusOne = opLenMinusOne\
    \ + 1\n        val operandList = operand.mkString(\"+\")\n        val operandLen\
    \ = operandList.size\n        val operandLenMinusOne = operandLen - 1\n      \
    \  val operandLenMinusOnePlusOne = operandLenMinusOne + 1\n        val opListLen\
    \ = opList.size\n        val opListLenMinusOne = opListLen - 1\n        val opListLenMinusOnePlusOne\
    \ = opListLenMinusOne + 1\n        val operandListLen = operandList.size\n   \
    \     val operandListLenMinusOne = operandListLen - 1\n        val operandListLenMinusOnePlusOne\
    \ = operandListLenMinusOne + 1\n        val opListLenMinusOnePlusOne = opListLenMinusOne\
    \ + 1\n        val opListLenMinusOnePlusOnePlusOne = opListLenMinusOne + 1 + 1\n\
    \        val opListLenMinusOnePlusOnePlusOnePlusOne = opListLenMinusOne + 1 +\
    \ 1 + 1\n        val opListLenMinusOnePlusOnePlusOnePlusOnePlusOne = opListLenMinusOne\
    \ + 1 + 1 + 1 + 1 + 1\n        val opListLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = opListLenMinusOne + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        val opListLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = opListLenMinusOne + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        val opListLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = opListLenMinusOne + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n      \
    \  val opListLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = opListLenMinusOne + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\
    \ + 1\n        val opListLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = opListLenMinusOne + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\
    \ + 1 + 1 + 1\n        val opListLenMinusOne", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.size\n\
    \        val operandLen = operandList.size\n        val opIndex = 0\n        val\
    \ operandIndex = 0\n        val result = operandList.head\n        while (operandIndex\
    \ < operandLen) {\n            val op1 = opList(opIndex)\n            val op2\
    \ = opList(opIndex + 1)\n            val op3 = opList(opIndex + 2)\n         \
    \   val op4 = opList(opIndex + 3)\n            val op5 = opList(opIndex + 4)\n\
    \            val op6 = opList(opIndex + 5)\n            val op7 = opList(opIndex\
    \ + 6)\n            val op8 = opList(opIndex + 7)\n            val op9 = opList(opIndex\
    \ + 8)\n            val op10 = opList(opIndex + 9)\n            val op11 = opList(opIndex\
    \ + 10)\n            val op12 = opList(opIndex + 11)\n            val op13 = opList(opIndex\
    \ + 12)\n            val op14 = opList(opIndex + 13)\n            val op15 = opList(opIndex\
    \ + 14)\n            val op16 = opList(opIndex + 15)\n            val op17 = opList(opIndex\
    \ + 16)\n            val op18 = opList(opIndex + 17)\n            val op19 = opList(opIndex\
    \ + 18)\n            val op20 = opList(opIndex + 19)\n            val op21 = opList(opIndex\
    \ + 20)\n            val op22 = opList(opIndex + 21)\n            val op23 = opList(opIndex\
    \ + 22)\n            val op24 = opList(opIndex + 23)\n            val op25 = opList(opIndex\
    \ + 24)\n            val op26 = opList(opIndex + 25)\n            val op27 = opList(opIndex\
    \ + 26)\n            val op28 = opList(opIndex + 27)\n            val op29 = opList(opIndex\
    \ + 28)\n            val op30 = opList(opIndex + 29)\n            val op31 = opList(opIndex\
    \ + 30)\n            val op32 = opList(opIndex + 31)\n            val op33 = opList(opIndex\
    \ + 32)\n            val op34 = opList(opIndex + 33)\n            val op35 = opList(opIndex\
    \ + 34)\n            val op36 = opList(opIndex + 35)\n            val op37 = opList(opIndex\
    \ + 36)\n            val op38", "        val opList = op.map(_.toLowerCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.size\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operandList.size\n\
    \        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne =\
    \ opLen - 1\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLen", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toLong).toList\n        val operatorList\
    \ = opList.filterNot(_ == \"*\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"-\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"/\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"**\")\n    \
    \    val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"+\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"-\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"*\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"/\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"**\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"+\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"-\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"*\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"/\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"**\")\n    \
    \    val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"+\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"-\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"*\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"/\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"**\")\n        val operand", "        val opList\
    \ = op.map(x => x.toChar)\n        val operandList = operand.map(x => x.toLong)\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val result = operandList.foldLeft(0)((acc, x) => {\n          \
    \  val op = opList.head\n            val operand = operandList.head\n        \
    \    val operand2 = operandList.tail.head\n            val operand3 = operandList.tail.tail.head\n\
    \            val operand4 = operandList.tail.tail.tail.head\n            val operand5\
    \ = operandList.tail.tail.tail.tail.head\n            val operand6 = operandList.tail.tail.tail.tail.tail.head\n\
    \            val operand7 = operandList.tail.tail.tail.tail.tail.tail.head\n \
    \           val operand8 = operandList.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand9 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand10 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand11 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand12 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand13 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand14 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand15 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand16 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand17 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail",
  "        val ops = op.map(_.toUpperCase)\n        val op1 = ops.head\n        val\
    \ op2 = ops.last\n        val op3 = ops.dropRight(1)\n        val op4 = ops.dropRight(2)\n\
    \        val op5 = ops.dropRight(3)\n        val op6 = ops.dropRight(4)\n    \
    \    val op7 = ops.dropRight(5)\n        val op8 = ops.dropRight(6)\n        val\
    \ op9 = ops.dropRight(7)\n        val op10 = ops.dropRight(8)\n        val op11\
    \ = ops.dropRight(9)\n        val op12 = ops.dropRight(10)\n        val op13 =\
    \ ops.dropRight(11)\n        val op14 = ops.dropRight(12)\n        val op15 =\
    \ ops.dropRight(13)\n        val op16 = ops.dropRight(14)\n        val op17 =\
    \ ops.dropRight(15)\n        val op18 = ops.dropRight(16)\n        val op19 =\
    \ ops.dropRight(17)\n        val op20 = ops.dropRight(18)\n        val op21 =\
    \ ops.dropRight(19)\n        val op22 = ops.dropRight(20)\n        val op23 =\
    \ ops.dropRight(21)\n        val op24 = ops.dropRight(22)\n        val op25 =\
    \ ops.dropRight(23)\n        val op26 = ops.dropRight(24)\n        val op27 =\
    \ ops.dropRight(25)\n        val op28 = ops.dropRight(26)\n        val op29 =\
    \ ops.dropRight(27)\n        val op30 = ops.dropRight(28)\n        val op31 =\
    \ ops.dropRight(29)\n        val op32 = ops.dropRight(30)\n        val op33 =\
    \ ops.dropRight(31)\n        val op34 = ops.dropRight(32)\n        val op35 =\
    \ ops.dropRight(33)\n        val op36 = ops.dropRight(34)\n        val op37 =\
    \ ops.dropRight(35)\n        val op38 = ops.dropRight(36)\n        val op39 =\
    \ ops.dropRight(37)\n        val op40 = ops.dropRight(38)\n        val op41 =\
    \ ops.dropRight(39)\n        val op42 = ops.dropRight(40)\n        val op43 =\
    \ ops.dropRight(41)\n        val op44 = ops.dropRight(42)\n        val op45 =\
    \ ops.dropRight(43)\n        val op46 = ops.dropRight(44)\n        val op47",
  "        val ops = op.map(_.toUpperCase)\n        val opList = ops.toList\n    \
    \    val operands = operand.toList\n        val opLen = opList.size\n        val\
    \ operandLen = operands.size\n        val opIndex = ops.indexOf(\"+\")\n     \
    \   val opIndex2 = ops.indexOf(\"*\")\n        val opIndex3 = ops.indexOf(\"/\"\
    )\n        val opIndex4 = ops.indexOf(\"//\")\n        val opIndex5 = ops.indexOf(\"\
    **\")\n        val opIndex6 = ops.indexOf(\"%\")\n        val opIndex7 = ops.indexOf(\"\
    &\")\n        val opIndex8 = ops.indexOf(\"|\")\n        val opIndex9 = ops.indexOf(\"\
    ^\")\n        val opIndex10 = ops.indexOf(\"~\")\n        val opIndex11 = ops.indexOf(\"\
    <<\")\n        val opIndex12 = ops.indexOf(\">>\")\n        val opIndex13 = ops.indexOf(\"\
    ==\")\n        val opIndex14 = ops.indexOf(\"!=\")\n        val opIndex15 = ops.indexOf(\"\
    <\")\n        val opIndex16 = ops.indexOf(\">\")\n        val opIndex17 = ops.indexOf(\"\
    <=\")\n        val opIndex18 = ops.indexOf(\">=\")\n        val opIndex19 = ops.indexOf(\"\
    !~\")\n        val opIndex20 = ops.indexOf(\"!%\")\n        val opIndex21 = ops.indexOf(\"\
    !&\")\n        val opIndex22 = ops.indexOf(\"!|\")\n        val opIndex23 = ops.indexOf(\"\
    !^\")\n        val opIndex24 = ops.indexOf(\"!~\")\n        val opIndex25 = ops.indexOf(\"\
    !<<\")\n        val opIndex26 = ops.indexOf(\"!>>\")\n        val opIndex27 =\
    \ ops.indexOf(\"!==\")\n        val opIndex28 = ops.indexOf(\"!!=\")\n       \
    \ val opIndex29 = ops.indexOf(\"!<\")\n        val opIndex30 = ops.indexOf(\"\
    !>\")\n        val opIndex31 = ops.indexOf(\"!<=\")\n        val opIndex32 = ops.indexOf(\"\
    !>=\")\n        val opIndex33 = ops.indexOf(\"!~\")\n        val opIndex34 = ops.indexOf(\"\
    !%\")\n        val opIndex35 = ops.indexOf(\"!&\")\n        val opIndex36 = ops.indexOf(\"\
    !|\")\n        val opIndex37 = ops.indexOf(\"!^\")\n        val opIndex38 = ops.indexOf(\"\
    !~\")\n        val opIndex39 = ops.indexOf(\"!<<\")\n", "        val ops = op.map(x\
    \ => x.toLowerCase)\n        val operands = operand.map(x => x.toLong)\n     \
    \   val opList = ops.toList\n        val operandList = operands.toList\n     \
    \   val opLen = opList.size\n        val opLenMinusOne = opLen - 1\n        val\
    \ operandLen = operandList.size\n        val operandLenMinusOne = operandLen -\
    \ 1\n        val opLenMinusOneMinusOne = opLen - 1 - 1\n        val operandLenMinusOneMinusOne\
    \ = operandLen - 1 - 1\n        val opLenMinusOneMinusOneMinusOne = opLen - 1\
    \ - 1 - 1\n        val operandLenMinusOneMinusOneMinusOne = operandLen - 1 - 1\
    \ - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne = opLen - 1 - 1 -\
    \ 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne = operandLen\
    \ - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val\
    \ operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = operandLen\
    \ - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n  \
    \      val operandLenMinusOneMinusOneMinus", "        val ops = op.map(_.toLowerCase).toList\n\
    \        val operands = operand.map(_.toLong).toList\n        val opLength = ops.size\n\
    \        val operandLength = operands.size - 1\n        val opIndex = ops.indexOf(\"\
    +\")\n        val opIndex2 = ops.indexOf(\"-\")\n        val opIndex3 = ops.indexOf(\"\
    *\")\n        val opIndex4 = ops.indexOf(\"/\")\n        val opIndex5 = ops.indexOf(\"\
    **\")\n        val opIndex6 = ops.indexOf(\"//\")\n        val opIndex7 = ops.indexOf(\"\
    %\")\n        val opIndex8 = ops.indexOf(\"*\")\n        val opIndex9 = ops.indexOf(\"\
    +\")\n        val opIndex10 = ops.indexOf(\"+\")\n        val opIndex11 = ops.indexOf(\"\
    *\")\n        val opIndex12 = ops.indexOf(\"+\")\n        val opIndex13 = ops.indexOf(\"\
    *\")\n        val opIndex14 = ops.indexOf(\"*\")\n        val opIndex15 = ops.indexOf(\"\
    *\")\n        val opIndex16 = ops.indexOf(\"*\")\n        val opIndex17 = ops.indexOf(\"\
    *\")\n        val opIndex18 = ops.indexOf(\"*\")\n        val opIndex19 = ops.indexOf(\"\
    *\")\n        val opIndex20 = ops.indexOf(\"*\")\n        val opIndex21 = ops.indexOf(\"\
    *\")\n        val opIndex22 = ops.indexOf(\"*\")\n        val opIndex23 = ops.indexOf(\"\
    *\")\n        val opIndex24 = ops.indexOf(\"*\")\n        val opIndex25 = ops.indexOf(\"\
    *\")\n        val opIndex26 = ops.indexOf(\"*\")\n        val opIndex27 = ops.indexOf(\"\
    *\")\n        val opIndex28 = ops.indexOf(\"*\")\n        val opIndex29 = ops.indexOf(\"\
    *\")\n        val opIndex30 = ops.indexOf(\"*\")\n        val opIndex31 = ops.indexOf(\"\
    *\")\n        val opIndex32 = ops.indexOf(\"*\")\n        val opIndex33 = ops.indexOf(\"\
    *\")\n        val opIndex34 = ops.indexOf(\"*\")\n        val opIndex35 = ops.indexOf(\"\
    *\")\n        val opIndex36 = ops.indexOf(\"*\")\n        val opIndex37 = ops.indexOf(\"\
    *\")\n        val opIndex38 = ops.indexOf(\"*\")\n        val opIndex39 = ops.indexOf(\"\
    *\")\n        val opIndex40 = ops.indexOf(\"*\")\n        val opIndex41 = ops.indexOf(\"\
    *\")\n        val opIndex42 = ops.indexOf(\"*\")\n        val opIndex43 = ops.indexOf(\"\
    *\")\n        val opIndex44 = ops.indexOf(\"", "        val ops = op.map(_.toUpperCase)\n\
    \        val opList = ops.toList\n        val operands = operand.map(_.toLong)\n\
    \        val operandList = operands.toList\n        val opLen = opList.size\n\
    \        val operandLen = operandList.size\n        val opIndex = ops.indexOf(\"\
    +\")\n        val opIndex2 = ops.indexOf(\"-\")\n        val opIndex3 = ops.indexOf(\"\
    *\")\n        val opIndex4 = ops.indexOf(\"/\")\n        val opIndex5 = ops.indexOf(\"\
    **\")\n        val opIndex6 = ops.indexOf(\"//\")\n        val opIndex7 = ops.indexOf(\"\
    %\")\n        val opIndex8 = ops.indexOf(\"*\")\n        val opIndex9 = ops.indexOf(\"\
    +\")\n        val opIndex10 = ops.indexOf(\"+\")\n        val opIndex11 = ops.indexOf(\"\
    -\")\n        val opIndex12 = ops.indexOf(\"*\")\n        val opIndex13 = ops.indexOf(\"\
    /\")\n        val opIndex14 = ops.indexOf(\"**\")\n        val opIndex15 = ops.indexOf(\"\
    //\")\n        val opIndex16 = ops.indexOf(\"%\")\n        val opIndex17 = ops.indexOf(\"\
    *\")\n        val opIndex18 = ops.indexOf(\"+\")\n        val opIndex19 = ops.indexOf(\"\
    -\")\n        val opIndex20 = ops.indexOf(\"*\")\n        val opIndex21 = ops.indexOf(\"\
    /\")\n        val opIndex22 = ops.indexOf(\"**\")\n        val opIndex23 = ops.indexOf(\"\
    //\")\n        val opIndex24 = ops.indexOf(\"%\")\n        val opIndex25 = ops.indexOf(\"\
    *\")\n        val opIndex26 = ops.indexOf(\"+\")\n        val opIndex27 = ops.indexOf(\"\
    -\")\n        val opIndex28 = ops.indexOf(\"*\")\n        val opIndex29 = ops.indexOf(\"\
    /\")\n        val opIndex30 = ops.indexOf(\"**\")\n        val opIndex31 = ops.indexOf(\"\
    //\")\n        val opIndex32 = ops.indexOf(\"%\")\n        val opIndex33 = ops.indexOf(\"\
    *\")\n        val opIndex34 = ops.indexOf(\"+\")\n        val opIndex35 = ops.indexOf(\"\
    -\")\n        val opIndex36 = ops.indexOf(\"*\")\n        val opIndex37 = ops.indexOf(\"\
    /\")\n        val opIndex38 = ops.indexOf(\"**\")\n        val opIndex39 = ops.indexOf(\"\
    //\")\n        val opIndex40 = ops.indexOf(\"%\")\n        val opIndex41 = ops.indexOf(\"\
    *\")\n        ", "        val ops = op.map(_.toLowerCase).toList\n        val\
    \ opList = ops.toList\n        val opLen = opList.size\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandList = operand.toList\n        val operandLen\
    \ = operandList.size\n        val operandLenMinusOne = operandLen - 1\n      \
    \  val op1 = opList(0)\n        val op2 = opList(1)\n        val op3 = opList(opLenMinusOne)\n\
    \        val op4 = opList(opLenMinusOne + 1)\n        val op5 = opList(opLenMinusOne\
    \ + 2)\n        val op6 = opList(opLenMinusOne + 3)\n        val op7 = opList(opLenMinusOne\
    \ + 4)\n        val op8 = opList(opLenMinusOne + 5)\n        val op9 = opList(opLenMinusOne\
    \ + 6)\n        val op10 = opList(opLenMinusOne + 7)\n        val op11 = opList(opLenMinusOne\
    \ + 8)\n        val op12 = opList(opLenMinusOne + 9)\n        val op13 = opList(opLenMinusOne\
    \ + 10)\n        val op14 = opList(opLenMinusOne + 11)\n        val op15 = opList(opLenMinusOne\
    \ + 12)\n        val op16 = opList(opLenMinusOne + 13)\n        val op17 = opList(opLenMinusOne\
    \ + 14)\n        val op18 = opList(opLenMinusOne + 15)\n        val op19 = opList(opLenMinusOne\
    \ + 16)\n        val op20 = opList(opLenMinusOne + 17)\n        val op21 = opList(opLenMinusOne\
    \ + 18)\n        val op22 = opList(opLenMinusOne + 19)\n        val op23 = opList(opLenMinusOne\
    \ + 20)\n        val op24 = opList(opLenMinusOne + 21)\n        val op25 = opList(opLenMinusOne\
    \ + 22)\n        val op26 = opList(opLenMinusOne + 23)\n        val op27 = opList(opLenMinusOne\
    \ + 24)\n        val op28 = opList(opLenMinusOne + 25)\n        val op29 = opList(opLenMinusOne\
    \ + 26)\n        val op30 = opList(opLenMinusOne + 27)\n        val op31 = opList(opLenMinusOne\
    \ + 28)", "        val ops = op.map(_.toLowerCase)\n        val opMap = ops.zip(operand).map(x\
    \ => (x._1, x._2)).toMap\n        val opList = ops.toList\n        val operandList\
    \ = operand.toList\n        val opLen = opList.size\n        val opLenMinusOne\
    \ = opLen - 1\n        val opLenMinusTwo = opLen - 2\n        val opLenMinusThree\
    \ = opLen - 3\n        val opLenMinusFour = opLen - 4\n        val opLenMinusFive\
    \ = opLen - 5\n        val opLenMinusSix = opLen - 6\n        val opLenMinusSeven\
    \ = opLen - 7\n        val opLenMinusEight = opLen - 8\n        val opLenMinusNine\
    \ = opLen - 9\n        val opLenMinusTen = opLen - 10\n        val opLenMinusEleven\
    \ = opLen - 11\n        val opLenMinusTwelve = opLen - 12\n        val opLenMinusThirteen\
    \ = opLen - 13\n        val opLenMinusFourteen = opLen - 14\n        val opLenMinusFifteen\
    \ = opLen - 15\n        val opLenMinusSixteen = opLen - 16\n        val opLenMinusSeventeen\
    \ = opLen - 17\n        val opLenMinusEighteen = opLen - 18\n        val opLenMinusNineteen\
    \ = opLen - 19\n        val opLenMinusTwenty = opLen - 20\n        val opLenMinusThirty\
    \ = opLen - 30\n        val opLenMinusFourty = opLen - 40\n        val opLenMinusFifty\
    \ = opLen - 50\n        val opLenMinusSixty = opLen - 60\n        val opLenMinusSeventy\
    \ = opLen - 70\n        val opLenMinusEighty = opLen - 80\n        val opLenMinusNinety\
    \ = opLen - 90\n        val opLenMinusOneHundred = opLen - 100\n        val opLenMinusTwoHundred\
    \ = opLen - 200\n        val opLenMinusThreeHundred = opLen - 300\n        val\
    \ opLenMinusFourHundred = opLen - 400\n        val opLenMinusFiveHundred = ",
  "        val ops = op.map(_.toUpperCase)\n        val opList = ops.toList\n    \
    \    val opLen = opList.size\n        val operands = operand.map(_.toLong)\n \
    \       val operandLen = operands.size\n        val op1 = opList(0)\n        val\
    \ op2 = opList(1)\n        val op3 = opList(2)\n        val op4 = opList(3)\n\
    \        val op5 = opList(4)\n        val op6 = opList(5)\n        val op7 = opList(6)\n\
    \        val op8 = opList(7)\n        val op9 = opList(8)\n        val op10 =\
    \ opList(9)\n        val op11 = opList(10)\n        val op12 = opList(11)\n  \
    \      val op13 = opList(12)\n        val op14 = opList(13)\n        val op15\
    \ = opList(14)\n        val op16 = opList(15)\n        val op17 = opList(16)\n\
    \        val op18 = opList(17)\n        val op19 = opList(18)\n        val op20\
    \ = opList(19)\n        val op21 = opList(20)\n        val op22 = opList(21)\n\
    \        val op23 = opList(22)\n        val op24 = opList(23)\n        val op25\
    \ = opList(24)\n        val op26 = opList(25)\n        val op27 = opList(26)\n\
    \        val op28 = opList(27)\n        val op29 = opList(28)\n        val op30\
    \ = opList(29)\n        val op31 = opList(30)\n        val op32 = opList(31)\n\
    \        val op33 = opList(32)\n        val op34 = opList(33)\n        val op35\
    \ = opList(34)\n        val op36 = opList(35)\n        val op37 = opList(36)\n\
    \        val op38 = opList(37)\n        val op39 = opList(38)\n        val op40\
    \ = opList(39)\n        val op41 = opList(40)\n        val op42 = opList(41)\n\
    \        val op43 = opList(42)\n        val op44 = opList(43)\n        val op45\
    \ = opList(44)\n        val op46 = opList(45)\n        val op47 = opList(46)\n\
    \        val op48 = opList(47)\n        val op49 = opList(48)\n        val op50\
    \ = opList(49)\n        val op5", "        val ops = op.map(x => x.toChar)\n \
    \       val opList = ops.toList\n        val operands = operand.toList\n     \
    \   val operandList = operands.toList\n        val opLen = opList.size\n     \
    \   val operandLen = operandList.size\n        val opLenMinusOne = opLen - 1\n\
    \        val operandLenMinusOne = operandLen - 1\n        val opLenMinusTwo =\
    \ opLen - 2\n        val operandLenMinusTwo = operandLen - 2\n        val opLenMinusThree\
    \ = opLen - 3\n        val operandLenMinusThree = operandLen - 3\n        val\
    \ opLenMinusFour = opLen - 4\n        val operandLenMinusFour = operandLen - 4\n\
    \        val opLenMinusFive = opLen - 5\n        val operandLenMinusFive = operandLen\
    \ - 5\n        val opLenMinusSix = opLen - 6\n        val operandLenMinusSix =\
    \ operandLen - 6\n        val opLenMinusSeven = opLen - 7\n        val operandLenMinusSeven\
    \ = operandLen - 7\n        val opLenMinusEight = opLen - 8\n        val operandLenMinusEight\
    \ = operandLen - 8\n        val opLenMinusNine = opLen - 9\n        val operandLenMinusNine\
    \ = operandLen - 9\n        val opLenMinusTen = opLen - 10\n        val operandLenMinusTen\
    \ = operandLen - 10\n        val opLenMinusEleven = opLen - 11\n        val operandLenMinusEleven\
    \ = operandLen - 11\n        val opLenMinusTwelve = opLen - 12\n        val operandLenMinusTwelve\
    \ = operandLen - 12\n        val opLenMinusThirteen = opLen - 13\n        val\
    \ operandLenMinusThirteen = operandLen - 13\n        val opLenMinusFourteen =\
    \ opLen - 14\n        val operandLenMinusFourteen = operandLen - 14\n        val\
    \ opLenMinusFifteen = opLen - 15\n        val operandLenMinusFifteen = operandLen\
    \ - 15\n        val opLenMinusSixteen = opLen - 16\n        val operandLenMinusSixteen\
    \ = operandLen - 16\n        val opLenMinusSeventeen = opLen - 17\n        ",
  "        var result = 0L\n        val operator = op.mkString(\"+\")\n        val\
    \ operands = operand.map(_.toLong)\n        val operators = operator.split(\"\\\
    \\+\")\n        val operands2 = operands.map(_.toLong)\n        val operators2\
    \ = operators.map(_.toUpperCase)\n        val operatorIndex = 0\n        val operandIndex\
    \ = 0\n        while(operatorIndex < operators2.length && operandIndex < operands2.length)\
    \ {\n            val operator = operators(operatorIndex)\n            val operand\
    \ = operands(operandIndex)\n            val operatorIndex = operatorIndex + 1\n\
    \            val operandIndex = operandIndex + 1\n            val value = if (operator\
    \ == \"+\") {\n                operand + operands(operandIndex)\n            }\
    \ else if (operator == \"-\") {\n                operand - operands(operandIndex)\n\
    \            } else if (operator == \"*\") {\n                operand * operands(operandIndex)\n\
    \            } else if (operator == \"//\") {\n                operand / operands(operandIndex)\n\
    \            } else if (operator == \"**\") {\n                operand ** operands(operandIndex)\n\
    \            }\n            result = result.toLong + value\n        }\n      \
    \  result", "        val opList = op.map(_.toLowerCase).toList\n        val operandList\
    \ = operand.map(_.toLong).toList\n        val opLength = opList.length\n     \
    \   val operandLength = operandList.length\n        val opIndex = 0\n        val\
    \ operandIndex = 0\n        val result = operand(0)\n        while(operandIndex\
    \ < operandLength) {\n            val op1 = opList(opIndex)\n            val op2\
    \ = opList(opIndex + 1)\n            val op3 = opList(opIndex + 2)\n         \
    \   val op4 = opList(opIndex + 3)\n            val op5 = opList(opIndex + 4)\n\
    \            val op6 = opList(opIndex + 5)\n            val op7 = opList(opIndex\
    \ + 6)\n            val op8 = opList(opIndex + 7)\n            val op9 = opList(opIndex\
    \ + 8)\n            val op10 = opList(opIndex + 9)\n            val op11 = opList(opIndex\
    \ + 10)\n            val op12 = opList(opIndex + 11)\n            val op13 = opList(opIndex\
    \ + 12)\n            val op14 = opList(opIndex + 13)\n            val op15 = opList(opIndex\
    \ + 14)\n            val op16 = opList(opIndex + 15)\n            val op17 = opList(opIndex\
    \ + 16)\n            val op18 = opList(opIndex + 17)\n            val op19 = opList(opIndex\
    \ + 18)\n            val op20 = opList(opIndex + 19)\n            val op21 = opList(opIndex\
    \ + 20)\n            val op22 = opList(opIndex + 21)\n            val op23 = opList(opIndex\
    \ + 22)\n            val op24 = opList(opIndex + 23)\n            val op25 = opList(opIndex\
    \ + 24)\n            val op26 = opList(opIndex + 25)\n            val op27 = opList(opIndex\
    \ + 26)\n            val op28 = opList(opIndex + 27)\n            val op29 = opList(opIndex\
    \ + 28)\n            val op30 = opList(opIndex + 29)\n            val op31 = opList(opIndex\
    \ + 30)\n            val op32 = opList(opIndex + 31)\n            val op33 = opList(opIndex\
    \ + 32)\n            val op34 = opList(opIndex + 33)\n            val op35 = opList(opIndex\
    \ + 34)\n            val op36 = opList(opIndex + 35)\n            val op37 = opList(opIndex\
    \ + 36)\n            val op38 = ", "        val opList = op.map(_.toUpperCase)\n\
    \        val opListLength = opList.length\n        val operandList = operand.map(_.toLong)\n\
    \        val operandListLength = operandList.length\n        val result = operandList(0)\n\
    \        val op1 = opList(0)\n        val op2 = opList(1)\n        val op3 = opList(2)\n\
    \        val op4 = opList(3)\n        val op5 = opList(4)\n        val op6 = opList(5)\n\
    \        val op7 = opList(6)\n        val op8 = opList(7)\n        val op9 = opList(8)\n\
    \        val op10 = opList(9)\n        val op11 = opList(10)\n        val op12\
    \ = opList(11)\n        val op13 = opList(12)\n        val op14 = opList(13)\n\
    \        val op15 = opList(14)\n        val op16 = opList(15)\n        val op17\
    \ = opList(16)\n        val op18 = opList(17)\n        val op19 = opList(18)\n\
    \        val op20 = opList(19)\n        val op21 = opList(20)\n        val op22\
    \ = opList(21)\n        val op23 = opList(22)\n        val op24 = opList(23)\n\
    \        val op25 = opList(24)\n        val op26 = opList(25)\n        val op27\
    \ = opList(26)\n        val op28 = opList(27)\n        val op29 = opList(28)\n\
    \        val op30 = opList(29)\n        val op31 = opList(30)\n        val op32\
    \ = opList(31)\n        val op33 = opList(32)\n        val op34 = opList(33)\n\
    \        val op35 = opList(34)\n        val op36 = opList(35)\n        val op37\
    \ = opList(36)\n        val op38 = opList(37)\n        val op39 = opList(38)\n\
    \        val op40 = opList(39)\n        val op41 = opList(40)\n        val op42\
    \ = opList(41)\n        val op43 = opList(42)\n        val op44 = opList(43)\n\
    \        val op45 = opList(44)\n        val op46 = opList(45)\n        val op47\
    \ = opList(46)\n        val op48 = opList(47)\n        val op49 = opList(48)\n\
    \        val op50 = opList(49)\n        val op5", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toLong).toList\n        val opLen = opList.size\n\
    \        val operandLen = operandList.size\n        val opIndex = opList.indexOf(\"\
    +\")\n        val opLenMinusOne = opLen - 1\n        val opLenMinusOneIndex =\
    \ opLen - 2\n        val opLenMinusOneIndex2 = opLen - 3\n        val opLenMinusOneIndex3\
    \ = opLen - 4\n        val opLenMinusOneIndex4 = opLen - 5\n        val opLenMinusOneIndex5\
    \ = opLen - 6\n        val opLenMinusOneIndex6 = opLen - 7\n        val opLenMinusOneIndex7\
    \ = opLen - 8\n        val opLenMinusOneIndex8 = opLen - 9\n        val opLenMinusOneIndex9\
    \ = opLen - 10\n        val opLenMinusOneIndex10 = opLen - 11\n        val opLenMinusOneIndex11\
    \ = opLen - 12\n        val opLenMinusOneIndex12 = opLen - 13\n        val opLenMinusOneIndex13\
    \ = opLen - 14\n        val opLenMinusOneIndex14 = opLen - 15\n        val opLenMinusOneIndex15\
    \ = opLen - 16\n        val opLenMinusOneIndex16 = opLen - 17\n        val opLenMinusOneIndex17\
    \ = opLen - 18\n        val opLenMinusOneIndex18 = opLen - 19\n        val opLenMinusOneIndex19\
    \ = opLen - 20\n        val opLenMinusOneIndex20 = opLen - 21\n        val opLenMinusOneIndex21\
    \ = opLen - 22\n        val opLenMinusOneIndex22 = opLen - 23\n        val opLenMinusOneIndex23\
    \ = opLen - 24\n        val opLenMinusOneIndex24 = opLen - 25\n        val opLenMinusOneIndex25\
    \ = opLen - 26\n        val opLenMinusOneIndex26 = opLen - 27\n        val opLenMinusOneIndex27\
    \ = opLen - 28\n        val opLenMinusOneIndex28 = opLen - 29\n        val opLenMinusOneIndex29\
    \ = opLen - 30\n        val opLenMinusOneIndex30 = opLen - 31\n        val opLenMinusOneIndex31\
    \ = op", "        val opList = op.mkString(\"+\")\n        val opList2 = op.mkString(\"\
    *\")\n        val opList3 = op.mkString(\"//\")\n        val opList4 = op.mkString(\"\
    **\")\n        val opList5 = op.mkString(\"+\")\n        val opList6 = op.mkString(\"\
    *\")\n        val opList7 = op.mkString(\"//\")\n        val opList8 = op.mkString(\"\
    **\")\n        val opList9 = op.mkString(\"+\")\n        val opList10 = op.mkString(\"\
    *\")\n        val opList11 = op.mkString(\"//\")\n        val opList12 = op.mkString(\"\
    **\")\n        val opList13 = op.mkString(\"+\")\n        val opList14 = op.mkString(\"\
    *\")\n        val opList15 = op.mkString(\"//\")\n        val opList16 = op.mkString(\"\
    **\")\n        val opList17 = op.mkString(\"+\")\n        val opList18 = op.mkString(\"\
    *\")\n        val opList19 = op.mkString(\"//\")\n        val opList20 = op.mkString(\"\
    **\")\n        val opList21 = op.mkString(\"+\")\n        val opList22 = op.mkString(\"\
    *\")\n        val opList23 = op.mkString(\"//\")\n        val opList24 = op.mkString(\"\
    **\")\n        val opList25 = op.mkString(\"+\")\n        val opList26 = op.mkString(\"\
    *\")\n        val opList27 = op.mkString(\"//\")\n        val opList28 = op.mkString(\"\
    **\")\n        val opList29 = op.mkString(\"+\")\n        val opList30 = op.mkString(\"\
    *\")\n        val opList31 = op.mkString(\"//\")\n        val opList32 = op.mkString(\"\
    **\")\n        val opList33 = op.mkString(\"+\")\n        val opList34 = op.mkString(\"\
    *\")\n        val opList35 = op.mkString(\"//\")\n        val opList36 = op.mkString(\"\
    **\")\n        val opList37 = op.mkString(\"+\")\n        val opList38 = op.mkString(\"\
    *\")\n        val opList39 = op.mkString(\"//\")\n        val opList40 = op.mkString(\"\
    **\")\n        val opList41 = op.mkString(\"+\")\n        val opList42 = op.mkString(\"\
    *\")\n        val opList43 = op.mkString(\"//\")\n        val opList44 = op.mkString(\"\
    **\")\n        val opList45 = op.mkString(\"+\")\n        val opList46 = op.mk",
  "        val ops = op.map(x => x.toChar)\n        val op1 = ops.head\n        val\
    \ op2 = ops.last\n        val op1Int = operand.head\n        val op2Int = operand.last\n\
    \        val op1Int = operand.head\n        val op2Int = operand.last\n      \
    \  val op1Int = operand.head\n        val op2Int = operand.last\n        val op1Int\
    \ = operand.head\n        val op2Int = operand.last\n        val op1Int = operand.head\n\
    \        val op2Int = operand.last\n        val op1Int = operand.head\n      \
    \  val op2Int = operand.last\n        val op1Int = operand.head\n        val op2Int\
    \ = operand.last\n        val op1Int = operand.head\n        val op2Int = operand.last\n\
    \        val op1Int = operand.head\n        val op2Int = operand.last\n      \
    \  val op1Int = operand.head\n        val op2Int = operand.last\n        val op1Int\
    \ = operand.head\n        val op2Int = operand.last\n        val op1Int = operand.head\n\
    \        val op2Int = operand.last\n        val op1Int = operand.head\n      \
    \  val op2Int = operand.last\n        val op1Int = operand.head\n        val op2Int\
    \ = operand.last\n        val op1Int = operand.head\n        val op2Int = operand.last\n\
    \        val op1Int = operand.head\n        val op2Int = operand.last\n      \
    \  val op1Int = operand.head\n        val op2Int = operand.last\n        val op1Int\
    \ = operand.head\n        val op2Int = operand.last\n        val op1Int = operand.head\n\
    \        val op2Int = operand.last\n        val op1Int = operand.head\n      \
    \  val op2Int = operand.last\n        val op1Int = operand.head\n        val op2Int\
    \ = operand.last\n        val op1Int = operand.head\n        val op2Int = operand.last\n\
    \        val op1Int = operand.head\n        val op2Int = operand.last\n      \
    \  val op1Int = operand.head\n        val op2Int = operand.last\n        val op1In",
  "        val opList = op.mkString(\"+\")\n        val opList2 = op.mkString(\"*\"\
    )\n        val opList3 = op.mkString(\"//\")\n        val opList4 = op.mkString(\"\
    **\")\n        val opList5 = op.mkString(\"+\")\n        val opList6 = op.mkString(\"\
    *\")\n        val opList7 = op.mkString(\"//\")\n        val opList8 = op.mkString(\"\
    **\")\n        val opList9 = op.mkString(\"+\")\n        val opList10 = op.mkString(\"\
    *\")\n        val opList11 = op.mkString(\"//\")\n        val opList12 = op.mkString(\"\
    **\")\n        val opList13 = op.mkString(\"+\")\n        val opList14 = op.mkString(\"\
    *\")\n        val opList15 = op.mkString(\"//\")\n        val opList16 = op.mkString(\"\
    **\")\n        val opList17 = op.mkString(\"+\")\n        val opList18 = op.mkString(\"\
    *\")\n        val opList19 = op.mkString(\"//\")\n        val opList20 = op.mkString(\"\
    **\")\n        val opList21 = op.mkString(\"+\")\n        val opList22 = op.mkString(\"\
    *\")\n        val opList23 = op.mkString(\"//\")\n        val opList24 = op.mkString(\"\
    **\")\n        val opList25 = op.mkString(\"+\")\n        val opList26 = op.mkString(\"\
    *\")\n        val opList27 = op.mkString(\"//\")\n        val opList28 = op.mkString(\"\
    **\")\n        val opList29 = op.mkString(\"+\")\n        val opList30 = op.mkString(\"\
    *\")\n        val opList31 = op.mkString(\"//\")\n        val opList32 = op.mkString(\"\
    **\")\n        val opList33 = op.mkString(\"+\")\n        val opList34 = op.mkString(\"\
    *\")\n        val opList35 = op.mkString(\"//\")\n        val opList36 = op.mkString(\"\
    **\")\n        val opList37 = op.mkString(\"+\")\n        val opList38 = op.mkString(\"\
    *\")\n        val opList39 = op.mkString(\"//\")\n        val opList40 = op.mkString(\"\
    **\")\n        val opList41 = op.mkString(\"+\")\n        val opList42 = op.mkString(\"\
    *\")\n        val opList43 = op.mkString(\"//\")\n        val opList44 = op.mkString(\"\
    **\")\n        val opList45 = op.mkString(\"+\")\n        val opList46 = op.mk",
  "        val ops = op.map(_.toLowerCase)\n        val opMap = ops.map(o => (o, 1)).toMap\n\
    \        val operands = operand.map(_.toLong)\n        val operandMap = operands.map(o\
    \ => (o, 1)).toMap\n        val opKeys = ops.toSet\n        val operandKeys =\
    \ operands.toSet\n        val opKeySet = opKeys.toSet\n        val operandKeySet\
    \ = operandKeys.toSet\n        val opKeysSet = opKeys.toSet\n        val operandKeysSet\
    \ = operandKeys.toSet\n        val opKeysSet = opKeys.toSet\n        val operandKeysSet\
    \ = operandKeys.toSet\n        val opKeysSet = opKeys.toSet\n        val operandKeysSet\
    \ = operandKeys.toSet\n        val opKeysSet = opKeys.toSet\n        val operandKeysSet\
    \ = operandKeys.toSet\n        val opKeysSet = opKeys.toSet\n        val operandKeysSet\
    \ = operandKeys.toSet\n        val opKeysSet = opKeys.toSet\n        val operandKeysSet\
    \ = operandKeys.toSet\n        val opKeysSet = opKeys.toSet\n        val operandKeysSet\
    \ = operandKeys.toSet\n        val opKeysSet = opKeys.toSet\n        val operandKeysSet\
    \ = operandKeys.toSet\n        val opKeysSet = opKeys.toSet\n        val operandKeysSet\
    \ = operandKeys.toSet\n        val opKeysSet = opKeys.toSet\n        val operandKeysSet\
    \ = operandKeys.toSet\n        val opKeysSet = opKeys.toSet\n        val operandKeysSet\
    \ = operandKeys.toSet\n        val opKeysSet = opKeys.toSet\n        val operandKeysSet\
    \ = operandKeys.toSet\n        val opKeysSet = opKeys.toSet\n        val operandKeysSet\
    \ = operandKeys.toSet\n        val opKeysSet = opKeys.toSet\n        val operandKeysSet\
    \ = operandKeys.toSet\n        val opKeysSet = opKeys.toSet\n        val operandKeysSet\
    \ = operandKeys.toSet\n        val opKeysSet = opKeys.toSet\n        val operandKeysSet\
    \ = operandKeys.toSet\n        val opKeysSet = opKeys.toSet\n        val operandKeysSet\
    \ = operandKeys.toSet\n        val opKeysSet = opKeys.toSet\n        val ", " \
    \       val opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toInt).toList\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val opMap2 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap2 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap3 = new mutable.HashMap[String, Long]()\n        val operandMap3\
    \ = new mutable.HashMap[String, Long]()\n        val opMap4 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap4 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap5 = new mutable.HashMap[String, Long]()\n        val operandMap5\
    \ = new mutable.HashMap[String, Long]()\n        val opMap6 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap6 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap7 = new mutable.HashMap[String, Long]()\n        val operandMap7\
    \ = new mutable.HashMap[String, Long]()\n        val opMap8 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap8 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap9 = new mutable.HashMap[String, Long]()\n        val operandMap9\
    \ = new mutable.HashMap[String, Long]()\n        val opMap10 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap10 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap11 = new mutable.HashMap[String, Long]()\n        val operandMap11\
    \ = new mutable.HashMap[String, Long]()\n        val opMap12 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap12 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap13 = new mutable.HashMap[String, Long]()\n        val operandMap13\
    \ = new mutable.HashMap[String, Long]()\n        val opMap14 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap14 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap15 = new mutable.HashMap[String, Long]()\n        val operandMap15\
    \ = new mutable.HashMap[String, Long]()\n        val opMap16 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap16 = new mut", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toLong).toList\n        val opLen = opList.size\n\
    \        val operandLen = operandList.size\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val opMap2 = new mutable.HashMap[String, Long]()\n        val operandMap2\
    \ = new mutable.HashMap[String, Long]()\n        val opMap3 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap3 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap4 = new mutable.HashMap[String, Long]()\n        val operandMap4\
    \ = new mutable.HashMap[String, Long]()\n        val opMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap5 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap6 = new mutable.HashMap[String, Long]()\n        val operandMap6\
    \ = new mutable.HashMap[String, Long]()\n        val opMap7 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap7 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap8 = new mutable.HashMap[String, Long]()\n        val operandMap8\
    \ = new mutable.HashMap[String, Long]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap9 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap10 = new mutable.HashMap[String, Long]()\n        val operandMap10\
    \ = new mutable.HashMap[String, Long]()\n        val opMap11 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap11 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap12 = new mutable.HashMap[String, Long]()\n        val operandMap12\
    \ = new mutable.HashMap[String, Long]()\n        val opMap13 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap13 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap14 = new mutable.HashMap[String, Long]()\n        val operandMap14\
    \ = new mutable.HashMap[String, Long]()\n        val opMap15 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap15 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap16 = new mutable.HashMap[String, Long]()\n        val operandMap16\
    \ = new mut", "        val opList = op.map(_.toUpperCase)\n        val opListLength\
    \ = opList.length\n        val operandList = operand.map(_.toLong)\n        val\
    \ operandListLength = operandList.length\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n        ",
  "        val ops = op.map(_.toLowerCase)\n        val opList = ops.toList\n    \
    \    val operands = operand.toList\n        val opLen = opList.size\n        val\
    \ opLenMinusOne = opLen - 1\n        val operandLen = operands.size - 1\n    \
    \    val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne = opLen\
    \ - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1", "        val opList = op.map(_.toUpperCase)\n        val opLen\
    \ = opList.size\n        val operandList = operand.map(_.toLong)\n        val\
    \ operandLen = operandList.size\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val result = new mutable.HashMap[String, Long]()\n        val opMapKeys =\
    \ opList.map(_.toUpperCase)\n        val operandMapKeys = operandList.map(_.toLong)\n\
    \        val opMapValues = opList.map(_.toUpperCase)\n        val operandMapValues\
    \ = operandList.map(_.toLong)\n        val opMapKeySet = opMapKeys.toSet\n   \
    \     val operandMapKeySet = operandMapKeys.toSet\n        val opMapValueSet =\
    \ opMapValues.toSet\n        val operandMapValueSet = operandMapValues.toSet\n\
    \        val opMapKeysSet = opMapKeys.toSet\n        val operandMapKeysSet = operandMapKeys.toSet\n\
    \        val opMapValueSet = opMapValues.toSet\n        val operandMapValueSet\
    \ = operandMapValues.toSet\n        val opMapKeysSet = opMapKeys.toSet\n     \
    \   val operandMapKeysSet = operandMapKeys.toSet\n        val opMapValueSet =\
    \ opMapValues.toSet\n        val operandMapValueSet = operandMapValues.toSet\n\
    \        val opMapKeysSet = opMapKeys.toSet\n        val operandMapKeysSet = operandMapKeys.toSet\n\
    \        val opMapValueSet = opMapValues.toSet\n        val operandMapValueSet\
    \ = operandMapValues.toSet\n        val opMapKeysSet = opMapKeys.toSet\n     \
    \   val operandMapKeysSet = operandMapKeys.toSet\n        val opMapValueSet =\
    \ opMapValues.toSet\n        val operandMapValueSet = operandMapValues.toSet\n\
    \        val opMapKeysSet = opMapKeys.toSet\n        val operandMapKeysSet = operandMapKeys.toSet\n\
    \        val opMapValueSet = opMapValues.toSet\n        val operandMapValueSet\
    \ = operandMapValues.toSet\n        val opMapKeysSet = opMapKeys.toSet\n     \
    \   val operandMapKeysSet = operandMapKeys.toSet\n        val opMapValueSet =\
    \ opMapValues.to", "        val opList = op.mkString(\"+\")\n        val opListLength\
    \ = opList.length\n        val operandList = operand.mkString(\"+\")\n       \
    \ val operandListLength = operandList.length\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = ", "        val ops = op.map(_.toLowerCase).toList\n\
    \        val opLen = ops.size\n        val operands = operand.map(_.toLong).toList\n\
    \        val operandLen = operands.size\n        val op1 = ops(0)\n        val\
    \ op2 = ops(1)\n        val op3 = ops(2)\n        val op4 = ops(3)\n        val\
    \ op5 = ops(4)\n        val op6 = ops(5)\n        val op7 = ops(6)\n        val\
    \ op8 = ops(7)\n        val op9 = ops(8)\n        val op10 = ops(9)\n        val\
    \ op11 = ops(10)\n        val op12 = ops(11)\n        val op13 = ops(12)\n   \
    \     val op14 = ops(13)\n        val op15 = ops(14)\n        val op16 = ops(15)\n\
    \        val op17 = ops(16)\n        val op18 = ops(17)\n        val op19 = ops(18)\n\
    \        val op20 = ops(19)\n        val op21 = ops(20)\n        val op22 = ops(21)\n\
    \        val op23 = ops(22)\n        val op24 = ops(23)\n        val op25 = ops(24)\n\
    \        val op26 = ops(25)\n        val op27 = ops(26)\n        val op28 = ops(27)\n\
    \        val op29 = ops(28)\n        val op30 = ops(29)\n        val op31 = ops(30)\n\
    \        val op32 = ops(31)\n        val op33 = ops(32)\n        val op34 = ops(33)\n\
    \        val op35 = ops(34)\n        val op36 = ops(35)\n        val op37 = ops(36)\n\
    \        val op38 = ops(37)\n        val op39 = ops(38)\n        val op40 = ops(39)\n\
    \        val op41 = ops(40)\n        val op42 = ops(41)\n        val op43 = ops(42)\n\
    \        val op44 = ops(43)\n        val op45 = ops(44)\n        val op46 = ops(45)\n\
    \        val op47 = ops(46)\n        val op48 = ops(47)\n        val op49 = ops(48)\n\
    \        val op50 = ops(49)\n        val op51 = ops(50)\n        val op", "  \
    \      val ops = op.map(_.toUpperCase)\n        val opNames = ops.map(_.toString)\n\
    \        val opNamesMap = ops.map(_.toUpperCase).zip(ops).toMap\n        val opNamesMap2\
    \ = ops.map(_.toUpperCase).zip(ops).toMap\n        val opNamesMap3 = ops.map(_.toUpperCase).zip(ops).toMap\n\
    \        val opNamesMap4 = ops.map(_.toUpperCase).zip(ops).toMap\n        val\
    \ opNamesMap5 = ops.map(_.toUpperCase).zip(ops).toMap\n        val opNamesMap6\
    \ = ops.map(_.toUpperCase).zip(ops).toMap\n        val opNamesMap7 = ops.map(_.toUpperCase).zip(ops).toMap\n\
    \        val opNamesMap8 = ops.map(_.toUpperCase).zip(ops).toMap\n        val\
    \ opNamesMap9 = ops.map(_.toUpperCase).zip(ops).toMap\n        val opNamesMap10\
    \ = ops.map(_.toUpperCase).zip(ops).toMap\n        val opNamesMap11 = ops.map(_.toUpperCase).zip(ops).toMap\n\
    \        val opNamesMap12 = ops.map(_.toUpperCase).zip(ops).toMap\n        val\
    \ opNamesMap13 = ops.map(_.toUpperCase).zip(ops).toMap\n        val opNamesMap14\
    \ = ops.map(_.toUpperCase).zip(ops).toMap\n        val opNamesMap15 = ops.map(_.toUpperCase).zip(ops).toMap\n\
    \        val opNamesMap16 = ops.map(_.toUpperCase).zip(ops).toMap\n        val\
    \ opNamesMap17 = ops.map(_.toUpperCase).zip(ops).toMap\n        val opNamesMap18\
    \ = ops.map(_.toUpperCase).zip(ops).toMap\n        val opNamesMap19 = ops.map(_.toUpperCase).zip(ops).toMap\n\
    \        val opNamesMap20 = ops.map(_.toUpperCase).zip(ops).toMap\n        val\
    \ opNamesMap21 = ops.map(_.toUpperCase).zip(ops).toMap\n        val opNamesMap22\
    \ = ops.map(_.toUpperCase).zip(ops).toMap\n        val opNamesMap23 = ops.map(_.toUpperCase).zip(ops).toMap\n\
    \        val opNamesMap24 = ops.map(_.toUpperCase).zip(ops).toMap\n        val\
    \ opNamesMap25 = ops.map(_.toUpperCase).zip(ops).toMap\n        val op", "   \
    \     val ops = op.map(_.toLowerCase)\n        val opLen = ops.size\n        val\
    \ opList = ops.toList\n        val operandList = operand.toList\n        val operandLen\
    \ = operandList.size\n        val operandList = operandList.toList\n        val\
    \ operand = operandList(0)\n        val operator = opList(0)\n        val operand1\
    \ = operandList(1)\n        val operand2 = operandList(2)\n        val operand3\
    \ = operandList(3)\n        val operand4 = operandList(4)\n        val operand5\
    \ = operandList(5)\n        val operand6 = operandList(6)\n        val operand7\
    \ = operandList(7)\n        val operand8 = operandList(8)\n        val operand9\
    \ = operandList(9)\n        val operand10 = operandList(10)\n        val operand11\
    \ = operandList(11)\n        val operand12 = operandList(12)\n        val operand13\
    \ = operandList(13)\n        val operand14 = operandList(14)\n        val operand15\
    \ = operandList(15)\n        val operand16 = operandList(16)\n        val operand17\
    \ = operandList(17)\n        val operand18 = operandList(18)\n        val operand19\
    \ = operandList(19)\n        val operand20 = operandList(20)\n        val operand21\
    \ = operandList(21)\n        val operand22 = operandList(22)\n        val operand23\
    \ = operandList(23)\n        val operand24 = operandList(24)\n        val operand25\
    \ = operandList(25)\n        val operand26 = operandList(26)\n        val operand27\
    \ = operandList(27)\n        val operand28 = operandList(28)\n        val operand29\
    \ = operandList(29)\n        val operand30 = operandList(30)\n        val operand31\
    \ = operandList(31)\n        val operand32 = operandList(32)\n        val operand33\
    \ = operandList(33)\n        val operand34 = operandList(34)\n        val operand35\
    \ = operandList(35)\n        val operand36 = operandList(36)\n        val operand37\
    \ = operandList(37)\n        val operand38 = operandList(38)\n        val operand39\
    \ = operandList(39)\n        val operand40 = operandList(40)\n        val operand41\
    \ = operandList(41)\n        val operand42 = operandList(42)\n        val operand43\
    \ = operandList(43)\n        val operand44 = operandList(44)\n        val operand45\
    \ = operandList(45)\n        val operand46 = operandList(46)\n        val operand47\
    \ = operandList(47)\n        val operand48 = operandList(48)\n        val operand",
  "        val opList = op.map(_.toUpperCase)\n        val opListLength = opList.length\n\
    \        val operandList = operand.map(_.toLong)\n        val operandListLength\
    \ = operandList.length\n        val result = operandList(0)\n        val op1 =\
    \ opList(0)\n        val op2 = opList(1)\n        val op3 = opList(2)\n      \
    \  val op4 = opList(3)\n        val op5 = opList(4)\n        val op6 = opList(5)\n\
    \        val op7 = opList(6)\n        val op8 = opList(7)\n        val op9 = opList(8)\n\
    \        val op10 = opList(9)\n        val op11 = opList(10)\n        val op12\
    \ = opList(11)\n        val op13 = opList(12)\n        val op14 = opList(13)\n\
    \        val op15 = opList(14)\n        val op16 = opList(15)\n        val op17\
    \ = opList(16)\n        val op18 = opList(17)\n        val op19 = opList(18)\n\
    \        val op20 = opList(19)\n        val op21 = opList(20)\n        val op22\
    \ = opList(21)\n        val op23 = opList(22)\n        val op24 = opList(23)\n\
    \        val op25 = opList(24)\n        val op26 = opList(25)\n        val op27\
    \ = opList(26)\n        val op28 = opList(27)\n        val op29 = opList(28)\n\
    \        val op30 = opList(29)\n        val op31 = opList(30)\n        val op32\
    \ = opList(31)\n        val op33 = opList(32)\n        val op34 = opList(33)\n\
    \        val op35 = opList(34)\n        val op36 = opList(35)\n        val op37\
    \ = opList(36)\n        val op38 = opList(37)\n        val op39 = opList(38)\n\
    \        val op40 = opList(39)\n        val op41 = opList(40)\n        val op42\
    \ = opList(41)\n        val op43 = opList(42)\n        val op44 = opList(43)\n\
    \        val op45 = opList(44)\n        val op46 = opList(45)\n        val op47\
    \ = opList(46)\n        val op48 = opList(47)\n        val op49 = opList(48)\n\
    \        val op50 = opList(49)\n        val op5", "        val opList = op.map(_.toUpperCase)\n\
    \        val opLen = opList.length\n        val operandList = operand.map(_.toLong)\n\
    \        val operandLen = operandList.length\n        val result = operandList.foldLeft(0L)\
    \ { (acc, x) => \n            val opIndex = opList.indexOf(\"*\")\n          \
    \  val opVal = opIndex == -1 ? 1 : opList.length\n            val opVal2 = opIndex\
    \ == -1 ? 1 : opList.length\n            val opVal3 = opIndex == -1 ? 1 : opList.length\n\
    \            val opVal4 = opIndex == -1 ? 1 : opList.length\n            val opVal5\
    \ = opIndex == -1 ? 1 : opList.length\n            val opVal6 = opIndex == -1\
    \ ? 1 : opList.length\n            val opVal7 = opIndex == -1 ? 1 : opList.length\n\
    \            val opVal8 = opIndex == -1 ? 1 : opList.length\n            val opVal9\
    \ = opIndex == -1 ? 1 : opList.length\n            val opVal10 = opIndex == -1\
    \ ? 1 : opList.length\n            val opVal11 = opIndex == -1 ? 1 : opList.length\n\
    \            val opVal12 = opIndex == -1 ? 1 : opList.length\n            val\
    \ opVal13 = opIndex == -1 ? 1 : opList.length\n            val opVal14 = opIndex\
    \ == -1 ? 1 : opList.length\n            val opVal15 = opIndex == -1 ? 1 : opList.length\n\
    \            val opVal16 = opIndex == -1 ? 1 : opList.length\n            val\
    \ opVal17 = opIndex == -1 ? 1 : opList.length\n            val opVal18 = opIndex\
    \ == -1 ? 1 : opList.length\n            val opVal19 = opIndex == -1 ? 1 : opList.length\n\
    \            val opVal20 = opIndex == -1 ? 1 : opList.length\n            val\
    \ opVal21 = opIndex == -1 ? 1 : opList.length\n            val opVal22 = opIndex\
    \ == -1 ? 1 : opList.length\n            val opVal23 = opIndex == -1 ? 1 : opList.length\n\
    \            val opVal24 = opIndex == -1 ? 1 : opList.length\n            val\
    \ opVal25 = opIndex == -1 ? 1 : opList.length\n            val opVal26 = opIndex\
    \ == -1 ? 1 : opList.length\n            val opVal27 = opIndex == -1 ? 1 : opList.length\n\
    \            val opVal28 = opIndex == -1 ? 1 : opList.length\n            val\
    \ opVal29 = opIndex", "        val ops = op.map(x => x.toLowerCase)\n        val\
    \ opList = ops.toList\n        val operands = operand.toList\n        val opLen\
    \ = opList.size\n        val operandLen = operands.size\n        val opMap = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap = new mutable.HashMap[String,\
    \ Long]()\n        val opMap2 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap2 = new mutable.HashMap[String, Long]()\n        val opMap3 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap3 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap4 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap4 = new mutable.HashMap[String, Long]()\n        val opMap5 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap6 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap6 = new mutable.HashMap[String, Long]()\n        val opMap7 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap7 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap8 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap8 = new mutable.HashMap[String, Long]()\n        val opMap9 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap10 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap10 = new mutable.HashMap[String, Long]()\n        val opMap11\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap11 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap12 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap12 = new mutable.HashMap[String, Long]()\n        val opMap13\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap13 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap14 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap14 = new mutable.HashMap[String, Long]()\n        val opMap15\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap15 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap16 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap", "        val ops = op.map(x => x.toChar)\n        val op1 =\
    \ ops(0)\n        val op2 = ops(1)\n        val op3 = ops(2)\n        val op4\
    \ = ops(3)\n        val op5 = ops(4)\n        val op6 = ops(5)\n        val op7\
    \ = ops(6)\n        val op8 = ops(7)\n        val op9 = ops(8)\n        val op10\
    \ = ops(9)\n        val op11 = ops(10)\n        val op12 = ops(11)\n        val\
    \ op13 = ops(12)\n        val op14 = ops(13)\n        val op15 = ops(14)\n   \
    \     val op16 = ops(15)\n        val op17 = ops(16)\n        val op18 = ops(17)\n\
    \        val op19 = ops(18)\n        val op20 = ops(19)\n        val op21 = ops(20)\n\
    \        val op22 = ops(21)\n        val op23 = ops(22)\n        val op24 = ops(23)\n\
    \        val op25 = ops(24)\n        val op26 = ops(25)\n        val op27 = ops(26)\n\
    \        val op28 = ops(27)\n        val op29 = ops(28)\n        val op30 = ops(29)\n\
    \        val op31 = ops(30)\n        val op32 = ops(31)\n        val op33 = ops(32)\n\
    \        val op34 = ops(33)\n        val op35 = ops(34)\n        val op36 = ops(35)\n\
    \        val op37 = ops(36)\n        val op38 = ops(37)\n        val op39 = ops(38)\n\
    \        val op40 = ops(39)\n        val op41 = ops(40)\n        val op42 = ops(41)\n\
    \        val op43 = ops(42)\n        val op44 = ops(43)\n        val op45 = ops(44)\n\
    \        val op46 = ops(45)\n        val op47 = ops(46)\n        val op48 = ops(47)\n\
    \        val op49 = ops(48)\n        val op50 = ops(49)\n        val op51 = ops(50)\n\
    \        val op52 = ops(51)\n        val op53 = ops(52)\n        val op54 = ops(53)\n",
  "        val ops = op.map(x => x.toChar)\n        val opLen = ops.size\n       \
    \ val opLenMinusOne = opLen - 1\n        val operandLen = operand.size\n     \
    \   val operandLenMinusOne = operandLen - 1\n        val ops = ops.map(x => x.toInt)\n\
    \        val operands = operand.map(x => x.toInt)\n        val opLenMinusOne =\
    \ ops.size - 1\n        val operandLenMinusOne = operands.size - 1\n        val\
    \ ops = ops.map(x => x.toInt)\n        val operands = operands.map(x => x.toInt)\n\
    \        val opLenMinusOne = ops.size - 1\n        val operandLenMinusOne = operands.size\
    \ - 1\n        val ops = ops.map(x => x.toInt)\n        val operands = operands.map(x\
    \ => x.toInt)\n        val opLenMinusOne = ops.size - 1\n        val operandLenMinusOne\
    \ = operands.size - 1\n        val ops = ops.map(x => x.toInt)\n        val operands\
    \ = operands.map(x => x.toInt)\n        val opLenMinusOne = ops.size - 1\n   \
    \     val operandLenMinusOne = operands.size - 1\n        val ops = ops.map(x\
    \ => x.toInt)\n        val operands = operands.map(x => x.toInt)\n        val\
    \ opLenMinusOne = ops.size - 1\n        val operandLenMinusOne = operands.size\
    \ - 1\n        val ops = ops.map(x => x.toInt)\n        val operands = operands.map(x\
    \ => x.toInt)\n        val opLenMinusOne = ops.size - 1\n        val operandLenMinusOne\
    \ = operands.size - 1\n        val ops = ops.map(x => x.toInt)\n        val operands\
    \ = operands.map(x => x.toInt)\n        val opLenMinusOne = ops.size - 1\n   \
    \     val operandLenMinusOne = operands.size - 1\n        val ops = ops.map(x\
    \ => x.toInt)\n        val operands = operands.map(x => x.toInt)\n        val\
    \ opLenMinusOne = ops.size - 1\n        val operandLenMinusOne = operands.size\
    \ - 1\n        val ops = ops.map(x => x.toInt)\n        val operands = operands.map(x\
    \ => x.toInt)\n        val opLenMinusOne = ops.size - 1\n        val operandLen",
  "        val ops = op.map(_.toUpperCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLength = ops.size\n        val operandLength = operands.size\n\
    \        val result = operands.head\n        val op1 = operands.tail.head\n  \
    \      val op2 = operands.tail.tail.head\n        val op3 = operands.tail.tail.tail.head\n\
    \        val op4 = operands.tail.tail.tail.tail.head\n        val op5 = operands.tail.tail.tail.tail.tail.head\n\
    \        val op6 = operands.tail.tail.tail.tail.tail.tail.head\n        val op7\
    \ = operands.tail.tail.tail.tail.tail.tail.tail.head\n        val op8 = operands.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op9 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op10 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op11 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op12 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op13 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op14 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op15 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op16 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op17 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op18 = operands.tail.", "        val ops = op.map(x => x.toChar)\n\
    \        val opList = ops.toList\n        val operands = operand.toList\n    \
    \    val opLen = opList.size\n        val opLenMinusOne = opLen - 1\n        val\
    \ operandLen = operands.size\n        val operandLenMinusOne = operandLen - 1\n\
    \        val opIndex = 0\n        val operandIndex = 0\n        val result = 0L\n\
    \        while(operandIndex < operandLenMinusOne) {\n            val opChar =\
    \ opList(opIndex)\n            val operand = operands(operandIndex)\n        \
    \    val opVal = opChar.toLong\n            val operandVal = operand.toLong\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValDouble = opVal.toDouble\n            val operandValDouble\
    \ = operandVal.toDouble\n            val opValLong = opVal.toLong\n          \
    \  val operandValLong = operandVal.toLong\n            val opValFloat = opVal.toFloat\n\
    \            val operandValFloat = operandVal.toFloat\n            val opValInt\
    \ = opVal.toInt\n            val operandValInt = operandVal.toInt\n          \
    \  val opValLong = opVal.toLong\n            val operandValLong = operandVal.toLong\n\
    \            val opValFloat = opVal.toFloat\n            val operandValFloat =\
    \ operandVal.toFloat\n            val opValDouble = opVal.toDouble\n         \
    \   val operandValDouble = operandVal.toDouble\n            val opValInt = opVal.toInt\n\
    \            val operandValInt = operandVal.toInt\n            val opValLong =\
    \ opVal.toLong\n            val operandValLong = operandVal.toLong\n         \
    \   val opValFloat = opVal.toFloat\n            val operandValFloat = operandVal.toFloat\n\
    \            val opValDouble = opVal.toDouble\n            val operandValDouble\
    \ = operandVal.toDouble\n            val opValInt = opVal.toInt\n            val\
    \ operandValInt = operandVal.toInt\n            val opValLong = opVal.toLong\n\
    \            val operandValLong = operandVal.toLong\n            val opValFloat\
    \ = opVal.toFloat\n            val operandValFloat = operandVal.toFloat\n    \
    \        val opValDouble = opVal.toDouble\n            val operandValDouble =\
    \ operandVal.toDouble\n            val opValInt = opVal.toInt\n            val\
    \ operandValInt = operandVal.toInt\n", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.size\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operandList.size\n\
    \        val operandLenMinusOne = operandLen - 1\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLenMinusOne\
    \ = opListLen - 1\n        val operandListLenMinusOne = operandListLen - 1\n \
    \       val opListLenMinusOneMinusOne = opListLenMinusOne - 1\n        val operandListLenMinusOneMinusOne\
    \ = operandListLenMinusOne - 1\n        val opListLenMinusOneMinusOneMinusOne\
    \ = opListLenMinusOneMinusOne - 1\n        val operandListLenMinusOneMinusOneMinusOne\
    \ = operandListLenMinusOneMinusOne - 1\n        val opListLenMinusOneMinusOneMinusOneMinusOne\
    \ = opListLenMinusOneMinusOneMinusOne - 1\n        val operandListLenMinusOneMinusOneMinusOneMinusOne\
    \ = operandListLenMinusOneMinusOneMinusOne - 1\n        val opListLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opListLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandListLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandListLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val opListLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opListLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val\
    \ operandListLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = operandListLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opListLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opListLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandListLen", "        val ops = op.map(_.toUpperCase)\n\
    \        val opList = ops.toList\n        val operandList = operand.toList\n \
    \       val opLen = opList.size\n        val operandLen = operandList.size\n \
    \       val opIndex = ops.indexOf(\"+\")\n        val opIndex2 = ops.indexOf(\"\
    -\")\n        val opIndex3 = ops.indexOf(\"*\")\n        val opIndex4 = ops.indexOf(\"\
    /\")\n        val opIndex5 = ops.indexOf(\"**\")\n        val opIndex6 = ops.indexOf(\"\
    %\")\n        val opIndex7 = ops.indexOf(\"//\")\n        val opIndex8 = ops.indexOf(\"\
    &\")\n        val opIndex9 = ops.indexOf(\"|\")\n        val opIndex10 = ops.indexOf(\"\
    ^\")\n        val opIndex11 = ops.indexOf(\"~\")\n        val opIndex12 = ops.indexOf(\"\
    <<\")\n        val opIndex13 = ops.indexOf(\">>\")\n        val opIndex14 = ops.indexOf(\"\
    ==\")\n        val opIndex15 = ops.indexOf(\"!=\")\n        val opIndex16 = ops.indexOf(\"\
    <\")\n        val opIndex17 = ops.indexOf(\">\")\n        val opIndex18 = ops.indexOf(\"\
    <=\")\n        val opIndex19 = ops.indexOf(\">=\")\n        val opIndex20 = ops.indexOf(\"\
    ==\")\n        val opIndex21 = ops.indexOf(\"!=\")\n        val opIndex22 = ops.indexOf(\"\
    <<\")\n        val opIndex23 = ops.indexOf(\">>\")\n        val opIndex24 = ops.indexOf(\"\
    &\")\n        val opIndex25 = ops.indexOf(\"|\")\n        val opIndex26 = ops.indexOf(\"\
    ^\")\n        val opIndex27 = ops.indexOf(\"~\")\n        val opIndex28 = ops.indexOf(\"\
    <<\")\n        val opIndex29 = ops.indexOf(\">>\")\n        val opIndex30 = ops.indexOf(\"\
    &\")\n        val opIndex31 = ops.indexOf(\"|\")\n        val opIndex32 = ops.indexOf(\"\
    ^\")\n        val opIndex33 = ops.indexOf(\"~\")\n        val opIndex34 = ops.indexOf(\"\
    <<\")\n        val opIndex35 = ops.indexOf(\">>\")\n        val opIndex36 = ops.indexOf(\"\
    &\")\n        val opIndex37 = ops.indexOf(\"|\")\n        val opIndex38 = ops.indexOf(\"\
    ^\")\n        val opIndex39 = ops.indexOf(\"~\")\n        val opIndex40 = ops.indexOf(\"\
    <<\")\n        val opIndex41 = ops.indexOf(\">>\")\n        ", "        val opList\
    \ = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n \
    \       val opLen = opList.length\n        val opLenMinusOne = opLen - 1\n   \
    \     val operandLen = operandList.length\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne =\
    \ operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operand",
  "        val ops = op.map(_.toUpperCase)\n        val opList = ops.toList\n    \
    \    val operands = operand.toList\n        val operandList = operands.toList\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\n\
    \        val opIndex = 0\n        val operandIndex = 0\n        val result = operands(0)\n\
    \        val op1 = ops(0)\n        val op2 = ops(1)\n        val op3 = ops(2)\n\
    \        val op4 = ops(3)\n        val op5 = ops(4)\n        val op6 = ops(5)\n\
    \        val op7 = ops(6)\n        val op8 = ops(7)\n        val op9 = ops(8)\n\
    \        val op10 = ops(9)\n        val op11 = ops(10)\n        val op12 = ops(11)\n\
    \        val op13 = ops(12)\n        val op14 = ops(13)\n        val op15 = ops(14)\n\
    \        val op16 = ops(15)\n        val op17 = ops(16)\n        val op18 = ops(17)\n\
    \        val op19 = ops(18)\n        val op20 = ops(19)\n        val op21 = ops(20)\n\
    \        val op22 = ops(21)\n        val op23 = ops(22)\n        val op24 = ops(23)\n\
    \        val op25 = ops(24)\n        val op26 = ops(25)\n        val op27 = ops(26)\n\
    \        val op28 = ops(27)\n        val op29 = ops(28)\n        val op30 = ops(29)\n\
    \        val op31 = ops(30)\n        val op32 = ops(31)\n        val op33 = ops(32)\n\
    \        val op34 = ops(33)\n        val op35 = ops(34)\n        val op36 = ops(35)\n\
    \        val op37 = ops(36)\n        val op38 = ops(37)\n        val op39 = ops(38)\n\
    \        val op40 = ops(39)\n        val op41 = ops(40)\n        val op42 = ops(41)\n\
    \        val op43 = ops(42)\n        val op44 = ops(43)\n        val op45 = ops(44)\n\
    \        val op46 = ops(45)\n        val op47 = ops(46)\n        val op48 = ops(47)\n\
    \        ", "        val opList = op.map(_.toLowerCase).toList\n        val operandList\
    \ = operand.map(_.toInt).toList\n        val opLength = opList.length\n      \
    \  val operandLength = operandList.length\n        val opIndex = 0\n        val\
    \ operandIndex = 0\n        val result = operand(0)\n        val opResult = operand(0)\n\
    \        val opResult2 = operand(0)\n        val opResult3 = operand(0)\n    \
    \    val opResult4 = operand(0)\n        val opResult5 = operand(0)\n        val\
    \ opResult6 = operand(0)\n        val opResult7 = operand(0)\n        val opResult8\
    \ = operand(0)\n        val opResult9 = operand(0)\n        val opResult10 = operand(0)\n\
    \        val opResult11 = operand(0)\n        val opResult12 = operand(0)\n  \
    \      val opResult13 = operand(0)\n        val opResult14 = operand(0)\n    \
    \    val opResult15 = operand(0)\n        val opResult16 = operand(0)\n      \
    \  val opResult17 = operand(0)\n        val opResult18 = operand(0)\n        val\
    \ opResult19 = operand(0)\n        val opResult20 = operand(0)\n        val opResult21\
    \ = operand(0)\n        val opResult22 = operand(0)\n        val opResult23 =\
    \ operand(0)\n        val opResult24 = operand(0)\n        val opResult25 = operand(0)\n\
    \        val opResult26 = operand(0)\n        val opResult27 = operand(0)\n  \
    \      val opResult28 = operand(0)\n        val opResult29 = operand(0)\n    \
    \    val opResult30 = operand(0)\n        val opResult31 = operand(0)\n      \
    \  val opResult32 = operand(0)\n        val opResult33 = operand(0)\n        val\
    \ opResult34 = operand(0)\n        val opResult35 = operand(0)\n        val opResult36\
    \ = operand(0)\n        val opResult37 = operand(0)\n        val opResult38 =\
    \ operand(0)\n        val opResult39 = operand(0)\n        val opResult40 = operand(0)\n\
    \        val opResult41 = operand(0)\n        val opResult42 = operand(0)\n  \
    \      val opResult43 = operand(0)\n        val opResult44 = operand(0)\n    \
    \    val opResult45 = operand(0)\n        val opResult46 = operand(0)\n      \
    \  val opResult47 = operand(0)\n        val opResult48 = operand(0)\n        val\
    \ opResult49 = operand(0)\n        val opResult50 = operand(0)\n        val opResult51\
    \ = operand(0)\n        val opResult52 = operand", "        val ops = op.map(_.toUpperCase)\n\
    \        val ops = ops.toSet\n        val operands = operand.toSet\n        val\
    \ ops = ops.toList\n        val operands = operands.toList\n        val ops =\
    \ ops.toSet\n        val operands = operands.toSet\n        val ops = ops.toList\n\
    \        val operands = operands.toList\n        val ops = ops.toSet\n       \
    \ val operands = operands.toSet\n        val ops = ops.toList\n        val operands\
    \ = operands.toList\n        val ops = ops.toSet\n        val operands = operands.toSet\n\
    \        val ops = ops.toList\n        val operands = operands.toList\n      \
    \  val ops = ops.toSet\n        val operands = operands.toSet\n        val ops\
    \ = ops.toList\n        val operands = operands.toList\n        val ops = ops.toSet\n\
    \        val operands = operands.toSet\n        val ops = ops.toList\n       \
    \ val operands = operands.toList\n        val ops = ops.toSet\n        val operands\
    \ = operands.toSet\n        val ops = ops.toList\n        val operands = operands.toList\n\
    \        val ops = ops.toSet\n        val operands = operands.toSet\n        val\
    \ ops = ops.toList\n        val operands = operands.toList\n        val ops =\
    \ ops.toSet\n        val operands = operands.toSet\n        val ops = ops.toList\n\
    \        val operands = operands.toList\n        val ops = ops.toSet\n       \
    \ val operands = operands.toSet\n        val ops = ops.toList\n        val operands\
    \ = operands.toList\n        val ops = ops.toSet\n        val operands = operands.toSet\n\
    \        val ops = ops.toList\n        val operands = operands.toList\n      \
    \  val ops = ops.toSet\n        val operands = operands.toSet\n        val ops\
    \ = ops.toList\n        val operands = operands.toList\n        val ops = ops.toSet\n\
    \        val operands = operands.toSet\n        val ops = ops.toList\n       \
    \ val operands = operands.toList\n        val ops = ops.toSet\n        val operands\
    \ = operands.toSet\n        val ops = ops.toList\n        val operands = operands.toList\n\
    \        val ops = ops.toSet\n        val operands = operands.toSet\n        val\
    \ ops = ops.toList\n        ", "        val opList = op.map(_.toUpperCase)\n \
    \       val opLen = opList.length\n        val operandList = operand.map(_.toLong)\n\
    \        val operandLen = operandList.length\n        val result = operandList.foldLeft(0)\
    \ { (acc, x) => acc + (opList.indexOf(x) * operandList(x))}\n        result",
  "        val ops = op.map(_.toUpperCase)\n        val opList = ops.toList\n    \
    \    val opLen = opList.size\n        val opLenMinusOne = opLen - 1\n        val\
    \ operandList = operand.toList\n        val operandLen = operandList.size\n  \
    \      val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne = opLen\
    \ - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOne\
    \ = opLen - 1"]
stop_tokens:
- "\n    }\n"
