name: HumanEval_102_choose_num
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // This function takes two positive numbers x and y and returns the\n    //\
  \ biggest even integer number that is in the range [x, y] inclusive. If \n    //\
  \ there's no such number, then the function should return -1.\n    // For example:\n\
  \    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l), (12l))\n\
  \    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
  \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
  \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n \
  \   assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
  \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
  \ (546l)) == (546l));\n    }\n\n}\n"
completions: ["        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = (x to y)\n        for (i <- range) {\n            if (i %\
    \ 2 == 0) {\n                evens += i\n            } else {\n              \
    \  odds += i\n            }\n        }\n        if (evens.isEmpty) {\n       \
    \     return -1\n        }\n        if (evens.size == 1) {\n            return\
    \ evens.head\n        }\n        val maxEven = evens.max\n        val maxOdd =\
    \ odds.max\n        if (maxEven > maxOdd) {\n            return maxEven\n    \
    \    } else {\n            return maxOdd\n        }", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val evensCount = mutable.Set[Long]()\n\
    \        val oddsCount = mutable.Set[Long]()\n        val evensCount2 = mutable.Set[Long]()\n\
    \        val oddsCount2 = mutable.Set[Long]()\n        val evensCount3 = mutable.Set[Long]()\n\
    \        val oddsCount3 = mutable.Set[Long]()\n        val evensCount4 = mutable.Set[Long]()\n\
    \        val oddsCount4 = mutable.Set[Long]()\n        val evensCount5 = mutable.Set[Long]()\n\
    \        val oddsCount5 = mutable.Set[Long]()\n        val evensCount6 = mutable.Set[Long]()\n\
    \        val oddsCount6 = mutable.Set[Long]()\n        val evensCount7 = mutable.Set[Long]()\n\
    \        val oddsCount7 = mutable.Set[Long]()\n        val evensCount8 = mutable.Set[Long]()\n\
    \        val oddsCount8 = mutable.Set[Long]()\n        val evensCount9 = mutable.Set[Long]()\n\
    \        val oddsCount9 = mutable.Set[Long]()\n        val evensCount10 = mutable.Set[Long]()\n\
    \        val oddsCount10 = mutable.Set[Long]()\n        val evensCount11 = mutable.Set[Long]()\n\
    \        val oddsCount11 = mutable.Set[Long]()\n        val evensCount12 = mutable.Set[Long]()\n\
    \        val oddsCount12 = mutable.Set[Long]()\n        val evensCount13 = mutable.Set[Long]()\n\
    \        val oddsCount13 = mutable.Set[Long]()\n        val evensCount14 = mutable.Set[Long]()\n\
    \        val oddsCount14 = mutable.Set[Long]()\n        val evensCount15 = mutable.Set[Long]()\n\
    \        val oddsCount15 = mutable.Set[Long]()\n        val evensCount16 = mutable.Set[Long]()\n\
    \        val oddsCount16 = mutable.Set[Long]()\n        val evensCount17 = mutable.Set[Long]()\n\
    \        val oddsCount17 = mutable.Set[Long]()\n        val evens", "        val\
    \ evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val range = scala.collection.mutable.Range(x, y)\n        range.foreach(x\
    \ => if (x % 2 == 0) evens += x; else odds += x)\n        evens.foreach(x => if\
    \ (x % 2 == 0) even += x; else odd += x)\n        val even = even.max\n      \
    \  val odd = odd.max\n        if (even > odd) even else odd", "        var even\
    \ = 0\n        var odd = 0\n        var x = x.toInt\n        var y = y.toInt\n\
    \        var evenMax = y\n        var oddMax = x\n        while (even < x && odd\
    \ < y) {\n            if (even % 2 == 0 && odd % 2 == 0) {\n                evenMax\
    \ = even\n                oddMax = odd\n            }\n            even = even\
    \ + 1\n            odd = odd + 1\n        }\n        if (even < x && odd < y)\
    \ {\n            evenMax = even\n            oddMax = odd\n        }\n       \
    \ if (evenMax == x && oddMax == y) {\n            return evenMax\n        }\n\
    \        if (evenMax == x || oddMax == y) {\n            return -1\n        }\n\
    \        return -1", "        val evens = mutable.ListBuffer[Long]()\n       \
    \ val odds = mutable.ListBuffer[Long]()\n        val evensAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount = mutable.ListBuffer[Long]()\n        val evensAndOddsCount2\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount3 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount4 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount5\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount6 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount7 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount8\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount9 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount10 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount11\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount12 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount13 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount14\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount15 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount16 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount17\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount18 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount19 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount20\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount21 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount22 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount23\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount24 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount25 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val num = mutable.ListBuffer[Long]()\n\
    \        val evenNum = mutable.ListBuffer[Long]()\n        val oddNum = mutable.ListBuffer[Long]()\n\
    \        val numNum = mutable.ListBuffer[Long]()\n        val evenNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNum = mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long]", "        val evens\
    \ = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n        val range\
    \ = Range(x, y)\n        range.foreach(x => if (x % 2 == 0) evens += x; else odds\
    \ += x)\n        val even = evens.max\n        val odd = odds.max\n        if\
    \ (even > odd) even else -1", "        val evens = mutable.Set[Long]()\n     \
    \   val odds = mutable.Set[Long]()\n        val range = (x to y)\n        range.foreach(x\
    \ => {\n            if (x % 2 == 0) {\n                evens += x\n          \
    \  } else {\n                odds += x\n            }\n        })\n        val\
    \ even = evens.max\n        val odd = odds.max\n        if (even > odd) {\n  \
    \          return even\n        } else {\n            return -1\n        }", " \
    \       var even = 0\n        var odd = 0\n        var result = -1\n        for(i\
    \ <- x until y) {\n            if(i%2 == 0) {\n                even += i\n   \
    \         } else {\n                odd += i\n            }\n        }\n     \
    \   if(even > odd) {\n            result = even\n        } else {\n          \
    \  result = odd\n        }\n        result", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenInRange = mutable.ListBuffer[Long]()\n\
    \        val oddInRange = mutable.ListBuffer[Long]()\n        val evenInRange2\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange2 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange3 = mutable.ListBuffer[Long]()\n        val oddInRange3\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange4 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange4 = mutable.ListBuffer[Long]()\n        val evenInRange5\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange5 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange6 = mutable.ListBuffer[Long]()\n        val oddInRange6\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange7 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange7 = mutable.ListBuffer[Long]()\n        val evenInRange8\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange8 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange9 = mutable.ListBuffer[Long]()\n        val oddInRange9\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange10 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange10 = mutable.ListBuffer[Long]()\n        val evenInRange11\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange11 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange12 = mutable.ListBuffer[Long]()\n        val oddInRange12\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange13 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange13 = mutable.ListBuffer[Long]()\n        val evenInRange14\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange14 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange15 = mutable.ListBuffer[Long]()\n        val oddInRange15\
    \ = mutable.ListBuffer[Long]()\n        val evenIn", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        for (i <- evens) {\n            if (i % 2 == 0) {\n           \
    \     even += i\n            }\n        }\n        for (i <- odds) {\n       \
    \     if (i % 2 == 1) {\n                odd += i\n            }\n        }\n\
    \        if (even.isEmpty && odd.isEmpty) {\n            return -1\n        }\
    \ else if (even.isEmpty) {\n            return odd.head\n        } else if (odd.isEmpty)\
    \ {\n            return even.head\n        } else {\n            val evens = even.sorted\n\
    \            val odds = odd.sorted\n            if (evens.head < evens.last) {\n\
    \                return evens.head\n            } else {\n                return\
    \ evens.last\n            }\n        }", "        val evens = x filter (_ % 2\
    \ == 0)\n        val odds = x filter (_ % 2 != 0)\n        val evensAndOdds =\
    \ evens ++ odds\n        val evensAndOddsMinusEvens = evensAndOdds filter (_ %\
    \ 2 == 0)\n        val evensAndOddsMinusOdds = evensAndOdds filter (_ % 2 != 0)\n\
    \        val evensAndOddsMinusEvensAndOdds = evensAndOddsMinusEvens ++ evensAndOddsMinusOdds\n\
    \        val evensAndOddsMinusEvensAndOddsMinusEvens = evensAndOddsMinusEvensAndOdds\
    \ filter (_ % 2 == 0)\n        val evensAndOddsMinusEvensAndOddsMinusOdds = evensAndOddsMinusEvensAndOdds\
    \ filter (_ % 2 != 0)\n        val evensAndOddsMinusEvensAndOddsMinusEvensAndOdds\
    \ = evensAndOddsMinusEvensAndOddsMinusEvens ++ evensAndOddsMinusEvensAndOddsMinusOdds\n\
    \        val evensAndOddsMinusEvensAndOddsMinusEvensAndOddsMinusEvens = evensAndOddsMinusEvensAndOddsMinusEvensAndOdds\
    \ filter (_ % 2 == 0)\n        val evensAndOddsMinusEvensAndOddsMinusEvensAndOddsMinusOdds\
    \ = evensAndOddsMinusEvensAndOddsMinusEvensAndOdds filter (_ % 2 != 0)\n     \
    \   val evensAndOddsMinusEvensAndOddsMinusEvensAndOddsMinusEvensAndOdds = evensAndOddsMinusEvensAndOddsMinusEvensAndOddsMinusEvens\
    \ ++ evensAndOddsMinusEvensAndOddsMinusEvensAndOddsMinusOdds\n        val evensAndOddsMinusEvensAndOddsMinusEvensAndOddsMinusEvensAndOddsMinusOdds\
    \ = evensAndOddsMinusEvensAndOddsMinusEvensAndOddsMinusEvensAndOdds filter (_\
    \ % 2 == 0)\n        val evensAndOddsMinusEvensAndO", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenInRange = mutable.ListBuffer[Long]()\n\
    \        val oddInRange = mutable.ListBuffer[Long]()\n        val evenInRange2\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange2 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange3 = mutable.ListBuffer[Long]()\n        val oddInRange3\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange4 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange4 = mutable.ListBuffer[Long]()\n        val evenInRange5\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange5 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange6 = mutable.ListBuffer[Long]()\n        val oddInRange6\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange7 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange7 = mutable.ListBuffer[Long]()\n        val evenInRange8\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange8 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange9 = mutable.ListBuffer[Long]()\n        val oddInRange9\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange10 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange10 = mutable.ListBuffer[Long]()\n        val evenInRange11\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange11 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange12 = mutable.ListBuffer[Long]()\n        val oddInRange12\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange13 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange13 = mutable.ListBuffer[Long]()\n        val evenInRange14\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange14 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange15 = mutable.ListBuffer[Long]()\n        val oddInRange15\
    \ = mutable.ListBuffer[Long]()\n        val evenIn", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddOdd = mutable.ListBuffer[Long]()\n        val evenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEven = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenEvenEvenEven = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n   \
    \     val evenOddEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n     \
    \   val evenOddEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n    \
    \    val evenOddEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n  \
    \      val evenOddEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.List",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val num = mutable.ListBuffer[Long]()\n\
    \        val num2 = mutable.ListBuffer[Long]()\n        val num3 = mutable.ListBuffer[Long]()\n\
    \        val num4 = mutable.ListBuffer[Long]()\n        val num5 = mutable.ListBuffer[Long]()\n\
    \        val num6 = mutable.ListBuffer[Long]()\n        val num7 = mutable.ListBuffer[Long]()\n\
    \        val num8 = mutable.ListBuffer[Long]()\n        val num9 = mutable.ListBuffer[Long]()\n\
    \        val num10 = mutable.ListBuffer[Long]()\n        val num11 = mutable.ListBuffer[Long]()\n\
    \        val num12 = mutable.ListBuffer[Long]()\n        val num13 = mutable.ListBuffer[Long]()\n\
    \        val num14 = mutable.ListBuffer[Long]()\n        val num15 = mutable.ListBuffer[Long]()\n\
    \        val num16 = mutable.ListBuffer[Long]()\n        val num17 = mutable.ListBuffer[Long]()\n\
    \        val num18 = mutable.ListBuffer[Long]()\n        val num19 = mutable.ListBuffer[Long]()\n\
    \        val num20 = mutable.ListBuffer[Long]()\n        val num21 = mutable.ListBuffer[Long]()\n\
    \        val num22 = mutable.ListBuffer[Long]()\n        val num23 = mutable.ListBuffer[Long]()\n\
    \        val num24 = mutable.ListBuffer[Long]()\n        val num25 = mutable.ListBuffer[Long]()\n\
    \        val num26 = mutable.ListBuffer[Long]()\n        val num27 = mutable.ListBuffer[Long]()\n\
    \        val num28 = mutable.ListBuffer[Long]()\n        val num29 = mutable.ListBuffer[Long]()\n\
    \        val num30 = mutable.ListBuffer[Long]()\n        val num31 = mutable.ListBuffer[Long]()\n\
    \        val num32 = mutable.ListBuffer[Long]()\n        val num33 = mutable.ListBuffer[Long]",
  "        var maxNum = math.max(x, y)\n        var minNum = math.min(x, y)\n    \
    \    var evenNum = math.floor(maxNum / 2)\n        var oddNum = math.ceil(maxNum\
    \ / 2)\n        var evenMax = math.max(evenNum, oddNum)\n        var evenMin =\
    \ math.min(evenNum, oddNum)\n        var evenEven = math.floor(evenMax / 2)\n\
    \        var evenOdd = math.ceil(evenMax / 2)\n        var oddEven = math.floor(oddMax\
    \ / 2)\n        var oddOdd = math.ceil(oddMax / 2)\n        var evenEvenOdd =\
    \ math.min(evenEven, oddOdd)\n        var evenOddOdd = math.max(evenOdd, oddOdd)\n\
    \        var evenEvenOddOdd = math.min(evenEvenOdd, oddOddOdd)\n        var evenEvenOddOddOdd\
    \ = math.max(evenEvenOdd, oddOddOdd)\n        var evenEvenOddOddOddOdd = math.min(evenEvenOdd,\
    \ oddOddOddOdd)\n        var evenEvenOddOddOddOddOdd = math.max(evenEvenOdd, oddOddOddOddOdd)\n\
    \        var evenEvenOddOddOddOddOddOdd = math.min(evenEvenOdd, oddOddOddOddOddOddOdd)\n\
    \        var evenEvenOddOddOddOddOddOddOdd = math.max(evenEvenOdd, oddOddOddOddOddOddOdd)\n\
    \        var evenEvenOddOddOddOddOddOddOdd = math.min(evenEvenOdd, oddOddOddOddOddOddOddOdd)\n\
    \        var evenEvenOddOddOddOddOddOddOddOdd = math.max(evenEvenOdd, oddOddOddOddOddOddOddOddOdd)\n\
    \        var evenEvenOddOddOddOddOddOddOddOddOdd = math.min(evenEvenOdd, oddOddOddOddOddOddOddOddOdd)\n\
    \        var evenEvenOddOddOddOddOddOddOddOddOddOdd = math.max(evenEvenOdd, oddOddOddOddOddOddOddOddOddOdd)\n\
    \        var evenEvenOddOdd", "        val evens = x filter (_ % 2 == 0)\n   \
    \     val odds = x filter (_ % 2 != 0)\n        val evensOdds = evens ++ odds\n\
    \        val evensOddsMin = evensOdds.min\n        val evensOddsMax = evensOdds.max\n\
    \        if (evensOddsMin < y && evensOddsMax > y) evensOddsMin else -1", "  \
    \      val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = (x - y).abs.toLong\n        val evenRange = range / 2\n \
    \       val oddRange = range / 2\n        val evenStart = x - (evenRange * 2)\n\
    \        val evenEnd = x + (evenRange * 2)\n        val oddStart = y - (oddRange\
    \ * 2)\n        val oddEnd = y + (oddRange * 2)\n        val evenEvens = for (i\
    \ <- evenStart.until(evenEnd)) yield i\n        val evenOdds = for (i <- evenStart.until(evenEnd))\
    \ yield i\n        val oddEvens = for (i <- oddStart.until(oddEnd)) yield i\n\
    \        val oddOdds = for (i <- oddStart.until(oddEnd)) yield i\n        val\
    \ evenOddEvens = for (i <- evenStart.until(evenEnd)) yield i\n        val evenOddOdds\
    \ = for (i <- evenStart.until(evenEnd)) yield i\n        val oddEvenEvens = for\
    \ (i <- oddStart.until(oddEnd)) yield i\n        val oddEvenOdds = for (i <- oddStart.until(oddEnd))\
    \ yield i\n        val evenOddEvenEvens = for (i <- evenStart.until(evenEnd))\
    \ yield i\n        val evenOddEvenOdds = for (i <- evenStart.until(evenEnd)) yield\
    \ i\n        val oddEvenEvenEvens = for (i <- oddStart.until(oddEnd)) yield i\n\
    \        val oddEvenOddEvens = for (i <- oddStart.until(oddEnd)) yield i\n   \
    \     val evenOddEvenEvenEvens = for (i <- evenStart.until(evenEnd)) yield i\n\
    \        val evenOddEvenEvenOdds = for (i <- evenStart.until(evenEnd)) yield i\n\
    \        val oddEvenEvenEvenEvens = for (i <- oddStart.until(oddEnd)) yield i\n\
    \        val oddEvenOddEvenEvens = for (i <- oddStart.until(oddEnd)) yield i\n\
    \        val evenOddEvenEvenEvenEvens = for (i <- evenStart.until(evenEnd)) yield\
    \ i\n        val evenOddEvenEvenEvenOdds = for (i <- evenStart.until(evenEnd))\
    \ yield i\n        val oddEvenEvenEvenEvenEvens = for (i <- oddStart.until(oddEnd))\
    \ yield i\n        ", "        val evens = mutable.ListBuffer[Long]()\n      \
    \  val odds = mutable.ListBuffer[Long]()\n        val evensAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndEvens = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEven",
  "        var max = 0\n        var min = 0\n        var even = 0\n        var odd\
    \ = 0\n        var evenMax = 0\n        var evenMin = 0\n        var oddMax =\
    \ 0\n        var oddMin = 0\n        var evenMaxCount = 0\n        var evenMinCount\
    \ = 0\n        var oddMaxCount = 0\n        var oddMinCount = 0\n        var evenMaxCount2\
    \ = 0\n        var evenMinCount2 = 0\n        var oddMaxCount2 = 0\n        var\
    \ oddMinCount2 = 0\n        var evenMaxCount3 = 0\n        var evenMinCount3 =\
    \ 0\n        var oddMaxCount3 = 0\n        var oddMinCount3 = 0\n        var evenMaxCount4\
    \ = 0\n        var evenMinCount4 = 0\n        var oddMaxCount4 = 0\n        var\
    \ oddMinCount4 = 0\n        var evenMaxCount5 = 0\n        var evenMinCount5 =\
    \ 0\n        var oddMaxCount5 = 0\n        var oddMinCount5 = 0\n        var evenMaxCount6\
    \ = 0\n        var evenMinCount6 = 0\n        var oddMaxCount6 = 0\n        var\
    \ oddMinCount6 = 0\n        var evenMaxCount7 = 0\n        var evenMinCount7 =\
    \ 0\n        var oddMaxCount7 = 0\n        var oddMinCount7 = 0\n        var evenMaxCount8\
    \ = 0\n        var evenMinCount8 = 0\n        var oddMaxCount8 = 0\n        var\
    \ oddMinCount8 = 0\n        var evenMaxCount9 = 0\n        var evenMinCount9 =\
    \ 0\n        var oddMaxCount9 = 0\n        var oddMinCount9 = 0\n        var evenMaxCount10\
    \ = 0\n        var evenMinCount10 = 0\n        var oddMaxCount10 = 0\n       \
    \ var oddMinCount10 = 0\n        var evenMaxCount11 = 0\n        var evenMinCount11\
    \ = 0\n        var oddMaxCount11 = 0\n        var oddMinCount11 = 0\n        var\
    \ evenMaxCount12 = 0\n        var evenMinCount12 = 0\n        var oddMaxCount12\
    \ = 0\n        var oddMinCount12 = 0\n        var evenMaxCount13 = 0\n       \
    \ var evenMinCount13 = 0\n        var oddMaxCount13 = 0\n        var oddMinCount13\
    \ = 0\n        var evenMaxCount14 = 0\n        var evenMinCount14 = 0\n      \
    \  var oddMaxCount14 = 0\n        var oddMinCount14 = 0\n        var evenMaxCount15\
    \ = 0\n        var evenMinCount15 = 0\n        var oddMaxCount15 = 0\n       \
    \ var oddMinCount15 = 0\n        var evenMaxCount16 = 0\n        var evenMinCount16\
    \ = 0\n        var oddMaxCount16 = 0\n        var oddMinCount16 = 0\n        var\
    \ evenMaxCount17 = 0\n        var evenMinCount17 = 0\n        var oddMaxCount17\
    \ = 0\n        var oddMinCount17 = 0\n        var evenMaxCount", "        val\
    \ evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach { x =>\n            range.foreach\
    \ { y =>\n                if (x % 2 == 0 && y % 2 == 0) {\n                  \
    \  evens += x\n                    evens += y\n                } else if (x %\
    \ 2 != 0 && y % 2 != 0) {\n                    odds += x\n                   \
    \ odds += y\n                }\n            }\n        }\n        evens.foreach\
    \ { x =>\n            even.clear()\n            evens += x\n            even.foreach\
    \ { y =>\n                if (y % 2 == 0) {\n                    evens += y\n\
    \                }\n            }\n        }\n        odds.foreach { x =>\n  \
    \          odd.clear()\n            odds += x\n            odd.foreach { y =>\n\
    \                if (y % 2 != 0) {\n                    odds += y\n          \
    \      }\n            }\n        }\n        even.max", "        var max = 0\n\
    \        var min = x\n        while(min <= y) {\n            val mid = min + (max\
    \ - min) / 2\n            if(mid % 2 == 0) {\n                max = mid\n    \
    \        } else {\n                min = mid\n            }\n        }\n     \
    \   if(max > y) {\n            return -1\n        }\n        return max", "  \
    \      val evens = for (i <- x until y) yield {\n            if (i % 2 == 0) i\
    \ else -1\n        }\n        val maxEven = evens.max\n        if (maxEven ==\
    \ -1L) -1L\n        else maxEven", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val evensSize = x - y\n     \
    \   val oddsSize = y - x\n        val evensNum = evensSize / 2\n        val oddsNum\
    \ = oddsSize / 2\n        val evensNum2 = evensNum * evensNum\n        val oddsNum2\
    \ = oddsNum * oddsNum\n        val evensNum3 = evensNum2 * evensNum\n        val\
    \ oddsNum3 = oddsNum2 * oddsNum\n        val evensNum4 = evensNum3 * evensNum\n\
    \        val oddsNum4 = oddsNum3 * oddsNum\n        val evensNum5 = evensNum4\
    \ * evensNum\n        val oddsNum5 = oddsNum4 * oddsNum\n        val evensNum6\
    \ = evensNum5 * evensNum\n        val oddsNum6 = oddsNum5 * oddsNum\n        val\
    \ evensNum7 = evensNum6 * evensNum\n        val oddsNum7 = oddsNum6 * oddsNum\n\
    \        val evensNum8 = evensNum7 * evensNum\n        val oddsNum8 = oddsNum7\
    \ * oddsNum\n        val evensNum9 = evensNum8 * evensNum\n        val oddsNum9\
    \ = oddsNum8 * oddsNum\n        val evensNum10 = evensNum9 * evensNum\n      \
    \  val oddsNum10 = oddsNum9 * oddsNum\n        val evensNum11 = evensNum10 * evensNum\n\
    \        val oddsNum11 = oddsNum10 * oddsNum\n        val evensNum12 = evensNum11\
    \ * evensNum\n        val oddsNum12 = oddsNum11 * oddsNum\n        val evensNum13\
    \ = evensNum12 * evensNum\n        val oddsNum13 = oddsNum12 * oddsNum\n     \
    \   val evensNum14 = evensNum13 * evensNum\n        val oddsNum14 = oddsNum13\
    \ * oddsNum\n        val evensNum15 = evensNum14 * evensNum\n        val oddsNum15\
    \ = oddsNum14 * oddsNum\n        val evensNum16 = evensNum15 * evensNum\n    \
    \    val oddsNum16 = oddsNum15 * oddsNum\n        val evens", "        val evens\
    \ = x to y by 2\n        val evensSorted = evens.toList\n        val evensSorted\
    \ = evensSorted.sortBy(_)\n        val evensSorted = evensSorted.reverse\n   \
    \     val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ > x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ > x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ > x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ > x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ > x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ > x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ > x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ > x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ > x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ > x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evens", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n        range.foreach(x\
    \ => {\n            if (x % 2 == 0) {\n                evens += x\n          \
    \  } else {\n                odds += x\n            }\n        })\n        val\
    \ even = evens.max\n        val odd = odds.max\n        if (even > odd) {\n  \
    \          return even\n        } else {\n            return -1\n        }", " \
    \       val evens = for (i <- x until y) yield {\n            if (i % 2 == 0)\
    \ i else -1\n        }\n        val evensSorted = evens.toList\n        val evensSortedSorted:\
    \ Seq[Long] = evensSorted.sortBy(_)\n        val evensSortedSortedSorted: Seq[Long]\
    \ = evensSortedSorted.reverse\n        val evensSortedSortedSortedSorted: Seq[Long]\
    \ = evensSortedSortedSorted.takeWhile(_ < y)\n        val evensSortedSortedSortedSortedSorted:\
    \ Seq[Long] = evensSortedSortedSortedSorted.takeWhile(_ >= y)\n        val evensSortedSortedSortedSortedSortedSorted:\
    \ Seq[Long] = evensSortedSortedSortedSortedSorted.takeWhile(_ <= y)\n        val\
    \ evensSortedSortedSortedSortedSortedSortedSorted: Seq[Long] = evensSortedSortedSortedSortedSortedSorted.takeWhile(_\
    \ >= y)\n        val evensSortedSortedSortedSortedSortedSortedSortedSorted: Seq[Long]\
    \ = evensSortedSortedSortedSortedSortedSortedSortedSorted.takeWhile(_ <= y)\n\
    \        val evensSortedSortedSortedSortedSortedSortedSortedSorted: Seq[Long]\
    \ = evensSortedSortedSortedSortedSortedSortedSortedSorted.takeWhile(_ >= y)\n\
    \        val evensSortedSortedSortedSortedSortedSortedSortedSortedSorted: Seq[Long]\
    \ = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.takeWhile(_\
    \ <= y)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Long] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.takeWhile(_\
    \ >= y)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Long] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.takeWhile(_\
    \ <= y)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Long] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.takeWhile(_\
    \ >= y)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Long] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.takeWhile(_\
    \ <= y)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Long] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.takeWhile(_\
    \ >= y)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Long] = evensSorted", "        val evens = for (i <- x until y) yield {\n\
    \            if (i % 2 == 0) i\n            else -1\n        }\n        val maxEven\
    \ = evens.max\n        if (maxEven != -1) return maxEven\n        else -1", " \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensCount = mutable.ListBuffer[Long]()\n        val oddsCount =\
    \ mutable.ListBuffer[Long]()\n        val evensCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount2 = mutable.ListBuffer[Long]()\n        val evensCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount3 = mutable.ListBuffer[Long]()\n\
    \        val evensCount4 = mutable.ListBuffer[Long]()\n        val oddsCount4\
    \ = mutable.ListBuffer[Long]()\n        val evensCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount5 = mutable.ListBuffer[Long]()\n        val evensCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount6 = mutable.ListBuffer[Long]()\n\
    \        val evensCount7 = mutable.ListBuffer[Long]()\n        val oddsCount7\
    \ = mutable.ListBuffer[Long]()\n        val evensCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount8 = mutable.ListBuffer[Long]()\n        val evensCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount9 = mutable.ListBuffer[Long]()\n\
    \        val evensCount10 = mutable.ListBuffer[Long]()\n        val oddsCount10\
    \ = mutable.ListBuffer[Long]()\n        val evensCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount11 = mutable.ListBuffer[Long]()\n        val evensCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount12 = mutable.ListBuffer[Long]()\n\
    \        val evensCount13 = mutable.ListBuffer[Long]()\n        val oddsCount13\
    \ = mutable.ListBuffer[Long]()\n        val evensCount14 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount14 = mutable.ListBuffer[Long]()\n        val evensCount15\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount15 = mutable.ListBuffer[Long]()\n\
    \        val evensCount16 = mutable.ListBuffer[Long]()\n        val oddsCount16\
    \ = mutable.ListBuffer[Long]()\n", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach { x =>\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ < odd) {\n            even\n        } else {\n            -1\n        }", " \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenOdd = mutable.ListBuffer[Long]()\n        val evenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEven = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEven = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n  \
    \      val evenOddEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n \
    \       val evenOddEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.List",
  "        var maxEven = math.max(x, y)\n        var minEven = math.min(x, y)\n  \
    \      var even = 0\n        var odd = 0\n        var evenMax = 0\n        var\
    \ oddMax = 0\n        var evenMin = 0\n        var oddMin = 0\n        var evenMaxCount\
    \ = 0\n        var oddMaxCount = 0\n        var evenMinCount = 0\n        var\
    \ oddMinCount = 0\n        while (even < maxEven && odd < minEven) {\n       \
    \     if (even % 2 == 0 && odd % 2 == 0) {\n                evenMax = even\n \
    \               evenMaxCount = 1\n            } else if (even % 2 == 0 && odd\
    \ % 2 != 0) {\n                evenMax = even\n                evenMaxCount =\
    \ 1\n            } else if (even % 2 != 0 && odd % 2 == 0) {\n               \
    \ evenMax = even\n                evenMaxCount = 1\n            } else if (even\
    \ % 2 != 0 && odd % 2 != 0) {\n                evenMax = even\n              \
    \  evenMaxCount = 1\n            }\n            if (even % 2 != 0 && odd % 2 !=\
    \ 0) {\n                oddMax = odd\n                oddMaxCount = 1\n      \
    \      } else if (even % 2 == 0 && odd % 2 != 0) {\n                oddMax = odd\n\
    \                oddMaxCount = 1\n            } else if (even % 2 != 0 && odd\
    \ % 2 == 0) {\n                oddMax = odd\n                oddMaxCount = 1\n\
    \            } else if (even % 2 != 0 && odd % 2 != 0) {\n                oddMax\
    \ = odd\n                oddMaxCount = 1\n            }\n            if (even\
    \ % 2 == 0 && odd % 2 == 0) {\n                evenMin = even\n              \
    \  evenMinCount = 1\n            } else if (even % 2 == 0 && odd % 2 != 0) {\n\
    \                evenMin = even\n                evenMinCount = 1\n          \
    \  } else if (even % 2 != 0 && odd % 2 == 0) {\n                evenMin = even\n\
    \                evenMinCount = 1\n            } else if (even % 2 != 0 && odd\
    \ % 2 != 0) {\n                evenMin = even\n                evenMinCount =\
    \ 1\n            }\n            if (even % 2 != 0 && odd % 2 != 0) {\n       \
    \         oddMin = odd\n                oddMinCount = 1\n            } else if\
    \ (even % 2 == 0 && odd % 2 != 0) {\n                oddMin = odd\n          \
    \      oddMinCount = 1\n            } else if (even % 2 != 0 && odd % 2 == 0)\
    \ {\n                oddMin = odd\n                oddMinCount = 1\n         \
    \   } else if (even % 2 != 0 && odd % 2 != 0) {\n                oddMin = odd\n\
    \                oddMinCount = 1\n            }\n            even += 1\n     \
    \       odd += 1\n        }\n        if (evenMaxCount == oddMaxCount) {\n    \
    \        return evenMax\n        } else if (evenMaxCount > oddMaxCount) {\n  \
    \          return evenMax\n        } else {\n            return oddMax\n     \
    \   }", "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        if (evens.size == 0 && odds.size\
    \ == 0) {\n            return -1\n        } else if (evens.size == 0) {\n    \
    \        return odds.head\n        } else if (odds.size == 0) {\n            return\
    \ evens.head\n        } else {\n            val even = evens.head\n          \
    \  val odd = odds.head\n            val evenIndex = evens.indexOf(0)\n       \
    \     val oddIndex = odds.indexOf(0)\n            if (evenIndex < oddIndex) {\n\
    \                return even\n            } else {\n                return odd\n\
    \            }\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = (x - y).abs \n        val\
    \ evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evenMax = evens.max\n        val oddMax = odds.max\n\
    \        if (evenMax == evens.min && oddMax == odds.min) {\n            return\
    \ evenMax\n        }\n        if (evenMax == evens.min && oddMax == odds.max)\
    \ {\n            return -1l\n        }\n        if (evenMax == evens.max && oddMax\
    \ == odds.min) {\n            return -1l\n        }\n        if (evenMax == evens.max\
    \ && oddMax == odds.max) {\n            return -1l\n        }\n        -1l", " \
    \       val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = (x to y).filter(_ % 2 == 0)\n        range.foreach(x => if\
    \ (x % 2 == 0) evens += x else odds += x)\n        val even = evens.max\n    \
    \    val odd = odds.max\n        if (even > odd) even else odd", "        val\
    \ evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOdds = mutable.ListBuffer[Long]()\n        val evensAndOddsSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSet = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSet = mutable.Set[Long]()\n        val\
    \ evensAndOddsSetSetSetSetSetSetSet = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n \
    \       val evensAndOddsSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n  \
    \      val evensAndOddsSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSet", "        val evens = for (i\
    \ <- x until y) yield {\n            if (i % 2 == 0) i else -1\n        }\n  \
    \      val maxEven = evens.max\n        if (maxEven == -1L) -1L else maxEven",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs()\n        val evenRange = range.filter(_ % 2\
    \ == 0)\n        val oddRange = range.filter(_ % 2 != 0)\n        evenRange foreach\
    \ { x => evens += x }\n        oddRange foreach { x => odds += x }\n        evens.max",
  "        val evens = x to y by 2\n        val evensSorted = evens.toList\n     \
    \   val evensSortedSorted: Seq[Long] = evensSorted.sort\n        val evensSortedSortedLast\
    \ = evensSortedSorted.last\n        val evensSortedSortedLastIndex = evensSortedSorted.lastIndex\n\
    \        val evensSortedSortedLastIndex2 = evensSortedSorted.lastIndexWhere(_\
    \ % 2 == 0)\n        val evensSortedSortedLastIndex3 = evensSortedSorted.lastIndexWhere(_\
    \ % 3 == 0)\n        val evensSortedSortedLastIndex4 = evensSortedSorted.lastIndexWhere(_\
    \ % 4 == 0)\n        val evensSortedSortedLastIndex5 = evensSortedSorted.lastIndexWhere(_\
    \ % 5 == 0)\n        val evensSortedSortedLastIndex6 = evensSortedSorted.lastIndexWhere(_\
    \ % 6 == 0)\n        val evensSortedSortedLastIndex7 = evensSortedSorted.lastIndexWhere(_\
    \ % 7 == 0)\n        val evensSortedSortedLastIndex8 = evensSortedSorted.lastIndexWhere(_\
    \ % 8 == 0)\n        val evensSortedSortedLastIndex9 = evensSortedSorted.lastIndexWhere(_\
    \ % 9 == 0)\n        val evensSortedSortedLastIndex10 = evensSortedSorted.lastIndexWhere(_\
    \ % 10 == 0)\n        val evensSortedSortedLastIndex11 = evensSortedSorted.lastIndexWhere(_\
    \ % 11 == 0)\n        val evensSortedSortedLastIndex12 = evensSortedSorted.lastIndexWhere(_\
    \ % 12 == 0)\n        val evensSortedSortedLastIndex13 = evensSortedSorted.lastIndexWhere(_\
    \ % 13 == 0)\n        val evensSortedSortedLastIndex14 = evensSortedSorted.lastIndexWhere(_\
    \ % 14 == 0)\n        val evensSortedSortedLastIndex15 = evensSortedSorted.lastIndexWhere(_\
    \ % 15 == 0)\n        val evensSortedSortedLastIndex16 = evensSortedSorted.lastIndexWhere(_\
    \ % 16 == 0)\n        val evensSortedSortedLastIndex17 = evensSortedSorted.lastIndexWhere(_\
    \ % 17 == 0)\n        val evensSortedSortedLastIndex18 = evensSortedSorted.lastIndexWhere(_\
    \ % 18 == 0)\n        val evensSortedSortedLastIndex19 = evensSortedSorted.lastIndexWhere(_\
    \ % 19 == 0)\n        val evensSortedSortedLastIndex20 = evensSortedSorted.lastIndexWhere(_\
    \ % 20 == 0)\n        val evensSortedSortedLastIndex21 = evensSortedSorted.lastIndexWhere(_\
    \ % 21", "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for(i <- range) {\n            if((i\
    \ % 2) == 0) {\n                evens += i\n            } else {\n           \
    \     odds += i\n            }\n        }\n        val even = evens.max\n    \
    \    val odd = odds.max\n        if(even > odd) {\n            return even\n \
    \       } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val evensAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsSum = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsSumSumSumSum = mutable.ListBuffer[Long]()\n        val\
    \ evensAndOddsSumSumSumSumSum = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSum", "     \
    \   val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val even = mutable.Set[Long]()\n        val odd = mutable.Set[Long]()\n\
    \        val evenEvens = mutable.Set[Long]()\n        val evenOdds = mutable.Set[Long]()\n\
    \        val oddEvens = mutable.Set[Long]()\n        val oddOdds = mutable.Set[Long]()\n\
    \        val evenOddEvens = mutable.Set[Long]()\n        val oddEvenOdds = mutable.Set[Long]()\n\
    \        val evenOddEvenOdds = mutable.Set[Long]()\n        val oddEvenOddEvenOdds\
    \ = mutable.Set[Long]()\n        val evenOddEvenOddEvenOdds = mutable.Set[Long]()\n\
    \        val oddEvenOddEvenOddEvenOdds = mutable.Set[Long]()\n        val evenOddEvenOddEvenOddEvenOdds\
    \ = mutable.Set[Long]()\n        val oddEvenOddEvenOddEvenOddEvenOdds = mutable.Set[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOdds = mutable.Set[Long]()\n    \
    \    val oddEvenOddEvenOddEvenOddEvenOddEvenOdds = mutable.Set[Long]()\n     \
    \   val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdds = mutable.Set[Long]()\n  \
    \      val oddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdds = mutable.Set[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdds = mutable.Set[Long]()\n\
    \        val oddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdds = mutable.Set[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdds = mutable.Set[Long]()\n\
    \        val oddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdds = mutable.Set[Long]()\n\
    \        val evenOddEvenOddEven", "        val evens = x to y by 2\n        val\
    \ evensCount = evens.count(_ % 2 == 0)\n        if (evensCount == 0) {\n     \
    \       return -1\n        }\n        val evensMax = evens.max\n        if (evensMax\
    \ % 2 == 0) {\n            return evensMax\n        }\n        val evensMin =\
    \ evens.min\n        if (evensMin % 2 == 0) {\n            return evensMin\n \
    \       }\n        val evensSum = evens.sum\n        if (evensSum % 2 == 0) {\n\
    \            return evensSum\n        }\n        val evensProduct = evens.product\n\
    \        if (evensProduct % 2 == 0) {\n            return evensProduct\n     \
    \   }\n        val evensProduct2 = evens.product\n        if (evensProduct2 %\
    \ 2 == 0) {\n            return evensProduct2\n        }\n        val evensProduct3\
    \ = evens.product\n        if (evensProduct3 % 2 == 0) {\n            return evensProduct3\n\
    \        }\n        val evensProduct4 = evens.product\n        if (evensProduct4\
    \ % 2 == 0) {\n            return evensProduct4\n        }\n        val evensProduct5\
    \ = evens.product\n        if (evensProduct5 % 2 == 0) {\n            return evensProduct5\n\
    \        }\n        val evensProduct6 = evens.product\n        if (evensProduct6\
    \ % 2 == 0) {\n            return evensProduct6\n        }\n        val evensProduct7\
    \ = evens.product\n        if (evensProduct7 % 2 == 0) {\n            return evensProduct7\n\
    \        }\n        val evensProduct8 = evens.product\n        if (evensProduct8\
    \ % 2 == 0) {\n            return evensProduct8\n        }\n        val evensProduct9\
    \ = evens.product\n        if (evensProduct9 % 2 == 0) {\n            return evensProduct9\n\
    \        }\n        val evensProduct10 = evens.product\n        if (evensProduct10\
    \ % 2 == 0) {\n            return evensProduct10\n        }\n        val evensProduct11\
    \ = evens.product\n        if (evensProduct11 % 2 == 0) {\n            return\
    \ evensProduct11\n        }\n        val evensProduct12 = evens.product\n    \
    \    if (evensProduct12 % 2 == 0) {\n            return evensProduct12\n     \
    \   }\n        val evensProduct13 = evens.product\n        if (evensProduct13\
    \ % 2 == 0) {\n            return evensProduct13\n        }\n        val evensProduct14\
    \ = evens.product\n        if (evensProduct14 % 2 == 0) {\n            return\
    \ evensProduct14\n        }\n        val evensProduct15 = evens.product\n    \
    \    if (evensProduct15 % 2 == 0) {\n            return evensProduct", "     \
    \   val evens = x filter (_ % 2 == 0)\n        val odds = x filter (_ % 2 != 0)\n\
    \        val evensSum = evens.sum\n        val oddsSum = odds.sum\n        if\
    \ (evensSum > oddsSum) {\n            evens\n        } else if (evensSum < oddsSum)\
    \ {\n            odds\n        } else {\n            -1\n        }", "       \
    \ val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenInRange = mutable.ListBuffer[Long]()\n        val oddInRange\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange2 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange2 = mutable.ListBuffer[Long]()\n        val evenInRange3\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange3 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange4 = mutable.ListBuffer[Long]()\n        val oddInRange4\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange5 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange5 = mutable.ListBuffer[Long]()\n        val evenInRange6\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange6 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange7 = mutable.ListBuffer[Long]()\n        val oddInRange7\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange8 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange8 = mutable.ListBuffer[Long]()\n        val evenInRange9\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange9 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange10 = mutable.ListBuffer[Long]()\n        val oddInRange10\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange11 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange11 = mutable.ListBuffer[Long]()\n        val evenInRange12\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange12 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange13 = mutable.ListBuffer[Long]()\n        val oddInRange13\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange14 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange14 = mutable.ListBuffer[Long]()\n        val evenInRange15\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange15 = mutable.ListBuffer[Long]()\n\
    \        val evenIn", "        val evens = x until y by 2\n        val evensCount\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount == 0) -1\n        else evens.max",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val evenNums = mutable.ListBuffer[Long]()\n\
    \        val oddNums = mutable.ListBuffer[Long]()\n        val evenOdds = mutable.ListBuffer[Long]()\n\
    \        val evenOddsNums = mutable.ListBuffer[Long]()\n        val evenOddsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNums = mutable.ListBuffer[Long]()\n\
    \        val evenOddsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n        val\
    \ evenOddsNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNums", "        val evens\
    \ = x to y by 2\n        val evensCount = evens.count(_ % 2 == 0)\n        if\
    \ (evensCount == 0) -1\n        else evens.max", "        val evens = x to y by\
    \ 2\n        val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount\
    \ == 0) {\n            return -1\n        }\n        val maxEven = evens.max\n\
    \        if (maxEven % 2 == 0) {\n            return maxEven\n        }\n    \
    \    val maxEven2 = maxEven / 2\n        if (maxEven2 % 2 == 0) {\n          \
    \  return maxEven2\n        }\n        val maxEven3 = maxEven2 / 2\n        if\
    \ (maxEven3 % 2 == 0) {\n            return maxEven3\n        }\n        val maxEven4\
    \ = maxEven3 / 2\n        if (maxEven4 % 2 == 0) {\n            return maxEven4\n\
    \        }\n        val maxEven5 = maxEven4 / 2\n        if (maxEven5 % 2 == 0)\
    \ {\n            return maxEven5\n        }\n        val maxEven6 = maxEven5 /\
    \ 2\n        if (maxEven6 % 2 == 0) {\n            return maxEven6\n        }\n\
    \        val maxEven7 = maxEven6 / 2\n        if (maxEven7 % 2 == 0) {\n     \
    \       return maxEven7\n        }\n        val maxEven8 = maxEven7 / 2\n    \
    \    if (maxEven8 % 2 == 0) {\n            return maxEven8\n        }\n      \
    \  val maxEven9 = maxEven8 / 2\n        if (maxEven9 % 2 == 0) {\n           \
    \ return maxEven9\n        }\n        val maxEven10 = maxEven9 / 2\n        if\
    \ (maxEven10 % 2 == 0) {\n            return maxEven10\n        }\n        val\
    \ maxEven11 = maxEven10 / 2\n        if (maxEven11 % 2 == 0) {\n            return\
    \ maxEven11\n        }\n        val maxEven12 = maxEven11 / 2\n        if (maxEven12\
    \ % 2 == 0) {\n            return maxEven12\n        }\n        val maxEven13\
    \ = maxEven12 / 2\n        if (maxEven13 % 2 == 0) {\n            return maxEven13\n\
    \        }\n        val maxEven14 = maxEven13 / 2\n        if (maxEven14 % 2 ==\
    \ 0) {\n            return maxEven14\n        }\n        val maxEven15 = maxEven14\
    \ / 2\n        if (maxEven15 % 2 == 0) {\n            return maxEven15\n     \
    \   }\n        val maxEven16 = maxEven15 / 2\n        if (maxEven16 % 2 == 0)\
    \ {\n            return maxEven16\n        }\n        val maxEven17 = maxEven16\
    \ / 2\n        if (maxEven17 % 2 == 0) {\n            return maxEven17\n     \
    \   }\n        val maxEven18 = maxEven17 / 2\n        if (maxEven18 % 2 == 0)\
    \ {\n            return maxEven18\n        }\n        val maxEven19 = maxEven18",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val evenNums = mutable.ListBuffer[Long]()\n\
    \        val oddNums = mutable.ListBuffer[Long]()\n        val evenOdds = mutable.ListBuffer[Long]()\n\
    \        val evenOddsNums = mutable.ListBuffer[Long]()\n        val evenOddsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNums = mutable.ListBuffer[Long]()\n\
    \        val evenOddsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n        val\
    \ evenOddsNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsNumsNums", "        val evens\
    \ = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n        val range\
    \ = (x to y).filter(_ % 2 == 0)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x)\n        range.foreach(x => if (x % 2 == 1) odds += x)\n        val even\
    \ = evens.max\n        val odd = odds.max\n        if (even > odd) even else -1",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = range.filter(_ % 2\
    \ == 0)\n        val oddRange = range.filter(_ % 2 != 0)\n        evenRange foreach\
    \ { x => evens += x }\n        oddRange foreach { x => odds += x }\n        val\
    \ evenMax = evens.max\n        val oddMax = odds.max\n        if (evenMax < oddMax)\
    \ {\n            evenMax\n        } else {\n            oddMax\n        }", " \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        val even = evens.max\n     \
    \   val odd = odds.max\n        if (even < odd) {\n            return even\n \
    \       } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenEvens = mutable.ListBuffer[Long]()\n\
    \        val evenOdds = mutable.ListBuffer[Long]()\n        val oddEvens = mutable.ListBuffer[Long]()\n\
    \        val oddOdds = mutable.ListBuffer[Long]()\n        val evenEvensOdds =\
    \ mutable.ListBuffer[Long]()\n        val evenOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val oddEvensOdds = mutable.ListBuffer[Long]()\n        val oddOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evenEvensOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evenOddsOddsOdds = mutable.ListBuffer[Long]()\n        val oddEvensOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val oddOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evenEvensOddsOddsOdds = mutable.ListBuffer[Long]()\n        val evenOddsOddsOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val oddEvensOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val oddOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n        val evenEvensOddsOddsOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val oddEvensOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n        val\
    \ oddOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n        val evenEvensOddsOddsOddsOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsOddsOddsOddsOddsOdds = ",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach { i =>\n            if\
    \ (i % 2 == 0) {\n                evens += i\n            } else {\n         \
    \       odds += i\n            }\n        }\n        val even = evens.max\n  \
    \      val odd = odds.max\n        if (even > odd) {\n            return even\n\
    \        } else {\n            return -1\n        }", "        val evens = x to\
    \ y by 2\n        val evensSorted = evens.toList\n        val evensSortedSorted:\
    \ mutable.ListBuffer[Long] = new mutable.ListBuffer[Long]()\n        evensSorted.foreach(x\
    \ => evensSortedSorted += x)\n        evensSortedSorted.sortWith(_ < _)\n    \
    \    evensSortedSorted.lastOption.getOrElse(-1)", "        val evens = x filter\
    \ (_ % 2 == 0)\n        val odds = x filter (_ % 2 != 0)\n        val evensOdds\
    \ = evens ++ odds\n        evensOdds.max", "        val evens = x to y by 2\n\
    \        val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount == 0)\
    \ -1\n        else evens.max", "        var even = 0\n        var odd = 0\n  \
    \      var evenMax = 0\n        var oddMax = 0\n        var evenMin = 0\n    \
    \    var oddMin = 0\n        var evenMaxIndex = 0\n        var oddMaxIndex = 0\n\
    \        var evenMinIndex = 0\n        var oddMinIndex = 0\n        var evenMaxIndex2\
    \ = 0\n        var oddMaxIndex2 = 0\n        var evenMinIndex2 = 0\n        var\
    \ oddMinIndex2 = 0\n        var evenMaxIndex3 = 0\n        var oddMaxIndex3 =\
    \ 0\n        var evenMinIndex3 = 0\n        var oddMinIndex3 = 0\n        var\
    \ evenMaxIndex4 = 0\n        var oddMaxIndex4 = 0\n        var evenMinIndex4 =\
    \ 0\n        var oddMinIndex4 = 0\n        var evenMaxIndex5 = 0\n        var\
    \ oddMaxIndex5 = 0\n        var evenMinIndex5 = 0\n        var oddMinIndex5 =\
    \ 0\n        var evenMaxIndex6 = 0\n        var oddMaxIndex6 = 0\n        var\
    \ evenMinIndex6 = 0\n        var oddMinIndex6 = 0\n        var evenMaxIndex7 =\
    \ 0\n        var oddMaxIndex7 = 0\n        var evenMinIndex7 = 0\n        var\
    \ oddMinIndex7 = 0\n        var evenMaxIndex8 = 0\n        var oddMaxIndex8 =\
    \ 0\n        var evenMinIndex8 = 0\n        var oddMinIndex8 = 0\n        var\
    \ evenMaxIndex9 = 0\n        var oddMaxIndex9 = 0\n        var evenMinIndex9 =\
    \ 0\n        var oddMinIndex9 = 0\n        var evenMaxIndex10 = 0\n        var\
    \ oddMaxIndex10 = 0\n        var evenMinIndex10 = 0\n        var oddMinIndex10\
    \ = 0\n        var evenMaxIndex11 = 0\n        var oddMaxIndex11 = 0\n       \
    \ var evenMinIndex11 = 0\n        var oddMinIndex11 = 0\n        var evenMaxIndex12\
    \ = 0\n        var oddMaxIndex12 = 0\n        var evenMinIndex12 = 0\n       \
    \ var oddMinIndex12 = 0\n        var evenMaxIndex13 = 0\n        var oddMaxIndex13\
    \ = 0\n        var evenMinIndex13 = 0\n        var oddMinIndex13 = 0\n       \
    \ var evenMaxIndex14 = 0\n        var oddMaxIndex14 = 0\n        var evenMinIndex14\
    \ = 0\n        var oddMinIndex14 = 0\n        var evenMaxIndex15 = 0\n       \
    \ var oddMaxIndex15 = 0\n        var evenMinIndex15 = 0\n        var oddMinIndex15\
    \ = 0\n        var evenMaxIndex16 = 0\n        var oddMaxIndex16 = 0\n       \
    \ var evenMinIndex16 = 0\n        var oddMinIndex16 = 0\n        var evenMaxIndex17\
    \ = 0\n        var oddMaxIndex17 = 0\n        var evenMinIndex17 = 0\n       \
    \ var oddMinIndex17 = 0\n        var evenMaxIndex18 = 0\n        var oddMaxIndex18",
  "        val evens = x to y by 2\n        val evensCount = evens.count(_ % 2 ==\
    \ 0)\n        if (evensCount == 0) {\n            return -1\n        }\n     \
    \   val maxEven = evens.max\n        if (maxEven % 2 == 0) {\n            return\
    \ maxEven\n        }\n        val maxEven2 = maxEven / 2\n        val evensCount2\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount2 == 0) {\n            return\
    \ -1\n        }\n        val maxEven3 = maxEven2 / 2\n        val evensCount3\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount3 == 0) {\n            return\
    \ -1\n        }\n        val maxEven4 = maxEven3 / 2\n        val evensCount4\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount4 == 0) {\n            return\
    \ -1\n        }\n        val maxEven5 = maxEven4 / 2\n        val evensCount5\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount5 == 0) {\n            return\
    \ -1\n        }\n        val maxEven6 = maxEven5 / 2\n        val evensCount6\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount6 == 0) {\n            return\
    \ -1\n        }\n        val maxEven7 = maxEven6 / 2\n        val evensCount7\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount7 == 0) {\n            return\
    \ -1\n        }\n        val maxEven8 = maxEven7 / 2\n        val evensCount8\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount8 == 0) {\n            return\
    \ -1\n        }\n        val maxEven9 = maxEven8 / 2\n        val evensCount9\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount9 == 0) {\n            return\
    \ -1\n        }\n        val maxEven10 = maxEven9 / 2\n        val evensCount10\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount10 == 0) {\n            return\
    \ -1\n        }\n        val maxEven11 = maxEven10 / 2\n        val evensCount11\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount11 == 0) {\n            return\
    \ -1\n        }\n        val maxEven12 = maxEven11 / 2\n        val evensCount12\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount12 == 0) {\n            return\
    \ -1\n        }\n        val maxEven13 = maxEven12 / 2\n        val evensCount13\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount13 == 0) {\n            return\
    \ -1\n        }\n        val maxEven14 = maxEven13 / 2", "        val evens =\
    \ for (i <- x until y) yield {\n            if (i % 2 == 0) i else -1\n      \
    \  }\n        val maxEven = evens.max\n        if (maxEven != -1) return maxEven\n\
    \        else return -1", "        val evens = x until y by 2\n        val evensCount\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount == 0) -1\n        else evens.max",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs.toInt\n        val evenRange = range / 2\n  \
    \      val oddRange = range % 2\n        val even = x + evenRange\n        val\
    \ odd = x + oddRange\n        while (even < y) {\n            evens += even\n\
    \            even += evenRange\n        }\n        while (odd < y) {\n       \
    \     odds += odd\n            odd += oddRange\n        }\n        if (evens.isEmpty)\
    \ {\n            -1\n        } else if (evens.size == 1) {\n            evens.head\n\
    \        } else {\n            evens.max\n        }", "        val evens = x to\
    \ y by 2\n        val evensSorted = evens.toList\n        val evensSorted = evensSorted.sortBy(_)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ <= y)\n        val evensSorted = evensSorted.takeWhile(_ >= x)\n        val\
    \ evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.head\n\
    \        evensSorted", "        val evens = x filter (_ % 2 == 0)\n        val\
    \ odds = x filter (_ % 2 != 0)\n        val evensOdds = evens ++ odds\n      \
    \  val evensOddsSum = evensOdds.sum\n        if (evensOddsSum < y) -1\n      \
    \  else if (evensOddsSum > y) evensOddsSum\n        else evensOddsSum", "    \
    \    val evens = for (i <- 1 to y) yield {\n            if (i % 2 == 0) i\n  \
    \          else -1\n        }\n        val evensSorted = evens.toSeq.sortBy(_).reverse\n\
    \        val evensSortedIndex = evensSorted.indexWhere(_ > x)\n        if (evensSortedIndex\
    \ == -1) -1\n        else evensSorted(evensSortedIndex)", "        val evens =\
    \ mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n        val range\
    \ = (x - y).abs \n        val evenRange = range.filter(_ % 2 == 0)\n        val\
    \ oddRange = range.filter(_ % 2 != 0)\n        evenRange foreach { x => evens\
    \ += x }\n        oddRange foreach { x => odds += x }\n        val even = evens.max\n\
    \        val odd = odds.max\n        if (even < odd) even else odd", "       \
    \ val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = range.filter(_ % 2\
    \ == 0)\n        val oddRange = range.filter(_ % 2 != 0)\n        evenRange foreach\
    \ { x => evens += x }\n        oddRange foreach { x => odds += x }\n        evens.max",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenOdd = mutable.ListBuffer[Long]()\n        val evenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO",
  "        val evens = x to y by 2\n        val evensCount = evens.count(_ % 2 ==\
    \ 0)\n        if (evensCount > 0) {\n            evens.max\n        } else {\n\
    \            -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenOrOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOrOddOrBoth = mutable.ListBuffer[Long]()\n        val evenOrOddOrBothOrBoth\
    \ = mutable.ListBuffer[Long]()\n        val evenOrOddOrBothOrBothOrBoth = mutable.ListBuffer[Long]()\n\
    \        val evenOrOddOrBothOrBothOrBothOrBoth = mutable.ListBuffer[Long]()\n\
    \        val evenOrOddOrBothOrBothOrBothOrBothOrBoth = mutable.ListBuffer[Long]()\n\
    \        val evenOrOddOrBothOrBothOrBothOrBothOrBothOrBoth = mutable.ListBuffer[Long]()\n\
    \        val evenOrOddOrBothOrBothOrBothOrBothOrBothOrBothOrBoth = mutable.ListBuffer[Long]()\n\
    \        val evenOrOddOrBothOrBothOrBothOrBothOrBothOrBothOrBoth = mutable.ListBuffer[Long]()\n\
    \        val evenOrOddOrBothOrBothOrBothOrBothOrBothOrBothOrBothOrBoth = mutable.ListBuffer[Long]()\n\
    \        val evenOrOddOrBothOrBothOrBothOrBothOrBothOrBothOrBothOrBothOrBoth =\
    \ mutable.ListBuffer[Long]()\n        val evenOrOddOrBothOrBothOrBothOrBothOrBothOrBothOrBothOrBothOrBoth\
    \ = mutable.ListBuffer[Long]()\n        val evenOrOddOrBothOrBothOrBothOrBothOrBothOrBothOrBothOrBothOrBoth\
    \ = mutable.ListBuffer[Long]()\n        val evenOrOddOrBothOrBothOrBothOrBothOrBothOrBothOrBothOrBothOrBothOrBoth\
    \ = mutable.ListBuffer[Long]()\n        val evenOrOddOrBothOrBothOrBothOrBothOrBothOrBothOrBothOrBothOrBothOrBothOrBoth\
    \ = mutable.ListBuffer[Long]()\n        val evenOrOddOrBothOrBothOrBothOrBothOrBothOrBothOrBothOrBothOrBothOrBothOrBoth\
    \ = mutable.ListBuffer[Long]()\n", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = (x - y).abs.toInt\n\
    \        val evenRange = (range / 2).toInt\n        val oddRange = (range / 2).toInt\n\
    \        val evenRange2 = evenRange * 2\n        val oddRange2 = oddRange * 2\n\
    \        val evenRange3 = evenRange2 * 3\n        val oddRange3 = oddRange2 *\
    \ 3\n        val evenRange4 = evenRange3 * 4\n        val oddRange4 = oddRange3\
    \ * 4\n        val evenRange5 = evenRange4 * 5\n        val oddRange5 = oddRange4\
    \ * 5\n        val evenRange6 = evenRange5 * 6\n        val oddRange6 = oddRange5\
    \ * 6\n        val evenRange7 = evenRange6 * 7\n        val oddRange7 = oddRange6\
    \ * 7\n        val evenRange8 = evenRange7 * 8\n        val oddRange8 = oddRange7\
    \ * 8\n        val evenRange9 = evenRange8 * 9\n        val oddRange9 = oddRange8\
    \ * 9\n        val evenRange10 = evenRange9 * 10\n        val oddRange10 = oddRange9\
    \ * 10\n        val evenRange11 = evenRange10 * 11\n        val oddRange11 = oddRange10\
    \ * 11\n        val evenRange12 = evenRange11 * 12\n        val oddRange12 = oddRange11\
    \ * 12\n        val evenRange13 = evenRange12 * 13\n        val oddRange13 = oddRange12\
    \ * 13\n        val evenRange14 = evenRange13 * 14\n        val oddRange14 = oddRange13\
    \ * 14\n        val evenRange15 = evenRange14 * 15\n        val oddRange15 = oddRange14\
    \ * 15\n        val evenRange16 = evenRange15 * 16\n        val oddRange16 = oddRange15\
    \ * 16\n        val evenRange17 = evenRange16 * 17\n        val oddRange17 = oddRange16\
    \ * 17\n        val evenRange18 = evenRange17 * 18\n        val oddRange18 = oddRange17\
    \ * 18\n        val evenRange19 = evenRange18 * 19\n        val oddRange19 = oddRange18\
    \ * 19\n        val evenRange20 = evenRange19 * 20\n        val oddRange20 = oddRange19\
    \ * 20\n        val evenRange21 = evenRange20 * 21\n        val oddRange21 = oddRange20\
    \ * 21\n        val evenRange22 = evenRange21 * 22", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range / 2\n        val oddRange = range - evenRange\n\
    \        val evens = x until evenRange\n        val odds = y until oddRange\n\
    \        evens foreach { x => evens += x }\n        odds foreach { x => odds +=\
    \ x }\n        val evenMax = evens.max\n        val oddMax = odds.max\n      \
    \  if (evenMax < oddMax) {\n            return evenMax\n        } else {\n   \
    \         return -1\n        }", "        var max = 0\n        var min = 0\n \
    \       for(i <- 0 until y by 2){\n            for(j <- 0 until x by 2){\n   \
    \             if(j % 2 == 0 && j > max && j > min){\n                    max =\
    \ j\n                }\n                if(j % 2 == 0 && j < max && j < min){\n\
    \                    min = j\n                }\n            }\n        }\n  \
    \      if(max > min){\n            return max\n        }\n        return -1",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = range / 2\n       \
    \ val oddRange = range % 2\n        val evenStart = x - evenRange\n        val\
    \ evenEnd = x + evenRange\n        val oddStart = y - oddRange\n        val oddEnd\
    \ = y + oddRange\n        val evens = for (i <- evenStart until evenEnd) yield\
    \ {\n            if (i % 2 == 0) i else -1\n        }\n        val odds = for\
    \ (i <- oddStart until oddEnd) yield {\n            if (i % 2 == 1) i else -1\n\
    \        }\n        val evensAndOdds = evens ++ odds\n        val evensAndOddsSet\
    \ = evensAndOdds.toSet\n        if (evensAndOddsSet.size == 0) -1\n        else\
    \ evensAndOddsSet.max", "        val evens = mutable.ListBuffer[Long]()\n    \
    \    val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n    \
    \    val even = evens.max\n        val odd = odds.max\n        if (even > odd)\
    \ even else odd", "        val evens = x filter (_ % 2 == 0)\n        if (evens.isEmpty)\
    \ -1\n        else evens.max", "        val evens = x to y by 2\n        val evensSorted\
    \ = evens.toList\n        val evensSortedSorted: Seq[Long] = evensSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedLast = evensSortedSorted.last\n        val\
    \ evensSortedSortedLastIndex = evensSortedSorted.lastIndex\n        val evensSortedSortedLastIndex\
    \ = evensSortedSortedLastIndex - 1\n        val evensSortedSortedLastElement =\
    \ evensSortedSortedLast(evensSortedSortedLastIndex)\n        if (evensSortedSortedLastElement\
    \ == evensSortedSortedLastIndex) -1\n        else evensSortedSortedLastElement",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs.toInt\n        val evenRange = (range / 2).toInt\n\
    \        val oddRange = (range / 2).toInt\n        val evens = x to (x + evenRange)\n\
    \        val odds = x to (x + oddRange)\n        evens foreach { x => evens +=\
    \ x }\n        odds foreach { x => odds += x }\n        val evenMax = evens.max\n\
    \        val oddMax = odds.max\n        if (evenMax % 2 == 0 && oddMax % 2 ==\
    \ 0) {\n            return evenMax\n        } else if (evenMax % 2 != 0 && oddMax\
    \ % 2 != 0) {\n            return oddMax\n        } else {\n            return\
    \ -1\n        }", "        var max = 0\n        var min = 0\n        for(i <-\
    \ 0 until x by 2){\n            for(j <- 0 until y by 2){\n                if((i\
    \ + (j / 2)) % 2 == 0){\n                    if(max < j){\n                  \
    \      max = j\n                    }\n                    if(min > j){\n    \
    \                    min = j\n                    }\n                }\n     \
    \       }\n        }\n        if(max == 0){\n            return -1\n        }\n\
    \        if(min == 0){\n            return max\n        }\n        if(max > min){\n\
    \            return max\n        }\n        return -1", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddOdd = mutable.ListBuffer[Long]()\n        val evenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddOddEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddOdd =\
    \ mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOdd", "        val evens = for (i <- x until y) yield\
    \ {\n            if (i % 2 == 0) i else -1\n        }\n        val maxEven = evens.max\n\
    \        if (maxEven == -1) return -1\n        if (maxEven % 2 == 0) maxEven else\
    \ -1", "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = (x - y).abs()\n        val evenRange = range.filter(_ % 2\
    \ == 0)\n        val oddRange = range.filter(_ % 2 != 0)\n        evenRange foreach\
    \ { x => evens += x }\n        oddRange foreach { x => odds += x }\n        val\
    \ evenMax = evens.max\n        val oddMax = odds.max\n        if (evenMax < oddMax)\
    \ {\n            evenMax\n        } else {\n            oddMax\n        }", " \
    \       val evens = x to y by 2\n        val evensSorted = evens.toList\n    \
    \    val evensSortedSorted: mutable.ListBuffer[Long] = new mutable.ListBuffer[Long]()\n\
    \        evensSorted.foreach(x => evensSortedSorted += x)\n        evensSortedSorted.sortWith(_\
    \ < _)\n        evensSortedSorted.lastOption.getOrElse(-1)", "        val evens\
    \ = for (i <- x until y) yield {\n            if (i % 2 == 0) i else -1\n    \
    \    }\n        evens.max", "        val evens = mutable.Set[Long]()\n       \
    \ val odds = mutable.Set[Long]()\n        val nums = mutable.Set[Long]()\n   \
    \     val minX = x.toInt\n        val minY = y.toInt\n        val maxX = minX\
    \ + minX.toInt\n        val maxY = minY + minY.toInt\n        val numX = minX\
    \ + minX.toInt\n        val numY = minY + minY.toInt\n        val even = minX.toInt\n\
    \        val odd = minY.toInt\n        val evens = mutable.Set[Long]()\n     \
    \   val odds = mutable.Set[Long]()\n        val nums = mutable.Set[Long]()\n \
    \       val even = minX.toInt\n        val odd = minY.toInt\n        val evens\
    \ = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n        val nums\
    \ = mutable.Set[Long]()\n        val even = minX.toInt\n        val odd = minY.toInt\n\
    \        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val nums = mutable.Set[Long]()\n        val even = minX.toInt\n     \
    \   val odd = minY.toInt\n        val evens = mutable.Set[Long]()\n        val\
    \ odds = mutable.Set[Long]()\n        val nums = mutable.Set[Long]()\n       \
    \ val even = minX.toInt\n        val odd = minY.toInt\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val nums = mutable.Set[Long]()\n\
    \        val even = minX.toInt\n        val odd = minY.toInt\n        val evens\
    \ = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n        val nums\
    \ = mutable.Set[Long]()\n        val even = minX.toInt\n        val odd = minY.toInt\n\
    \        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val nums = mutable.Set[Long]()\n        val even = minX.toInt\n     \
    \   val odd = minY.toInt\n        val evens = mutable.Set[Long]()\n        val\
    \ odds = ", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = (x - y).abs \n        val\
    \ evenRange = (x % 2) == 0\n        val oddRange = (x % 2) == 1\n        val even\
    \ = (x - y) / 2\n        val odd = (x - y) % 2\n        val evens = x until y\
    \ filter (x % 2 == 0)\n        val odds = x until y filter (x % 2 != 0)\n    \
    \    val evens = evens.toList\n        val odds = odds.toList\n        evens.foreach\
    \ { x =>\n            if (evenRange) {\n                if (x % 2 == 0) {\n  \
    \                  evens += x\n                }\n            }\n        }\n \
    \       odds.foreach { x =>\n            if (oddRange) {\n                if (x\
    \ % 2 == 1) {\n                    odds += x\n                }\n            }\n\
    \        }\n        if (evens.isEmpty) {\n            return -1\n        }\n \
    \       if (evens.size > range.size) {\n            return evens.last\n      \
    \  }\n        if (odds.isEmpty) {\n            return -1\n        }\n        if\
    \ (odds.size > range.size) {\n            return odds.last\n        }\n      \
    \  val even = evens.last\n        val odd = odds.last\n        if (even > odd)\
    \ {\n            return even\n        } else {\n            return odd\n     \
    \   }", "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        val even = evens.max\n     \
    \   val odd = odds.max\n        if (even > odd) {\n            return even\n \
    \       } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val x = x - 1\n      \
    \  val y = y - 1\n        while(x <= y) {\n            val z = (x * x) + y\n \
    \           if(z <= x * y) {\n                evens += z\n                x +=\
    \ 1\n            } else {\n                odds += z\n                y -= 1\n\
    \            }\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if(even > odd) {\n            return even\n        } else {\n       \
    \     return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEven = mutable.ListBuffer[Long]()\n        val evenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEven = mutable.ListBuffer[Long]()\n        val evenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEven =\
    \ mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenO", "        val evens = mutable.Set[Long]()\n        val odds\
    \ = mutable.Set[Long]()\n        val even = mutable.Set[Long]()\n        val odd\
    \ = mutable.Set[Long]()\n        val evenInRange = mutable.Set[Long]()\n     \
    \   val oddInRange = mutable.Set[Long]()\n        val evenInRange2 = mutable.Set[Long]()\n\
    \        val oddInRange2 = mutable.Set[Long]()\n        val evenInRange3 = mutable.Set[Long]()\n\
    \        val oddInRange3 = mutable.Set[Long]()\n        val evenInRange4 = mutable.Set[Long]()\n\
    \        val oddInRange4 = mutable.Set[Long]()\n        val evenInRange5 = mutable.Set[Long]()\n\
    \        val oddInRange5 = mutable.Set[Long]()\n        val evenInRange6 = mutable.Set[Long]()\n\
    \        val oddInRange6 = mutable.Set[Long]()\n        val evenInRange7 = mutable.Set[Long]()\n\
    \        val oddInRange7 = mutable.Set[Long]()\n        val evenInRange8 = mutable.Set[Long]()\n\
    \        val oddInRange8 = mutable.Set[Long]()\n        val evenInRange9 = mutable.Set[Long]()\n\
    \        val oddInRange9 = mutable.Set[Long]()\n        val evenInRange10 = mutable.Set[Long]()\n\
    \        val oddInRange10 = mutable.Set[Long]()\n        val evenInRange11 = mutable.Set[Long]()\n\
    \        val oddInRange11 = mutable.Set[Long]()\n        val evenInRange12 = mutable.Set[Long]()\n\
    \        val oddInRange12 = mutable.Set[Long]()\n        val evenInRange13 = mutable.Set[Long]()\n\
    \        val oddInRange13 = mutable.Set[Long]()\n        val evenInRange14 = mutable.Set[Long]()\n\
    \        val oddInRange14 = mutable.Set[Long]()\n        val evenInRange15 = mutable.Set[Long]()\n\
    \        val oddInRange15 = mutable.Set[Long]()\n        val evenInRange16 = mutable.Set[Long]()\n\
    \        val oddInRange16 = mutable.Set[Long]()\n        val evenInRange17 = mut",
  "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val even = mutable.Set[Long]()\n        val odd = mutable.Set[Long]()\n\
    \        val evenInRange = mutable.Set[Long]()\n        val oddInRange = mutable.Set[Long]()\n\
    \        val evenInRangeAndOdd = mutable.Set[Long]()\n        val oddInRangeAndOdd\
    \ = mutable.Set[Long]()\n        val evenInRangeAndOddAndEven = mutable.Set[Long]()\n\
    \        val oddInRangeAndOddAndEven = mutable.Set[Long]()\n        val evenInRangeAndOddAndEvenAndOdd\
    \ = mutable.Set[Long]()\n        val oddInRangeAndOddAndEvenAndOdd = mutable.Set[Long]()\n\
    \        val evenInRangeAndOddAndEvenAndOddAndEven = mutable.Set[Long]()\n   \
    \     val oddInRangeAndOddAndEvenAndOddAndEven = mutable.Set[Long]()\n       \
    \ val evenInRangeAndOddAndEvenAndOddAndEvenAndOdd = mutable.Set[Long]()\n    \
    \    val oddInRangeAndOddAndEvenAndOddAndEvenAndOdd = mutable.Set[Long]()\n  \
    \      val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEven = mutable.Set[Long]()\n\
    \        val oddInRangeAndOddAndEvenAndOddAndEvenAndOddAndEven = mutable.Set[Long]()\n\
    \        val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = mutable.Set[Long]()\n\
    \        val oddInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = mutable.Set[Long]()\n\
    \        val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven =\
    \ mutable.Set[Long]()\n        val oddInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = mutable.Set[Long]()\n        val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOd",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenInRange = mutable.ListBuffer[Long]()\n        val oddInRange\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange2 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange2 = mutable.ListBuffer[Long]()\n        val evenInRange3\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange3 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange4 = mutable.ListBuffer[Long]()\n        val oddInRange4\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange5 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange5 = mutable.ListBuffer[Long]()\n        val evenInRange6\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange6 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange7 = mutable.ListBuffer[Long]()\n        val oddInRange7\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange8 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange8 = mutable.ListBuffer[Long]()\n        val evenInRange9\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange9 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange10 = mutable.ListBuffer[Long]()\n        val oddInRange10\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange11 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange11 = mutable.ListBuffer[Long]()\n        val evenInRange12\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange12 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange13 = mutable.ListBuffer[Long]()\n        val oddInRange13\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange14 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange14 = mutable.ListBuffer[Long]()\n        val evenInRange15\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange15 = mutable.ListBuffer[Long]()\n\
    \        val evenIn", "        val evens = mutable.Set[Long]()\n        val odds\
    \ = mutable.Set[Long]()\n        val evensAndOdds = mutable.Set[Long]()\n    \
    \    val evensAndOddsAndEvens = mutable.Set[Long]()\n        val evensAndOddsAndOdds\
    \ = mutable.Set[Long]()\n        val evensAndOddsAndOddsAndEvens = mutable.Set[Long]()\n\
    \        val evensAndOddsAndOddsAndOdds = mutable.Set[Long]()\n        val evensAndOddsAndOddsAndOddsAndEvens\
    \ = mutable.Set[Long]()\n        val evensAndOddsAndOddsAndOddsAndOdds = mutable.Set[Long]()\n\
    \        val evensAndOddsAndOddsAndOddsAndOddsAndEvens = mutable.Set[Long]()\n\
    \        val evensAndOddsAndOddsAndOddsAndOddsAndOdds = mutable.Set[Long]()\n\
    \        val evensAndOddsAndOddsAndOddsAndOddsAndOddsAndEvens = mutable.Set[Long]()\n\
    \        val evensAndOddsAndOddsAndOddsAndOddsAndOddsAndOdds = mutable.Set[Long]()\n\
    \        val evensAndOddsAndOddsAndOddsAndOddsAndOddsAndEvens = mutable.Set[Long]()\n\
    \        val evensAndOddsAndOddsAndOddsAndOddsAndOddsAndOdds = mutable.Set[Long]()\n\
    \        val evensAndOddsAndOddsAndOddsAndOddsAndOddsAndEvens = mutable.Set[Long]()\n\
    \        val evensAndOddsAndOddsAndOddsAndOddsAndOddsAndOddsAndEvens = mutable.Set[Long]()\n\
    \        val evensAndOddsAndOddsAndOddsAndOddsAndOddsAndOddsAndOdds = mutable.Set[Long]()\n\
    \        val evensAndOddsAndOddsAndOddsAndOddsAndOddsAndOddsAndEvens = mutable.Set[Long]()\n\
    \        val evensAndOddsAndOddsAndOddsAndOddsAndOddsAndOddsAndOdds = mutable.Set[Long]()\n\
    \        val evensAndOddsAndOddsAndOddsAndOddsAndOddsAndO", "        val evens\
    \ = for (i <- x until y) yield {\n            if (i % 2 == 0) i else -1\n    \
    \    }\n        val maxEven = evens.max\n        if (maxEven == -1) return -1\n\
    \        if (maxEven % 2 == 0) maxEven else -1", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => {\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   })\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            even\n        } else {\n            odd\n        }", " \
    \       val evens = x filter (_ % 2 == 0)\n        val odds = x filter (_ % 2\
    \ != 0)\n        val evensAndOdds = evens ++ odds\n        val evensAndOddsLength\
    \ = evensAndOdds.length\n        val evensAndOddsSum = evensAndOdds.sum\n    \
    \    val evensAndOddsSumLength = evensAndOddsSum.length\n        val evensAndOddsSumLength2\
    \ = evensAndOddsSumLength * evensAndOddsSumLength\n        val evensAndOddsSumLength3\
    \ = evensAndOddsSumLength2 * evensAndOddsSumLength\n        val evensAndOddsSumLength4\
    \ = evensAndOddsSumLength3 * evensAndOddsSumLength\n        val evensAndOddsSumLength5\
    \ = evensAndOddsSumLength4 * evensAndOddsSumLength\n        val evensAndOddsSumLength6\
    \ = evensAndOddsSumLength5 * evensAndOddsSumLength\n        val evensAndOddsSumLength7\
    \ = evensAndOddsSumLength6 * evensAndOddsSumLength\n        val evensAndOddsSumLength8\
    \ = evensAndOddsSumLength7 * evensAndOddsSumLength\n        val evensAndOddsSumLength9\
    \ = evensAndOddsSumLength8 * evensAndOddsSumLength\n        val evensAndOddsSumLength10\
    \ = evensAndOddsSumLength9 * evensAndOddsSumLength\n        val evensAndOddsSumLength11\
    \ = evensAndOddsSumLength10 * evensAndOddsSumLength\n        val evensAndOddsSumLength12\
    \ = evensAndOddsSumLength11 * evensAndOddsSumLength\n        val evensAndOddsSumLength13\
    \ = evensAndOddsSumLength12 * evensAndOddsSumLength\n        val evensAndOddsSumLength14\
    \ = evensAndOddsSumLength13 * evensAndOddsSumLength\n        val evensAndOddsSumLength15\
    \ = evensAndOddsSumLength14 * evensAndOddsSumLength\n        val evensAndOddsSumLength16\
    \ = evensAndOddsSumLength15 * evensAndOddsSumLength\n        val evensAndOddsSumLength17\
    \ = evensAndOddsSumLength16 * evensAndOdds", "        var maxNum = math.max(x,\
    \ y)\n        var minNum = math.min(x, y)\n        var evenNum = 0\n        var\
    \ oddNum = 0\n        while (evenNum < maxNum && oddNum < minNum) {\n        \
    \    if (evenNum % 2 == 0 && oddNum % 2 == 1) {\n                evenNum += 1\n\
    \            } else if (evenNum % 2 != 0 && oddNum % 2 == 1) {\n             \
    \   oddNum += 1\n            } else if (evenNum % 2 != 0 && oddNum % 2 != 0) {\n\
    \                maxNum = math.max(evenNum, oddNum)\n                minNum =\
    \ math.min(evenNum, oddNum)\n                evenNum = 0\n                oddNum\
    \ = 0\n            }\n        }\n        if (evenNum < maxNum && oddNum < minNum)\
    \ {\n            maxNum = math.max(evenNum, oddNum)\n            minNum = math.min(evenNum,\
    \ oddNum)\n        }\n        if (evenNum < maxNum && oddNum == minNum) {\n  \
    \          maxNum = evenNum\n        }\n        if (evenNum == maxNum && oddNum\
    \ < minNum) {\n            maxNum = oddNum\n        }\n        if (evenNum ==\
    \ maxNum && oddNum == minNum) {\n            maxNum = evenNum\n        }\n   \
    \     if (evenNum < maxNum && oddNum == minNum) {\n            maxNum = evenNum\n\
    \        }\n        if (evenNum == maxNum && oddNum == minNum) {\n           \
    \ maxNum = evenNum\n        }\n        if (evenNum < maxNum && oddNum < minNum)\
    \ {\n            maxNum = evenNum\n        }\n        if (evenNum == maxNum &&\
    \ oddNum < minNum) {\n            maxNum = oddNum\n        }\n        if (evenNum\
    \ == maxNum && oddNum == minNum) {\n            maxNum = evenNum\n        }\n\
    \        if (evenNum < maxNum && oddNum == minNum) {\n            maxNum = evenNum\n\
    \        }\n        if (evenNum == maxNum && oddNum == minNum) {\n           \
    \ maxNum = evenNum\n        }\n        if (evenNum < maxNum && oddNum < minNum)\
    \ {\n            maxNum = evenNum\n        }\n        if (evenNum == maxNum &&\
    \ oddNum < minNum) {\n            maxNum = oddNum\n        }\n        if (evenNum\
    \ == maxNum && oddNum == minNum) {\n            maxNum = evenNum\n        }\n\
    \        if (evenNum < maxNum && oddNum == minNum) {\n            maxNum = evenNum\n\
    \        }\n        if (evenNum == maxNum && oddNum == minNum) {\n           \
    \ maxNum = evenNum\n        }\n        if (evenNum < maxNum && oddNum < minNum",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs()\n        val evenRange = range.filter(_ % 2\
    \ == 0)\n        val oddRange = range.filter(_ % 2 == 1)\n        evenRange foreach\
    \ { x => evens += x }\n        oddRange foreach { x => odds += x }\n        val\
    \ evenMax = evens.max\n        val oddMax = odds.max\n        if (evenMax == evenMax\
    \ && oddMax == oddMax) {\n            return evenMax\n        } else {\n     \
    \       return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddOdd = mutable.ListBuffer[Long]()\n        val evenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEven = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenEvenEvenEven = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n   \
    \     val evenOddEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n     \
    \   val evenOddEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n    \
    \    val evenOddEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n  \
    \      val evenOddEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.List",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenInRange = mutable.ListBuffer[Long]()\n        val oddInRange\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange2 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange2 = mutable.ListBuffer[Long]()\n        val evenInRange3\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange3 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange4 = mutable.ListBuffer[Long]()\n        val oddInRange4\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange5 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange5 = mutable.ListBuffer[Long]()\n        val evenInRange6\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange6 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange7 = mutable.ListBuffer[Long]()\n        val oddInRange7\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange8 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange8 = mutable.ListBuffer[Long]()\n        val evenInRange9\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange9 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange10 = mutable.ListBuffer[Long]()\n        val oddInRange10\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange11 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange11 = mutable.ListBuffer[Long]()\n        val evenInRange12\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange12 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange13 = mutable.ListBuffer[Long]()\n        val oddInRange13\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange14 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange14 = mutable.ListBuffer[Long]()\n        val evenInRange15\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange15 = mutable.ListBuffer[Long]()\n\
    \        val evenIn", "        val evens = x to y by 2\n        val evensCount\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount == 0) -1\n        else evens.max",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = range.filter(_ % 2\
    \ == 0)\n        val oddRange = range.filter(_ % 2 != 0)\n        evenRange foreach\
    \ { x => evens += x }\n        oddRange foreach { x => odds += x }\n        evens.max",
  "        val evens = x filter (_ % 2 == 0)\n        val odds = x filter (_ % 2 !=\
    \ 0)\n        val evenMax = evens.max\n        val oddMax = odds.max\n       \
    \ if (evenMax > oddMax) {\n            evenMax\n        } else {\n           \
    \ oddMax\n        }", "        val evens = x to y by 2\n        val evensCount\
    \ = evens.count\n        val evensMax = evens.max\n        val evensMin = evens.min\n\
    \        val evensSum = evens.sum\n        val evensSumOfSquares = evens.map(x\
    \ => x * x).sum\n        val evensSumOfSquaresMax = evensSumOfSquares.max\n  \
    \      val evensSumOfSquaresMin = evensSumOfSquares.min\n        val evensSumOfSquaresSum\
    \ = evensSumOfSquares.sum\n        val evensSumOfSquaresSumOfSquares = evensSumOfSquares.map(x\
    \ => x * x).sum\n        val evensSumOfSquaresSumOfSquaresMax = evensSumOfSquaresSumOfSquares.max\n\
    \        val evensSumOfSquaresSumOfSquaresMin = evensSumOfSquaresSumOfSquares.min\n\
    \        val evensSumOfSquaresSumOfSquaresSum = evensSumOfSquaresSumOfSquares.sum\n\
    \        val evensSumOfSquaresSumOfSquaresSumOfSquares = evensSumOfSquaresSumOfSquares.map(x\
    \ => x * x).sum\n        val evensSumOfSquaresSumOfSquaresSumOfSquaresMax = evensSumOfSquaresSumOfSquaresSumOfSquares.max\n\
    \        val evensSumOfSquaresSumOfSquaresSumOfSquaresMin = evensSumOfSquaresSumOfSquaresSumOfSquares.min\n\
    \        val evensSumOfSquaresSumOfSquaresSumOfSquaresSum = evensSumOfSquaresSumOfSquaresSumOfSquares.sum\n\
    \        val evensSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares = evensSumOfSquaresSumOfSquaresSumOfSquares.map(x\
    \ => x * x).sum\n        val evensSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresMax\
    \ = evensSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares.max\n        val evensSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresMin\
    \ = evensSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares.min\n        val evensSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSum\
    \ = evensSumOfSquaresSum", "        val evens = mutable.Set[Long]()\n        val\
    \ odds = mutable.Set[Long]()\n        val range = (x to y)\n        range.foreach(x\
    \ => {\n            if (x % 2 == 0) {\n                evens += x\n          \
    \  } else {\n                odds += x\n            }\n        })\n        val\
    \ even = evens.max\n        val odd = odds.max\n        if (even > odd) {\n  \
    \          return even\n        } else {\n            return -1\n        }", " \
    \       val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = range / 2\n       \
    \ val oddRange = range % 2\n        val even = x + evenRange\n        val odd\
    \ = x + oddRange\n        while(even < y) {\n            evens.add(even)\n   \
    \         even += evenRange\n        }\n        while(odd > y) {\n           \
    \ odds.add(odd)\n            odd -= oddRange\n        }\n        odds.toSet.max",
  "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = (x - y).abs()\n        val evenRange = range.filter(_ % 2\
    \ == 0)\n        val oddRange = range.filter(_ % 2 != 0)\n        evenRange foreach\
    \ { x => evens += x }\n        oddRange foreach { x => odds += x }\n        val\
    \ evenMax = evens.max\n        val oddMax = odds.max\n        if (evenMax < oddMax)\
    \ evenMax else oddMax", "        val evens = x to y by 2\n        val evensCount\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount == 0) {\n            return\
    \ -1\n        }\n        val maxEven = evens.max\n        if (maxEven % 2 == 0)\
    \ {\n            return maxEven\n        }\n        val maxEven2 = maxEven / 2\n\
    \        val evensCount2 = evens.count(_ % 2 == 0)\n        if (evensCount2 ==\
    \ 0) {\n            return -1\n        }\n        if (evensCount2 > evensCount)\
    \ {\n            return maxEven2\n        }\n        val maxEven3 = maxEven2 /\
    \ 2\n        val evensCount3 = evens.count(_ % 2 == 0)\n        if (evensCount3\
    \ == 0) {\n            return -1\n        }\n        if (evensCount3 > evensCount2)\
    \ {\n            return maxEven3\n        }\n        val maxEven4 = maxEven3 /\
    \ 2\n        val evensCount4 = evens.count(_ % 2 == 0)\n        if (evensCount4\
    \ == 0) {\n            return -1\n        }\n        if (evensCount4 > evensCount3)\
    \ {\n            return maxEven4\n        }\n        val maxEven5 = maxEven4 /\
    \ 2\n        val evensCount5 = evens.count(_ % 2 == 0)\n        if (evensCount5\
    \ == 0) {\n            return -1\n        }\n        if (evensCount5 > evensCount4)\
    \ {\n            return maxEven5\n        }\n        val maxEven6 = maxEven5 /\
    \ 2\n        val evensCount6 = evens.count(_ % 2 == 0)\n        if (evensCount6\
    \ == 0) {\n            return -1\n        }\n        if (evensCount6 > evensCount5)\
    \ {\n            return maxEven6\n        }\n        val maxEven7 = maxEven6 /\
    \ 2\n        val evensCount7 = evens.count(_ % 2 == 0)\n        if (evensCount7\
    \ == 0) {\n            return -1\n        }\n        if (evensCount7 > evensCount6)\
    \ {\n            return maxEven7\n        }\n        val maxEven8 = maxEven7 /\
    \ 2\n        val evensCount8 = evens.count(_ % 2 == 0)\n        if (evensCount8\
    \ == 0) {\n            return -1\n        }\n        if (evensCount8 > evensCount7)\
    \ {\n            return maxEven8\n        }\n        val maxEven9 = maxEven8 /\
    \ 2\n        val evensCount9 = evens.count(_ % 2 == 0)\n        if (evensCount9\
    \ == 0) {\n            return -1\n        }\n        if (evensCount9 > evensCount8)\
    \ {\n            return maxEven9\n        }\n        val maxEven10 = maxEven9\
    \ / 2\n        ", "        var maxEven = math.max(x, y)\n        var minEven =\
    \ math.min(x, y)\n        var even = 0\n        var evenNum = 0\n        var evenMax\
    \ = 0\n        var evenMin = 0\n        var evenSum = 0\n        var evenSumMax\
    \ = 0\n        var evenSumMin = 0\n        var evenSumSum = 0\n        var evenSumSumMax\
    \ = 0\n        var evenSumSumMin = 0\n        var evenSumSumSum = 0\n        var\
    \ evenSumSumSumMax = 0\n        var evenSumSumSumMin = 0\n        var evenSumSumSumSum\
    \ = 0\n        var evenSumSumSumSumMax = 0\n        var evenSumSumSumSumMin =\
    \ 0\n        var evenSumSumSumSumSum = 0\n        var evenSumSumSumSumMax = 0\n\
    \        var evenSumSumSumSumMin = 0\n        var evenSumSumSumSumSum = 0\n  \
    \      var evenSumSumSumSumMax = 0\n        var evenSumSumSumSumMin = 0\n    \
    \    var evenSumSumSumSumSum = 0\n        var evenSumSumSumSumSumMax = 0\n   \
    \     var evenSumSumSumSumSumMin = 0\n        var evenSumSumSumSumSumSum = 0\n\
    \        var evenSumSumSumSumSumMax = 0\n        var evenSumSumSumSumSumMin =\
    \ 0\n        var evenSumSumSumSumSumSum = 0\n        var evenSumSumSumSumSumMax\
    \ = 0\n        var evenSumSumSumSumSumMin = 0\n        var evenSumSumSumSumSumSum\
    \ = 0\n        var evenSumSumSumSumSumMax = 0\n        var evenSumSumSumSumSumSumMin\
    \ = 0\n        var evenSumSumSumSumSumSum = 0\n        var evenSumSumSumSumSumMax\
    \ = 0\n        var evenSumSumSumSumSumSumMin = 0\n        var evenSumSumSumSumSumSumSum\
    \ = 0\n        var evenSumSumSumSumSumSumMax = 0\n        var evenSumSumSumSumSumSumMin\
    \ = 0\n        var evenSumSumSumSumSumSumSum = 0\n        var evenSumSumSumSumSumSumMax\
    \ = 0\n        var evenSumSumSumSumSumSumMin = 0\n        var evenSumSumSumSumSumSumSum\
    \ = 0\n        var evenSumSumSumSumSumSumMax = 0\n        var evenSumSumSumSumSumSumMin\
    \ = 0\n        var evenSumSumSumSumSumSumSum = 0\n        var evenSumSumSumSumSumSumSumMax\
    \ = 0\n        var evenSumSumSumSumSumSumSumMin = 0\n        var evenSumSumSumSumSumSumSum\
    \ = 0\n        var evenSumSumSumSumSumSumMax = 0\n        var evenSumSumSumSumSumSumMin\
    \ = 0\n        var evenSumSumSumSumSumSumSum = 0\n        var evenSumSumSumSumSumSum",
  "        val evens = x to y by 2\n        val evensCount = evens.count(_ % 2 ==\
    \ 0)\n        if (evensCount == 0) -1\n        else evens.max", "        val evens\
    \ = x to y by 2\n        val evensSorted = evens.toList\n        val evensSorted\
    \ = evensSorted.sortBy(_ % 2 == 0)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ >=\
    \ x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted =\
    \ evensSorted.head\n        evensSorted.toLong", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val evensCount = mutable.ListBuffer[Long]()\n\
    \        val oddsCount = mutable.ListBuffer[Long]()\n        val evensCount2 =\
    \ mutable.ListBuffer[Long]()\n        val oddsCount2 = mutable.ListBuffer[Long]()\n\
    \        val evensCount3 = mutable.ListBuffer[Long]()\n        val oddsCount3\
    \ = mutable.ListBuffer[Long]()\n        val evensCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount4 = mutable.ListBuffer[Long]()\n        val evensCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount5 = mutable.ListBuffer[Long]()\n\
    \        val evensCount6 = mutable.ListBuffer[Long]()\n        val oddsCount6\
    \ = mutable.ListBuffer[Long]()\n        val evensCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount7 = mutable.ListBuffer[Long]()\n        val evensCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount8 = mutable.ListBuffer[Long]()\n\
    \        val evensCount9 = mutable.ListBuffer[Long]()\n        val oddsCount9\
    \ = mutable.ListBuffer[Long]()\n        val evensCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount10 = mutable.ListBuffer[Long]()\n        val evensCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount11 = mutable.ListBuffer[Long]()\n\
    \        val evensCount12 = mutable.ListBuffer[Long]()\n        val oddsCount12\
    \ = mutable.ListBuffer[Long]()\n        val evensCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount13 = mutable.ListBuffer[Long]()\n        val evensCount14\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount14 = mutable.ListBuffer[Long]()\n\
    \        val evensCount15 = mutable.ListBuffer[Long]()\n        val oddsCount15\
    \ = mutable.ListBuffer[Long]()\n        val evensCount16 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount16 = mutable.ListBuffer[Long]()\n", "        val evens =\
    \ x filter (_ % 2 == 0)\n        val odds = x filter (_ % 2 != 0)\n        if\
    \ (evens.isEmpty) -1\n        else if (evens.size == 1) evens.head\n        else\
    \ if (evens.size == 2) evens.head + 2\n        else if (evens.size == 3) evens.head\
    \ + 3\n        else if (evens.size == 4) evens.head + 4\n        else if (evens.size\
    \ == 5) evens.head + 5\n        else if (evens.size == 6) evens.head + 6\n   \
    \     else if (evens.size == 7) evens.head + 7\n        else if (evens.size ==\
    \ 8) evens.head + 8\n        else if (evens.size == 9) evens.head + 9\n      \
    \  else if (evens.size == 10) evens.head + 10\n        else if (evens.size ==\
    \ 11) evens.head + 11\n        else if (evens.size == 12) evens.head + 12\n  \
    \      else if (evens.size == 13) evens.head + 13\n        else if (evens.size\
    \ == 14) evens.head + 14\n        else if (evens.size == 15) evens.head + 15\n\
    \        else if (evens.size == 16) evens.head + 16\n        else if (evens.size\
    \ == 17) evens.head + 17\n        else if (evens.size == 18) evens.head + 18\n\
    \        else if (evens.size == 19) evens.head + 19\n        else if (evens.size\
    \ == 20) evens.head + 20\n        else if (evens.size == 21) evens.head + 21\n\
    \        else if (evens.size == 22) evens.head + 22\n        else if (evens.size\
    \ == 23) evens.head + 23\n        else if (evens.size == 24) evens.head + 24\n\
    \        else if (evens.size == 25) evens.head + 25\n        else if (evens.size\
    \ == 26) evens.head + 26\n        else if (evens.size == 27) evens.head + 27\n\
    \        else if (evens.size == 28) evens.head + 28\n        else if (evens.size\
    \ == 29) evens.head + 29\n        else if (evens.size == 30) evens.head + 30\n\
    \        else if (evens.size == 31) evens.head + 31\n        else if (evens.size\
    \ == 32) evens.head + 32\n        else if (evens.size == 33) evens.head + 33\n\
    \        else if (evens.size == 34) evens.head + 34\n        else if (evens.size\
    \ == 35) evens.head + 35\n        else if (evens.size == 36) evens.head + 36\n\
    \        else if (evens.size == 37) evens.head + 37\n        else if (evens.size\
    \ == 38) evens.head + 38\n        else if (evens.size == 39) evens.head + 39\n\
    \        else if (evens.size == 40) evens.head + 40\n        else if (evens.size\
    \ == 41) evens.head + 41", "        val evens = mutable.ListBuffer[Long]()\n \
    \       val odds = mutable.ListBuffer[Long]()\n        val evensAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsSet = mutable.Set[Long]()\n        val evensAndOddsSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSet = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSet = mutable.Set[Long]()\n       \
    \ val evensAndOddsSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n        val\
    \ evensAndOddsSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSet =\
    \ mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSet", " \
    \       val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        }\n        if (evens.size == 1) {\n            return\
    \ evens.head\n        }\n        val maxEven = evens.max\n        if (odds.contains(maxEven))\
    \ {\n            return maxEven\n        }\n        val maxOdd = odds.max\n  \
    \      if (maxEven < maxOdd) {\n            return maxEven\n        }\n      \
    \  return maxOdd", "        val evens = x to y by 2\n        val evensSorted =\
    \ evens.toList\n        val evensSortedSorted: Seq[Long] = evensSorted.sortBy(_)\n\
    \        val evensSortedSortedLast = evensSortedSorted.last\n        val evensSortedSortedLastIndex\
    \ = evensSortedSorted.lastIndex\n        val evensSortedSortedLastIndexInt = evensSortedSortedLastIndex.toInt\n\
    \        val evensSortedSortedLastIndexIntInt = evensSortedSortedLastIndexInt.toInt\n\
    \        val evensSortedSortedLastIndexIntIntInt = evensSortedSortedLastIndexIntInt.toInt\n\
    \        val evensSortedSortedLastIndexIntIntIntInt = evensSortedSortedLastIndexIntIntInt.toInt\n\
    \        val evensSortedSortedLastIndexIntIntIntIntInt = evensSortedSortedLastIndexIntIntIntInt.toInt\n\
    \        val evensSortedSortedLastIndexIntIntIntIntIntInt = evensSortedSortedLastIndexIntIntIntInt.toInt\n\
    \        val evensSortedSortedLastIndexIntIntIntIntIntInt = evensSortedSortedLastIndexIntIntIntIntInt.toInt\n\
    \        val evensSortedSortedLastIndexIntIntIntIntIntIntInt = evensSortedSortedLastIndexIntIntIntIntIntInt.toInt\n\
    \        val evensSortedSortedLastIndexIntIntIntIntIntIntIntInt = evensSortedSortedLastIndexIntIntIntIntIntInt.toInt\n\
    \        val evensSortedSortedLastIndexIntIntIntIntIntIntIntIntInt = evensSortedSortedLastIndexIntIntIntIntIntIntInt.toInt\n\
    \        val evensSortedSortedLastIndexIntIntIntIntIntIntIntIntIntInt = evensSortedSortedLastIndexIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val evensSortedSortedLastIndexIntIntIntIntIntIntIntIntIntIntIntInt =\
    \ evensSortedSortedLastIndexIntIntIntIntIntIntIntIntIntInt.toInt\n        val\
    \ evensSortedSortedLastIndexIntIntIntIntIntIntIntIntIntIntIntInt = evensSortedSortedLastIndexIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val evensSortedSortedLastIndexIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = evensSortedSortedLastIndexIntIntIntIntIntIntIntIntIntIntIntIntInt.", "   \
    \     val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach(x => {\n            if\
    \ (x % 2 == 0) {\n                evens += x\n            } else {\n         \
    \       odds += x\n            }\n        })\n        val even = evens.max\n \
    \       val odd = odds.max\n        if (even > odd) {\n            return even\n\
    \        } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range / 2\n        val oddRange = range - evenRange\n\
    \        val evens = x until evenRange\n        val odds = x until oddRange\n\
    \        evens.foreach(x => evens += x)\n        odds.foreach(x => odds += x)\n\
    \        val evenMax = evens.max\n        val oddMax = odds.max\n        if (evenMax\
    \ == evenMax) evenMax else -1", "        val evens = x to y by 2\n        val\
    \ evensSorted = evens.toList\n        val evensSortedSorted: Seq[Long] = evensSorted.sortBy(_)\n\
    \        val evensSortedSortedLast = evensSortedSorted.last\n        if (evensSortedSortedLast\
    \ % 2 == 0) {\n            return evensSortedSortedLast\n        } else {\n  \
    \          return -1\n        }", "        val evens = x filter (_ % 2 == 0)\n\
    \        val odds = x filter (_ % 2 != 0)\n        val evensOdds = evens ++ odds\n\
    \        val evensOddsSum = evensOdds.sum\n        val evensOddsSumEvens = evensOddsSum\
    \ / evens.length\n        val evensOddsSumOdds = evensOddsSum / odds.length\n\
    \        val evensOddsSumEvensOdds = evensOddsSumEvens / evens.length\n      \
    \  val evensOddsSumEvensOddsOdds = evensOddsSumEvensOdds / odds.length\n     \
    \   val evensOddsSumEvensOddsOddsOdds = evensOddsSumEvensOddsOdds / evens.length\n\
    \        val evensOddsSumEvensOddsOddsOddsOdds = evensOddsSumEvensOddsOddsOdds\
    \ / odds.length\n        val evensOddsSumEvensOddsOddsOddsOddsOdds = evensOddsSumEvensOddsOddsOddsOdds\
    \ / evens.length\n        val evensOddsSumEvensOddsOddsOddsOddsOddsOdds = evensOddsSumEvensOddsOddsOddsOddsOdds\
    \ / odds.length\n        val evensOddsSumEvensOddsOddsOddsOddsOddsOddsOdds = evensOddsSumEvensOddsOddsOddsOddsOddsOdds\
    \ / evens.length\n        val evensOddsSumEvensOddsOddsOddsOddsOddsOddsOddsOdds\
    \ = evensOddsSumEvensOddsOddsOddsOddsOddsOddsOdds / odds.length\n        val evensOddsSumEvensOddsOddsOddsOddsOddsOddsOddsOddsOdds\
    \ = evensOddsSumEvensOddsOddsOddsOdds", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n       \
    \ if (evens.size == 0) -1\n        else if (evens.size == 1) evens.head\n    \
    \    else evens.max", "        val evens = mutable.Set[Long]()\n        val odds\
    \ = mutable.Set[Long]()\n        val range = Range(x, y)\n        range.foreach\
    \ { x =>\n            if (x % 2 == 0) {\n                evens += x\n        \
    \    } else {\n                odds += x\n            }\n        }\n        if\
    \ (evens.isEmpty) {\n            return -1\n        }\n        if (evens.size\
    \ == 1) {\n            return evens.head\n        }\n        if (evens.size ==\
    \ 2) {\n            return evens.min\n        }\n        val even = evens.min\n\
    \        val odd = odds.min\n        if (even > odd) {\n            return even\n\
    \        } else {\n            return odd\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val evensCount = mutable.ListBuffer[Long]()\n\
    \        val oddsCount = mutable.ListBuffer[Long]()\n        val evensCount2 =\
    \ mutable.ListBuffer[Long]()\n        val oddsCount2 = mutable.ListBuffer[Long]()\n\
    \        val evensCount3 = mutable.ListBuffer[Long]()\n        val oddsCount3\
    \ = mutable.ListBuffer[Long]()\n        val evensCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount4 = mutable.ListBuffer[Long]()\n        val evensCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount5 = mutable.ListBuffer[Long]()\n\
    \        val evensCount6 = mutable.ListBuffer[Long]()\n        val oddsCount6\
    \ = mutable.ListBuffer[Long]()\n        val evensCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount7 = mutable.ListBuffer[Long]()\n        val evensCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount8 = mutable.ListBuffer[Long]()\n\
    \        val evensCount9 = mutable.ListBuffer[Long]()\n        val oddsCount9\
    \ = mutable.ListBuffer[Long]()\n        val evensCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount10 = mutable.ListBuffer[Long]()\n        val evensCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount11 = mutable.ListBuffer[Long]()\n\
    \        val evensCount12 = mutable.ListBuffer[Long]()\n        val oddsCount12\
    \ = mutable.ListBuffer[Long]()\n        val evensCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount13 = mutable.ListBuffer[Long]()\n        val evensCount14\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount14 = mutable.ListBuffer[Long]()\n\
    \        val evensCount15 = mutable.ListBuffer[Long]()\n        val oddsCount15\
    \ = mutable.ListBuffer[Long]()\n        val evensCount16 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount16 = mutable.ListBuffer[Long]()\n", "        var max = 0\n\
    \        var min = x\n        var even = 0\n        var odd = 0\n        while\
    \ (min <= y) {\n            if (min % 2 == 0) {\n                even = min +\
    \ even\n            } else {\n                odd = min + odd\n            }\n\
    \            min = even + odd\n        }\n        if (even > max) {\n        \
    \    max = even\n        } else if (odd > max) {\n            max = odd\n    \
    \    }\n        if (even < min) {\n            min = even\n        } else if (odd\
    \ < min) {\n            min = odd\n        }\n        if (even == max) {\n   \
    \         return even\n        } else if (odd == max) {\n            return -1\n\
    \        } else {\n            return -1\n        }", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val even = mutable.Set[Long]()\n\
    \        val odd = mutable.Set[Long]()\n        val evenInRange = mutable.Set[Long]()\n\
    \        val oddInRange = mutable.Set[Long]()\n        val evenInRange2 = mutable.Set[Long]()\n\
    \        val oddInRange2 = mutable.Set[Long]()\n        val evenInRange3 = mutable.Set[Long]()\n\
    \        val oddInRange3 = mutable.Set[Long]()\n        val evenInRange4 = mutable.Set[Long]()\n\
    \        val oddInRange4 = mutable.Set[Long]()\n        val evenInRange5 = mutable.Set[Long]()\n\
    \        val oddInRange5 = mutable.Set[Long]()\n        val evenInRange6 = mutable.Set[Long]()\n\
    \        val oddInRange6 = mutable.Set[Long]()\n        val evenInRange7 = mutable.Set[Long]()\n\
    \        val oddInRange7 = mutable.Set[Long]()\n        val evenInRange8 = mutable.Set[Long]()\n\
    \        val oddInRange8 = mutable.Set[Long]()\n        val evenInRange9 = mutable.Set[Long]()\n\
    \        val oddInRange9 = mutable.Set[Long]()\n        val evenInRange10 = mutable.Set[Long]()\n\
    \        val oddInRange10 = mutable.Set[Long]()\n        val evenInRange11 = mutable.Set[Long]()\n\
    \        val oddInRange11 = mutable.Set[Long]()\n        val evenInRange12 = mutable.Set[Long]()\n\
    \        val oddInRange12 = mutable.Set[Long]()\n        val evenInRange13 = mutable.Set[Long]()\n\
    \        val oddInRange13 = mutable.Set[Long]()\n        val evenInRange14 = mutable.Set[Long]()\n\
    \        val oddInRange14 = mutable.Set[Long]()\n        val evenInRange15 = mutable.Set[Long]()\n\
    \        val oddInRange15 = mutable.Set[Long]()\n        val evenInRange16 = mutable.Set[Long]()\n\
    \        val oddInRange16 = mutable.Set[Long]()\n        val evenInRange17 = mut",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenOdd = mutable.ListBuffer[Long]()\n        val evenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEven = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEven = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n  \
    \      val evenOddEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n \
    \       val evenOddEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.List",
  "        val evens = x to y by 2\n        val evensSorted = evens.toList\n     \
    \   val evensSortedSorted: Seq[Long] = evensSorted.sortBy(_)\n        val evensSortedSortedLast\
    \ = evensSortedSorted.last\n        val evensSortedSortedLastLast = evensSortedSortedLast.last\n\
    \        val evensSortedSortedLastLastLast = evensSortedSortedLastLast.last\n\
    \        val evensSortedSortedLastLastLastLast = evensSortedSortedLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLast = evensSortedSortedLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLast = evensSortedSortedLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLastLast = evensSortedSortedLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLastLastLast = evensSortedSortedLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLastLastLastLast = evensSortedSortedLastLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLastLastLastLastLast = evensSortedSortedLastLastLastLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLastLastLastLastLastLast = evensSortedSortedLastLastLastLastLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLastLastLastLastLastLast = evensSortedSortedLastLastLastLastLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLastLastLastLastLastLastLast\
    \ = evensSortedSortedLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLastLastLastLastLastLastLast\
    \ = evensSortedSortedLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLastLastLastLastLastLastLastLast\
    \ = evensSortedSortedLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLastLast", "        var maxNum\
    \ = if (x > y) x else y\n        var minNum = if (x > y) y else x\n        var\
    \ evenNum = 0\n        var oddNum = 0\n        while (evenNum < maxNum && oddNum\
    \ < minNum) {\n            if (evenNum % 2 == 0 && oddNum % 2 == 0) {\n      \
    \          evenNum = evenNum + 2\n                oddNum = oddNum + 2\n      \
    \      } else if (evenNum % 2 == 0 && oddNum % 2 != 0) {\n                evenNum\
    \ = evenNum + 2\n            } else if (evenNum % 2 != 0 && oddNum % 2 == 0) {\n\
    \                oddNum = oddNum + 2\n            }\n        }\n        if (evenNum\
    \ == maxNum && oddNum == minNum) {\n            return -1\n        } else {\n\
    \            return evenNum\n        }", "        val evens = x to y by 2\n  \
    \      val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount == 0)\
    \ -1\n        else evens.max", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs()\n\
    \        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        evens.max", "        val evens = x to y by 2\n \
    \       val evensSorted = evens.toSeq.sortBy(_ % 2 == 0)\n        val evensSortedLast\
    \ = evensSorted.last\n        if (evensSortedLast == 0) -1\n        else evensSortedLast",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOdds = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndEvensAndOdds = mutable.ListBuffer[Long]()\n      \
    \  val evensAndOddsAndOddsAndEvens = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEven", "   \
    \     val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = range / 2\n       \
    \ val oddRange = range - evenRange\n        val evens = x until evenRange\n  \
    \      val odds = x until oddRange\n        evens.foreach(x => evens += x)\n \
    \       odds.foreach(x => odds += x)\n        evens.max", "        val evens =\
    \ mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = range.filter(_ % 2\
    \ == 0)\n        val oddRange = range.filter(_ % 2 != 0)\n        evenRange foreach\
    \ { x => evens += x }\n        oddRange foreach { x => odds += x }\n        val\
    \ evens = evens.toList\n        val odds = odds.toList\n        val evensCount\
    \ = evens.count(_ > 0)\n        val oddsCount = odds.count(_ > 0)\n        if\
    \ (evensCount == 0 && oddsCount == 0) {\n            return -1\n        }\n  \
    \      if (evensCount == 0) {\n            return odds.last\n        }\n     \
    \   if (oddsCount == 0) {\n            return evens.last\n        }\n        val\
    \ maxEven = evens.max\n        val maxOdd = odds.max\n        if (maxEven < maxOdd)\
    \ {\n            return maxEven\n        }\n        return maxOdd", "        val\
    \ evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n      \
    \  val even = mutable.Set[Long]()\n        val odd = mutable.Set[Long]()\n   \
    \     val evenOdd = mutable.Set[Long]()\n        val evenOddEven = mutable.Set[Long]()\n\
    \        val evenOddOdd = mutable.Set[Long]()\n        val evenOddEvenOdd = mutable.Set[Long]()\n\
    \        val evenOddEvenOddOdd = mutable.Set[Long]()\n        val evenOddEvenOddEvenOdd\
    \ = mutable.Set[Long]()\n        val evenOddEvenOddEvenOddOdd = mutable.Set[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOdd = mutable.Set[Long]()\n        val evenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.Set[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOdd = mutable.Set[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.Set[Long]()\n  \
    \      val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.Set[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.Set[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.Set[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.Set[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd =\
    \ mutable.Set[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.Set[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven",
  "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x; else odds += x)\n        if (evens.size == 0 || odds.size == 0) -1\n \
    \       else {\n            val even = evens.max\n            val odd = odds.max\n\
    \            if (even > odd) even else odd\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range / 2\n        val oddRange = range % 2\n    \
    \    val even = x % evenRange\n        val odd = x % oddRange\n        while (even\
    \ < evenRange && odd < oddRange) {\n            evens += even\n            odds\
    \ += odd\n            even = x % evenRange\n            odd = x % oddRange\n \
    \       }\n        if (evens.isEmpty) {\n            -1\n        } else {\n  \
    \          evens.max\n        }", "        val evens = x filter (_ % 2 == 0)\n\
    \        val odds = x filter (_ % 2 != 0)\n        val evensMin = evens.min\n\
    \        val evensMax = evens.max\n        val oddsMin = odds.min\n        val\
    \ oddsMax = odds.max\n        if (evensMin < oddsMin && evensMax < oddsMax) {\n\
    \            if (evensMin < evensMax) {\n                evens\n            }\
    \ else {\n                odds\n            }\n        } else {\n            if\
    \ (evensMin > oddsMin) {\n                evens\n            } else {\n      \
    \          odds\n            }\n        }", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        range.foreach(x => if (x % 2 == 0) evens += x)\n        range.foreach(x\
    \ => if (x % 2 == 1) odds += x)\n        val even = evens.max\n        val odd\
    \ = odds.max\n        if (even > odd) even else odd", "        val evens = x to\
    \ y by 2\n        val evensSorted = evens.toList\n        val evensSorted = evensSorted.sortWith(_\
    \ < _)\n        val evensSorted = evensSorted.takeWhile(_ % 2 == 0)\n        val\
    \ evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ > x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ > x)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ > x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ > x)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ > x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ > x)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ > x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ > x)\n\
    \        val evensSorted = evensSor", "        val evens = for (i <- x until y)\
    \ yield {\n            if (i % 2 == 0) i else -1\n        }\n        val maxEven\
    \ = evens.max\n        if (maxEven == -1) return -1\n        if (maxEven % 2 ==\
    \ 0) maxEven else -1", "        val evens = mutable.ListBuffer[Long]()\n     \
    \   val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs.toInt\n\
    \        val evenRange = range / 2\n        val oddRange = range % 2\n       \
    \ val even = x + evenRange\n        val odd = x + oddRange\n        while (even\
    \ < y) {\n            evens += even\n            even += evenRange\n        }\n\
    \        while (odd > y) {\n            odds += odd\n            odd -= oddRange\n\
    \        }\n        evens.max", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        for (i <- evens) {\n            if (i % 2 == 0) {\n           \
    \     even += i\n            }\n        }\n        for (i <- odds) {\n       \
    \     if (i % 2 == 1) {\n                odd += i\n            }\n        }\n\
    \        val even = even.toList\n        val odd = odd.toList\n        if (even.isEmpty\
    \ && odd.isEmpty) {\n            return -1\n        }\n        if (even.isEmpty)\
    \ {\n            return odd.head\n        }\n        if (odd.isEmpty) {\n    \
    \        return even.head\n        }\n        val evenMax = even.max\n       \
    \ val oddMax = odd.max\n        if (evenMax < oddMax) {\n            return evenMax\n\
    \        } else {\n            return oddMax\n        }", "        val evens =\
    \ mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = range.filter(_ % 2\
    \ == 0)\n        val oddRange = range.filter(_ % 2 != 0)\n        evenRange foreach\
    \ { x => evens += x }\n        oddRange foreach { x => odds += x }\n        val\
    \ evens = evens.toList\n        val odds = odds.toList\n        val evensSize\
    \ = evens.size\n        val oddsSize = odds.size\n        if (evensSize > oddsSize)\
    \ {\n            evens.last\n        } else if (oddsSize > evensSize) {\n    \
    \        odds.last\n        } else {\n            -1\n        }", "        val\
    \ evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n      \
    \  val range = (x - y).abs.toInt\n        val evenRange = range / 2\n        val\
    \ oddRange = range % 2\n        val even = x % evenRange\n        val odd = y\
    \ % oddRange\n        evens += even\n        odds += odd\n        evens.toSet.max\
    \ match {\n            case Some(even) => even\n            case None => -1\n\
    \        }", "        val evens = x to y by 2\n        val evensSorted = evens.toList\n\
    \        val evensSorted = evensSorted.sortBy(_ % 2 == 0)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.takeWhile(_\
    \ > x)\n        val evensSorted = evensSorted.last\n        evensSorted.toLong",
  "        var max = 0\n        var min = 0\n        for(i <- x to y) {\n        \
    \    val temp = i\n            if(temp % 2 == 0) {\n                max = temp\n\
    \            }\n            else {\n                min = temp\n            }\n\
    \        }\n        if(max > min) {\n            return max\n        }\n     \
    \   else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val x = x - 1\n       \
    \ val y = y - 1\n        val even = x until y map { x => if (x % 2 == 0) x else\
    \ x + 1 } filter (x => x % 2 == 0)\n        val odd = x until y map { x => if\
    \ (x % 2 == 1) x else x + 1 } filter (x => x % 2 == 1)\n        val evens = x\
    \ until y map { x => if (x % 2 == 0) x else x + 1 } filter (x => x % 2 == 0)\n\
    \        val odds = x until y map { x => if (x % 2 == 1) x else x + 1 } filter\
    \ (x => x % 2 == 1)\n        val even = x until y map { x => if (x % 2 == 0) x\
    \ else x + 1 } filter (x => x % 2 == 0)\n        val odd = x until y map { x =>\
    \ if (x % 2 == 1) x else x + 1 } filter (x => x % 2 == 1)\n        val evens =\
    \ x until y map { x => if (x % 2 == 0) x else x + 1 } filter (x => x % 2 == 0)\n\
    \        val odds = x until y map { x => if (x % 2 == 1) x else x + 1 } filter\
    \ (x => x % 2 == 1)\n        val even = x until y map { x => if (x % 2 == 0) x\
    \ else x + 1 } filter (x => x % 2 == 0)\n        val odd = x until y map { x =>\
    \ if (x % 2 == 1) x else x + 1 } filter (x => x % 2 == 1)\n        val evens =\
    \ x until y map { x => if (x % 2 == 0) x else x + 1 } filter (x => x % 2 == 0)\n\
    \        val odds = x until y map { x => if (x % 2 == 1) x else x + 1 } filter\
    \ (x => x % 2 == 1)\n        val even = x until y map { x => if (x % 2 == 0) x\
    \ else x + 1 } filter (x => x % 2 == 0)\n        val odd = x until y map { x =>\
    \ if (x % 2 == 1) x else x + 1 } filter (x => x % 2 == 1)\n        val evens =\
    \ x until y map { x => if (x % 2 == 0) x else x + 1 } filter (x => x % 2 == ",
  "        var biggestEven = x // Start with x as the biggest even number\n      \
    \  var biggestOdd = y // Start with y as the biggest odd number\n        var even\
    \ = 0 // Keep track of how many times we've found an even number\n        var\
    \ odd = 0 // Keep track of how many times we've found an odd number\n        while\
    \ (even < biggestEven && odd < biggestOdd) {\n            if (biggestEven % 2\
    \ == 0) {\n                biggestEven = biggestEven / 2\n                even\
    \ += 1\n            } else {\n                biggestEven = biggestEven * 3 +\
    \ 1\n                even += 1\n            }\n            if (biggestOdd % 2\
    \ == 0) {\n                biggestOdd = biggestOdd / 2\n                odd +=\
    \ 1\n            } else {\n                biggestOdd = biggestOdd * 3 + 1\n \
    \               odd += 1\n            }\n        }\n        if (even > biggestEven)\
    \ {\n            biggestEven = -1\n        } else if (even < biggestEven) {\n\
    \            biggestEven = even\n        }\n        if (odd > biggestOdd) {\n\
    \            biggestOdd = -1\n        } else if (odd < biggestOdd) {\n       \
    \     biggestOdd = odd\n        }\n        biggestEven", "        var maxNum =\
    \ y\n        var minNum = x\n        while(maxNum < minNum) {\n            val\
    \ mid = (maxNum + minNum) / 2\n            if(mid % 2 == 0) {\n              \
    \  maxNum = mid\n            } else {\n                minNum = mid\n        \
    \    }\n        }\n        maxNum", "        val evens = x to y by 2\n       \
    \ val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount == 0) {\n \
    \           return -1\n        }\n        val even = evens.max\n        if (even\
    \ % 2 == 0) {\n            return even\n        }\n        val even2 = even +\
    \ 1\n        val even3 = even2 + 1\n        val even4 = even3 + 1\n        val\
    \ even5 = even4 + 1\n        val even6 = even5 + 1\n        val even7 = even6\
    \ + 1\n        val even8 = even7 + 1\n        val even9 = even8 + 1\n        val\
    \ even10 = even9 + 1\n        val even11 = even10 + 1\n        val even12 = even11\
    \ + 1\n        val even13 = even12 + 1\n        val even14 = even13 + 1\n    \
    \    val even15 = even14 + 1\n        val even16 = even15 + 1\n        val even17\
    \ = even16 + 1\n        val even18 = even17 + 1\n        val even19 = even18 +\
    \ 1\n        val even20 = even19 + 1\n        val even21 = even20 + 1\n      \
    \  val even22 = even21 + 1\n        val even23 = even22 + 1\n        val even24\
    \ = even23 + 1\n        val even25 = even24 + 1\n        val even26 = even25 +\
    \ 1\n        val even27 = even26 + 1\n        val even28 = even27 + 1\n      \
    \  val even29 = even28 + 1\n        val even30 = even29 + 1\n        val even31\
    \ = even30 + 1\n        val even32 = even31 + 1\n        val even33 = even32 +\
    \ 1\n        val even34 = even33 + 1\n        val even35 = even34 + 1\n      \
    \  val even36 = even35 + 1\n        val even37 = even36 + 1\n        val even38\
    \ = even37 + 1\n        val even39 = even38 + 1\n        val even40 = even39 +\
    \ 1\n        val even41 = even40 + 1\n        val even42 = even41 + 1\n      \
    \  val even43 = even42 + 1\n        val even44 = even43 + 1\n        val even45\
    \ = even44 + 1\n        val even46 = even45 + 1\n        val even47 = even46 +\
    \ 1\n        val even48 = even47 + 1\n        val even49 = even48 + 1\n      \
    \  val even50 = even49 + 1\n        val even51 = even50 + 1\n        val even52\
    \ = even51 + 1\n        val even53 = even52", "        val evens = for (i <- x\
    \ until y) yield {\n            if (i % 2 == 0) i else -1\n        }\n       \
    \ val maxEven = evens.max\n        if (maxEven != -1) return maxEven\n       \
    \ else -1", "        val evens = x filter (_ % 2 == 0)\n        val odds = x filter\
    \ (_ % 2 != 0)\n        val evensOdds = evens ++ odds\n        evensOdds.max",
  "        val evens = x to y by 2\n        val evensSorted = evens.toSeq.sortBy(_\
    \ % 2 == 0)\n        val evensSortedSize = evensSorted.size\n        if (evensSortedSize\
    \ == 0) -1\n        else evensSorted.last", "        val evens = x filter (_ %\
    \ 2 == 0)\n        val odds = x filter (_ % 2 != 0)\n        val evensOdds = evens\
    \ ++ odds\n        val evensOddsMinusEvens = evensOdds filter (_ < y)\n      \
    \  val evensOddsMinusOdds = evensOdds filter (_ > y)\n        val evensOddsMinusEvensMinusOdds\
    \ = evensOddsMinusEvens filter (_ < y)\n        val evensOddsMinusEvensMinusOddsMinusOdds\
    \ = evensOddsMinusEvensMinusOdds filter (_ > y)\n        val evensOddsMinusEvensMinusOddsMinusOddsMinusOdds\
    \ = evensOddsMinusEvensMinusOddsMinusOdds filter (_ < y)\n        val evensOddsMinusEvensMinusOddsMinusOddsMinusOddsMinusOdds\
    \ = evensOddsMinusEvensMinusOddsMinusOddsMinusOdds filter (_ > y)\n        val\
    \ evensOddsMinusEvensMinusOddsMinusOddsMinusOddsMinusOddsMinusOdds = evensOddsMinusEvensMinusOddsMinusOddsMinusOddsMinusOdds\
    \ filter (_ < y)\n        val evensOddsMinusEvensMinusOddsMinusOddsMinusOddsMinusOddsMinusOddsMinusOdds\
    \ = evensOddsMinusEvensMinusOddsMinusOddsMinusOddsMinusOddsMinusOdds filter (_\
    \ > y)\n        val evensOddsMinusEvensMinusOddsMinusOddsMinusOddsMinusOddsMinusOddsMinusOddsMinusOdds\
    \ = evensOddsMinusEvensMinusOddsMinusOddsMinusOddsMinusOddsMinusOddsMinusOdds\
    \ filter (_ < y)\n        val ", "        val evens = x filter (_ % 2 == 0)\n\
    \        val odds = x filter (_ % 2 != 0)\n        val evensOdds = evens ++ odds\n\
    \        val evensOddsSum = evensOdds.sum\n        val evensOddsSumOdds = evensOddsSum\
    \ / 2\n        val evensOddsSumEvens = evensOddsSum - evensOddsSumOdds\n     \
    \   val evensOddsSumEvensOdds = evensOddsSumEvens / 2\n        val evensOddsSumEvensOddsOdds\
    \ = evensOddsSumEvensOdds / 2\n        val evensOddsSumEvensOddsOddsOdds = evensOddsSumEvensOddsOdds\
    \ / 2\n        val evensOddsSumEvensOddsOddsOddsOdds = evensOddsSumEvensOddsOddsOdds\
    \ / 2\n        val evensOddsSumEvensOddsOddsOddsOddsOdds = evensOddsSumEvensOddsOddsOddsOdds\
    \ / 2\n        val evensOddsSumEvensOddsOddsOddsOddsOddsOdds = evensOddsSumEvensOddsOddsOddsOddsOdds\
    \ / 2\n        val evensOddsSumEvensOddsOddsOddsOddsOddsOddsOdds = evensOddsSumEvensOddsOddsOddsOddsOddsOdds\
    \ / 2\n        val evensOddsSumEvensOddsOddsOddsOddsOddsOddsOddsOdds = evensOddsSumEvensOddsOddsOddsOddsOddsOddsOdds\
    \ / 2\n        val evensOddsSumEvensOddsOddsOddsOddsOddsOddsOddsOddsOdds = evensOddsSumEvensOddsOddsOddsOddsOdd",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs.toInt\n        val evenRange = range / 2\n  \
    \      val oddRange = range - evenRange\n        val evenNum = x + evenRange\n\
    \        val oddNum = x + oddRange\n        while(evenNum < y) {\n           \
    \ evens += evenNum\n            evenNum += evenRange\n        }\n        while(oddNum\
    \ < y) {\n            odds += oddNum\n            oddNum += oddRange\n       \
    \ }\n        evens.max", "        val evens = mutable.Set[Long]()\n        val\
    \ odds = mutable.Set[Long]()\n        val even = mutable.Set[Long]()\n       \
    \ val odd = mutable.Set[Long]()\n        val evenInRange = mutable.Set[Long]()\n\
    \        val oddInRange = mutable.Set[Long]()\n        val evenInRange2 = mutable.Set[Long]()\n\
    \        val oddInRange2 = mutable.Set[Long]()\n        val evenInRange3 = mutable.Set[Long]()\n\
    \        val oddInRange3 = mutable.Set[Long]()\n        val evenInRange4 = mutable.Set[Long]()\n\
    \        val oddInRange4 = mutable.Set[Long]()\n        val evenInRange5 = mutable.Set[Long]()\n\
    \        val oddInRange5 = mutable.Set[Long]()\n        val evenInRange6 = mutable.Set[Long]()\n\
    \        val oddInRange6 = mutable.Set[Long]()\n        val evenInRange7 = mutable.Set[Long]()\n\
    \        val oddInRange7 = mutable.Set[Long]()\n        val evenInRange8 = mutable.Set[Long]()\n\
    \        val oddInRange8 = mutable.Set[Long]()\n        val evenInRange9 = mutable.Set[Long]()\n\
    \        val oddInRange9 = mutable.Set[Long]()\n        val evenInRange10 = mutable.Set[Long]()\n\
    \        val oddInRange10 = mutable.Set[Long]()\n        val evenInRange11 = mutable.Set[Long]()\n\
    \        val oddInRange11 = mutable.Set[Long]()\n        val evenInRange12 = mutable.Set[Long]()\n\
    \        val oddInRange12 = mutable.Set[Long]()\n        val evenInRange13 = mutable.Set[Long]()\n\
    \        val oddInRange13 = mutable.Set[Long]()\n        val evenInRange14 = mutable.Set[Long]()\n\
    \        val oddInRange14 = mutable.Set[Long]()\n        val evenInRange15 = mutable.Set[Long]()\n\
    \        val oddInRange15 = mutable.Set[Long]()\n        val evenInRange16 = mutable.Set[Long]()\n\
    \        val oddInRange16 = mutable.Set[Long]()\n        val evenInRange17 = mut",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = range / 2\n       \
    \ val oddRange = range % 2\n        val evens = x until evenRange by 2\n     \
    \   val odds = x until oddRange by 2\n        evens.foreach(x => evens += x)\n\
    \        odds.foreach(x => odds += x)\n        val evenMax = evens.max\n     \
    \   val oddMax = odds.max\n        if (evenMax == evenMax && oddMax == oddMax)\
    \ evenMax else -1", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val evenNum = mutable.ListBuffer[Long]()\n\
    \        val oddNum = mutable.ListBuffer[Long]()\n        val numNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNum = mutable.ListBuffer[Long]()\n        val oddNumNum =\
    \ mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n      \
    \  val evenNumNumNumNumNumNumNumNumNum = mutable.", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        if (evens.isEmpty) {\n            return -1\n        }\n      \
    \  if (evens.size == 1) {\n            return evens.head\n        }\n        val\
    \ maxEven = evens.max\n        val maxOdd = odds.max\n        if (maxEven < maxOdd)\
    \ {\n            return maxEven\n        } else {\n            return maxOdd\n\
    \        }", "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x; else odds += x)\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) even else -1", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenEvens = mutable.ListBuffer[Long]()\n\
    \        val evenOdds = mutable.ListBuffer[Long]()\n        val oddEvens = mutable.ListBuffer[Long]()\n\
    \        val oddOdds = mutable.ListBuffer[Long]()\n        val evenEvensOdds =\
    \ mutable.ListBuffer[Long]()\n        val evenOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val oddEvensOdds = mutable.ListBuffer[Long]()\n        val oddOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evenEvensOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evenOddsOddsOdds = mutable.ListBuffer[Long]()\n        val oddEvensOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val oddOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evenEvensOddsOddsOdds = mutable.ListBuffer[Long]()\n        val evenOddsOddsOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val oddEvensOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val oddOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n        val evenEvensOddsOddsOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val oddEvensOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n        val\
    \ oddOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n        val evenEvensOddsOddsOddsOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsOddsOddsOddsOddsOdds = ",
  "        val evens = x filter (_ % 2 == 0)\n        val odds = x filter (_ % 2 !=\
    \ 0)\n        val evensOdds = evens ++ odds\n        val evensOddsMin = evensOdds.min\n\
    \        val evensOddsMax = evensOdds.max\n        if (evensOddsMin < y && evensOddsMax\
    \ > y) {\n            evensOddsMax\n        } else {\n            -1\n       \
    \ }", "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val x = x - 1\n        val y = y - 1\n        val even = x to y by 2\n\
    \        val odd = x to y by 2\n        even.foreach(x => evens += x)\n      \
    \  odd.foreach(x => odds += x)\n        evens.foreach(x => if (x % 2 == 0) even\
    \ += x)\n        odds.foreach(x => if (x % 2 == 1) odd += x)\n        evens.max",
  "        val evens = x filter (_ % 2 == 0)\n        if (evens.isEmpty) -1\n    \
    \    else evens.max", "        val evens = mutable.Set[Long]()\n        val odds\
    \ = mutable.Set[Long]()\n        val evensCount = mutable.Set[Long]()\n      \
    \  val oddsCount = mutable.Set[Long]()\n        val evensCount2 = mutable.Set[Long]()\n\
    \        val oddsCount2 = mutable.Set[Long]()\n        val evensCount3 = mutable.Set[Long]()\n\
    \        val oddsCount3 = mutable.Set[Long]()\n        val evensCount4 = mutable.Set[Long]()\n\
    \        val oddsCount4 = mutable.Set[Long]()\n        val evensCount5 = mutable.Set[Long]()\n\
    \        val oddsCount5 = mutable.Set[Long]()\n        val evensCount6 = mutable.Set[Long]()\n\
    \        val oddsCount6 = mutable.Set[Long]()\n        val evensCount7 = mutable.Set[Long]()\n\
    \        val oddsCount7 = mutable.Set[Long]()\n        val evensCount8 = mutable.Set[Long]()\n\
    \        val oddsCount8 = mutable.Set[Long]()\n        val evensCount9 = mutable.Set[Long]()\n\
    \        val oddsCount9 = mutable.Set[Long]()\n        val evensCount10 = mutable.Set[Long]()\n\
    \        val oddsCount10 = mutable.Set[Long]()\n        val evensCount11 = mutable.Set[Long]()\n\
    \        val oddsCount11 = mutable.Set[Long]()\n        val evensCount12 = mutable.Set[Long]()\n\
    \        val oddsCount12 = mutable.Set[Long]()\n        val evensCount13 = mutable.Set[Long]()\n\
    \        val oddsCount13 = mutable.Set[Long]()\n        val evensCount14 = mutable.Set[Long]()\n\
    \        val oddsCount14 = mutable.Set[Long]()\n        val evensCount15 = mutable.Set[Long]()\n\
    \        val oddsCount15 = mutable.Set[Long]()\n        val evensCount16 = mutable.Set[Long]()\n\
    \        val oddsCount16 = mutable.Set[Long]()\n        val evensCount17 = mutable.Set[Long]()\n\
    \        val oddsCount17 = mutable.Set[Long]()\n        val evens", "        val\
    \ evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n      \
    \  val range = (x - y).abs \n        val evenRange = range.filter(_ % 2 == 0)\n\
    \        val oddRange = range.filter(_ % 2 != 0)\n        evenRange foreach {\
    \ x => evens += x }\n        oddRange foreach { x => odds += x }\n        val\
    \ evenMax = evens.max\n        val oddMax = odds.max\n        if (evenMax < oddMax)\
    \ {\n            evenMax\n        } else {\n            oddMax\n        }", " \
    \       val evens = x filter (_ % 2 == 0)\n        val odds = x filter (_ % 2\
    \ != 0)\n        if (evens.isEmpty) -1\n        else if (odds.isEmpty) -1\n  \
    \      else evens.head + odds.head", "        var even = 0\n        var odd =\
    \ 0\n        var num = 0\n        while (even < x && odd < y) {\n            if\
    \ (x % 2 == 0 && y % 2 == 0) {\n                even = even * 2 + x\n        \
    \        odd = odd * 2 + y\n                num = num * 2 + 1\n            } else\
    \ if (x % 2 == 0 && y % 2 != 0) {\n                even = even * 2 + x\n     \
    \           odd = odd * 2 + y\n                num = num * 2 + 1\n           \
    \ } else if (x % 2 != 0 && y % 2 == 0) {\n                even = even * 2 + x\n\
    \                odd = odd * 2 + y\n                num = num * 2 + 1\n      \
    \      } else if (x % 2 != 0 && y % 2 != 0) {\n                even = even * 2\
    \ + x\n                odd = odd * 2 + y\n                num = num * 2 + 1\n\
    \            }\n        }\n        if (even > x || odd > y) {\n            return\
    \ -1\n        } else {\n            return num\n        }", "        val evens\
    \ = x to y by 2\n        val evensSorted = evens.toList\n        val evensSortedSorted:\
    \ mutable.List[Long] = evensSorted.sortBy(x => x)\n        val evensSortedSortedSorted:\
    \ mutable.List[Long] = evensSortedSorted.sortBy(x => x)\n        val evensSortedSortedSortedSorted:\
    \ mutable.List[Long] = evensSortedSortedSorted.sortBy(x => x)\n        val evensSortedSortedSortedSortedSorted:\
    \ mutable.List[Long] = evensSortedSortedSortedSorted.sortBy(x => x)\n        val\
    \ evensSortedSortedSortedSortedSortedSorted: mutable.List[Long] = evensSortedSortedSortedSortedSorted.sortBy(x\
    \ => x)\n        val evensSortedSortedSortedSortedSortedSortedSorted: mutable.List[Long]\
    \ = evensSortedSortedSortedSortedSortedSortedSorted.sortBy(x => x)\n        val\
    \ evensSortedSortedSortedSortedSortedSortedSortedSortedSorted: mutable.List[Long]\
    \ = evensSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(x => x)\n\
    \        val evensSortedSortedSortedSortedSortedSortedSortedSortedSorted: mutable.List[Long]\
    \ = evensSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(x => x)\n\
    \        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ mutable.List[Long] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(x\
    \ => x)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ mutable.List[Long] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(x\
    \ => x)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ mutable.List[Long] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(x\
    \ => x)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ mutable.List[Long] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(x\
    \ => x)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ mutable.List[Long] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(x\
    \ => x)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ mutable.List[Long] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(x\
    \ => x)\n        val ", "        val evens = mutable.ListBuffer[Long]()\n    \
    \    val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(i => {\n            if (i % 2 == 0) {\n               \
    \ evens += i\n            } else {\n                odds += i\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even > odd) {\n            even\n        } else {\n            odd\n  \
    \      }", "        val evens = mutable.ListBuffer[Long]()\n        val odds =\
    \ mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val x = x - 1\n       \
    \ val y = y - 1\n        while(x <= y) {\n            val i = (x + y) / 2\n  \
    \          if((x % 2) == 0) {\n                evens += i\n                even\
    \ += i\n            } else {\n                odds += i\n                odd +=\
    \ i\n            }\n            x += 1\n            y -= 1\n        }\n      \
    \  val even = evens.toList\n        val odd = odds.toList\n        if(even.isEmpty\
    \ && odd.isEmpty) {\n            return -1\n        } else if(even.isEmpty) {\n\
    \            return odd.head\n        } else if(odd.isEmpty) {\n            return\
    \ even.head\n        } else {\n            val even = even.sort\n            val\
    \ odd = odd.sort\n            val even = even.head\n            val odd = odd.head\n\
    \            if(even < odd) {\n                return even\n            } else\
    \ {\n                return odd\n            }\n        }", "        val evens\
    \ = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n        val range\
    \ = (x - y).abs \n        val evenRange = range / 2\n        val oddRange = range\
    \ % 2\n        val evenStart = x - (evenRange * 2)\n        val evenEnd = x +\
    \ (evenRange * 2)\n        val oddStart = x - (oddRange * 2)\n        val oddEnd\
    \ = x + (oddRange * 2)\n        val evenEvens = for (i <- evenStart..evenEnd)\
    \ yield {\n            if (i % 2 == 0) i else -1\n        }\n        val evenOdds\
    \ = for (i <- evenStart..evenEnd) yield {\n            if (i % 2 != 0) i else\
    \ -1\n        }\n        val oddEvens = for (i <- oddStart..oddEnd) yield {\n\
    \            if (i % 2 == 0) i else -1\n        }\n        val oddOdds = for (i\
    \ <- oddStart..oddEnd) yield {\n            if (i % 2 != 0) i else -1\n      \
    \  }\n        val evenOddEvens = for (i <- evenStart..evenEnd) yield {\n     \
    \       if (i % 2 == 0 && i % 2 != 0) i else -1\n        }\n        val evenOddOdds\
    \ = for (i <- evenStart..evenEnd) yield {\n            if (i % 2 != 0 && i % 2\
    \ != 0) i else -1\n        }\n        val oddEvenEvens = for (i <- oddStart..oddEnd)\
    \ yield {\n            if (i % 2 == 0 && i % 2 != 0) i else -1\n        }\n  \
    \      val oddEvenOdds = for (i <- oddStart..oddEnd) yield {\n            if (i\
    \ % 2 != 0 && i % 2 != 0) i else -1\n        }\n        val evenOddEvenEvens =\
    \ for (i <- evenStart..evenEnd) yield {\n            if (i % 2 == 0 && i % 2 !=\
    \ 0) i else -1\n        }\n        val evenOddEvenOdds = for (i <- evenStart..evenEnd)\
    \ yield {\n            if (i % 2 != 0 && i % 2 != 0) i else -1\n        }\n  \
    \      val oddEvenEvenEvens = for (i <- oddStart..oddEnd) yield {\n          \
    \  if (i % 2 == 0 && i % 2 != 0) i else -1\n        }\n        val oddEvenOddEvens\
    \ = for (i <- oddStart..oddEnd) yield {\n            if (i % 2 != 0 && i % 2 !=\
    \ 0) i else -1\n        }\n        val evenOddEvenEvenEvens = for (i <- evenStart..evenEnd)\
    \ yield {", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsSum = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsSumSumSumSum = mutable.ListBuffer[Long]()\n        val\
    \ evensAndOddsSumSumSumSumSum = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSum", "     \
    \   val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        val even = evens.max\n     \
    \   val odd = odds.max\n        if (even < odd) {\n            return even\n \
    \       } else {\n            return -1\n        }", "        val evens = x to\
    \ y by 2\n        val evensSorted = evens.toSeq.sortWith(_ < _)\n        val evensSortedSize\
    \ = evensSorted.length\n        val evensSortedIndex = evensSorted.indexWhere(_\
    \ % 2 == 0)\n        val evensSortedValue = evensSorted.take(evensSortedIndex).sum\n\
    \        val evensSortedValueSize = evensSortedValue.length\n        val evensSortedIndexSize\
    \ = evensSortedIndex.length\n        if (evensSortedSize == evensSortedValueSize\
    \ && evensSortedIndexSize == evensSortedValueSize) {\n            evensSortedValue\n\
    \        } else {\n            -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val evensAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount = mutable.ListBuffer[Long]()\n        val evensAndOddsCount2\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount3 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount4 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount5\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount6 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount7 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount8\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount9 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount10 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount11\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount12 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount13 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount14\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount15 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount16 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount17\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount18 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount19 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount20\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount21 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount22 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount23\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount24 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount25 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        val evens = evenRange.map(_ + x).filter(_ <= y)\n       \
    \ val odds = oddRange.map(_ + x).filter(_ >= y)\n        val nums = evens.union(odds)\n\
    \        val result = nums.max\n        if (result > x) result else -1", "   \
    \     val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = x.toInt\n        val odd = y.toInt\n        while(even < odd)\
    \ {\n            evens += even\n            odd -= even\n        }\n        while(even\
    \ > odd) {\n            odds += odd\n            even -= odd\n        }\n    \
    \    evens.max", "        val evens = x filter (_ % 2 == 0)\n        val odds\
    \ = x filter (_ % 2 != 0)\n        if (evens.isEmpty) -1\n        else if (evens.head\
    \ < y) -1\n        else if (evens.head > y) evens.head\n        else if (odds.isEmpty)\
    \ -1\n        else if (odds.head < y) -1\n        else if (odds.head > y) odds.head\n\
    \        else -1", "        val evens = x to y by 2\n        val evensCount =\
    \ evens.count(_ % 2 == 0)\n        if (evensCount == 0) {\n            return\
    \ -1\n        }\n        val maxEven = evens.max\n        if (maxEven % 2 == 0)\
    \ {\n            return maxEven\n        }\n        val maxEven2 = maxEven / 2\n\
    \        val evensCount2 = evens.count(_ % 2 == 0)\n        if (evensCount2 ==\
    \ 0) {\n            return -1\n        }\n        val maxEven3 = maxEven2 / 2\n\
    \        val evensCount3 = evens.count(_ % 2 == 0)\n        if (evensCount3 ==\
    \ 0) {\n            return -1\n        }\n        val maxEven4 = maxEven3 / 2\n\
    \        val evensCount4 = evens.count(_ % 2 == 0)\n        if (evensCount4 ==\
    \ 0) {\n            return -1\n        }\n        val maxEven5 = maxEven4 / 2\n\
    \        val evensCount5 = evens.count(_ % 2 == 0)\n        if (evensCount5 ==\
    \ 0) {\n            return -1\n        }\n        val maxEven6 = maxEven5 / 2\n\
    \        val evensCount6 = evens.count(_ % 2 == 0)\n        if (evensCount6 ==\
    \ 0) {\n            return -1\n        }\n        val maxEven7 = maxEven6 / 2\n\
    \        val evensCount7 = evens.count(_ % 2 == 0)\n        if (evensCount7 ==\
    \ 0) {\n            return -1\n        }\n        val maxEven8 = maxEven7 / 2\n\
    \        val evensCount8 = evens.count(_ % 2 == 0)\n        if (evensCount8 ==\
    \ 0) {\n            return -1\n        }\n        val maxEven9 = maxEven8 / 2\n\
    \        val evensCount9 = evens.count(_ % 2 == 0)\n        if (evensCount9 ==\
    \ 0) {\n            return -1\n        }\n        val maxEven10 = maxEven9 / 2\n\
    \        val evensCount10 = evens.count(_ % 2 == 0)\n        if (evensCount10\
    \ == 0) {\n            return -1\n        }\n        val maxEven11 = maxEven10\
    \ / 2\n        val evensCount11 = evens.count(_ % 2 == 0)\n        if (evensCount11\
    \ == 0) {\n            return -1\n        }\n        val maxEven12 = maxEven11\
    \ / 2\n        val evensCount12 = evens.count(_ % 2 == 0)\n        if (evensCount12\
    \ == 0) {\n            return -1\n        }\n        val maxEven13 = maxEven12\
    \ / 2\n        val evensCount13 = evens.count(_ % 2 == 0)\n        if (evensCount13\
    \ == 0) {\n            return -1\n        }\n        val maxEven14 = maxEven13\
    \ / 2", "        val evens = x to y by 2\n        val evensCount = evens.count\n\
    \        if (evensCount > 0) {\n            val maxEven = evens.max\n        \
    \    if (maxEven % 2 == 0) {\n                return maxEven\n            } else\
    \ {\n                return -1\n            }\n        } else {\n            return\
    \ -1\n        }", "        var max = 0\n        var min = 0\n        var even\
    \ = 0\n        var odd = 0\n        var evenOdd = false\n        var evenOddOdd\
    \ = false\n        var evenOddEvenOdd = false\n        var evenOddEvenOddOdd =\
    \ false\n        var evenOddEvenOddEvenOdd = false\n        var evenOddEvenOddEvenOddOdd\
    \ = false\n        var evenOddEvenOddEvenOddEvenOdd = false\n        var evenOddEvenOddEvenOddEvenOddOdd\
    \ = false\n        var evenOddEvenOddEvenOddEvenOddEvenOdd = false\n        var\
    \ evenOddEvenOddEvenOddEvenOddEvenOddOdd = false\n        var evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = false\n        var evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = false\n\
    \        var evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = false\n     \
    \   var evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = false\n   \
    \     var evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = false\n \
    \       var evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd =\
    \ false\n        var evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = false\n        var evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = false\n        var evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = false\n        var evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = false\n        var evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = ", "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenOdd = mutable.ListBuffer[Long]()\n        val evenOddEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n  \
    \      val evenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd =\
    \ mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEven", "    \
    \    val evens = x filter (_ % 2 == 0)\n        val odds = x filter (_ % 2 !=\
    \ 0)\n        if (evens.isEmpty) -1\n        else if (odds.isEmpty) -1\n     \
    \   else evens.head + odds.head", "        val evens = mutable.Set[Long]()\n \
    \       val odds = mutable.Set[Long]()\n        val even = mutable.Set[Long]()\n\
    \        val odd = mutable.Set[Long]()\n        val evenInRange = mutable.Set[Long]()\n\
    \        val oddInRange = mutable.Set[Long]()\n        val evenInRangeAndOdd =\
    \ mutable.Set[Long]()\n        val oddInRangeAndOdd = mutable.Set[Long]()\n  \
    \      val evenInRangeAndOddAndEven = mutable.Set[Long]()\n        val oddInRangeAndOddAndEven\
    \ = mutable.Set[Long]()\n        val evenInRangeAndOddAndEvenAndOdd = mutable.Set[Long]()\n\
    \        val oddInRangeAndOddAndEvenAndOdd = mutable.Set[Long]()\n        val\
    \ evenInRangeAndOddAndEvenAndOddAndEven = mutable.Set[Long]()\n        val oddInRangeAndOddAndEvenAndOddAndEven\
    \ = mutable.Set[Long]()\n        val evenInRangeAndOddAndEvenAndOddAndEvenAndOdd\
    \ = mutable.Set[Long]()\n        val oddInRangeAndOddAndEvenAndOddAndEvenAndOdd\
    \ = mutable.Set[Long]()\n        val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = mutable.Set[Long]()\n        val oddInRangeAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = mutable.Set[Long]()\n        val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = mutable.Set[Long]()\n        val oddInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = mutable.Set[Long]()\n        val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = mutable.Set[Long]()\n        val oddInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = mutable.Set[Long]()\n        val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOd",
  "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = (x to y)\n        for (i <- range) {\n            if (i %\
    \ 2 == 0) {\n                evens += i\n            } else {\n              \
    \  odds += i\n            }\n        }\n        val even = evens.max\n       \
    \ val odd = odds.max\n        if (even > odd) {\n            return even\n   \
    \     } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n    \
    \    val even = evens.max\n        val odd = odds.max\n        if (even > odd)\
    \ even else odd", "        var even = 0\n        var odd = 0\n        var evenMax\
    \ = 0\n        var oddMax = 0\n        var evenMin = Long.MaxValue\n        var\
    \ oddMin = Long.MinValue\n        var evenMaxIndex = -1\n        var oddMaxIndex\
    \ = -1\n        var evenMinIndex = -1\n        var oddMinIndex = -1\n        var\
    \ evenMaxValue = Long.MaxValue\n        var oddMaxValue = Long.MinValue\n    \
    \    var evenMinValue = Long.MaxValue\n        var oddMinValue = Long.MinValue\n\
    \        var evenMaxIndex = -1\n        var oddMaxIndex = -1\n        var evenMinIndex\
    \ = -1\n        var oddMinIndex = -1\n        var evenMaxValue = Long.MaxValue\n\
    \        var oddMaxValue = Long.MinValue\n        var evenMinValue = Long.MaxValue\n\
    \        var oddMinValue = Long.MinValue\n        var evenMaxIndex = -1\n    \
    \    var oddMaxIndex = -1\n        var evenMinIndex = -1\n        var oddMinIndex\
    \ = -1\n        var evenMaxValue = Long.MaxValue\n        var oddMaxValue = Long.MinValue\n\
    \        var evenMinValue = Long.MaxValue\n        var oddMinValue = Long.MinValue\n\
    \        var evenMaxIndex = -1\n        var oddMaxIndex = -1\n        var evenMinIndex\
    \ = -1\n        var oddMinIndex = -1\n        var evenMaxValue = Long.MaxValue\n\
    \        var oddMaxValue = Long.MinValue\n        var evenMinValue = Long.MaxValue\n\
    \        var oddMinValue = Long.MinValue\n        var evenMaxIndex = -1\n    \
    \    var oddMaxIndex = -1\n        var evenMinIndex = -1\n        var oddMinIndex\
    \ = -1\n        var evenMaxValue = Long.MaxValue\n        var oddMaxValue = Long.MinValue\n\
    \        var evenMinValue = Long.MaxValue\n        var oddMinValue = Long.MinValue\n\
    \        var evenMaxIndex = -1\n        var oddMaxIndex = -1\n        var evenMinIndex\
    \ = -1\n        var oddMinIndex = -1\n        var evenMaxValue = Long.MaxValue\n\
    \        var oddMaxValue = Long.MinValue\n        var evenMinValue = Long.MaxValue\n\
    \        var oddMinValue = Long.MinValue\n        var evenMaxIndex = -1\n    \
    \    var oddMaxIndex = -1\n        var evenMinIndex = -1\n        var oddMinIndex\
    \ = -1\n        var evenMaxValue = Long.MaxValue\n        var oddMaxValue = Long.MinValue\n\
    \        var evenMinValue = Long.MaxValue\n        var oddMinValue = Long.MinValue\n\
    \        var evenMaxIndex = -1\n        var oddMaxIndex = -1\n        var evenMinIndex\
    \ = -1\n        var oddMinIndex = -1\n        var evenMaxValue = Long.MaxValue\n\
    \        var oddMaxValue = Long.MinValue\n        var evenMinValue = Long.MaxValue\n\
    \        var oddMinValue = Long", "        val evens = x filter (_ % 2 == 0)\n\
    \        val odds = x filter (_ % 2 != 0)\n        val evensSum = evens.sum\n\
    \        val oddsSum = odds.sum\n        val evensSumToOdds = evensSum - odds\n\
    \        val evensSumToEvens = evensSum - evens\n        val evensSumToEvensSum\
    \ = evensSumToEvens + evensSumToOdds\n        val evensSumToEvensSumToOdds = evensSumToEvensSum\
    \ + oddsSum\n        val evensSumToEvensSumToOddsSum = evensSumToEvensSumToOdds\
    \ + evensSumToOdds\n        val evensSumToEvensSumToOddsSumToEvens = evensSumToEvensSumToOddsSum\
    \ + evensSumToEvens\n        val evensSumToEvensSumToOddsSumToEvensSum = evensSumToEvensSumToOddsSumToEvens\
    \ + evensSumToEvensSum\n        val evensSumToEvensSumToOddsSumToEvensSumToOdds\
    \ = evensSumToEvensSumToOddsSumToEvens + evensSumToEvensSumToOddsSum\n       \
    \ val evensSumToEvensSumToOddsSumToEvensSumToOddsSum = evensSumToEvensSumToOddsSumToEvensSum\
    \ + evensSumToEvensSumToOddsSumToOdds\n        val evensSumToEvensSumToOddsSumToEvensSumToOddsSumToEvens\
    \ = evensSumToEvensSumToOddsSumToEvensSumToOdds + evensSumToEvensSumToOddsSumToOddsSumToEvens\n\
    \        val evensSumToEvensSumToOddsSumToEvensSumToOddsSumToEvensSum = evensSumToEvensSumToOddsSumToEvensSumToOddsSumToEvens\
    \ + evensSumToEvensSumToOddsSumToOddsSumToEvensSum\n        val evensSumToEvensSumToOddsSumToEvensSumToOddsSumToEven",
  "        val evens = x to y by 2\n        val evensSorted = evens.toList\n     \
    \   val evensSortedSorted: Seq[Long] = evensSorted.sortBy(x => x)\n        val\
    \ evensSortedSortedLast = evensSortedSorted.last\n        val evensSortedSortedLastLast\
    \ = evensSortedSortedLast.last\n        val evensSortedSortedLastLastLast = evensSortedSortedLastLast.last\n\
    \        val evensSortedSortedLastLastLastLast = evensSortedSortedLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLast = evensSortedSortedLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLast = evensSortedSortedLastLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLastLast = evensSortedSortedLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLastLastLast = evensSortedSortedLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLastLastLastLast = evensSortedSortedLastLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLastLastLastLastLast = evensSortedSortedLastLastLastLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLastLastLastLastLastLast = evensSortedSortedLastLastLastLastLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLastLastLastLastLastLast = evensSortedSortedLastLastLastLastLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLastLastLastLastLastLastLast\
    \ = evensSortedSortedLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLastLastLastLastLastLastLast\
    \ = evensSortedSortedLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLastLastLastLastLastLastLastLast\
    \ = evensSortedSortedLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedSortedLastLastLastLastLastLast", "        val evens =\
    \ mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n        val range\
    \ = (x to y)\n        range.foreach(x => {\n            if (x % 2 == 0) {\n  \
    \              evens += x\n            } else {\n                odds += x\n \
    \           }\n        })\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even < odd) {\n            return even\n        } else {\n      \
    \      return -1\n        }", "        val evens = x to y by 2\n        val evensCount\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount > 0) {\n            evens.max\n\
    \        } else {\n            -1\n        }", "        val evens = x filter (_\
    \ % 2 == 0)\n        val odds = x filter (_ % 2 != 0)\n        val evensOdds =\
    \ evens ++ odds\n        val evensOddsSum = evensOdds.sum\n        val evensOddsSumOdds\
    \ = evensOddsSum - evens.sum\n        val evensOddsSumEvens = evensOddsSum - evens.sum\
    \ - odds.sum\n        val evensOddsSumEvensOdds = evensOddsSum - evens.sum - odds.sum\
    \ - evens.sum - odds.sum\n        val evensOddsSumEvensOddsOdds = evensOddsSum\
    \ - evens.sum - odds.sum - evens.sum - odds.sum - evens.sum - odds.sum - evens.sum\
    \ - odds.sum - evens.sum - odds.sum - evens.sum - odds.sum - evens.sum - odds.sum\
    \ - evens.sum - odds.sum - evens.sum - odds.sum - evens.sum - odds.sum - evens.sum\
    \ - odds.sum - evens.sum - odds.sum - evens.sum - odds.sum - evens.sum - odds.sum\
    \ - evens.sum - odds.sum - evens.sum - odds.sum - evens.sum - odds.sum - evens.sum\
    \ - odds.sum - evens.sum - odds.sum - evens.sum - odds.sum - evens.sum - odds.sum\
    \ - evens.sum - odds.sum - evens.sum - odds.sum - evens.sum - odds.sum - evens.sum\
    \ - odds.sum - evens.sum - odds.sum - evens.sum - odds.sum - evens.sum - odds.sum\
    \ - evens.sum - odds.sum - evens.sum - odds.sum - evens.sum - odds.sum - evens.sum\
    \ - odds.sum - evens.sum - odds.sum - evens.sum - odds.sum - evens.sum - odds.sum\
    \ - evens.sum - odds.sum - evens.sum - odds.sum - evens.sum - odds.sum - evens.sum\
    \ - odds.sum - evens.sum - odds.sum - evens.sum - odds.sum - evens.sum - odds.sum\
    \ - evens.sum - odds.sum - evens.sum - odds.sum - ", "        val evens = for\
    \ (i <- x until y) yield {\n            if (i % 2 == 0) i else -1\n        }\n\
    \        val maxEven = evens.max\n        if (maxEven == -1L) -1L\n        else\
    \ maxEven", "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val nums = mutable.Set[Long]()\n        val even = mutable.Set[Long]()\n\
    \        val odd = mutable.Set[Long]()\n        val evenNums = mutable.Set[Long]()\n\
    \        val oddNums = mutable.Set[Long]()\n        val numsNums = mutable.Set[Long]()\n\
    \        val evenNumsNums = mutable.Set[Long]()\n        val oddNumsNums = mutable.Set[Long]()\n\
    \        val numsNumsNums = mutable.Set[Long]()\n        val evenNumsNumsNums\
    \ = mutable.Set[Long]()\n        val oddNumsNumsNums = mutable.Set[Long]()\n \
    \       val numsNumsNumsNums = mutable.Set[Long]()\n        val evenNumsNumsNumsNums\
    \ = mutable.Set[Long]()\n        val oddNumsNumsNumsNums = mutable.Set[Long]()\n\
    \        val numsNumsNumsNumsNums = mutable.Set[Long]()\n        val evenNumsNumsNumsNumsNums\
    \ = mutable.Set[Long]()\n        val oddNumsNumsNumsNumsNums = mutable.Set[Long]()\n\
    \        val numsNumsNumsNumsNumsNums = mutable.Set[Long]()\n        val evenNumsNumsNumsNumsNumsNums\
    \ = mutable.Set[Long]()\n        val oddNumsNumsNumsNumsNumsNums = mutable.Set[Long]()\n\
    \        val numsNumsNumsNumsNumsNumsNums = mutable.Set[Long]()\n        val evenNumsNumsNumsNumsNumsNumsNums\
    \ = mutable.Set[Long]()\n        val oddNumsNumsNumsNumsNumsNumsNums = mutable.Set[Long]()\n\
    \        val numsNumsNumsNumsNumsNumsNumsNums = mutable.Set[Long]()\n        val\
    \ evenNumsNumsNumsNumsNumsNumsNumsNums = mutable.Set[Long]()\n        val oddNumsNumsNumsNumsNumsNumsNumsNums\
    \ = ", "        val evens = x filter (_ % 2 == 0)\n        val odds = x filter\
    \ (_ % 2 != 0)\n        val evensOdds = evens ++ odds\n        val evensOddsSum\
    \ = evensOdds.sum\n        val evensOddsSumOdds = evensOddsSum - evensOdds.last\n\
    \        val evensOddsSumEvens = evensOddsSum - evensOdds.head\n        val evensOddsSumEvensOdds\
    \ = evensOddsSumEvens - evensOdds.last\n        val evensOddsSumEvensOddsOdds\
    \ = evensOddsSumEvensOdds - evensOdds.last\n        val evensOddsSumEvensOddsOddsOdds\
    \ = evensOddsSumEvensOddsOdds - evensOdds.last\n        val evensOddsSumEvensOddsOddsOddsOdds\
    \ = evensOddsSumEvensOddsOddsOdds - evensOdds.last\n        val evensOddsSumEvensOddsOddsOddsOddsOdds\
    \ = evensOddsSumEvensOddsOddsOddsOdds - evensOdds.last\n        val evensOddsSumEvensOddsOddsOddsOddsOddsOdds\
    \ = evensOddsSumEvensOddsOddsOddsOddsOdds - evensOdds.last\n        val evensOddsSumEvensOddsOddsOddsOddsOddsOddsOdds\
    \ = evensOddsSumEvensOddsOddsOddsOddsOddsOdds - evensOdds.last\n        val evensOddsSumEvensOddsOddsOddsOddsOddsOddsOddsOdds\
    \ = evensOddsSumEvensOddsOddsOddsOddsOddsOddsOdds - evensOdds.last\n        val\
    \ evensOddsSumEvensOddsOddsO"]
stop_tokens:
- "\n    }\n"
