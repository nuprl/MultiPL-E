name: HumanEval_144_simplify
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Your task is to implement a function that will simplify the expression\n\
  \    // x * n. The function returns true if x * n evaluates to a whole number and\
  \ false\n    // otherwise. Both x and n, are string representation of a fraction,\
  \ and have the following format,\n    // <numerator>/<denominator> where both numerator\
  \ and denominator are positive whole numbers.\n    // You can assume that x, and\
  \ n are valid fractions, and do not have zero as denominator.\n    // >>> simplify((\"\
  1/5\"), (\"5/1\"))\n    // (true)\n    // >>> simplify((\"1/6\"), (\"2/1\"))\n \
  \   // (false)\n    // >>> simplify((\"7/10\"), (\"10/2\"))\n    // (false)\n  \
  \  def simplify(x : String, n : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(simplify((\"1/5\"\
  ), (\"5/1\")) == (true));\n    assert(simplify((\"1/6\"), (\"2/1\")) == (false));\n\
  \    assert(simplify((\"5/1\"), (\"3/1\")) == (true));\n    assert(simplify((\"\
  7/10\"), (\"10/2\")) == (false));\n    assert(simplify((\"2/10\"), (\"50/10\"))\
  \ == (true));\n    assert(simplify((\"7/2\"), (\"4/2\")) == (true));\n    assert(simplify((\"\
  11/6\"), (\"6/1\")) == (true));\n    assert(simplify((\"2/3\"), (\"5/2\")) == (false));\n\
  \    assert(simplify((\"5/2\"), (\"3/5\")) == (false));\n    assert(simplify((\"\
  2/4\"), (\"8/4\")) == (true));\n    assert(simplify((\"2/4\"), (\"4/2\")) == (true));\n\
  \    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"\
  1/5\"), (\"1/5\")) == (false));\n    }\n\n}\n"
completions: ["        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"\
    /\").toInt\n        if(xNum.product*(nNum.product) == xNum.product*(nNum.product+1))\
    \ {\n            return true\n        }\n        return false", "        val numerator\
    \ = x.split(\"/\").map(_.toInt)\n        val denominator = n.split(\"/\").map(_.toInt)\n\
    \        val numeratorSum = numerator.sum\n        val denominatorSum = denominator.sum\n\
    \        val numeratorProduct = numerator.product\n        val denominatorProduct\
    \ = denominator.product\n        val numeratorProductSum = numeratorProduct.sum\n\
    \        val denominatorProductSum = denominatorProduct.sum\n        val numeratorProductProduct\
    \ = numeratorProduct.product\n        val denominatorProductProduct = denominatorProduct.product\n\
    \        val numeratorProductProductSum = numeratorProductProduct.sum\n      \
    \  val denominatorProductProductSum = denominatorProductProduct.sum\n        val\
    \ numeratorProductProductProduct = numeratorProductProduct.product\n        val\
    \ denominatorProductProductProduct = denominatorProductProduct.product\n     \
    \   val numeratorProductProductProductSum = numeratorProductProductProduct.sum\n\
    \        val denominatorProductProductProductSum = denominatorProductProductProduct.sum\n\
    \        val numeratorProductProductProductProduct = numeratorProductProductProduct.product\n\
    \        val denominatorProductProductProductProduct = denominatorProductProductProduct.product\n\
    \        val numeratorProductProductProductProductSum = numeratorProductProductProductProduct.sum\n\
    \        val denominatorProductProductProductProductSum = denominatorProductProductProductProduct.sum\n\
    \        val numeratorProductProductProductProductProduct = numeratorProductProductProductProduct.product\n\
    \        val denominatorProductProductProductProductProduct = denominatorProductProductProductProduct.product\n\
    \        val numeratorProductProductProductProductProductSum = numeratorProductProductProductProductProduct.sum\n\
    \        val denominatorProductProductProductProductProductSum = denominatorProductProductProductProductProduct.sum\n\
    \        val numeratorProductProductProductProductProductProduct = numeratorProductProductProductProductProduct.product\n\
    \        val denominatorProductProductProductProductProductProduct = denominatorProductProductProductProductProduct.product\n\
    \        val numeratorProductProductProductProductProductSum = numeratorProductProductProductProductProductSum\n\
    \        val denominatorProductProductProductProductProductSum = denominatorProductProductProductProductProductSum\n\
    \        val numeratorProductProductProductProductProductProduct = numeratorProductProductProductProductProductProduct\n\
    \        val denominatorProductProductProductProductProductProduct = denominatorProductProductProductProductProductProduct\n\
    \        val numeratorProductProductProductProductProductProductSum = numeratorProductProductProductProductProductProductSum\n\
    \        val denominatorProductProductProductProductProductProductSum = denominatorProductProductProductProductProductProductSum\n\
    \        val numeratorProductProductProductProductProductProductProduct = numeratorProductProductProductProductProductProductProduct\n\
    \        val denominatorProductProductProduct", "        val numer = x.split(\"\
    /\")(0)\n        val denom = x.split(\"/\")(1)\n        val numerator = numer\n\
    \        val denominator = denom\n        val numeratorAsInt = numerator.toInt\n\
    \        val denominatorAsInt = denominator.toInt\n        val numeratorAsDouble\
    \ = numeratorAsInt.toDouble\n        val denominatorAsDouble = denominatorAsInt.toDouble\n\
    \        val numeratorAsFraction = Fraction(numeratorAsDouble, denominatorAsDouble)\n\
    \        val denominatorAsFraction = Fraction(denominatorAsDouble, denominatorAsDouble)\n\
    \        val numeratorAsFractionFraction = Fraction(numeratorAsFraction, denominatorAsFraction)\n\
    \        val numeratorAsFractionFractionFraction = Fraction(numeratorAsFractionFraction,\
    \ denominatorAsFraction)\n        val numeratorAsFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFraction, denominatorAsFractionFraction)\n\
    \        val numeratorAsFractionFractionFractionFractionFraction = Fraction(numeratorAsFractionFractionFractionFraction,\
    \ denominatorAsFractionFractionFraction)\n        val numeratorAsFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFraction, denominatorAsFractionFractionFractionFraction)\n\
    \        val numeratorAsFractionFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFractionFraction, denominatorAsFractionFractionFractionFractionFraction)\n\
    \        val numeratorAsFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFractionFractionFraction,\
    \ denominatorAsFractionFractionFractionFractionFractionFraction)\n        val\
    \ numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFractionFractionFractionFraction,\
    \ denominatorAsFractionFractionFractionFractionFractionFractionFraction)\n   \
    \     val numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFraction,\
    \ denominatorAsFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \        val numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction,\
    \ denominatorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \        val numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction,\
    \ denominatorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \        val numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction",
  "        val numer = x.split(\"/\")(0)\n        val denom = x.split(\"/\")(1)\n\
    \        val numerator = numer\n        val denominator = denom\n        val numeratorAsInt\
    \ = numerator.asInstanceOf[Int]\n        val denominatorAsInt = denominator.asInstanceOf[Int]\n\
    \        val numeratorAsDouble = numerator.asInstanceOf[Double]\n        val denominatorAsDouble\
    \ = denominator.asInstanceOf[Double]\n        val numeratorAsLong = numerator.asInstanceOf[Long]\n\
    \        val denominatorAsLong = denominator.asInstanceOf[Long]\n        val numeratorAsBigDecimal\
    \ = numerator.asInstanceOf[BigDecimal]\n        val denominatorAsBigDecimal =\
    \ denominator.asInstanceOf[BigDecimal]\n        val numeratorAsBigInteger = numerator.asInstanceOf[BigInteger]\n\
    \        val denominatorAsBigInteger = denominator.asInstanceOf[BigInteger]\n\
    \        val numeratorAsFloat = numerator.asInstanceOf[Float]\n        val denominatorAsFloat\
    \ = denominator.asInstanceOf[Float]\n        val numeratorAsDouble = numerator.asInstanceOf[Double]\n\
    \        val denominatorAsDouble = denominator.asInstanceOf[Double]\n        val\
    \ numeratorAsLong = numerator.asInstanceOf[Long]\n        val denominatorAsLong\
    \ = denominator.asInstanceOf[Long]\n        val numeratorAsBigDecimal = numerator.asInstanceOf[BigDecimal]\n\
    \        val denominatorAsBigDecimal = denominator.asInstanceOf[BigDecimal]\n\
    \        val numeratorAsBigInteger = numerator.asInstanceOf[BigInteger]\n    \
    \    val denominatorAsBigInteger = denominator.asInstanceOf[BigInteger]\n    \
    \    val numeratorAsFloat = numerator.asInstanceOf[Float]\n        val denominatorAsFloat\
    \ = denominator.asInstanceOf[Float]\n        val numeratorAsDouble = numerator.asInstanceOf[Double]\n\
    \        val denominatorAsDouble = denominator.asInstanceOf[Double]\n        val\
    \ numeratorAsLong = numerator.asInstanceOf[Long]\n        val denominatorAsLong\
    \ = denominator.asInstanceOf[Long]\n        val numeratorAsBigDecimal = numerator.asInstanceOf[BigDecimal]\n\
    \        val denominatorAsBigDecimal = denominator.asInstanceOf[BigDecimal]\n\
    \        val numeratorAsBigInteger = numerator.asInstanceOf[BigInteger]\n    \
    \    val denominatorAsBigInteger = denominator.asInstanceOf", "        val numer\
    \ = x.split(\"/\").map(_.toInt)\n        val denom = n.split(\"/\").map(_.toInt)\n\
    \        val numer = numer.filter(_ > 0)\n        val denom = denom.filter(_ >\
    \ 0)\n        val numer = numer.filter(_ % 1 == 0)\n        val denom = denom.filter(_\
    \ % 1 == 0)\n        val numer = numer.filter(_ > 0)\n        val denom = denom.filter(_\
    \ > 0)\n        val numer = numer.filter(_ % 1 == 0)\n        val denom = denom.filter(_\
    \ % 1 == 0)\n        val numer = numer.filter(_ > 0)\n        val denom = denom.filter(_\
    \ > 0)\n        val numer = numer.filter(_ % 1 == 0)\n        val denom = denom.filter(_\
    \ % 1 == 0)\n        val numer = numer.filter(_ > 0)\n        val denom = denom.filter(_\
    \ > 0)\n        val numer = numer.filter(_ % 1 == 0)\n        val denom = denom.filter(_\
    \ % 1 == 0)\n        val numer = numer.filter(_ > 0)\n        val denom = denom.filter(_\
    \ > 0)\n        val numer = numer.filter(_ % 1 == 0)\n        val denom = denom.filter(_\
    \ % 1 == 0)\n        val numer = numer.filter(_ > 0)\n        val denom = denom.filter(_\
    \ > 0)\n        val numer = numer.filter(_ % 1 == 0)\n        val denom = denom.filter(_\
    \ % 1 == 0)\n        val numer = numer.filter(_ > 0)\n        val denom = denom.filter(_\
    \ > 0)\n        val numer = numer.filter(_ % 1 == 0)\n        val denom = denom.filter(_\
    \ % 1 == 0)\n        val numer = numer.filter(_ > 0)\n        val denom = denom.filter(_\
    \ > 0)\n        val numer = numer.filter(_ % 1 == 0)\n        val denom = denom.filter(_\
    \ % 1 == 0)\n        val numer = numer.filter(_ > 0)\n        val denom = denom.filter(_\
    \ > 0)\n        val numer = numer.filter(_ % 1 == 0)\n        val denom = denom.filter(_\
    \ % 1 == 0)\n        val numer = numer.filter(_ > 0)\n        val denom = denom.filter(_\
    \ > 0)\n        val numer = numer.filter(_ % 1 == 0)\n        val denom = denom.filter(_\
    \ % 1 == 0)\n        val numer = numer.filter(_ > 0)\n        val denom = denom.filter(_\
    \ > 0)\n        val ", "        val nums = x.split(\"/\")\n        val dens =\
    \ n.split(\"/\")\n        val numsLength = nums.length\n        val densLength\
    \ = dens.length\n        val numsSum = nums.sum.toInt\n        val densSum = dens.sum.toInt\n\
    \        val numsSumFraction = numsSum / densSum\n        val numsSumFractionFraction\
    \ = numsSumFraction.toDouble\n        val numsSumFractionFractionFraction = numsSumFractionFraction.toInt\n\
    \        val numsSumFractionFractionFractionFraction = numsSumFractionFractionFraction.toDouble\n\
    \        val numsSumFractionFractionFractionFractionFraction = numsSumFractionFractionFractionFraction.toInt\n\
    \        val numsSumFractionFractionFractionFractionFractionFraction = numsSumFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionFraction =\
    \ numsSumFractionFractionFractionFractionFractionFractionFraction.toInt\n    \
    \    val numsSumFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val num", "        val x = x.split(\"/\")\n        val n = n.split(\"\
    /\")\n        val numerator = x(0).toInt\n        val denominator = n(0).toInt\n\
    \        if (numerator == 0 && denominator == 0) {\n            return true\n\
    \        }\n        if (numerator == 0 && denominator != 0) {\n            return\
    \ false\n        }\n        if (numerator != 0 && denominator == 0) {\n      \
    \      return false\n        }\n        if (numerator == denominator && numerator\
    \ != 0) {\n            return true\n        }\n        if (numerator == denominator\
    \ && numerator == 0) {\n            return false\n        }\n        if (numerator\
    \ == denominator && numerator == 1) {\n            return true\n        }\n  \
    \      if (numerator == denominator && numerator == -1) {\n            return\
    \ true\n        }\n        if (numerator == denominator && numerator == -2) {\n\
    \            return true\n        }\n        if (numerator == denominator && numerator\
    \ == -3) {\n            return true\n        }\n        if (numerator == denominator\
    \ && numerator == -4) {\n            return true\n        }\n        if (numerator\
    \ == denominator && numerator == -5) {\n            return true\n        }\n \
    \       if (numerator == denominator && numerator == -6) {\n            return\
    \ true\n        }\n        if (numerator == denominator && numerator == -7) {\n\
    \            return true\n        }\n        if (numerator == denominator && numerator\
    \ == -8) {\n            return true\n        }\n        if (numerator == denominator\
    \ && numerator == -9) {\n            return true\n        }\n        if (numerator\
    \ == denominator && numerator == -10) {\n            return true\n        }\n\
    \        if (numerator == denominator && numerator == -11) {\n            return\
    \ true\n        }\n        if (numerator == denominator && numerator == -12) {\n\
    \            return true\n        }\n        if (numerator == denominator && numerator\
    \ == -13) {\n            return true\n        }\n        if (numerator == denominator\
    \ && numerator == -14) {\n            return true\n        }\n        if (numerator\
    \ == denominator && numerator == -15) {\n            return true\n        }\n\
    \        if (numerator == denominator && numerator == -16) {\n            return\
    \ true\n        }\n        if (numerator == denominator && numerator == -17) {\n\
    \            return true\n        }\n        if (numerator == denominator && numerator\
    \ == -18) {\n            return true\n        }\n        if (numerator == denominator\
    \ && numerator == -19) {\n            return true\n        }\n        if (numerator\
    \ == denominator && numerator == -20) {\n            return true\n        }\n\
    \        if (numerator == denominator && numerator == -21) {\n            return\
    \ true\n        }\n        if (numerator == denominator && numerator ", "    \
    \    val x = x.split(\"/\").map(_.toInt)\n        val n = n.split(\"/\").map(_.toInt)\n\
    \        val numerator = x.head\n        val denominator = x.last\n        val\
    \ numeratorInt = numerator\n        val denominatorInt = denominator\n       \
    \ val numeratorFraction = numeratorInt / denominatorInt\n        val numeratorFractionInt\
    \ = numeratorFraction\n        val denominatorFraction = denominatorInt / denominatorInt\n\
    \        val numeratorFractionFraction = numeratorFraction / denominatorFraction\n\
    \        val numeratorFractionFractionInt = numeratorFractionFraction\n      \
    \  val numeratorFractionFractionFractionInt = numeratorFractionFractionInt * denominatorFractionInt\n\
    \        val numeratorFractionFractionFractionFractionInt = numeratorFractionFractionFractionInt\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionInt * denominator\n        val numeratorFractionFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFractionInt * numeratorInt\n    \
    \    val numeratorFractionFractionFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFractionFractionInt * numerator\n\
    \        numeratorFractionFractionFractionFractionFractionFractionFractionInt\
    \ == numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionInt",
  "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        if(xNum.product*(nNum.product) == xNum.product*nNum.product){\n     \
    \       true\n        }else{\n            false\n        }", "        val x =\
    \ x.split(\"/\").map(_.toInt)\n        val n = n.split(\"/\").map(_.toInt)\n \
    \       val numerator = x.sum\n        val denominator = n.sum\n        numerator\
    \ == denominator && numerator > 0", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n    \
    \    val nDeno = nNum.last\n        if(xDeno == 0) return false\n        if(nDeno\
    \ == 0) return false\n        if(xNum.last == nNum.last) return true\n       \
    \ if(xNum.last < nNum.last) return false\n        if(xNum.last > nNum.last) return\
    \ true\n        if(xNum.last == nNum.last) return true\n        if(xNum.last <\
    \ nNum.last) return false\n        if(xNum.last > nNum.last) return true\n   \
    \     if(xNum.last == nNum.last) return true\n        if(xNum.last < nNum.last)\
    \ return false\n        if(xNum.last > nNum.last) return true\n        if(xNum.last\
    \ == nNum.last) return true\n        if(xNum.last < nNum.last) return false\n\
    \        if(xNum.last > nNum.last) return true\n        if(xNum.last == nNum.last)\
    \ return true\n        if(xNum.last < nNum.last) return false\n        if(xNum.last\
    \ > nNum.last) return true\n        if(xNum.last == nNum.last) return true\n \
    \       if(xNum.last < nNum.last) return false\n        if(xNum.last > nNum.last)\
    \ return true\n        if(xNum.last == nNum.last) return true\n        if(xNum.last\
    \ < nNum.last) return false\n        if(xNum.last > nNum.last) return true\n \
    \       if(xNum.last == nNum.last) return true\n        if(xNum.last < nNum.last)\
    \ return false\n        if(xNum.last > nNum.last) return true\n        if(xNum.last\
    \ == nNum.last) return true\n        if(xNum.last < nNum.last) return false\n\
    \        if(xNum.last > nNum.last) return true\n        if(xNum.last == nNum.last)\
    \ return true\n        if(xNum.last < nNum.last) return false\n        if(xNum.last\
    \ > nNum.last) return true\n        if(xNum.last == nNum.last) return true\n \
    \       if(xNum.last < nNum.last) return false\n        if(xNum.last > nNum.last)\
    \ return true\n        if(xNum.last == nNum.last) return true\n        if(xNum.last\
    \ < nNum.last) return false", "        val numer = x.split(\"/\")(0)\n       \
    \ val denom = x.split(\"/\")(1)\n        val numInt = (numer toInt)\n        val\
    \ denomInt = (denom toInt)\n        if(denomInt == 0){\n            return true\n\
    \        }\n        if(numInt == 0){\n            return false\n        }\n  \
    \      if(numInt == denomInt){\n            return true\n        }\n        if(numInt\
    \ == denomInt+1){\n            return true\n        }\n        if(numInt == denomInt-1){\n\
    \            return true\n        }\n        if(numInt == denomInt+2){\n     \
    \       return true\n        }\n        if(numInt == denomInt-2){\n          \
    \  return true\n        }\n        if(numInt == denomInt+3){\n            return\
    \ true\n        }\n        if(numInt == denomInt-3){\n            return true\n\
    \        }\n        if(numInt == denomInt+4){\n            return true\n     \
    \   }\n        if(numInt == denomInt-4){\n            return true\n        }\n\
    \        if(numInt == denomInt+5){\n            return true\n        }\n     \
    \   if(numInt == denomInt-5){\n            return true\n        }\n        if(numInt\
    \ == denomInt+6){\n            return true\n        }\n        if(numInt == denomInt-6){\n\
    \            return true\n        }\n        if(numInt == denomInt+7){\n     \
    \       return true\n        }\n        if(numInt == denomInt-7){\n          \
    \  return true\n        }\n        if(numInt == denomInt+8){\n            return\
    \ true\n        }\n        if(numInt == denomInt-8){\n            return true\n\
    \        }\n        if(numInt == denomInt+9){\n            return true\n     \
    \   }\n        if(numInt == denomInt-9){\n            return true\n        }\n\
    \        if(numInt == denomInt+10){\n            return true\n        }\n    \
    \    if(numInt == denomInt-10){\n            return true\n        }\n        if(numInt\
    \ == denomInt+11){\n            return true\n        }\n        if(numInt == denomInt-11){\n\
    \            return true\n        }\n        if(numInt == denomInt+12){\n    \
    \        return true\n        }\n        if(numInt == denomInt-12){\n        \
    \    return true\n        }\n        if(numInt == denomInt+13){\n            return\
    \ true\n        }\n        if(numInt == denomInt-13){\n            return true\n\
    \        }\n        if(numInt == denomInt+14){\n            return true\n    \
    \    }\n        if(numInt == denomInt-14){\n            return true\n        }\n\
    \        if(numInt == denomInt+15){\n            return true\n        }\n    \
    \    if(numInt == denomInt-15){\n            return true\n        }", "      \
    \  val fraction = x.split(\"/\")\n        val numerator = fraction(0)\n      \
    \  val denominator = fraction(1)\n        val numeratorAsInt = numerator.toInt\n\
    \        val denominatorAsInt = denominator.toInt\n        val numeratorAsDouble\
    \ = numeratorAsInt.toDouble\n        val denominatorAsDouble = denominatorAsInt.toDouble\n\
    \        val numeratorAsFraction = Fraction(numeratorAsDouble, denominatorAsDouble)\n\
    \        val denominatorAsFraction = Fraction(denominatorAsDouble, denominatorAsDouble)\n\
    \        val numeratorAsFractionFraction = Fraction(numeratorAsFraction, denominatorAsFraction)\n\
    \        val numeratorAsFractionFractionFraction = Fraction(numeratorAsFractionFraction,\
    \ denominatorAsFraction)\n        val numeratorAsFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFraction, denominatorAsFractionFraction)\n\
    \        val numeratorAsFractionFractionFractionFractionFraction = Fraction(numeratorAsFractionFractionFractionFraction,\
    \ denominatorAsFractionFractionFraction)\n        val numeratorAsFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFraction, denominatorAsFractionFractionFractionFraction)\n\
    \        val numeratorAsFractionFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFractionFraction, denominatorAsFractionFractionFractionFractionFractionFraction)\n\
    \        val numeratorAsFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFractionFractionFraction,\
    \ denominatorAsFractionFractionFractionFractionFractionFractionFraction)\n   \
    \     val numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFractionFractionFractionFraction,\
    \ denominatorAsFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \        val numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFraction,\
    \ denominatorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \        val numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction,\
    \ denominatorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \        val numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction,\
    \ denominatorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \        val numeratorAsFractionFractionFractionFractionFractionFractionFraction",
  "        val fraction = x.split(\"/\").map(_.toInt)\n        val numerator = fraction(0)\n\
    \        val denominator = fraction(1)\n        val numeratorIsWhole = numerator\
    \ == numerator.toInt\n        val denominatorIsWhole = denominator == denominator.toInt\n\
    \        val numeratorIsNegative = numerator < 0\n        val denominatorIsNegative\
    \ = denominator < 0\n        val numeratorIsPositive = numerator > 0\n       \
    \ val denominatorIsPositive = denominator > 0\n        val numeratorIsNegativeOrZero\
    \ = numeratorIsNegative || numerator == 0\n        val denominatorIsNegativeOrZero\
    \ = denominatorIsNegative || denominator == 0\n        val numeratorIsPositiveOrZero\
    \ = numeratorIsPositive || numerator == 0\n        val denominatorIsPositiveOrZero\
    \ = denominatorIsPositive || denominator == 0\n        val numeratorIsNegativeOrZeroOrZero\
    \ = numeratorIsNegativeOrZero || numeratorIsZero\n        val denominatorIsNegativeOrZeroOrZero\
    \ = denominatorIsNegativeOrZero || denominatorIsZero\n        val numeratorIsPositiveOrZeroOrZero\
    \ = numeratorIsPositiveOrZero || numeratorIsZero\n        val denominatorIsPositiveOrZeroOrZero\
    \ = denominatorIsPositiveOrZero || denominatorIsZero\n        val numeratorIsNegativeOrZeroOrZeroOrZero\
    \ = numeratorIsNegativeOrZeroOrZero || numeratorIsZeroOrZero\n        val denominatorIsNegativeOrZeroOrZeroOrZero\
    \ = denominatorIsNegativeOrZeroOrZero || denominatorIsZeroOrZero\n        val\
    \ numeratorIsPositiveOrZeroOrZeroOrZero = numeratorIsPositiveOrZeroOrZero || numeratorIsZeroOrZero\n\
    \        val denominatorIsPositiveOrZeroOrZeroOrZero = denominatorIsPositiveOrZeroOrZero\
    \ || denominatorIsZeroOrZero\n        val numeratorIsNegativeOrZeroOrZeroOrZero\
    \ = numeratorIsNegativeOrZeroOrZeroOrZero || numeratorIsZeroOrZeroOrZero\n   \
    \     val denominatorIsNegativeOrZeroOrZeroOrZero = denominatorIsNegativeOrZeroOrZeroOrZero\
    \ || denominatorIsZeroOrZeroOrZero\n        val numeratorIsPositiveOrZeroOrZeroOrZero\
    \ = numeratorIsPositiveOrZeroOrZeroOrZero || numeratorIsZeroOrZeroOrZero\n   \
    \     val denominatorIsPositiveOrZeroOrZeroOrZero = denominatorIsPositiveOrZeroOrZeroOrZer",
  "        val nums = x.split(\"/\").map(_.toInt)\n        val dens = n.split(\"/\"\
    ).map(_.toInt)\n        val numsSum = nums.sum\n        val densSum = dens.sum\n\
    \        val numsDiff = nums.diff(dens)\n        val densDiff = dens.diff(nums)\n\
    \        val numsDiffSum = numsDiff.sum\n        val densDiffSum = densDiff.sum\n\
    \        val numsDiffDiff = numsDiff.diff(densDiff)\n        val densDiffDiff\
    \ = densDiff.diff(numsDiff)\n        val numsDiffDiffSum = numsDiffDiff.sum\n\
    \        val densDiffDiffSum = densDiffDiff.sum\n        val numsDiffDiffDiff\
    \ = numsDiffDiff.diff(densDiffDiff)\n        val densDiffDiffDiff = densDiffDiff.diff(numsDiffDiff)\n\
    \        val numsDiffDiffDiffSum = numsDiffDiffDiff.sum\n        val densDiffDiffDiffSum\
    \ = densDiffDiffDiff.sum\n        val numsDiffDiffDiffDiff = numsDiffDiffDiff.diff(densDiffDiffDiff)\n\
    \        val densDiffDiffDiffDiff = densDiffDiffDiff.diff(numsDiffDiffDiff)\n\
    \        val numsDiffDiffDiffSum = numsDiffDiffDiffSum\n        val densDiffDiffDiffSum\
    \ = densDiffDiffDiffSum\n        val numsDiffDiffDiffDiff = numsDiffDiffDiffDiff\n\
    \        val densDiffDiffDiffDiff = densDiffDiffDiffDiff\n        val numsDiffDiffDiffSum\
    \ = numsDiffDiffDiffSum\n        val densDiffDiffDiffSum = densDiffDiffDiffSum\n\
    \        val numsDiffDiffDiffDiff = numsDiffDiffDiffDiff\n        val densDiffDiffDiffDiff\
    \ = densDiffDiffDiffDiff\n        val numsDiffDiffDiffSum = numsDiffDiffDiffSum\n\
    \        val densDiffDiffDiffSum = densDiffDiffDiffSum\n        val numsDiffDiffDiffDiff\
    \ = numsDiffDiffDiffDiff\n        val densDiffDiffDiffDiff = densDiffDiffDiffDiff\n\
    \        val numsDiffDiffDiffSum = numsDiffDiffDiffSum\n        val densDiffDiffDiffSum\
    \ = densDiffDiffDiffSum\n        val numsDiffDiff", "        val x = x.split(\"\
    /\").map(_.toInt)\n        val n = n.split(\"/\").map(_.toInt)\n        val x0\
    \ = x(0)\n        val n0 = n(0)\n        val x1 = x(1)\n        val n1 = n(1)\n\
    \        val xn = x(0) * n(0) / n(1)\n        val xd = x(0) / n(0)\n        val\
    \ xn = x(0) * n(0) / n(1)\n        val xd = x(0) / n(0)\n        val xn = x(0)\
    \ * n(0) / n(1)\n        val xd = x(0) / n(0)\n        val xn = x(0) * n(0) /\
    \ n(1)\n        val xd = x(0) / n(0)\n        val xn = x(0) * n(0) / n(1)\n  \
    \      val xd = x(0) / n(0)\n        val xn = x(0) * n(0) / n(1)\n        val\
    \ xd = x(0) / n(0)\n        val xn = x(0) * n(0) / n(1)\n        val xd = x(0)\
    \ / n(0)\n        val xn = x(0) * n(0) / n(1)\n        val xd = x(0) / n(0)\n\
    \        val xn = x(0) * n(0) / n(1)\n        val xd = x(0) / n(0)\n        val\
    \ xn = x(0) * n(0) / n(1)\n        val xd = x(0) / n(0)\n        val xn = x(0)\
    \ * n(0) / n(1)\n        val xd = x(0) / n(0)\n        val xn = x(0) * n(0) /\
    \ n(1)\n        val xd = x(0) / n(0)\n        val xn = x(0) * n(0) / n(1)\n  \
    \      val xd = x(0) / n(0)\n        val xn = x(0) * n(0) / n(1)\n        val\
    \ xd = x(0) / n(0)\n        val xn = x(0) * n(0) / n(1)\n        val xd = x(0)\
    \ / n(0)\n        val xn = x(0) * n(0) / n(1)\n        val xd = x(0) / n(0)\n\
    \        val xn = x(0) * n(0) / n(1)\n        val xd = x(0) / n(0)\n        val\
    \ xn = x(0) * n(0) / n(1)\n        val xd = x(0) / n(0)\n        val xn = x(0)\
    \ * n(0) / n(1)\n        val xd = x(0) / n(0)\n        val xn = x(0) * n(0) /\
    \ n(1)\n        val xd = x(0) / n(0)", "        val fraction = x.split(\"/\").map(_.toInt)\n\
    \        val numerator = fraction(0)\n        val denominator = fraction(1)\n\
    \        val numeratorIsWhole = numerator == numerator.toInt\n        val denominatorIsWhole\
    \ = denominator == denominator.toInt\n        val numeratorIsNegative = numerator\
    \ < 0\n        val denominatorIsNegative = denominator < 0\n        val numeratorIsPositive\
    \ = numerator > 0\n        val denominatorIsPositive = denominator > 0\n     \
    \   val numeratorIsNegativeOrZero = numeratorIsNegative || numeratorIsZero\n \
    \       val denominatorIsNegativeOrZero = denominatorIsNegative || denominatorIsZero\n\
    \        val numeratorIsPositiveOrZero = numeratorIsPositive || numeratorIsZero\n\
    \        val denominatorIsPositiveOrZero = denominatorIsPositive || denominatorIsZero\n\
    \        val numeratorIsNegativeOrZeroOrZero = numeratorIsNegativeOrZero || denominatorIsNegativeOrZero\n\
    \        val denominatorIsNegativeOrZeroOrZero = denominatorIsNegativeOrZero ||\
    \ denominatorIsZeroOrZero\n        val numeratorIsPositiveOrZeroOrZero = numeratorIsPositiveOrZero\
    \ || numeratorIsZeroOrZero\n        val denominatorIsPositiveOrZeroOrZero = denominatorIsPositiveOrZero\
    \ || denominatorIsZeroOrZero\n        val numeratorIsNegativeOrZeroOrZeroOrZero\
    \ = numeratorIsNegativeOrZeroOrZero || denominatorIsNegativeOrZeroOrZero\n   \
    \     val denominatorIsNegativeOrZeroOrZeroOrZero = denominatorIsNegativeOrZeroOrZero\
    \ || denominatorIsZeroOrZeroOrZero\n        val numeratorIsPositiveOrZeroOrZeroOrZero\
    \ = numeratorIsPositiveOrZeroOrZero || numeratorIsZeroOrZeroOrZero\n        val\
    \ denominatorIsPositiveOrZeroOrZeroOrZero = denominatorIsPositiveOrZeroOrZero\
    \ || denominatorIsZeroOrZeroOrZero\n        val numeratorIsNegativeOrZeroOrZeroOrZero\
    \ = numeratorIsNegativeOrZeroOrZeroOrZero || denominatorIsNegativeOrZeroOrZeroOrZero\n\
    \        val denominatorIsNegativeOrZeroOrZeroOrZero = denominatorIsNegativeOrZeroOrZeroOrZero\
    \ || denominatorIsZeroOrZeroOrZeroOrZero\n        val numeratorIsPositiveOrZeroOrZeroOrZero\
    \ = numeratorIsPositiveOrZeroOrZeroOrZero || numeratorIsZeroOrZeroOrZeroOrZero\n\
    \        val denominatorIsPositive", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n    \
    \    val nDeno = nNum.last\n        val xNum1 = xNum.dropRight(1)\n        val\
    \ nNum1 = nNum.dropRight(1)\n        val xDeno1 = xDeno\n        val nDeno1 =\
    \ nDeno\n        val xNum2 = xNum1.dropRight(1)\n        val nNum2 = nNum1.dropRight(1)\n\
    \        val xDeno2 = xDeno1\n        val nDeno2 = nDeno1\n        val xNum3 =\
    \ xNum2.dropRight(1)\n        val nNum3 = nNum2.dropRight(1)\n        val xDeno3\
    \ = xDeno2\n        val nDeno3 = nDeno2\n        val xNum4 = xNum3.dropRight(1)\n\
    \        val nNum4 = nNum3.dropRight(1)\n        val xDeno4 = xDeno3\n       \
    \ val nDeno4 = nDeno3\n        val xNum5 = xNum4.dropRight(1)\n        val nNum5\
    \ = nNum4.dropRight(1)\n        val xDeno5 = xDeno4\n        val nDeno5 = nDeno4\n\
    \        val xNum6 = xNum5.dropRight(1)\n        val nNum6 = nNum5.dropRight(1)\n\
    \        val xDeno6 = xDeno5\n        val nDeno6 = nDeno5\n        val xNum7 =\
    \ xNum6.dropRight(1)\n        val nNum7 = nNum6.dropRight(1)\n        val xDeno7\
    \ = xDeno6\n        val nDeno7 = nDeno6\n        val xNum8 = xNum7.dropRight(1)\n\
    \        val nNum8 = nNum7.dropRight(1)\n        val xDeno8 = xDeno7\n       \
    \ val nDeno8 = nDeno7\n        val xNum9 = xNum8.dropRight(1)\n        val nNum9\
    \ = nNum8.dropRight(1)\n        val xDeno9 = xDeno8\n        val nDeno9 = nDeno8\n\
    \        val xNum10 = xNum9.dropRight(1)\n        val nNum10 = nNum9.dropRight(1)\n\
    \        val xDeno10 = xDeno9\n        val nDeno10 = nDeno9\n        val xNum11\
    \ = xNum10.dropRight(1)\n        val ", "        val numerator = x.split(\"/\"\
    )(0)\n        val denominator = x.split(\"/\")(1)\n        val numeratorInt =\
    \ numerator.toInt\n        val denominatorInt = denominator.toInt\n        val\
    \ numeratorFraction = numeratorInt / denominatorInt\n        val numeratorFractionFraction\
    \ = numeratorFraction.toDouble\n        val numeratorFractionFractionFractionFraction\
    \ = numeratorFractionFraction * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFraction * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFraction * denominatorInt\n     \
    \   val numeratorFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFraction * denominatorInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFraction", "        val xNum = x.split(\"\
    /\")\n        val nNum = n.split(\"/\")\n        val xDeno = xNum.last\n     \
    \   val nDeno = nNum.last\n        val xNum1 = xNum.dropRight(1)\n        val\
    \ nNum1 = nNum.dropRight(1)\n        val xNum2 = xNum1.dropRight(1)\n        val\
    \ nNum2 = nNum1.dropRight(1)\n        val xNum3 = xNum2.dropRight(1)\n       \
    \ val nNum3 = nNum2.dropRight(1)\n        val xNum4 = xNum3.dropRight(1)\n   \
    \     val nNum4 = nNum3.dropRight(1)\n        val xNum5 = xNum4.dropRight(1)\n\
    \        val nNum5 = nNum4.dropRight(1)\n        val xNum6 = xNum5.dropRight(1)\n\
    \        val nNum6 = nNum5.dropRight(1)\n        val xNum7 = xNum6.dropRight(1)\n\
    \        val nNum7 = nNum6.dropRight(1)\n        val xNum8 = xNum7.dropRight(1)\n\
    \        val nNum8 = nNum7.dropRight(1)\n        val xNum9 = xNum8.dropRight(1)\n\
    \        val nNum9 = nNum8.dropRight(1)\n        val xNum10 = xNum9.dropRight(1)\n\
    \        val nNum10 = nNum9.dropRight(1)\n        val xNum11 = xNum10.dropRight(1)\n\
    \        val nNum11 = nNum10.dropRight(1)\n        val xNum12 = xNum11.dropRight(1)\n\
    \        val nNum12 = nNum11.dropRight(1)\n        val xNum13 = xNum12.dropRight(1)\n\
    \        val nNum13 = nNum12.dropRight(1)\n        val xNum14 = xNum13.dropRight(1)\n\
    \        val nNum14 = nNum13.dropRight(1)\n        val xNum15 = xNum14.dropRight(1)\n\
    \        val nNum15 = nNum14.dropRight(1)\n        val xNum16 = xNum15.dropRight(1)\n\
    \        val nNum16 = nNum15.dropRight(1)\n        val xNum17 = xNum16.dropRight(1)\n\
    \        val nNum17 = nNum16.dropRight(1)\n        val xNum18 = xNum17.dropRight(1)\n\
    \        val nNum18 = nNum17.dropRight(1)\n        val xNum19 = xNum18.dropRight(1)\n\
    \        val nNum19 = nNum18.dropRight(1)\n        val xNum20 = xNum19.dropRight(1)\n\
    \        val nNum20 = nNum19.", "        val xNum = x.split(\"/\").toInt\n   \
    \     val nNum = n.split(\"/\").toInt\n        if(xNum.head == 0 && nNum.head\
    \ == 0){\n            return true\n        }\n        if(xNum.head == 0 && nNum.head\
    \ != 0){\n            return false\n        }\n        if(xNum.head != 0 && nNum.head\
    \ == 0){\n            return false\n        }\n        if(xNum.head != 0 && nNum.head\
    \ != 0){\n            if(xNum.head < nNum.head){\n                return false\n\
    \            }\n            if(xNum.head > nNum.head){\n                return\
    \ true\n            }\n        }\n        return true", "        val xNum = x.split(\"\
    /\").toInt\n        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        if(xDeno == 0 || nDeno == 0) false\n \
    \       else if(xDeno == nDeno) true\n        else if(xNum.last == nNum.last)\
    \ simplify(x.substring(0, x.lastIndexOf(\"/\")), n)\n        else simplify(x.substring(0,\
    \ x.lastIndexOf(\"/\")), n.substring(0, n.lastIndexOf(\"/\")))", "        val\
    \ xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n     \
    \   val xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNum2 =\
    \ xNum.init\n        val nNum2 = nNum.init\n        val xDeno2 = xNum2.last\n\
    \        val nDeno2 = nNum2.last\n        val xNum3 = xNum2.init\n        val\
    \ nNum3 = nNum2.init\n        val xDeno3 = xNum3.last\n        val nDeno3 = nNum3.last\n\
    \        val xNum4 = xNum3.init\n        val nNum4 = nNum3.init\n        val xDeno4\
    \ = xNum4.last\n        val nDeno4 = nNum4.last\n        val xNum5 = xNum4.init\n\
    \        val nNum5 = nNum4.init\n        val xDeno5 = xNum5.last\n        val\
    \ nDeno5 = nNum5.last\n        val xNum6 = xNum5.init\n        val nNum6 = nNum5.init\n\
    \        val xDeno6 = xNum6.last\n        val nDeno6 = nNum6.last\n        val\
    \ xNum7 = xNum6.init\n        val nNum7 = nNum6.init\n        val xDeno7 = xNum7.last\n\
    \        val nDeno7 = nNum7.last\n        val xNum8 = xNum7.init\n        val\
    \ nNum8 = nNum7.init\n        val xDeno8 = xNum8.last\n        val nDeno8 = nNum8.last\n\
    \        val xNum9 = xNum8.init\n        val nNum9 = nNum8.init\n        val xDeno9\
    \ = xNum9.last\n        val nDeno9 = nNum9.last\n        val xNum10 = xNum9.init\n\
    \        val nNum10 = nNum9.init\n        val xDeno10 = xNum10.last\n        val\
    \ nDeno10 = nNum10.last\n        val xNum11 = xNum10.init\n        val nNum11\
    \ = nNum10.init\n        val xDeno11 = xNum11.last\n        val nDeno11 = nNum11.last\n\
    \        val xNum12 = xNum11.init\n        val nNum12 = nNum11.init\n        val\
    \ xDeno12 = xNum12.last\n        val nDeno12 = nNum12.last\n        val xNum13\
    \ = xNum12.init\n", "        val nums = x.split(\"/\")\n        val dens = n.split(\"\
    /\")\n        val numsLength = nums.length\n        val densLength = dens.length\n\
    \        val numsLength = numsLength > densLength ? numsLength : densLength\n\
    \        val numsLength = numsLength > 0 ? numsLength : 1\n        val densLength\
    \ = densLength > 0 ? densLength : 1\n        var i = 0\n        var j = 0\n  \
    \      var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n  \
    \      var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n  \
    \      var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n  \
    \      var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n  \
    \      var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n  \
    \      var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n  \
    \      var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n  \
    \      var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n  \
    \      var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n  \
    \      var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n  \
    \      var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n  \
    \      var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n  \
    \      var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n  \
    \      var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n  \
    \      var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n  \
    \      var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n  \
    \      var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n  \
    \      var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n  \
    \      var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n  \
    \      var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n  \
    \      var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n  \
    \      var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n  \
    \      var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n  \
    \      var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n  \
    \      var k = 0\n        var l = 0\n        var m = 0\n        var n", "    \
    \    val numer = x.split(\"/\")\n        val denom = n.split(\"/\")\n        val\
    \ num : Int = numer.head.toInt\n        val den : Int = denom.head.toInt\n   \
    \     if (den == 0) return true\n        if (den % num == 0) return false\n  \
    \      val num2 : Int = numer.tail.head.toInt\n        val den2 : Int = denom.tail.head.toInt\n\
    \        if (den2 == 0) return true\n        if (den2 % num2 == 0) return false\n\
    \        val num3 : Int = numer.tail.tail.head.toInt\n        val den3 : Int =\
    \ denom.tail.tail.head.toInt\n        if (den3 == 0) return true\n        if (den3\
    \ % num3 == 0) return false\n        val num4 : Int = numer.tail.tail.tail.head.toInt\n\
    \        val den4 : Int = denom.tail.tail.tail.head.toInt\n        if (den4 ==\
    \ 0) return true\n        if (den4 % num4 == 0) return false\n        val num5\
    \ : Int = numer.tail.tail.tail.tail.head.toInt\n        val den5 : Int = denom.tail.tail.tail.tail.head.toInt\n\
    \        if (den5 == 0) return true\n        if (den5 % num5 == 0) return false\n\
    \        val num6 : Int = numer.tail.tail.tail.tail.tail.head.toInt\n        val\
    \ den6 : Int = denom.tail.tail.tail.tail.tail.head.toInt\n        if (den6 ==\
    \ 0) return true\n        if (den6 % num6 == 0) return false\n        val num7\
    \ : Int = numer.tail.tail.tail.tail.tail.tail.head.toInt\n        val den7 : Int\
    \ = denom.tail.tail.tail.tail.tail.tail.head.toInt\n        if (den7 == 0) return\
    \ true\n        if (den7 % num7 == 0) return false\n        val num8 : Int = numer.tail.tail.tail.tail.tail.tail.tail.head.toInt\n\
    \        val den8 : Int = denom.tail.tail.tail.tail.tail.tail.tail.head.toInt\n\
    \        if (den8 == 0) return true\n        if (den8 % num8 == 0) return false\n\
    \        val num9 : Int = numer.tail.tail.tail.tail.tail.tail.tail.tail.head.toInt\n\
    \        val den9 : Int = deno", "        val xNum = x.split(\"/\").toInt\n  \
    \      val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n      \
    \  val nDeno = nNum.last\n        if(xDeno == 0 || nDeno == 0) false\n       \
    \ else if(xDeno == nDeno) true\n        else if(xNum.last == nNum.last) simplify(x.replaceFirst(s\"\
    /$xDeno/$nDeno\"), n.replaceFirst(s\"/$xDeno/$nDeno\"))\n        else simplify(x.replaceFirst(s\"\
    /$xDeno/$nDeno\"), n.replaceFirst(s\"/$nDeno/$xDeno\"))", "        val fraction\
    \ = x.split(\"/\").map(_.toInt)\n        val numerator = fraction(0)\n       \
    \ val denominator = fraction(1)\n        val numeratorIsWhole = numerator == numerator.toInt\n\
    \        val denominatorIsWhole = denominator == denominator.toInt\n        val\
    \ numeratorIsNegative = numerator < 0\n        val denominatorIsNegative = denominator\
    \ < 0\n        val numeratorIsPositive = numerator > 0\n        val denominatorIsPositive\
    \ = denominator > 0\n        val numeratorIsZero = numerator == 0\n        val\
    \ denominatorIsZero = denominator == 0\n        val numeratorIsNegativeOrZero\
    \ = numeratorIsNegative || numeratorIsZero\n        val denominatorIsNegativeOrZero\
    \ = denominatorIsNegative || denominatorIsZero\n        val numeratorIsPositiveOrZero\
    \ = numeratorIsPositive || numeratorIsZero\n        val denominatorIsPositiveOrZero\
    \ = denominatorIsPositive || denominatorIsZero\n        val numeratorIsNegativeOrZeroOrZero\
    \ = numeratorIsNegativeOrZero || denominatorIsNegativeOrZero\n        val numeratorIsPositiveOrZeroOrZero\
    \ = numeratorIsPositiveOrZero || denominatorIsPositiveOrZero\n        val numeratorIsNegativeOrZeroOrZeroOrZero\
    \ = numeratorIsNegativeOrZeroOrZero || denominatorIsNegativeOrZeroOrZero\n   \
    \     val numeratorIsPositiveOrZeroOrZeroOrZero = numeratorIsPositiveOrZeroOrZero\
    \ || denominatorIsPositiveOrZeroOrZero\n        val numeratorIsNegativeOrZeroOrZeroOrZeroOrZero\
    \ = numeratorIsNegativeOrZeroOrZeroOrZero || denominatorIsNegativeOrZeroOrZeroOrZero\n\
    \        val numeratorIsPositiveOrZeroOrZeroOrZeroOrZero = numeratorIsPositiveOrZeroOrZeroOrZero\
    \ || denominatorIsPositiveOrZeroOrZeroOrZero\n        val numeratorIsNegativeOrZeroOrZeroOrZeroOrZero\
    \ = numeratorIsNegativeOrZeroOrZeroOrZero || denominatorIsNegativeOrZeroOrZeroOrZero\n\
    \        val numeratorIsPositiveOrZeroOrZeroOrZeroOrZero = numeratorIsPositiveOrZeroOrZeroOrZero\
    \ || denominatorIsPositiveOrZeroOrZeroOrZero\n        val numeratorIsNegativeOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = numeratorIsNegativeOrZeroOrZeroOrZeroOrZero || denominatorIsNegativeOrZeroOrZeroOrZeroOrZero\n\
    \        val numer", "        val nums = x.split(\"/\")\n        val dens = n.split(\"\
    /\")\n        val numsLength = nums.length\n        val densLength = dens.length\n\
    \        val numsSum = nums.sum.toInt\n        val densSum = dens.sum.toInt\n\
    \        val numsDiff = numsSum - densSum\n        val numsDiff2 = numsDiff *\
    \ numsDiff\n        val densDiff = densSum - numsSum\n        val densDiff2 =\
    \ densDiff * densDiff\n        val numsDiff3 = numsDiff2 * numsDiff\n        val\
    \ densDiff3 = densDiff2 * densDiff\n        val numsDiff4 = numsDiff3 * numsDiff\n\
    \        val densDiff4 = densDiff3 * densDiff\n        val numsDiff5 = numsDiff4\
    \ * numsDiff\n        val densDiff5 = densDiff4 * densDiff\n        val numsDiff6\
    \ = numsDiff5 * numsDiff\n        val densDiff6 = densDiff5 * densDiff\n     \
    \   val numsDiff7 = numsDiff6 * numsDiff\n        val densDiff7 = densDiff6 *\
    \ densDiff\n        val numsDiff8 = numsDiff7 * numsDiff\n        val densDiff8\
    \ = densDiff7 * densDiff\n        val numsDiff9 = numsDiff8 * numsDiff\n     \
    \   val densDiff9 = densDiff8 * densDiff\n        val numsDiff10 = numsDiff9 *\
    \ numsDiff\n        val densDiff10 = densDiff9 * densDiff\n        val numsDiff11\
    \ = numsDiff10 * numsDiff\n        val densDiff11 = densDiff10 * densDiff\n  \
    \      val numsDiff12 = numsDiff11 * numsDiff\n        val densDiff12 = densDiff11\
    \ * densDiff\n        val numsDiff13 = numsDiff12 * numsDiff\n        val densDiff13\
    \ = densDiff12 * densDiff\n        val numsDiff14 = numsDiff13 * numsDiff\n  \
    \      val densDiff14 = densDiff13 * densDiff\n        val numsDiff15 = numsDiff14\
    \ * numsDiff\n        val densDiff15 = densDiff14 * densDiff\n        val numsDiff16\
    \ = numsDiff15 * numsDiff\n        val ", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n    \
    \    val nDeno = nNum.last\n        val xNum2 = xNum.init\n        val nNum2 =\
    \ nNum.init\n        val xDeno2 = xDeno * xDeno\n        val nDeno2 = nDeno *\
    \ nDeno\n        val xNum3 = xNum2.toInt\n        val nNum3 = nNum2.toInt\n  \
    \      val xDeno3 = xDeno2 * xNum3\n        val nDeno3 = nDeno2 * nNum3\n    \
    \    val xNum4 = xNum3 / xDeno3\n        val nNum4 = nNum3 / nDeno3\n        val\
    \ xNum5 = xNum4 / xDeno\n        val nNum5 = nNum4 / nDeno\n        val xNum6\
    \ = xNum5 / xDeno2\n        val nNum6 = nNum5 / nDeno2\n        val xNum7 = xNum6\
    \ / xDeno3\n        val nNum7 = nNum6 / nDeno3\n        val xNum8 = xNum7 / xDeno4\n\
    \        val nNum8 = nNum7 / nDeno4\n        val xNum9 = xNum8 / xDeno5\n    \
    \    val nNum9 = nNum8 / nDeno5\n        val xNum10 = xNum9 / xDeno6\n       \
    \ val nNum10 = nNum9 / nDeno6\n        val xNum11 = xNum10 / xDeno7\n        val\
    \ nNum11 = nNum10 / nDeno7\n        val xNum12 = xNum11 / xDeno8\n        val\
    \ nNum12 = nNum11 / nDeno8\n        val xNum13 = xNum12 / xDeno9\n        val\
    \ nNum13 = nNum12 / nDeno9\n        val xNum14 = xNum13 / xDeno10\n        val\
    \ nNum14 = nNum13 / nDeno10\n        val xNum15 = xNum14 / xDeno11\n        val\
    \ nNum15 = nNum14 / nDeno11\n        val xNum16 = xNum15 / xDeno12\n        val\
    \ nNum16 = nNum15 / nDeno12\n        val xNum17 = xNum16 / xDeno", "        val\
    \ xNum = x.split(\"/\")\n        val nNum = n.split(\"/\")\n        if(xNum.length\
    \ != nNum.length) false\n        else {\n            val xNum1 = xNum(0)\n   \
    \         val nNum1 = nNum(0)\n            val xNum2 = xNum(1)\n            val\
    \ nNum2 = nNum(1)\n            if(xNum1.toInt != nNum1.toInt) false\n        \
    \    else if(xNum2.toInt != nNum2.toInt) false\n            else if(xNum1.toInt\
    \ == 0 && nNum1.toInt == 0) true\n            else if(xNum1.toInt == 0 && nNum1.toInt\
    \ != 0) false\n            else if(xNum1.toInt != 0 && nNum1.toInt == 0) false\n\
    \            else if(xNum1.toInt != 0 && nNum1.toInt != 0) simplify(xNum1.toString\
    \ + \"/\" + nNum1.toString, xNum2.toString + \"/\" + nNum2.toString)\n       \
    \ }", "        val x = x.split(\"/\").map(_.toInt)\n        val n = n.split(\"\
    /\").map(_.toInt)\n        val xx = x.head\n        val nn = n.head\n        val\
    \ xn = x.tail\n        val nn = n.tail\n        val xx = x.head\n        val nn\
    \ = n.head\n        val xn = x.tail\n        val nn = n.tail\n        val xx =\
    \ x.head\n        val nn = n.head\n        val xn = x.tail\n        val nn = n.tail\n\
    \        val xx = x.head\n        val nn = n.head\n        val xn = x.tail\n \
    \       val nn = n.tail\n        val xx = x.head\n        val nn = n.head\n  \
    \      val xn = x.tail\n        val nn = n.tail\n        val xx = x.head\n   \
    \     val nn = n.head\n        val xn = x.tail\n        val nn = n.tail\n    \
    \    val xx = x.head\n        val nn = n.head\n        val xn = x.tail\n     \
    \   val nn = n.tail\n        val xx = x.head\n        val nn = n.head\n      \
    \  val xn = x.tail\n        val nn = n.tail\n        val xx = x.head\n       \
    \ val nn = n.head\n        val xn = x.tail\n        val nn = n.tail\n        val\
    \ xx = x.head\n        val nn = n.head\n        val xn = x.tail\n        val nn\
    \ = n.tail\n        val xx = x.head\n        val nn = n.head\n        val xn =\
    \ x.tail\n        val nn = n.tail\n        val xx = x.head\n        val nn = n.head\n\
    \        val xn = x.tail\n        val nn = n.tail\n        val xx = x.head\n \
    \       val nn = n.head\n        val xn = x.tail\n        val nn = n.tail\n  \
    \      val xx = x.head\n        val nn = n.head\n        val xn = x.tail\n   \
    \     val nn = n.tail\n        val xx = x.head\n        val nn = n.head\n    \
    \    val xn = x.tail\n        val nn = n.tail\n        val xx = x.head\n     \
    \   val nn = n.head\n        val xn = x.tail\n        val nn = n.tail\n      \
    \  val xx = x.head\n        val nn = n.head\n        val xn = x.tail\n       \
    \ val nn = n.tail\n        val xx = x.head\n        val n", "        val xNum\
    \ = x.split(\"/\")\n        val nNum = n.split(\"/\")\n        val xNum2 = xNum.map(_.toInt)\n\
    \        val nNum2 = nNum.map(_.toInt)\n        val xNum3 = xNum2.filter(_ > 0)\n\
    \        val nNum3 = nNum2.filter(_ > 0)\n        val xNum4 = xNum3.filter(_ >\
    \ 0)\n        val nNum4 = nNum3.filter(_ > 0)\n        val xNum5 = xNum4.filter(_\
    \ > 0)\n        val nNum5 = nNum4.filter(_ > 0)\n        val xNum6 = xNum5.filter(_\
    \ > 0)\n        val nNum6 = nNum5.filter(_ > 0)\n        val xNum7 = xNum6.filter(_\
    \ > 0)\n        val nNum7 = nNum6.filter(_ > 0)\n        val xNum8 = xNum7.filter(_\
    \ > 0)\n        val nNum8 = nNum7.filter(_ > 0)\n        val xNum9 = xNum8.filter(_\
    \ > 0)\n        val nNum9 = nNum8.filter(_ > 0)\n        val xNum10 = xNum9.filter(_\
    \ > 0)\n        val nNum10 = nNum9.filter(_ > 0)\n        val xNum11 = xNum10.filter(_\
    \ > 0)\n        val nNum11 = nNum10.filter(_ > 0)\n        val xNum12 = xNum11.filter(_\
    \ > 0)\n        val nNum12 = nNum11.filter(_ > 0)\n        val xNum13 = xNum12.filter(_\
    \ > 0)\n        val nNum13 = nNum12.filter(_ > 0)\n        val xNum14 = xNum13.filter(_\
    \ > 0)\n        val nNum14 = nNum13.filter(_ > 0)\n        val xNum15 = xNum14.filter(_\
    \ > 0)\n        val nNum15 = nNum14.filter(_ > 0)\n        val xNum16 = xNum15.filter(_\
    \ > 0)\n        val nNum16 = nNum15.filter(_ > 0)\n        val xNum17 = xNum16.filter(_\
    \ > 0)\n        val nNum17 = nNum16.filter(_ > 0)\n        val xNum18 = xNum17.filter(_\
    \ > 0)\n        val nNum18 = nNum17.filter(_ > 0)\n        val xNum19 = xNum18.filter(_\
    \ > 0)\n        val nNum19 = nNum18.filter(_ > 0)\n        val xNum20 = xNum19.filter(_\
    \ > 0)\n        val nNum20 = nNum19.filter(_ > 0)\n", "        val xNum = x.split(\"\
    /\").toInt\n        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        (xNum.head * nNum.head == xDeno) && (nNum.head\
    \ * xDeno == nDeno)", "        val nums = x.split(\"/\")\n        val dens = n.split(\"\
    /\")\n        val numsLength = nums.length\n        val densLength = dens.length\n\
    \        if(numsLength != densLength)\n            return false\n        val numsSum\
    \ = nums.sum.toDouble\n        val densSum = dens.sum.toDouble\n        if(numsSum\
    \ == densSum)\n            return true\n        val numsSumFraction = numsSum\
    \ / densSum\n        val densSumFraction = densSum / numsSum\n        if(numsSumFraction\
    \ == densSumFraction)\n            return true\n        val numsSumFractionFraction\
    \ = numsSumFraction / densSumFraction\n        val densSumFractionFraction = densSumFraction\
    \ / numsSumFraction\n        if(numsSumFractionFraction == densSumFractionFraction)\n\
    \            return true\n        val numsSumFractionFractionFraction = numsSumFractionFraction\
    \ / densSumFractionFraction\n        val densSumFractionFractionFraction = densSumFractionFraction\
    \ / numsSumFractionFraction\n        if(numsSumFractionFractionFraction == densSumFractionFractionFraction)\n\
    \            return true\n        val numsSumFractionFractionFractionFraction\
    \ = numsSumFractionFractionFraction / densSumFractionFractionFraction\n      \
    \  val densSumFractionFractionFractionFraction = densSumFractionFractionFraction\
    \ / numsSumFractionFractionFraction\n        if(numsSumFractionFractionFractionFraction\
    \ == densSumFractionFractionFractionFraction)\n            return true\n     \
    \   val numsSumFractionFractionFractionFractionFraction = numsSumFractionFractionFractionFraction\
    \ / densSumFractionFractionFractionFraction\n        val densSumFractionFractionFractionFractionFraction\
    \ = densSumFractionFractionFractionFraction / numsSumFractionFractionFractionFraction\n\
    \        if(numsSumFractionFractionFractionFraction == densSumFractionFractionFractionFractionFraction)\n\
    \            return true\n        val numsSumFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFraction / densSumFractionFractionFractionFractionFraction\n\
    \        val densSumFractionFractionFractionFractionFraction = densSumFractionFractionFractionFractionFraction\
    \ / numsSumFractionFractionFractionFractionFractionFraction\n        if(numsSumFractionFractionFractionFractionFraction\
    \ == densSumFractionFractionFractionFractionFractionFraction)\n            return\
    \ true\n        val numsSumFractionFractionFractionFractionFractionFraction =\
    \ numsSumFractionFractionFractionFractionFractionFraction / densSumFractionFractionFractionFractionFractionFraction\n\
    \        val densSumFractionFractionFractionFractionFractionFraction = den", " \
    \       val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        val xDeno = xNum.last\n        val nDeno = nNum.last\n        if(xDeno\
    \ == 0 || nDeno == 0) false\n        else if(xDeno == nDeno) true\n        else\
    \ if(xDeno == 1) simplify(x.replaceFirst(\"/\" + xDeno, \"\"), n.replaceFirst(\"\
    /\" + nDeno, \"\"))\n        else simplify(x.replaceFirst(\"/\" + xDeno, \"\"\
    ), n.replaceFirst(\"/\" + nDeno, \"\")) && simplify(x.replaceFirst(\"/\" + nDeno,\
    \ \"\"), n.replaceFirst(\"/\" + xDeno, \"\"))", "        val x = x.split(\"/\"\
    )\n        val n = n.split(\"/\")\n        val numerator = x.head.toInt\n    \
    \    val denominator = n.head.toInt\n        val fraction = numerator/denominator\n\
    \        val whole = fraction.toInt\n        whole==fraction", "        val xNum\
    \ = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n        val\
    \ xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNum1 = xNum.dropRight(1)\n\
    \        val nNum1 = nNum.dropRight(1)\n        val xNum2 = xNum1.dropRight(1)\n\
    \        val nNum2 = nNum1.dropRight(1)\n        val xNum3 = xNum2.dropRight(1)\n\
    \        val nNum3 = nNum2.dropRight(1)\n        val xNum4 = xNum3.dropRight(1)\n\
    \        val nNum4 = nNum3.dropRight(1)\n        val xNum5 = xNum4.dropRight(1)\n\
    \        val nNum5 = nNum4.dropRight(1)\n        val xNum6 = xNum5.dropRight(1)\n\
    \        val nNum6 = nNum5.dropRight(1)\n        val xNum7 = xNum6.dropRight(1)\n\
    \        val nNum7 = nNum6.dropRight(1)\n        val xNum8 = xNum7.dropRight(1)\n\
    \        val nNum8 = nNum7.dropRight(1)\n        val xNum9 = xNum8.dropRight(1)\n\
    \        val nNum9 = nNum8.dropRight(1)\n        val xNum10 = xNum9.dropRight(1)\n\
    \        val nNum10 = nNum9.dropRight(1)\n        val xNum11 = xNum10.dropRight(1)\n\
    \        val nNum11 = nNum10.dropRight(1)\n        val xNum12 = xNum11.dropRight(1)\n\
    \        val nNum12 = nNum11.dropRight(1)\n        val xNum13 = xNum12.dropRight(1)\n\
    \        val nNum13 = nNum12.dropRight(1)\n        val xNum14 = xNum13.dropRight(1)\n\
    \        val nNum14 = nNum13.dropRight(1)\n        val xNum15 = xNum14.dropRight(1)\n\
    \        val nNum15 = nNum14.dropRight(1)\n        val xNum16 = xNum15.dropRight(1)\n\
    \        val nNum16 = nNum15.dropRight(1)\n        val xNum17 = xNum16.dropRight(1)\n\
    \        val nNum17 = nNum16.dropRight(1)\n        val xNum18 = xNum17.dropRight(1)\n\
    \        val nNum18 = nNum17.dropRight(1)\n        val xNum19 = xNum18.dropRight(1)\n\
    \        val nNum19 = nNum18.dropRight(1)\n        val xNum20 = xNum19.dropRight(1)\n\
    \        val nNum", "        val numerator = x.split(\"/\")(0)\n        val denominator\
    \ = x.split(\"/\")(1)\n        val numeratorAsInt = numerator.toInt\n        val\
    \ denominatorAsInt = denominator.toInt\n        val numeratorAsDouble = numeratorAsInt.toDouble\n\
    \        val denominatorAsDouble = denominatorAsInt.toDouble\n        val numeratorAsDoubleInt\
    \ = numeratorAsInt.toInt\n        val denominatorAsDoubleInt = denominatorAsInt.toInt\n\
    \        val numeratorAsDoubleLong = numeratorAsInt.toLong\n        val denominatorAsDoubleLong\
    \ = denominatorAsInt.toLong\n        val numeratorAsDoubleDouble = numeratorAsInt.toDouble\n\
    \        val denominatorAsDoubleDouble = denominatorAsInt.toDouble\n        val\
    \ numeratorAsDoubleLongInt = numeratorAsInt.toLong\n        val denominatorAsDoubleLongInt\
    \ = denominatorAsInt.toLong\n        val numeratorAsDoubleDoubleInt = numeratorAsInt.toDouble\n\
    \        val denominatorAsDoubleDoubleInt = denominatorAsInt.toDouble\n      \
    \  val numeratorAsDoubleLongLong = numeratorAsInt.toLong\n        val denominatorAsDoubleLongLong\
    \ = denominatorAsInt.toLong\n        val numeratorAsDoubleDoubleLong = numeratorAsInt.toDouble\n\
    \        val denominatorAsDoubleDoubleLong = denominatorAsInt.toDouble\n     \
    \   val numeratorAsDoubleLongLongInt = numeratorAsInt.toLong\n        val denominatorAsDoubleLongLongInt\
    \ = denominatorAsInt.toLong\n        val numeratorAsDoubleDoubleLong = numeratorAsInt.toDouble\n\
    \        val denominatorAsDoubleDoubleLong = denominatorAsInt.toDouble\n     \
    \   val numeratorAsDoubleLongLongLong = numeratorAsInt.toLong\n        val denominatorAsDoubleLongLongLong\
    \ = denominatorAsInt.toLong\n        val numeratorAsDoubleDoubleDouble = numeratorAsInt.toDouble\n\
    \        val denominatorAsDoubleDoubleDouble = denominatorAsInt.toDouble\n   \
    \     val numeratorAsDoubleLongLongLongInt = numeratorAsInt.toLong\n        val\
    \ denominatorAsDoubleLongLongLongInt = denominatorAsInt.toLong\n        val numeratorAsDoubleDoubleDoubleInt\
    \ = numeratorAsInt.toDouble\n        val denominatorAsDoubleDoubleDoubleInt =\
    \ denominatorAsInt.toDouble\n        val numeratorAsDoubleLongLongLongLong = numeratorAsInt.toLong\n\
    \        val denominatorAsDoubleLong", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        if(xNum.product*(nNum.product)\
    \ == xNum.product*(nNum.product+1))\n            true\n        else\n        \
    \    false", "        val xNum = x.split(\"/\").map(_.toInt)\n        val nNum\
    \ = n.split(\"/\").map(_.toInt)\n        val xDeno = xNum.last\n        val nDeno\
    \ = nNum.last\n        if(xDeno == 0) return false\n        if(nDeno == 0) return\
    \ false\n        if(xNum.last == nNum.last) return true\n        if(xNum.last\
    \ < nNum.last) return false\n        if(xNum.last > nNum.last) return false\n\
    \        if(xNum.last < nNum.last) return false\n        if(xNum.last > nNum.last)\
    \ return false\n        if(xNum.last < nNum.last) return false\n        if(xNum.last\
    \ > nNum.last) return false\n        if(xNum.last < nNum.last) return false\n\
    \        if(xNum.last > nNum.last) return false\n        if(xNum.last < nNum.last)\
    \ return false\n        if(xNum.last > nNum.last) return false\n        if(xNum.last\
    \ < nNum.last) return false\n        if(xNum.last > nNum.last) return false\n\
    \        if(xNum.last < nNum.last) return false\n        if(xNum.last > nNum.last)\
    \ return false\n        if(xNum.last < nNum.last) return false\n        if(xNum.last\
    \ > nNum.last) return false\n        if(xNum.last < nNum.last) return false\n\
    \        if(xNum.last > nNum.last) return false\n        if(xNum.last < nNum.last)\
    \ return false\n        if(xNum.last > nNum.last) return false\n        if(xNum.last\
    \ < nNum.last) return false\n        if(xNum.last > nNum.last) return false\n\
    \        if(xNum.last < nNum.last) return false\n        if(xNum.last > nNum.last)\
    \ return false\n        if(xNum.last < nNum.last) return false\n        if(xNum.last\
    \ > nNum.last) return false\n        if(xNum.last < nNum.last) return false\n\
    \        if(xNum.last > nNum.last) return false\n        if(xNum.last < nNum.last)\
    \ return false\n        if(xNum.last > nNum.last) return false\n        if(xNum.last\
    \ < nNum.last) return false\n        if(xNum.last > nNum.last) return false\n\
    \        if(xNum.last < nNum.last) return false\n        if(x", "        val xNum\
    \ = x.split(\"/\")\n        val nNum = n.split(\"/\")\n        val xNum1 = xNum(0)\n\
    \        val nNum1 = nNum(0)\n        val xNum2 = xNum(1)\n        val nNum2 =\
    \ nNum(1)\n        val xNum3 = xNum2\n        val nNum3 = nNum2\n        val xNum4\
    \ = xNum3\n        val nNum4 = nNum3\n        val xNum5 = xNum4\n        val nNum5\
    \ = nNum4\n        val xNum6 = xNum5\n        val nNum6 = nNum5\n        val xNum7\
    \ = xNum6\n        val nNum7 = nNum6\n        val xNum8 = xNum7\n        val nNum8\
    \ = nNum7\n        val xNum9 = xNum8\n        val nNum9 = nNum8\n        val xNum10\
    \ = xNum9\n        val nNum10 = nNum9\n        val xNum11 = xNum10\n        val\
    \ nNum11 = nNum10\n        val xNum12 = xNum11\n        val nNum12 = nNum11\n\
    \        val xNum13 = xNum12\n        val nNum13 = nNum12\n        val xNum14\
    \ = xNum13\n        val nNum14 = nNum13\n        val xNum15 = xNum14\n       \
    \ val nNum15 = nNum14\n        val xNum16 = xNum15\n        val nNum16 = nNum15\n\
    \        val xNum17 = xNum16\n        val nNum17 = nNum16\n        val xNum18\
    \ = xNum17\n        val nNum18 = nNum17\n        val xNum19 = xNum18\n       \
    \ val nNum19 = nNum18\n        val xNum20 = xNum19\n        val nNum20 = nNum19\n\
    \        val xNum21 = xNum20\n        val nNum21 = nNum20\n        val xNum22\
    \ = xNum21\n        val nNum22 = nNum21\n        val xNum23 = xNum22\n       \
    \ val nNum23 = nNum22\n        val xNum24 = xNum23\n        val nNum24 = nNum23\n\
    \        val xNum25 = xNum24\n        val nNum25 = nNum24\n        val xNum26\
    \ = xNum25\n        val nNum26 = nNum25\n        val xNum27 = xNum26\n       \
    \ val nNum27 = nNum26\n        val xNum28 = xNum27", "        val xNum = x.split(\"\
    /\").toInt\n        val nNum = n.split(\"/\").toInt\n        if(xNum.sum == nNum.sum\
    \ && xNum.product() == nNum.product()){\n            return true\n        }\n\
    \        return false", "        val xNum = x.split(\"/\").toInt\n        val\
    \ nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val nDeno\
    \ = nNum.last\n        (xNum.head == nNum.head) && (xDeno == nDeno)", "      \
    \  val numer = x.split(\"/\")(0)\n        val denom = x.split(\"/\")(1)\n    \
    \    val numInt = (numer.toInt/denom.toInt).toInt\n        val denomInt = (denom.toInt).toInt\n\
    \        if (numInt == denomInt) {\n            return true\n        }\n     \
    \   else {\n            return false\n        }", "        val nums = x.split(\"\
    /\")\n        val dens = n.split(\"/\")\n        val numsLen = nums.length\n \
    \       val densLen = dens.length\n        if (numsLen != densLen) {\n       \
    \     return false\n        }\n        var i = 0\n        var j = 0\n        var\
    \ k = 0\n        var sum = 0\n        var product = 1\n        while (i < numsLen\
    \ && j < densLen) {\n            val numsVal = nums(i)\n            val densVal\
    \ = dens(j)\n            val numsValInt = numsVal.toInt\n            val densValInt\
    \ = densVal.toInt\n            sum += numsValInt * densValInt\n            product\
    \ *= numsValInt\n            i += 1\n            j += 1\n        }\n        if\
    \ (sum == product) {\n            return true\n        }\n        return false",
  "        val nums = x.split(\"/\")\n        val dens = n.split(\"/\")\n        val\
    \ numsLength = nums.length\n        val densLength = dens.length\n        if (numsLength\
    \ != densLength) {\n            return false\n        }\n        var i = 0\n \
    \       var j = 0\n        var k = 0\n        var sum = 0\n        var sum1 =\
    \ 0\n        var sum2 = 0\n        var sum3 = 0\n        var sum4 = 0\n      \
    \  var sum5 = 0\n        var sum6 = 0\n        var sum7 = 0\n        var sum8\
    \ = 0\n        var sum9 = 0\n        var sum10 = 0\n        var sum11 = 0\n  \
    \      var sum12 = 0\n        var sum13 = 0\n        var sum14 = 0\n        var\
    \ sum15 = 0\n        var sum16 = 0\n        var sum17 = 0\n        var sum18 =\
    \ 0\n        var sum19 = 0\n        var sum20 = 0\n        var sum21 = 0\n   \
    \     var sum22 = 0\n        var sum23 = 0\n        var sum24 = 0\n        var\
    \ sum25 = 0\n        var sum26 = 0\n        var sum27 = 0\n        var sum28 =\
    \ 0\n        var sum29 = 0\n        var sum30 = 0\n        var sum31 = 0\n   \
    \     var sum32 = 0\n        var sum33 = 0\n        var sum34 = 0\n        var\
    \ sum35 = 0\n        var sum36 = 0\n        var sum37 = 0\n        var sum38 =\
    \ 0\n        var sum39 = 0\n        var sum40 = 0\n        var sum41 = 0\n   \
    \     var sum42 = 0\n        var sum43 = 0\n        var sum44 = 0\n        var\
    \ sum45 = 0\n        var sum46 = 0\n        var sum47 = 0\n        var sum48 =\
    \ 0\n        var sum49 = 0\n        var sum50 = 0\n        var sum51 = 0\n   \
    \     var sum52 = 0\n        var sum53 = 0\n        var sum54 = 0\n        var\
    \ sum55 = 0\n        var sum56 = 0\n        var sum57 = 0\n        var sum58 =\
    \ 0\n        var sum59 = 0\n        var sum60 = 0\n        var sum61 = 0\n   \
    \     var sum62 = 0\n        var sum63 = 0\n        var sum64 = 0\n        var\
    \ sum65 = 0\n        var sum66 = 0\n        var sum67 = 0\n        var sum68 =\
    \ 0\n        var sum69 = 0\n        var sum70 = 0\n        var sum71 = 0\n   \
    \     var sum72 = 0\n        var sum73 = 0\n        var sum74 = 0\n        var\
    \ sum75 = 0\n        var sum76 = 0\n        var sum77 = 0\n        var sum78 =\
    \ 0\n        var sum79 = 0\n        var sum80 = 0\n        var sum81 = 0\n   \
    \     var sum82 = 0\n        var sum83 = 0\n        var sum84 = 0\n        var\
    \ sum85 = 0\n        var sum86 = 0\n        var sum87 = 0\n        var sum88 =\
    \ 0\n        var sum89 = 0\n        var sum90 = 0\n        var sum", "       \
    \ val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n \
    \       val xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNum1\
    \ = xNum.dropRight(1)\n        val nNum1 = nNum.dropRight(1)\n        val xNum2\
    \ = xNum1.dropRight(1)\n        val nNum2 = nNum1.dropRight(1)\n        val xNum3\
    \ = xNum2.dropRight(1)\n        val nNum3 = nNum2.dropRight(1)\n        val xNum4\
    \ = xNum3.dropRight(1)\n        val nNum4 = nNum3.dropRight(1)\n        val xNum5\
    \ = xNum4.dropRight(1)\n        val nNum5 = nNum4.dropRight(1)\n        val xNum6\
    \ = xNum5.dropRight(1)\n        val nNum6 = nNum5.dropRight(1)\n        val xNum7\
    \ = xNum6.dropRight(1)\n        val nNum7 = nNum6.dropRight(1)\n        val xNum8\
    \ = xNum7.dropRight(1)\n        val nNum8 = nNum7.dropRight(1)\n        val xNum9\
    \ = xNum8.dropRight(1)\n        val nNum9 = nNum8.dropRight(1)\n        val xNum10\
    \ = xNum9.dropRight(1)\n        val nNum10 = nNum9.dropRight(1)\n        val xNum11\
    \ = xNum10.dropRight(1)\n        val nNum11 = nNum10.dropRight(1)\n        val\
    \ xNum12 = xNum11.dropRight(1)\n        val nNum12 = nNum11.dropRight(1)\n   \
    \     val xNum13 = xNum12.dropRight(1)\n        val nNum13 = nNum12.dropRight(1)\n\
    \        val xNum14 = xNum13.dropRight(1)\n        val nNum14 = nNum13.dropRight(1)\n\
    \        val xNum15 = xNum14.dropRight(1)\n        val nNum15 = nNum14.dropRight(1)\n\
    \        val xNum16 = xNum15.dropRight(1)\n        val nNum16 = nNum15.dropRight(1)\n\
    \        val xNum17 = xNum16.dropRight(1)\n        val nNum17 = nNum16.dropRight(1)\n\
    \        val xNum18 = xNum17.dropRight(1)\n        val nNum18 = nNum17.dropRight(1)\n\
    \        val xNum19 = xNum18.dropRight(1)\n        val nNum19 = nNum18.dropRight(1)\n\
    \        val xNum20 = xNum19.dropRight(1)\n        val nNum", "        val nums\
    \ = x.split(\"/\")\n        val dens = n.split(\"/\")\n        val numsLength\
    \ = nums.length\n        val densLength = dens.length\n        if(numsLength !=\
    \ densLength)\n            return false\n        val numsSet = nums.toSet\n  \
    \      val densSet = dens.toSet\n        if(numsSet.size == densSet.size)\n  \
    \          return true\n        val numsSetSize = numsSet.size\n        val densSetSize\
    \ = densSet.size\n        if(numsSetSize == densSetSize)\n            return true\n\
    \        val numsSetIterator = numsSet.iterator\n        val densSetIterator =\
    \ densSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n \
    \       val densSetIteratorSize = densSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val densSetIteratorIterator = densSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val densSetIteratorIteratorSize = densSetIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n       \
    \ val densSetIteratorIteratorIterator = densSetIteratorIterator.iterator\n   \
    \     val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val densSetIteratorIteratorIteratorSize = densSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val densSetIteratorIteratorIteratorIterator = densSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val densSetIteratorIteratorIteratorIteratorSize = densSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val densSetIteratorIteratorIteratorIteratorIterator = densSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val densSetIteratorIteratorIteratorIteratorIteratorSize = densSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val densSetIteratorIteratorIteratorIteratorIteratorIterator = densSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val num", "        val nums = x.split(\"/\")\n        val dens = n.split(\"\
    /\")\n        val numsLength = nums.length\n        val densLength = dens.length\n\
    \        if (numsLength != densLength) {\n            return false\n        }\n\
    \        val numsLength = nums.length\n        val densLength = dens.length\n\
    \        if (numsLength == 1) {\n            val num1 = nums(0)\n            val\
    \ den1 = dens(0)\n            if (den1 == 0) {\n                return true\n\
    \            }\n            if (den1 == 1) {\n                return true\n  \
    \          }\n            if (den1 == -1) {\n                return true\n   \
    \         }\n            if (den1 == -2) {\n                return true\n    \
    \        }\n            if (den1 == -3) {\n                return true\n     \
    \       }\n            if (den1 == -4) {\n                return true\n      \
    \      }\n            if (den1 == -5) {\n                return true\n       \
    \     }\n            if (den1 == -6) {\n                return true\n        \
    \    }\n            if (den1 == -7) {\n                return true\n         \
    \   }\n            if (den1 == -8) {\n                return true\n          \
    \  }\n            if (den1 == -9) {\n                return true\n           \
    \ }\n            if (den1 == -10) {\n                return true\n           \
    \ }\n            if (den1 == -11) {\n                return true\n           \
    \ }\n            if (den1 == -12) {\n                return true\n           \
    \ }\n            if (den1 == -13) {\n                return true\n           \
    \ }\n            if (den1 == -14) {\n                return true\n           \
    \ }\n            if (den1 == -15) {\n                return true\n           \
    \ }\n            if (den1 == -16) {\n                return true\n           \
    \ }\n            if (den1 == -17) {\n                return true\n           \
    \ }\n            if (den1 == -18) {\n                return true\n           \
    \ }\n            if (den1 == -19) {\n                return true\n           \
    \ }\n            if (den1 == -20) {\n                return true\n           \
    \ }\n            if (den1 == -21) {\n                return true\n           \
    \ }\n            if (den1 == -22) {\n                return true\n           \
    \ }\n            if (den1 == -23) {\n                return true\n           \
    \ }\n            if (den1 == -24) {\n                return true\n           \
    \ }\n            if (den1 == -25) {\n                return true\n           \
    \ }\n            if (den1 == -26) {\n                return true\n           \
    \ }\n            if (den1 == -27) {\n                return true\n           \
    \ }\n            if (den1 == -28) {\n                return true\n           \
    \ }\n            if (den1 == -29) {\n                return true\n           \
    \ }\n            if (den1 == -30) {\n                return true\n           \
    \ }\n            if (den1 == -31) {\n                return true\n           \
    \ }\n            if (den1 == -32) {\n                return true\n           \
    \ }\n            if (den1 == -33) {\n                return true\n           \
    \ }\n            if (den1 == -34) {\n                return true\n           \
    \ }\n            if (den1 == -35) {\n                return true\n           \
    \ }\n            if (den1 == -36) {\n                return true\n           \
    \ }", "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"\
    /\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n   \
    \     if(xDeno == 0 || nDeno == 0) false\n        else if(xDeno == nDeno) true\n\
    \        else if(xDeno == 0) true\n        else if(nDeno == 0) true\n        else\
    \ if(xNum.last == nNum.last) simplify(x.replaceFirst(\"/\"+nNum.last,\"\"),n.replaceFirst(\"\
    /\"+xNum.last,\"\"))\n        else simplify(x.replaceFirst(\"/\"+nNum.last,\"\"\
    ),n.replaceFirst(\"/\"+xNum.last,\"\"))", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n    \
    \    val nDeno = nNum.last\n        val xNum2 = xNum.init\n        val nNum2 =\
    \ nNum.init\n        val xDeno2 = xDeno * xDeno\n        val nDeno2 = nDeno *\
    \ nDeno\n        val xNum3 = xNum2.init\n        val nNum3 = nNum2.init\n    \
    \    val xDeno3 = xDeno2 * xDeno2\n        val nDeno3 = nDeno2 * nDeno2\n    \
    \    val xNum4 = xNum3.init\n        val nNum4 = nNum3.init\n        val xDeno4\
    \ = xDeno3 * xDeno3\n        val nDeno4 = nDeno3 * nDeno3\n        val xNum5 =\
    \ xNum4.init\n        val nNum5 = nNum4.init\n        val xDeno5 = xDeno4 * xDeno4\n\
    \        val nDeno5 = nDeno4 * nDeno4\n        val xNum6 = xNum5.init\n      \
    \  val nNum6 = nNum5.init\n        val xDeno6 = xDeno5 * xDeno5\n        val nDeno6\
    \ = nDeno5 * nDeno5\n        val xNum7 = xNum6.init\n        val nNum7 = nNum6.init\n\
    \        val xDeno7 = xDeno6 * xDeno6\n        val nDeno7 = nDeno6 * nDeno6\n\
    \        val xNum8 = xNum7.init\n        val nNum8 = nNum7.init\n        val xDeno8\
    \ = xDeno7 * xDeno7\n        val nDeno8 = nDeno7 * nDeno7\n        val xNum9 =\
    \ xNum8.init\n        val nNum9 = nNum8.init\n        val xDeno9 = xDeno8 * xDeno8\n\
    \        val nDeno9 = nDeno8 * nDeno8\n        val xNum10 = xNum9.init\n     \
    \   val nNum10 = nNum9.init\n        val xDeno10 = xDeno9 * xDeno9\n        val\
    \ nDeno10 = nDeno9 * nDeno9\n        val xNum11 = xNum10.init\n        val nNum11\
    \ = nNum10.init\n", "        val numerator = x.split(\"/\")(0)\n        val denominator\
    \ = x.split(\"/\")(1)\n        val numeratorInt = numerator.toInt\n        val\
    \ denominatorInt = denominator.toInt\n        val numeratorFraction = numeratorInt\
    \ / denominatorInt\n        val numeratorFractionFraction = numeratorFraction.toDouble\n\
    \        val numeratorFractionFractionFractionFraction = numeratorFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFraction = numeratorFractionFractionFractionFraction.toDouble\n\
    \        val numeratorFractionFractionFractionFractionFractionFraction = numeratorFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFraction.toDouble\n     \
    \   val numeratorFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFraction",
  "        val numerator = x.split(\"/\")(0)\n        val denominator = x.split(\"\
    /\")(1)\n        val numeratorInt = numerator.toInt\n        val denominatorInt\
    \ = denominator.toInt\n        val numeratorFraction = numeratorInt / denominatorInt\n\
    \        val numeratorFractionFraction = numeratorFraction.toDouble\n        val\
    \ numeratorFractionFractionFractionFraction = numeratorFractionFraction * denominatorInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFraction = numeratorFractionFractionFractionFraction\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFraction * denominatorInt\n     \
    \   val numeratorFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFraction * denominatorInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * denominatorInt\n        val numeratorFractionFractionFractionFraction", " \
    \       val xNum = x.split(\"/\").map(_.toInt)\n        val nNum = n.split(\"\
    /\").map(_.toInt)\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n\
    \        val xNum1 = xNum.dropRight(1)\n        val nNum1 = nNum.dropRight(1)\n\
    \        val xNum2 = xNum1.dropRight(1)\n        val nNum2 = nNum1.dropRight(1)\n\
    \        val xNum3 = xNum2.dropRight(1)\n        val nNum3 = nNum2.dropRight(1)\n\
    \        val xNum4 = xNum3.dropRight(1)\n        val nNum4 = nNum3.dropRight(1)\n\
    \        val xNum5 = xNum4.dropRight(1)\n        val nNum5 = nNum4.dropRight(1)\n\
    \        val xNum6 = xNum5.dropRight(1)\n        val nNum6 = nNum5.dropRight(1)\n\
    \        val xNum7 = xNum6.dropRight(1)\n        val nNum7 = nNum6.dropRight(1)\n\
    \        val xNum8 = xNum7.dropRight(1)\n        val nNum8 = nNum7.dropRight(1)\n\
    \        val xNum9 = xNum8.dropRight(1)\n        val nNum9 = nNum8.dropRight(1)\n\
    \        val xNum10 = xNum9.dropRight(1)\n        val nNum10 = nNum9.dropRight(1)\n\
    \        val xNum11 = xNum10.dropRight(1)\n        val nNum11 = nNum10.dropRight(1)\n\
    \        val xNum12 = xNum11.dropRight(1)\n        val nNum12 = nNum11.dropRight(1)\n\
    \        val xNum13 = xNum12.dropRight(1)\n        val nNum13 = nNum12.dropRight(1)\n\
    \        val xNum14 = xNum13.dropRight(1)\n        val nNum14 = nNum13.dropRight(1)\n\
    \        val xNum15 = xNum14.dropRight(1)\n        val nNum15 = nNum14.dropRight(1)\n\
    \        val xNum16 = xNum15.dropRight(1)\n        val nNum16 = nNum15.dropRight(1)\n\
    \        val xNum17 = xNum16.dropRight(1)\n        val nNum17 = nNum16.dropRight(1)\n\
    \        val xNum18 = xNum17.dropRight(1)\n        val nNum18 = nNum17.dropRight(1)\n\
    \        val xNum19 = xNum18.dropRight(1)\n        val nNum19 = nNum18.dropRight(1)\n\
    \        val xNum20 = x", "        val xNum = x.split(\"/\").toList\n        val\
    \ nNum = n.split(\"/\").toList\n        val xDeno = xNum.last\n        val nDeno\
    \ = nNum.last\n        val xNum2 = xNum.init\n        val nNum2 = nNum.init\n\
    \        val xDeno2 = xNum2.last\n        val nDeno2 = nNum2.last\n        val\
    \ xNum3 = xNum2.init\n        val nNum3 = nNum2.init\n        val xDeno3 = xNum3.last\n\
    \        val nDeno3 = nNum3.last\n        val xNum4 = xNum3.init\n        val\
    \ nNum4 = nNum3.init\n        val xDeno4 = xNum4.last\n        val nDeno4 = nNum4.last\n\
    \        val xNum5 = xNum4.init\n        val nNum5 = nNum4.init\n        val xDeno5\
    \ = xNum5.last\n        val nDeno5 = nNum5.last\n        val xNum6 = xNum5.init\n\
    \        val nNum6 = nNum5.init\n        val xDeno6 = xNum6.last\n        val\
    \ nDeno6 = nNum6.last\n        val xNum7 = xNum6.init\n        val nNum7 = nNum6.init\n\
    \        val xDeno7 = xNum7.last\n        val nDeno7 = nNum7.last\n        val\
    \ xNum8 = xNum7.init\n        val nNum8 = nNum7.init\n        val xDeno8 = xNum8.last\n\
    \        val nDeno8 = nNum8.last\n        val xNum9 = xNum8.init\n        val\
    \ nNum9 = nNum8.init\n        val xDeno9 = xNum9.last\n        val nDeno9 = nNum9.last\n\
    \        val xNum10 = xNum9.init\n        val nNum10 = nNum9.init\n        val\
    \ xDeno10 = xNum10.last\n        val nDeno10 = nNum10.last\n        val xNum11\
    \ = xNum10.init\n        val nNum11 = nNum10.init\n        val xDeno11 = xNum11.last\n\
    \        val nDeno11 = nNum11.last\n        val xNum12 = xNum11.init\n       \
    \ val nNum12 = nNum11.init\n        val xDeno12 = xNum12.last\n        val nDeno12\
    \ = nNum12.last\n        val xNum13 = xNum12.init\n", "        val nums = x.split(\"\
    /\")\n        val dens = n.split(\"/\")\n        val numsLength = nums.length\n\
    \        val densLength = dens.length\n        if (numsLength != densLength) {\n\
    \            return false\n        }\n        var i = 0\n        var j = 0\n \
    \       var k = 0\n        var sum = 0\n        var product = 1\n        while\
    \ (i < numsLength && j < densLength) {\n            val numsNum = nums(i).toInt\n\
    \            val densNum = dens(j).toInt\n            sum += numsNum * densNum\n\
    \            product *= densNum\n            i += 1\n            j += 1\n    \
    \    }\n        if (sum == product) {\n            return true\n        }\n  \
    \      return false", "        val xNum = x.split(\"/\").toInt\n        val nNum\
    \ = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n\
    \        val xNum1 = xNum.dropRight(1)\n        val nNum1 = nNum.dropRight(1)\n\
    \        val xNum2 = xNum1.dropRight(1)\n        val nNum2 = nNum1.dropRight(1)\n\
    \        val xNum3 = xNum2.dropRight(1)\n        val nNum3 = nNum2.dropRight(1)\n\
    \        val xNum4 = xNum3.dropRight(1)\n        val nNum4 = nNum3.dropRight(1)\n\
    \        val xNum5 = xNum4.dropRight(1)\n        val nNum5 = nNum4.dropRight(1)\n\
    \        val xNum6 = xNum5.dropRight(1)\n        val nNum6 = nNum5.dropRight(1)\n\
    \        val xNum7 = xNum6.dropRight(1)\n        val nNum7 = nNum6.dropRight(1)\n\
    \        val xNum8 = xNum7.dropRight(1)\n        val nNum8 = nNum7.dropRight(1)\n\
    \        val xNum9 = xNum8.dropRight(1)\n        val nNum9 = nNum8.dropRight(1)\n\
    \        val xNum10 = xNum9.dropRight(1)\n        val nNum10 = nNum9.dropRight(1)\n\
    \        val xNum11 = xNum10.dropRight(1)\n        val nNum11 = nNum10.dropRight(1)\n\
    \        val xNum12 = xNum11.dropRight(1)\n        val nNum12 = nNum11.dropRight(1)\n\
    \        val xNum13 = xNum12.dropRight(1)\n        val nNum13 = nNum12.dropRight(1)\n\
    \        val xNum14 = xNum13.dropRight(1)\n        val nNum14 = nNum13.dropRight(1)\n\
    \        val xNum15 = xNum14.dropRight(1)\n        val nNum15 = nNum14.dropRight(1)\n\
    \        val xNum16 = xNum15.dropRight(1)\n        val nNum16 = nNum15.dropRight(1)\n\
    \        val xNum17 = xNum16.dropRight(1)\n        val nNum17 = nNum16.dropRight(1)\n\
    \        val xNum18 = xNum17.dropRight(1)\n        val nNum18 = nNum17.dropRight(1)\n\
    \        val xNum19 = xNum18.dropRight(1)\n        val nNum19 = nNum18.dropRight(1)\n\
    \        val xNum20 = xNum19.dropRight(1)\n        val nNum", "        val numerator\
    \ = x.split(\"/\")(0)\n        val denominator = x.split(\"/\")(1)\n        val\
    \ numeratorInt = numerator.toInt\n        val denominatorInt = denominator.toInt\n\
    \        val numeratorFraction = numeratorInt / denominatorInt\n        val numeratorFractionInt\
    \ = numeratorFraction.toInt\n        val numeratorFractionFraction = numeratorFractionInt\
    \ % denominatorInt\n        val numeratorFractionFractionInt = numeratorFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionInt = numeratorFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFraction = numeratorFractionFractionFractionInt\
    \ / denominatorInt\n        val numeratorFractionFractionFractionFractionInt =\
    \ numeratorFractionFractionFractionFraction.toInt\n        val numeratorFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFraction.toInt\n        val numeratorFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionInt / denominatorInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionInt = numeratorFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ / denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ / denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = numer", "        val nums = x.split(\"/\").map(_.toInt)\n        val dens\
    \ = n.split(\"/\").map(_.toInt)\n        val numsSum = nums.sum\n        val densSum\
    \ = dens.sum\n        val numsSumInv = numsSum.inv\n        val densSumInv = densSum.inv\n\
    \        val numsSumInv = numsSumInv.abs()\n        val densSumInv = densSumInv.abs()\n\
    \        val numsSumInv = numsSumInv.floor\n        val densSumInv = densSumInv.floor\n\
    \        val numsSumInv = numsSumInv.ceil\n        val densSumInv = densSumInv.ceil\n\
    \        val numsSumInv = numsSumInv.round\n        val densSumInv = densSumInv.round\n\
    \        val numsSumInv = numsSumInv.floor\n        val densSumInv = densSumInv.floor\n\
    \        val numsSumInv = numsSumInv.ceil\n        val densSumInv = densSumInv.ceil\n\
    \        val numsSumInv = numsSumInv.round\n        val densSumInv = densSumInv.round\n\
    \        val numsSumInv = numsSumInv.floor\n        val densSumInv = densSumInv.floor\n\
    \        val numsSumInv = numsSumInv.ceil\n        val densSumInv = densSumInv.ceil\n\
    \        val numsSumInv = numsSumInv.round\n        val densSumInv = densSumInv.round\n\
    \        val numsSumInv = numsSumInv.floor\n        val densSumInv = densSumInv.floor\n\
    \        val numsSumInv = numsSumInv.ceil\n        val densSumInv = densSumInv.ceil\n\
    \        val numsSumInv = numsSumInv.round\n        val densSumInv = densSumInv.round\n\
    \        val numsSumInv = numsSumInv.floor\n        val densSumInv = densSumInv.floor\n\
    \        val numsSumInv = numsSumInv.ceil\n        val densSumInv = densSumInv.ceil\n\
    \        val numsSumInv = numsSumInv.round\n        val ", "        val nums =\
    \ x.split(\"/\")\n        val dens = n.split(\"/\")\n        val numsLength =\
    \ nums.length\n        val densLength = dens.length\n        if(numsLength !=\
    \ densLength){\n            return false\n        }\n        val numsSet = nums.toSet\n\
    \        val densSet = dens.toSet\n        if(numsSet.size == densSet.size){\n\
    \            val numsSetIterator = numsSet.iterator\n            val densSetIterator\
    \ = densSet.iterator\n            val numsSetIteratorNext = numsSetIterator.next\n\
    \            val densSetIteratorNext = densSetIterator.next\n            val numsSetIteratorNextNext\
    \ = numsSetIterator.next\n            val densSetIteratorNextNext = densSetIterator.next\n\
    \            val numsSetIteratorNextNextNext = numsSetIterator.next\n        \
    \    val densSetIteratorNextNextNext = densSetIterator.next\n            val numsSetIteratorNextNextNextNext\
    \ = numsSetIterator.next\n            val densSetIteratorNextNextNextNext = densSetIterator.next\n\
    \            val numsSetIteratorNextNextNextNextNext = numsSetIterator.next\n\
    \            val densSetIteratorNextNextNextNextNext = densSetIterator.next\n\
    \            val numsSetIteratorNextNextNextNextNextNext = numsSetIterator.next\n\
    \            val densSetIteratorNextNextNextNextNextNext = densSetIterator.next\n\
    \            val numsSetIteratorNextNextNextNextNextNextNext = numsSetIterator.next\n\
    \            val densSetIteratorNextNextNextNextNextNextNext = densSetIterator.next\n\
    \            val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIterator.next\n\
    \            val densSetIteratorNextNextNextNextNextNextNextNext = densSetIterator.next\n\
    \            val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIterator.next\n\
    \            val densSetIteratorNextNextNextNextNextNextNextNextNextNext = densSetIterator.next\n\
    \            val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIterator.next\n\
    \            val densSetIteratorNextNextNextNextNextNextNextNextNextNext = densSetIterator.next\n\
    \            val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext =\
    \ num", "        val xNum = x.split(\"/\")\n        val nNum = n.split(\"/\")\n\
    \        val xNumLen = xNum.length\n        val nNumLen = nNum.length\n      \
    \  val xNumInt = xNum.map(_.toInt)\n        val nNumInt = nNum.map(_.toInt)\n\
    \        val xNumIntLen = xNumInt.length\n        val nNumIntLen = nNumInt.length\n\
    \        val xNumIntSum = xNumInt.sum\n        val nNumIntSum = nNumInt.sum\n\
    \        val xNumIntSumLen = xNumIntSum.length\n        val nNumIntSumLen = nNumIntSum.length\n\
    \        val xNumIntProduct = xNumInt.product\n        val nNumIntProduct = nNumInt.product\n\
    \        val xNumIntProductLen = xNumIntProduct.length\n        val nNumIntProductLen\
    \ = nNumIntProduct.length\n        val xNumIntProductSum = xNumIntProduct.sum\n\
    \        val nNumIntProductSum = nNumIntProduct.sum\n        val xNumIntProductSumLen\
    \ = xNumIntProductSum.length\n        val nNumIntProductSumLen = nNumIntProductSum.length\n\
    \        val xNumIntProductProduct = xNumIntProduct.product\n        val nNumIntProductProduct\
    \ = nNumIntProduct.product\n        val xNumIntProductProductLen = xNumIntProductProduct.length\n\
    \        val nNumIntProductProductLen = nNumIntProductProduct.length\n       \
    \ val xNumIntProductProductSum = xNumIntProductProduct.sum\n        val nNumIntProductProductSum\
    \ = nNumIntProductProduct.sum\n        val xNumIntProductProductSumLen = xNumIntProductProductSum.length\n\
    \        val nNumIntProductProductSumLen = nNumIntProductProductSum.length\n \
    \       val xNumIntProductProductProduct = xNumIntProductProduct.product\n   \
    \     val nNumIntProductProductProduct = nNumIntProductProduct.product\n     \
    \   val xNumIntProductProductProductLen = xNumIntProductProduct.length\n     \
    \   val nNumIntProductProductProductLen = nNumIntProductProductLen.length\n  \
    \      val xNumIntProductProductProductSum = xNumIntProductProductSum.sum\n  \
    \      val nNumIntProductProductProductSum = nNumIntProductProductSum.sum\n  \
    \      val xNumIntProductProductProductSumLen = xNumIntProductProductProductSum.length\n\
    \        val nNumIntProductProductProductSumLen = nNumIntProductProductSumLen.length\n\
    \        val xNumIntProductProductProductProduct = xNum", "        val xNum =\
    \ x.split(\"/\")\n        val nNum = n.split(\"/\")\n        val xNum2 = xNum.map(_.toInt)\n\
    \        val nNum2 = nNum.map(_.toInt)\n        val xNum3 = xNum2.filter(_ > 0)\n\
    \        val nNum3 = nNum2.filter(_ > 0)\n        val xNum4 = xNum3.filter(_ >\
    \ 0)\n        val nNum4 = nNum3.filter(_ > 0)\n        val xNum5 = xNum4.filter(_\
    \ > 0)\n        val nNum5 = nNum4.filter(_ > 0)\n        val xNum6 = xNum5.filter(_\
    \ > 0)\n        val nNum6 = nNum5.filter(_ > 0)\n        val xNum7 = xNum6.filter(_\
    \ > 0)\n        val nNum7 = nNum6.filter(_ > 0)\n        val xNum8 = xNum7.filter(_\
    \ > 0)\n        val nNum8 = nNum7.filter(_ > 0)\n        val xNum9 = xNum8.filter(_\
    \ > 0)\n        val nNum9 = nNum8.filter(_ > 0)\n        val xNum10 = xNum9.filter(_\
    \ > 0)\n        val nNum10 = nNum9.filter(_ > 0)\n        val xNum11 = xNum10.filter(_\
    \ > 0)\n        val nNum11 = nNum10.filter(_ > 0)\n        val xNum12 = xNum11.filter(_\
    \ > 0)\n        val nNum12 = nNum11.filter(_ > 0)\n        val xNum13 = xNum12.filter(_\
    \ > 0)\n        val nNum13 = nNum12.filter(_ > 0)\n        val xNum14 = xNum13.filter(_\
    \ > 0)\n        val nNum14 = nNum13.filter(_ > 0)\n        val xNum15 = xNum14.filter(_\
    \ > 0)\n        val nNum15 = nNum14.filter(_ > 0)\n        val xNum16 = xNum15.filter(_\
    \ > 0)\n        val nNum16 = nNum15.filter(_ > 0)\n        val xNum17 = xNum16.filter(_\
    \ > 0)\n        val nNum17 = nNum16.filter(_ > 0)\n        val xNum18 = xNum17.filter(_\
    \ > 0)\n        val nNum18 = nNum17.filter(_ > 0)\n        val xNum19 = xNum18.filter(_\
    \ > 0)\n        val nNum19 = nNum18.filter(_ > 0)\n        val xNum20 = xNum19.filter(_\
    \ > 0)\n        val nNum20 = nNum19.filter(_ > 0)\n", "        val nums = x.split(\"\
    /\").map(_.toInt)\n        val dens = n.split(\"/\").map(_.toInt)\n        val\
    \ numsSum = nums.sum\n        val densSum = dens.sum\n        val numsDiff = nums.diff(dens)\n\
    \        val densDiff = dens.diff(nums)\n        val numsDiffSum = numsDiff.sum\n\
    \        val densDiffSum = densDiff.sum\n        val numsDiffDiff = numsDiff.diff(densDiff)\n\
    \        val densDiffDiff = densDiff.diff(numsDiff)\n        val numsDiffDiffSum\
    \ = numsDiffDiff.sum\n        val densDiffDiffSum = densDiffDiff.sum\n       \
    \ val numsDiffDiffDiff = numsDiffDiff.diff(densDiffDiff)\n        val densDiffDiffDiff\
    \ = densDiffDiff.diff(numsDiffDiff)\n        val numsDiffDiffDiffSum = numsDiffDiffDiff.sum\n\
    \        val densDiffDiffDiffSum = densDiffDiffDiff.sum\n        val numsDiffDiffDiffDiff\
    \ = numsDiffDiffDiff.diff(densDiffDiffDiff)\n        val densDiffDiffDiffDiff\
    \ = densDiffDiffDiff.diff(numsDiffDiffDiff)\n        val numsDiffDiffDiffSum =\
    \ numsDiffDiffDiffSum\n        val densDiffDiffDiffSum = densDiffDiffDiffSum\n\
    \        val numsDiffDiffDiffDiff = numsDiffDiffDiffDiff\n        val densDiffDiffDiffDiff\
    \ = densDiffDiffDiffDiff\n        val numsDiffDiffDiffSum = numsDiffDiffDiffSum\n\
    \        val densDiffDiffDiffSum = densDiffDiffDiffSum\n        val numsDiffDiffDiffDiff\
    \ = numsDiffDiffDiffDiff\n        val densDiffDiffDiffDiff = densDiffDiffDiffDiff\n\
    \        val numsDiffDiffDiffSum = numsDiffDiffDiffSum\n        val densDiffDiffDiffSum\
    \ = densDiffDiffDiffSum\n        val numsDiffDiffDiffDiff = numsDiffDiffDiffDiff\n\
    \        val densDiffDiffDiffDiff = densDiffDiffDiffDiff\n        val numsDiffDiffDiffSum\
    \ = numsDiffDiffDiffSum\n        val densDiffDiffDiffSum = densDiffDiffDiffSum\n\
    \        val numsDiffDiff", "        val xNum = x.split(\"/\").toInt\n       \
    \ val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val\
    \ nDeno = nNum.last\n        val xNum1 = xNum.dropRight(1)\n        val nNum1\
    \ = nNum.dropRight(1)\n        val xNum2 = xNum1.dropRight(1)\n        val nNum2\
    \ = nNum1.dropRight(1)\n        val xNum3 = xNum2.dropRight(1)\n        val nNum3\
    \ = nNum2.dropRight(1)\n        val xNum4 = xNum3.dropRight(1)\n        val nNum4\
    \ = nNum3.dropRight(1)\n        val xNum5 = xNum4.dropRight(1)\n        val nNum5\
    \ = nNum4.dropRight(1)\n        val xNum6 = xNum5.dropRight(1)\n        val nNum6\
    \ = nNum5.dropRight(1)\n        val xNum7 = xNum6.dropRight(1)\n        val nNum7\
    \ = nNum6.dropRight(1)\n        val xNum8 = xNum7.dropRight(1)\n        val nNum8\
    \ = nNum7.dropRight(1)\n        val xNum9 = xNum8.dropRight(1)\n        val nNum9\
    \ = nNum8.dropRight(1)\n        val xNum10 = xNum9.dropRight(1)\n        val nNum10\
    \ = nNum9.dropRight(1)\n        val xNum11 = xNum10.dropRight(1)\n        val\
    \ nNum11 = nNum10.dropRight(1)\n        val xNum12 = xNum11.dropRight(1)\n   \
    \     val nNum12 = nNum11.dropRight(1)\n        val xNum13 = xNum12.dropRight(1)\n\
    \        val nNum13 = nNum12.dropRight(1)\n        val xNum14 = xNum13.dropRight(1)\n\
    \        val nNum14 = nNum13.dropRight(1)\n        val xNum15 = xNum14.dropRight(1)\n\
    \        val nNum15 = nNum14.dropRight(1)\n        val xNum16 = xNum15.dropRight(1)\n\
    \        val nNum16 = nNum15.dropRight(1)\n        val xNum17 = xNum16.dropRight(1)\n\
    \        val nNum17 = nNum16.dropRight(1)\n        val xNum18 = xNum17.dropRight(1)\n\
    \        val nNum18 = nNum17.dropRight(1)\n        val xNum19 = xNum18.dropRight(1)\n\
    \        val nNum19 = nNum18.dropRight(1)\n        val xNum20 = xNum19.dropRight(1)\n\
    \        val nNum", "        val nums = x.split(\"/\").map(_.toInt)\n        val\
    \ denoms = n.split(\"/\").map(_.toInt)\n        val numsLength = nums.length\n\
    \        val denomsLength = denoms.length\n        if(numsLength != denomsLength)\n\
    \            return false\n        val numsSum = nums.sum\n        val denomsSum\
    \ = denoms.sum\n        if(numsSum == denomsSum)\n            return true\n  \
    \      val numsDiff = nums.sum - denomsSum\n        if(numsDiff == 0)\n      \
    \      return true\n        val numsDiff2 = numsDiff / denomsSum\n        if(numsDiff2\
    \ == 0)\n            return true\n        val numsDiff3 = numsDiff2 * denomsSum\n\
    \        if(numsDiff3 == 0)\n            return true\n        val numsDiff4 =\
    \ numsDiff3 * denomsSum\n        if(numsDiff4 == 0)\n            return true\n\
    \        val numsDiff5 = numsDiff4 * denomsSum\n        if(numsDiff5 == 0)\n \
    \           return true\n        val numsDiff6 = numsDiff5 * denomsSum\n     \
    \   if(numsDiff6 == 0)\n            return true\n        val numsDiff7 = numsDiff6\
    \ * denomsSum\n        if(numsDiff7 == 0)\n            return true\n        val\
    \ numsDiff8 = numsDiff7 * denomsSum\n        if(numsDiff8 == 0)\n            return\
    \ true\n        val numsDiff9 = numsDiff8 * denomsSum\n        if(numsDiff9 ==\
    \ 0)\n            return true\n        val numsDiff10 = numsDiff9 * denomsSum\n\
    \        if(numsDiff10 == 0)\n            return true\n        val numsDiff11\
    \ = numsDiff10 * denomsSum\n        if(numsDiff11 == 0)\n            return true\n\
    \        val numsDiff12 = numsDiff11 * denomsSum\n        if(numsDiff12 == 0)\n\
    \            return true\n        val numsDiff13 = numsDiff12 * denomsSum\n  \
    \      if(numsDiff13 == 0)\n            return true\n        val numsDiff14 =\
    \ numsDiff13 * denomsSum\n        if(numsDiff14 == 0)\n            return true\n\
    \        val numsDiff15 = numsDiff14 * denomsSum\n        if(numsDiff15 == 0)\n\
    \            return true\n        val numsDiff16 = numsDiff15 * denomsSum\n  \
    \      if(numsDiff16 == 0)\n            return true\n        val numsDiff17 =\
    \ numsDiff16 * deno", "        val xNum = x.split(\"/\").toInt\n        val nNum\
    \ = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n\
    \        (xNum.head * nNum.head == xDeno) && (nNum.head * xDeno == nDeno)", " \
    \       val fraction = x.split(\"/\").map(_.toInt)\n        val numerator = fraction(0)\n\
    \        val denominator = fraction(1)\n        val numeratorIsWholeNumber = numerator\
    \ == numerator.toInt\n        val denominatorIsWholeNumber = denominator == denominator.toInt\n\
    \        numeratorIsWholeNumber && denominatorIsWholeNumber", "        val xNum\
    \ = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n        if(xNum.product(xNum)\
    \ == nNum.product(nNum)) {\n            return true\n        } else {\n      \
    \      return false\n        }", "        val xNum = x.split(\"/\").toInt\n  \
    \      val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n      \
    \  val nDeno = nNum.last\n        val xNum1 = xNum.dropRight(1)\n        val nNum1\
    \ = nNum.dropRight(1)\n        val xNum2 = xNum1.dropRight(1)\n        val nNum2\
    \ = nNum1.dropRight(1)\n        val xNum3 = xNum2.dropRight(1)\n        val nNum3\
    \ = nNum2.dropRight(1)\n        val xNum4 = xNum3.dropRight(1)\n        val nNum4\
    \ = nNum3.dropRight(1)\n        val xNum5 = xNum4.dropRight(1)\n        val nNum5\
    \ = nNum4.dropRight(1)\n        val xNum6 = xNum5.dropRight(1)\n        val nNum6\
    \ = nNum5.dropRight(1)\n        val xNum7 = xNum6.dropRight(1)\n        val nNum7\
    \ = nNum6.dropRight(1)\n        val xNum8 = xNum7.dropRight(1)\n        val nNum8\
    \ = nNum7.dropRight(1)\n        val xNum9 = xNum8.dropRight(1)\n        val nNum9\
    \ = nNum8.dropRight(1)\n        val xNum10 = xNum9.dropRight(1)\n        val nNum10\
    \ = nNum9.dropRight(1)\n        val xNum11 = xNum10.dropRight(1)\n        val\
    \ nNum11 = nNum10.dropRight(1)\n        val xNum12 = xNum11.dropRight(1)\n   \
    \     val nNum12 = nNum11.dropRight(1)\n        val xNum13 = xNum12.dropRight(1)\n\
    \        val nNum13 = nNum12.dropRight(1)\n        val xNum14 = xNum13.dropRight(1)\n\
    \        val nNum14 = nNum13.dropRight(1)\n        val xNum15 = xNum14.dropRight(1)\n\
    \        val nNum15 = nNum14.dropRight(1)\n        val xNum16 = xNum15.dropRight(1)\n\
    \        val nNum16 = nNum15.dropRight(1)\n        val xNum17 = xNum16.dropRight(1)\n\
    \        val nNum17 = nNum16.dropRight(1)\n        val xNum18 = xNum17.dropRight(1)\n\
    \        val nNum18 = nNum17.dropRight(1)\n        val xNum19 = xNum18.dropRight(1)\n\
    \        val nNum19 = nNum18.dropRight(1)\n        val xNum20 = xNum19.dropRight(1)\n\
    \        val nNum", "        val numer = x.split(\"/\").map(_.toInt)\n       \
    \ val denom = n.split(\"/\").map(_.toInt)\n        val num : Int = numer(0) *\
    \ denom(0) + (numer(1) * denom(1))\n        val denom : Int = denom(0) * denom(1)\n\
    \        val wholeNumber : Boolean = num == denom\n        wholeNumber", "   \
    \     val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        val xDeno = xNum.last\n        val nDeno = nNum.last\n        if(xDeno\
    \ == 0 || nDeno == 0) false\n        else if(xDeno == nDeno) true\n        else\
    \ if(xNum.last == nNum.last) simplify(x.replaceAll(\"/\" + nNum.last, \"\"), n.replaceAll(\"\
    /\" + xNum.last, \"\"))\n        else simplify(x.replaceAll(\"/\" + xNum.last,\
    \ \"\"), n.replaceAll(\"/\" + nNum.last, \"\"))", "        val xNum = x.split(\"\
    /\").map(_.toInt)\n        val nNum = n.split(\"/\").map(_.toInt)\n        val\
    \ xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNum1 = xNum.dropRight(1)\n\
    \        val nNum1 = nNum.dropRight(1)\n        val xDeno1 = xNum1.last\n    \
    \    val nDeno1 = nNum1.last\n        val xNum2 = xNum1.dropRight(1)\n       \
    \ val nNum2 = nNum1.dropRight(1)\n        val xDeno2 = xNum2.last\n        val\
    \ nDeno2 = nNum2.last\n        val xNum3 = xNum2.dropRight(1)\n        val nNum3\
    \ = nNum2.dropRight(1)\n        val xDeno3 = xNum3.last\n        val nDeno3 =\
    \ nNum3.last\n        val xNum4 = xNum3.dropRight(1)\n        val nNum4 = nNum3.dropRight(1)\n\
    \        val xDeno4 = xNum4.last\n        val nDeno4 = nNum4.last\n        val\
    \ xNum5 = xNum4.dropRight(1)\n        val nNum5 = nNum4.dropRight(1)\n       \
    \ val xDeno5 = xNum5.last\n        val nDeno5 = nNum5.last\n        val xNum6\
    \ = xNum5.dropRight(1)\n        val nNum6 = nNum5.dropRight(1)\n        val xDeno6\
    \ = xNum6.last\n        val nDeno6 = nNum6.last\n        val xNum7 = xNum6.dropRight(1)\n\
    \        val nNum7 = nNum6.dropRight(1)\n        val xDeno7 = xNum7.last\n   \
    \     val nDeno7 = nNum7.last\n        val xNum8 = xNum7.dropRight(1)\n      \
    \  val nNum8 = nNum7.dropRight(1)\n        val xDeno8 = xNum8.last\n        val\
    \ nDeno8 = nNum8.last\n        val xNum9 = xNum8.dropRight(1)\n        val nNum9\
    \ = nNum8.dropRight(1)\n        val xDeno9 = xNum9.last\n        val nDeno9 =\
    \ nNum9.last\n        val xNum10 = xNum9.dropRight(1)\n        val nNum10 = nNum9.dropRight(1)\n\
    \        val xDeno10 = xNum10.last\n        val nDeno10 = nNum10.last\n      \
    \  val ", "        val nums = x.split(\"/\")\n        val dens = n.split(\"/\"\
    )\n        val numsSet = nums.toSet\n        val densSet = dens.toSet\n      \
    \  if(numsSet.size == densSet.size && numsSet.size == 1 && densSet.size == 1){\n\
    \            val num1 = numsSet.head\n            val den1 = densSet.head\n  \
    \          if(num1.toInt == den1.toInt){\n                if(num1.toInt == 1){\n\
    \                    true\n                }else{\n                    false\n\
    \                }\n            }else{\n                false\n            }\n\
    \        }else{\n            false\n        }", "        val xNum = x.split(\"\
    /\").toInt\n        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        if(xNum.last == 0 || nNum.last == 0) false\n\
    \        else if(xDeno == nDeno) simplify(x.replaceAll(\"/\", \"\"), n.replaceAll(\"\
    /\", \"\"))\n        else if(xDeno == 0) simplify(x.replaceAll(\"/\", \"\"), n.replaceAll(\"\
    /\", \"\") + \"/1\")\n        else if(nDeno == 0) simplify(x.replaceAll(\"/\"\
    , \"\") + \"/1\", n.replaceAll(\"/\", \"\"))\n        else if(xDeno == nDeno)\
    \ simplify(x.replaceAll(\"/\", \"\"), n.replaceAll(\"/\", \"\"))\n        else\
    \ if(xNum.last == nNum.last) simplify(x.replaceAll(\"/\", \"\"), n.replaceAll(\"\
    /\", \"\"))\n        else if(xNum.last < nNum.last) simplify(x.replaceAll(\"/\"\
    , \"\"), n.replaceAll(\"/\", \"\"))\n        else if(xNum.last > nNum.last) simplify(x.replaceAll(\"\
    /\", \"\") + \"/1\", n.replaceAll(\"/\", \"\"))\n        else if(xNum.last ==\
    \ nNum.last) simplify(x.replaceAll(\"/\", \"\"), n.replaceAll(\"/\", \"\"))\n\
    \        else if(xNum.last < nNum.last) simplify(x.replaceAll(\"/\", \"\"), n.replaceAll(\"\
    /\", \"\"))\n        else if(xNum.last > nNum.last) simplify(x.replaceAll(\"/\"\
    , \"\") + \"/1\", n.replaceAll(\"/\", \"\"))\n        else if(xNum.last == nNum.last)\
    \ simplify(x.replaceAll(\"/\", \"\"), n.replaceAll(\"/\", \"\"))\n        else\
    \ if(xNum.last < nNum.last) simplify(x.replaceAll(\"/\", \"\"), n.replaceAll(\"\
    /\", \"\"))\n        else if(xNum.last > nNum.last) simplify(x.replaceAll(\"/\"\
    , \"\") + \"/1\", n.replaceAll(\"/\", \"\"))\n        else if(xNum.last == nNum.last)\
    \ simplify(x.replaceAll(\"/\", \"\"), n.replaceAll(\"/\", \"\"))\n        else\
    \ if(xNum.last < nNum.last) simplify(x.replaceAll(\"/\", \"\"), n.replaceAll(\"\
    /\", \"\"))\n        else if(xNum.last > nNum.last) simplify(x.replaceAll(\"/\"\
    , \"\") + \"/1\", n.replaceAll(\"/\", \"\"))\n        else if(xNum.last == nNum.last)\
    \ simplify(x.replaceAll(\"/\", \"\"), n.replaceAll(\"/\", \"\"))\n        else\
    \ if(xNum.last < nNum.last) simplify(x.replaceAll(\"/", "        val xNum = x.split(\"\
    /\").toInt\n        val nNum = n.split(\"/\").toInt\n        if(xNum.product*(nNum.product)\
    \ == xNum.product*(nNum.product+1)) true else false", "        val xNum = x.split(\"\
    /\").toInt\n        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        (xNum.last == nDeno) && (xNum.head ==\
    \ nNum.head)", "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"\
    /\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n   \
    \     (xNum.head * nNum.head == xDeno) && (nNum.head * xDeno == nDeno)", "   \
    \     val nums = x.split(\"/\")\n        val dens = n.split(\"/\")\n        val\
    \ numsLength = nums.length\n        val densLength = dens.length\n        if (numsLength\
    \ != densLength) {\n            return false\n        }\n        var i = 0\n \
    \       var j = 0\n        var k = 0\n        var sum = 0\n        var product\
    \ = 1\n        while (i < numsLength && j < densLength) {\n            sum = nums(i)\
    \ * dens(j)\n            product = product * sum\n            i += 1\n       \
    \     j += 1\n            k += 1\n        }\n        if (product == 1) {\n   \
    \         return true\n        }\n        return false", "        val x = x.split(\"\
    /\").map(_.toInt)\n        val n = n.split(\"/\").map(_.toInt)\n        val xx\
    \ = x.head\n        val nn = n.head\n        val xn = x.tail\n        val nn =\
    \ n.tail\n        val xx = x.head\n        val nn = n.head\n        val xn = x.tail\n\
    \        val nn = n.tail\n        val xx = x.head\n        val nn = n.head\n \
    \       val xn = x.tail\n        val nn = n.tail\n        val xx = x.head\n  \
    \      val nn = n.head\n        val xn = x.tail\n        val nn = n.tail\n   \
    \     val xx = x.head\n        val nn = n.head\n        val xn = x.tail\n    \
    \    val nn = n.tail\n        val xx = x.head\n        val nn = n.head\n     \
    \   val xn = x.tail\n        val nn = n.tail\n        val xx = x.head\n      \
    \  val nn = n.head\n        val xn = x.tail\n        val nn = n.tail\n       \
    \ val xx = x.head\n        val nn = n.head\n        val xn = x.tail\n        val\
    \ nn = n.tail\n        val xx = x.head\n        val nn = n.head\n        val xn\
    \ = x.tail\n        val nn = n.tail\n        val xx = x.head\n        val nn =\
    \ n.head\n        val xn = x.tail\n        val nn = n.tail\n        val xx = x.head\n\
    \        val nn = n.head\n        val xn = x.tail\n        val nn = n.tail\n \
    \       val xx = x.head\n        val nn = n.head\n        val xn = x.tail\n  \
    \      val nn = n.tail\n        val xx = x.head\n        val nn = n.head\n   \
    \     val xn = x.tail\n        val nn = n.tail\n        val xx = x.head\n    \
    \    val nn = n.head\n        val xn = x.tail\n        val nn = n.tail\n     \
    \   val xx = x.head\n        val nn = n.head\n        val xn = x.tail\n      \
    \  val nn = n.tail\n        val xx = x.head\n        val nn = n.head\n       \
    \ val xn = x.tail\n        val nn = n.tail\n        val xx = x.head\n        val\
    \ nn = n.head\n        val xn = x.tail\n        val nn = n.tail\n        val xx\
    \ = x.head\n        val n", "        val xNum = x.split(\"/\").map(_.toInt)\n\
    \        val nNum = n.split(\"/\").map(_.toInt)\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        val xDenoIsZero = xDeno == 0 && nDeno\
    \ == 0 // if both denominator are zero, return false\n        val nDenoIsZero\
    \ = nDeno == 0 && xDeno == 0 // if both denominator are zero, return false\n \
    \       val xDenoIsEven = xDeno == (xNum.last % xDeno)\n        val nDenoIsEven\
    \ = nDeno == (nNum.last % nDeno)\n        val xDenoIsOdd = xDeno == (xNum.last\
    \ % xDeno)\n        val nDenoIsOdd = nDeno == (nNum.last % nDeno)\n        val\
    \ xDenoIsEvenOrOdd = (xDenoIsEven || xDenoIsOdd)\n        val nDenoIsEvenOrOdd\
    \ = (nDenoIsEven || nDenoIsOdd)\n        val xDenoIsOddOrEven = (xDenoIsOdd ||\
    \ nDenoIsEven)\n        val nDenoIsOddOrEven = (nDenoIsOdd || xDenoIsEven)\n \
    \       val xDenoIsEvenOrOddOrZero = (xDenoIsEvenOrOdd || nDenoIsEvenOrOdd)\n\
    \        val nDenoIsEvenOrOddOrZero = (nDenoIsEvenOrOdd || xDenoIsEvenOrOdd)\n\
    \        val xDenoIsOddOrEvenOrZero = (xDenoIsOddOrEven || nDenoIsOddOrEven)\n\
    \        val nDenoIsOddOrEvenOrZero = (nDenoIsOddOrEven || xDenoIsOddOrEven)\n\
    \        val xDenoIsEvenOrOddOrZeroOrZero = (xDenoIsEvenOrOddOrZero || nDenoIsEvenOrOddOrZero)\n\
    \        val nDenoIsEvenOrOddOrZeroOrZero = (nDenoIsEvenOrOddOrZero || xDenoIsEvenOrOddOrZero)\n\
    \        val xDenoIsOddOrEven", "        val xNum = x.split(\"/\").toInt\n   \
    \     val nNum = n.split(\"/\").toInt\n        if(xNum.product(xNum.last).isWholeNumber\
    \ && nNum.product(nNum.last).isWholeNumber){\n            true\n        }else{\n\
    \            false\n        }", "        val xNum = x.split(\"/\").toInt\n   \
    \     val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n       \
    \ val nDeno = nNum.last\n        (xNum.head == nNum.head && xDeno == nDeno)",
  "        val nums = x.split(\"/\").map(_.toInt)\n        val denoms = n.split(\"\
    /\").map(_.toInt)\n        val numsSum = nums.sum\n        val denomsSum = denoms.sum\n\
    \        val numsDiff = numsSum - denomsSum\n        val numsSum2 = nums.map(x\
    \ => x * x).sum\n        val denomsSum2 = denoms.map(x => x * x).sum\n       \
    \ val numsDiff2 = numsSum2 - denomsSum2\n        val numsDiff3 = numsSum2 - denomsSum2\n\
    \        val numsDiff4 = numsSum2 - denomsSum2\n        val numsDiff5 = numsSum2\
    \ - denomsSum2\n        val numsDiff6 = numsSum2 - denomsSum2\n        val numsDiff7\
    \ = numsSum2 - denomsSum2\n        val numsDiff8 = numsSum2 - denomsSum2\n   \
    \     val numsDiff9 = numsSum2 - denomsSum2\n        val numsDiff10 = numsSum2\
    \ - denomsSum2\n        val numsDiff11 = numsSum2 - denomsSum2\n        val numsDiff12\
    \ = numsSum2 - denomsSum2\n        val numsDiff13 = numsSum2 - denomsSum2\n  \
    \      val numsDiff14 = numsSum2 - denomsSum2\n        val numsDiff15 = numsSum2\
    \ - denomsSum2\n        val numsDiff16 = numsSum2 - denomsSum2\n        val numsDiff17\
    \ = numsSum2 - denomsSum2\n        val numsDiff18 = numsSum2 - denomsSum2\n  \
    \      val numsDiff19 = numsSum2 - denomsSum2\n        val numsDiff20 = numsSum2\
    \ - denomsSum2\n        val numsDiff21 = numsSum2 - denomsSum2\n        val numsDiff22\
    \ = numsSum2 - denomsSum2\n        val numsDiff23 = numsSum2 - denomsSum2\n  \
    \      val numsDiff24 = numsSum2 - denomsSum2\n        val numsDiff25 = numsSum2\
    \ - denomsSum2\n        val numsDiff26 = numsSum2 - denomsSum2\n        val numsDiff27\
    \ = numsSum2 - denomsSum2\n        val numsDiff28 = numsSum2 - denomsSum2", " \
    \       val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        val xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNum2\
    \ = xNum.init\n        val nNum2 = nNum.init\n        val xDeno2 = xNum2.last\n\
    \        val nDeno2 = nNum2.last\n        val xNum3 = xNum2.init\n        val\
    \ nNum3 = nNum2.init\n        val xDeno3 = xNum3.last\n        val nDeno3 = nNum3.last\n\
    \        val xNum4 = xNum3.init\n        val nNum4 = nNum3.init\n        val xDeno4\
    \ = xNum4.last\n        val nDeno4 = nNum4.last\n        val xNum5 = xNum4.init\n\
    \        val nNum5 = nNum4.init\n        val xDeno5 = xNum5.last\n        val\
    \ nDeno5 = nNum5.last\n        val xNum6 = xNum5.init\n        val nNum6 = nNum5.init\n\
    \        val xDeno6 = xNum6.last\n        val nDeno6 = nNum6.last\n        val\
    \ xNum7 = xNum6.init\n        val nNum7 = nNum6.init\n        val xDeno7 = xNum7.last\n\
    \        val nDeno7 = nNum7.last\n        val xNum8 = xNum7.init\n        val\
    \ nNum8 = nNum7.init\n        val xDeno8 = xNum8.last\n        val nDeno8 = nNum8.last\n\
    \        val xNum9 = xNum8.init\n        val nNum9 = nNum8.init\n        val xDeno9\
    \ = xNum9.last\n        val nDeno9 = nNum9.last\n        val xNum10 = xNum9.init\n\
    \        val nNum10 = nNum9.init\n        val xDeno10 = xNum10.last\n        val\
    \ nDeno10 = nNum10.last\n        val xNum11 = xNum10.init\n        val nNum11\
    \ = nNum10.init\n        val xDeno11 = xNum11.last\n        val nDeno11 = nNum11.last\n\
    \        val xNum12 = xNum11.init\n        val nNum12 = nNum11.init\n        val\
    \ xDeno12 = xNum12.last\n        val nDeno12 = nNum12.last\n        val xNum13\
    \ = xNum12.init\n", "        val numer = x.split(\"/\")(0)\n        val denom\
    \ = x.split(\"/\")(1)\n        val numerator = numer.toInt\n        val denominator\
    \ = denom.toInt\n        val whole = numer * denominator\n        val wholeInt\
    \ = whole.toInt\n        val wholeFraction = wholeInt / denominator\n        val\
    \ wholeFractionInt = wholeFraction.toInt\n        val wholeFractionFraction =\
    \ wholeFractionInt / denominator\n        val wholeFractionFractionInt = wholeFractionFraction.toInt\n\
    \        val wholeFractionFractionFraction = wholeFractionFractionInt / denominator\n\
    \        wholeFractionFractionFraction == whole", "        val nums = x.split(\"\
    /\")\n        val dens = n.split(\"/\")\n        val num1 = nums(0).toInt\n  \
    \      val num2 = nums(1).toInt\n        val den1 = dens(0).toInt\n        val\
    \ den2 = dens(1).toInt\n        if (den1 == 0 && den2 == 0) {\n            return\
    \ true\n        }\n        if (den1 == 0 && den2 != 0) {\n            return false\n\
    \        }\n        if (den1 != 0 && den2 == 0) {\n            return false\n\
    \        }\n        if (den1 == 0 && den2 != 0) {\n            return false\n\
    \        }\n        if (den1 == 0 && den2 == 0) {\n            return true\n \
    \       }\n        if (den1 != 0 && den2 != 0) {\n            if (den1 == den2)\
    \ {\n                return true\n            }\n            if (den1 > den2)\
    \ {\n                val temp = den1\n                den1 = den2\n          \
    \      den2 = temp\n            }\n            if (den1 == den2) {\n         \
    \       return true\n            }\n        }\n        if (den1 == den2) {\n \
    \           return true\n        }\n        if (den1 > den2) {\n            val\
    \ temp = den1\n            den1 = den2\n            den2 = temp\n        }\n \
    \       if (den1 == den2) {\n            return true\n        }\n        if (den1\
    \ > den2) {\n            val temp = den1\n            den1 = den2\n          \
    \  den2 = temp\n        }\n        if (den1 == den2) {\n            return true\n\
    \        }\n        if (den1 > den2) {\n            val temp = den1\n        \
    \    den1 = den2\n            den2 = temp\n        }\n        if (den1 == den2)\
    \ {\n            return true\n        }\n        if (den1 > den2) {\n        \
    \    val temp = den1\n            den1 = den2\n            den2 = temp\n     \
    \   }\n        if (den1 == den2) {\n            return true\n        }\n     \
    \   if (den1 > den2) {\n            val temp = den1\n            den1 = den2\n\
    \            den2 = temp\n        }\n        if (den1 == den2) {\n           \
    \ return true\n        }\n        if (den1 > den2) {\n            val temp = den1\n\
    \            den1 = den2\n            den2 = temp\n        }\n        if (den1\
    \ == den2) {\n            return true\n        }\n        if (den1 > den2) {\n\
    \            val temp = den1\n            den1 = den2\n            den2 = temp\n\
    \        }\n        if (den1 == den2) {\n            return true\n        }\n\
    \        if (den1 > den2) {\n            val temp = den1\n            den1 = den2\n\
    \            den2 = temp\n        }\n        if (den1 == den2) {\n           \
    \ return true\n        }\n        if (den1 > den2) {\n            val temp = den1\n\
    \            den1 = den2\n            den2 = temp\n        }\n        if (den1\
    \ == den2) {\n            return true\n", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n    \
    \    val nDeno = nNum.last\n        (xNum.head == nNum.head && xDeno == nDeno)",
  "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        val xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNum1\
    \ = xNum.init\n        val nNum1 = nNum.init\n        val xDeno1 = xDeno\n   \
    \     val nDeno1 = nDeno\n        val xNum2 = xNum.tail\n        val nNum2 = nNum.tail\n\
    \        val xDeno2 = xDeno\n        val nDeno2 = nDeno\n        val xNum3 = xNum.init\n\
    \        val nNum3 = nNum.init\n        val xDeno3 = xDeno\n        val nDeno3\
    \ = nDeno\n        val xNum4 = xNum.tail\n        val nNum4 = nNum.tail\n    \
    \    val xDeno4 = xDeno\n        val nDeno4 = nDeno\n        val xNum5 = xNum.init\n\
    \        val nNum5 = nNum.init\n        val xDeno5 = xDeno\n        val nDeno5\
    \ = nDeno\n        val xNum6 = xNum.tail\n        val nNum6 = nNum.tail\n    \
    \    val xDeno6 = xDeno\n        val nDeno6 = nDeno\n        val xNum7 = xNum.init\n\
    \        val nNum7 = nNum.init\n        val xDeno7 = xDeno\n        val nDeno7\
    \ = nDeno\n        val xNum8 = xNum.tail\n        val nNum8 = nNum.tail\n    \
    \    val xDeno8 = xDeno\n        val nDeno8 = nDeno\n        val xNum9 = xNum.init\n\
    \        val nNum9 = nNum.init\n        val xDeno9 = xDeno\n        val nDeno9\
    \ = nDeno\n        val xNum10 = xNum.tail\n        val nNum10 = nNum.tail\n  \
    \      val xDeno10 = xDeno\n        val nDeno10 = nDeno\n        val xNum11 =\
    \ xNum.init\n        val nNum11 = nNum.init\n        val xDeno11 = xDeno\n   \
    \     val nDeno11 = nDeno\n        val xNum12 = xNum.tail\n        val nNum12\
    \ = nNum.tail\n        val xDeno12 = xDeno\n        val ", "        val numer\
    \ = x.split(\"/\")(0)\n        val denom = x.split(\"/\")(1)\n        val num\
    \ = new BigDecimal(numer)\n        val den = new BigDecimal(denom)\n        val\
    \ result = num.divide(den, BigDecimal.ROUND_HALF_UP)\n        val isWhole = result.toBigInt\
    \ == result\n        val isFraction = num.divide(den, BigDecimal.ROUND_HALF_UP).toBigInt\
    \ != 0\n        isWhole && isFraction", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n    \
    \    val nDeno = nNum.last\n        val xNumStr = xNum.dropRight(1).mkString(\"\
    /\")\n        val nNumStr = nNum.dropRight(1).mkString(\"/\")\n        val xDenoStr\
    \ = xDeno + xNumStr\n        val nDenoStr = nDeno + nNumStr\n        if(xNumStr\
    \ == nNumStr && xDenoStr == nDenoStr)\n        {\n            true\n        }\n\
    \        else\n        {\n            false\n        }", "        val xNum = x.split(\"\
    /\").toInt\n        val nNum = n.split(\"/\").toInt\n        if(xNum.product*(nNum.product)\
    \ == xNum.product*nNum.product)\n            true\n        else\n            false",
  "        val fraction = x.split(\"/\").map(_.toInt)\n        val numerator = fraction(0)\n\
    \        val denominator = fraction(1)\n        val numeratorIsWhole = numerator\
    \ == numerator.toInt\n        val denominatorIsWhole = denominator == denominator.toInt\n\
    \        val numeratorIsNegative = numerator < 0\n        val denominatorIsNegative\
    \ = denominator < 0\n        val numeratorIsPositive = numerator > 0\n       \
    \ val denominatorIsPositive = denominator > 0\n        val numeratorIsNegativeOrZero\
    \ = numeratorIsNegative || numeratorIsWhole\n        val denominatorIsNegativeOrZero\
    \ = denominatorIsNegative || denominatorIsWhole\n        val numeratorIsPositiveOrZero\
    \ = numeratorIsPositive || numeratorIsWhole\n        val denominatorIsPositiveOrZero\
    \ = denominatorIsPositive || denominatorIsWhole\n        val numeratorIsNegativeOrZeroOrZero\
    \ = numeratorIsNegativeOrZero || numeratorIsZero\n        val denominatorIsNegativeOrZeroOrZero\
    \ = denominatorIsNegativeOrZero || denominatorIsZero\n        val numeratorIsPositiveOrZeroOrZero\
    \ = numeratorIsPositiveOrZero || numeratorIsZero\n        val denominatorIsPositiveOrZeroOrZero\
    \ = denominatorIsPositiveOrZero || denominatorIsZero\n        val numeratorIsNegativeOrZeroOrZeroOrZero\
    \ = numeratorIsNegativeOrZeroOrZero || numeratorIsZeroOrZero\n        val denominatorIsNegativeOrZeroOrZeroOrZero\
    \ = denominatorIsNegativeOrZeroOrZero || denominatorIsZeroOrZero\n        val\
    \ numeratorIsPositiveOrZeroOrZeroOrZero = numeratorIsPositiveOrZeroOrZero || numeratorIsZeroOrZero\n\
    \        val denominatorIsPositiveOrZeroOrZeroOrZero = denominatorIsPositiveOrZeroOrZero\
    \ || denominatorIsZeroOrZero\n        val numeratorIsNegativeOrZeroOrZeroOrZero\
    \ = numeratorIsNegativeOrZeroOrZeroOrZero || numeratorIsZeroOrZeroOrZero\n   \
    \     val denominatorIsNegativeOrZeroOrZeroOrZero = denominatorIsNegativeOrZeroOrZeroOrZero\
    \ || denominatorIsZeroOrZeroOrZero\n        val numeratorIsPositiveOrZeroOrZeroOrZero\
    \ = numeratorIsPositiveOrZeroOrZeroOrZero || numeratorIsZeroOrZeroOrZero\n   \
    \     val denominatorIsPositiveOrZeroOrZeroOrZero = denominatorIsPositiveOrZeroOrZeroOr",
  "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        val xDeno = xNum.last\n        val nDeno = nNum.last\n        (xNum.head\
    \ == nNum.head && xDeno == nDeno)", "        val nums = x.split(\"/\").map(_.toInt)\n\
    \        val denoms = n.split(\"/\").map(_.toInt)\n        val numsSum = nums.sum\n\
    \        val denomsSum = denoms.sum\n        if(numsSum == denomsSum){\n     \
    \       true\n        }else{\n            false\n        }", "        val x =\
    \ x.split(\"/\")\n        val n = n.split(\"/\")\n        val numerator = x.head.toInt\n\
    \        val denominator = n.head.toInt\n        val numeratorIsWhole = numerator\
    \ == numerator.toInt\n        val denominatorIsWhole = denominator == denominator.toInt\n\
    \        val numeratorIsNegative = numerator < 0\n        val denominatorIsNegative\
    \ = denominator < 0\n        val numeratorIsPositive = numerator > 0\n       \
    \ val denominatorIsPositive = denominator > 0\n        val numeratorIsNegativeOrZero\
    \ = numeratorIsNegative || numeratorIsZero\n        val denominatorIsNegativeOrZero\
    \ = denominatorIsNegative || denominatorIsZero\n        val numeratorIsPositiveOrZero\
    \ = numeratorIsPositive || numeratorIsZero\n        val denominatorIsPositiveOrZero\
    \ = denominatorIsPositive || denominatorIsZero\n        val numeratorIsNegativeOrZeroOrZero\
    \ = numeratorIsNegativeOrZero || numeratorIsZeroOrZero\n        val denominatorIsNegativeOrZeroOrZero\
    \ = denominatorIsNegativeOrZero || denominatorIsZeroOrZero\n        val numeratorIsPositiveOrZeroOrZero\
    \ = numeratorIsPositiveOrZero || numeratorIsZeroOrZero\n        val denominatorIsPositiveOrZeroOrZero\
    \ = denominatorIsPositiveOrZero || denominatorIsZeroOrZero\n        val numeratorIsNegativeOrZeroOrZeroOrZero\
    \ = numeratorIsNegativeOrZeroOrZero || numeratorIsZeroOrZeroOrZero\n        val\
    \ denominatorIsNegativeOrZeroOrZeroOrZero = denominatorIsNegativeOrZeroOrZero\
    \ || denominatorIsZeroOrZeroOrZero\n        val numeratorIsPositiveOrZeroOrZeroOrZero\
    \ = numeratorIsPositiveOrZeroOrZero || numeratorIsZeroOrZeroOrZero\n        val\
    \ denominatorIsPositiveOrZeroOrZeroOrZero = denominatorIsPositiveOrZeroOrZero\
    \ || denominatorIsZeroOrZeroOrZero\n        val numeratorIsNegativeOrZeroOrZeroOrZeroOrZero\
    \ = numeratorIsNegativeOrZeroOrZeroOrZero || numeratorIsZeroOrZeroOrZeroOrZero\n\
    \        val denominatorIsNegativeOrZeroOrZeroOrZeroOrZero = denominatorIsNegativeOrZeroOrZeroOrZero\
    \ || denominatorIsZeroOrZeroOrZeroOrZero\n        val numeratorIsPositiveOrZeroOrZeroOrZeroOrZero\
    \ = numeratorIsPositiveOrZeroOrZeroOrZero || numeratorIsZeroOr", "        val\
    \ fraction = x.split(\"/\").map(_.toInt)\n        val numerator = fraction(0)\n\
    \        val denominator = fraction(1)\n        val fraction2 = numerator / denominator\n\
    \        val fraction3 = fraction2.toInt\n        val fraction4 = fraction3.toInt\n\
    \        val fraction5 = fraction4.toInt\n        val fraction6 = fraction5.toInt\n\
    \        val fraction7 = fraction6.toInt\n        val fraction8 = fraction7.toInt\n\
    \        val fraction9 = fraction8.toInt\n        val fraction10 = fraction9.toInt\n\
    \        val fraction11 = fraction10.toInt\n        val fraction12 = fraction11.toInt\n\
    \        val fraction13 = fraction12.toInt\n        val fraction14 = fraction13.toInt\n\
    \        val fraction15 = fraction14.toInt\n        val fraction16 = fraction15.toInt\n\
    \        val fraction17 = fraction16.toInt\n        val fraction18 = fraction17.toInt\n\
    \        val fraction19 = fraction18.toInt\n        val fraction20 = fraction19.toInt\n\
    \        val fraction21 = fraction20.toInt\n        val fraction22 = fraction21.toInt\n\
    \        val fraction23 = fraction22.toInt\n        val fraction24 = fraction23.toInt\n\
    \        val fraction25 = fraction24.toInt\n        val fraction26 = fraction25.toInt\n\
    \        val fraction27 = fraction26.toInt\n        val fraction28 = fraction27.toInt\n\
    \        val fraction29 = fraction28.toInt\n        val fraction30 = fraction29.toInt\n\
    \        val fraction31 = fraction30.toInt\n        val fraction32 = fraction31.toInt\n\
    \        val fraction33 = fraction32.toInt\n        val fraction34 = fraction33.toInt\n\
    \        val fraction35 = fraction34.toInt\n        val fraction36 = fraction35.toInt\n\
    \        val fraction37 = fraction36.toInt\n        val fraction38 = fraction37.toInt\n\
    \        val fraction39 = fraction38.toInt\n        val fraction40 = fraction39.toInt\n\
    \        val fraction41 = fraction40.toInt\n        val fraction42 = fraction41.toInt\n\
    \        val fraction43 = fraction42.toInt\n        val fraction44 = fraction43.toInt\n\
    \        val fraction45 = fraction44.toInt\n        val fraction46 = fraction45.toInt\n\
    \        val fraction47 = fraction46.toInt\n        val fraction48 = fraction47.toInt\n\
    \        val fraction49 = fraction48.toInt\n        val fraction50 = fraction49.toInt\n\
    \        val ", "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"\
    /\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n   \
    \     if(xDeno == 0){\n            return false\n        }\n        if(nDeno ==\
    \ 0){\n            return false\n        }\n        if(xNum.last == nNum.last){\n\
    \            return true\n        }\n        if(xNum.last > nNum.last){\n    \
    \        return false\n        }\n        if(xNum.last < nNum.last){\n       \
    \     return true\n        }\n        if(xNum.last < nNum.last && xDeno == nDeno){\n\
    \            return true\n        }\n        if(xNum.last > nNum.last && xDeno\
    \ == nDeno){\n            return false\n        }\n        if(xNum.last == nNum.last\
    \ && xDeno == nDeno){\n            return true\n        }\n        return false",
  "        val xNum = x.split(\"/\").toList\n        val nNum = n.split(\"/\").toList\n\
    \        val xNumLen = xNum.map(_.toInt).sum\n        val nNumLen = nNum.map(_.toInt).sum\n\
    \        if(xNumLen != nNumLen)\n            return false\n        val xNumSum\
    \ = xNum.map(_.toInt).sum\n        val nNumSum = nNum.map(_.toInt).sum\n     \
    \   if(xNumSum == nNumSum)\n            return true\n        val xNumDiff = xNum.map(_.toInt).sum\
    \ - nNum.map(_.toInt).sum\n        if(xNumDiff == 0)\n            return true\n\
    \        val nNumDiff = nNum.map(_.toInt).sum - xNum.map(_.toInt).sum\n      \
    \  if(nNumDiff == 0)\n            return true\n        val xNumDiff = xNum.map(_.toInt).sum\
    \ - nNum.map(_.toInt).sum\n        if(xNumDiff == 0)\n            return true\n\
    \        val nNumDiff = nNum.map(_.toInt).sum - xNum.map(_.toInt).sum\n      \
    \  if(nNumDiff == 0)\n            return true\n        val xNumDiff = xNum.map(_.toInt).sum\
    \ - nNum.map(_.toInt).sum\n        if(xNumDiff == 0)\n            return true\n\
    \        val nNumDiff = nNum.map(_.toInt).sum - xNum.map(_.toInt).sum\n      \
    \  if(nNumDiff == 0)\n            return true\n        val xNumDiff = xNum.map(_.toInt).sum\
    \ - nNum.map(_.toInt).sum\n        if(xNumDiff == 0)\n            return true\n\
    \        val nNumDiff = nNum.map(_.toInt).sum - xNum.map(_.toInt).sum\n      \
    \  if(nNumDiff == 0)\n            return true\n        val xNumDiff = xNum.map(_.toInt).sum\
    \ - nNum.map(_.toInt).sum\n        if(xNumDiff == 0)\n            return true\n\
    \        val nNumDiff = nNum.map(_.toInt).sum - xNum.map(_.toInt).sum\n      \
    \  if(nNumDiff == 0)\n            return true\n        val xNumDiff = xNum.map(_.toInt).sum\
    \ - nNum.map(_.toInt).sum\n        if(xNumDiff == 0)\n            return true\n\
    \        val nNumDiff = nNum.map(_.", "        val nums = x.split(\"/\")\n   \
    \     val dens = n.split(\"/\")\n        val numsInts = nums.map(_.toInt)\n  \
    \      val densInts = dens.map(_.toInt)\n        val numsSum = numsInts.sum\n\
    \        val densSum = densInts.sum\n        val numsDiff = numsSum - densSum\n\
    \        val densDiff = densSum - numsSum\n        val numsDiffAbs = Math.abs(numsDiff)\n\
    \        val densDiffAbs = Math.abs(densDiff)\n        val numsDiffAbsSum = numsDiffAbs.sum\n\
    \        val densDiffAbsSum = densDiffAbs.sum\n        val numsDiffAbsSumAbs =\
    \ Math.abs(numsDiffAbsSum)\n        val densDiffAbsSumAbs = Math.abs(densDiffAbsSum)\n\
    \        val numsDiffAbsSumAbsAbs = Math.abs(numsDiffAbsSumAbs)\n        val densDiffAbsSumAbsAbs\
    \ = Math.abs(densDiffAbsSumAbs)\n        val numsDiffAbsSumAbsAbsAbs = Math.abs(numsDiffAbsSumAbsAbs)\n\
    \        val densDiffAbsSumAbsAbsAbs = Math.abs(densDiffAbsSumAbsAbs)\n      \
    \  val numsDiffAbsSumAbsAbsAbsAbs = Math.abs(numsDiffAbsSumAbsAbsAbsAbs)\n   \
    \     val densDiffAbsSumAbsAbsAbsAbs = Math.abs(densDiffAbsSumAbsAbsAbsAbs)\n\
    \        val numsDiffAbsSumAbsAbsAbsAbsAbs = Math.abs(numsDiffAbsSumAbsAbsAbsAbsAbsAbs)\n\
    \        val densDiffAbsSumAbsAbsAbsAbsAbs = Math.abs(densDiffAbsSumAbsAbsAbsAbsAbsAbs)\n\
    \        val numsDiffAbsSumAbsAbsAbsAbsAbsAbs = Math.abs(numsDiffAbsSumAbsAbsAbsAbsAbsAbsAbs)\n\
    \        val densDiffAbsSumAbsAbsAbsAbsAbsAbs = Math.abs(densDiffAbsSumAbsAbsAbsAbsAbsAbsAbs)\n\
    \        val ", "        val nums = x.split(\"/\")\n        val denoms = n.split(\"\
    /\")\n        if (nums.length != denoms.length) false\n        else nums.zip(denoms).forall\
    \ { case (nm, dn) => nm.toInt == dn.toInt }", "        val xNum = x.split(\"/\"\
    ).map(_.toInt)\n        val nNum = n.split(\"/\").map(_.toInt)\n        val xDeno\
    \ = xNum.last\n        val nDeno = nNum.last\n        if(xDeno == 0 || nDeno ==\
    \ 0) false\n        else if(xDeno == nDeno) true\n        else if(xNum.last ==\
    \ nNum.last) simplify(x.replaceFirst(\"/\" + nNum.last, \"\"), n.replaceFirst(\"\
    /\" + xNum.last, \"\"))\n        else simplify(x.replaceFirst(\"/\" + xNum.last,\
    \ \"\"), n.replaceFirst(\"/\" + nNum.last, \"\"))", "        val fraction = x.split(\"\
    /\").map(_.toInt)\n        val numerator = fraction(0)\n        val denominator\
    \ = fraction(1)\n        if (numerator == 0 && denominator == 0) {\n         \
    \   return true\n        }\n        val numeratorFraction = numerator / denominator\n\
    \        val numeratorFractionString = numeratorFraction.toString\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFractionStringLength = numeratorFractionString.length\n        val\
    \ numeratorFraction", "        val xNum = x.split(\"/\").toInt\n        val nNum\
    \ = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n\
    \        val xNum1 = xNum.init\n        val nNum1 = nNum.init\n        val xDeno1\
    \ = xNum1.last\n        val nDeno1 = nNum1.last\n        val xNum2 = xNum1.init\n\
    \        val nNum2 = nNum1.init\n        val xDeno2 = xNum2.last\n        val\
    \ nDeno2 = nNum2.last\n        val xNum3 = xNum2.init\n        val nNum3 = nNum2.init\n\
    \        val xDeno3 = xNum3.last\n        val nDeno3 = nNum3.last\n        val\
    \ xNum4 = xNum3.init\n        val nNum4 = nNum3.init\n        val xDeno4 = xNum4.last\n\
    \        val nDeno4 = nNum4.last\n        val xNum5 = xNum4.init\n        val\
    \ nNum5 = nNum4.init\n        val xDeno5 = xNum5.last\n        val nDeno5 = nNum5.last\n\
    \        val xNum6 = xNum5.init\n        val nNum6 = nNum5.init\n        val xDeno6\
    \ = xNum6.last\n        val nDeno6 = nNum6.last\n        val xNum7 = xNum6.init\n\
    \        val nNum7 = nNum6.init\n        val xDeno7 = xNum7.last\n        val\
    \ nDeno7 = nNum7.last\n        val xNum8 = xNum7.init\n        val nNum8 = nNum7.init\n\
    \        val xDeno8 = xNum8.last\n        val nDeno8 = nNum8.last\n        val\
    \ xNum9 = xNum8.init\n        val nNum9 = nNum8.init\n        val xDeno9 = xNum9.last\n\
    \        val nDeno9 = nNum9.last\n        val xNum10 = xNum9.init\n        val\
    \ nNum10 = nNum9.init\n        val xDeno10 = xNum10.last\n        val nDeno10\
    \ = nNum10.last\n        val xNum11 = xNum10.init\n        val nNum11 = nNum10.init\n\
    \        val xDeno11 = xNum11.last\n        val nDeno11 = nNum11.last\n      \
    \  val xNum12 = xNum11.init\n", "        val x = x.split(\"/\").map(_.toInt)\n\
    \        val n = n.split(\"/\").map(_.toInt)\n        val xx = x.product\n   \
    \     val nn = n.product\n        val xn = x.product\n        val nn = n.product\n\
    \        val xx = x.product\n        val nn = n.product\n        val xn = x.product\n\
    \        val nn = n.product\n        val xx = x.product\n        val nn = n.product\n\
    \        val xn = x.product\n        val nn = n.product\n        val xx = x.product\n\
    \        val nn = n.product\n        val xn = x.product\n        val nn = n.product\n\
    \        val xx = x.product\n        val nn = n.product\n        val xn = x.product\n\
    \        val nn = n.product\n        val xx = x.product\n        val nn = n.product\n\
    \        val xn = x.product\n        val nn = n.product\n        val xx = x.product\n\
    \        val nn = n.product\n        val xn = x.product\n        val nn = n.product\n\
    \        val xx = x.product\n        val nn = n.product\n        val xn = x.product\n\
    \        val nn = n.product\n        val xx = x.product\n        val nn = n.product\n\
    \        val xn = x.product\n        val nn = n.product\n        val xx = x.product\n\
    \        val nn = n.product\n        val xn = x.product\n        val nn = n.product\n\
    \        val xx = x.product\n        val nn = n.product\n        val xn = x.product\n\
    \        val nn = n.product\n        val xx = x.product\n        val nn = n.product\n\
    \        val xn = x.product\n        val nn = n.product\n        val xx = x.product\n\
    \        val nn = n.product\n        val xn = x.product\n        val nn = n.product\n\
    \        val xx = x.product\n        val nn = n.product\n        val xn = x.product\n\
    \        val nn = n.product\n        val xx = x.product\n        val nn = n.product\n\
    \        val xn = x.product\n        val nn = n.product\n        val xx = x.product\n\
    \        val nn = n.product\n        val xn = x.product\n        val nn = n.product\n\
    \        val xx = x.product\n        val nn = n.product\n        val xn = x.product\n\
    \        val nn = n.product\n        val xx = x.product\n        val n", "   \
    \     val numerator = x.split(\"/\")(0)\n        val denominator = x.split(\"\
    /\")(1)\n        val numeratorAsInt = numerator.toInt\n        val denominatorAsInt\
    \ = denominator.toInt\n        val numeratorAsDouble = numeratorAsInt.toDouble\n\
    \        val denominatorAsDouble = denominatorAsInt.toDouble\n        val numeratorAsFraction\
    \ = Fraction(numeratorAsDouble, denominatorAsDouble)\n        val denominatorAsFraction\
    \ = Fraction(denominatorAsDouble, denominatorAsDouble)\n        val numeratorAsFractionFraction\
    \ = Fraction(numeratorAsFraction, denominatorAsFraction)\n        val numeratorAsFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFraction, denominatorAsFractionFraction)\n   \
    \     val numeratorAsFractionFractionFractionFraction = Fraction(numeratorAsFractionFractionFraction,\
    \ denominatorAsFractionFractionFraction)\n        val numeratorAsFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFraction, denominatorAsFractionFractionFractionFraction)\n\
    \        val numeratorAsFractionFractionFractionFractionFractionFraction = Fraction(numeratorAsFractionFractionFractionFractionFraction,\
    \ denominatorAsFractionFractionFractionFractionFraction)\n        val numeratorAsFractionFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFractionFraction, denominatorAsFractionFractionFractionFractionFractionFraction)\n\
    \        val numeratorAsFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFractionFractionFraction,\
    \ denominatorAsFractionFractionFractionFractionFractionFractionFraction)\n   \
    \     val numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFractionFractionFractionFraction,\
    \ denominatorAsFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \        val numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFraction,\
    \ denominatorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \        val numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction,\
    \ denominatorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \        val numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = Fraction(numeratorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction,\
    \ denominatorAsFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \        val numeratorAsFractionFractionFractionFractionFraction", "        val\
    \ nums = x.split(\"/\")\n        val dens = n.split(\"/\")\n        val numsLength\
    \ = nums.length\n        val densLength = dens.length\n        if (numsLength\
    \ != densLength) {\n            return false\n        }\n        var i = 0\n \
    \       var j = 0\n        var k = 0\n        var sum = 0\n        var product\
    \ = 1\n        while (i < numsLength && j < densLength) {\n            val numsNum\
    \ = nums(i).toInt\n            val densNum = dens(j).toInt\n            sum +=\
    \ numsNum * densNum\n            i += 1\n            j += 1\n        }\n     \
    \   while (i < numsLength) {\n            val numsNum = nums(i).toInt\n      \
    \      sum += numsNum\n            i += 1\n        }\n        while (j < densLength)\
    \ {\n            val densNum = dens(j).toInt\n            product *= densNum\n\
    \            j += 1\n        }\n        val finalSum = sum.toInt\n        val\
    \ finalProduct = product.toInt\n        if (finalSum == finalProduct) {\n    \
    \        return true\n        }\n        return false", "        val nums = x.split(\"\
    /\")\n        val dens = n.split(\"/\")\n        val nums0 = nums(0).toInt\n \
    \       val dens0 = dens(0).toInt\n        val nums1 = nums(1).toInt\n       \
    \ val dens1 = dens(1).toInt\n        val nums0 = nums0.toInt\n        val dens0\
    \ = dens0.toInt\n        val nums1 = nums1.toInt\n        val dens1 = dens1.toInt\n\
    \        val nums0 = nums0.toInt\n        val dens0 = dens0.toInt\n        val\
    \ nums1 = nums1.toInt\n        val dens1 = dens1.toInt\n        val nums0 = nums0.toInt\n\
    \        val dens0 = dens0.toInt\n        val nums1 = nums1.toInt\n        val\
    \ dens1 = dens1.toInt\n        val nums0 = nums0.toInt\n        val dens0 = dens0.toInt\n\
    \        val nums1 = nums1.toInt\n        val dens1 = dens1.toInt\n        val\
    \ nums0 = nums0.toInt\n        val dens0 = dens0.toInt\n        val nums1 = nums1.toInt\n\
    \        val dens1 = dens1.toInt\n        val nums0 = nums0.toInt\n        val\
    \ dens0 = dens0.toInt\n        val nums1 = nums1.toInt\n        val dens1 = dens1.toInt\n\
    \        val nums0 = nums0.toInt\n        val dens0 = dens0.toInt\n        val\
    \ nums1 = nums1.toInt\n        val dens1 = dens1.toInt\n        val nums0 = nums0.toInt\n\
    \        val dens0 = dens0.toInt\n        val nums1 = nums1.toInt\n        val\
    \ dens1 = dens1.toInt\n        val nums0 = nums0.toInt\n        val dens0 = dens0.toInt\n\
    \        val nums1 = nums1.toInt\n        val dens1 = dens1.toInt\n        val\
    \ nums0 = nums0.toInt\n        val dens0 = dens0.toInt\n        val nums1 = nums1.toInt\n\
    \        val dens1 = dens1.toInt\n        val nums0 = nums0.toInt\n        val\
    \ dens0 = dens0.toInt\n        val nums1 = nums1.toInt\n        val dens1 = dens1.toInt\n\
    \        val nums0 = nums0.toInt\n        val dens0 = ", "        val xNum = x.split(\"\
    /\").toInt\n        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        val xNum1 = xNum.dropRight(1)\n      \
    \  val nNum1 = nNum.dropRight(1)\n        val xNum2 = xNum1.dropRight(1)\n   \
    \     val nNum2 = nNum1.dropRight(1)\n        val xNum3 = xNum2.dropRight(1)\n\
    \        val nNum3 = nNum2.dropRight(1)\n        val xNum4 = xNum3.dropRight(1)\n\
    \        val nNum4 = nNum3.dropRight(1)\n        val xNum5 = xNum4.dropRight(1)\n\
    \        val nNum5 = nNum4.dropRight(1)\n        val xNum6 = xNum5.dropRight(1)\n\
    \        val nNum6 = nNum5.dropRight(1)\n        val xNum7 = xNum6.dropRight(1)\n\
    \        val nNum7 = nNum6.dropRight(1)\n        val xNum8 = xNum7.dropRight(1)\n\
    \        val nNum8 = nNum7.dropRight(1)\n        val xNum9 = xNum8.dropRight(1)\n\
    \        val nNum9 = nNum8.dropRight(1)\n        val xNum10 = xNum9.dropRight(1)\n\
    \        val nNum10 = nNum9.dropRight(1)\n        val xNum11 = xNum10.dropRight(1)\n\
    \        val nNum11 = nNum10.dropRight(1)\n        val xNum12 = xNum11.dropRight(1)\n\
    \        val nNum12 = nNum11.dropRight(1)\n        val xNum13 = xNum12.dropRight(1)\n\
    \        val nNum13 = nNum12.dropRight(1)\n        val xNum14 = xNum13.dropRight(1)\n\
    \        val nNum14 = nNum13.dropRight(1)\n        val xNum15 = xNum14.dropRight(1)\n\
    \        val nNum15 = nNum14.dropRight(1)\n        val xNum16 = xNum15.dropRight(1)\n\
    \        val nNum16 = nNum15.dropRight(1)\n        val xNum17 = xNum16.dropRight(1)\n\
    \        val nNum17 = nNum16.dropRight(1)\n        val xNum18 = xNum17.dropRight(1)\n\
    \        val nNum18 = nNum17.dropRight(1)\n        val xNum19 = xNum18.dropRight(1)\n\
    \        val nNum19 = nNum18.dropRight(1)\n        val xNum20 = xNum19.dropRight(1)\n\
    \        val nNum", "        val xNum = x.split(\"/\").toInt\n        val nNum\
    \ = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n\
    \        val xNum1 = xNum.dropRight(1)\n        val nNum1 = nNum.dropRight(1)\n\
    \        val xNum2 = xNum1.dropRight(1)\n        val nNum2 = nNum1.dropRight(1)\n\
    \        val xNum3 = xNum2.dropRight(1)\n        val nNum3 = nNum2.dropRight(1)\n\
    \        val xNum4 = xNum3.dropRight(1)\n        val nNum4 = nNum3.dropRight(1)\n\
    \        val xNum5 = xNum4.dropRight(1)\n        val nNum5 = nNum4.dropRight(1)\n\
    \        val xNum6 = xNum5.dropRight(1)\n        val nNum6 = nNum5.dropRight(1)\n\
    \        val xNum7 = xNum6.dropRight(1)\n        val nNum7 = nNum6.dropRight(1)\n\
    \        val xNum8 = xNum7.dropRight(1)\n        val nNum8 = nNum7.dropRight(1)\n\
    \        val xNum9 = xNum8.dropRight(1)\n        val nNum9 = nNum8.dropRight(1)\n\
    \        val xNum10 = xNum9.dropRight(1)\n        val nNum10 = nNum9.dropRight(1)\n\
    \        val xNum11 = xNum10.dropRight(1)\n        val nNum11 = nNum10.dropRight(1)\n\
    \        val xNum12 = xNum11.dropRight(1)\n        val nNum12 = nNum11.dropRight(1)\n\
    \        val xNum13 = xNum12.dropRight(1)\n        val nNum13 = nNum12.dropRight(1)\n\
    \        val xNum14 = xNum13.dropRight(1)\n        val nNum14 = nNum13.dropRight(1)\n\
    \        val xNum15 = xNum14.dropRight(1)\n        val nNum15 = nNum14.dropRight(1)\n\
    \        val xNum16 = xNum15.dropRight(1)\n        val nNum16 = nNum15.dropRight(1)\n\
    \        val xNum17 = xNum16.dropRight(1)\n        val nNum17 = nNum16.dropRight(1)\n\
    \        val xNum18 = xNum17.dropRight(1)\n        val nNum18 = nNum17.dropRight(1)\n\
    \        val xNum19 = xNum18.dropRight(1)\n        val nNum19 = nNum18.dropRight(1)\n\
    \        val xNum20 = xNum19.dropRight(1)\n        val nNum", "        val nums\
    \ = x.split(\"/\").map(_.toInt)\n        val dens = n.split(\"/\").map(_.toInt)\n\
    \        val numsSum = nums.sum\n        val densSum = dens.sum\n        val numsDiff\
    \ = nums.diff(dens)\n        val densDiff = dens.diff(nums)\n        val numsSumDiff\
    \ = numsSum - densSum\n        val densSumDiff = densSum - numsSum\n        val\
    \ numsDiffSum = numsDiff + densDiff\n        val densDiffSum = densDiff + numsDiff\n\
    \        val numsDiffSumDiff = numsDiffSum + densDiffSum\n        val densDiffSumDiff\
    \ = densDiffSum + numsDiffSum\n        val numsDiffSumDiffDiff = numsDiffSumDiff\
    \ + densDiffSumDiff\n        val densDiffSumDiffDiff = densDiffSumDiff + numsDiffSumDiff\n\
    \        val numsDiffSumDiffDiff = numsDiffSumDiffDiff + densDiffSumDiffDiff\n\
    \        val densDiffSumDiffDiff = densDiffSumDiffDiff + numsDiffSumDiffDiff\n\
    \        val numsDiffSumDiffDiff = numsDiffSumDiffDiff + densDiffSumDiffDiff\n\
    \        val densDiffSumDiffDiff = densDiffSumDiffDiff + numsDiffSumDiffDiff\n\
    \        val numsDiffSumDiffDiff = numsDiffSumDiffDiff + densDiffSumDiffDiff\n\
    \        val densDiffSumDiffDiff = densDiffSumDiffDiff + numsDiffSumDiffDiff\n\
    \        val numsDiffSumDiffDiff = numsDiffSumDiffDiff + densDiffSumDiffDiff\n\
    \        val densDiffSumDiffDiff = densDiffSumDiffDiff + numsDiffSumDiffDiff\n\
    \        val numsDiffSumDiffDiff = numsDiffSumDiffDiff + densDiffSumDiffDiff\n\
    \        val densDiffSumDiffDiff = densDiffSumDiffDiff + numsDiffSumDiffDiff\n\
    \        val numsDiffSumDiffDiff = numsDiffSumDiffDiff + densDiffSumDiffDiff\n\
    \        val densDiffSumDiffDiff = densDiffSumDiffDiff + numsDiffSumDiffDiff\n\
    \        val numsDiffSumDiffDiff = numsDiff", "        val numer = x.split(\"\
    /\").map(_.toInt)\n        val denom = n.split(\"/\").map(_.toInt)\n        val\
    \ numerator = numer.filter(_ > 0).sum\n        val denominator = denom.filter(_\
    \ > 0).sum\n        numerator == denominator && numerator.forall(x => denom.contains(x))",
  "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        val xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNum2\
    \ = xNum.dropRight(1)\n        val nNum2 = nNum.dropRight(1)\n        val xDeno2\
    \ = xDeno\n        val nDeno2 = nDeno\n        val xNum3 = xNum2.dropRight(1)\n\
    \        val nNum3 = nNum2.dropRight(1)\n        val xDeno3 = xDeno2\n       \
    \ val nDeno3 = nDeno2\n        val xNum4 = xNum3.dropRight(1)\n        val nNum4\
    \ = nNum3.dropRight(1)\n        val xDeno4 = xDeno3\n        val nDeno4 = nDeno3\n\
    \        val xNum5 = xNum4.dropRight(1)\n        val nNum5 = nNum4.dropRight(1)\n\
    \        val xDeno5 = xDeno4\n        val nDeno5 = nDeno4\n        val xNum6 =\
    \ xNum5.dropRight(1)\n        val nNum6 = nNum5.dropRight(1)\n        val xDeno6\
    \ = xDeno5\n        val nDeno6 = nDeno5\n        val xNum7 = xNum6.dropRight(1)\n\
    \        val nNum7 = nNum6.dropRight(1)\n        val xDeno7 = xDeno6\n       \
    \ val nDeno7 = nDeno6\n        val xNum8 = xNum7.dropRight(1)\n        val nNum8\
    \ = nNum7.dropRight(1)\n        val xDeno8 = xDeno7\n        val nDeno8 = nDeno7\n\
    \        val xNum9 = xNum8.dropRight(1)\n        val nNum9 = nNum8.dropRight(1)\n\
    \        val xDeno9 = xDeno8\n        val nDeno9 = nDeno8\n        val xNum10\
    \ = xNum9.dropRight(1)\n        val nNum10 = nNum9.dropRight(1)\n        val xDeno10\
    \ = xDeno9\n        val nDeno10 = nDeno9\n        val xNum11 = xNum10.dropRight(1)\n\
    \        val nNum11 = nNum10.dropRight(1)\n        val xDeno11 = xDeno10\n   \
    \     val nDeno11 = nDeno10\n        val xNum12 = xNum11.dropRight(1)\n      \
    \  val ", "        val xNum = x.split(\"/\")\n        val nNum = n.split(\"/\"\
    )\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNum2\
    \ = xNum.dropRight(1)\n        val nNum2 = nNum.dropRight(1)\n        val xDeno2\
    \ = xNum2.last\n        val nDeno2 = nNum2.last\n        val xNum3 = xNum2.dropRight(1)\n\
    \        val nNum3 = nNum2.dropRight(1)\n        val xDeno3 = xNum3.last\n   \
    \     val nDeno3 = nNum3.last\n        val xNum4 = xNum3.dropRight(1)\n      \
    \  val nNum4 = nNum3.dropRight(1)\n        val xDeno4 = xNum4.last\n        val\
    \ nDeno4 = nNum4.last\n        val xNum5 = xNum4.dropRight(1)\n        val nNum5\
    \ = nNum4.dropRight(1)\n        val xDeno5 = xNum5.last\n        val nDeno5 =\
    \ nNum5.last\n        val xNum6 = xNum5.dropRight(1)\n        val nNum6 = nNum5.dropRight(1)\n\
    \        val xDeno6 = xNum6.last\n        val nDeno6 = nNum6.last\n        val\
    \ xNum7 = xNum6.dropRight(1)\n        val nNum7 = nNum6.dropRight(1)\n       \
    \ val xDeno7 = xNum7.last\n        val nDeno7 = nNum7.last\n        val xNum8\
    \ = xNum7.dropRight(1)\n        val nNum8 = nNum7.dropRight(1)\n        val xDeno8\
    \ = xNum8.last\n        val nDeno8 = nNum8.last\n        val xNum9 = xNum8.dropRight(1)\n\
    \        val nNum9 = nNum8.dropRight(1)\n        val xDeno9 = xNum9.last\n   \
    \     val nDeno9 = nNum9.last\n        val xNum10 = xNum9.dropRight(1)\n     \
    \   val nNum10 = nNum9.dropRight(1)\n        val xDeno10 = xNum10.last\n     \
    \   val nDeno10 = nNum10.last\n        val xNum11 = xNum10.dropRight(1)\n    \
    \    val nNum11 = nNum10.dropRight(1)\n        val xDeno11 = xNum11.last\n   \
    \     val nDeno11 = nNum11.last\n        val xNum12 = xNum11.dropRight(1)\n  \
    \      val nNum", "        val xNum = x.split(\"/\").toInt\n        val nNum =\
    \ n.split(\"/\").toInt\n        if(xNum.head == 0 && nNum.head == 0){\n      \
    \      true\n        }else{\n            if(xNum.head != nNum.head){\n       \
    \         false\n            }else{\n                if(xNum.head == 0){\n   \
    \                 true\n                }else{\n                    if(xNum.head\
    \ < nNum.head){\n                        true\n                    }else{\n  \
    \                      if(xNum.head > nNum.head){\n                          \
    \  true\n                        }else{\n                            if(xNum.head\
    \ == nNum.head){\n                                simplify(x.replaceAll(\"/\"\
    , \"\"), n.replaceAll(\"/\", \"\"))\n                            }\n         \
    \               }\n                    }\n                }\n            }\n \
    \       }", "        val xNum = x.split(\"/\")\n        val nNum = n.split(\"\
    /\")\n        val xNum1 = xNum(0)\n        val nNum1 = nNum(0)\n        val xNum2\
    \ = xNum(1)\n        val nNum2 = nNum(1)\n        val xNum3 = xNum2\n        val\
    \ nNum3 = nNum2\n        val xNum4 = xNum3\n        val nNum4 = nNum3\n      \
    \  val xNum5 = xNum4\n        val nNum5 = nNum4\n        val xNum6 = xNum5\n \
    \       val nNum6 = nNum5\n        val xNum7 = xNum6\n        val nNum7 = nNum6\n\
    \        val xNum8 = xNum7\n        val nNum8 = nNum7\n        val xNum9 = xNum8\n\
    \        val nNum9 = nNum8\n        val xNum10 = xNum9\n        val nNum10 = nNum9\n\
    \        val xNum11 = xNum10\n        val nNum11 = nNum10\n        val xNum12\
    \ = xNum11\n        val nNum12 = nNum11\n        val xNum13 = xNum12\n       \
    \ val nNum13 = nNum12\n        val xNum14 = xNum13\n        val nNum14 = nNum13\n\
    \        val xNum15 = xNum14\n        val nNum15 = nNum14\n        val xNum16\
    \ = xNum15\n        val nNum16 = nNum15\n        val xNum17 = xNum16\n       \
    \ val nNum17 = nNum16\n        val xNum18 = xNum17\n        val nNum18 = nNum17\n\
    \        val xNum19 = xNum18\n        val nNum19 = nNum18\n        val xNum20\
    \ = xNum19\n        val nNum20 = nNum19\n        val xNum21 = xNum20\n       \
    \ val nNum21 = nNum20\n        val xNum22 = xNum21\n        val nNum22 = nNum21\n\
    \        val xNum23 = xNum22\n        val nNum23 = nNum22\n        val xNum24\
    \ = xNum23\n        val nNum24 = nNum23\n        val xNum25 = xNum24\n       \
    \ val nNum25 = nNum24\n        val xNum26 = xNum25\n        val nNum26 = nNum25\n\
    \        val xNum27 = xNum26\n        val nNum27 = nNum26\n        val xNum28\
    \ = xNum27", "        val numer = x.split(\"/\")(0)\n        val denom = x.split(\"\
    /\")(1)\n        val numInts = numer.split(\"/\").map(_.toInt)\n        val denomInts\
    \ = denom.split(\"/\").map(_.toInt)\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = denomInts.length\n        val numIntLength = numInts.length\n\
    \        val denomIntLength = ", "        val xNum = x.split(\"/\").toList\n \
    \       val nNum = n.split(\"/\").toList\n        val xDeno = xNum.last\n    \
    \    val nDeno = nNum.last\n        val xNum1 = xNum.init\n        val nNum1 =\
    \ nNum.init\n        val xNum2 = xNum.tail\n        val nNum2 = nNum.tail\n  \
    \      val xDeno1 = xDeno\n        val nDeno1 = nDeno\n        val xDeno2 = xDeno\n\
    \        val nDeno2 = nDeno\n        val xDeno3 = xDeno\n        val nDeno3 =\
    \ nDeno\n        val xDeno4 = xDeno\n        val nDeno4 = nDeno\n        val xDeno5\
    \ = xDeno\n        val nDeno5 = nDeno\n        val xDeno6 = xDeno\n        val\
    \ nDeno6 = nDeno\n        val xDeno7 = xDeno\n        val nDeno7 = nDeno\n   \
    \     val xDeno8 = xDeno\n        val nDeno8 = nDeno\n        val xDeno9 = xDeno\n\
    \        val nDeno9 = nDeno\n        val xDeno10 = xDeno\n        val nDeno10\
    \ = nDeno\n        val xDeno11 = xDeno\n        val nDeno11 = nDeno\n        val\
    \ xDeno12 = xDeno\n        val nDeno12 = nDeno\n        val xDeno13 = xDeno\n\
    \        val nDeno13 = nDeno\n        val xDeno14 = xDeno\n        val nDeno14\
    \ = nDeno\n        val xDeno15 = xDeno\n        val nDeno15 = nDeno\n        val\
    \ xDeno16 = xDeno\n        val nDeno16 = nDeno\n        val xDeno17 = xDeno\n\
    \        val nDeno17 = nDeno\n        val xDeno18 = xDeno\n        val nDeno18\
    \ = nDeno\n        val xDeno19 = xDeno\n        val nDeno19 = nDeno\n        val\
    \ xDeno20 = xDeno\n        val nDeno20 = nDeno\n        val xDeno21 = xDeno\n\
    \        val nDeno21 = nDeno\n        val xDeno22 = xDeno\n", "        val nums\
    \ = x.split(\"/\").map(_.toInt)\n        val dens = n.split(\"/\").map(_.toInt)\n\
    \        val numsSum = nums.sum\n        val densSum = dens.sum\n        val numsSumInv\
    \ = numsSum / densSum\n        val densSumInv = densSum / numsSum\n        val\
    \ numsSumInv = numsSum / densSum\n        val densSumInv = densSum / numsSum\n\
    \        val numsSumInv = numsSum / densSum\n        val densSumInv = densSum\
    \ / numsSum\n        val numsSumInv = numsSum / densSum\n        val densSumInv\
    \ = densSum / numsSum\n        val numsSumInv = numsSum / densSum\n        val\
    \ densSumInv = densSum / numsSum\n        val numsSumInv = numsSum / densSum\n\
    \        val densSumInv = densSum / numsSum\n        val numsSumInv = numsSum\
    \ / densSum\n        val densSumInv = densSum / numsSum\n        val numsSumInv\
    \ = numsSum / densSum\n        val densSumInv = densSum / numsSum\n        val\
    \ numsSumInv = numsSum / densSum\n        val densSumInv = densSum / numsSum\n\
    \        val numsSumInv = numsSum / densSum\n        val densSumInv = densSum\
    \ / numsSum\n        val numsSumInv = numsSum / densSum\n        val densSumInv\
    \ = densSum / numsSum\n        val numsSumInv = numsSum / densSum\n        val\
    \ densSumInv = densSum / numsSum\n        val numsSumInv = numsSum / densSum\n\
    \        val densSumInv = densSum / numsSum\n        val numsSumInv = numsSum\
    \ / densSum\n        val densSumInv = densSum / numsSum\n        val numsSumInv\
    \ = numsSum / densSum\n        val densSumInv = densSum / numsSum\n        val\
    \ numsSumInv = numsSum / densSum", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n    \
    \    val nDeno = nNum.last\n        val xNum1 = xNum.init\n        val nNum1 =\
    \ nNum.init\n        val xDeno1 = xDeno\n        val nDeno1 = nDeno\n        val\
    \ xNum2 = xNum.tail\n        val nNum2 = nNum.tail\n        val xDeno2 = xDeno\n\
    \        val nDeno2 = nDeno\n        val xNum3 = xNum.init\n        val nNum3\
    \ = nNum.init\n        val xDeno3 = xDeno\n        val nDeno3 = nDeno\n      \
    \  val xNum4 = xNum.tail\n        val nNum4 = nNum.tail\n        val xDeno4 =\
    \ xDeno\n        val nDeno4 = nDeno\n        val xNum5 = xNum.init\n        val\
    \ nNum5 = nNum.init\n        val xDeno5 = xDeno\n        val nDeno5 = nDeno\n\
    \        val xNum6 = xNum.tail\n        val nNum6 = nNum.tail\n        val xDeno6\
    \ = xDeno\n        val nDeno6 = nDeno\n        val xNum7 = xNum.init\n       \
    \ val nNum7 = nNum.init\n        val xDeno7 = xDeno\n        val nDeno7 = nDeno\n\
    \        val xNum8 = xNum.tail\n        val nNum8 = nNum.tail\n        val xDeno8\
    \ = xDeno\n        val nDeno8 = nDeno\n        val xNum9 = xNum.init\n       \
    \ val nNum9 = nNum.init\n        val xDeno9 = xDeno\n        val nDeno9 = nDeno\n\
    \        val xNum10 = xNum.tail\n        val nNum10 = nNum.tail\n        val xDeno10\
    \ = xDeno\n        val nDeno10 = nDeno\n        val xNum11 = xNum.init\n     \
    \   val nNum11 = nNum.init\n        val xDeno11 = xDeno\n        val nDeno11 =\
    \ nDeno\n        val xNum12 = xNum.tail\n        val nNum12 = nNum.tail\n    \
    \    val xDeno12 = xDeno\n        val ", "        val xNum = x.split(\"/\")\n\
    \        val nNum = n.split(\"/\")\n        val xNum1 = xNum(0)\n        val nNum1\
    \ = nNum(0)\n        val xNum2 = xNum(1)\n        val nNum2 = nNum(1)\n      \
    \  val xNum3 = xNum2\n        val nNum3 = nNum2\n        val xNum4 = xNum3\n \
    \       val nNum4 = nNum3\n        val xNum5 = xNum4\n        val nNum5 = nNum4\n\
    \        val xNum6 = xNum5\n        val nNum6 = nNum5\n        val xNum7 = xNum6\n\
    \        val nNum7 = nNum6\n        val xNum8 = xNum7\n        val nNum8 = nNum7\n\
    \        val xNum9 = xNum8\n        val nNum9 = nNum8\n        val xNum10 = xNum9\n\
    \        val nNum10 = nNum9\n        val xNum11 = xNum10\n        val nNum11 =\
    \ nNum10\n        val xNum12 = xNum11\n        val nNum12 = nNum11\n        val\
    \ xNum13 = xNum12\n        val nNum13 = nNum12\n        val xNum14 = xNum13\n\
    \        val nNum14 = nNum13\n        val xNum15 = xNum14\n        val nNum15\
    \ = nNum14\n        val xNum16 = xNum15\n        val nNum16 = nNum15\n       \
    \ val xNum17 = xNum16\n        val nNum17 = nNum16\n        val xNum18 = xNum17\n\
    \        val nNum18 = nNum17\n        val xNum19 = xNum18\n        val nNum19\
    \ = nNum18\n        val xNum20 = xNum19\n        val nNum20 = nNum19\n       \
    \ val xNum21 = xNum20\n        val nNum21 = nNum20\n        val xNum22 = xNum21\n\
    \        val nNum22 = nNum21\n        val xNum23 = xNum22\n        val nNum23\
    \ = nNum22\n        val xNum24 = xNum23\n        val nNum24 = nNum23\n       \
    \ val xNum25 = xNum24\n        val nNum25 = nNum24\n        val xNum26 = xNum25\n\
    \        val nNum26 = nNum25\n        val xNum27 = xNum26\n        val nNum27\
    \ = nNum26\n        val xNum28 = xNum27", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        if(xNum.product(xNum) == nNum.product(nNum))\
    \ {\n            return true\n        }\n        else {\n            return false\n\
    \        }", "        val nums = x.split(\"/\")\n        val dens = n.split(\"\
    /\")\n        val numsLength = nums.length\n        val densLength = dens.length\n\
    \        if (numsLength != densLength) {\n            return false\n        }\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var sum = 0\n\
    \        while (i < numsLength && j < densLength) {\n            sum = nums(i)\
    \ * dens(j) + sum\n            i += 1\n            j += 1\n        }\n       \
    \ if (sum == 0) {\n            return true\n        }\n        val div = sum /\
    \ dens(j)\n        val remainder = sum % dens(j)\n        if (remainder == 0)\
    \ {\n            return true\n        }\n        if (div == dens(j)) {\n     \
    \       return true\n        }\n        return false", "        val numer = x.split(\"\
    /\")(0)\n        val denom = x.split(\"/\")(1)\n        val numInt = (numer toInt)\n\
    \        val denomInt = (denom toInt)\n        if(numInt == denomInt){\n     \
    \       return true\n        }\n        else{\n            return false\n    \
    \    }", "        val numer = x.split(\"/\")(0)\n        val denom = x.split(\"\
    /\")(1)\n        val numerator = numer.toInt\n        val denominator = denom.toInt\n\
    \        val numeratorIsWhole = numerator == numer\n        val denominatorIsWhole\
    \ = denominator == denom\n        val isWhole = numeratorIsWhole && denominatorIsWhole\n\
    \        val isNotWhole = !isWhole\n        val isNotWholeOrZero = !(isWhole &&\
    \ denominator == 0)\n        val isNotWholeOrZeroOrZero = !(isWhole && denominator\
    \ == 0 && numerator == 0)\n        val isNotWholeOrZeroOrZeroOrZero = !(isWhole\
    \ && denominator == 0 && numerator == 0 && numerator == 0)\n        val isNotWholeOrZeroOrZeroOrZeroOrZero\
    \ = !(isWhole && denominator == 0 && numerator == 0 && numerator == 0 && numerator\
    \ == 0)\n        val isNotWholeOrZeroOrZeroOrZeroOrZeroOrZero = !(isWhole && denominator\
    \ == 0 && numerator == 0 && numerator == 0 && numerator == 0 && numerator == 0)\n\
    \        val isNotWholeOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = !(isWhole && denominator\
    \ == 0 && numerator == 0 && numerator == 0 && numerator == 0 && numerator == 0\
    \ && numerator == 0)\n        val isNotWholeOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = !(isWhole && denominator == 0 && numerator == 0 && numerator == 0 && numerator\
    \ == 0 && numerator == 0 && numerator == 0 && numerator == 0)\n        val isNotWholeOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = !(isWhole && denominator == 0 && numerator == 0 && numerator == 0 && numerator\
    \ == 0 && numerator == 0 && numerator == 0 && numerator == 0 && numerator == 0)\n\
    \        val isNotWholeOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = !(isWhole && denominator == 0 && numerator == 0 && numerator == 0 && numerator\
    \ == 0 && numerator == 0 && numerator == 0 && numerator == 0 && numerator == 0\
    \ && numerator == 0)\n        val isNotWholeOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = !(isWhole && denominator == 0 && numerator ", "        val xNum = x.split(\"\
    /\").toInt\n        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        val xNum1 = xNum.dropRight(1)\n      \
    \  val nNum1 = nNum.dropRight(1)\n        val xDeno1 = xDeno\n        val nDeno1\
    \ = nDeno\n        val xNum2 = xNum1.dropRight(1)\n        val nNum2 = nNum1.dropRight(1)\n\
    \        val xDeno2 = xDeno1\n        val nDeno2 = nDeno1\n        val xNum3 =\
    \ xNum2.dropRight(1)\n        val nNum3 = nNum2.dropRight(1)\n        val xDeno3\
    \ = xDeno2\n        val nDeno3 = nDeno2\n        val xNum4 = xNum3.dropRight(1)\n\
    \        val nNum4 = nNum3.dropRight(1)\n        val xDeno4 = xDeno3\n       \
    \ val nDeno4 = nDeno3\n        val xNum5 = xNum4.dropRight(1)\n        val nNum5\
    \ = nNum4.dropRight(1)\n        val xDeno5 = xDeno4\n        val nDeno5 = nDeno4\n\
    \        val xNum6 = xNum5.dropRight(1)\n        val nNum6 = nNum5.dropRight(1)\n\
    \        val xDeno6 = xDeno5\n        val nDeno6 = nDeno5\n        val xNum7 =\
    \ xNum6.dropRight(1)\n        val nNum7 = nNum6.dropRight(1)\n        val xDeno7\
    \ = xDeno6\n        val nDeno7 = nDeno6\n        val xNum8 = xNum7.dropRight(1)\n\
    \        val nNum8 = nNum7.dropRight(1)\n        val xDeno8 = xDeno7\n       \
    \ val nDeno8 = nDeno7\n        val xNum9 = xNum8.dropRight(1)\n        val nNum9\
    \ = nNum8.dropRight(1)\n        val xDeno9 = xDeno8\n        val nDeno9 = nDeno8\n\
    \        val xNum10 = xNum9.dropRight(1)\n        val nNum10 = nNum9.dropRight(1)\n\
    \        val xDeno10 = xDeno9\n        val nDeno10 = nDeno9\n        val xNum11\
    \ = xNum10.dropRight(1)\n        val ", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        if(xNum.head != 0 && nNum.head\
    \ != 0) {\n            if(xNum.head < nNum.head) {\n                if(xNum.head\
    \ == 0) {\n                    if(nNum.head == 0) {\n                        true\n\
    \                    } else {\n                        false\n               \
    \     }\n                } else {\n                    false\n               \
    \ }\n            } else {\n                false\n            }\n        } else\
    \ {\n            false\n        }", "        val xNum = x.split(\"/\")\n     \
    \   val nNum = n.split(\"/\")\n        val xNum1 = xNum(0)\n        val nNum1\
    \ = nNum(0)\n        val xNum2 = xNum(1)\n        val nNum2 = nNum(1)\n      \
    \  val xNum3 = xNum2\n        val nNum3 = nNum2\n        val xNum4 = xNum3\n \
    \       val nNum4 = nNum3\n        val xNum5 = xNum4\n        val nNum5 = nNum4\n\
    \        val xNum6 = xNum5\n        val nNum6 = nNum5\n        val xNum7 = xNum6\n\
    \        val nNum7 = nNum6\n        val xNum8 = xNum7\n        val nNum8 = nNum7\n\
    \        val xNum9 = xNum8\n        val nNum9 = nNum8\n        val xNum10 = xNum9\n\
    \        val nNum10 = nNum9\n        val xNum11 = xNum10\n        val nNum11 =\
    \ nNum10\n        val xNum12 = xNum11\n        val nNum12 = nNum11\n        val\
    \ xNum13 = xNum12\n        val nNum13 = nNum12\n        val xNum14 = xNum13\n\
    \        val nNum14 = nNum13\n        val xNum15 = xNum14\n        val nNum15\
    \ = nNum14\n        val xNum16 = xNum15\n        val nNum16 = nNum15\n       \
    \ val xNum17 = xNum16\n        val nNum17 = nNum16\n        val xNum18 = xNum17\n\
    \        val nNum18 = nNum17\n        val xNum19 = xNum18\n        val nNum19\
    \ = nNum18\n        val xNum20 = xNum19\n        val nNum20 = nNum19\n       \
    \ val xNum21 = xNum20\n        val nNum21 = nNum20\n        val xNum22 = xNum21\n\
    \        val nNum22 = nNum21\n        val xNum23 = xNum22\n        val nNum23\
    \ = nNum22\n        val xNum24 = xNum23\n        val nNum24 = nNum23\n       \
    \ val xNum25 = xNum24\n        val nNum25 = nNum24\n        val xNum26 = xNum25\n\
    \        val nNum26 = nNum25\n        val xNum27 = xNum26\n        val nNum27\
    \ = nNum26\n        val xNum28 = xNum27", "        val nums = x.split(\"/\")\n\
    \        val dens = n.split(\"/\")\n        val numsLength = nums.length\n   \
    \     val densLength = dens.length\n        val numsSum = nums.sum.toInt\n   \
    \     val densSum = dens.sum.toInt\n        val numsSumInt = numsSum.toInt\n \
    \       val densSumInt = densSum.toInt\n        val numsSumFraction = numsSumInt\
    \ / densSumInt\n        val densSumFraction = densSumInt / numsSumInt\n      \
    \  val numsSumFractionInt = numsSumFraction.toInt\n        val densSumFractionInt\
    \ = densSumFraction.toInt\n        val numsSumFractionFraction = numsSumFractionInt\
    \ / densSumFractionInt\n        val densSumFractionFraction = densSumFractionInt\
    \ / numsSumFractionInt\n        val numsSumFractionFractionInt = numsSumFractionFraction.toInt\n\
    \        val densSumFractionFractionInt = densSumFractionFraction.toInt\n    \
    \    val numsSumFractionFractionFraction = numsSumFractionFractionInt / densSumFractionFractionInt\n\
    \        val densSumFractionFractionFraction = densSumFractionFractionInt / numsSumFractionFractionInt\n\
    \        val numsSumFractionFractionFractionInt = numsSumFractionFractionFraction.toInt\n\
    \        val densSumFractionFractionFractionInt = densSumFractionFractionFraction.toInt\n\
    \        val numsSumFractionFractionFractionFraction = numsSumFractionFractionFractionInt\
    \ / densSumFractionFractionFractionInt\n        val densSumFractionFractionFractionFraction\
    \ = densSumFractionFractionFractionInt / numsSumFractionFractionFractionInt\n\
    \        val numsSumFractionFractionFractionFractionInt = numsSumFractionFractionFractionFraction.toInt\n\
    \        val densSumFractionFractionFractionFractionInt = densSumFractionFractionFractionFraction.toInt\n\
    \        val numsSumFractionFractionFractionFractionFraction = numsSumFractionFractionFractionFractionInt\
    \ / densSumFractionFractionFractionFractionInt\n        val densSumFractionFractionFractionFractionFraction\
    \ = densSumFractionFractionFractionFractionInt / numsSumFractionFractionFractionFractionFractionInt\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionInt = numsSumFractionFractionFractionFractionFraction.toInt\n\
    \        val densSumFractionFractionFractionFractionFractionFractionInt = densSumFractionFractionFractionFractionFraction.toInt\n\
    \        val numsSumFractionFractionFractionFraction", "        val xNum = x.split(\"\
    /\").toInt\n        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        val xNum1 = xNum.dropRight(1)\n      \
    \  val nNum1 = nNum.dropRight(1)\n        val xDeno1 = xDeno\n        val nDeno1\
    \ = nDeno\n        val xNum2 = xNum1.dropRight(1)\n        val nNum2 = nNum1.dropRight(1)\n\
    \        val xDeno2 = xDeno1\n        val nDeno2 = nDeno1\n        val xNum3 =\
    \ xNum2.dropRight(1)\n        val nNum3 = nNum2.dropRight(1)\n        val xDeno3\
    \ = xDeno2\n        val nDeno3 = nDeno2\n        val xNum4 = xNum3.dropRight(1)\n\
    \        val nNum4 = nNum3.dropRight(1)\n        val xDeno4 = xDeno3\n       \
    \ val nDeno4 = nDeno3\n        val xNum5 = xNum4.dropRight(1)\n        val nNum5\
    \ = nNum4.dropRight(1)\n        val xDeno5 = xDeno4\n        val nDeno5 = nDeno4\n\
    \        val xNum6 = xNum5.dropRight(1)\n        val nNum6 = nNum5.dropRight(1)\n\
    \        val xDeno6 = xDeno5\n        val nDeno6 = nDeno5\n        val xNum7 =\
    \ xNum6.dropRight(1)\n        val nNum7 = nNum6.dropRight(1)\n        val xDeno7\
    \ = xDeno6\n        val nDeno7 = nDeno6\n        val xNum8 = xNum7.dropRight(1)\n\
    \        val nNum8 = nNum7.dropRight(1)\n        val xDeno8 = xDeno7\n       \
    \ val nDeno8 = nDeno7\n        val xNum9 = xNum8.dropRight(1)\n        val nNum9\
    \ = nNum8.dropRight(1)\n        val xDeno9 = xDeno8\n        val nDeno9 = nDeno8\n\
    \        val xNum10 = xNum9.dropRight(1)\n        val nNum10 = nNum9.dropRight(1)\n\
    \        val xDeno10 = xDeno9\n        val nDeno10 = nDeno9\n        val xNum11\
    \ = xNum10.dropRight(1)\n        val ", "        val xNum = x.split(\"/\")\n \
    \       val nNum = n.split(\"/\")\n        if(xNum.length != nNum.length) false\
    \ else xNum.zip(nNum).forall { case (x, n) => x.toInt == n.toInt }", "       \
    \ val x = x.split(\"/\")\n        val n = n.split(\"/\")\n        val numerator\
    \ = x.head.toInt\n        val denominator = n.head.toInt\n        val wholeNumber\
    \ = numerator/denominator\n        val fraction = numerator%denominator\n    \
    \    fraction == 0 && wholeNumber == numerator", "        val fraction = x.split(\"\
    /\").map(_.toInt)\n        val numerator = fraction(0)\n        val denominator\
    \ = fraction(1)\n        val numeratorIsWhole = numerator == numerator.toInt\n\
    \        val denominatorIsWhole = denominator == denominator.toInt\n        val\
    \ numeratorIsNegative = numerator < 0\n        val denominatorIsNegative = denominator\
    \ < 0\n        val numeratorIsPositive = numerator > 0\n        val denominatorIsPositive\
    \ = denominator > 0\n        val numeratorIsZero = numerator == 0\n        val\
    \ denominatorIsZero = denominator == 0\n        val numeratorIsNegativeZero =\
    \ numerator < 0 && numerator == 0\n        val denominatorIsNegativeZero = denominator\
    \ < 0 && denominator == 0\n        val numeratorIsPositiveZero = numerator > 0\
    \ && numerator == 0\n        val denominatorIsPositiveZero = denominator > 0 &&\
    \ denominator == 0\n        val numeratorIsNegativeZero = numerator < 0 && numerator\
    \ == 0\n        val denominatorIsNegativeZero = denominator < 0 && denominator\
    \ == 0\n        val numeratorIsPositiveZero = numerator > 0 && numerator == 0\n\
    \        val denominatorIsPositiveZero = denominator > 0 && denominator == 0\n\
    \        val numeratorIsNegativeZero = numerator < 0 && numerator == 0\n     \
    \   val denominatorIsNegativeZero = denominator < 0 && denominator == 0\n    \
    \    val numeratorIsPositiveZero = numerator > 0 && numerator == 0\n        val\
    \ denominatorIsPositiveZero = denominator > 0 && denominator == 0\n        val\
    \ numeratorIsNegativeZero = numerator < 0 && numerator == 0\n        val denominatorIsNegativeZero\
    \ = denominator < 0 && denominator == 0\n        val numeratorIsPositiveZero =\
    \ numerator > 0 && numerator == 0\n        val denominatorIsPositiveZero = denominator\
    \ > 0 && denominator == 0\n        val numeratorIsNegativeZero = numerator < 0\
    \ && numerator == 0\n        val denominatorIsNegativeZero = denominator < 0 &&\
    \ denominator == 0\n        val numeratorIsPositiveZero = numerator > 0 && numerator\
    \ == 0\n        val denominatorIsPositiveZero = denominator > 0 && denominator\
    \ == 0\n        val numeratorIsNegativeZero = numerator < 0 && numerator == 0\n\
    \        val denominatorIsNegativeZero = denominator < 0 && denominator == 0\n\
    \        val numeratorIsPositiveZero = numerator > 0 && numerator == 0\n     \
    \   val denominatorIsPositiveZero = ", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n    \
    \    val nDeno = nNum.last\n        val xNum1 = xNum.dropRight(1)\n        val\
    \ nNum1 = nNum.dropRight(1)\n        val xDeno1 = xDeno\n        val nDeno1 =\
    \ nDeno\n        val xNum2 = xNum1.dropRight(1)\n        val nNum2 = nNum1.dropRight(1)\n\
    \        val xDeno2 = xDeno1\n        val nDeno2 = nDeno1\n        val xNum3 =\
    \ xNum2.dropRight(1)\n        val nNum3 = nNum2.dropRight(1)\n        val xDeno3\
    \ = xDeno2\n        val nDeno3 = nDeno2\n        val xNum4 = xNum3.dropRight(1)\n\
    \        val nNum4 = nNum3.dropRight(1)\n        val xDeno4 = xDeno3\n       \
    \ val nDeno4 = nDeno3\n        val xNum5 = xNum4.dropRight(1)\n        val nNum5\
    \ = nNum4.dropRight(1)\n        val xDeno5 = xDeno4\n        val nDeno5 = nDeno4\n\
    \        val xNum6 = xNum5.dropRight(1)\n        val nNum6 = nNum5.dropRight(1)\n\
    \        val xDeno6 = xDeno5\n        val nDeno6 = nDeno5\n        val xNum7 =\
    \ xNum6.dropRight(1)\n        val nNum7 = nNum6.dropRight(1)\n        val xDeno7\
    \ = xDeno6\n        val nDeno7 = nDeno6\n        val xNum8 = xNum7.dropRight(1)\n\
    \        val nNum8 = nNum7.dropRight(1)\n        val xDeno8 = xDeno7\n       \
    \ val nDeno8 = nDeno7\n        val xNum9 = xNum8.dropRight(1)\n        val nNum9\
    \ = nNum8.dropRight(1)\n        val xDeno9 = xDeno8\n        val nDeno9 = nDeno8\n\
    \        val xNum10 = xNum9.dropRight(1)\n        val nNum10 = nNum9.dropRight(1)\n\
    \        val xDeno10 = xDeno9\n        val nDeno10 = nDeno9\n        val xNum11\
    \ = xNum10.dropRight(1)\n        val ", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n    \
    \    val nDeno = nNum.last\n        val xNum1 = xNum.dropRight(1)\n        val\
    \ nNum1 = nNum.dropRight(1)\n        val xDeno1 = xDeno\n        val nDeno1 =\
    \ nDeno\n        val xNum2 = xNum1.dropRight(1)\n        val nNum2 = nNum1.dropRight(1)\n\
    \        val xDeno2 = xDeno1\n        val nDeno2 = nDeno1\n        val xNum3 =\
    \ xNum2.dropRight(1)\n        val nNum3 = nNum2.dropRight(1)\n        val xDeno3\
    \ = xDeno2\n        val nDeno3 = nDeno2\n        val xNum4 = xNum3.dropRight(1)\n\
    \        val nNum4 = nNum3.dropRight(1)\n        val xDeno4 = xDeno3\n       \
    \ val nDeno4 = nDeno3\n        val xNum5 = xNum4.dropRight(1)\n        val nNum5\
    \ = nNum4.dropRight(1)\n        val xDeno5 = xDeno4\n        val nDeno5 = nDeno4\n\
    \        val xNum6 = xNum5.dropRight(1)\n        val nNum6 = nNum5.dropRight(1)\n\
    \        val xDeno6 = xDeno5\n        val nDeno6 = nDeno5\n        val xNum7 =\
    \ xNum6.dropRight(1)\n        val nNum7 = nNum6.dropRight(1)\n        val xDeno7\
    \ = xDeno6\n        val nDeno7 = nDeno6\n        val xNum8 = xNum7.dropRight(1)\n\
    \        val nNum8 = nNum7.dropRight(1)\n        val xDeno8 = xDeno7\n       \
    \ val nDeno8 = nDeno7\n        val xNum9 = xNum8.dropRight(1)\n        val nNum9\
    \ = nNum8.dropRight(1)\n        val xDeno9 = xDeno8\n        val nDeno9 = nDeno8\n\
    \        val xNum10 = xNum9.dropRight(1)\n        val nNum10 = nNum9.dropRight(1)\n\
    \        val xDeno10 = xDeno9\n        val nDeno10 = nDeno9\n        val xNum11\
    \ = xNum10.dropRight(1)\n        val ", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        if(xNum.product(xNum.last).equals(nNum.product(nNum.last)))\
    \ {\n            true\n        } else {\n            false\n        }", "    \
    \    val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        val xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNumStr\
    \ = xNum.dropRight(1)\n        val nNumStr = nNum.dropRight(1)\n        val xDenoStr\
    \ = xDeno + \"\"\n        val nDenoStr = nDeno + \"\"\n        val xNumStrInt\
    \ = xNumStr.toInt\n        val nNumStrInt = nNumStr.toInt\n        val xDenoStrInt\
    \ = xDenoStr.toInt\n        val nDenoStrInt = nDenoStr.toInt\n        val xDenoStrIntInt\
    \ = xDenoStrInt.toInt\n        val nDenoStrIntInt = nDenoStrInt.toInt\n      \
    \  val xDenoStrIntIntInt = xDenoStrIntInt.toInt\n        val nDenoStrIntIntInt\
    \ = nDenoStrIntInt.toInt\n        val xDenoStrIntIntIntInt = xDenoStrIntIntInt.toInt\n\
    \        val nDenoStrIntIntIntInt = nDenoStrIntIntInt.toInt\n        val xDenoStrIntIntIntIntInt\
    \ = xDenoStrIntIntIntInt.toInt\n        val nDenoStrIntIntIntIntInt = nDenoStrIntIntIntInt.toInt\n\
    \        val xDenoStrIntIntIntIntIntInt = xDenoStrIntIntIntIntInt.toInt\n    \
    \    val nDenoStrIntIntIntIntIntInt = nDenoStrIntIntIntIntInt.toInt\n        val\
    \ xDenoStrIntIntIntIntIntIntInt = xDenoStrIntIntIntIntIntInt.toInt\n        val\
    \ nDenoStrIntIntIntIntIntIntInt = nDenoStrIntIntIntIntIntIntInt.toInt\n      \
    \  val xDenoStrIntIntIntIntIntIntIntInt = xDenoStrIntIntIntIntIntIntIntInt.toInt\n\
    \        val nDenoStrIntIntIntIntIntIntIntInt = nDenoStrIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val xDenoStrIntIntIntIntIntIntIntIntInt = xDenoStrIntIntIntIntIntIntIntInt",
  "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        val xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNum2\
    \ = xNum.init\n        val nNum2 = nNum.init\n        val xDeno2 = xDeno\n   \
    \     val nDeno2 = nDeno\n        val xNum3 = xNum2.init\n        val nNum3 =\
    \ nNum2.init\n        val xDeno3 = xDeno2\n        val nDeno3 = nDeno2\n     \
    \   val xNum4 = xNum3.init\n        val nNum4 = nNum3.init\n        val xDeno4\
    \ = xDeno3\n        val nDeno4 = nDeno3\n        val xNum5 = xNum4.init\n    \
    \    val nNum5 = nNum4.init\n        val xDeno5 = xDeno4\n        val nDeno5 =\
    \ nDeno4\n        val xNum6 = xNum5.init\n        val nNum6 = nNum5.init\n   \
    \     val xDeno6 = xDeno5\n        val nDeno6 = nDeno5\n        val xNum7 = xNum6.init\n\
    \        val nNum7 = nNum6.init\n        val xDeno7 = xDeno6\n        val nDeno7\
    \ = nDeno6\n        val xNum8 = xNum7.init\n        val nNum8 = nNum7.init\n \
    \       val xDeno8 = xDeno7\n        val nDeno8 = nDeno7\n        val xNum9 =\
    \ xNum8.init\n        val nNum9 = nNum8.init\n        val xDeno9 = xDeno8\n  \
    \      val nDeno9 = nDeno8\n        val xNum10 = xNum9.init\n        val nNum10\
    \ = nNum9.init\n        val xDeno10 = xDeno9\n        val nDeno10 = nDeno9\n \
    \       val xNum11 = xNum10.init\n        val nNum11 = nNum10.init\n        val\
    \ xDeno11 = xDeno10\n        val nDeno11 = nDeno10\n        val xNum12 = xNum11.init\n\
    \        val nNum12 = nNum11.init\n        val xDeno12 = xDeno11\n        val\
    \ nDeno12 = nDeno11\n        val xNum13 = xNum12.init\n        val ", "      \
    \  val nums = x.split(\"/\")\n        val dens = n.split(\"/\")\n        val numsLength\
    \ = nums.length\n        val densLength = dens.length\n        val numsSum = nums.sum.toInt\n\
    \        val densSum = dens.sum.toInt\n        val numsDiff = numsSum - densSum\n\
    \        val numsDiffAbs = Math.abs(numsDiff)\n        val densDiffAbs = Math.abs(densSum\
    \ - numsSum)\n        val numsDiffAbsLessThanOne = numsDiffAbs < 1\n        val\
    \ densDiffAbsLessThanOne = densDiffAbs < 1\n        val numsDiffLessThanOne =\
    \ numsDiff < 1\n        val densDiffLessThanOne = densDiff < 1\n        val numsDiffLessThanOneOrEqualToOne\
    \ = numsDiffLessThanOne || numsDiffAbsLessThanOne\n        val densDiffLessThanOneOrEqualToOne\
    \ = densDiffLessThanOne || densDiffAbsLessThanOne\n        val numsDiffLessThanOneOrEqualToTwo\
    \ = numsDiffLessThanOne || numsDiffAbsLessThanOneOrEqualToOne\n        val densDiffLessThanOneOrEqualToTwo\
    \ = densDiffLessThanOne || densDiffAbsLessThanOneOrEqualToOne\n        val numsDiffLessThanTwo\
    \ = numsDiffLessThanOne || numsDiffAbsLessThanOneOrEqualToTwo\n        val densDiffLessThanTwo\
    \ = densDiffLessThanOne || densDiffAbsLessThanOneOrEqualToTwo\n        val numsDiffLessThanTwoOrEqualToOne\
    \ = numsDiffLessThanTwo || numsDiffAbsLessThanTwo\n        val densDiffLessThanTwoOrEqualToOne\
    \ = densDiffLessThanTwo || densDiffAbsLessThanTwo\n        val numsDiffLessThanTwoOrEqualToTwo\
    \ = numsDiffLessThanTwo || numsDiffAbsLessThanTwoOrEqualToOne\n        val densDiffLessThanTwoOrEqualToTwo\
    \ = densDiffLessThanTwo || densDiffAbsLessThanTwoOrEqualToOne\n        val numsDiffLessThanTwoOrEqualToThree\
    \ = numsDiffLessThanTwo || numsDiffAbsLessThanTwoOrEqualToTwo\n        val densDiffLessThanTwoOr",
  "        val x = x.split(\"/\").map(_.toInt)\n        val n = n.split(\"/\").map(_.toInt)\n\
    \        val x0 = x(0)\n        val n0 = n(0)\n        val x1 = x(1)\n       \
    \ val n1 = n(1)\n        val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n\
    \        val xd = x(0) * x(1)\n        val nd = n(0) * n(1)\n        val xn =\
    \ x(0) + x(1)\n        val nn = n(0) + n(1)\n        val xd = x(0) * x(1)\n  \
    \      val nd = n(0) * n(1)\n        val xn = x(0) + x(1)\n        val nn = n(0)\
    \ + n(1)\n        val xd = x(0) * x(1)\n        val nd = n(0) * n(1)\n       \
    \ val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n        val xd = x(0) *\
    \ x(1)\n        val nd = n(0) * n(1)\n        val xn = x(0) + x(1)\n        val\
    \ nn = n(0) + n(1)\n        val xd = x(0) * x(1)\n        val nd = n(0) * n(1)\n\
    \        val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n        val xd =\
    \ x(0) * x(1)\n        val nd = n(0) * n(1)\n        val xn = x(0) + x(1)\n  \
    \      val nn = n(0) + n(1)\n        val xd = x(0) * x(1)\n        val nd = n(0)\
    \ * n(1)\n        val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n       \
    \ val xd = x(0) * x(1)\n        val nd = n(0) * n(1)\n        val xn = x(0) +\
    \ x(1)\n        val nn = n(0) + n(1)\n        val xd = x(0) * x(1)\n        val\
    \ nd = n(0) * n(1)\n        val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n\
    \        val xd = x(0) * x(1)\n        val nd = n(0) * n(1)\n        val xn =\
    \ x(0) + x(1)\n        val nn = n(0) + n(1)\n        val xd = x(0) * x(1)\n  \
    \      val nd = n(0) * n(1)\n        val xn = x(0) + x(1)\n        val nn = n(0)\
    \ + n(1)", "        val nums = x.split(\"/\")\n        val dens = n.split(\"/\"\
    )\n        val numsLength = nums.length\n        val densLength = dens.length\n\
    \        if(numsLength != densLength)\n            return false\n        val numsSum\
    \ = nums.foldLeft(0)(_ + _)\n        val densSum = dens.foldLeft(0)(_ + _)\n \
    \       if(numsSum == densSum)\n            return true\n        else\n      \
    \      return false", "        val xNum = x.split(\"/\").toInt\n        val nNum\
    \ = n.split(\"/\").toInt\n        if(xNum.product(xNum) == nNum.product(nNum))\
    \ {\n            return true\n        }\n        return false", "        val xNum\
    \ = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n        val\
    \ xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNum1 = xNum.init\n\
    \        val nNum1 = nNum.init\n        val xDeno1 = xDeno\n        val nDeno1\
    \ = nDeno\n        val xNum2 = xNum.tail\n        val nNum2 = nNum.tail\n    \
    \    val xDeno2 = xDeno\n        val nDeno2 = nDeno\n        val xNum3 = xNum.init\n\
    \        val nNum3 = nNum.init\n        val xDeno3 = xDeno\n        val nDeno3\
    \ = nDeno\n        val xNum4 = xNum.tail\n        val nNum4 = nNum.tail\n    \
    \    val xDeno4 = xDeno\n        val nDeno4 = nDeno\n        val xNum5 = xNum.init\n\
    \        val nNum5 = nNum.init\n        val xDeno5 = xDeno\n        val nDeno5\
    \ = nDeno\n        val xNum6 = xNum.tail\n        val nNum6 = nNum.tail\n    \
    \    val xDeno6 = xDeno\n        val nDeno6 = nDeno\n        val xNum7 = xNum.init\n\
    \        val nNum7 = nNum.init\n        val xDeno7 = xDeno\n        val nDeno7\
    \ = nDeno\n        val xNum8 = xNum.tail\n        val nNum8 = nNum.tail\n    \
    \    val xDeno8 = xDeno\n        val nDeno8 = nDeno\n        val xNum9 = xNum.init\n\
    \        val nNum9 = nNum.init\n        val xDeno9 = xDeno\n        val nDeno9\
    \ = nDeno\n        val xNum10 = xNum.tail\n        val nNum10 = nNum.tail\n  \
    \      val xDeno10 = xDeno\n        val nDeno10 = nDeno\n        val xNum11 =\
    \ xNum.init\n        val nNum11 = nNum.init\n        val xDeno11 = xDeno\n   \
    \     val nDeno11 = nDeno\n        val xNum12 = xNum.tail\n        val nNum12\
    \ = nNum.tail\n        val xDeno12 = xDeno\n        val ", "        val nums =\
    \ x.split(\"/\")\n        val dens = n.split(\"/\")\n        val numsLength =\
    \ nums.length\n        val densLength = dens.length\n        val numsSum = nums.sum\n\
    \        val densSum = dens.sum\n        val numsSumInv = numsSum / densSum\n\
    \        val numsSumInv = numsSumInv * densSum\n        val numsSumInv2 = numsSumInv\
    \ * numsSumInv\n        val densSumInv = densSum / numsSum\n        val densSumInv\
    \ = densSumInv * numsSumInv\n        val numsSumInv3 = numsSumInv * numsSumInv\
    \ * numsSumInv\n        val densSumInv2 = densSumInv * densSumInv\n        val\
    \ densSumInv3 = densSumInv * densSumInv * densSumInv\n        val numsSumInv4\
    \ = numsSumInv * numsSumInv * numsSumInv * numsSumInv\n        val densSumInv4\
    \ = densSumInv * densSumInv * densSumInv * densSumInv\n        val numsSumInv5\
    \ = numsSumInv * numsSumInv * numsSumInv * numsSumInv * numsSumInv * numsSumInv\n\
    \        val densSumInv5 = densSumInv * densSumInv * densSumInv * densSumInv *\
    \ densSumInv * densSumInv * densSumInv\n        val numsSumInv6 = numsSumInv *\
    \ numsSumInv * numsSumInv * numsSumInv * numsSumInv * numsSumInv * numsSumInv\
    \ * numsSumInv\n        val densSumInv6 = densSumInv * densSumInv * densSumInv\
    \ * densSumInv * densSumInv * densSumInv * densSumInv * densSumInv * densSumInv\n\
    \        val numsSumInv7 = numsSumInv * numsSumInv * numsSumInv * numsSumInv *\
    \ numsSumInv * numsSumInv * numsSumInv * numsSumInv * numsSumInv * numsSumInv\n\
    \        val densSumInv7 = densSumInv * densSumInv * densSumInv * densSumInv *\
    \ densSumInv * ", "        val xNum = x.split(\"/\").toInt\n        val nNum =\
    \ n.split(\"/\").toInt\n        if(xNum.product(xNum) == nNum.product(nNum) &&\
    \ xNum.product(xNum) > 0 && nNum.product(nNum) > 0){\n            return true\n\
    \        }\n        return false", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n    \
    \    val nDeno = nNum.last\n        if(xDeno == 0 || nDeno == 0) false\n     \
    \   else if(xDeno == nDeno) true\n        else if(xDeno == 0) true\n        else\
    \ if(nDeno == 0) true\n        else if(xNum.last == nNum.last) simplify(x/nNum.last,\
    \ nNum.last)\n        else simplify(x/nDeno, nDeno)", "        val xNum = x.split(\"\
    /\").toInt\n        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        val xNumStr = xNum.dropRight(1).mkString\n\
    \        val nNumStr = nNum.dropRight(1).mkString\n        val xDenoStr = xDeno\
    \ + \"\"\n        val nDenoStr = nDeno + \"\"\n        val xNumStrInt = xNumStr.toInt\n\
    \        val nNumStrInt = nNumStr.toInt\n        val xDenoStrInt = xDenoStr.toInt\n\
    \        val nDenoStrInt = nDenoStr.toInt\n        val xDenoStrIntInt = xDenoStrInt.toInt\n\
    \        val nDenoStrIntInt = nDenoStrInt.toInt\n        val xDenoStrIntIntInt\
    \ = xDenoStrIntInt.toInt\n        val nDenoStrIntIntInt = nDenoStrIntInt.toInt\n\
    \        val xDenoStrIntIntIntInt = xDenoStrIntIntInt.toInt\n        val nDenoStrIntIntIntInt\
    \ = nDenoStrIntIntInt.toInt\n        val xDenoStrIntIntIntIntInt = xDenoStrIntIntIntInt.toInt\n\
    \        val nDenoStrIntIntIntIntInt = nDenoStrIntIntIntInt.toInt\n        val\
    \ xDenoStrIntIntIntIntIntInt = xDenoStrIntIntIntIntInt.toInt\n        val nDenoStrIntIntIntIntIntInt\
    \ = nDenoStrIntIntIntIntInt.toInt\n        val xDenoStrIntIntIntIntIntIntInt =\
    \ xDenoStrIntIntIntIntIntInt.toInt\n        val nDenoStrIntIntIntIntIntIntInt\
    \ = nDenoStrIntIntIntIntIntInt.toInt\n        val xDenoStrIntIntIntIntIntIntIntIntInt\
    \ = xDenoStrIntIntIntIntIntIntIntIntInt.toInt\n        val nDenoStrIntIntIntIntIntIntIntIntInt\
    \ = nDenoStrIntIntIntIntIntIntIntIntInt.toInt\n        val xDenoStrIntIntIntIntIntIntIntIntIntIntInt\
    \ = xD", "        val numer = x.split(\"/\")(0)\n        val denom = x.split(\"\
    /\")(1)\n        val numerator = numer\n        val denominator = denom\n    \
    \    val numeratorInt = numerator.asInstanceOf[Int]\n        val denominatorInt\
    \ = denominator.asInstanceOf[Int]\n        val numeratorDouble = numerator.asInstanceOf[Double]\n\
    \        val denominatorDouble = denominator.asInstanceOf[Double]\n        val\
    \ numeratorInt = numerator.asInstanceOf[Int]\n        val denominatorInt = denominator.asInstanceOf[Int]\n\
    \        val numeratorDouble = numerator.asInstanceOf[Double]\n        val denominatorDouble\
    \ = denominator.asInstanceOf[Double]\n        val numeratorInt = numerator.asInstanceOf[Int]\n\
    \        val denominatorInt = denominator.asInstanceOf[Int]\n        val numeratorDouble\
    \ = numerator.asInstanceOf[Double]\n        val denominatorDouble = denominator.asInstanceOf[Double]\n\
    \        val numeratorInt = numerator.asInstanceOf[Int]\n        val denominatorInt\
    \ = denominator.asInstanceOf[Int]\n        val numeratorDouble = numerator.asInstanceOf[Double]\n\
    \        val denominatorDouble = denominator.asInstanceOf[Double]\n        val\
    \ numeratorInt = numerator.asInstanceOf[Int]\n        val denominatorInt = denominator.asInstanceOf[Int]\n\
    \        val numeratorDouble = numerator.asInstanceOf[Double]\n        val denominatorDouble\
    \ = denominator.asInstanceOf[Double]\n        val numeratorInt = numerator.asInstanceOf[Int]\n\
    \        val denominatorInt = denominator.asInstanceOf[Int]\n        val numeratorDouble\
    \ = numerator.asInstanceOf[Double]\n        val denominatorDouble = denominator.asInstanceOf[Double]\n\
    \        val numeratorInt = numerator.asInstanceOf[Int]\n        val denominatorInt\
    \ = denominator.asInstanceOf[Int]\n        val numeratorDouble = numerator.asInstanceOf[Double]\n\
    \        val denominatorDouble = denominator.asInstanceOf[Double]\n        val\
    \ numeratorInt = numerator.asInstanceOf[Int]\n        val denominatorInt = denominator.asInstanceOf[Int]\n\
    \        val numeratorDouble = numerator.asInstanceOf[Double]\n        val denominatorDouble\
    \ = denominator.asInstanceOf[Double]\n        val numeratorInt = numerator.asInstanceOf[Int]\n\
    \        val denominatorInt = ", "        val fraction = x.split(\"/\").map(_.toInt)\n\
    \        val numerator = fraction(0)\n        val denominator = fraction(1)\n\
    \        val wholeNumber = numerator / denominator\n        val isWholeNumber\
    \ = wholeNumber.toDouble == wholeNumber\n        val isFraction = numerator ==\
    \ denominator\n        val isNegative = numerator < 0\n        val isPositive\
    \ = numerator > 0\n        val isZero = denominator == 0\n        val isNegativeZero\
    \ = denominator < 0\n        val isPositiveZero = denominator > 0\n        val\
    \ isNegativeFraction = numerator < denominator\n        val isPositiveFraction\
    \ = numerator > denominator\n        val isNegativeFractionZero = denominator\
    \ < 0\n        val isPositiveFractionZero = denominator > 0\n        val isNegativeFractionFraction\
    \ = numerator < denominator\n        val isPositiveFractionFraction = numerator\
    \ > denominator\n        val isNegativeFractionFractionZero = denominator < 0\n\
    \        val isPositiveFractionFractionZero = denominator > 0\n        val isNegativeFractionFractionFraction\
    \ = numerator < denominator\n        val isPositiveFractionFractionFraction =\
    \ numerator > denominator\n        val isNegativeFractionFractionFractionZero\
    \ = denominator < 0\n        val isPositiveFractionFractionFractionZero = denominator\
    \ > 0\n        val isNegativeFractionFractionFractionFraction = numerator < denominator\n\
    \        val isPositiveFractionFractionFractionFraction = numerator > denominator\n\
    \        val isNegativeFractionFractionFractionFractionZero = denominator < 0\n\
    \        val isPositiveFractionFractionFractionFractionZero = denominator > 0\n\
    \        val isNegativeFractionFractionFractionFractionFraction = numerator <\
    \ denominator\n        val isPositiveFractionFractionFractionFractionFraction\
    \ = numerator > denominator\n        val isNegativeFractionFractionFractionFractionFractionZero\
    \ = denominator < 0\n        val isPositiveFractionFractionFractionFractionFractionZero\
    \ = denominator > 0\n        val isNegativeFractionFractionFractionFractionFractionFraction\
    \ = numerator < denominator\n        val isPositiveFractionFractionFractionFractionFractionFraction\
    \ = numerator > denominator\n        val isNegativeFractionFractionFractionFractionFractionFractionZero\
    \ = denominator < 0\n        val isPositiveFractionFractionFractionFractionFractionFractionZero\
    \ = denominator > 0\n        val isNegativeFractionFractionFractionFractionFractionFractionFraction\
    \ = numerator < denominator\n        val isPositiveFractionFractionFractionFractionFractionFractionFraction\
    \ = numerator > denominator\n        val isNegativeFractionFractionFractionFractionFractionFractionFractionZero\
    \ = denominator < 0\n        val isPositiveFractionFractionFractionFractionFractionFractionFractionZero\
    \ = denominator ", "        val x = x.split(\"/\").map(_.toInt)\n        val n\
    \ = n.split(\"/\").map(_.toInt)\n        val numerator = x.head\n        val denominator\
    \ = x.last\n        val numerator1 = n.head\n        val denominator1 = n.last\n\
    \        val numerator2 = numerator1 * denominator1\n        val denominator2\
    \ = denominator1 * numerator1\n        val numerator3 = numerator2 * denominator2\n\
    \        val denominator3 = denominator2 * numerator2\n        val numerator4\
    \ = numerator3 * denominator3\n        val denominator4 = denominator3 * numerator3\n\
    \        val numerator5 = numerator4 * denominator4\n        val denominator5\
    \ = denominator4 * numerator4\n        val numerator6 = numerator5 * denominator5\n\
    \        val denominator6 = denominator5 * numerator5\n        val numerator7\
    \ = numerator6 * denominator6\n        val denominator7 = denominator6 * numerator6\n\
    \        val numerator8 = numerator7 * denominator7\n        val denominator8\
    \ = denominator7 * numerator7\n        val numerator9 = numerator8 * denominator8\n\
    \        val denominator9 = denominator8 * numerator8\n        val numerator10\
    \ = numerator9 * denominator9\n        val denominator10 = denominator9 * numerator9\n\
    \        val numerator11 = numerator10 * denominator10\n        val denominator11\
    \ = denominator10 * numerator10\n        val numerator12 = numerator11 * denominator11\n\
    \        val denominator12 = denominator11 * numerator11\n        val numerator13\
    \ = numerator12 * denominator12\n        val denominator13 = denominator12 * numerator12\n\
    \        val numerator14 = numerator13 * denominator13\n        val denominator14\
    \ = denominator13 * numerator13\n        val numerator15 = numerator14 * denominator14\n\
    \        val denominator15 = denominator14 * numerator14\n        val numerator16\
    \ = numerator15 * denominator15\n        val denominator16 = denominator15 * numerator15\n\
    \        val numerator17 = numerator16 * denominator16\n        val denominator17\
    \ = denominator16 * numerator16\n        val numerator18 = numerator17 * denominator17\n\
    \        val denominator18 = denominator17 * numerator17\n        val numerator19\
    \ = numerator18 * denominator18\n        val denominator19 = denominator18 * numerator18\n\
    \        val numerator20 = numerator19 * denominator19\n        val denominator20\
    \ = denominator19 * numerator19\n        val numerator21 = numerator20 * denominator20\n\
    \        val denominator21 = ", "        val xNum = x.split(\"/\")\n        val\
    \ nNum = n.split(\"/\")\n        val xNum1 = xNum(0)\n        val xNum2 = xNum(1)\n\
    \        val nNum1 = nNum(0)\n        val nNum2 = nNum(1)\n        val xNum3 =\
    \ xNum1.toInt\n        val nNum3 = nNum1.toInt\n        val xNum4 = xNum2.toInt\n\
    \        val nNum4 = nNum2.toInt\n        val xNum5 = xNum3.toInt\n        val\
    \ nNum5 = nNum3.toInt\n        val xNum6 = xNum4.toInt\n        val nNum6 = nNum4.toInt\n\
    \        val xNum7 = xNum5.toInt\n        val nNum7 = nNum5.toInt\n        val\
    \ xNum8 = xNum6.toInt\n        val nNum8 = nNum6.toInt\n        val xNum9 = xNum7.toInt\n\
    \        val nNum9 = nNum7.toInt\n        val xNum10 = xNum8.toInt\n        val\
    \ nNum10 = nNum8.toInt\n        val xNum11 = xNum9.toInt\n        val nNum11 =\
    \ nNum9.toInt\n        val xNum12 = xNum10.toInt\n        val nNum12 = nNum10.toInt\n\
    \        val xNum13 = xNum11.toInt\n        val nNum13 = nNum11.toInt\n      \
    \  val xNum14 = xNum12.toInt\n        val nNum14 = nNum12.toInt\n        val xNum15\
    \ = xNum13.toInt\n        val nNum15 = nNum13.toInt\n        val xNum16 = xNum14.toInt\n\
    \        val nNum16 = nNum14.toInt\n        val xNum17 = xNum15.toInt\n      \
    \  val nNum17 = nNum15.toInt\n        val xNum18 = xNum16.toInt\n        val nNum18\
    \ = nNum16.toInt\n        val xNum19 = xNum17.toInt\n        val nNum19 = nNum17.toInt\n\
    \        val xNum20 = xNum18.toInt\n        val nNum20 = nNum18.toInt\n      \
    \  val xNum21 = xNum19.toInt\n        val nNum21 = nNum19.toInt\n        val xNum22\
    \ = xNum20.toInt\n        val nNum22 = nNum20.toInt\n        val xNum23 = xNum21.toInt\n\
    \        val nNum23 = nNum", "        val xNum = x.split(\"/\").toInt\n      \
    \  val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val\
    \ nDeno = nNum.last\n        if(xDeno == 0 || nDeno == 0) false\n        else\
    \ if(xDeno == nDeno) true\n        else if(xNum.last == nNum.last) simplify(x/nNum.last,\
    \ nNum.last)\n        else simplify(x/nDeno, nDeno)", "        val numerator =\
    \ x.split(\"/\")(0)\n        val denominator = x.split(\"/\")(1)\n        val\
    \ numeratorInt = numerator.toInt\n        val denominatorInt = denominator.toInt\n\
    \        val numeratorFraction = numeratorInt / denominatorInt\n        val numeratorFractionFraction\
    \ = numeratorFraction.toDouble\n        val numeratorFractionFractionFractionFraction\
    \ = numeratorFractionFraction.toInt\n        val numeratorFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFraction.toDouble\n        val numeratorFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFraction.toInt\n        val numeratorFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFraction.toDouble\n     \
    \   val numeratorFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val numeratorFractionFraction", "        val numer = x.split(\"/\")(0)\n\
    \        val denom = x.split(\"/\")(1)\n        val numInts = numer.toInt\n  \
    \      val denomInts = denom.toInt\n        val numIntIsWhole = numInts.toDouble\
    \ == numInts\n        val denomIntIsWhole = denomInts.toDouble == denomInts\n\
    \        val numIntIsNonZero = numInts.toDouble > 0\n        val denomIntIsNonZero\
    \ = denomInts.toDouble > 0\n        val numIntIsNegative = numInts.toDouble <\
    \ 0\n        val denomIntIsNegative = denomInts.toDouble < 0\n        val numIntIsPositive\
    \ = numInts.toDouble > 0\n        val denomIntIsPositive = denomInts.toDouble\
    \ > 0\n        val numIntIsNegativeOrZero = numIntIsNegative || numIntIsZero\n\
    \        val denomIntIsNegativeOrZero = denomIntIsNegative || denomIntIsZero\n\
    \        val numIntIsPositiveOrZero = numIntIsPositive || numIntIsZero\n     \
    \   val denomIntIsPositiveOrZero = denomIntIsPositive || denomIntIsZero\n    \
    \    val numIntIsNegativeOrZeroOrZero = numIntIsNegativeOrZero || numIntIsZeroOrZero\n\
    \        val denomIntIsNegativeOrZeroOrZero = denomIntIsNegativeOrZero || denomIntIsZeroOrZero\n\
    \        val numIntIsPositiveOrZeroOrZero = numIntIsPositiveOrZero || numIntIsZeroOrZero\n\
    \        val denomIntIsPositiveOrZeroOrZero = denomIntIsPositiveOrZero || denomIntIsZeroOrZero\n\
    \        val numIntIsNegativeOrZeroOrZeroOrZero = numIntIsNegativeOrZeroOrZero\
    \ || numIntIsZeroOrZeroOrZero\n        val denomIntIsNegativeOrZeroOrZeroOrZero\
    \ = denomIntIsNegativeOrZeroOrZero || denomIntIsZeroOrZeroOrZero\n        val\
    \ numIntIsPositiveOrZeroOrZeroOrZero = numIntIsPositiveOrZeroOrZero || numIntIsZeroOrZeroOrZero\n\
    \        val denomIntIsPositiveOrZeroOrZeroOrZero = denomIntIsPositiveOrZeroOrZero\
    \ || denomIntIsZeroOrZeroOrZero\n        val numIntIsNegativeOrZeroOrZeroOrZeroOrZero\
    \ = numIntIsNegativeOrZeroOrZeroOrZer", "        val numerator = x.split(\"/\"\
    ).map(_.toInt)\n        val denominator = n.split(\"/\").map(_.toInt)\n      \
    \  val numeratorSum = numerator.sum\n        val denominatorSum = denominator.sum\n\
    \        val numeratorProduct = numerator.product\n        val denominatorProduct\
    \ = denominator.product\n        val numeratorProductSum = numeratorProduct.sum\n\
    \        val denominatorProductSum = denominatorProduct.sum\n        val numeratorProductProduct\
    \ = numeratorProduct.product\n        val denominatorProductProduct = denominatorProduct.product\n\
    \        val numeratorProductProductSum = numeratorProductProduct.sum\n      \
    \  val denominatorProductProductSum = denominatorProductProduct.sum\n        val\
    \ numeratorProductProductProduct = numeratorProductProduct.product\n        val\
    \ denominatorProductProductProduct = denominatorProductProduct.product\n     \
    \   val numeratorProductProductProductSum = numeratorProductProductProduct.sum\n\
    \        val denominatorProductProductProductSum = denominatorProductProductProduct.sum\n\
    \        val numeratorProductProductProductProduct = numeratorProductProductProduct.product\n\
    \        val denominatorProductProductProductProduct = denominatorProductProductProduct.product\n\
    \        val numeratorProductProductProductProductSum = numeratorProductProductProductProduct.sum\n\
    \        val denominatorProductProductProductProductSum = denominatorProductProductProductProduct.sum\n\
    \        val numeratorProductProductProductProductProduct = numeratorProductProductProductProduct.product\n\
    \        val denominatorProductProductProductProductProduct = denominatorProductProductProductProduct.product\n\
    \        val numeratorProductProductProductProductProductSum = numeratorProductProductProductProductProduct.sum\n\
    \        val denominatorProductProductProductProductProductSum = denominatorProductProductProductProductProduct.sum\n\
    \        val numeratorProductProductProductProductProductProduct = numeratorProductProductProductProductProduct.product\n\
    \        val denominatorProductProductProductProductProductProduct = denominatorProductProductProductProductProduct.product\n\
    \        val numeratorProductProductProductProductProductSum = numeratorProductProductProductProductProductSum\n\
    \        val denominatorProductProductProductProductProductSum = denominatorProductProductProductProductProductSum\n\
    \        val numeratorProductProductProductProductProductProduct = numeratorProductProductProductProductProductProduct\n\
    \        val denominatorProductProductProductProductProductProduct = denominatorProductProductProductProductProductProduct\n\
    \        val numeratorProductProductProductProductProductProductSum = numeratorProductProductProductProductProductProductSum\n\
    \        val denominatorProductProductProductProductProductProductSum = denominatorProductProductProductProductProductProductSum\n\
    \        val numeratorProductProductProductProductProductProductProduct = numeratorProductProductProductProductProductProductProduct\n\
    \        val denominatorProductProductProduct", "        val xNum = x.split(\"\
    /\").toInt\n        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        val xNum2 = xNum.init\n        val nNum2\
    \ = nNum.init\n        val xDeno2 = xNum2.last\n        val nDeno2 = nNum2.last\n\
    \        val xNum3 = xNum2.init\n        val nNum3 = nNum2.init\n        val xDeno3\
    \ = xNum3.last\n        val nDeno3 = nNum3.last\n        val xNum4 = xNum3.init\n\
    \        val nNum4 = nNum3.init\n        val xDeno4 = xNum4.last\n        val\
    \ nDeno4 = nNum4.last\n        val xNum5 = xNum4.init\n        val nNum5 = nNum4.init\n\
    \        val xDeno5 = xNum5.last\n        val nDeno5 = nNum5.last\n        val\
    \ xNum6 = xNum5.init\n        val nNum6 = nNum5.init\n        val xDeno6 = xNum6.last\n\
    \        val nDeno6 = nNum6.last\n        val xNum7 = xNum6.init\n        val\
    \ nNum7 = nNum6.init\n        val xDeno7 = xNum7.last\n        val nDeno7 = nNum7.last\n\
    \        val xNum8 = xNum7.init\n        val nNum8 = nNum7.init\n        val xDeno8\
    \ = xNum8.last\n        val nDeno8 = nNum8.last\n        val xNum9 = xNum8.init\n\
    \        val nNum9 = nNum8.init\n        val xDeno9 = xNum9.last\n        val\
    \ nDeno9 = nNum9.last\n        val xNum10 = xNum9.init\n        val nNum10 = nNum9.init\n\
    \        val xDeno10 = xNum10.last\n        val nDeno10 = nNum10.last\n      \
    \  val xNum11 = xNum10.init\n        val nNum11 = nNum10.init\n        val xDeno11\
    \ = xNum11.last\n        val nDeno11 = nNum11.last\n        val xNum12 = xNum11.init\n\
    \        val nNum12 = nNum11.init\n        val xDeno12 = xNum12.last\n       \
    \ val nDeno12 = nNum12.last\n        val xNum13 = xNum12.init\n", "        val\
    \ xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n     \
    \   val xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNum1 =\
    \ xNum.init\n        val nNum1 = nNum.init\n        val xDeno1 = xDeno\n     \
    \   val nDeno1 = nDeno\n        val xNum2 = xNum.tail\n        val nNum2 = nNum.tail\n\
    \        val xDeno2 = xDeno\n        val nDeno2 = nDeno\n        val xNum3 = xNum.init\n\
    \        val nNum3 = nNum.init\n        val xDeno3 = xDeno\n        val nDeno3\
    \ = nDeno\n        val xNum4 = xNum.tail\n        val nNum4 = nNum.tail\n    \
    \    val xDeno4 = xDeno\n        val nDeno4 = nDeno\n        val xNum5 = xNum.init\n\
    \        val nNum5 = nNum.init\n        val xDeno5 = xDeno\n        val nDeno5\
    \ = nDeno\n        val xNum6 = xNum.tail\n        val nNum6 = nNum.tail\n    \
    \    val xDeno6 = xDeno\n        val nDeno6 = nDeno\n        val xNum7 = xNum.init\n\
    \        val nNum7 = nNum.init\n        val xDeno7 = xDeno\n        val nDeno7\
    \ = nDeno\n        val xNum8 = xNum.tail\n        val nNum8 = nNum.tail\n    \
    \    val xDeno8 = xDeno\n        val nDeno8 = nDeno\n        val xNum9 = xNum.init\n\
    \        val nNum9 = nNum.init\n        val xDeno9 = xDeno\n        val nDeno9\
    \ = nDeno\n        val xNum10 = xNum.tail\n        val nNum10 = nNum.tail\n  \
    \      val xDeno10 = xDeno\n        val nDeno10 = nDeno\n        val xNum11 =\
    \ xNum.init\n        val nNum11 = nNum.init\n        val xDeno11 = xDeno\n   \
    \     val nDeno11 = nDeno\n        val xNum12 = xNum.tail\n        val nNum12\
    \ = nNum.tail\n        val xDeno12 = xDeno\n        val ", "        val nums =\
    \ x.split(\"/\").map(_.toInt)\n        val denoms = n.split(\"/\").map(_.toInt)\n\
    \        val numsSum = nums.sum\n        val denomsSum = denoms.sum\n        val\
    \ numsSumInv = denoms.map(x => 1 / x).sum\n        val numsSumInv = denoms.map(x\
    \ => 1 / x).sum\n        val numsSumInv = denoms.map(x => 1 / x).sum\n       \
    \ val numsSumInv = denoms.map(x => 1 / x).sum\n        val numsSumInv = denoms.map(x\
    \ => 1 / x).sum\n        val numsSumInv = denoms.map(x => 1 / x).sum\n       \
    \ val numsSumInv = denoms.map(x => 1 / x).sum\n        val numsSumInv = denoms.map(x\
    \ => 1 / x).sum\n        val numsSumInv = denoms.map(x => 1 / x).sum\n       \
    \ val numsSumInv = denoms.map(x => 1 / x).sum\n        val numsSumInv = denoms.map(x\
    \ => 1 / x).sum\n        val numsSumInv = denoms.map(x => 1 / x).sum\n       \
    \ val numsSumInv = denoms.map(x => 1 / x).sum\n        val numsSumInv = denoms.map(x\
    \ => 1 / x).sum\n        val numsSumInv = denoms.map(x => 1 / x).sum\n       \
    \ val numsSumInv = denoms.map(x => 1 / x).sum\n        val numsSumInv = denoms.map(x\
    \ => 1 / x).sum\n        val numsSumInv = denoms.map(x => 1 / x).sum\n       \
    \ val numsSumInv = denoms.map(x => 1 / x).sum\n        val numsSumInv = denoms.map(x\
    \ => 1 / x).sum\n        val numsSumInv = denoms.map(x => 1 / x).sum\n       \
    \ val numsSumInv = denoms.map(x => 1 / x).sum\n        val numsSumInv = denoms.map(x\
    \ => 1 / x).sum\n        val numsSumInv = denoms.map(x => 1 / x).sum\n       \
    \ val numsSumInv = denoms.map(x => 1 / x).sum\n        val numsSumInv = denoms.map(x\
    \ => 1 / x).sum\n        val numsSumInv = denoms.map(x => 1 / x).sum\n       \
    \ val numsSumInv = denoms.map(x => 1 / x).sum\n        val numsSumInv = denoms.map(x\
    \ => 1 / x).sum\n", "        val xNum = x.split(\"/\").toInt\n        val nNum\
    \ = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n\
    \        if(xNum.last == 0 || nNum.last == 0) false\n        else if(xDeno ==\
    \ nDeno) simplify(x.replaceFirst(xDeno, \"\"), n.replaceFirst(nDeno, \"\"))\n\
    \        else simplify(x.replaceFirst(xDeno, \"\"), n.replaceFirst(nDeno, \"\"\
    )) && simplify(x.replaceFirst(xDeno, \"\"), n.replaceFirst(nDeno, \"\"))", " \
    \       val nums = x.split(\"/\")\n        val dens = n.split(\"/\")\n       \
    \ val numsLength = nums.length\n        val densLength = dens.length\n       \
    \ if (numsLength != densLength) {\n            return false\n        }\n     \
    \   var i = 0\n        var j = 0\n        var k = 0\n        var sum = 0\n   \
    \     var product = 1\n        while (i < numsLength) {\n            val num =\
    \ nums(i)\n            val den = dens(j)\n            val numInt = Integer.parseInt(num)\n\
    \            val denInt = Integer.parseInt(den)\n            sum += numInt * denInt\n\
    \            i += 1\n            j += 1\n        }\n        while (j < densLength)\
    \ {\n            val den = dens(j)\n            val denInt = Integer.parseInt(den)\n\
    \            product *= denInt\n            j += 1\n        }\n        val result\
    \ = sum / product\n        if (result == Integer.parseInt(x)) {\n            return\
    \ true\n        }\n        return false", "        val xNum = x.split(\"/\").map(_.toInt)\n\
    \        val nNum = n.split(\"/\").map(_.toInt)\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        if(xDeno == 0 || nDeno == 0) false\n \
    \       else if(xDeno == nDeno) true\n        else if(xDeno == nDeno + 1) true\n\
    \        else if(xDeno == nDeno + 2) true\n        else if(xDeno == nDeno + 3)\
    \ true\n        else if(xDeno == nDeno + 4) true\n        else if(xDeno == nDeno\
    \ + 5) true\n        else if(xDeno == nDeno + 6) true\n        else if(xDeno ==\
    \ nDeno + 7) true\n        else if(xDeno == nDeno + 8) true\n        else if(xDeno\
    \ == nDeno + 9) true\n        else if(xDeno == nDeno + 10) true\n        else\
    \ if(xDeno == nDeno + 11) true\n        else if(xDeno == nDeno + 12) true\n  \
    \      else if(xDeno == nDeno + 13) true\n        else if(xDeno == nDeno + 14)\
    \ true\n        else if(xDeno == nDeno + 15) true\n        else if(xDeno == nDeno\
    \ + 16) true\n        else if(xDeno == nDeno + 17) true\n        else if(xDeno\
    \ == nDeno + 18) true\n        else if(xDeno == nDeno + 19) true\n        else\
    \ if(xDeno == nDeno + 20) true\n        else if(xDeno == nDeno + 21) true\n  \
    \      else if(xDeno == nDeno + 22) true\n        else if(xDeno == nDeno + 23)\
    \ true\n        else if(xDeno == nDeno + 24) true\n        else if(xDeno == nDeno\
    \ + 25) true\n        else if(xDeno == nDeno + 26) true\n        else if(xDeno\
    \ == nDeno + 27) true\n        else if(xDeno == nDeno + 28) true\n        else\
    \ if(xDeno == nDeno + 29) true\n        else if(xDeno == nDeno + 30) true\n  \
    \      else if(xDeno == nDeno + 31) true\n        else if(xDeno == nDeno + 32) ",
  "        val nums = x.split(\"/\")\n        val dens = n.split(\"/\")\n        val\
    \ numsLength = nums.length\n        val densLength = dens.length\n        if(numsLength\
    \ != densLength){\n            return false\n        }\n        val numsSet =\
    \ nums.toSet\n        val densSet = dens.toSet\n        if(numsSet.size == densSet.size){\n\
    \            val numsSetIterator = numsSet.iterator\n            val densSetIterator\
    \ = densSet.iterator\n            while(numsSetIterator.hasNext && densSetIterator.hasNext){\n\
    \                val numsSetElement = numsSetIterator.next()\n               \
    \ val densSetElement = densSetIterator.next()\n                if(numsSetElement\
    \ == densSetElement){\n                    numsSetIterator.next()\n          \
    \          densSetIterator.next()\n                }\n            }\n        }\n\
    \        true", "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"\
    /\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n   \
    \     (xNum.head * nNum.head == xDeno) && (xNum.tail.head * nNum.tail.head ==\
    \ nDeno)", "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"\
    /\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n   \
    \     val xNum2 = xNum.init\n        val nNum2 = nNum.init\n        val xDeno2\
    \ = xDeno * xNum2\n        val nDeno2 = nDeno * nNum2\n        val xNum3 = xNum2.toInt\n\
    \        val nNum3 = nNum2.toInt\n        val xDeno3 = xDeno2 * xNum3\n      \
    \  val nDeno3 = nDeno2 * nNum3\n        val xNum4 = xNum3.toInt\n        val nNum4\
    \ = nNum3.toInt\n        val xDeno4 = xDeno3 * xNum4\n        val nDeno4 = nDeno3\
    \ * nNum4\n        val xNum5 = xNum4.toInt\n        val nNum5 = nNum4.toInt\n\
    \        val xDeno5 = xDeno4 * xNum5\n        val nDeno5 = nDeno4 * nNum5\n  \
    \      val xNum6 = xNum5.toInt\n        val nNum6 = nNum5.toInt\n        val xDeno6\
    \ = xDeno5 * xNum6\n        val nDeno6 = nDeno5 * nNum6\n        val xNum7 = xNum6.toInt\n\
    \        val nNum7 = nNum6.toInt\n        val xDeno7 = xDeno6 * xNum7\n      \
    \  val nDeno7 = nDeno6 * nNum7\n        val xNum8 = xNum7.toInt\n        val nNum8\
    \ = nNum7.toInt\n        val xDeno8 = xDeno7 * xNum8\n        val nDeno8 = nDeno7\
    \ * nNum8\n        val xNum9 = xNum8.toInt\n        val nNum9 = nNum8.toInt\n\
    \        val xDeno9 = xDeno8 * xNum9\n        val nDeno9 = nDeno8 * nNum9\n  \
    \      val xNum10 = xNum9.toInt\n        val nNum10 = nNum9.toInt\n        val\
    \ xDeno10 = xDeno9 * xNum10\n        val nDeno10 = nDeno9 * nNum10\n        val\
    \ xNum11 = xNum10.toInt\n        val nNum11 = nNum10.to", "        val nums =\
    \ x.split(\"/\")\n        val denoms = n.split(\"/\")\n        val numsLength\
    \ = nums.length\n        val denomsLength = denoms.length\n        val numsSum\
    \ = numsLength * nums(0)\n        val denomsSum = denomsLength * denoms(0)\n \
    \       val numsDiff = numsSum - denomsSum\n        val denomsDiff = denomsSum\
    \ - numsSum\n        val numsDiff2 = numsDiff / denomsDiff\n        val denomsDiff2\
    \ = denomsDiff / numsDiff\n        val numsDiff3 = numsDiff / denomsDiff2\n  \
    \      val denomsDiff3 = denomsDiff / numsDiff2\n        val numsDiff4 = numsDiff\
    \ / denomsDiff3\n        val denomsDiff4 = denomsDiff / numsDiff3\n        val\
    \ numsDiff5 = numsDiff / denomsDiff4\n        val denomsDiff5 = denomsDiff / numsDiff4\n\
    \        val numsDiff6 = numsDiff / denomsDiff5\n        val denomsDiff6 = denomsDiff\
    \ / numsDiff5\n        val numsDiff7 = numsDiff / denomsDiff6\n        val denomsDiff7\
    \ = denomsDiff / numsDiff6\n        val numsDiff8 = numsDiff / denomsDiff7\n \
    \       val denomsDiff8 = denomsDiff / numsDiff7\n        val numsDiff9 = numsDiff\
    \ / denomsDiff8\n        val denomsDiff9 = denomsDiff / numsDiff8\n        val\
    \ numsDiff10 = numsDiff / denomsDiff9\n        val denomsDiff10 = denomsDiff /\
    \ numsDiff9\n        val numsDiff11 = numsDiff / denomsDiff10\n        val denomsDiff11\
    \ = denomsDiff / numsDiff10\n        val numsDiff12 = numsDiff / denomsDiff11\n\
    \        val denomsDiff12 = denomsDiff / numsDiff11\n        val numsDiff13 =\
    \ numsDiff / denomsDiff12\n        val denomsDiff13 = denomsDiff / numsDiff12\n\
    \        val numsDiff14 = numsDiff / denomsDiff13\n        val denomsDiff14 =\
    \ denomsDiff / numsDiff13\n        val numsDiff15 = numsDiff / denomsDiff14\n\
    \        val denomsDiff", "        val numer = x.split(\"/\")(0)\n        val\
    \ denom = x.split(\"/\")(1)\n        val numInt: Int = numer.toInt\n        val\
    \ denomInt: Int = denom.toInt\n        if (numInt == 0 || denomInt == 0) {\n \
    \           return false\n        }\n        if (numInt == denomInt) {\n     \
    \       return true\n        }\n        if (numInt == denomInt && numInt == numer.toInt)\
    \ {\n            return true\n        }\n        if (numInt == denomInt && numInt\
    \ == numer.toInt && denom.toInt % numInt == 0) {\n            return true\n  \
    \      }\n        if (numInt == denomInt && numInt == numer.toInt && denom.toInt\
    \ % numInt != 0) {\n            return false\n        }\n        if (numInt ==\
    \ denomInt && numInt == numer.toInt && denom.toInt % numInt == 0) {\n        \
    \    return true\n        }\n        if (numInt == denomInt && numInt == numer.toInt\
    \ && denom.toInt % numInt != 0) {\n            return false\n        }\n     \
    \   if (numInt == denomInt && numInt == numer.toInt && denom.toInt % numInt ==\
    \ 0) {\n            return true\n        }\n        if (numInt == denomInt &&\
    \ numInt == numer.toInt && denom.toInt % numInt != 0) {\n            return false\n\
    \        }\n        if (numInt == denomInt && numInt == numer.toInt && denom.toInt\
    \ % numInt == 0) {\n            return true\n        }\n        if (numInt ==\
    \ denomInt && numInt == numer.toInt && denom.toInt % numInt != 0) {\n        \
    \    return false\n        }\n        if (numInt == denomInt && numInt == numer.toInt\
    \ && denom.toInt % numInt == 0) {\n            return true\n        }\n      \
    \  if (numInt == denomInt && numInt == numer.toInt && denom.toInt % numInt !=\
    \ 0) {\n            return false\n        }\n        if (numInt == denomInt &&\
    \ numInt == numer.toInt && denom.toInt % numInt == 0) {\n            return true\n\
    \        }\n        if (numInt == denomInt && numInt == numer.toInt && denom.toInt\
    \ % numInt != 0) {\n            return false\n        }\n        if (numInt ==\
    \ denomInt && numInt == numer.toInt && denom.toInt % numInt == 0) {\n        \
    \    return true\n        }\n        if (numInt == denomInt && numInt == numer.toInt\
    \ && denom.toInt % numInt != 0) {\n            return false\n        }\n     \
    \   if (numIn", "        val xNum = x.split(\"/\").toList\n        val nNum =\
    \ n.split(\"/\").toList\n        val xNumLength = xNum.length\n        val nNumLength\
    \ = nNum.length\n        val xNumLengthMinus1 = xNumLength - 1\n        val nNumLengthMinus1\
    \ = nNumLength - 1\n        val xNumLengthMinus2 = xNumLength - 2\n        val\
    \ nNumLengthMinus2 = nNumLength - 2\n        val xNumLengthMinus3 = xNumLength\
    \ - 3\n        val nNumLengthMinus3 = nNumLength - 3\n        val xNumLengthMinus4\
    \ = xNumLength - 4\n        val nNumLengthMinus4 = nNumLength - 4\n        val\
    \ xNumLengthMinus5 = xNumLength - 5\n        val nNumLengthMinus5 = nNumLength\
    \ - 5\n        val xNumLengthMinus6 = xNumLength - 6\n        val nNumLengthMinus6\
    \ = nNumLength - 6\n        val xNumLengthMinus7 = xNumLength - 7\n        val\
    \ nNumLengthMinus7 = nNumLength - 7\n        val xNumLengthMinus8 = xNumLength\
    \ - 8\n        val nNumLengthMinus8 = nNumLength - 8\n        val xNumLengthMinus9\
    \ = xNumLength - 9\n        val nNumLengthMinus9 = nNumLength - 9\n        val\
    \ xNumLengthMinus10 = xNumLength - 10\n        val nNumLengthMinus10 = nNumLength\
    \ - 10\n        val xNumLengthMinus11 = xNumLength - 11\n        val nNumLengthMinus11\
    \ = nNumLength - 11\n        val xNumLengthMinus12 = xNumLength - 12\n       \
    \ val nNumLengthMinus12 = nNumLength - 12\n        val xNumLengthMinus13 = xNumLength\
    \ - 13\n        val nNumLengthMinus13 = nNumLength - 13\n        val xNumLengthMinus14\
    \ = xNumLength - 14\n        val nNumLengthMinus14 = nNumLength - 14\n       \
    \ val xNumLengthMinus15 = xNumLength - 15\n        val nNumLengthMinus15 = nNumLength\
    \ - 15\n        val xNumLengthMinus16 = xNumLength - 16\n        val nNumLengthMinus16\
    \ = nNumLength - 16\n        val xNumLengthMinus17 = xNumLength - 17\n       \
    \ val nNumLengthMinus17 = nNumLength - 17\n", "        val xNum = x.split(\"/\"\
    ).map(_.toInt)\n        val nNum = n.split(\"/\").map(_.toInt)\n        val xDeno\
    \ = xNum.last\n        val nDeno = nNum.last\n        if(xNum.last == 0 || nNum.last\
    \ == 0) {\n            return false\n        }\n        if(xNum.last == nDeno)\
    \ {\n            return true\n        }\n        if(xNum.last < nDeno) {\n   \
    \         return false\n        }\n        val xNum2 = xNum.dropRight(1)\n   \
    \     val nNum2 = nNum.dropRight(1)\n        val xDeno2 = xNum2.last\n       \
    \ val nDeno2 = nNum2.last\n        if(xNum2.last == 0 || nNum2.last == 0) {\n\
    \            return false\n        }\n        if(xNum2.last == nDeno2) {\n   \
    \         return true\n        }\n        if(xNum2.last < nDeno2) {\n        \
    \    return false\n        }\n        val xNum3 = xNum2.dropRight(1)\n       \
    \ val nNum3 = nNum2.dropRight(1)\n        val xDeno3 = xNum3.last\n        val\
    \ nDeno3 = nNum3.last\n        if(xNum3.last == 0 || nNum3.last == 0) {\n    \
    \        return false\n        }\n        if(xNum3.last == nDeno3) {\n       \
    \     return true\n        }\n        if(xNum3.last < nDeno3) {\n            return\
    \ false\n        }\n        val xNum4 = xNum3.dropRight(1)\n        val nNum4\
    \ = nNum3.dropRight(1)\n        val xDeno4 = xNum4.last\n        val nDeno4 =\
    \ nNum4.last\n        if(xNum4.last == 0 || nNum4.last == 0) {\n            return\
    \ false\n        }\n        if(xNum4.last == nDeno4) {\n            return true\n\
    \        }\n        if(xNum4.last < nDeno4) {\n            return false\n    \
    \    }\n        val xNum5 = xNum4.dropRight(1)\n        val nNum5 = nNum4.dropRight(1)\n\
    \        val xDeno5 = xNum5.last\n        val nDeno5 = nNum5.last\n        if(xNum5.last\
    \ == 0 || nNum5.last == 0) {\n            return false\n        }\n        if(xNum5.last\
    \ == nDeno5) {\n            return true\n        }\n        if(xNum5.last < nDeno5)\
    \ {\n            return false\n        }\n        val xNum6 = xNum5.dropRight(1)\n\
    \        val nNum6 = nNum", "        val xNum = x.split(\"/\").toInt\n       \
    \ val nNum = n.split(\"/\").toInt\n        if(xNum.product(xNum.last) * nNum.product(nNum.last)\
    \ == xNum.product(xNum.last) * nNum.product(nNum.last)) {\n            return\
    \ true\n        }\n        return false", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n    \
    \    val nDeno = nNum.last\n        val xNum1 = xNum.dropRight(1)\n        val\
    \ nNum1 = nNum.dropRight(1)\n        val xNum2 = xNum1.dropRight(1)\n        val\
    \ nNum2 = nNum1.dropRight(1)\n        val xNum3 = xNum2.dropRight(1)\n       \
    \ val nNum3 = nNum2.dropRight(1)\n        val xNum4 = xNum3.dropRight(1)\n   \
    \     val nNum4 = nNum3.dropRight(1)\n        val xNum5 = xNum4.dropRight(1)\n\
    \        val nNum5 = nNum4.dropRight(1)\n        val xNum6 = xNum5.dropRight(1)\n\
    \        val nNum6 = nNum5.dropRight(1)\n        val xNum7 = xNum6.dropRight(1)\n\
    \        val nNum7 = nNum6.dropRight(1)\n        val xNum8 = xNum7.dropRight(1)\n\
    \        val nNum8 = nNum7.dropRight(1)\n        val xNum9 = xNum8.dropRight(1)\n\
    \        val nNum9 = nNum8.dropRight(1)\n        val xNum10 = xNum9.dropRight(1)\n\
    \        val nNum10 = nNum9.dropRight(1)\n        val xNum11 = xNum10.dropRight(1)\n\
    \        val nNum11 = nNum10.dropRight(1)\n        val xNum12 = xNum11.dropRight(1)\n\
    \        val nNum12 = nNum11.dropRight(1)\n        val xNum13 = xNum12.dropRight(1)\n\
    \        val nNum13 = nNum12.dropRight(1)\n        val xNum14 = xNum13.dropRight(1)\n\
    \        val nNum14 = nNum13.dropRight(1)\n        val xNum15 = xNum14.dropRight(1)\n\
    \        val nNum15 = nNum14.dropRight(1)\n        val xNum16 = xNum15.dropRight(1)\n\
    \        val nNum16 = nNum15.dropRight(1)\n        val xNum17 = xNum16.dropRight(1)\n\
    \        val nNum17 = nNum16.dropRight(1)\n        val xNum18 = xNum17.dropRight(1)\n\
    \        val nNum18 = nNum17.dropRight(1)\n        val xNum19 = xNum18.dropRight(1)\n\
    \        val nNum19 = nNum18.dropRight(1)\n        val xNum20 = xNum19.dropRight(1)\n\
    \        val nNum", "        val xNum = x.split(\"/\").toList\n        val nNum\
    \ = n.split(\"/\").toList\n        val xNumLen = xNum.size\n        val nNumLen\
    \ = nNum.size\n        if(xNumLen != nNumLen){\n            return false\n   \
    \     }\n        val xNumStr = xNum.mkString\n        val nNumStr = nNum.mkString\n\
    \        if(xNumStr.contains(nNumStr)){\n            return true\n        }\n\
    \        val xNumInt = xNum.map(_.toInt)\n        val nNumInt = nNum.map(_.toInt)\n\
    \        val xNumIntLen = xNumInt.size\n        val nNumIntLen = nNumInt.size\n\
    \        if(xNumIntLen != nNumIntLen){\n            return false\n        }\n\
    \        val xNumIntSum = xNumInt.sum\n        val nNumIntSum = nNumInt.sum\n\
    \        if(xNumIntSum != nNumIntSum){\n            return false\n        }\n\
    \        val xNumIntProduct = xNumInt.product\n        val nNumIntProduct = nNumInt.product\n\
    \        if(xNumIntProduct != nNumIntProduct){\n            return false\n   \
    \     }\n        val xNumIntProductSum = xNumIntProduct.sum\n        val nNumIntProductSum\
    \ = nNumIntProduct.sum\n        if(xNumIntProductSum != nNumIntProductSum){\n\
    \            return false\n        }\n        val xNumIntProductProduct = xNumIntProduct.product\n\
    \        val nNumIntProductProduct = nNumIntProduct.product\n        if(xNumIntProductProduct\
    \ != nNumIntProductProduct){\n            return false\n        }\n        val\
    \ xNumIntProductProductSum = xNumIntProductProduct.sum\n        val nNumIntProductProductSum\
    \ = nNumIntProductProduct.sum\n        if(xNumIntProductProductSum != nNumIntProductProductSum){\n\
    \            return false\n        }\n        val xNumIntProductProductProduct\
    \ = xNumIntProductProduct.product\n        val nNumIntProductProductSum = nNumIntProductProduct.sum\n\
    \        if(xNumIntProductProductProduct != nNumIntProductProductProduct){\n \
    \           return false\n        }\n        val xNumIntProductProductProductSum\
    \ = xNumIntProductProductSum.sum\n        val nNumIntProductProductSum = nNumIntProductProductSum.sum\n\
    \        if(xNumIntProductProductProductSum != nNumIntProductProductProductSum){\n\
    \            return false\n        }\n        val xNumIntProductProductProductProduct\
    \ = xNumIntProductProductProduct.", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        if(xNum.head == 0 && nNum.head\
    \ == 0){\n            return true\n        }\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        if(xDeno == nDeno){\n            if(xNum.head\
    \ == 0){\n                return true\n            }\n            if(xNum.head\
    \ == nNum.head){\n                if(xNum.head == 0){\n                    return\
    \ true\n                }\n                if(xNum.head == nNum.head && xNum.last\
    \ == nNum.last){\n                    return true\n                }\n       \
    \     }\n        }\n        return false", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n    \
    \    val nDeno = nNum.last\n        val xDenoNum = xNum.init\n        val nDenoNum\
    \ = nNum.init\n        val xDenoDeno = xDeno + nDeno\n        val xDenoDenoNum\
    \ = xDenoNum + nDenoNum\n        val xDenoDenoDeno = xDenoDeno + nDenoDeno\n \
    \       val xDenoDenoDenoNum = xDenoDenoDeno + nDenoDenoNum\n        val xDenoDenoDenoDeno\
    \ = xDenoDenoDeno + nDenoDenoDeno\n        val xDenoDenoDenoDenoNum = xDenoDenoDenoDeno\
    \ + nDenoDenoDenoNum\n        val xDenoDenoDenoDenoDeno = xDenoDenoDenoDeno +\
    \ nDenoDenoDenoDeno\n        val xDenoDenoDenoDenoDenoNum = xDenoDenoDenoDenoDeno\
    \ + nDenoDenoDenoDenoNum\n        val xDenoDenoDenoDenoDenoDeno = xDenoDenoDenoDenoDeno\
    \ + nDenoDenoDenoDenoDeno\n        val xDenoDenoDenoDenoDenoDenoNum = xDenoDenoDenoDenoDenoDeno\
    \ + nDenoDenoDenoDenoDenoDenoNum\n        val xDenoDenoDenoDenoDenoDenoDeno =\
    \ xDenoDenoDenoDenoDenoDeno + nDenoDenoDenoDenoDenoDeno\n        val xDenoDenoDenoDenoDenoDenoDenoNum\
    \ = xDenoDenoDenoDenoDenoDenoDeno + nDenoDenoDenoDenoDenoDenoDenoNum\n       \
    \ val xDenoDenoDenoDenoDenoDenoDenoDeno = xDenoDenoDenoDenoDenoDenoDeno + nDenoDenoDenoDenoDenoDenoDenoDeno\n\
    \        val xDenoDenoDenoD", "        val fraction = x.split(\"/\").map(_.toInt)\n\
    \        val numerator = fraction(0)\n        val denominator = fraction(1)\n\
    \        val numeratorIsWhole = numerator == numerator.toInt\n        val denominatorIsWhole\
    \ = denominator == denominator.toInt\n        val numeratorIsPositiveWhole = numerator\
    \ >= 0\n        val denominatorIsPositiveWhole = denominator >= 0\n        val\
    \ numeratorIsNegativeWhole = numerator < 0\n        val denominatorIsNegativeWhole\
    \ = denominator < 0\n        val numeratorIsNegative = numeratorIsNegative ||\
    \ numeratorIsNegativeWhole\n        val denominatorIsNegative = denominatorIsNegative\
    \ || denominatorIsNegativeWhole\n        val numeratorIsPositive = numeratorIsPositive\
    \ || numeratorIsPositiveWhole\n        val denominatorIsPositive = denominatorIsPositive\
    \ || denominatorIsPositiveWhole\n        val numeratorIsWhole = numeratorIsWhole\
    \ || numeratorIsPositiveWhole\n        val denominatorIsWhole = denominatorIsWhole\
    \ || denominatorIsPositiveWhole\n        val numeratorIsNegative = numeratorIsNegative\
    \ || numeratorIsNegativeWhole\n        val denominatorIsNegative = denominatorIsNegative\
    \ || denominatorIsNegativeWhole\n        val numeratorIsPositive = numeratorIsPositive\
    \ || numeratorIsPositiveWhole\n        val denominatorIsPositive = denominatorIsPositive\
    \ || denominatorIsPositiveWhole\n        val numeratorIsWhole = numeratorIsWhole\
    \ || numeratorIsPositiveWhole\n        val denominatorIsWhole = denominatorIsWhole\
    \ || denominatorIsPositiveWhole\n        val numeratorIsNegative = numeratorIsNegative\
    \ || numeratorIsNegativeWhole\n        val denominatorIsNegative = denominatorIsNegative\
    \ || denominatorIsNegativeWhole\n        val numeratorIsPositive = numeratorIsPositive\
    \ || numeratorIsPositiveWhole\n        val denominatorIsPositive = denominatorIsPositive\
    \ || denominatorIsPositiveWhole\n        val numeratorIsWhole = numeratorIsWhole\
    \ || numeratorIsPositiveWhole\n        val denominatorIsWhole = denominatorIsWhole\
    \ || denominatorIsPositiveWhole\n        val numeratorIsNegative = numeratorIsNegative\
    \ || numeratorIsNegativeWhole\n        val denominatorIsNegative = denominatorIsNegative\
    \ || denominatorIsNegativeWhole\n        val numeratorIsPositive = numeratorIsPositive\
    \ || numeratorIsPositiveWhole\n        val denominatorIsPositive = denominatorIsPositive\
    \ || denominator", "        val xNum = x.split(\"/\").map(_.toInt)\n        val\
    \ nNum = n.split(\"/\").map(_.toInt)\n        val xDeno = xNum.last\n        val\
    \ nDeno = nNum.last\n        val xNum1 = xNum.init\n        val nNum1 = nNum.init\n\
    \        val xDeno1 = xDeno\n        val nDeno1 = nDeno\n        val xNum2 = xNum.tail\n\
    \        val nNum2 = nNum.tail\n        val xDeno2 = xDeno\n        val nDeno2\
    \ = nDeno\n        val xNum3 = xNum.init\n        val nNum3 = nNum.init\n    \
    \    val xDeno3 = xDeno\n        val nDeno3 = nDeno\n        val xNum4 = xNum.tail\n\
    \        val nNum4 = nNum.tail\n        val xDeno4 = xDeno\n        val nDeno4\
    \ = nDeno\n        val xNum5 = xNum.init\n        val nNum5 = nNum.init\n    \
    \    val xDeno5 = xDeno\n        val nDeno5 = nDeno\n        val xNum6 = xNum.tail\n\
    \        val nNum6 = nNum.tail\n        val xDeno6 = xDeno\n        val nDeno6\
    \ = nDeno\n        val xNum7 = xNum.init\n        val nNum7 = nNum.init\n    \
    \    val xDeno7 = xDeno\n        val nDeno7 = nDeno\n        val xNum8 = xNum.tail\n\
    \        val nNum8 = nNum.tail\n        val xDeno8 = xDeno\n        val nDeno8\
    \ = nDeno\n        val xNum9 = xNum.init\n        val nNum9 = nNum.init\n    \
    \    val xDeno9 = xDeno\n        val nDeno9 = nDeno\n        val xNum10 = xNum.tail\n\
    \        val nNum10 = nNum.tail\n        val xDeno10 = xDeno\n        val nDeno10\
    \ = nDeno\n        val xNum11 = xNum.init\n        val nNum11 = nNum.init\n  \
    \      val xDeno11 = xDeno\n        val nDeno11 = nDeno\n        val xNum12 =\
    \ xNum.tail\n        val nNum12 = nNum.tail\n        val ", "        val xNum\
    \ = x.split(\"/\")\n        val nNum = n.split(\"/\")\n        val xNumLen = xNum.length\n\
    \        val nNumLen = nNum.length\n        val xNumStr = xNum.mkString\n    \
    \    val nNumStr = nNum.mkString\n        val xNumInt = xNumStr.toInt\n      \
    \  val nNumInt = nNumStr.toInt\n        val xNumFraction = xNumInt.toDouble/(xNumLen.toDouble)\n\
    \        val nNumFraction = nNumInt.toDouble/(nNumLen.toDouble)\n        (xNumFraction\
    \ == nNumFraction)", "        val nums = x.split(\"/\")\n        val dens = n.split(\"\
    /\")\n        if (nums.length != dens.length) false\n        else nums.zip(dens).forall\
    \ {\n            case (num, den) => num.toInt == den.toInt\n        }", "    \
    \    val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        val xDeno = xNum.last\n        val nDeno = nNum.last\n        val xDenoIsZero\
    \ = xDeno == 0 \n        val nDenoIsZero = nDeno == 0 \n        val xDenoIsNegative\
    \ = xDenoIsZero || xDenoIsNegative \n        val nDenoIsNegative = nDenoIsZero\
    \ || nDenoIsNegative \n        val xDenoIsPositive = xDenoIsZero || xDenoIsPositive\
    \ \n        val nDenoIsPositive = nDenoIsZero || nDenoIsPositive \n        val\
    \ xDenoIsNegativeOrZero = xDenoIsNegative || xDenoIsZero \n        val nDenoIsNegativeOrZero\
    \ = nDenoIsNegative || nDenoIsZero \n        val xDenoIsPositiveOrZero = xDenoIsPositive\
    \ || xDenoIsZero \n        val nDenoIsPositiveOrZero = nDenoIsPositive || nDenoIsZero\
    \ \n        val xDenoIsNegativeOrZeroOrZero = xDenoIsNegativeOrZero || xDenoIsZeroOrZero\
    \ \n        val nDenoIsNegativeOrZeroOrZero = nDenoIsNegativeOrZero || nDenoIsZeroOrZero\
    \ \n        val xDenoIsPositiveOrZeroOrZero = xDenoIsPositiveOrZero || xDenoIsZeroOrZero\
    \ \n        val nDenoIsPositiveOrZeroOrZero = nDenoIsPositiveOrZero || nDenoIsZeroOrZero\
    \ \n        val xDenoIsNegativeOrZeroOrZeroOrZero = xDenoIsNegativeOrZeroOrZero\
    \ || xDenoIsZeroOrZeroOrZero \n        val nDenoIsNegativeOrZeroOrZeroOrZero =\
    \ nDenoIsNegativeOrZeroOrZero || nDenoIsZeroOrZeroOrZero \n        val xDenoIsPositiveOrZeroOrZeroOrZero\
    \ = xDenoIsPositiveOrZeroOrZero || xDenoIsZeroOrZeroOrZero \n        val nDenoIsPositiveOrZeroOrZeroOrZero\
    \ = nDenoIsPositiveOrZeroOrZero || nDenoIsZeroOr", "        val nums = x.split(\"\
    /\")\n        val dens = n.split(\"/\")\n        val numsLength = nums.length\n\
    \        val densLength = dens.length\n        if(numsLength != densLength) {\n\
    \            return false\n        }\n        val numsMap = new mutable.HashMap[Int,\
    \ Int]()\n        val densMap = new mutable.HashMap[Int, Int]()\n        for(i\
    \ <- 0 until numsLength) {\n            val num = nums(i)\n            val den\
    \ = dens(i)\n            if(numsMap.contains(num)) {\n                numsMap(num)\
    \ = numsMap(num) + den\n            } else {\n                numsMap(num) = den\n\
    \            }\n        }\n        for(i <- 0 until densLength) {\n          \
    \  val den = dens(i)\n            val num = nums(i)\n            if(densMap.contains(den))\
    \ {\n                densMap(den) = densMap(den) + num\n            } else {\n\
    \                densMap(den) = num\n            }\n        }\n        val numsKeys\
    \ = numsMap.keySet\n        val densKeys = densMap.keySet\n        if(numsKeys.size\
    \ == densKeys.size) {\n            val numsValues = numsMap.values.toArray\n \
    \           val densValues = densMap.values.toArray\n            val numsSum =\
    \ numsValues.sum\n            val densSum = densValues.sum\n            if(numsSum\
    \ == densSum) {\n                val numsProduct = numsValues.product\n      \
    \          val densProduct = densValues.product\n                if(numsProduct\
    \ == densProduct) {\n                    true\n                } else {\n    \
    \                false\n                }\n            } else {\n            \
    \    false\n            }\n        } else {\n            false\n        }", " \
    \       val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        if(xNum.product(xNum.last).isOdd && nNum.product(nNum.last).isOdd) {\n\
    \            return false\n        }\n        if(xNum.product(xNum.last).isOdd\
    \ || nNum.product(nNum.last).isOdd) {\n            return false\n        }\n \
    \       if(xNum.product(xNum.last).isOdd && nNum.product(nNum.last).isOdd) {\n\
    \            return false\n        }\n        if(xNum.product(xNum.last).isOdd\
    \ || nNum.product(nNum.last).isOdd) {\n            return false\n        }\n \
    \       if(xNum.product(xNum.last).isOdd && nNum.product(nNum.last).isOdd) {\n\
    \            return false\n        }\n        if(xNum.product(xNum.last).isOdd\
    \ || nNum.product(nNum.last).isOdd) {\n            return false\n        }\n \
    \       if(xNum.product(xNum.last).isOdd && nNum.product(nNum.last).isOdd) {\n\
    \            return false\n        }\n        if(xNum.product(xNum.last).isOdd\
    \ || nNum.product(nNum.last).isOdd) {\n            return false\n        }\n \
    \       if(xNum.product(xNum.last).isOdd && nNum.product(nNum.last).isOdd) {\n\
    \            return false\n        }\n        if(xNum.product(xNum.last).isOdd\
    \ || nNum.product(nNum.last).isOdd) {\n            return false\n        }\n \
    \       if(xNum.product(xNum.last).isOdd && nNum.product(nNum.last).isOdd) {\n\
    \            return false\n        }\n        if(xNum.product(xNum.last).isOdd\
    \ || nNum.product(nNum.last).isOdd) {\n            return false\n        }\n \
    \       if(xNum.product(xNum.last).isOdd && nNum.product(nNum.last).isOdd) {\n\
    \            return false\n        }\n        if(xNum.product(xNum.last).isOdd\
    \ || nNum.product(nNum.last).isOdd) {\n            return false\n        }\n \
    \       if(xNum.product(xNum.last).isOdd && nNum.product(nNum.last).isOdd) {\n\
    \            return false", "        val xNum = x.split(\"/\").toInt\n       \
    \ val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val\
    \ nDeno = nNum.last\n        if(xDeno == 0) return false\n        if(nDeno ==\
    \ 0) return false\n        if(xDeno == nDeno) return true\n        if(xNum.last\
    \ == 0) return false\n        if(nNum.last == 0) return false\n        if(xNum.last\
    \ > nNum.last) return false\n        if(xNum.last < nNum.last) return false\n\
    \        if(xNum.last == nNum.last) return true\n        if(xNum.last < nNum.last)\
    \ return false\n        if(xNum.last > nNum.last) return false\n        if(xNum.last\
    \ == nNum.last) return true\n        if(xNum.last < nNum.last) return false\n\
    \        if(xNum.last > nNum.last) return false\n        if(xNum.last == nNum.last)\
    \ return true\n        if(xNum.last < nNum.last) return false\n        if(xNum.last\
    \ > nNum.last) return false\n        if(xNum.last == nNum.last) return true\n\
    \        if(xNum.last < nNum.last) return false\n        if(xNum.last > nNum.last)\
    \ return false\n        if(xNum.last == nNum.last) return true\n        if(xNum.last\
    \ < nNum.last) return false\n        if(xNum.last > nNum.last) return false\n\
    \        if(xNum.last == nNum.last) return true\n        if(xNum.last < nNum.last)\
    \ return false\n        if(xNum.last > nNum.last) return false\n        if(xNum.last\
    \ == nNum.last) return true\n        if(xNum.last < nNum.last) return false\n\
    \        if(xNum.last > nNum.last) return false\n        if(xNum.last == nNum.last)\
    \ return true\n        if(xNum.last < nNum.last) return false\n        if(xNum.last\
    \ > nNum.last) return false\n        if(xNum.last == nNum.last) return true\n\
    \        if(xNum.last < nNum.last) return false\n        if(xNum.last > nNum.last)\
    \ return false\n        if(xNum.last == nNum.last) return true\n        if(xNum.last\
    \ < nNum.last) return false\n        if(xNum.last > nNum.last) return false\n\
    \        if(xNum.last == n", "        val x = x.split(\"/\")\n        val n =\
    \ n.split(\"/\")\n        val numerator = x.head.toInt\n        val denominator\
    \ = n.head.toInt\n        if (numerator == 0 && denominator == 0) {\n        \
    \    return true\n        }\n        if (numerator == 0 && denominator != 0) {\n\
    \            return false\n        }\n        if (numerator != 0 && denominator\
    \ == 0) {\n            return false\n        }\n        if (numerator == denominator\
    \ && numerator != 0) {\n            return true\n        }\n        if (numerator\
    \ != denominator && numerator == 0) {\n            return false\n        }\n \
    \       if (numerator != denominator && numerator != 0) {\n            return\
    \ true\n        }", "        val xNum = x.split(\"/\").toList\n        val nNum\
    \ = n.split(\"/\").toList\n        val xNum1 = xNum(0)\n        val nNum1 = nNum(0)\n\
    \        val xNum2 = xNum(1)\n        val nNum2 = nNum(1)\n        val xNum3 =\
    \ xNum2\n        val nNum3 = nNum2\n        val xNum4 = xNum3\n        val nNum4\
    \ = nNum3\n        val xNum5 = xNum4\n        val nNum5 = nNum4\n        val xNum6\
    \ = xNum5\n        val nNum6 = nNum5\n        val xNum7 = xNum6\n        val nNum7\
    \ = nNum6\n        val xNum8 = xNum7\n        val nNum8 = nNum7\n        val xNum9\
    \ = xNum8\n        val nNum9 = nNum8\n        val xNum10 = xNum9\n        val\
    \ nNum10 = nNum9\n        val xNum11 = xNum10\n        val nNum11 = nNum10\n \
    \       val xNum12 = xNum11\n        val nNum12 = nNum11\n        val xNum13 =\
    \ xNum12\n        val nNum13 = nNum12\n        val xNum14 = xNum13\n        val\
    \ nNum14 = nNum13\n        val xNum15 = xNum14\n        val nNum15 = nNum14\n\
    \        val xNum16 = xNum15\n        val nNum16 = nNum15\n        val xNum17\
    \ = xNum16\n        val nNum17 = nNum16\n        val xNum18 = xNum17\n       \
    \ val nNum18 = nNum17\n        val xNum19 = xNum18\n        val nNum19 = nNum18\n\
    \        val xNum20 = xNum19\n        val nNum20 = nNum19\n        val xNum21\
    \ = xNum20\n        val nNum21 = nNum20\n        val xNum22 = xNum21\n       \
    \ val nNum22 = nNum21\n        val xNum23 = xNum22\n        val nNum23 = nNum22\n\
    \        val xNum24 = xNum23\n        val nNum24 = nNum23\n        val xNum25\
    \ = xNum24\n        val nNum25 = nNum24\n        val xNum26 = xNum25\n       \
    \ val nNum26 = nNum25\n        val xNum27 = xNum26\n        val nNum27 = nNum26\n\
    \        val xNum", "        val xNum = x.split(\"/\").toInt\n        val nNum\
    \ = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n\
    \        if(xDeno == 0 || nDeno == 0) false\n        else if(xDeno == nDeno) true\n\
    \        else if(xNum.last == nNum.last) simplify(x/nNum.last, nNum.last)\n  \
    \      else simplify(x/nDeno, nDeno)", "        val xNum = x.split(\"/\").toList\n\
    \        val nNum = n.split(\"/\").toList\n        val xNumLen = xNum.size\n \
    \       val nNumLen = nNum.size\n        val xNumStr = xNum.mkString(\"/\")\n\
    \        val nNumStr = nNum.mkString(\"/\")\n        val xNumInt = xNumStr.toInt\n\
    \        val nNumInt = nNumStr.toInt\n        val xNumIntLen = xNumInt.size\n\
    \        val nNumIntLen = nNumInt.size\n        val xNumIntStr = xNumInt.mkString(\"\
    /\")\n        val nNumIntStr = nNumInt.mkString(\"/\")\n        val xNumIntInt\
    \ = xNumIntStr.toInt\n        val nNumIntInt = nNumIntStr.toInt\n        val xNumIntIntLen\
    \ = xNumIntInt.size\n        val nNumIntIntLen = nNumIntInt.size\n        val\
    \ xNumIntIntStr = xNumIntInt.mkString(\"/\")\n        val nNumIntIntStr = nNumIntInt.mkString(\"\
    /\")\n        val xNumIntIntInt = xNumIntIntStr.toInt\n        val nNumIntIntInt\
    \ = nNumIntIntStr.toInt\n        val xNumIntIntIntLen = xNumIntIntInt.size\n \
    \       val nNumIntIntIntLen = nNumIntIntInt.size\n        val xNumIntIntIntStr\
    \ = xNumIntIntInt.mkString(\"/\")\n        val nNumIntIntIntStr = nNumIntIntInt.mkString(\"\
    /\")\n        val xNumIntIntIntInt = xNumIntIntIntStr.toInt\n        val nNumIntIntIntInt\
    \ = nNumIntIntIntStr.toInt\n        val xNumIntIntIntIntLen = xNumIntIntIntInt.size\n\
    \        val nNumIntIntIntIntLen = nNumIntIntIntInt.size\n        val xNumIntIntIntIntStr\
    \ = xNumIntIntIntInt.mkString(\"/\")\n        val nNumIntIntIntIntStr = nNumIntIntIntInt.mkString(\"\
    /\")\n        val xNumIntIntIntIntInt = xNumIntIntIntIntStr.toInt\n        val\
    \ nNumIntIntIntIntInt = nNumIntIntIntIntStr.toInt\n        val xNumIntIntIntIntIntLen\
    \ = xNumIntIntIntIntInt.size\n        val nNum", "        val xNum = x.split(\"\
    /\").toInt\n        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        val xDenoNum = xNum.init\n        val\
    \ nDenoNum = nNum.init\n        val xDenoDeno = xDeno + nDeno\n        val xDenoNumDeno\
    \ = xDenoNum + nDenoNum\n        val xDenoDenoNum = xDenoDeno + nDenoDeno\n  \
    \      val xDenoNumDenoNum = xDenoNumDeno + nDenoNumDeno\n        val xDenoDenoNumDenoDeno\
    \ = xDenoDenoNum + nDenoDenoNum\n        val xDenoNumDenoNumDenoDeno = xDenoNumDenoDeno\
    \ + nDenoNumDenoDeno\n        val xDenoDenoNumDenoNumDenoDeno = xDenoDenoNumDenoDeno\
    \ + nDenoDenoNumDenoDeno\n        val xDenoNumDenoNumDenoNumDenoDeno = xDenoNumDenoNumDenoDeno\
    \ + nDenoNumDenoNumDenoDeno\n        val xDenoDenoNumDenoNumDenoNumDenoDeno =\
    \ xDenoDenoNumDenoNumDenoDeno + nDenoDenoNumDenoNumDenoDenoDeno\n        val xDenoNumDenoNumDenoNumDenoNumDenoDeno\
    \ = xDenoNumDenoNumDenoNumDenoDenoDeno + nDenoNumDenoNumDenoNumDenoDenoDeno\n\
    \        val xDenoDenoNumDenoNumDenoNumDenoNumDenoDeno = xDenoDenoNumDenoNumDenoNumDenoDenoDeno\
    \ + nDenoNumDenoNumDenoNumDenoDenoDenoDeno\n        val xDenoNumDenoNumDenoNumDenoNumDenoDenoDenoDeno\
    \ = xDenoNumDenoNumDenoNumDenoNumDenoDenoDeno + nDenoNumDenoNumDenoNumDenoNumDenoDenoDenoDenoDeno\n\
    \        val xDenoDenoNumDenoNumDeno", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n    \
    \    val nDeno = nNum.last\n        if(xDeno == 0 || nDeno == 0) false\n     \
    \   else if(xDeno == nDeno) true\n        else if(xNum.last == nNum.last) simplify(x/nNum.last,\
    \ nNum.last)\n        else simplify(x/nDeno, nDeno)", "        val numer = x.split(\"\
    /\")(0)\n        val denom = x.split(\"/\")(1)\n        val numerator = numer\n\
    \        val denominator = denom\n        val wholeNumber = numerator / denominator\n\
    \        val wholeNumberString = wholeNumber.toString\n        val wholeNumberInt\
    \ = wholeNumberString.toInt\n        val wholeNumberFraction = wholeNumberInt.toDouble\n\
    \        val wholeNumberFractionString = wholeNumberFraction.toString\n      \
    \  val wholeNumberFractionInt = wholeNumberFractionString.toInt\n        val wholeNumberFractionFraction\
    \ = wholeNumberFractionInt.toDouble\n        val wholeNumberFractionFractionString\
    \ = wholeNumberFractionFraction.toString\n        val wholeNumberFractionFractionInt\
    \ = wholeNumberFractionFractionString.toInt\n        val wholeNumberFractionFractionFraction\
    \ = wholeNumberFractionFractionInt.toDouble\n        val wholeNumberFractionFractionFractionString\
    \ = wholeNumberFractionFractionFraction.toString\n        val wholeNumberFractionFractionFractionInt\
    \ = wholeNumberFractionFractionFractionString.toInt\n        val wholeNumberFractionFractionFractionFraction\
    \ = wholeNumberFractionFractionFractionInt.toDouble\n        val wholeNumberFractionFractionFractionFractionString\
    \ = wholeNumberFractionFractionFractionFraction.toString\n        val wholeNumberFractionFractionFractionFractionInt\
    \ = wholeNumberFractionFractionFractionFractionString.toInt\n        val wholeNumberFractionFractionFractionFractionFraction\
    \ = wholeNumberFractionFractionFractionFractionInt.toDouble\n        val wholeNumberFractionFractionFractionFractionFractionString\
    \ = wholeNumberFractionFractionFractionFractionFraction.toString\n        val\
    \ wholeNumberFractionFractionFractionFractionFractionInt = wholeNumberFractionFractionFractionFractionFractionString.toInt\n\
    \        val wholeNumberFractionFractionFractionFractionFractionFraction = wholeNumberFractionFractionFractionFractionFractionInt.toDouble\n\
    \        val wholeNumberFractionFractionFractionFractionFractionFractionString\
    \ = wholeNumberFractionFractionFractionFractionFractionFractionString.toInt\n\
    \        val wholeNumberFractionFractionFractionFractionFractionFractionFraction\
    \ = wholeNumberFractionFractionFractionFractionFractionFractionFractionInt.toDouble\n\
    \        val wholeNumberFractionFractionFractionFractionFractionFractionFractionString\
    \ = wholeNumberFractionFractionFractionFractionFractionFractionFractionFractionString.toInt\n\
    \        val wholeNumberFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = wholeNumberFractionFractionFractionFractionFractionFractionFractionFractionInt.toDouble\n\
    \        val wholeNumberFractionFractionFractionFractionFractionFractionFractionFractionFractionString\
    \ = wholeNumberFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionString.toInt\n\
    \        ", "        val nums = x.split(\"/\")\n        val dens = n.split(\"\
    /\")\n        val numsLength = nums.length\n        val densLength = dens.length\n\
    \        if (numsLength != densLength) {\n            return false\n        }\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var sum = 0\n\
    \        var sum2 = 0\n        var sum3 = 0\n        var sum4 = 0\n        var\
    \ sum5 = 0\n        var sum6 = 0\n        var sum7 = 0\n        var sum8 = 0\n\
    \        var sum9 = 0\n        var sum10 = 0\n        var sum11 = 0\n        var\
    \ sum12 = 0\n        var sum13 = 0\n        var sum14 = 0\n        var sum15 =\
    \ 0\n        var sum16 = 0\n        var sum17 = 0\n        var sum18 = 0\n   \
    \     var sum19 = 0\n        var sum20 = 0\n        var sum21 = 0\n        var\
    \ sum22 = 0\n        var sum23 = 0\n        var sum24 = 0\n        var sum25 =\
    \ 0\n        var sum26 = 0\n        var sum27 = 0\n        var sum28 = 0\n   \
    \     var sum29 = 0\n        var sum30 = 0\n        var sum31 = 0\n        var\
    \ sum32 = 0\n        var sum33 = 0\n        var sum34 = 0\n        var sum35 =\
    \ 0\n        var sum36 = 0\n        var sum37 = 0\n        var sum38 = 0\n   \
    \     var sum39 = 0\n        var sum40 = 0\n        var sum41 = 0\n        var\
    \ sum42 = 0\n        var sum43 = 0\n        var sum44 = 0\n        var sum45 =\
    \ 0\n        var sum46 = 0\n        var sum47 = 0\n        var sum48 = 0\n   \
    \     var sum49 = 0\n        var sum50 = 0\n        var sum51 = 0\n        var\
    \ sum52 = 0\n        var sum53 = 0\n        var sum54 = 0\n        var sum55 =\
    \ 0\n        var sum56 = 0\n        var sum57 = 0\n        var sum58 = 0\n   \
    \     var sum59 = 0\n        var sum60 = 0\n        var sum61 = 0\n        var\
    \ sum62 = 0\n        var sum63 = 0\n        var sum64 = 0\n        var sum65 =\
    \ 0\n        var sum66 = 0\n        var sum67 = 0\n        var sum68 = 0\n   \
    \     var sum69 = 0\n        var sum70 = 0\n        var sum71 = 0\n        var\
    \ sum72 = 0\n        var sum73 = 0\n        var sum74 = 0\n        var sum75 =\
    \ 0\n        var sum76 = 0\n        var sum77 = 0\n        var sum78 = 0\n   \
    \     var sum79 = 0\n        var sum80 = 0\n        var sum81 = 0\n        var\
    \ sum82 = 0\n        var sum83 = 0\n        var sum84 = 0\n        var sum85 =\
    \ 0\n        var sum86 = 0\n        var sum87 = 0\n        var sum88 = 0\n   \
    \     var sum89 = 0\n        var sum90 = 0\n        var sum91 = 0\n        var\
    \ sum", "        val xNum = x.split(\"/\").toList\n        val nNum = n.split(\"\
    /\").toList\n        val xNumLen = xNum.size\n        val nNumLen = nNum.size\n\
    \        val xNumNum = xNum.zipWithIndex.map { case (num, i) => if (i == 0) num.toInt\
    \ else num.toDouble }\n        val nNumNum = nNum.zipWithIndex.map { case (num,\
    \ i) => if (i == 0) num.toInt else num.toDouble }\n        val xNumDeno = xNum.zipWithIndex.map\
    \ { case (num, i) => if (i == 0) 1 else num.toDouble }\n        val nNumDeno =\
    \ nNum.zipWithIndex.map { case (num, i) => if (i == 0) 1 else num.toDouble }\n\
    \        val xNumNumLen = xNumNum.zipWithIndex.map { case (num, i) => if (i ==\
    \ 0) 1 else num.toDouble }\n        val nNumNumLen = nNumNum.zipWithIndex.map\
    \ { case (num, i) => if (i == 0) 1 else num.toDouble }\n        val xNumDenoLen\
    \ = xNumDeno.zipWithIndex.map { case (num, i) => if (i == 0) 1 else num.toDouble\
    \ }\n        val nNumDenoLen = nNumDeno.zipWithIndex.map { case (num, i) => if\
    \ (i == 0) 1 else num.toDouble }\n        val xNumNumLen = xNumNumLen.zipWithIndex.map\
    \ { case (num, i) => if (i == 0) 1 else num.toDouble }\n        val nNumNumLen\
    \ = nNumNumLen.zipWithIndex.map { case (num, i) => if (i == 0) 1 else num.toDouble\
    \ }\n        val xNumDenoLen = xNumDenoLen.zipWithIndex.map { case (num, i) =>\
    \ if (i == 0) 1 else num.toDouble }\n        val nNumDenoLen = nNumDenoLen.zipWithIndex.map\
    \ { case (num, i) => if (i == 0) 1 else num.toDouble }\n        val xNumNumLen\
    \ = xNumNumLen.zipWithIndex.map { case (num, i) => if (i == 0) 1 else num.toDouble\
    \ }\n        val nNumNumLen = nNumNumLen.zipWithIndex.map { case (num, i) => if\
    \ (i == 0) 1 else num.toDouble }\n        val xNumDenoLen = xNumDenoLen.zipWithIndex.map\
    \ { case (num, i) => if (i == ", "        val xNum = x.split(\"/\").toInt\n  \
    \      val nNum = n.split(\"/\").toInt\n        if(xNum.head == 0 && nNum.head\
    \ == 0){\n            true\n        }\n        else{\n            if(xNum.head\
    \ == nNum.head){\n                simplify(x.replaceAll(\"/\", \"\"), n.replaceAll(\"\
    /\", \"\"))\n            }\n            else{\n                if(xNum.head <\
    \ nNum.head){\n                    simplify(x.replaceAll(\"/\", \"\"), n.replaceAll(\"\
    /\", \"\"))\n                }\n                else{\n                    simplify(x.replaceAll(\"\
    /\", \"\"), n.replaceAll(\"/\", \"\"))\n                }\n            }\n   \
    \     }", "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"\
    /\").toInt\n        if(xNum.product(xNum) == nNum.product(nNum) && xNum.product(xNum)\
    \ == nNum.product(nNum) && xNum.product(xNum) == nNum.product(nNum))\n       \
    \     true\n        else\n            false", "        val xNum = x.split(\"/\"\
    ).toInt\n        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        (xNum.head == nNum.head && xDeno == nDeno)",
  "        val xNum = x.split(\"/\")\n        val nNum = n.split(\"/\")\n        val\
    \ xNum1 = xNum(0)\n        val nNum1 = nNum(0)\n        val xNum2 = xNum(1)\n\
    \        val nNum2 = nNum(1)\n        if(xNum1.toInt != nNum1.toInt){\n      \
    \      return false\n        }\n        if(xNum2.toInt != nNum2.toInt){\n    \
    \        return false\n        }\n        if(xNum1.toInt == 0){\n            return\
    \ true\n        }\n        if(xNum2.toInt == 0){\n            return true\n  \
    \      }\n        if(xNum1.toInt > nNum1.toInt){\n            return false\n \
    \       }\n        if(xNum2.toInt > nNum2.toInt){\n            return false\n\
    \        }\n        if(xNum1.toInt == nNum1.toInt){\n            return true\n\
    \        }\n        if(xNum2.toInt == nNum2.toInt){\n            return true\n\
    \        }\n        if(xNum1.toInt < nNum1.toInt){\n            return false\n\
    \        }\n        if(xNum2.toInt < nNum2.toInt){\n            return false\n\
    \        }\n        \n        ", "        val xNum = x.split(\"/\")\n        val\
    \ nNum = n.split(\"/\")\n        if(xNum.length != nNum.length) false\n      \
    \  else {\n            val xNum2 = xNum.zip(nNum).map(x => x._1 * x._2).sum\n\
    \            val nNum2 = nNum.zip(xNum).map(x => x._1 * x._2).sum\n          \
    \  (xNum2 == nNum2)\n        }", "        val x = x.split(\"/\")\n        val\
    \ n = n.split(\"/\")\n        val numerator = x.head.toInt\n        val denominator\
    \ = n.head.toInt\n        if(numerator == 0 && denominator == 0){\n          \
    \  return true\n        }\n        if(numerator == 0 && denominator != 0){\n \
    \           return false\n        }\n        if(numerator != 0 && denominator\
    \ == 0){\n            return false\n        }\n        if(numerator == denominator\
    \ && numerator != 0){\n            return true\n        }\n        if(numerator\
    \ != 0 && denominator != 0){\n            return false\n        }\n        if(numerator\
    \ == denominator && numerator == 0){\n            return true\n        }\n   \
    \     if(numerator != 0 && denominator == 0){\n            return false\n    \
    \    }\n        if(numerator == denominator && numerator != 0){\n            return\
    \ true\n        }\n        if(numerator != 0 && denominator != 0){\n         \
    \   return false\n        }\n        if(numerator == denominator && numerator\
    \ == 0){\n            return true\n        }\n        if(numerator != 0 && denominator\
    \ == 0){\n            return false\n        }\n        if(numerator == denominator\
    \ && numerator != 0){\n            return true\n        }\n        if(numerator\
    \ != 0 && denominator != 0){\n            return false\n        }\n        if(numerator\
    \ == denominator && numerator == 0){\n            return true\n        }\n   \
    \     if(numerator != 0 && denominator == 0){\n            return false\n    \
    \    }\n        if(numerator == denominator && numerator != 0){\n            return\
    \ true\n        }\n        if(numerator != 0 && denominator != 0){\n         \
    \   return false\n        }\n        if(numerator == denominator && numerator\
    \ == 0){\n            return true\n        }\n        if(numerator != 0 && denominator\
    \ == 0){\n            return false\n        }\n        if(numerator == denominator\
    \ && numerator != 0){\n            return true\n        }\n        if(numerator\
    \ != 0 && denominator != 0){\n            return false\n        }\n        if(numerator\
    \ == denominator && numerator == 0){\n            return true\n        }\n   \
    \     if(numerator != 0 && denominator == 0){\n            return false\n    \
    \    }\n        if(numerator == denominator && numerator != 0){\n            return\
    \ true\n        }\n        if(numerator != 0 && denominator != 0){\n         \
    \   return false\n        }\n        if(numerator == denominator && numerator\
    \ == 0){\n            return true\n        }\n        if(numerator != 0 && denominator\
    \ == 0){\n            return false\n        }\n        if(numerator == denominator\
    \ && numerator != 0){\n            return true\n        }\n        if(numerator\
    \ != 0 && denominator != ", "        val xNum = x.split(\"/\").toInt\n       \
    \ val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val\
    \ nDeno = nNum.last\n        val xNum2 = xNum.dropRight(1)\n        val nNum2\
    \ = nNum.dropRight(1)\n        val xDeno2 = xDeno * xNum2\n        val nDeno2\
    \ = nDeno * nNum2\n        (xDeno2 == nDeno2) && (xNum2 == nNum2)", "        val\
    \ xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n     \
    \   val xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNum1 =\
    \ xNum.init\n        val nNum1 = nNum.init\n        val xDeno1 = xDeno\n     \
    \   val nDeno1 = nDeno\n        val xNum2 = xNum.tail\n        val nNum2 = nNum.tail\n\
    \        val xDeno2 = xDeno\n        val nDeno2 = nDeno\n        val xNum3 = xNum.init\n\
    \        val nNum3 = nNum.init\n        val xDeno3 = xDeno\n        val nDeno3\
    \ = nDeno\n        val xNum4 = xNum.tail\n        val nNum4 = nNum.tail\n    \
    \    val xDeno4 = xDeno\n        val nDeno4 = nDeno\n        val xNum5 = xNum.init\n\
    \        val nNum5 = nNum.init\n        val xDeno5 = xDeno\n        val nDeno5\
    \ = nDeno\n        val xNum6 = xNum.tail\n        val nNum6 = nNum.tail\n    \
    \    val xDeno6 = xDeno\n        val nDeno6 = nDeno\n        val xNum7 = xNum.init\n\
    \        val nNum7 = nNum.init\n        val xDeno7 = xDeno\n        val nDeno7\
    \ = nDeno\n        val xNum8 = xNum.tail\n        val nNum8 = nNum.tail\n    \
    \    val xDeno8 = xDeno\n        val nDeno8 = nDeno\n        val xNum9 = xNum.init\n\
    \        val nNum9 = nNum.init\n        val xDeno9 = xDeno\n        val nDeno9\
    \ = nDeno\n        val xNum10 = xNum.tail\n        val nNum10 = nNum.tail\n  \
    \      val xDeno10 = xDeno\n        val nDeno10 = nDeno\n        val xNum11 =\
    \ xNum.init\n        val nNum11 = nNum.init\n        val xDeno11 = xDeno\n   \
    \     val nDeno11 = nDeno\n        val xNum12 = xNum.tail\n        val nNum12\
    \ = nNum.tail\n        val xDeno12 = xDeno\n        val ", "        val xNum =\
    \ x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n        if(xNum.product(xNum.last).equals(nNum.product(nNum.last)))\
    \ {\n            return true\n        }\n        else {\n            return false\n\
    \        }", "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"\
    /\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n   \
    \     val xDenoInt = (xDeno).toInt\n        val nDenoInt = (nDeno).toInt\n   \
    \     val xDenoDeno = xDenoInt / nDenoInt\n        val xDenoIntMod = xDenoInt\
    \ % nDenoInt\n        val xDenoDenoMod = xDenoDeno * nDenoIntMod\n        val\
    \ xDenoMod = xDenoDenoMod / xDenoIntMod\n        val xMod = xNum.head * xDenoMod\n\
    \        val xModInt = (xMod).toInt\n        val xModDeno = xModInt / nDenoInt\n\
    \        val xModDenoMod = xModDeno * nDenoIntMod\n        val xModDenoModMod\
    \ = xModDenoMod / xDenoIntMod\n        val xModMod = xNum.head * xModDenoMod\n\
    \        val xModModInt = (xModMod).toInt\n        val xModModDeno = xModModInt\
    \ / nDenoInt\n        val xModModDenoMod = xModModDeno * nDenoIntMod\n       \
    \ val xModModDenoMod = xModModDenoMod / xDenoIntMod\n        val xModModMod =\
    \ xNum.head * xModModDenoMod\n        val xModModModInt = (xModModMod).toInt\n\
    \        val xModModModDeno = xModModModInt / nDenoInt\n        val xModModModDenoMod\
    \ = xModModModDeno * nDenoIntMod\n        val xModModModDenoMod = xModModModDenoMod\
    \ / xDenoIntMod\n        val xModModModMod = xNum.head * xModModModDenoMod\n \
    \       val xModModModModInt = (xModModModMod).toInt\n        val xModModModModDeno\
    \ = xModModModModInt / nDenoInt\n        val xModModModModDenoMod = xModModModDeno\
    \ * nDenoIntMod\n        val xModModModDenoMod = xModModModDenoMod / xDenoIntMod\n\
    \        val ", "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"\
    /\").toInt\n        if(xNum.sum == nNum.sum && xNum.product() == nNum.product()){\n\
    \            return true\n        }\n        return false"]
stop_tokens:
- "\n    }\n"
