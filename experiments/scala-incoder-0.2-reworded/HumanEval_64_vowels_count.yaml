name: HumanEval_64_vowels_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function vowels_count which takes a string representing\n    //\
  \ a word as input and returns the number of vowels in the string.\n    // Vowels\
  \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel, but\
  \ only when it is at the end of the given word.\n    // Example:\n    // >>> vowelsCount((\"\
  abcde\"))\n    // (2l)\n    // >>> vowelsCount((\"ACEDY\"))\n    // (3l)\n    def\
  \ vowelsCount(s : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(vowelsCount((\"abcde\"\
  )) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"\
  key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"\
  keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"\
  ACEDY\")) == (3l));\n    }\n\n}\n"
completions: ["        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n     \
    \   val vowelsCount = s.toCharArray.filter(c => vowels.contains(c)).size\n   \
    \     vowelsCount", "        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"\
    u\")\n        val vowelsCount = s.toCharArray.filter(c => vowels.contains(c)).size\n\
    \        vowelsCount", "        val vowels = \"aeiouAEIOU\"\n        val vowelsCount\
    \ = mutable.HashSet[Char]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount += c\n            }\n        }\n        vowelsCount.size",
  "        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = s.filter(x => vowels.contains(x)).length\n        vowelsCount", "        val\
    \ vowels = Array('a','e','i','o','u')\n        val vowels_count = s.length\n \
    \       val vowels_count_in_string = vowels.count(s => s.toLowerCase contains\
    \ s.toLowerCase)\n        vowels_count_in_string * vowels_count", "        val\
    \ vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount = mutable.HashMap[Char,\
    \ Int]()\n        for (c <- s) {\n            if (vowels.contains(c)) {\n    \
    \            vowelsCount(c) = vowelsCount(c) + 1\n            }\n        }\n \
    \       vowelsCount.values.sum", "        var count = 0\n        var vowels =\
    \ \"aeiou\"\n        var lastVowel = vowels.last\n        var lastChar = s.last\n\
    \        while (lastChar != lastVowel) {\n            if (lastChar == s.last)\
    \ {\n                count += 1\n            }\n            lastChar = s.last\n\
    \        }\n        count + 1", "        var count = 0\n        for (c <- s) {\n\
    \            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                count += 1\n            }\n        }\n        count", "     \
    \   val vowels = \"aeiou\"\n        val vowelsCount = mutable.HashSet[Char]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                vowelsCount += s.charAt(i)\n        vowelsCount.size", "    \
    \    val vowels = \"aeiouAEIOU\".toSet\n        val vowelsCount = s.count(vowels)\n\
    \        vowelsCount", "        val vowels = Array(\"a\", \"e\", \"i\", \"o\"\
    , \"u\")\n        val vowels_count = s.count(x => vowels.contains(x))\n      \
    \  vowels_count", "        val vowels = \"aeiouAEIOU\".toSet\n        val vowelsCount\
    \ = s.count(vowels)\n        vowelsCount", "        val vowels = Set(\"a\", \"\
    e\", \"i\", \"o\", \"u\")\n        val vowelsCount = s.filter(x => vowels.contains(x)).size\n\
    \        vowelsCount", "        val vowels = \"aeiou\"\n        val vowelsCount\
    \ = s.count(vowels)\n        val vowelsCount2 = s.count(vowels.toUpperCase)\n\
    \        val vowelsCount3 = s.count(vowels.toLowerCase)\n        vowelsCount +\
    \ vowelsCount2 + vowelsCount3", "        val vowels = Set(\"a\", \"e\", \"i\"\
    , \"o\", \"u\")\n        val vowelsCount = s.count(vowels)\n        val yCount\
    \ = s.lastIndexOf('y')\n        val yCountCount = if (yCount != -1) s.lastIndexOf('y',\
    \ yCount) else s.length\n        val yCountCountCount = if (yCountCount != -1)\
    \ s.lastIndexOf('y', yCountCount + 1) else s.length\n        val yCountCountCountCount\
    \ = if (yCountCountCount != -1) s.lastIndexOf('y', yCountCountCount + 2) else\
    \ s.length\n        val yCountCountCountCountCount = if (yCountCountCountCount\
    \ != -1) s.lastIndexOf('y', yCountCountCountCount + 3) else s.length\n       \
    \ val yCountCountCountCountCountCount = if (yCountCountCountCountCount != -1)\
    \ s.lastIndexOf('y', yCountCountCountCountCount + 4) else s.length\n        val\
    \ yCountCountCountCountCountCountCount = if (yCountCountCountCountCountCount !=\
    \ -1) s.lastIndexOf('y', yCountCountCountCountCountCount + 5) else s.length\n\
    \        val yCountCountCountCountCountCountCountCount = if (yCountCountCountCountCountCountCount\
    \ != -1) s.lastIndexOf('y', yCountCountCountCountCountCountCount + 6) else s.length\n\
    \        val yCountCountCountCountCountCountCountCountCount = if (yCountCountCountCountCountCountCount\
    \ != -1) s.lastIndexOf('y', yCountCountCountCountCountCountCount + 7) else s.length\n\
    \        val yCountCountCountCountCountCountCountCountCountCount = if (yCountCountCountCountCountCountCountCount\
    \ != -1) s.lastIndexOf('y', yCountCountCountCountCountCountCountCount + 8) else\
    \ s.length\n        val yCountCountCountCountCountCountCountCountCountCountCount\
    \ = if (yCountCountCountCountCountCountCountCountCount != -1) s.lastIndexOf('y',\
    \ yCountCountCountCountCountCountCountCountCount + 9) else s.length\n        val\
    \ yCountCountCountCountCountCountCountCountCountCountCount = if (yCountCountCountCountCountCountCountCountCountCount\
    \ != -1) s.lastIndexOf('y', yCountCountCountCountCountCountCountCountCount + 10)\
    \ else s.length\n        val yCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = if (yCountCountCountCountCountCountCountCountCountCount != -1) s.lastIndexOf('y',\
    \ yCountCountCountCountCountCountCountCountCountCount + 11) else s.length\n  \
    \      val yCountCountCountCountCountCountCountCountCountCountCountCount = if\
    \ (yCountCountCountCountCountCountCountCountCountCountCount != -1) s.", "    \
    \    val vowels = \"aeiouAEIOU\".toSet\n        val vowelsCount = s.toList.filter(x\
    \ => vowels.contains(x)).length\n        vowelsCount", "        val vowels = Array('a',\
    \ 'e', 'i', 'o', 'u')\n        val vowelsCount = mutable.HashSet[Char]()\n   \
    \     for (c <- s) {\n            if (vowels.contains(c)) {\n                vowelsCount\
    \ += c\n            }\n        }\n        vowelsCount.size", "        var count\
    \ = 0\n        var vowels = \"aeiou\"\n        var vowelsSet = scala.collection.mutable.Set[Char]()\n\
    \        for (c <- s) {\n            if (vowels.contains(c)) {\n             \
    \   count += 1\n                vowelsSet.add(c)\n            }\n        }\n \
    \       if (vowelsSet.size == s.length - 1) {\n            count += 1\n      \
    \  }\n        vowelsSet.size", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ vowelsCount = mutable.HashMap[Char, Int]()\n        for (c <- s) {\n       \
    \     if (vowels.contains(c)) {\n                vowelsCount(c) += 1\n       \
    \     }\n        }\n        vowelsCount.values.sum", "        var count = 0\n\
    \        var vowels = \"aeiou\"\n        var lastVowel = vowels.last\n       \
    \ var lastChar = s.last\n        for(i <- 0 until s.length){\n            val\
    \ c = s.charAt(i)\n            if(vowels.contains(c)){\n                count\
    \ += 1\n            }\n            if(c == lastChar){\n                count +=\
    \ 1\n            }\n        }\n        if(lastVowel == lastChar){\n          \
    \  count += 1\n        }\n        count * vowels.length", "        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = s.toCharArray.filter(c\
    \ => vowels.contains(c)).length\n        vowelsCount", "        var count = 0\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) == 'a' || s.charAt(i)\
    \ == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u')\n\
    \                count += 1\n        count += s.length - vowelCount(s)\n     \
    \   count", "        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n \
    \       val vowels_count = s.toCharArray.filter(x => vowels.contains(x)).length\n\
    \        vowels_count", "        val vowels = \"aeiou\"\n        val vowelsCount\
    \ = s.toCharArray.filter(c => vowels.contains(c.toString)).size\n        vowelsCount",
  "        var count = 0\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' ||\
    \ s.charAt(i) == 'u')\n                count += 1\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) == 'y')\n                count += 1\n        count\
    \ * s.length", "        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val vowelsCount = mutable.HashMap[String, Long]()\n        for (c <-\
    \ s) {\n            if (vowels.contains(c)) {\n                vowelsCount.getOrElseUpdate(c,\
    \ 0L) += 1\n            }\n        }\n        vowelsCount.values.sum", "     \
    \   val vowels = \"aeiou\"\n        val vowelsCount = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (vowels.contains(c)) {\n             \
    \   vowelsCount += c\n            }\n        }\n        vowelsCount.size", " \
    \       val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = s.toCharArray.filter(c => vowels.contains(c)).length\n        vowelsCount",
  "        val vowels = \"aeiou\"\n        val vowelsCount = mutable.HashMap[Char,\
    \ Int]()\n        for (c <- s) {\n            if (vowels.contains(c)) {\n    \
    \            vowelsCount(c) = vowelsCount(c) + 1\n            }\n        }\n \
    \       vowelsCount.size", "        val vowels = \"aeiou\"\n        val vowelsCount\
    \ = s.count(vowels.toCharArray)\n        vowelsCount", "        var count = 0\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) == 'a' || s.charAt(i)\
    \ == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u')\n\
    \                count += 1\n        count += s.length - vowelCount(s.substring(s.length\
    \ - 1))\n        count", "        val vowels = Array(\"a\", \"e\", \"i\", \"o\"\
    , \"u\")\n        val vowelsCount = mutable.HashSet[String]()\n        for (i\
    \ <- 0 until s.length)\n            if (vowels(i) == s.charAt(i))\n          \
    \      vowelsCount += s.charAt(i)\n        vowelsCount.size", "        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = s.filter(x\
    \ => vowels.contains(x)).length\n        vowelsCount", "        var vowelCount\
    \ = 0\n        for (i <- 0 until s.length)\n            if (s.charAt(i) == 'a'\
    \ || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i)\
    \ == 'u')\n                vowelCount += 1\n        vowelCount", "        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = s.count(vowels)\n\
    \        vowelsCount + (if (s.endsWith(\"y\")) 1 else 0)", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val vowelsCount = s.count(vowels)\n        vowelsCount",
  "        val vowels = mutable.Set[Char]('a','e','i','o','u')\n        val vowelsCount\
    \ = mutable.Map[Char,Long]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount(c) = vowelsCount(c) + 1\n            }\n    \
    \    }\n        vowelsCount.values.sum", "        val vowels = Array(\"a\", \"\
    e\", \"i\", \"o\", \"u\")\n        val vowelsCount = s.toCharArray.filter(c =>\
    \ vowels.contains(c)).length\n        vowelsCount", "        val vowels = \"aeiou\"\
    \n        val vowelsCount = mutable.HashMap[Char, Int]()\n        for (c <- s)\
    \ {\n            if (vowels.contains(c)) {\n                vowelsCount(c) = vowelsCount(c)\
    \ + 1\n            }\n        }\n        vowelsCount.values.sum", "        val\
    \ vowels = \"aeiouAEIOU\".toCharArray\n        var count = 0\n        for (i <-\
    \ 0 until s.length)\n            if (vowels(i) == s.charAt(i))\n             \
    \   count += 1\n        count", "        val vowels = Set(\"a\", \"e\", \"i\"\
    , \"o\", \"u\")\n        val vowelsCount = s.toCharArray.filter(c => vowels.contains(c)).size\n\
    \        vowelsCount", "        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i'\
    \ || s.charAt(i) == 'o' || s.charAt(i) == 'u')\n                count += 1\n \
    \       count + 1", "        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"\
    u\")\n        val vowelsCount = mutable.HashSet[String]()\n        for (c <- s)\
    \ {\n            if (vowels.contains(c)) {\n                vowelsCount += c\n\
    \            }\n        }\n        vowelsCount.size", "        val vowels = Array(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = mutable.HashMap[String,\
    \ Long]()\n        for (c <- s) {\n            vowelsCount.getOrElse(c, 0L) +=\
    \ 1\n        }\n        vowelsCount.values.sum", "        var count = 0\n    \
    \    var vowels = \"aeiou\"\n        var lastVowel = vowels.last\n        var\
    \ lastChar = s.last\n        for(i <- 0 until s.length){\n            if(vowels.contains(s.charAt(i))){\n\
    \                count += 1\n            }\n            if(lastChar == s.charAt(i)\
    \ && lastVowel == s.charAt(i)){\n                count += 1\n            }\n \
    \       }\n        count", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\"\
    , \"u\")\n        var count = 0\n        var lastVowel = vowels.head\n       \
    \ for (letter <- s) {\n            if (vowels.contains(letter)) {\n          \
    \      count += 1\n            } else {\n                if (lastVowel == vowels.last)\
    \ {\n                    count += 1\n                }\n                lastVowel\
    \ = vowels.head\n            }\n        }\n        count", "        val vowels\
    \ = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowels_count = s.toCharArray.filter(c\
    \ => vowels.contains(c)).length\n        vowels_count", "        var count = 0\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) == 'a' || s.charAt(i)\
    \ == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u')\n\
    \                count += 1\n        if (s.charAt(s.length - 1) == 'y')\n    \
    \        count += 1\n        count", "        var count = 0\n        for (i <-\
    \ 0 until s.length)\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e'\
    \ || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u')\n       \
    \         count += 1\n        count += s.length - vowelsCount(s.substring(0,s.length-1))\n\
    \        count", "        var count = 0\n        var vowels = \"aeiou\"\n    \
    \    var vowelsCount = s.toCharArray.filter(c => vowels.contains(c.toString)).size\n\
    \        vowelsCount = vowelsCount.toLong\n        count = count + vowelsCount\n\
    \        return count", "        val vowels = \"aeiouAEIOU\".toSet\n        val\
    \ vowelsCount = s.toCharArray.filter(c => vowels.contains(c)).size\n        vowelsCount",
  "        val vowels = \"aeiou\"\n        val vowelsCount = s.count(vowels.toCharArray)\n\
    \        vowelsCount + vowelsCount.toLong", "        var count = 0\n        var\
    \ lastVowel = s.last\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowelIndex\
    \ = s.length - 1\n        var lastVowelIndex = s.length - 1\n        var lastVowel",
  "        val vowels = mutable.Set[Char]('a','e','i','o','u')\n        val vowelsCount\
    \ = mutable.Map[Char,Long]()\n        for(c <- s) {\n            if(vowels.contains(c))\
    \ {\n                vowelsCount(c) = vowelsCount(c) + 1\n            }\n    \
    \    }\n        vowelsCount.values.sum", "        var count = 0\n        for (i\
    \ <- 0 until s.length)\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e'\
    \ || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u')\n       \
    \         count += 1\n        return count", "        val vowels = mutable.Set[Char]('a','e','i','o','u')\n\
    \        val vowelsCount = mutable.Map[Char,Long]()\n        for (c <- s) {\n\
    \            if (vowels.contains(c)) {\n                vowelsCount(c) = vowelsCount(c)\
    \ + 1\n            }\n        }\n        vowelsCount.values.sum", "        val\
    \ vowels = \"aeiouAEIOU\".toSet\n        val vowelsCount = s.toCharArray.filter(c\
    \ => vowels.contains(c)).size\n        vowelsCount", "        var count = 0\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n       \
    \         count += 1\n            }\n        }\n        count", "        val vowels\
    \ = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = mutable.HashSet[String]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                vowelsCount += s.charAt(i)\n        vowelsCount.size", "    \
    \    var count = 0\n        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n \
    \               count += 1\n            }\n        }\n        count", "      \
    \  val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = s.filter(x => vowels.contains(x)).size\n        vowelsCount", "        val\
    \ vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount =\
    \ mutable.HashSet[String]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount += c\n            }\n        }\n        vowelsCount.size",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = s.toCharArray.filter(c => vowels.contains(c)).length\n        vowelsCount",
  "        val vowels = \"aeiou\"\n        val vowelsCount = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (vowels.contains(c)) {\n             \
    \   vowelsCount += c\n            }\n        }\n        vowelsCount.size", " \
    \       val vowels = mutable.Set[Char]('a','e','i','o','u')\n        val vowelsCount\
    \ = mutable.Map[Char, Long]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount(c) = vowelsCount(c) + 1\n            }\n    \
    \    }\n        vowelsCount.values.sum", "        val vowels = Set(\"a\", \"e\"\
    , \"i\", \"o\", \"u\")\n        val vowelsCount = s.filter(x => vowels.contains(x)).size\n\
    \        vowelsCount", "        val vowels = \"aeiou\"\n        val vowelsCount\
    \ = s.count(vowels)\n        val vowelsCount2 = s.count(vowels.toUpperCase)\n\
    \        val vowelsCount3 = s.count(vowels.toLowerCase)\n        vowelsCount +\
    \ vowelsCount2 + vowelsCount3", "        val vowels = \"aeiou\"\n        val vowelsCount\
    \ = s.toCharArray.filter(c => vowels.contains(c.toString)).size\n        vowelsCount",
  "        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var count\
    \ = 0\n        for (i <- 0 until s.length)\n            if (vowels(i) == s(i)\
    \ && s(i) != \"y\")\n                count += 1\n        count", "        val\
    \ vowels = \"aeiouAEIOU\".toList\n        var count = 0\n        for(i <- 0 until\
    \ s.length){\n            count += vowels.count(s.charAt(i).toChar)\n        }\n\
    \        count", "        val vowels = \"aeiou\"\n        val vowelsCount = mutable.HashSet[String]()\n\
    \        for (c <- s) {\n            if (vowels.contains(c)) {\n             \
    \   vowelsCount += c\n            }\n        }\n        vowelsCount.size", " \
    \       val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var count\
    \ = 0\n        var lastVowel = -1\n        for (i <- 0 until s.length - 1) {\n\
    \            if (vowels(s(i))) {\n                count += 1\n               \
    \ if (lastVowel != -1) {\n                    if (s(i) == s(lastVowel)) {\n  \
    \                      count += 1\n                    }\n                }\n\
    \                lastVowel = s(i)\n            }\n        }\n        count", " \
    \       val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = s.toCharArray.filter(c => vowels.contains(c)).length\n        vowelsCount",
  "        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = s.toCharArray.filter(c => vowels.contains(c)).size\n        vowelsCount",
  "        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowels_count\
    \ = s.toCharArray.filter(c => vowels.contains(c)).length\n        vowels_count",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = s.filter(vowels.contains).size\n        vowelsCount", "        val vowels\
    \ = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowels_count = s.toCharArray.filter(c\
    \ => vowels.contains(c)).length\n        vowels_count", "        val vowels =\
    \ Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount = s.toCharArray.filter(c\
    \ => vowels.contains(c)).length\n        vowelsCount", "        var count = 0\n\
    \        for (c <- s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n                count += 1\n            }\n        }\n\
    \        count", "        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )\n        var count = 0\n        for (i <- 0 until s.length)\n            if\
    \ (vowels(i) == s(i))\n                count += 1\n        count ", "        val\
    \ vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var count = 0\n \
    \       var lastVowel = vowels(0)\n        var lastChar = s(0)\n        for (i\
    \ <- 1 to s.length-1) {\n            if (vowels(i) == lastVowel) {\n         \
    \       count += 1\n            } else {\n                count = 0\n        \
    \    }\n            lastChar = s(i)\n            lastVowel = vowels(i)\n     \
    \   }\n        count", "        val vowels = mutable.Set[Char]('a','e','i','o','u')\n\
    \        val vowelsCount = mutable.Map[Char,Long]()\n        for (c <- s) {\n\
    \            if (vowels.contains(c)) {\n                vowelsCount(c) = vowelsCount(c)\
    \ + 1\n            }\n        }\n        vowelsCount.values.sum", "        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = s.filter(x\
    \ => vowels.contains(x)).length\n        vowelsCount", "        var count = 0\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) == 'a' || s.charAt(i)\
    \ == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u')\n\
    \                count += 1\n        if (s.charAt(s.length - 1) == 'y')\n    \
    \        count += 1\n        count", "        val vowels = Set('a','e','i','o','u')\n\
    \        val vowels_count = s.length\n        val vowels_count_in_string = vowels.count(s.charAt(s.length-1))\n\
    \        vowels_count_in_string", "        val vowels = \"aeiou\"\n        val\
    \ vowelsCount = mutable.HashMap[Char, Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.contains(s.charAt(i)))\n                vowelsCount(s.charAt(i))\
    \ += 1\n        vowelsCount.size", "        val vowels = Set(\"a\", \"e\", \"\
    i\", \"o\", \"u\")\n        val vowelsCount = s.toCharArray.filter(c => vowels.contains(c)).length\n\
    \        vowelsCount", "        var vowels = mutable.Set[Char]()\n        var\
    \ count = 0\n        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                count += 1\n            else\n                vowels += s.charAt(i)\n\
    \        vowels.size", "        val vowels = \"aeiou\"\n        val vowelsCount\
    \ = mutable.HashMap[Char, Int]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount(c) += 1\n            }\n        }\n        vowelsCount.values.sum",
  "        val vowels = mutable.Set[Char]('a','e','i','o','u')\n        val vowelsCount\
    \ = mutable.Map[Char,Long]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount(c) = vowelsCount(c) + 1\n            }\n    \
    \    }\n        vowelsCount.values.sum", "        val vowels = \"aeiou\"\n   \
    \     val vowelsCount = mutable.HashSet[Char]()\n        for (c <- s) {\n    \
    \        if (vowels.contains(c)) {\n                vowelsCount += c\n       \
    \     }\n        }\n        vowelsCount.size", "        val vowels = Array(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = s.toCharArray.filter(c\
    \ => vowels.contains(c)).length\n        vowelsCount", "        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = s.toCharArray.filter(c\
    \ => vowels.contains(c)).size\n        vowelsCount", "        var count = 0\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) == 'a' || s.charAt(i)\
    \ == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u')\n\
    \                count += 1\n        count + (s.charAt(s.length - 1) == 'y' ?\
    \ 1 : 0)", "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount\
    \ = mutable.Map[Char, Long]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount(c) += 1\n            }\n        }\n        vowelsCount.values.sum",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = s.toCharArray.filter(c => vowels.contains(c)).length\n        vowelsCount",
  "        val vowels = \"aeiou\"\n        val vowelsCount = mutable.HashSet[Char]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                vowelsCount += s.charAt(i)\n        vowelsCount.size", "    \
    \    val vowels = mutable.Set[Char]('a','e','i','o','u')\n        val vowelsCount\
    \ = mutable.Map[Char, Long]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount(c) = vowelsCount(c) + 1\n            }\n    \
    \    }\n        vowelsCount.values.sum", "        val vowels = Array(\"a\", \"\
    e\", \"i\", \"o\", \"u\")\n        var count = 0\n        for(i <- 0 until s.length)\n\
    \            if(vowels(i) == s(i))\n                count += 1\n        count",
  "        var count = 0\n        for (i <- 0 until s.length)\n            if (s.charAt(i)\
    \ == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' ||\
    \ s.charAt(i) == 'u')\n                count += 1\n        count += s.length -\
    \ vowelCount(s)\n        count", "        val vowels = Set(\"a\", \"e\", \"i\"\
    , \"o\", \"u\")\n        val vowelsCount = s.count(x => vowels.contains(x))\n\
    \        vowelsCount", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"\
    u\")\n        val vowelsCount = s.filter(x => vowels.contains(x)).length\n   \
    \     vowelsCount", "        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"\
    u\")\n        val vowels_count = s.toCharArray.filter(c => vowels.contains(c)).length\n\
    \        vowels_count", "        val vowels = Array(\"a\", \"e\", \"i\", \"o\"\
    , \"u\")\n        var count = 0\n        for (i <- 0 until s.length)\n       \
    \     if (vowels(i) == s(i)) {\n                count += 1\n            }\n  \
    \      count", "        val vowels = \"aeiou\"\n        var count = 0\n      \
    \  for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i)) >=\
    \ 0)\n                count += 1\n        count", "        val vowels = Array('a',\
    \ 'e', 'i', 'o', 'u')\n        val vowelsCount = s.toCharArray.filter(c => vowels.contains(c)).length\n\
    \        vowelsCount", "        var vowels = mutable.Set[Char]()\n        var\
    \ count = 0\n        for (c <- s) {\n            if (vowels.contains(c)) {\n \
    \               count += 1\n            }\n            vowels += c\n        }\n\
    \        vowels.size", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"\
    u\")\n        var count = 0\n        for (i <- 0 until s.length)\n           \
    \ if (vowels.contains(s.charAt(i)))\n                count += 1\n        count",
  "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount =\
    \ mutable.HashMap[Char, Int]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount(c) = vowelsCount(c) + 1\n            }\n    \
    \    }\n        vowelsCount.values.sum", "        val vowels = Array(\"a\", \"\
    e\", \"i\", \"o\", \"u\")\n        val vowelsCount = mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until s.length - 1) {\n            if (vowels(i) == s(i))\
    \ {\n                vowelsCount(s(i)) = vowelsCount(s(i)) + 1\n            }\n\
    \        }\n        vowelsCount.values.sum", "        val vowels = Array('a',\
    \ 'e', 'i', 'o', 'u')\n        val vowelsCount = mutable.HashSet[Char]()\n   \
    \     for (c <- s) {\n            if (vowels.contains(c)) {\n                vowelsCount\
    \ += c\n            }\n        }\n        vowelsCount.size", "        val vowels\
    \ = Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount = mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) == s(i) && s(i)\
    \ != 'y')\n                vowelsCount += s(i)\n        vowelsCount.length", " \
    \       val vowels = \"aeiouAEIOU\"\n        var count = 0\n        for (i <-\
    \ 0 until s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n     \
    \           count += 1\n        count", "        val vowels = Array('a', 'e',\
    \ 'i', 'o', 'u')\n        val vowelsCount = mutable.HashMap[Char, Int]()\n   \
    \     for (c <- s) {\n            if (vowels.contains(c)) {\n                vowelsCount(c)\
    \ += 1\n            }\n        }\n        vowelsCount.values.sum", "        val\
    \ vowels = Set('a','e','i','o','u')\n        val vowelsCount = s.filter(x => vowels.contains(x)).length\n\
    \        vowelsCount", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"\
    u\")\n        val vowelsCount = mutable.Set[String]()\n        for (c <- s) {\n\
    \            if (vowels.contains(c)) {\n                vowelsCount += c\n   \
    \         }\n        }\n        vowelsCount.size", "        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = s.toCharArray.filter(c\
    \ => vowels.contains(c)).size\n        vowelsCount", "        val vowels = Array(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowels_count = s.toCharArray.filter(c\
    \ => vowels.contains(c)).size\n        vowels_count", "        val vowels = Array(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var count = 0\n        for(i <- 0 until\
    \ s.length)\n            if(vowels(i) == s(i))\n                count += 1\n \
    \       count", "        val vowels = \"aeiouAEIOU\"\n        val vowelsCount\
    \ = mutable.HashMap[Char, Long]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount(c) += 1\n            }\n        }\n        vowelsCount.values.sum",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = s.count(x => vowels.contains(x))\n        vowelsCount", "        val vowels\
    \ = \"aeiou\"\n        val vowelsCount = mutable.HashSet[String]()\n        for\
    \ (c <- s) {\n            if (vowels.contains(c)) {\n                vowelsCount\
    \ += c\n            }\n        }\n        vowelsCount.size", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val vowelsCount = mutable.HashMap[Char, Int]()\n \
    \       for (c <- s) {\n            if (vowels.contains(c)) {\n              \
    \  vowelsCount(c) += 1\n            }\n        }\n        vowelsCount.values.sum",
  "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount =\
    \ mutable.HashSet[Char]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount += c\n            }\n        }\n        vowelsCount.size",
  "        val vowels = \"aeiou\"\n        var count = 0\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.indexOf(s.charAt(i)) != -1)\n            \
    \    count += 1\n        count", "        val vowels = mutable.Set[Char]('a','e','i','o','u')\n\
    \        val vowels_count = mutable.Map[Char, Long]()\n        for (c <- s) {\n\
    \            if (vowels.contains(c)) {\n                vowels_count(c) = vowels_count(c)\
    \ + 1\n            }\n        }\n        vowels_count.values.sum", "        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = s.toList.filter(x\
    \ => vowels.contains(x)).size\n        vowelsCount", "        val vowels = Array('a','e','i','o','u')\n\
    \        val vowelsCount = mutable.HashSet[Char]()\n        for (c <- s) {\n \
    \           if (vowels.contains(c)) {\n                vowelsCount += c\n    \
    \        }\n        }\n        vowelsCount.size", "        var count = 0\n   \
    \     for (i <- 0 until s.length)\n            if (s.charAt(i) == 'a' || s.charAt(i)\
    \ == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u')\n\
    \                count += 1\n        if (s.charAt(s.length - 1) == 'y')\n    \
    \        count += 1\n        count", "        val vowels = mutable.Set[Char]('a','e','i','o','u')\n\
    \        val vowelsCount = mutable.Map[Char,Long]()\n        for (c <- s) {\n\
    \            if (vowels.contains(c)) {\n                vowelsCount(c) = vowelsCount(c)\
    \ + 1\n            }\n        }\n        vowelsCount.values.sum", "        var\
    \ count = 0\n        for (i <- 0 until s.length)\n            if (s.charAt(i)\
    \ == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' ||\
    \ s.charAt(i) == 'u')\n                count += 1\n        count += s.length -\
    \ vowelsCount(s.substring(s.length - 1))\n        count", "        val vowels\
    \ = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i)) != -1)\n                count +=\
    \ 1\n        count ", "        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i'\
    \ || s.charAt(i) == 'o' || s.charAt(i) == 'u')\n                count += 1\n \
    \       if (s.charAt(s.length - 1) == 'y')\n            count += 1\n        count ",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = s.count(vowels)\n        val lastVowel = vowels.last\n        val lastVowelIndex\
    \ = s.lastIndexOf(lastVowel)\n        if (lastVowelIndex == s.length - 1)\n  \
    \          vowelsCount\n        else\n            vowelsCount + vowelsCount(s.substring(lastVowelIndex\
    \ + 1))", "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount\
    \ = mutable.HashSet[Char]()\n        for(i <- 0 until s.length){\n           \
    \ if(vowels(i) == s.charAt(i)){\n                vowelsCount += s.charAt(i)\n\
    \            }\n        }\n        vowelsCount.size", "        var count = 0\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) == 'a' || s.charAt(i)\
    \ == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u')\n\
    \                count += 1\n        count += s.length - vowelCount(s.substring(s.length\
    \ - 1))\n        count", "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n\
    \        val vowelsCount = mutable.HashMap[Char, Int]()\n        for (c <- s)\
    \ {\n            if (vowels.contains(c)) {\n                vowelsCount(c) = vowelsCount(c)\
    \ + 1\n            }\n        }\n        vowelsCount.values.sum", "        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = s.toCharArray.filter(c\
    \ => vowels.contains(c)).size\n        vowelsCount", "        val vowels = \"\
    aeiou\"\n        val vowelsCount = mutable.HashSet[Char]()\n        for(i <- 0\
    \ until s.length)\n            if(vowels.contains(s.charAt(i)))\n            \
    \    vowelsCount += s.charAt(i)\n        vowelsCount.size", "        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = s.count(x\
    \ => vowels.contains(x))\n        vowelsCount", "        val vowels = mutable.Set[Char]('a','e','i','o','u')\n\
    \        val vowelsCount = mutable.Map[Char,Long]()\n        for (c <- s) {\n\
    \            if (vowels.contains(c)) {\n                vowelsCount(c) = vowelsCount(c)\
    \ + 1\n            }\n        }\n        vowelsCount.values.sum", "        val\
    \ vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowels_count\
    \ = s.toCharArray.filter(c => vowels.contains(c)).length\n        vowels_count",
  "        var count = 0\n        for (i <- 0 until s.length)\n            if (s.charAt(i)\
    \ == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' ||\
    \ s.charAt(i) == 'u')\n                count += 1\n        count += s.length -\
    \ vowelsCount(s.substring(s.length - 1))\n        count", "        val vowels\
    \ = Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (vowels.contains(c)) {\n             \
    \   vowelsCount += c\n            }\n        }\n        vowelsCount.size", " \
    \       val vowels = \"aeiou\"\n        val vowels_count = s.length\n        val\
    \ vowels_count_map = mutable.HashMap[String, Long]()\n        val vowels_count_list\
    \ = mutable.ArrayBuffer.empty[String]\n        for (i <- 0 until s.length)\n \
    \       {\n            val c = s.charAt(i)\n            if (vowels.contains(c))\n\
    \            {\n                vowels_count_map.put(s.substring(i,i+1), vowels_count_map.getOrElse(s.substring(i,i+1),\
    \ 0L) + 1)\n                vowels_count_list += s.substring(i,i+1)\n        \
    \    }\n        }\n        vowels_count_map.toList.sortWith(_.compareTo(vowels_count_list.last)\
    \ < 0).last", "        val vowels = \"aeiou\"\n        var count = 0\n       \
    \ for (i <- 0 until s.length)\n            if (vowels(i) == s(i))\n          \
    \      count += 1\n        count ", "        val vowels = Array('a','e','i','o','u')\n\
    \        val vowelsCount = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(vowels(i) == s.charAt(i))\n                vowelsCount += s.charAt(i)\n\
    \        vowelsCount.size", "        val vowels = mutable.Set[Char]('a','e','i','o','u')\n\
    \        val vowelsCount = mutable.Map[Char,Long]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.contains(s.charAt(i)))\n                vowelsCount(s.charAt(i))\
    \ += 1\n        vowelsCount.values.sum", "        var count = 0\n        for(i\
    \ <- 0 until s.length)\n            if(s.charAt(i) == 'a' || s.charAt(i) == 'e'\
    \ || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u')\n       \
    \         count += 1\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ == 'y')\n                count += 1\n        count * s.length", "        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = s.toCharArray.filter(c\
    \ => vowels.contains(c)).length\n        vowelsCount", "        val vowels = \"\
    aeiou\"\n        val vowelsCount = mutable.HashMap[Char, Int]()\n        for (c\
    \ <- s) {\n            if (vowels.contains(c)) {\n                vowelsCount(c)\
    \ += 1\n            }\n        }\n        vowelsCount.values.sum", "        val\
    \ vowels = \"aeiou\"\n        val vowelsCount = mutable.HashMap[Char, Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                vowelsCount(s.charAt(i)) += 1\n        vowelsCount.size", " \
    \       val vowels = \"aeiouAEIOU\".toCharArray\n        val vowelsCount = mutable.ListBuffer[Char]()\n\
    \        for (c <- s) {\n            if (vowels.contains(c)) {\n             \
    \   vowelsCount += c\n            }\n        }\n        vowelsCount.length", " \
    \       val vowels = Array('a','e','i','o','u')\n        val vowels_count = s.count(x\
    \ => vowels.contains(x))\n        vowels_count", "        val vowels = Array(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = mutable.HashSet[String]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                vowelsCount += s.charAt(i)\n        vowelsCount.size", "    \
    \    val vowels = \"aeiou\"\n        var count = 0\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.contains(s.charAt(i)))\n                count\
    \ += 1\n        count", "        val vowels = \"aeiou\"\n        val vowelsCount\
    \ = mutable.HashMap[Char, Int]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount(c) += 1\n            }\n        }\n        vowelsCount.values.sum",
  "        val vowels = \"aeiou\"\n        var count = 0\n        var i = 0\n    \
    \    while (i < s.length){\n            if (vowels.indexOf(s.charAt(i)) != -1){\n\
    \                count += 1\n            }\n            i += 1\n        }\n  \
    \      count", "        val vowels = \"aeiouAEIOU\"\n        val vowelsCount =\
    \ s.count(vowels.indexOf(_))\n        vowelsCount", "        var vowels = mutable.Set[Char]()\n\
    \        var count = 0\n        for (c <- s) {\n            if (c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowels += c\n\
    \            }\n        }\n        for (c <- vowels) {\n            count += 1\n\
    \        }\n        count", "        val vowels = \"aeiou\"\n        val vowelsCount\
    \ = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n            if(vowels.contains(s.charAt(i)))\n\
    \                vowelsCount += s.charAt(i)\n        vowelsCount.size", "    \
    \    val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (vowels.contains(c)) {\n             \
    \   vowelsCount += c\n            }\n        }\n        vowelsCount.size", " \
    \       val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var count\
    \ = 0\n        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n  \
    \              count += 1\n        count", "        val vowels = Set(\"a\", \"\
    e\", \"i\", \"o\", \"u\")\n        var count = 0\n        var lastVowel = vowels.last\n\
    \        for (v <- vowels) {\n            if (s.endsWith(v)) {\n             \
    \   count += 1\n                lastVowel = v\n            }\n        }\n    \
    \    count + (lastVowel != vowels.last)", "        val vowels = Array('a', 'e',\
    \ 'i', 'o', 'u')\n        val vowels_count = s.toCharArray.filter(c => vowels.contains(c)).length\n\
    \        vowels_count", "        val vowels = \"aeiouAEIOU\"\n        val vowelsCount\
    \ = mutable.HashSet[String]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount += c\n            }\n        }\n        vowelsCount.size",
  "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowels_count =\
    \ s.toCharArray.filter(c => vowels.contains(c)).size\n        vowels_count", " \
    \       val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var count\
    \ = 0\n        for (i <- 0 until s.length)\n            if (vowels(i) == s(i)\
    \ && s(i) != \"y\")\n                count += 1\n        count"]
stop_tokens:
- "\n    }\n"
