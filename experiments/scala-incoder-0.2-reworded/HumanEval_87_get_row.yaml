name: HumanEval_87_get_row
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a 2 dimensional data, as a nested lists,\n    // which is\
  \ similar to matrix, however, unlike matrices,\n    // each row may contain a different\
  \ number of columns.\n    // Given lst, and integer x, find integers x in the list,\n\
  \    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    // each\
  \ tuple is a coordinate - (row, columns), starting with 0.\n    // Sort coordinates\
  \ initially by rows in ascending order.\n    // Also, sort coordinates of the row\
  \ by columns in descending order.\n    // Examples:\n    // >>> getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l))\n    // (List[Tuple2[Long,\
  \ Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))\n    // >>> getRow((List[List[Long]]()),\
  \ (1l))\n    // (List[Tuple2[Long, Long]]())\n    // >>> getRow((List[List[Long]](List[Long](),\
  \ List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l))\n\
  \    // (List[Tuple2[Long, Long]]((2l, 2l)))\n    def getRow(lst : List[List[Long]],\
  \ x : Long) : List[Tuple2[Long, Long]] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long,\
  \ Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))), (2l)).equals((List[Tuple2[Long,\
  \ Long]]((0l, 1l), (1l, 1l), (2l, 1l), (3l, 1l), (4l, 1l), (5l, 1l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 1l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long,\
  \ Long]]((0l, 0l), (1l, 0l), (2l, 1l), (2l, 0l), (3l, 2l), (3l, 0l), (4l, 3l), (4l,\
  \ 0l), (5l, 4l), (5l, 0l), (6l, 5l), (6l, 0l)))));\n    assert(getRow((List[List[Long]]()),\
  \ (1l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong))),\
  \ (2l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](),\
  \ List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l)).equals((List[Tuple2[Long,\
  \ Long]]((2l, 2l)))));\n    }\n\n}\n"
completions: ["        val lst1 = lst.sortWith(_.compareTo(x) < 0)\n        val lst2\
    \ = lst1.sortWith(_.compareTo(x) > 0)\n        val lst3 = lst2.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst4 = lst3.sortWith(_.compareTo(x) > 0)\n        val lst5\
    \ = lst4.sortWith(_.compareTo(x) < 0)\n        val lst6 = lst5.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst7 = lst6.sortWith(_.compareTo(x) < 0)\n        val lst8\
    \ = lst7.sortWith(_.compareTo(x) > 0)\n        val lst9 = lst8.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst10 = lst9.sortWith(_.compareTo(x) > 0)\n        val lst11\
    \ = lst10.sortWith(_.compareTo(x) < 0)\n        val lst12 = lst11.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst13 = lst12.sortWith(_.compareTo(x) < 0)\n        val lst14\
    \ = lst13.sortWith(_.compareTo(x) > 0)\n        val lst15 = lst14.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst16 = lst15.sortWith(_.compareTo(x) > 0)\n        val lst17\
    \ = lst16.sortWith(_.compareTo(x) < 0)\n        val lst18 = lst17.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst19 = lst18.sortWith(_.compareTo(x) < 0)\n        val lst20\
    \ = lst19.sortWith(_.compareTo(x) > 0)\n        val lst21 = lst20.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst22 = lst21.sortWith(_.compareTo(x) > 0)\n        val lst23\
    \ = lst22.sortWith(_.compareTo(x) < 0)\n        val lst24 = lst23.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst25 = lst24.sortWith(_.compareTo(x) < 0)\n        val lst26\
    \ = lst25.sortWith(_.compareTo(x) > 0)\n        val lst27 = lst26.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst28 = lst27.sortWith(_.compareTo(x) > 0)\n        val lst29\
    \ = lst28.sortWith(_.compareTo(x) < 0)\n        val lst30 = lst29.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst31 = lst30.sortWith(_.compareTo(x", "        val lst1 =\
    \ lst.sortWith(_.compareTo(x) < 0)\n        val lst2 = lst1.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst3 = lst2.sortWith(_.compareTo(x) < 0)\n        val lst4\
    \ = lst3.sortWith(_.compareTo(x) > 0)\n        val lst5 = lst4.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst6 = lst5.sortWith(_.compareTo(x) > 0)\n        val lst7\
    \ = lst6.sortWith(_.compareTo(x) < 0)\n        val lst8 = lst7.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst9 = lst8.sortWith(_.compareTo(x) < 0)\n        val lst10\
    \ = lst9.sortWith(_.compareTo(x) > 0)\n        val lst11 = lst10.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst12 = lst11.sortWith(_.compareTo(x) > 0)\n        val lst13\
    \ = lst12.sortWith(_.compareTo(x) < 0)\n        val lst14 = lst13.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst15 = lst14.sortWith(_.compareTo(x) < 0)\n        val lst16\
    \ = lst15.sortWith(_.compareTo(x) > 0)\n        val lst17 = lst16.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst18 = lst17.sortWith(_.compareTo(x) > 0)\n        val lst19\
    \ = lst18.sortWith(_.compareTo(x) < 0)\n        val lst20 = lst19.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst21 = lst20.sortWith(_.compareTo(x) < 0)\n        val lst22\
    \ = lst21.sortWith(_.compareTo(x) > 0)\n        val lst23 = lst22.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst24 = lst23.sortWith(_.compareTo(x) > 0)\n        val lst25\
    \ = lst24.sortWith(_.compareTo(x) < 0)\n        val lst26 = lst25.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst27 = lst26.sortWith(_.compareTo(x) < 0)\n        val lst28\
    \ = lst27.sortWith(_.compareTo(x) > 0)\n        val lst29 = lst28.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst30 = lst29.sortWith(_.compareTo(x) > 0)\n        val lst31\
    \ = lst30.sortWith(_.compareTo(x", "        val lst2 = lst.map(_.toList)\n   \
    \     val lst3 = lst2.map(_.toList)\n        val lst4 = lst3.map(_.toList)\n \
    \       val lst5 = lst4.map(_.toList)\n        val lst6 = lst5.map(_.toList)\n\
    \        val lst7 = lst6.map(_.toList)\n        val lst8 = lst7.map(_.toList)\n\
    \        val lst9 = lst8.map(_.toList)\n        val lst10 = lst9.map(_.toList)\n\
    \        val lst11 = lst10.map(_.toList)\n        val lst12 = lst11.map(_.toList)\n\
    \        val lst13 = lst12.map(_.toList)\n        val lst14 = lst13.map(_.toList)\n\
    \        val lst15 = lst14.map(_.toList)\n        val lst16 = lst15.map(_.toList)\n\
    \        val lst17 = lst16.map(_.toList)\n        val lst18 = lst17.map(_.toList)\n\
    \        val lst19 = lst18.map(_.toList)\n        val lst20 = lst19.map(_.toList)\n\
    \        val lst21 = lst20.map(_.toList)\n        val lst22 = lst21.map(_.toList)\n\
    \        val lst23 = lst22.map(_.toList)\n        val lst24 = lst23.map(_.toList)\n\
    \        val lst25 = lst24.map(_.toList)\n        val lst26 = lst25.map(_.toList)\n\
    \        val lst27 = lst26.map(_.toList)\n        val lst28 = lst27.map(_.toList)\n\
    \        val lst29 = lst28.map(_.toList)\n        val lst30 = lst29.map(_.toList)\n\
    \        val lst31 = lst30.map(_.toList)\n        val lst32 = lst31.map(_.toList)\n\
    \        val lst33 = lst32.map(_.toList)\n        val lst34 = lst33.map(_.toList)\n\
    \        val lst35 = lst34.map(_.toList)\n        val lst36 = lst35.map(_.toList)\n\
    \        val lst37 = lst36.map(_.toList)\n        val lst38 = lst37.map(_.toList)\n\
    \        val lst39 = lst38.map(_.toList)\n        val lst40 = lst39.map(_.toList)\n\
    \        val lst41 = lst40.map(_.toList)\n        val lst42 = lst41.map(_.toList)\n\
    \        val lst43 = lst42.map(_.toList)\n        val lst44 = lst43.map(_.toList)\n\
    \        val lst", "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst2 = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong\
    \ > y.toLong)", "        val row: List[Tuple2[Long, Long]] = lst.map(row => Tuple2(row(0),\
    \ row(row.indexOf(x))))\n        val sorted = row.sortBy(row => row._1)\n    \
    \    val reversed = sorted.reverse\n        reversed.map(row => Tuple2(row._1,\
    \ row._2))", "        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val coords = lst.map(row => row.map(col => (col, row)))\n        val\
    \ sortedCoords = coords.sortBy(_._1).sortBy(_._2)\n        val sortedRows = sortedCoords.map(c\
    \ => (c._2, c._1))\n        val sortedCols = sortedCoords.map(c => (c._1, c._2))\n\
    \        val rowCoords = sortedRows.map(c => (c._2, c._1))\n        val colCoords\
    \ = sortedCols.map(c => (c._1, c._2))\n        val rowCoordsSorted = rowCoords.sortBy(_._1).sortBy(_._2)\n\
    \        val colCoordsSorted = colCoords.sortBy(_._1).sortBy(_._2)\n        val\
    \ rowCoordsSortedWithIndex = rowCoordsSorted.zipWithIndex.sortBy(_._1).sortBy(_._2)\n\
    \        val colCoordsSortedWithIndex = colCoordsSorted.zipWithIndex.sortBy(_._1).sortBy(_._2)\n\
    \        val rowCoordsSortedWithIndexWithIndex = rowCoordsSortedWithIndex.zipWithIndex.sortBy(_._1).sortBy(_._2)\n\
    \        val colCoordsSortedWithIndexWithIndex = colCoordsSortedWithIndex.zipWithIndex.sortBy(_._1).sortBy(_._2)\n\
    \        val rowCoordsSortedWithIndexWithIndexWithIndex = rowCoordsSortedWithIndexWithIndex.zipWithIndex.sortBy(_._1).sortBy(_._2)\n\
    \        val colCoordsSortedWithIndexWithIndexWithIndex = colCoordsSortedWithIndexWithIndex.zipWithIndex.sortBy(_._1).sortBy(_._2)\n\
    \        val rowCoordsSortedWithIndexWithIndexWithIndexWithIndex = rowCoordsSortedWithIndexWithIndexWithIndex.zipWithIndex.sortBy(_._1).sortBy(_._2)\n\
    \        val colCoordsSortedWithIndexWithIndexWithIndexWithIndex = colCoordsSortedWithIndexWithIndexWithIndex.zipWithIndex.sortBy(_._1).sortBy(_._2)\n\
    \        val rowCoordsSortedWithIndexWithIndexWithIndexWithIndexWithIndex = rowCoordsSortedWithIndexWithIndexWithIndexWithIndex.zipWithIndex.sortBy(_._1).sortBy(_._2)\n\
    \        val colCoordsSortedWithIndexWithIndexWithIndexWithIndexWithIndex = colCoordsSortedWithIndexWithIndexWithIndexWithIndex",
  "        val rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n\
    \        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        for\
    \ (i <- 0 until rows) {\n            for (j <- 0 until cols) {\n             \
    \   if (lst(i)(j) == x) {\n                    result.+=(Tuple2(i, j))\n     \
    \           }\n            }\n        }\n        result.sortBy(_._1).reverse",
  "        val rows = lst.map(_.toList)\n        val cols = rows.map(_.length)\n \
    \       val coords = rows.zipWithIndex.map { case (row, i) => i -> row.zipWithIndex.map\
    \ { case (col, j) => j -> col } }\n        coords.sortBy(_._1).sortBy(_._2).map\
    \ { case (i, j) => (i, coords(i)(j)) }", "        val lst2 = lst.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst26 = lst25.sortWith((x, y) => x.toLong > y.toLong", "        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.length)\n\
    \        val cols = ", "        val rows = lst.map(_.size)\n        val cols =\
    \ lst.map(_.head.length)\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        var i = 0\n        while (i < rows.length) {\n           \
    \ val row = lst(i)\n            val col = 0\n            while (col < cols.length)\
    \ {\n                if (row(i) == x(col)) {\n                    result.append((row(i),\
    \ x(col)))\n                }\n                col += 1\n            }\n     \
    \       i += 1\n        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var i =\
    \ 0\n        while (i < rows) {\n            val row = lst(i)\n            var\
    \ j = 0\n            while (j < cols) {\n                val col = lst(i).get(j)\n\
    \                if (col == x) {\n                    result.add(Tuple2(i, j))\n\
    \                }\n                j += 1\n            }\n            i += 1\n\
    \        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse", "     \
    \   val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst2 =\
    \ lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)",
  "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst2\
    \ = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)",
  "        val m = lst.size\n        val n = lst(0).size\n        val result = new\
    \ mutable.ListBuffer[Tuple2[Long, Long]]()\n        var i = 0\n        var j =\
    \ 0\n        var k = 0\n        while (i < m && j < n) {\n            if (lst(i)(j)\
    \ == x) {\n                result.append((i, j))\n                i += 1\n   \
    \             j += 1\n            } else if (lst(i)(j) > x) {\n              \
    \  i += 1\n            } else {\n                j += 1\n            }\n     \
    \   }\n        result.sortWith((x, y) => x._1 < y._1)\n        result.sortWith((x,\
    \ y) => x._2 < y._2)\n        result.toList", "        val lst2 = lst.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst26 = lst25.sortWith((x, y) => x.toLong > y.toLong", "        val lst1 = lst.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst2 = lst1.sortWith((x, y) => y.toLong\
    \ > x.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst4 = lst3.sortWith((x, y) => y.toLong > x.toLong)\n        val\
    \ lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val lst6 = lst5.sortWith((x,\
    \ y) => y.toLong > x.toLong)\n        val lst7 = lst6.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => y.toLong > x.toLong)\n\
    \        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst10 = lst9.sortWith((x, y) => y.toLong > x.toLong)\n        val lst11 = lst10.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x, y) => y.toLong\
    \ > x.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst14 = lst13.sortWith((x, y) => y.toLong > x.toLong)\n        val\
    \ lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val lst16 = lst15.sortWith((x,\
    \ y) => y.toLong > x.toLong)\n        val lst17 = lst16.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => y.toLong > x.toLong)\n\
    \        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst20 = lst19.sortWith((x, y) => y.toLong > x.toLong)\n        val lst21 = lst20.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x, y) => y.toLong\
    \ > x.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst24 = lst23.sortWith((x, y) => y.toLong > x.toLong)\n        val\
    \ lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)", "        val lst1 =\
    \ lst.sortBy(_(0))\n        val lst2 = lst1.sortBy(_(1)) //descending order\n\
    \        val lst3 = lst2.sortBy(_(0)) //ascending order\n        val lst4 = lst3.filter(_._1\
    \ == x).toList\n        val lst5 = lst4.map(_._2)\n        val lst6 = lst5.sortBy(_)\n\
    \        lst6.map(x => (x, x)).sortBy(_._1).map(x => (x._1, x._2))", "       \
    \ val rows = lst.map(row => row.map(x => Tuple2(x, x)))\n        val sorted =\
    \ rows.sortBy(row => row._1)\n        val sortedRows = sorted.map(row => row._2)\n\
    \        val sortedColumns = sorted.map(row => row._1)\n        val result = sortedRows.map(row\
    \ => sortedColumns.map(column => Tuple2(row, column)))\n        result", "   \
    \     val rows = lst.map(_.toList)\n        val rows = rows.sortBy(row => row.length)\n\
    \        val rows = rows.sortBy(row => row.indexOf(x))\n        val rows = rows.sortBy(row\
    \ => row.reverse)\n        val rows = rows.map(row => (row(0), row(1)))\n    \
    \    rows", "        val rows = lst.map(_.toList)\n        val cols = rows.map(_.size)\n\
    \        val rows = rows.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ cols = cols.sortWith((x, y) => x.toLong > y.toLong)\n        val result = rows.map(row\
    \ => row.zipWithIndex.filter(_._1 == x).map(_._2))\n        result.sortWith((x,\
    \ y) => x._1 > y._1).map(x => (x._2, x._1))", "        val lst2 = lst.map(_.toList).toList\n\
    \        val lst3 = lst2.map(_.toList).toList\n        val lst4 = lst3.map(_.toList).toList\n\
    \        val lst5 = lst4.map(_.toList).toList\n        val lst6 = lst5.map(_.toList).toList\n\
    \        val lst7 = lst6.map(_.toList).toList\n        val lst8 = lst7.map(_.toList).toList\n\
    \        val lst9 = lst8.map(_.toList).toList\n        val lst10 = lst9.map(_.toList).toList\n\
    \        val lst11 = lst10.map(_.toList).toList\n        val lst12 = lst11.map(_.toList).toList\n\
    \        val lst13 = lst12.map(_.toList).toList\n        val lst14 = lst13.map(_.toList).toList\n\
    \        val lst15 = lst14.map(_.toList).toList\n        val lst16 = lst15.map(_.toList).toList\n\
    \        val lst17 = lst16.map(_.toList).toList\n        val lst18 = lst17.map(_.toList).toList\n\
    \        val lst19 = lst18.map(_.toList).toList\n        val lst20 = lst19.map(_.toList).toList\n\
    \        val lst21 = lst20.map(_.toList).toList\n        val lst22 = lst21.map(_.toList).toList\n\
    \        val lst23 = lst22.map(_.toList).toList\n        val lst24 = lst23.map(_.toList).toList\n\
    \        val lst25 = lst24.map(_.toList).toList\n        val lst26 = lst25.map(_.toList).toList\n\
    \        val lst27 = lst26.map(_.toList).toList\n        val lst28 = lst27.map(_.toList).toList\n\
    \        val lst29 = lst28.map(_.toList).toList\n        val lst30 = lst29.map(_.toList).toList\n\
    \        val lst31 = lst30.map(_.toList).toList\n        val lst32 = lst31.map(_.toList).toList\n\
    \        val lst33 = lst32.map(_.toList).toList\n        val lst34 = lst33.map(_.toList).toList\n\
    \        val lst35 = lst34.map(_.toList).toList\n        val lst36 = lst35.map(_.toList).toList\n\
    \        val lst37 = lst36.map(_.toList).toList\n        val lst38 = lst37.map(_.toList).toList\n\
    \        val lst39 = ", "        val lst1 = lst.sortWith((x, y) => x.toLong >\
    \ y.toLong)\n        val lst2 = lst1.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n        val lst5 = lst4.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst6 = lst5.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n        val lst10 = lst9.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n        val lst15 = lst14.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst16 = lst15.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n        val lst20 = lst19.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n        val lst25 = lst24.sortWith((x,\
    \ y) => x.toLong > y.toLong)", "        val lst2 = lst.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val lst6 = lst5.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val lst11 = lst10.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val lst16 = lst15.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val lst21 = lst20.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)\n        val lst26 = lst25.sortWith((x,\
    \ y) => x.toLong > y.toLong", "        val rows = lst.map(_.length)\n        val\
    \ cols = lst.map(_.head.length)\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        var row = 0\n        var col = 0\n        while(row < rows\
    \ && col < cols) {\n            val rowValue = lst.map(_.apply(row))\n       \
    \     val colValue = lst.map(_.apply(col))\n            val result = rowValue\
    \ zip colValue\n            val tuple = result.sortBy(_._1).reverse.sortBy(_._2).reverse\n\
    \            result.foreach(x => result.add(tuple))\n            row += 1\n  \
    \          col += 1\n        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse",
  "        val rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n\
    \        val coords = lst.map(row => row.zipWithIndex.sortBy(_._1).reverse)\n\
    \        val rowCoords = coords.map(row => row.map(_.swap))\n        val colCoords\
    \ = coords.map(row => row.map(_.swap))\n        val coordPairs = rowCoords.zip(colCoords).map(row\
    \ => row.map(_._2))\n        val coordPairsSorted = coordPairs.sortBy(_._1).reverse\n\
    \        val coordPairsSortedWithIndex = coordPairsSorted.map(row => row.zipWithIndex.sortBy(_._1).reverse)\n\
    \        val coordPairsSortedWithIndexWithIndex = coordPairsSortedWithIndex.map(row\
    \ => row.zipWithIndex.sortBy(_._1).reverse)\n        val coordPairsSortedWithIndexWithIndexWithIndex\
    \ = coordPairsSortedWithIndexWithIndex.map(row => row.zipWithIndex.sortBy(_._1).reverse)\n\
    \        val coordPairsSortedWithIndexWithIndexWithIndexWithIndex = coordPairsSortedWithIndexWithIndexWithIndex.map(row\
    \ => row.zipWithIndex.sortBy(_._1).reverse)\n        val coordPairsSortedWithIndexWithIndexWithIndexWithIndexWithIndex\
    \ = coordPairsSortedWithIndexWithIndexWithIndexWithIndex.map(row => row.zipWithIndex.sortBy(_._1).reverse)\n\
    \        val coordPairsSortedWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex\
    \ = coordPairsSortedWithIndexWithIndexWithIndexWithIndexWithIndex.map(row => row.zipWithIndex.sortBy(_._1).reverse)\n\
    \        val coordPairsSortedWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex\
    \ = coordPairsSortedWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex.map(row\
    \ => row.zipWithIndex.sortBy(_._1).reverse)\n        val coordPairsSortedWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex\
    \ = coordPairsSortedWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWith.map(row\
    \ => row.zipWithIndex.sortBy(_._1).reverse)\n        val coordPairsSortedWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex\
    \ = coordPairsSortedWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWith.map(row\
    \ => row.zipWithIndex.sortBy(_._1).reverse)", "        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        var i = 0\n        while (i < rows.length) {\n           \
    \ var j = 0\n            while (j < cols.length) {\n                if (lst(i)(j)\
    \ == x) {\n                    result.add(Tuple2(i, j))\n                }\n \
    \               j += 1\n            }\n            i += 1\n        }\n       \
    \ result.sortBy(_._1)\n        result.sortBy(_._2, descending = true)\n      \
    \  return result.toList", "        val rows = lst.map(row => row.map(i => Tuple2(i.toLong,\
    \ i.toLong)))\n        val cols = rows.map(_.map(_.toLong))\n        val rows\
    \ = rows.map(_.map(_.toLong))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(_.toLong))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(_.toLong))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(_.toLong))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(_.toLong))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(_.toLong))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(_.toLong))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(_.toLong))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(_.toLong))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(_.toLong))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(_.toLong))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(_.toLong))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(_.toLong))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(_.toLong))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(_.toLong))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(_.toLong))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(_.toLong))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(_.toLong))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(_.toLong))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = ", "        val rows = lst.map(_.toList)\n        val cols\
    \ = rows.map(_.size)\n        val coords = rows.zipWithIndex.map {\n         \
    \   case (row, rowIndex) =>\n                val colIndex = cols.indexOf(row.size)\n\
    \                val coord = rowIndex.toLong -> (colIndex.toLong + 1)\n      \
    \          coord\n        }\n        coords.sortBy(_._1).sortBy(_._2).reverse.map\
    \ {\n            case (coord, index) =>\n                val row = coords.take(index).map(_._1).mkString(\"\
    ,\")\n                val col = coords.take(index).map(_._2).mkString(\",\")\n\
    \                val tuple = Tuple2(row, col)\n                tuple\n       \
    \ }", "        val lst1 = lst.map(_.toList)\n        val lst2 = lst1.map(_.toList)\n\
    \        val lst3 = lst2.map(_.toList)\n        val lst4 = lst3.map(_.toList)\n\
    \        val lst5 = lst4.map(_.toList)\n        val lst6 = lst5.map(_.toList)\n\
    \        val lst7 = lst6.map(_.toList)\n        val lst8 = lst7.map(_.toList)\n\
    \        val lst9 = lst8.map(_.toList)\n        val lst10 = lst9.map(_.toList)\n\
    \        val lst11 = lst10.map(_.toList)\n        val lst12 = lst11.map(_.toList)\n\
    \        val lst13 = lst12.map(_.toList)\n        val lst14 = lst13.map(_.toList)\n\
    \        val lst15 = lst14.map(_.toList)\n        val lst16 = lst15.map(_.toList)\n\
    \        val lst17 = lst16.map(_.toList)\n        val lst18 = lst17.map(_.toList)\n\
    \        val lst19 = lst18.map(_.toList)\n        val lst20 = lst19.map(_.toList)\n\
    \        val lst21 = lst20.map(_.toList)\n        val lst22 = lst21.map(_.toList)\n\
    \        val lst23 = lst22.map(_.toList)\n        val lst24 = lst23.map(_.toList)\n\
    \        val lst25 = lst24.map(_.toList)\n        val lst26 = lst25.map(_.toList)\n\
    \        val lst27 = lst26.map(_.toList)\n        val lst28 = lst27.map(_.toList)\n\
    \        val lst29 = lst28.map(_.toList)\n        val lst30 = lst29.map(_.toList)\n\
    \        val lst31 = lst30.map(_.toList)\n        val lst32 = lst31.map(_.toList)\n\
    \        val lst33 = lst32.map(_.toList)\n        val lst34 = lst33.map(_.toList)\n\
    \        val lst35 = lst34.map(_.toList)\n        val lst36 = lst35.map(_.toList)\n\
    \        val lst37 = lst36.map(_.toList)\n        val lst38 = lst37.map(_.toList)\n\
    \        val lst39 = lst38.map(_.toList)\n        val lst40 = lst39.map(_.toList)\n\
    \        val lst41 = lst40.map(_.toList)\n        val lst42 = lst41.map(_.toList)\n\
    \        val lst43 = lst42.map(_.toList)\n        val lst44 = ", "        val\
    \ rows = lst.map(_.toList).map(_.toLong)\n        val cols = lst.map(_.size)\n\
    \        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        for\
    \ (i <- 0 until rows.size) {\n            val row = rows(i)\n            val col\
    \ = cols(i)\n            val index = row - x\n            if (index >= 0) {\n\
    \                result.add(Tuple2(index, col))\n            }\n        }\n  \
    \      result.sortBy(_._1).reverse", "        val rows = lst.map(_.toList).toList\n\
    \        val cols = rows.map(_.size).toList\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        var i = 0\n        while (i < rows.size) {\n            val\
    \ row = rows(i)\n            val cols = cols(i)\n            val rowIndex = row.indexOf(x)\n\
    \            val colIndex = cols.indexOf(0)\n            if (rowIndex >= 0 &&\
    \ colIndex >= 0) {\n                result.add(Tuple2(rowIndex, colIndex))\n \
    \           }\n            i += 1\n        }\n        result.sortBy(_._1)\n  \
    \      result.sortBy(_._2, descending = true)\n        result.map(x => Tuple2(x._1,\
    \ x._2))", "        val lst1 = lst.sortBy(_.toLong)\n        val lst2 = lst1.sortBy(_.toLong.reverse)\n\
    \        val lst3 = lst2.sortBy(_.toLong.reverse)\n        val lst4 = lst3.sortBy(_.toLong.reverse)\n\
    \        val lst5 = lst4.sortBy(_.toLong.reverse)\n        val lst6 = lst5.sortBy(_.toLong.reverse)\n\
    \        val lst7 = lst6.sortBy(_.toLong.reverse)\n        val lst8 = lst7.sortBy(_.toLong.reverse)\n\
    \        val lst9 = lst8.sortBy(_.toLong.reverse)\n        val lst10 = lst9.sortBy(_.toLong.reverse)\n\
    \        val lst11 = lst10.sortBy(_.toLong.reverse)\n        val lst12 = lst11.sortBy(_.toLong.reverse)\n\
    \        val lst13 = lst12.sortBy(_.toLong.reverse)\n        val lst14 = lst13.sortBy(_.toLong.reverse)\n\
    \        val lst15 = lst14.sortBy(_.toLong.reverse)\n        val lst16 = lst15.sortBy(_.toLong.reverse)\n\
    \        val lst17 = lst16.sortBy(_.toLong.reverse)\n        val lst18 = lst17.sortBy(_.toLong.reverse)\n\
    \        val lst19 = lst18.sortBy(_.toLong.reverse)\n        val lst20 = lst19.sortBy(_.toLong.reverse)\n\
    \        val lst21 = lst20.sortBy(_.toLong.reverse)\n        val lst22 = lst21.sortBy(_.toLong.reverse)\n\
    \        val lst23 = lst22.sortBy(_.toLong.reverse)\n        val lst24 = lst23.sortBy(_.toLong.reverse)\n\
    \        val lst25 = lst24.sortBy(_.toLong.reverse)\n        val lst26 = lst25.sortBy(_.toLong.reverse)\n\
    \        val lst27 = lst26.sortBy(_.toLong.reverse)\n        val lst28 = lst27.sortBy(_.toLong.reverse)\n\
    \        val lst29 = lst28.sortBy(_.toLong.reverse)\n        val lst30 = lst29.sortBy(_.toLong.reverse)\n\
    \        val lst31 = lst30.sortBy(_.toLong.reverse)\n        val lst32 = lst31.sortBy(_.toLong.reverse)\n\
    \        val lst33 = lst32.sortBy(_.toLong.reverse)\n        val lst34 = lst33.sortBy(_.toLong.reverse)\n\
    \        val lst35 = lst34.sortBy(_.toLong.reverse)\n", "        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = 0\n        val col = 0\n        while(row < rows\
    \ && col < cols) {\n            if(lst(row)(col) == x) {\n                result.append((row,\
    \ col))\n                row += 1\n                col += 1\n            } else\
    \ if(lst(row)(col) < x) {\n                row += 1\n            } else {\n  \
    \              col += 1\n            }\n        }\n        result.sortBy(_._1).reverse",
  "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst2\
    \ = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)",
  "        val rowList = lst.map(row => row.zipWithIndex.filter(_._1 == x).map(_._2))\n\
    \        val rowTuples = rowList.map(row => row.map(x => Tuple2(x, row.length)))\n\
    \        rowTuples.sortBy(row => row._2).reverse.sortBy(row => row._1).map(row\
    \ => row._2._1 -> row._2._2)", "        val lst2 = lst.map(_.toList)\n       \
    \ val lst3 = lst2.map(_.toList)\n        val lst4 = lst3.map(_.toList)\n     \
    \   val lst5 = lst4.map(_.toList)\n        val lst6 = lst5.map(_.toList)\n   \
    \     val lst7 = lst6.map(_.toList)\n        val lst8 = lst7.map(_.toList)\n \
    \       val lst9 = lst8.map(_.toList)\n        val lst10 = lst9.map(_.toList)\n\
    \        val lst11 = lst10.map(_.toList)\n        val lst12 = lst11.map(_.toList)\n\
    \        val lst13 = lst12.map(_.toList)\n        val lst14 = lst13.map(_.toList)\n\
    \        val lst15 = lst14.map(_.toList)\n        val lst16 = lst15.map(_.toList)\n\
    \        val lst17 = lst16.map(_.toList)\n        val lst18 = lst17.map(_.toList)\n\
    \        val lst19 = lst18.map(_.toList)\n        val lst20 = lst19.map(_.toList)\n\
    \        val lst21 = lst20.map(_.toList)\n        val lst22 = lst21.map(_.toList)\n\
    \        val lst23 = lst22.map(_.toList)\n        val lst24 = lst23.map(_.toList)\n\
    \        val lst25 = lst24.map(_.toList)\n        val lst26 = lst25.map(_.toList)\n\
    \        val lst27 = lst26.map(_.toList)\n        val lst28 = lst27.map(_.toList)\n\
    \        val lst29 = lst28.map(_.toList)\n        val lst30 = lst29.map(_.toList)\n\
    \        val lst31 = lst30.map(_.toList)\n        val lst32 = lst31.map(_.toList)\n\
    \        val lst33 = lst32.map(_.toList)\n        val lst34 = lst33.map(_.toList)\n\
    \        val lst35 = lst34.map(_.toList)\n        val lst36 = lst35.map(_.toList)\n\
    \        val lst37 = lst36.map(_.toList)\n        val lst38 = lst37.map(_.toList)\n\
    \        val lst39 = lst38.map(_.toList)\n        val lst40 = lst39.map(_.toList)\n\
    \        val lst41 = lst40.map(_.toList)\n        val lst42 = lst41.map(_.toList)\n\
    \        val lst43 = lst42.map(_.toList)\n        val lst44 = lst43.map(_.toList)\n\
    \        val lst", "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst2 = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong\
    \ > y.toLong)", "        val lst1 = lst.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst2 = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst3 = lst2.sortWith((x, y) => x.toLong < y.toLong)\n        val lst4 = lst3.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst7 = lst6.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst13 = lst12.sortWith((x, y) => x.toLong < y.toLong)\n        val lst14 = lst13.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst17 = lst16.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst23 = lst22.sortWith((x, y) => x.toLong < y.toLong)\n        val lst24 = lst23.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong\
    \ < y.toLong)", "        val rows = lst.map(_.toList)\n        val cols = rows.map(_.size)\n\
    \        val rows = rows.map(_.sortBy(_.toLong))\n        val cols = cols.map(_.sortBy(_.toLong.reverse))\n\
    \        val rows = rows.map(_.map(x -> (x, x)))\n        val cols = cols.map(_.map(x\
    \ -> (x, x)))\n        val rows = rows.map(_.map(x -> (x, x)))\n        val cols\
    \ = cols.map(_.map(x -> (x, x)))\n        val rows = rows.map(_.map(x -> (x, x)))\n\
    \        val cols = cols.map(_.map(x -> (x, x)))\n        val rows = rows.map(_.map(x\
    \ -> (x, x)))\n        val cols = cols.map(_.map(x -> (x, x)))\n        val rows\
    \ = rows.map(_.map(x -> (x, x)))\n        val cols = cols.map(_.map(x -> (x, x)))\n\
    \        val rows = rows.map(_.map(x -> (x, x)))\n        val cols = cols.map(_.map(x\
    \ -> (x, x)))\n        val rows = rows.map(_.map(x -> (x, x)))\n        val cols\
    \ = cols.map(_.map(x -> (x, x)))\n        val rows = rows.map(_.map(x -> (x, x)))\n\
    \        val cols = cols.map(_.map(x -> (x, x)))\n        val rows = rows.map(_.map(x\
    \ -> (x, x)))\n        val cols = cols.map(_.map(x -> (x, x)))\n        val rows\
    \ = rows.map(_.map(x -> (x, x)))\n        val cols = cols.map(_.map(x -> (x, x)))\n\
    \        val rows = rows.map(_.map(x -> (x, x)))\n        val cols = cols.map(_.map(x\
    \ -> (x, x)))\n        val rows = rows.map(_.map(x -> (x, x)))\n        val cols\
    \ = cols.map(_.map(x -> (x, x)))\n        val rows = rows.map(_.map(x -> (x, x)))\n\
    \        val cols = cols.map(_.map(x -> (x, x)))\n        val rows = rows.map(_.map(x\
    \ -> (x, x)))\n        val cols = cols.map(_.map(x -> (x, x)))\n        val rows\
    \ = rows.map(_.map(x -> (x, x)))\n        val cols = cols.map(_.map(x -> (x, x)))\n\
    \        val rows = rows.map(_.map(x -> (x, x)))\n        val cols = cols.map(_.map(x\
    \ -> (x, x)))\n        val rows = rows.map(_.map(x -> (x, x)))\n        val cols\
    \ = cols.map(_.map(x -> (x, x)))\n        val rows = rows.map(_.map(", "     \
    \   val lst2 = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst3 =\
    \ lst2.sortWith((x, y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst26 = lst25.sortWith((x, y) => x.toLong > y.toLong",
  "        val lst2 = lst.map(x => x.map(_ + 1))\n        val lst3 = lst2.map(x =>\
    \ x.map(y => y.toLong))\n        val lst4 = lst3.map(x => x.map(y => y.toLong))\n\
    \        val lst5 = lst4.map(x => x.map(y => y.toLong))\n        val lst6 = lst5.map(x\
    \ => x.map(y => y.toLong))\n        val lst7 = lst6.map(x => x.map(y => y.toLong))\n\
    \        val lst8 = lst7.map(x => x.map(y => y.toLong))\n        val lst9 = lst8.map(x\
    \ => x.map(y => y.toLong))\n        val lst10 = lst9.map(x => x.map(y => y.toLong))\n\
    \        val lst11 = lst10.map(x => x.map(y => y.toLong))\n        val lst12 =\
    \ lst11.map(x => x.map(y => y.toLong))\n        val lst13 = lst12.map(x => x.map(y\
    \ => y.toLong))\n        val lst14 = lst13.map(x => x.map(y => y.toLong))\n  \
    \      val lst15 = lst14.map(x => x.map(y => y.toLong))\n        val lst16 = lst15.map(x\
    \ => x.map(y => y.toLong))\n        val lst17 = lst16.map(x => x.map(y => y.toLong))\n\
    \        val lst18 = lst17.map(x => x.map(y => y.toLong))\n        val lst19 =\
    \ lst18.map(x => x.map(y => y.toLong))\n        val lst20 = lst19.map(x => x.map(y\
    \ => y.toLong))\n        val lst21 = lst20.map(x => x.map(y => y.toLong))\n  \
    \      val lst22 = lst21.map(x => x.map(y => y.toLong))\n        val lst23 = lst22.map(x\
    \ => x.map(y => y.toLong))\n        val lst24 = lst23.map(x => x.map(y => y.toLong))\n\
    \        val lst25 = lst24.map(x => x.map(y => y.toLong))\n        val lst26 =\
    \ lst25.map(x => x.map(y => y.toLong))\n        val lst27 = lst26.map(x => x.map(y\
    \ => y.toLong))\n        val lst28 = lst27.map(x => x.map(y => y.toLong))\n  \
    \      val lst29 = lst28.map(x => x.map(y ", "        val lst1 = lst.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst2 = lst1.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst5 = lst4.sortWith((x, y) => x.toLong < y.toLong)\n        val lst6 = lst5.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst9 = lst8.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val lst11 = lst10.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst12 = lst11.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst15 = lst14.sortWith((x, y) => x.toLong < y.toLong)\n        val lst16 = lst15.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst19 = lst18.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val lst21 = lst20.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst22 = lst21.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst25 = lst24.sortWith((x, y) => x.toLong < y.toLong)", "        val rows =\
    \ lst.map(_.toList)\n        val rows = rows.sortBy(_(0))\n        val rows =\
    \ rows.sortBy(_(1)) //descending\n        val rows = rows.filter(row => row(0)\
    \ == x)\n        val rows = rows.map(row => (row(0), row(1)))\n        rows",
  "        val lst2 = lst.map(_.toList)\n        val lst3 = lst2.map(_.toList)\n \
    \       val lst4 = lst3.map(_.toList)\n        val lst5 = lst4.map(_.toList)\n\
    \        val lst6 = lst5.map(_.toList)\n        val lst7 = lst6.map(_.toList)\n\
    \        val lst8 = lst7.map(_.toList)\n        val lst9 = lst8.map(_.toList)\n\
    \        val lst10 = lst9.map(_.toList)\n        val lst11 = lst10.map(_.toList)\n\
    \        val lst12 = lst11.map(_.toList)\n        val lst13 = lst12.map(_.toList)\n\
    \        val lst14 = lst13.map(_.toList)\n        val lst15 = lst14.map(_.toList)\n\
    \        val lst16 = lst15.map(_.toList)\n        val lst17 = lst16.map(_.toList)\n\
    \        val lst18 = lst17.map(_.toList)\n        val lst19 = lst18.map(_.toList)\n\
    \        val lst20 = lst19.map(_.toList)\n        val lst21 = lst20.map(_.toList)\n\
    \        val lst22 = lst21.map(_.toList)\n        val lst23 = lst22.map(_.toList)\n\
    \        val lst24 = lst23.map(_.toList)\n        val lst25 = lst24.map(_.toList)\n\
    \        val lst26 = lst25.map(_.toList)\n        val lst27 = lst26.map(_.toList)\n\
    \        val lst28 = lst27.map(_.toList)\n        val lst29 = lst28.map(_.toList)\n\
    \        val lst30 = lst29.map(_.toList)\n        val lst31 = lst30.map(_.toList)\n\
    \        val lst32 = lst31.map(_.toList)\n        val lst33 = lst32.map(_.toList)\n\
    \        val lst34 = lst33.map(_.toList)\n        val lst35 = lst34.map(_.toList)\n\
    \        val lst36 = lst35.map(_.toList)\n        val lst37 = lst36.map(_.toList)\n\
    \        val lst38 = lst37.map(_.toList)\n        val lst39 = lst38.map(_.toList)\n\
    \        val lst40 = lst39.map(_.toList)\n        val lst41 = lst40.map(_.toList)\n\
    \        val lst42 = lst41.map(_.toList)\n        val lst43 = lst42.map(_.toList)\n\
    \        val lst44 = lst43.map(_.toList)\n        val lst", "        val rows\
    \ = lst.map(row => row.zipWithIndex.sortBy(_._1).map(_._2))\n        val cols\
    \ = rows.map(_.map(_.length))\n        val result = rows.map(row => row.zipWithIndex.sortBy(_._1).map(_._2)).map(row\
    \ => row.zipWithIndex.sortBy(_._2).map(_._1)).map(row => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row\
    \ => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row\
    \ => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row\
    \ => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row\
    \ => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row\
    \ => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row\
    \ => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row\
    \ => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row\
    \ => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row\
    \ => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row\
    \ => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row\
    \ => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row\
    \ => row.zipWithIndex.sortBy(_._2).map(_._2)).map(row => row.zipWith", "     \
    \   val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst2 =\
    \ lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)",
  "        val m = lst.size\n        val n = lst(0).size\n        val lst2 = lst.map(_.toList).sortBy(_.reverse).map(_.sortBy(_.reverse))\n\
    \        val lst3 = lst2.map(_.map(x => Tuple2(x, x)))\n        val lst4 = lst3.map(_.sortBy(_._1))\n\
    \        val lst5 = lst4.map(_.sortBy(_._2))\n        val lst6 = lst5.map(_.map(x\
    \ => Tuple2(x, x)))\n        val lst7 = lst6.map(_.map(x => Tuple2(x, x)))\n \
    \       val lst8 = lst7.map(_.map(x => Tuple2(x, x)))\n        val lst9 = lst8.map(_.map(x\
    \ => Tuple2(x, x)))\n        val lst10 = lst9.map(_.map(x => Tuple2(x, x)))\n\
    \        val lst11 = lst10.map(_.map(x => Tuple2(x, x)))\n        val lst12 =\
    \ lst11.map(_.map(x => Tuple2(x, x)))\n        val lst13 = lst12.map(_.map(x =>\
    \ Tuple2(x, x)))\n        val lst14 = lst13.map(_.map(x => Tuple2(x, x)))\n  \
    \      val lst15 = lst14.map(_.map(x => Tuple2(x, x)))\n        val lst16 = lst15.map(_.map(x\
    \ => Tuple2(x, x)))\n        val lst17 = lst16.map(_.map(x => Tuple2(x, x)))\n\
    \        val lst18 = lst17.map(_.map(x => Tuple2(x, x)))\n        val lst19 =\
    \ lst18.map(_.map(x => Tuple2(x, x)))\n        val lst20 = lst19.map(_.map(x =>\
    \ Tuple2(x, x)))\n        val lst21 = lst20.map(_.map(x => Tuple2(x, x)))\n  \
    \      val lst22 = lst21.map(_.map(x => Tuple2(x, x)))\n        val lst23 = lst22.map(_.map(x\
    \ => Tuple2(x, x)))\n        val lst24 = lst23.map(_.map(x => Tuple2(x, x)))\n\
    \        val lst25 = lst24.map(_.map(x => Tuple2(x, x)))\n        val lst26 =\
    \ lst25.map(_.map(x => Tuple2(x, x)))\n        val lst27 = lst26.map(_.map(x =>\
    \ Tuple2(x, x)))\n        val lst28 = lst27.map(_.map(x => Tuple2(x, x)))\n  \
    \      val lst29 = lst28.map(_.map(x => Tuple2(x, x)))\n        val lst30", " \
    \       val rows = lst.map(_.length)\n        val cols = lst(0).length\n     \
    \   val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val rowIndex\
    \ = new mutable.ListBuffer[Long]()\n        val colIndex = new mutable.ListBuffer[Long]()\n\
    \        var row = 0\n        var col = 0\n        while(row < rows) {\n     \
    \       rowIndex += row\n            row += 1\n        }\n        while(col <\
    \ cols) {\n            colIndex += col\n            col += 1\n        }\n    \
    \    while(row < rows) {\n            while(col < cols) {\n                if(rowIndex.contains(row)\
    \ && colIndex.contains(col)) {\n                    val index = rowIndex.indexOf(row)\n\
    \                    val index2 = colIndex.indexOf(col)\n                    val\
    \ value = lst(row)(col)\n                    result.add(Tuple2(index, index2))\n\
    \                    colIndex.remove(col)\n                    col -= 1\n    \
    \            }\n                col += 1\n            }\n            row += 1\n\
    \        }\n        result.sortBy(_._1).reverse", "        val lst2 = lst.map(_.toList)\n\
    \        val lst3 = lst2.map(_.toList)\n        val lst4 = lst3.map(_.toList)\n\
    \        val lst5 = lst4.map(_.toList)\n        val lst6 = lst5.map(_.toList)\n\
    \        val lst7 = lst6.map(_.toList)\n        val lst8 = lst7.map(_.toList)\n\
    \        val lst9 = lst8.map(_.toList)\n        val lst10 = lst9.map(_.toList)\n\
    \        val lst11 = lst10.map(_.toList)\n        val lst12 = lst11.map(_.toList)\n\
    \        val lst13 = lst12.map(_.toList)\n        val lst14 = lst13.map(_.toList)\n\
    \        val lst15 = lst14.map(_.toList)\n        val lst16 = lst15.map(_.toList)\n\
    \        val lst17 = lst16.map(_.toList)\n        val lst18 = lst17.map(_.toList)\n\
    \        val lst19 = lst18.map(_.toList)\n        val lst20 = lst19.map(_.toList)\n\
    \        val lst21 = lst20.map(_.toList)\n        val lst22 = lst21.map(_.toList)\n\
    \        val lst23 = lst22.map(_.toList)\n        val lst24 = lst23.map(_.toList)\n\
    \        val lst25 = lst24.map(_.toList)\n        val lst26 = lst25.map(_.toList)\n\
    \        val lst27 = lst26.map(_.toList)\n        val lst28 = lst27.map(_.toList)\n\
    \        val lst29 = lst28.map(_.toList)\n        val lst30 = lst29.map(_.toList)\n\
    \        val lst31 = lst30.map(_.toList)\n        val lst32 = lst31.map(_.toList)\n\
    \        val lst33 = lst32.map(_.toList)\n        val lst34 = lst33.map(_.toList)\n\
    \        val lst35 = lst34.map(_.toList)\n        val lst36 = lst35.map(_.toList)\n\
    \        val lst37 = lst36.map(_.toList)\n        val lst38 = lst37.map(_.toList)\n\
    \        val lst39 = lst38.map(_.toList)\n        val lst40 = lst39.map(_.toList)\n\
    \        val lst41 = lst40.map(_.toList)\n        val lst42 = lst41.map(_.toList)\n\
    \        val lst43 = lst42.map(_.toList)\n        val lst44 = lst43.map(_.toList)\n\
    \        val lst", "        val rows = lst.map(_.toList)\n        val cols = rows.map(_.size)\n\
    \        val result = rows.map(row => row.zipWithIndex.filter(_._1 == x).map(_._2))\n\
    \        result.sortBy(row => row._1).sortBy(row => row._2).map(row => (row._2,\
    \ row._1))", "        val lst2 = lst.map(_.toList)\n        val lst3 = lst2.map(_.toList)\n\
    \        val lst4 = lst3.map(_.toList)\n        val lst5 = lst4.map(_.toList)\n\
    \        val lst6 = lst5.map(_.toList)\n        val lst7 = lst6.map(_.toList)\n\
    \        val lst8 = lst7.map(_.toList)\n        val lst9 = lst8.map(_.toList)\n\
    \        val lst10 = lst9.map(_.toList)\n        val lst11 = lst10.map(_.toList)\n\
    \        val lst12 = lst11.map(_.toList)\n        val lst13 = lst12.map(_.toList)\n\
    \        val lst14 = lst13.map(_.toList)\n        val lst15 = lst14.map(_.toList)\n\
    \        val lst16 = lst15.map(_.toList)\n        val lst17 = lst16.map(_.toList)\n\
    \        val lst18 = lst17.map(_.toList)\n        val lst19 = lst18.map(_.toList)\n\
    \        val lst20 = lst19.map(_.toList)\n        val lst21 = lst20.map(_.toList)\n\
    \        val lst22 = lst21.map(_.toList)\n        val lst23 = lst22.map(_.toList)\n\
    \        val lst24 = lst23.map(_.toList)\n        val lst25 = lst24.map(_.toList)\n\
    \        val lst26 = lst25.map(_.toList)\n        val lst27 = lst26.map(_.toList)\n\
    \        val lst28 = lst27.map(_.toList)\n        val lst29 = lst28.map(_.toList)\n\
    \        val lst30 = lst29.map(_.toList)\n        val lst31 = lst30.map(_.toList)\n\
    \        val lst32 = lst31.map(_.toList)\n        val lst33 = lst32.map(_.toList)\n\
    \        val lst34 = lst33.map(_.toList)\n        val lst35 = lst34.map(_.toList)\n\
    \        val lst36 = lst35.map(_.toList)\n        val lst37 = lst36.map(_.toList)\n\
    \        val lst38 = lst37.map(_.toList)\n        val lst39 = lst38.map(_.toList)\n\
    \        val lst40 = lst39.map(_.toList)\n        val lst41 = lst40.map(_.toList)\n\
    \        val lst42 = lst41.map(_.toList)\n        val lst43 = lst42.map(_.toList)\n\
    \        val lst44 = lst43.map(_.toList)\n        val lst", "        val m = lst.size\n\
    \        val n = lst(0).size\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ListBuffer[Long]()\n        val col\
    \ = new mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < m) {\n\
    \            val row = lst(i).zipWithIndex.sortBy(_._1).map(_._2)\n          \
    \  val col = lst(i).zipWithIndex.sortBy(_._2).map(_._1)\n            val x = lst(i).indexOf(x)\n\
    \            if (row == null || col == null || x == -1) {\n                result.clear()\n\
    \                result.add(Tuple2(row, col))\n            } else {\n        \
    \        val row = row.drop(x)\n                val col = col.drop(x)\n      \
    \          result.add(Tuple2(row, col))\n            }\n            i += 1\n \
    \       }\n        result.sortBy(_._1).reverse", "        val lst2 = lst.map(_.toList)\n\
    \        val lst3 = lst2.map(_.toList)\n        val lst4 = lst3.map(_.toList)\n\
    \        val lst5 = lst4.map(_.toList)\n        val lst6 = lst5.map(_.toList)\n\
    \        val lst7 = lst6.map(_.toList)\n        val lst8 = lst7.map(_.toList)\n\
    \        val lst9 = lst8.map(_.toList)\n        val lst10 = lst9.map(_.toList)\n\
    \        val lst11 = lst10.map(_.toList)\n        val lst12 = lst11.map(_.toList)\n\
    \        val lst13 = lst12.map(_.toList)\n        val lst14 = lst13.map(_.toList)\n\
    \        val lst15 = lst14.map(_.toList)\n        val lst16 = lst15.map(_.toList)\n\
    \        val lst17 = lst16.map(_.toList)\n        val lst18 = lst17.map(_.toList)\n\
    \        val lst19 = lst18.map(_.toList)\n        val lst20 = lst19.map(_.toList)\n\
    \        val lst21 = lst20.map(_.toList)\n        val lst22 = lst21.map(_.toList)\n\
    \        val lst23 = lst22.map(_.toList)\n        val lst24 = lst23.map(_.toList)\n\
    \        val lst25 = lst24.map(_.toList)\n        val lst26 = lst25.map(_.toList)\n\
    \        val lst27 = lst26.map(_.toList)\n        val lst28 = lst27.map(_.toList)\n\
    \        val lst29 = lst28.map(_.toList)\n        val lst30 = lst29.map(_.toList)\n\
    \        val lst31 = lst30.map(_.toList)\n        val lst32 = lst31.map(_.toList)\n\
    \        val lst33 = lst32.map(_.toList)\n        val lst34 = lst33.map(_.toList)\n\
    \        val lst35 = lst34.map(_.toList)\n        val lst36 = lst35.map(_.toList)\n\
    \        val lst37 = lst36.map(_.toList)\n        val lst38 = lst37.map(_.toList)\n\
    \        val lst39 = lst38.map(_.toList)\n        val lst40 = lst39.map(_.toList)\n\
    \        val lst41 = lst40.map(_.toList)\n        val lst42 = lst41.map(_.toList)\n\
    \        val lst43 = lst42.map(_.toList)\n        val lst44 = lst43.map(_.toList)\n\
    \        val lst", "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst2 = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong\
    \ > y.toLong)", "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val result = lst.map(row => row.zipWithIndex.filter(x => x == x).map(x\
    \ => (x._2, x._1)).toList)\n        result.sortWith((x, y) => x._1 < y._1).sortWith((x,\
    \ y) => y._1 < x._1).sortWith((x, y) => x._2 < y._2)", "        val rows = lst.map(row\
    \ => row.map(i => Tuple2(i.toLong, i.toLong)))\n        val rows = rows.sortBy(row\
    \ => row._1)\n        val rows = rows.sortBy(row => row._2, descending = true)\n\
    \        val rows = rows.filter(row => row._1 == x)\n        val rows = rows.map(row\
    \ => Tuple2(row._1, row._2))\n        rows", "        val rows = lst.map(_.toList)\n\
    \        val cols = rows.map(_.length)\n        val coords = rows.map(row => (row,\
    \ cols.map(col => row.toLong * col + col.toLong)))\n        coords.sortBy(_._1).sortBy(_._2).reverse",
  "        val rows = lst.map(row => row.zipWithIndex.sortBy(_._1).reverse)\n    \
    \    val cols = rows.map(row => row.map(_.swap).sortBy(_._2).reverse)\n      \
    \  val result = rows.flatMap(row => row.map(x => (x, cols.find(col => col._1 ==\
    \ x).map(_._2))))\n        result.sortBy(_._1).reverse.map(x => (x._1, x._2))",
  "        val row: List[Tuple2[Long, Long]] = lst.map(row => Tuple2(row(0), row(x.toLong)))\n\
    \        val sortedRow: List[Tuple2[Long, Long]] = row.sortBy(row => row._1)\n\
    \        val sortedRowReverse: List[Tuple2[Long, Long]] = sortedRow.reverse\n\
    \        val sortedColumn: List[Tuple2[Long, Long]] = sortedRowReverse.sortBy(row\
    \ => row._2)\n        val sortedColumnReverse: List[Tuple2[Long, Long]] = sortedColumn.reverse\n\
    \        val result: List[Tuple2[Long, Long]] = sortedColumnReverse.map(row =>\
    \ Tuple2(row._1, row._2))\n        result", "        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val coords = lst.map(_.zipWithIndex).sortBy(_._1).map(x\
    \ => (x._2, x._1))\n        val rows = coords.map(x => x._1).distinct\n      \
    \  val cols = coords.map(x => x._2).distinct\n        val coord = coords.filter(x\
    \ => x._1 == x).map(x => (x._2, x._1)).sortBy(_._1).map(x => (x._2, x._1))\n \
    \       val result = coords.map(x => (x._1, coords.filter(y => y._1 == x._1).map(y\
    \ => (y._2, y._1)).sortBy(_._2).map(y => (y._2, y._1))))\n        val result =\
    \ coords.map(x => (x._1, coords.filter(y => y._1 == x._1).map(y => (y._2, y._1)).sortBy(_._2).map(y\
    \ => (y._2, y._1))))\n        val result = coords.map(x => (x._1, coords.filter(y\
    \ => y._1 == x._1).map(y => (y._2, y._1)).sortBy(_._2).map(y => (y._2, y._1))))\n\
    \        val result = coords.map(x => (x._1, coords.filter(y => y._1 == x._1).map(y\
    \ => (y._2, y._1)).sortBy(_._2).map(y => (y._2, y._1))))\n        val result =\
    \ coords.map(x => (x._1, coords.filter(y => y._1 == x._1).map(y => (y._2, y._1)).sortBy(_._2).map(y\
    \ => (y._2, y._1))))\n        val result = coords.map(x => (x._1, coords.filter(y\
    \ => y._1 == x._1).map(y => (y._2, y._1)).sortBy(_._2).map(y => (y._2, y._1))))\n\
    \        val result = coords.map(x => (x._1, coords.filter(y => y._1 == x._1).map(y\
    \ => (y._2, y._1)).sortBy(_._2).map(y => (y._2, y._1))))\n        val result =\
    \ coords.map(x => (x._1, coords.filter(y => y._1 == x._1).map(y => (y._2, y._1)).sortBy(_._2).map(y\
    \ => (y._2, y._1))))\n        val result = coords.map(x => (x._1, coords.filter(y\
    \ => y._1 == x._1).map(y => (y._2, y._1)).sortBy(_._2).map(", "        val rows\
    \ = lst.map(row => row.map(i => Tuple2(i.toLong, i)))\n        val rows = rows.sortBy(row\
    \ => row._1)\n        val rows = rows.sortBy(row => row._2, descending = true)\n\
    \        val rows = rows.filter(row => row._1 == x)\n        val rows = rows.map(row\
    \ => Tuple2(row._1, row._2))\n        rows", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n        val col\
    \ = new mutable.ArrayBuffer[Long]()\n        val rowIndex = new mutable.ArrayBuffer[Long]()\n\
    \        val colIndex = new mutable.ArrayBuffer[Long]()\n        val rowCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val colCount = new mutable.ArrayBuffer[Long]()\n\
    \        val rowIndexCount = new mutable.ArrayBuffer[Long]()\n        val colIndexCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val rowIndexCount2 = new mutable.ArrayBuffer[Long]()\n\
    \        val colIndexCount2 = new mutable.ArrayBuffer[Long]()\n        val rowIndexCount3\
    \ = new mutable.ArrayBuffer[Long]()\n        val colIndexCount3 = new mutable.ArrayBuffer[Long]()\n\
    \        val rowIndexCount4 = new mutable.ArrayBuffer[Long]()\n        val colIndexCount4\
    \ = new mutable.ArrayBuffer[Long]()\n        val rowIndexCount5 = new mutable.ArrayBuffer[Long]()\n\
    \        val colIndexCount5 = new mutable.ArrayBuffer[Long]()\n        val rowIndexCount6\
    \ = new mutable.ArrayBuffer[Long]()\n        val colIndexCount6 = new mutable.ArrayBuffer[Long]()\n\
    \        val rowIndexCount7 = new mutable.ArrayBuffer[Long]()\n        val colIndexCount7\
    \ = new mutable.ArrayBuffer[Long]()\n        val rowIndexCount8 = new mutable.ArrayBuffer[Long]()\n\
    \        val colIndexCount8 = new mutable.ArrayBuffer[Long]()\n        val rowIndexCount9\
    \ = new mutable.ArrayBuffer[Long]()\n        val colIndexCount9 = new mutable.ArrayBuffer[Long]()\n\
    \        val rowIndexCount10 = new mutable.ArrayBuffer[Long]()\n        val colIndexCount10\
    \ = new mutable.ArrayBuffer[Long]()\n        val rowIndexCount11 = new mutable.ArrayBuffer[Long]()\n\
    \        val colIndexCount11 = new mutable.ArrayBuffer[Long]()\n        val rowIndexCount12\
    \ = new mutable.ArrayBuffer[Long]()\n        val colIndexCount12 = new mutable.ArrayBuffer[Long]()\n\
    \        val rowIndexCount13 = new mutable.ArrayBuffer[Long]()\n        val colIndexCount13\
    \ = new mutable.ArrayBuffer[Long]()\n        val rowIndexCount14 = new mutable.ArrayBuffer[Long]()\n\
    \        ", "        val rows = lst.map(_.size)\n        val cols = lst(0).size\n\
    \        val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        for\
    \ (i <- 0 until rows) {\n            for (j <- 0 until cols) {\n             \
    \   if (lst(i)(j) == x) {\n                    result.append((i, j))\n       \
    \         }\n            }\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ descending = true)\n        result", "        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val coords = lst.map(row =>\
    \ row.zipWithIndex.sortBy(_._1).reverse.map(x => (x._2, x._1)).toList)\n     \
    \   val rowCoords = coords.map(row => row.zipWithIndex.sortBy(_._1).reverse.map(x\
    \ => (x._2, x._1)).toList)\n        val colCoords = coords.map(row => row.zipWithIndex.sortBy(_._2).reverse.map(x\
    \ => (x._2, x._1)).toList)\n        val rowCoordsSorted = rowCoords.sortBy(_._1).reverse\n\
    \        val colCoordsSorted = colCoords.sortBy(_._2).reverse\n        val coordsToReturn\
    \ = rowCoordsSorted.flatMap(row => colCoordsSorted.map(col => if (row._1 == col._1)\
    \ (row._2, col._2) else (row._2, col._1)))\n        val coordsToReturnSorted =\
    \ coordsToReturn.sortBy(_._1).reverse\n        coordsToReturnSorted.map(x => (x._1,\
    \ x._2))", "        val row: List[List[Long]] = lst.map(_.toList)\n        val\
    \ rowMap: Map[Long, List[Long]] = row.map(x => x -> List(x)).toMap\n        val\
    \ sortedRow = row.sortBy(x => rowMap.getOrElse(x, Nil).reverse)\n        val sortedRowMap:\
    \ Map[Long, List[Long]] = sortedRow.map(x => x -> List(x)).toMap\n        val\
    \ sortedRowMapReverse: Map[Long, List[Long]] = sortedRow.map(x => x -> List(x)).toMap.reverse\n\
    \        val sortedRowMapReverseReverse: Map[Long, List[Long]] = sortedRow.map(x\
    \ => x -> List(x)).toMap.reverse.reverse\n        val sortedRowMapReverseReverseReverse:\
    \ Map[Long, List[Long]] = sortedRow.map(x => x -> List(x)).toMap.reverse.reverse.reverse\n\
    \        val sortedRowMapReverseReverseReverseReverse: Map[Long, List[Long]] =\
    \ sortedRow.map(x => x -> List(x)).toMap.reverse.reverse.reverse.reverse\n   \
    \     val sortedRowMapReverseReverseReverseReverseReverse: Map[Long, List[Long]]\
    \ = sortedRow.map(x => x -> List(x)).toMap.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse",
  "        val rows = lst.map(_.toList).map(_.toLong)\n        val cols = lst.map(_.toList).map(_.size)\n\
    \        val rows = rows.sortWith(_ < _)\n        val cols = cols.sortWith(_ <\
    \ _)\n        val result = rows.zip(cols).filter(_._1 == x).map(_._2)\n      \
    \  result.sortWith(_ < _)", "        val lst2 = lst.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val lst6 = lst5.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val lst11 = lst10.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val lst16 = lst15.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val lst21 = lst20.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)\n        val lst26 = lst25.sortWith((x,\
    \ y) => x.toLong > y.toLong", "        val row: List[Long] = lst.map(_.toLong)\n\
    \        val column: List[Long] = lst.map(_.toLong).map(_.toLong)\n        val\
    \ rowIndex: Int = row.indexOf(x)\n        val columnIndex: Int = column.indexOf(x)\n\
    \        val tuples: List[Tuple2[Long, Long]] = List((rowIndex.toLong, columnIndex.toLong))\n\
    \        val tuples2: List[Tuple2[Long, Long]] = List((rowIndex.toLong, columnIndex.toLong))\n\
    \        val tuples3: List[Tuple2[Long, Long]] = List((rowIndex.toLong, columnIndex.toLong))\n\
    \        val tuples4: List[Tuple2[Long, Long]] = List((rowIndex.toLong, columnIndex.toLong))\n\
    \        val tuples5: List[Tuple2[Long, Long]] = List((rowIndex.toLong, columnIndex.toLong))\n\
    \        val tuples6: List[Tuple2[Long, Long]] = List((rowIndex.toLong, columnIndex.toLong))\n\
    \        val tuples7: List[Tuple2[Long, Long]] = List((rowIndex.toLong, columnIndex.toLong))\n\
    \        val tuples8: List[Tuple2[Long, Long]] = List((rowIndex.toLong, columnIndex.toLong))\n\
    \        val tuples9: List[Tuple2[Long, Long]] = List((rowIndex.toLong, columnIndex.toLong))\n\
    \        val tuples10: List[Tuple2[Long, Long]] = List((rowIndex.toLong, columnIndex.toLong))\n\
    \        val tuples11: List[Tuple2[Long, Long]] = List((rowIndex.toLong, columnIndex.toLong))\n\
    \        val tuples12: List[Tuple2[Long, Long]] = List((rowIndex.toLong, columnIndex.toLong))\n\
    \        val tuples13: List[Tuple2[Long, Long]] = List((rowIndex.toLong, columnIndex.toLong))\n\
    \        val tuples14: List[Tuple2[Long, Long]] = List((rowIndex.toLong, columnIndex.toLong))\n\
    \        val tuples15: List[Tuple2[Long, Long]] = List((rowIndex.toLong, columnIndex.toLong))\n\
    \        val tuples16: List[Tuple2[Long, Long]] = List((rowIndex.toLong, columnIndex.toLong))\n\
    \        val tuples17: List[Tuple2[Long, Long]] = List((rowIndex.toLong, columnIndex.toLong))\n\
    \        val tuples18: List[Tuple2[Long, Long]] = List((rowIndex.toLong, columnIndex.toLong))\n\
    \        val tuples19: List[Tuple2[Long, Long", "        val m = lst.size\n  \
    \      val n = lst(0).size\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ListBuffer[Long]()\n        val col\
    \ = new mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < m) {\n\
    \            val row = lst(i).zipWithIndex.sortBy(_._1).map(_._2)\n          \
    \  val col = lst(i).zipWithIndex.sortBy(_._2).map(_._1)\n            val x = lst(i).indexOf(x)\n\
    \            val y = lst(i).indexOf(x, x + 1)\n            val x1 = row.indexOf(0)\n\
    \            val y1 = row.indexOf(0, x1)\n            val x2 = row.indexOf(x1)\n\
    \            val y2 = row.indexOf(x1, x1 + 1)\n            val x3 = col.indexOf(0)\n\
    \            val y3 = col.indexOf(0, x3)\n            val x4 = col.indexOf(x3)\n\
    \            val y4 = col.indexOf(x3, x4)\n            val x5 = col.indexOf(x4)\n\
    \            val y5 = col.indexOf(x4, x5 + 1)\n            val x6 = row.indexOf(x5)\n\
    \            val y6 = row.indexOf(x5, x6 + 1)\n            val x7 = col.indexOf(x6)\n\
    \            val y7 = col.indexOf(x6, x7 + 1)\n            val x8 = row.indexOf(x7)\n\
    \            val y8 = row.indexOf(x7, x8 + 1)\n            val x9 = col.indexOf(x8)\n\
    \            val y9 = col.indexOf(x8, x9 + 1)\n            val x10 = row.indexOf(x9)\n\
    \            val y10 = row.indexOf(x9, x10 + 1)\n            val x11 = col.indexOf(x10)\n\
    \            val y11 = col.indexOf(x10, x11 + 1)\n            val x12 = row.indexOf(x11)\n\
    \            val y12 = row.indexOf(x11, x12 + 1)\n            val x13 = col.indexOf(x12)\n\
    \            val y13 = col.indexOf(x12, x13 + 1)\n            val x14 = row.indexOf(x13)\n\
    \            val y14 = row.indexOf(x13, x14 + 1)\n            val x15 = col.indexOf(x14)\n\
    \            val y15 = col.indexOf(x14, x15 + 1)\n            val x16 = row.indexOf(x15)\n\
    \            val y16 = row.indexOf(x15, x16 + 1)\n            val x17 = col.indexOf(x16)\n\
    \            val y17 = col.indexOf(x16, x17 + 1)\n            val x18 = row.indexOf(x17)\n\
    \            val y18 = row.indexOf(x17, x18 + 1)\n            val x19 = col.indexOf(x18)\n",
  "        val rows = lst.map(_.toList)\n        val cols = rows.map(_.length)\n \
    \       val rows = rows.sortBy(_.toLong)\n        val cols = cols.sortBy(-_.toLong)\n\
    \        val result = rows.map(row => {\n            val cols = row.map(_.toLong)\n\
    \            val cols = cols.sortBy(-_.toLong)\n            val coord = coords.zip(cols).filter(_._1\
    \ == x).map(_._2)\n            coord.sortBy(-_._2)\n        })\n        result.flatten",
  "        val lst2 = lst.map(_.toList)\n        val lst3 = lst2.map(_.toList)\n \
    \       val lst4 = lst3.map(_.toList)\n        val lst5 = lst4.map(_.toList)\n\
    \        val lst6 = lst5.map(_.toList)\n        val lst7 = lst6.map(_.toList)\n\
    \        val lst8 = lst7.map(_.toList)\n        val lst9 = lst8.map(_.toList)\n\
    \        val lst10 = lst9.map(_.toList)\n        val lst11 = lst10.map(_.toList)\n\
    \        val lst12 = lst11.map(_.toList)\n        val lst13 = lst12.map(_.toList)\n\
    \        val lst14 = lst13.map(_.toList)\n        val lst15 = lst14.map(_.toList)\n\
    \        val lst16 = lst15.map(_.toList)\n        val lst17 = lst16.map(_.toList)\n\
    \        val lst18 = lst17.map(_.toList)\n        val lst19 = lst18.map(_.toList)\n\
    \        val lst20 = lst19.map(_.toList)\n        val lst21 = lst20.map(_.toList)\n\
    \        val lst22 = lst21.map(_.toList)\n        val lst23 = lst22.map(_.toList)\n\
    \        val lst24 = lst23.map(_.toList)\n        val lst25 = lst24.map(_.toList)\n\
    \        val lst26 = lst25.map(_.toList)\n        val lst27 = lst26.map(_.toList)\n\
    \        val lst28 = lst27.map(_.toList)\n        val lst29 = lst28.map(_.toList)\n\
    \        val lst30 = lst29.map(_.toList)\n        val lst31 = lst30.map(_.toList)\n\
    \        val lst32 = lst31.map(_.toList)\n        val lst33 = lst32.map(_.toList)\n\
    \        val lst34 = lst33.map(_.toList)\n        val lst35 = lst34.map(_.toList)\n\
    \        val lst36 = lst35.map(_.toList)\n        val lst37 = lst36.map(_.toList)\n\
    \        val lst38 = lst37.map(_.toList)\n        val lst39 = lst38.map(_.toList)\n\
    \        val lst40 = lst39.map(_.toList)\n        val lst41 = lst40.map(_.toList)\n\
    \        val lst42 = lst41.map(_.toList)\n        val lst43 = lst42.map(_.toList)\n\
    \        val lst44 = lst43.map(_.toList)\n        val lst", "        val lst1\
    \ = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst2 = lst1.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)", "       \
    \ val m = lst.size\n        val n = lst(0).size\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        var i = 0\n        while (i < m) {\n            var j = 0\n\
    \            while (j < n) {\n                if (lst(i)(j) == x) {\n        \
    \            result.add(Tuple2(i, j))\n                }\n                j +=\
    \ 1\n            }\n            i += 1\n        }\n        result.sortBy(_._1)\n\
    \        result.sortBy(_._2, descending = true)\n        result", "        val\
    \ row: List[Tuple2[Long, Long]] = lst.map(row => Tuple2(row.indexOf(x), row.indexOf(x)\
    \ + 1))\n        val sorted = row.sortBy(row => row._1)\n        val reversed\
    \ = sorted.reverse\n        reversed.map(row => Tuple2(row._1, row._2))", "  \
    \      val lst1 = lst.sortWith(_.compareTo(x) < 0)\n        val lst2 = lst1.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst3 = lst2.sortWith(_.compareTo(x) < 0)\n        val lst4\
    \ = lst3.sortWith(_.compareTo(x) < 0)\n        val lst5 = lst4.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst6 = lst5.sortWith(_.compareTo(x) < 0)\n        val lst7\
    \ = lst6.sortWith(_.compareTo(x) < 0)\n        val lst8 = lst7.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst9 = lst8.sortWith(_.compareTo(x) < 0)\n        val lst10\
    \ = lst9.sortWith(_.compareTo(x) < 0)\n        val lst11 = lst10.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst12 = lst11.sortWith(_.compareTo(x) < 0)\n        val lst13\
    \ = lst12.sortWith(_.compareTo(x) < 0)\n        val lst14 = lst13.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst15 = lst14.sortWith(_.compareTo(x) < 0)\n        val lst16\
    \ = lst15.sortWith(_.compareTo(x) < 0)\n        val lst17 = lst16.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst18 = lst17.sortWith(_.compareTo(x) < 0)\n        val lst19\
    \ = lst18.sortWith(_.compareTo(x) < 0)\n        val lst20 = lst19.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst21 = lst20.sortWith(_.compareTo(x) < 0)\n        val lst22\
    \ = lst21.sortWith(_.compareTo(x) < 0)\n        val lst23 = lst22.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst24 = lst23.sortWith(_.compareTo(x) < 0)\n        val lst25\
    \ = lst24.sortWith(_.compareTo(x) < 0)\n        val lst26 = lst25.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst27 = lst26.sortWith(_.compareTo(x) < 0)\n        val lst28\
    \ = lst27.sortWith(_.compareTo(x) < 0)\n        val lst29 = lst28.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst30 = lst29.sortWith(_.compareTo(x) < 0)\n        val lst31\
    \ = lst30.sortWith(_.compareTo(x", "        val lst1 = lst.sortWith((x, y) =>\
    \ x.toLong > y.toLong)\n        val lst2 = lst1.sortWith((x, y) => x.toLong >\
    \ y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val lst6 = lst5.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val lst11 = lst10.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val lst16 = lst15.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val lst21 = lst20.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)", "        val rows =\
    \ lst.map(row => row.map(i => Tuple2(i.toLong, i.toLong)))\n        val rows =\
    \ rows.sortBy(row => row._1)\n        val rows = rows.sortBy(row => row._2, descending\
    \ = true)\n        val rows = rows.filter(row => row._1 == x)\n        val rows\
    \ = rows.map(row => Tuple2(row._1, row._2))\n        rows", "        val lst1\
    \ = lst.map(_.toList)\n        val lst2 = lst1.map(_.toList)\n        val lst3\
    \ = lst2.map(_.toList)\n        val lst4 = lst3.map(_.toList)\n        val lst5\
    \ = lst4.map(_.toList)\n        val lst6 = lst5.map(_.toList)\n        val lst7\
    \ = lst6.map(_.toList)\n        val lst8 = lst7.map(_.toList)\n        val lst9\
    \ = lst8.map(_.toList)\n        val lst10 = lst9.map(_.toList)\n        val lst11\
    \ = lst10.map(_.toList)\n        val lst12 = lst11.map(_.toList)\n        val\
    \ lst13 = lst12.map(_.toList)\n        val lst14 = lst13.map(_.toList)\n     \
    \   val lst15 = lst14.map(_.toList)\n        val lst16 = lst15.map(_.toList)\n\
    \        val lst17 = lst16.map(_.toList)\n        val lst18 = lst17.map(_.toList)\n\
    \        val lst19 = lst18.map(_.toList)\n        val lst20 = lst19.map(_.toList)\n\
    \        val lst21 = lst20.map(_.toList)\n        val lst22 = lst21.map(_.toList)\n\
    \        val lst23 = lst22.map(_.toList)\n        val lst24 = lst23.map(_.toList)\n\
    \        val lst25 = lst24.map(_.toList)\n        val lst26 = lst25.map(_.toList)\n\
    \        val lst27 = lst26.map(_.toList)\n        val lst28 = lst27.map(_.toList)\n\
    \        val lst29 = lst28.map(_.toList)\n        val lst30 = lst29.map(_.toList)\n\
    \        val lst31 = lst30.map(_.toList)\n        val lst32 = lst31.map(_.toList)\n\
    \        val lst33 = lst32.map(_.toList)\n        val lst34 = lst33.map(_.toList)\n\
    \        val lst35 = lst34.map(_.toList)\n        val lst36 = lst35.map(_.toList)\n\
    \        val lst37 = lst36.map(_.toList)\n        val lst38 = lst37.map(_.toList)\n\
    \        val lst39 = lst38.map(_.toList)\n        val lst40 = lst39.map(_.toList)\n\
    \        val lst41 = lst40.map(_.toList)\n        val lst42 = lst41.map(_.toList)\n\
    \        val lst43 = lst42.map(_.toList)\n        val lst44 = ", "        val\
    \ m = lst.size\n        val n = lst(0).size\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ListBuffer[Long]()\n        val col\
    \ = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        var i = 0\n      \
    \  while (i < m) {\n            val row = lst(i).zipWithIndex.sortBy(_._1).map(_._2)\n\
    \            val col = lst(i).zipWithIndex.sortBy(_._2).map(_._1)\n          \
    \  val rows = row.zipWithIndex.sortBy(_._1).map(_._2)\n            val cols =\
    \ col.zipWithIndex.sortBy(_._2).map(_._1)\n            val rowSize = row.size\n\
    \            val colSize = col.size\n            val rowIndex = row.indexOf(x)\n\
    \            val colIndex = col.indexOf(x)\n            if (rowIndex == -1) {\n\
    \                result.append((x, x))\n            } else if (colIndex == -1)\
    \ {\n                result.append((x, x))\n            } else if (rowSize ==\
    \ 1) {\n                result.append((x, x))\n            } else if (colSize\
    \ == 1) {\n                result.append((x, x))\n            } else if (rowIndex\
    \ == 0 && colIndex == 0) {\n                result.append((x, x))\n          \
    \  } else if (rowIndex == rowSize - 1 && colIndex == colSize - 1) {\n        \
    \        result.append((x, x))\n            } else if (rowIndex == rowSize - 1\
    \ && colIndex == 0) {\n                result.append((x, x))\n            } else\
    \ if (rowIndex == 0 && colIndex == colSize - 1) {\n                result.append((x,\
    \ x))\n            } else if (rowIndex == 0 && colIndex == 0) {\n            \
    \    result.append((x, x))\n            } else if (rowIndex == rowSize - 1 &&\
    \ colIndex == colSize - 1) {\n                result.append((x, x))\n        \
    \    } else if (rowIndex == rowSize - 1 && colIndex == 0) {\n                result.append((x,\
    \ x))\n            } else if (rowIndex == 0 && colIndex == colSize - 1) {\n  \
    \              result.append((x, x))\n            } else if (rowIndex == rowSize\
    \ - 1 && colIndex == colSize - 1) {\n                result.append((x, x))\n \
    \           } else {\n                result.append((rows(rowIndex), cols(colIndex)))\n\
    \            }\n            i += 1\n        }\n        result.toList", "     \
    \   val rowList = lst.map(row => row.map(x => Tuple2(x, x)))\n        val rowList\
    \ = rowList.sortBy(row => row._1)\n        val rowList = rowList.sortBy(row =>\
    \ row._2, descending = true)\n        rowList.map(row => Tuple2(row._1, row._2))",
  "        val m = lst.size\n        val n = lst(0).size\n        val result = new\
    \ mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        var i = 0\n       \
    \ while (i < m) {\n            val row1 = lst(i).indexOf(x)\n            if (row1\
    \ == -1) {\n                i += 1\n            } else {\n                row\
    \ += lst(i)(row1)\n                col += lst(i).lastIndexOf(x)\n            \
    \    i += 1\n            }\n        }\n        row.sortWith((x, y) => x > y)\n\
    \        col.sortWith((x, y) => x > y)\n        for (i <- 0 until row.size) {\n\
    \            val row1 = row(i)\n            val col1 = col(i)\n            val\
    \ row2 = row(i + 1)\n            val col2 = col(i + 1)\n            val row3 =\
    \ row(i + 2)\n            val col3 = col(i + 2)\n            val row4 = row(i\
    \ + 3)\n            val col4 = col(i + 3)\n            val row5 = row(i + 4)\n\
    \            val col5 = col(i + 4)\n            val row6 = row(i + 5)\n      \
    \      val col6 = col(i + 5)\n            val row7 = row(i + 6)\n            val\
    \ col7 = col(i + 6)\n            val row8 = row(i + 7)\n            val col8 =\
    \ col(i + 7)\n            val row9 = row(i + 8)\n            val col9 = col(i\
    \ + 8)\n            val row10 = row(i + 9)\n            val col10 = col(i + 9)\n\
    \            val row11 = row(i + 10)\n            val col11 = col(i + 10)\n  \
    \          val row12 = row(i + 11)\n            val col12 = col(i + 11)\n    \
    \        val row13 = row(i + 12)\n            val col13 = col(i + 12)\n      \
    \      val row14 = row(i + 13)\n            val col14 = col(i + 13)\n        \
    \    val row15 = row(i + 14)\n            val col15 = col(i + 14)\n          \
    \  val row16 = row(i + 15)\n            val col16 = col(i + 15)\n            val\
    \ row17 = row(i + 16)\n            val col17 = col(i + 16)\n            val row18\
    \ = row(i + 17)\n            val col18 = col(i + 17)\n            val row19 =\
    \ row(i + 18)\n            val col19 = col(i + 18)\n            val row20 = row(i\
    \ + 19)\n            val col20 = col(i + 19)\n            val ", "        val\
    \ rowList = lst.map(_.toList)\n        val rowIndex = rowList.zipWithIndex.filter(x\
    \ => x._1 == x).map(x => x._2)\n        val rowTuple = rowIndex.map(x => (x, rowList(x)))\n\
    \        val rowTupleList = rowTuple.map(x => x._2)\n        val rowTupleListSorted\
    \ = rowTupleList.sortWith((x, y) => x._1 < y._1)\n        val columnIndex = rowTupleListSorted.map(x\
    \ => x._2).zipWithIndex.filter(x => x._1 == x).map(x => x._2)\n        val columnTuple\
    \ = columnIndex.map(x => (x, rowTupleListSorted.map(x => x._2)))\n        val\
    \ columnTupleList = columnTuple.map(x => x._2)\n        val columnTupleListSorted\
    \ = columnTupleList.sortWith((x, y) => x._1 < y._1)\n        val tuples = columnTupleListSorted.map(x\
    \ => (x, x))\n        tuples.sortWith((x, y) => x._1 < y._1)", "        val rows\
    \ = lst.map(_.toList)\n        val rows = rows.sortBy(_.toLong)\n        val rows\
    \ = rows.sortBy(_.toLong.reverse)\n        val rows = rows.map(row => Tuple2(row.toLong,\
    \ row.lastIndex))\n        val rows = rows.filter(row => row._1 == x)\n      \
    \  rows.map(row => Tuple2(row._1, row._2))", "        val rows = lst.map(_.toList)\n\
    \        val cols = rows.map(_.size)\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val rowIndex = new mutable.ListBuffer[Long]()\n        val\
    \ colIndex = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.List",
  "        val rows = lst.map(_.size)\n        val cols = lst(0).size\n        val\
    \ result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var i = 0\n \
    \       while (i < rows) {\n            var j = 0\n            while (j < cols)\
    \ {\n                if (lst(i)(j) == x) {\n                    result.add(Tuple2(i.toLong,\
    \ j.toLong))\n                }\n                j += 1\n            }\n     \
    \       i += 1\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ descending = true)\n        result.toList", "        val rows = lst.map(_.toList)\n\
    \        val cols = rows.map(_.size)\n        val result = rows.map(row => row.zipWithIndex.filter(x\
    \ => x == x).map(x => (x._2, x._1)).toList)\n        result.sortBy(row => row._1)\n\
    \        result.sortBy(row => row._2, descending = true)\n        result.map(row\
    \ => (row._2, row._1))", "        val rows = lst.map(_.toList)\n        val cols\
    \ = rows.map(_.size)\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val rows = rows.sortWith(_.compareTo(x) < 0)\n        val\
    \ cols = cols.sortWith(_.compareTo(x) < 0)\n        for (i <- 0 until rows.size)\
    \ {\n            for (j <- 0 until cols.size) {\n                val row = rows(i)\n\
    \                val col = cols(j)\n                if (row == x || col == x)\
    \ {\n                    result.add(Tuple2(row, col))\n                }\n   \
    \         }\n        }\n        result.toList", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ListBuffer[Long]()\n        val col\
    \ = new mutable.ListBuffer[Long]()\n        for(i <- 0 until rows){\n        \
    \    for(j <- 0 until cols){\n                if(lst(i)(j) == x){\n          \
    \          row.append(i)\n                    col.append(j)\n                \
    \    result.append((row.toList, col.toList))\n                }\n            }\n\
    \        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse", "     \
    \   val lst2 = lst.map(_.toList)\n        val lst3 = lst2.map(_.toList)\n    \
    \    val lst4 = lst3.map(_.toList)\n        val lst5 = lst4.map(_.toList)\n  \
    \      val lst6 = lst5.map(_.toList)\n        val lst7 = lst6.map(_.toList)\n\
    \        val lst8 = lst7.map(_.toList)\n        val lst9 = lst8.map(_.toList)\n\
    \        val lst10 = lst9.map(_.toList)\n        val lst11 = lst10.map(_.toList)\n\
    \        val lst12 = lst11.map(_.toList)\n        val lst13 = lst12.map(_.toList)\n\
    \        val lst14 = lst13.map(_.toList)\n        val lst15 = lst14.map(_.toList)\n\
    \        val lst16 = lst15.map(_.toList)\n        val lst17 = lst16.map(_.toList)\n\
    \        val lst18 = lst17.map(_.toList)\n        val lst19 = lst18.map(_.toList)\n\
    \        val lst20 = lst19.map(_.toList)\n        val lst21 = lst20.map(_.toList)\n\
    \        val lst22 = lst21.map(_.toList)\n        val lst23 = lst22.map(_.toList)\n\
    \        val lst24 = lst23.map(_.toList)\n        val lst25 = lst24.map(_.toList)\n\
    \        val lst26 = lst25.map(_.toList)\n        val lst27 = lst26.map(_.toList)\n\
    \        val lst28 = lst27.map(_.toList)\n        val lst29 = lst28.map(_.toList)\n\
    \        val lst30 = lst29.map(_.toList)\n        val lst31 = lst30.map(_.toList)\n\
    \        val lst32 = lst31.map(_.toList)\n        val lst33 = lst32.map(_.toList)\n\
    \        val lst34 = lst33.map(_.toList)\n        val lst35 = lst34.map(_.toList)\n\
    \        val lst36 = lst35.map(_.toList)\n        val lst37 = lst36.map(_.toList)\n\
    \        val lst38 = lst37.map(_.toList)\n        val lst39 = lst38.map(_.toList)\n\
    \        val lst40 = lst39.map(_.toList)\n        val lst41 = lst40.map(_.toList)\n\
    \        val lst42 = lst41.map(_.toList)\n        val lst43 = lst42.map(_.toList)\n\
    \        val lst44 = lst43.map(_.toList)\n        val lst", "        val lst1\
    \ = lst.sortBy(_.toLong)\n        val lst2 = lst1.sortBy(_.toLong.reverse)\n \
    \       val lst3 = lst2.sortBy(_.toLong.reverse)\n        val lst4 = lst3.sortBy(_.toLong.reverse)\n\
    \        val lst5 = lst4.sortBy(_.toLong.reverse)\n        val lst6 = lst5.sortBy(_.toLong.reverse)\n\
    \        val lst7 = lst6.sortBy(_.toLong.reverse)\n        val lst8 = lst7.sortBy(_.toLong.reverse)\n\
    \        val lst9 = lst8.sortBy(_.toLong.reverse)\n        val lst10 = lst9.sortBy(_.toLong.reverse)\n\
    \        val lst11 = lst10.sortBy(_.toLong.reverse)\n        val lst12 = lst11.sortBy(_.toLong.reverse)\n\
    \        val lst13 = lst12.sortBy(_.toLong.reverse)\n        val lst14 = lst13.sortBy(_.toLong.reverse)\n\
    \        val lst15 = lst14.sortBy(_.toLong.reverse)\n        val lst16 = lst15.sortBy(_.toLong.reverse)\n\
    \        val lst17 = lst16.sortBy(_.toLong.reverse)\n        val lst18 = lst17.sortBy(_.toLong.reverse)\n\
    \        val lst19 = lst18.sortBy(_.toLong.reverse)\n        val lst20 = lst19.sortBy(_.toLong.reverse)\n\
    \        val lst21 = lst20.sortBy(_.toLong.reverse)\n        val lst22 = lst21.sortBy(_.toLong.reverse)\n\
    \        val lst23 = lst22.sortBy(_.toLong.reverse)\n        val lst24 = lst23.sortBy(_.toLong.reverse)\n\
    \        val lst25 = lst24.sortBy(_.toLong.reverse)\n        val lst26 = lst25.sortBy(_.toLong.reverse)\n\
    \        val lst27 = lst26.sortBy(_.toLong.reverse)\n        val lst28 = lst27.sortBy(_.toLong.reverse)\n\
    \        val lst29 = lst28.sortBy(_.toLong.reverse)\n        val lst30 = lst29.sortBy(_.toLong.reverse)\n\
    \        val lst31 = lst30.sortBy(_.toLong.reverse)\n        val lst32 = lst31.sortBy(_.toLong.reverse)\n\
    \        val lst33 = lst32.sortBy(_.toLong.reverse)\n        val lst34 = lst33.sortBy(_.toLong.reverse)\n\
    \        val lst35 = lst34.sortBy(_.toLong.reverse)\n", "        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val rowMap = mutable.HashMap[Long,\
    \ Long]()\n        val colMap = mutable.HashMap[Long, Long]()\n        for (i\
    \ <- 0 until rows) {\n            rowMap.put(i, lst(i).head.length)\n        }\n\
    \        for (i <- 0 until cols) {\n            colMap.put(i, lst(0).head.length)\n\
    \        }\n        val result = lst.map(row => row.map(col => (rowMap(col), colMap(col)))).sortBy(row\
    \ => row).sortBy(row => row).map(row => (row(0), row(1))).toList\n        result.filter(row\
    \ => row._1 == x).sortBy(row => row._2).map(row => (row._1, row._2))", "     \
    \   val rows = lst.map(_.toList)\n        val rows = rows.sortBy(_(0))\n     \
    \   val rows = rows.sortBy(_(1)) //descending\n        val rows = rows.map(x =>\
    \ (x, x)) //ascending\n        val rows = rows.map(x => (x, x)) //ascending\n\
    \        val rows = rows.map(x => (x, x)) //ascending\n        val rows = rows.map(x\
    \ => (x, x)) //ascending\n        val rows = rows.map(x => (x, x)) //ascending\n\
    \        val rows = rows.map(x => (x, x)) //ascending\n        val rows = rows.map(x\
    \ => (x, x)) //ascending\n        val rows = rows.map(x => (x, x)) //ascending\n\
    \        val rows = rows.map(x => (x, x)) //ascending\n        val rows = rows.map(x\
    \ => (x, x)) //ascending\n        val rows = rows.map(x => (x, x)) //ascending\n\
    \        val rows = rows.map(x => (x, x)) //ascending\n        val rows = rows.map(x\
    \ => (x, x)) //ascending\n        val rows = rows.map(x => (x, x)) //ascending\n\
    \        val rows = rows.map(x => (x, x)) //ascending\n        val rows = rows.map(x\
    \ => (x, x)) //ascending\n        val rows = rows.map(x => (x, x)) //ascending\n\
    \        val rows = rows.map(x => (x, x)) //ascending\n        val rows = rows.map(x\
    \ => (x, x)) //ascending\n        val rows = rows.map(x => (x, x)) //ascending\n\
    \        val rows = rows.map(x => (x, x)) //ascending\n        val rows = rows.map(x\
    \ => (x, x)) //ascending\n        val rows = rows.map(x => (x, x)) //ascending\n\
    \        val rows = rows.map(x => (x, x)) //ascending\n        val rows = rows.map(x\
    \ => (x, x)) //ascending\n        val rows = rows.map(x => (x, x)) //ascending\n\
    \        val rows = rows.map(x => (x, x)) //ascending\n        val rows = rows.map(x\
    \ => (x, x)) //ascending\n        val rows = rows.map(x => (x, x)) //ascending\n\
    \        val rows = rows.map(x => (x, x)) //ascending\n        val rows = rows.map(x\
    \ => (x, x)) //ascending\n        val rows = rows.map(x => (x, x)) //ascending\n\
    \        val rows = rows.map(x => (x, x)) //ascending\n        val rows = rows.map(x\
    \ => (x, x)) //ascending\n        val rows = rows.", "        val lst2 = lst.map(_.toList)\n\
    \        val lst3 = lst2.map(_.toList)\n        val lst4 = lst3.map(_.toList)\n\
    \        val lst5 = lst4.map(_.toList)\n        val lst6 = lst5.map(_.toList)\n\
    \        val lst7 = lst6.map(_.toList)\n        val lst8 = lst7.map(_.toList)\n\
    \        val lst9 = lst8.map(_.toList)\n        val lst10 = lst9.map(_.toList)\n\
    \        val lst11 = lst10.map(_.toList)\n        val lst12 = lst11.map(_.toList)\n\
    \        val lst13 = lst12.map(_.toList)\n        val lst14 = lst13.map(_.toList)\n\
    \        val lst15 = lst14.map(_.toList)\n        val lst16 = lst15.map(_.toList)\n\
    \        val lst17 = lst16.map(_.toList)\n        val lst18 = lst17.map(_.toList)\n\
    \        val lst19 = lst18.map(_.toList)\n        val lst20 = lst19.map(_.toList)\n\
    \        val lst21 = lst20.map(_.toList)\n        val lst22 = lst21.map(_.toList)\n\
    \        val lst23 = lst22.map(_.toList)\n        val lst24 = lst23.map(_.toList)\n\
    \        val lst25 = lst24.map(_.toList)\n        val lst26 = lst25.map(_.toList)\n\
    \        val lst27 = lst26.map(_.toList)\n        val lst28 = lst27.map(_.toList)\n\
    \        val lst29 = lst28.map(_.toList)\n        val lst30 = lst29.map(_.toList)\n\
    \        val lst31 = lst30.map(_.toList)\n        val lst32 = lst31.map(_.toList)\n\
    \        val lst33 = lst32.map(_.toList)\n        val lst34 = lst33.map(_.toList)\n\
    \        val lst35 = lst34.map(_.toList)\n        val lst36 = lst35.map(_.toList)\n\
    \        val lst37 = lst36.map(_.toList)\n        val lst38 = lst37.map(_.toList)\n\
    \        val lst39 = lst38.map(_.toList)\n        val lst40 = lst39.map(_.toList)\n\
    \        val lst41 = lst40.map(_.toList)\n        val lst42 = lst41.map(_.toList)\n\
    \        val lst43 = lst42.map(_.toList)\n        val lst44 = lst43.map(_.toList)\n\
    \        val lst", "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val\
    \ row = 0\n        val col = 0\n        while(row < rows && col < cols) {\n  \
    \          val value = lst(row)(col)\n            if(value == x) {\n         \
    \       result.add(Tuple2(row, col))\n            }\n            col += 1\n  \
    \      }\n        result.sortBy(_._1)\n        result.sortBy(_._2, descending\
    \ = true)\n        result.toList", "        val rows = lst.map(_.size)\n     \
    \   val cols = lst.map(_.head.length)\n        val coords = lst.map(row => row.zipWithIndex.map(c\
    \ => (c._2, c._1)).toList)\n        val rows = coords.map(_.map(_.toLong).sum)\n\
    \        val cols = coords.map(_.map(_.toLong).max)\n        val coord = coords.map(row\
    \ => row.zipWithIndex.map(c => (c._2, c._1)).toList)\n        val coord = coords.map(row\
    \ => row.zipWithIndex.map(c => (c._2, c._1)).toList)\n        val coord = coords.map(row\
    \ => row.zipWithIndex.map(c => (c._2, c._1)).toList)\n        val coord = coords.map(row\
    \ => row.zipWithIndex.map(c => (c._2, c._1)).toList)\n        val coord = coords.map(row\
    \ => row.zipWithIndex.map(c => (c._2, c._1)).toList)\n        val coord = coords.map(row\
    \ => row.zipWithIndex.map(c => (c._2, c._1)).toList)\n        val coord = coords.map(row\
    \ => row.zipWithIndex.map(c => (c._2, c._1)).toList)\n        val coord = coords.map(row\
    \ => row.zipWithIndex.map(c => (c._2, c._1)).toList)\n        val coord = coords.map(row\
    \ => row.zipWithIndex.map(c => (c._2, c._1)).toList)\n        val coord = coords.map(row\
    \ => row.zipWithIndex.map(c => (c._2, c._1)).toList)\n        val coord = coords.map(row\
    \ => row.zipWithIndex.map(c => (c._2, c._1)).toList)\n        val coord = coords.map(row\
    \ => row.zipWithIndex.map(c => (c._2, c._1)).toList)\n        val coord = coords.map(row\
    \ => row.zipWithIndex.map(c => (c._2, c._1)).toList)\n        val coord = coords.map(row\
    \ => row.zipWithIndex.map(c => (c._2, c._1)).toList)\n        val coord = coords.map(row\
    \ => row.zipWithIndex.map(c => (c._2, c._1)).toList)\n        val coord = coords.map(row\
    \ => row.zipWithIndex.map(c => (c._2, c._1)).toList)\n        val coord = coords.map(row\
    \ => row.zipWithIndex.map(c => (c._2, c._1)).toList)\n        val coord = coords.map(row\
    \ => row.zipWithIndex.map(", "        val rowList = lst.map(row => row.map(i =>\
    \ Tuple2(i.toLong, i.toLong)))\n        val rowListSorted = rowList.sortWith((x,\
    \ y) => x._1 < y._1)\n        val rowListSortedReversed = rowListSorted.sortWith((x,\
    \ y) => x._2 < y._2)\n        val rowListSortedReversedWithIndex = rowListSortedReversed.zipWithIndex\n\
    \        val rowListSortedReversedWithIndexSorted = rowListSortedReversedWithIndex.sortWith((x,\
    \ y) => x._1 < y._1)\n        val rowListSortedReversedWithIndexSortedWithIndex\
    \ = rowListSortedReversedWithIndexSorted.sortWith((x, y) => x._2 < y._2)\n   \
    \     val rowListSortedReversedWithIndexSortedWithIndexAndIndex = rowListSortedReversedWithIndexSortedWithIndex.sortWith((x,\
    \ y) => x._3 < y._3)\n        val rowListSortedReversedWithIndexSortedWithIndexAndIndexAndIndex\
    \ = rowListSortedReversedWithIndexSortedWithIndexAndIndex.sortWith((x, y) => x._4\
    \ < y._4)\n        val rowListSortedReversedWithIndexSortedWithIndexAndIndexAndIndexAndIndex\
    \ = rowListSortedReversedWithIndexSortedWithIndexAndIndexAndIndex.sortWith((x,\
    \ y) => x._5 < y._5)\n        val rowListSortedReversedWithIndexSortedWithIndexAndIndexAndIndexAndIndexAndIndex\
    \ = rowListSortedReversedWithIndexSortedWithIndexAndIndexAndIndexAndIndex.sortWith((x,\
    \ y) => x._6 < y._6)\n        val rowListSortedReversedWithIndexSortedWithIndexAndIndexAndIndexAndIndexAndIndexAndIndex\
    \ = rowListSortedReversedWithIndexSortedWithIndexAndIndexAndIndexAndIndexAndIndex.sortWith((x,\
    \ y) => x._7 < y._7)\n        val rowListSortedReversedWithIndexSortedWithIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndex\
    \ = rowListSortedReversedWithIndexSortedWithIndexAndIndexAndIndexAndIndexAndIndexAndIndex.sortWith((x,\
    \ y) => x._8 < y._8)\n        val rowListSortedReversedWithIndexSortedWithIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndex\
    \ = rowListSortedReversedWithIndexSortedWithIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndex.sortWith((x,\
    \ y) => x._9 < y._9)\n        val rowListSortedReversedWithIndexSortedWithIndexAndIndexAndIndex",
  "        val rows = lst.map(_.size)\n        val cols = lst(0).size\n        val\
    \ result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row = new\
    \ mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < rows.size) {\n            val row = lst(i).zipWithIndex.sortBy(_._1).map(_._2).reverse\n\
    \            val col = lst(i).zipWithIndex.sortBy(_._2).map(_._1).reverse\n  \
    \          val x = lst(i).indexOf(x)\n            if (row == rows && col == cols\
    \ && x == i) {\n                result.append((lst(i).indexOf(x), lst(i).indexOf(x)))\n\
    \            }\n            i += 1\n        }\n        result.toList", "     \
    \   val rows = lst.map(row => row.map(x => Tuple2(x, x)))\n        val rows =\
    \ rows.sortBy(row => row._1)\n        val cols = rows.map(row => row._2).sortBy(col\
    \ => -col)\n        val coords = rows.map(row => row.map(col => Tuple2(col, col._2)))\n\
    \        coords.sortBy(row => row._1)", "        val lst2 = lst.sortWith((x, y)\
    \ => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst26 = lst25.sortWith((x, y) => x.toLong > y.toLong", "        val rows = lst.map(_.toList)\n\
    \        val cols = rows.map(_.length)\n        val result = rows.map(row => {\n\
    \            val coords = row.zipWithIndex.sortBy(_._1).reverse\n            coords.map(c\
    \ => (c._2, c._1))\n        }).flatten\n        result.filter(c => c._1 == x).sortBy(c\
    \ => c._1).reverse", "        val rows = lst.map(_.toList)\n        val columns\
    \ = rows.map(_.size)\n        val result = rows.map(row => {\n            val\
    \ columns = row.size\n            val coord = row.zipWithIndex.map(x => (x._2,\
    \ x._1))\n            val coords = coords.sortBy(x => x._1).reverse\n        \
    \    val coord = coords.sortBy(x => x._2).reverse\n            val coord = coords.sortBy(x\
    \ => x._1).reverse\n            val coord = coords.sortBy(x => x._2).reverse\n\
    \            val coord = coords.sortBy(x => x._1).reverse\n            val coord\
    \ = coords.sortBy(x => x._2).reverse\n            val coord = coords.sortBy(x\
    \ => x._1).reverse\n            val coord = coords.sortBy(x => x._2).reverse\n\
    \            val coord = coords.sortBy(x => x._1).reverse\n            val coord\
    \ = coords.sortBy(x => x._2).reverse\n            val coord = coords.sortBy(x\
    \ => x._1).reverse\n            val coord = coords.sortBy(x => x._2).reverse\n\
    \            val coord = coords.sortBy(x => x._1).reverse\n            val coord\
    \ = coords.sortBy(x => x._2).reverse\n            val coord = coords.sortBy(x\
    \ => x._1).reverse\n            val coord = coords.sortBy(x => x._2).reverse\n\
    \            val coord = coords.sortBy(x => x._1).reverse\n            val coord\
    \ = coords.sortBy(x => x._2).reverse\n            val coord = coords.sortBy(x\
    \ => x._1).reverse\n            val coord = coords.sortBy(x => x._2).reverse\n\
    \            val coord = coords.sortBy(x => x._1).reverse\n            val coord\
    \ = coords.sortBy(x => x._2).reverse\n            val coord = coords.sortBy(x\
    \ => x._1).reverse\n            val coord = coords.sortBy(x => x._2).reverse\n\
    \            val coord = coords.sortBy(x => x._1).reverse\n            val coord\
    \ = coords.sortBy(x => x._2).reverse\n            val coord = coords.sortBy(x\
    \ => x._1).reverse\n            val coord = coords.sortBy(x => x._2).reverse\n\
    \            val coord = coords.sortBy(x => x._1).reverse\n            val coord\
    \ = coords.sortBy(x => x._2).reverse\n            val coord = coords.sortBy(x\
    \ => x._1).reverse\n            val coord = coords.sortBy(x => x._2).reverse\n\
    \            val coord = coords.sortBy(x => x._1).reverse", "        val m = lst.size\n\
    \        val n = lst(0).size\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        var i = 0\n        while (i < m) {\n            var j = 0\n\
    \            while (j < n) {\n                if (lst(i)(j) == x) {\n        \
    \            result.append((i, j))\n                }\n                j += 1\n\
    \            }\n            i += 1\n        }\n        result.sortBy(_._1)\n \
    \       result.sortBy(_._2, descending = true)\n        result", "        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ rows = lst.map(_.size)\n        val cols = ", "        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = 0\n        val col = 0\n        while(row < rows\
    \ && col < cols) {\n            val xi = lst.map(_.apply(row))\n            val\
    \ yi = lst.map(_.apply(col))\n            val xj = xi ++ yi\n            val yj\
    \ = xj ++ yi\n            val xk = xi ++ yj\n            val yk = xk ++ yj\n \
    \           val xl = xi ++ yk\n            val yl = xl ++ yk\n            val\
    \ xm = xi ++ yl\n            val ym = xm ++ yl\n            val xn = xi ++ ym\n\
    \            val yn = xn ++ ym\n            val xo = xi ++ yn\n            val\
    \ yo = xo ++ yn\n            val xp = xi ++ yo\n            val yp = xp ++ yo\n\
    \            val xq = xi ++ yp\n            val yq = xq ++ yp\n            val\
    \ xr = xi ++ yq\n            val yr = xr ++ yq\n            val xs = xi ++ yr\n\
    \            val ys = xs ++ yr\n            val xt = xi ++ ys\n            val\
    \ yt = xt ++ ys\n            val xu = xi ++ yt\n            val yu = xu ++ yt\n\
    \            val xv = xi ++ yu\n            val yv = xv ++ yu\n            val\
    \ xw = xi ++ yv\n            val yw = xw ++ yv\n            val xx = xi ++ yw\n\
    \            val yx = xx ++ yw\n            val xy = xi ++ xx\n            val\
    \ yy = xy ++ xx\n            val xz = xi ++ xy\n            val yz = xz ++ xy\n\
    \            val xa = xi ++ xz\n            val ya = xa ++ xz\n            val\
    \ xb = xi ++ ya\n            val yb = xb ++ ya\n            val xc = xi ++ yb\n\
    \            val yc = xc ++ yb\n            val xd = xi ++ yc\n            val\
    \ yd = xd ++ yc\n            val xe = xi ++ yd\n            val ye = xe ++ yd\n\
    \            val xf = xi ++ ye\n            val yf = xf ++ ye\n            ",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row\
    \ = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < rows) {\n            val row = lst(i).zipWithIndex.sortBy(_._1).map(_._2)\n\
    \            val col = lst(i).zipWithIndex.sortBy(_._2).map(_._1)\n          \
    \  val rowIndex = row.indexOf(x)\n            val colIndex = col.indexOf(x)\n\
    \            val rowValue = row.getOrElse(rowIndex)\n            val colValue\
    \ = col.getOrElse(colIndex)\n            result.append((rowValue, colValue))\n\
    \            i += 1\n        }\n        result.sortBy(_._1).reverse", "      \
    \  val rows = lst.map(_.toList).map(_.toLong)\n        val cols = lst.map(_.size).max\n\
    \        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val\
    \ row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n",
  "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst2\
    \ = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)",
  "        val rows = lst.map(_.toList)\n        val cols = rows.map(_.size)\n   \
    \     val rows = rows.sortBy(_.toLong)\n        val cols = cols.sortBy(_.toLong)\n\
    \        val result = rows.map(row => row.zipWithIndex.filter(x => x == x).map(x\
    \ => (x._2, x._1))).filter(x => x._1 == x).map(x => (x._2, x._1))\n        result.sortBy(x\
    \ => x._1)", "        val lst1 = lst.map(x => x.map(y => (y, x)))\n        val\
    \ lst2 = lst1.map(x => x.sortBy(_._1))\n        val lst3 = lst2.map(x => x.sortBy(_._2))\n\
    \        lst3.map(x => (x._1, x._2))", "        val lst1 = lst.sortBy(x => x.toLong)\n\
    \        val lst2 = lst1.sortBy(x => x.toLong.reverse)\n        val lst3 = lst2.sortBy(x\
    \ => x.toLong.reverse)\n        val lst4 = lst3.sortBy(x => x.toLong.reverse)\n\
    \        val lst5 = lst4.sortBy(x => x.toLong.reverse)\n        val lst6 = lst5.sortBy(x\
    \ => x.toLong.reverse)\n        val lst7 = lst6.sortBy(x => x.toLong.reverse)\n\
    \        val lst8 = lst7.sortBy(x => x.toLong.reverse)\n        val lst9 = lst8.sortBy(x\
    \ => x.toLong.reverse)\n        val lst10 = lst9.sortBy(x => x.toLong.reverse)\n\
    \        val lst11 = lst10.sortBy(x => x.toLong.reverse)\n        val lst12 =\
    \ lst11.sortBy(x => x.toLong.reverse)\n        val lst13 = lst12.sortBy(x => x.toLong.reverse)\n\
    \        val lst14 = lst13.sortBy(x => x.toLong.reverse)\n        val lst15 =\
    \ lst14.sortBy(x => x.toLong.reverse)\n        val lst16 = lst15.sortBy(x => x.toLong.reverse)\n\
    \        val lst17 = lst16.sortBy(x => x.toLong.reverse)\n        val lst18 =\
    \ lst17.sortBy(x => x.toLong.reverse)\n        val lst19 = lst18.sortBy(x => x.toLong.reverse)\n\
    \        val lst20 = lst19.sortBy(x => x.toLong.reverse)\n        val lst21 =\
    \ lst20.sortBy(x => x.toLong.reverse)\n        val lst22 = lst21.sortBy(x => x.toLong.reverse)\n\
    \        val lst23 = lst22.sortBy(x => x.toLong.reverse)\n        val lst24 =\
    \ lst23.sortBy(x => x.toLong.reverse)\n        val lst25 = lst24.sortBy(x => x.toLong.reverse)\n\
    \        val lst26 = lst25.sortBy(x => x.toLong.reverse)\n        val lst27 =\
    \ lst26.sortBy(x => x.toLong.reverse)\n        val lst28 = lst27.sortBy(x => x.toLong.reverse)\n\
    \        val lst29 = lst28.sortBy(x => x.toLong.reverse)\n        val lst30 =\
    \ lst29.sortBy(x => x.toLong.reverse)\n        val lst31 = lst30.sortBy(x => x.toLong.reverse",
  "        val row: List[Tuple2[Long, Long]] = lst.map(row => Tuple2(row(0), row(row.indexOf(x))))\n\
    \        val sorted = row.sortBy(row => row._1)\n        val reversed = sorted.reverse\n\
    \        reversed.map(row => Tuple2(row._1, row._2))", "        val lst1 = lst.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst2 = lst1.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val lst6 = lst5.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val lst11 = lst10.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val lst16 = lst15.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val lst21 = lst20.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)", "        val lst2 =\
    \ lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst26 = lst25.sortWith((x, y) => x.toLong > y.toLong", "        val\
    \ rows = lst.map(_.toList)\n        val cols = rows.map(_.size)\n        val rowIndex\
    \ = rows.zipWithIndex.filter(_._1 == x).map(_._2)\n        val colIndex = cols.zipWithIndex.filter(_._1\
    \ == x).map(_._2)\n        val coords = rowIndex.zip(colIndex).map(x => (x._1,\
    \ x._2))\n        coords.sortBy(x => x._1).reverse.sortBy(x => x._2).reverse",
  "        val rowList = lst.map(row => row.zipWithIndex.toList)\n        val rowListSorted\
    \ = rowList.sortBy(row => row._2)\n        val rowListSortedReversed = rowListSorted.reverse\n\
    \        val rowListSortedReversedSorted = rowListSortedReversed.sortBy(row =>\
    \ row._1)\n        val rowListSortedReversedSortedWithIndex = rowListSortedReversedSorted.map(row\
    \ => (row._2, row._1))\n        val rowListSortedReversedSortedWithIndexSorted\
    \ = rowListSortedReversedSortedWithIndex.sortBy(row => row._1)\n        val rowListSortedReversedSortedWithIndexSortedWithIndex\
    \ = rowListSortedReversedSortedWithIndexSorted.map(row => (row._2, row._1))\n\
    \        val rowListSortedReversedSortedWithIndexSortedWithIndexSorted = rowListSortedReversedSortedWithIndexSortedWithIndex.sortBy(row\
    \ => row._1)\n        val rowListSortedReversedSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = rowListSortedReversedSortedWithIndexSortedWithIndexSortedWithIndex.map(row\
    \ => (row._2, row._1))\n        val rowListSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = rowListSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortBy(row\
    \ => row._1)\n        val rowListSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = rowListSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSorted.map(row\
    \ => (row._2, row._1))\n        val rowListSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = rowListSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortBy(row\
    \ => row._1)\n        val rowListSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = rowListSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.map(row\
    \ => (row._2, row._1))\n        val rowListSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = rowListSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortBy(row\
    \ => row._1)\n        val rowListSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = rowListSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted.map(row\
    \ => (row._2, row._1))\n        val rowListSortedReversed", "        val lst1\
    \ = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst2 = lst1.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)", "       \
    \ val m = lst.size\n        val n = lst(0).size\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        var i = 0\n        while (i < m) {\n            var j = 0\n\
    \            while (j < n) {\n                if (lst(i)(j) == x) {\n        \
    \            result.add(Tuple2(i, j))\n                }\n                j +=\
    \ 1\n            }\n            i += 1\n        }\n        result.sortBy(_._1)\n\
    \        result.sortBy(_._2, descending = true)\n        result", "        val\
    \ rows = lst.map(_.length)\n        val cols = lst(0).length\n        val result\
    \ = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val rowIndex = new\
    \ mutable.ListBuffer[Long]()\n        val colIndex = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val rowIndex = new mutable.ListBuffer[Long]()\n        val colIndex =\
    \ new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val rowIndex = new\
    \ mutable.ListBuffer[Long]()\n        val colIndex = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val rowIndex = new mutable.ListBuffer[Long]()\n        val colIndex =\
    \ new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val rowIndex = new\
    \ mutable.ListBuffer[Long]()\n        val colIndex = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val rowIndex = new mutable.ListBuffer[Long]()\n        val colIndex =\
    \ new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val rowIndex = new\
    \ mutable.ListBuffer[Long]()\n        val colIndex = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val rowIndex = new mutable.ListBuffer[Long]()\n        val colIndex =\
    \ new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer", "        val row: List[Tuple2[Long,\
    \ Long]] = lst.map(row => Tuple2(row(0), row(x.toLong)))\n        val column:\
    \ List[Tuple2[Long, Long]] = lst.map(column => Tuple2(column.toLong, column(x.toLong)))\n\
    \        val coordinates: List[Tuple2[Long, Long]] = row ++ column\n        coordinates.sortBy(row\
    \ => row._1).sortBy(column => column._2)", "        val rows = lst.map(_.toList)\n\
    \        val cols = rows.map(_.size)\n        val result = rows.map(row => {\n\
    \            val colIndex = cols.indexOf(row.size)\n            val colTuple =\
    \ row.zipWithIndex.sortBy(_._1).reverse.find(_._2 == colIndex).get._1\n      \
    \      val rowTuple = row.zipWithIndex.sortBy(_._2).reverse.find(_._1 == colTuple).get._1\n\
    \            (rowTuple, colTuple)\n        })\n        result.sortBy(_._1).reverse.filter(_.1\
    \ == x).map(x => (x._1, x._2))", "        val rows = lst.map(_.length)\n     \
    \   val cols = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ListBuffer[Long]()\n        val col\
    \ = new mutable.ListBuffer[Long]()\n        for (i <- 0 until rows) {\n      \
    \      row.append(i)\n            col.append(0)\n        }\n        for (i <-\
    \ 0 until cols) {\n            col.append(i)\n        }\n        for (i <- 0 until\
    \ rows) {\n            for (j <- 0 until cols) {\n                if (lst(row(i))(j)\
    \ == x) {\n                    result.append((row(i), col(j)))\n             \
    \   }\n            }\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ descending = true)\n        result.toList", "        val rowList = lst.map(row\
    \ => row.map(i => Tuple2(i.toLong, i.toLong)))\n        val rowTuples = rowList.map(row\
    \ => row.map(i => Tuple2(i._1, i._2)))\n        val rowTuplesSorted = rowTuples.sortBy(row\
    \ => row._1)\n        val rowTuplesSortedReversed = rowTuplesSorted.sortBy(row\
    \ => row._2, descending = true)\n        val rowTuplesSortedReversedSorted = rowTuplesSortedReversed.sortBy(row\
    \ => row._1)\n        val rowTuplesSortedReversedSortedWithIndex = rowTuplesSortedReversedSorted.map(row\
    \ => row._1 -> row._2)\n        val rowTuplesSortedReversedSortedWithIndexSorted\
    \ = rowTuplesSortedReversedSortedWithIndex.sortBy(row => row._2)\n        val\
    \ rowTuplesSortedReversedSortedWithIndexSortedWithIndex = rowTuplesSortedReversedSortedWithIndexSorted.map(row\
    \ => row._1 -> row._2)\n        val rowTuplesSortedReversedSortedWithIndexSortedWithIndexSorted\
    \ = rowTuplesSortedReversedSortedWithIndexSortedWithIndex.sortBy(row => row._2)\n\
    \        val rowTuplesSortedReversedSortedWithIndexSortedWithIndexSorted = rowTuplesSortedReversedSortedWithIndexSortedWithIndexSorted.map(row\
    \ => row._1 -> row._2)\n        val rowTuplesSortedReversedSortedWithIndexSortedWithIndexSorted\
    \ = rowTuplesSortedReversedSortedWithIndexSortedWithIndexSorted.sortBy(row =>\
    \ row._2)\n        val rowTuplesSortedReversedSortedWithIndexSortedWithIndexSorted\
    \ = rowTuplesSortedReversedSortedWithIndexSortedWithIndexSorted.map(row => row._1\
    \ -> row._2)\n        val rowTuplesSortedReversedSortedWithIndexSortedWithIndexSorted\
    \ = rowTuplesSortedReversedSortedWithIndexSortedWithIndexSorted.sortBy(row =>\
    \ row._2)\n        val rowTuplesSortedReversedSortedWithIndexSortedWithIndexSorted\
    \ = rowTuplesSortedReversedSortedWithIndexSortedWithIndexSorted.map(row => row._1\
    \ -> row._2)\n        val rowTuplesSortedReversedSortedWithIndexSortedWithIndexSorted\
    \ = rowTuplesSortedReversedSortedWithIndexSortedWithIndexSorted.sortBy(row =>\
    \ row._2)\n        val rowTuplesSortedReversedSortedWithIndexSortedWithIndexSorted\
    \ = rowTuplesSortedReversedSortedWithIndexSortedWithIndexSor", "        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val result =\
    \ new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        for (i <- 0 until rows)\
    \ {\n            row.append(i)\n            col.append(0)\n        }\n       \
    \ val rowIndex = new mutable.ListBuffer[Long]()\n        val colIndex = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until cols) {\n            cols.append(i)\n            rows.append(0)\n\
    \        }\n        val rowCount = new mutable.ListBuffer[Long]()\n        val\
    \ colCount = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        for (i <- 0 until rows)\
    \ {\n            row.append(i)\n            col.append(0)\n            rowIndex.append(0)\n\
    \            colIndex.append(0)\n            rowCount.append(0)\n            colCount.append(0)\n\
    \        }\n        val rowIndex = new mutable.ListBuffer[Long]()\n        val\
    \ colIndex = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        for (i <- 0 until\
    \ cols) {\n            cols.append(i)\n            rows.append(0)\n        }\n\
    \        val rowCount = new mutable.ListBuffer[Long]()\n        val colCount =\
    \ new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        for (i <- 0 until rows)\
    \ {\n            row.append(i)\n            col.append(0)\n            rowIndex.append(0)\n\
    \            colIndex.append(0)\n            rowCount.append(0)\n            colCount.append(0)\n\
    \        }\n        val rowIndex = new mutable.ListBuffer[Long]()\n        val\
    \ colIndex = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        for (i <- 0 until\
    \ cols) {\n            cols.append(i)\n            rows.append(0)\n        }\n\
    \        val rowCount = new mutable.ListBuffer[Long]()\n        val colCount =\
    \ new mutable.ListBuffer[Long]()\n        val row", "        val row: List[Tuple2[Long,\
    \ Long]] = lst.map(row => Tuple2(row(0), row(row.indexOf(x))))\n        val sortedRow\
    \ = row.sortBy(row => row._1)\n        val sortedRowReversed = sortedRow.reverse\n\
    \        val sortedRowReversedReversed = sortedRowReversed.reverse\n        val\
    \ sortedRowReversedReversedReversed = sortedRowReversedReversed.reverse\n    \
    \    val sortedRowReversedReversedReversedReversed = sortedRowReversedReversedReversed.reverse\n\
    \        val sortedRowReversedReversedReversedReversedReversed = sortedRowReversedReversedReversedReversed.reverse\n\
    \        val sortedRowReversedReversedReversedReversedReversedReversed = sortedRowReversedReversedReversedReversedReversed.reverse\n\
    \        val sortedRowReversedReversedReversedReversedReversedReversedReversed\
    \ = sortedRowReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sortedRowReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sortedRowReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sortedRowReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sortedRowReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sortedRowReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sortedRowReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sortedRowReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sortedRowReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sortedRowReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sortedRowReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sortedRowReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sortedRow", "        val lst2 = lst.map(_.toList)\n        val lst3 = lst2.map(x\
    \ => x.filter(_ == x))\n        val lst4 = lst3.map(x => x.sortWith(_ < _))\n\
    \        val lst5 = lst4.map(x => x.sortWith(_ < _))\n        val lst6 = lst5.map(x\
    \ => x.sortWith(_ < _))\n        val lst7 = lst6.map(x => x.sortWith(_ < _))\n\
    \        val lst8 = lst7.map(x => x.sortWith(_ < _))\n        val lst9 = lst8.map(x\
    \ => x.sortWith(_ < _))\n        val lst10 = lst9.map(x => x.sortWith(_ < _))\n\
    \        val lst11 = lst10.map(x => x.sortWith(_ < _))\n        val lst12 = lst11.map(x\
    \ => x.sortWith(_ < _))\n        val lst13 = lst12.map(x => x.sortWith(_ < _))\n\
    \        val lst14 = lst13.map(x => x.sortWith(_ < _))\n        val lst15 = lst14.map(x\
    \ => x.sortWith(_ < _))\n        val lst16 = lst15.map(x => x.sortWith(_ < _))\n\
    \        val lst17 = lst16.map(x => x.sortWith(_ < _))\n        val lst18 = lst17.map(x\
    \ => x.sortWith(_ < _))\n        val lst19 = lst18.map(x => x.sortWith(_ < _))\n\
    \        val lst20 = lst19.map(x => x.sortWith(_ < _))\n        val lst21 = lst20.map(x\
    \ => x.sortWith(_ < _))\n        val lst22 = lst21.map(x => x.sortWith(_ < _))\n\
    \        val lst23 = lst22.map(x => x.sortWith(_ < _))\n        val lst24 = lst23.map(x\
    \ => x.sortWith(_ < _))\n        val lst25 = lst24.map(x => x.sortWith(_ < _))\n\
    \        val lst26 = lst25.map(x => x.sortWith(_ < _))\n        val lst27 = lst26.map(x\
    \ => x.sortWith(_ < _))\n        val lst28 = lst27.map(x => x.sortWith(_ < _))\n\
    \        val lst29 = lst28.map(x => x.sortWith(_ < _))\n        val lst30 = lst29.map(x\
    \ => x.sortWith(_ < _))\n        val lst31 = lst30.map(x ", "        val lst1\
    \ = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst2 = lst1.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)", "       \
    \ val lst1 = lst.sortWith((x, y) => x.toLong < y.toLong)\n        val lst2 = lst1.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst5 = lst4.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst11 = lst10.sortWith((x, y) => x.toLong < y.toLong)\n        val lst12 = lst11.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst15 = lst14.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst21 = lst20.sortWith((x, y) => x.toLong < y.toLong)\n        val lst22 = lst21.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst25 = lst24.sortWith((x, y) => x.toLong < y.toLong)", "       \
    \ val rows = lst.map(_.size)\n        val cols = lst.map(_.head).max\n       \
    \ val result = lst.map(row => row.zipWithIndex.filter(_._1 == x).map(_._2)).toList\n\
    \        result.sortBy(row => row._1)\n        result.sortBy(row => row._2, descending\
    \ = true)\n        result", "        val lst1 = lst.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst2 = lst1.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n        val lst5 = lst4.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst6 = lst5.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n        val lst10 = lst9.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n        val lst15 = lst14.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst16 = lst15.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n        val lst20 = lst19.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n        val lst25 = lst24.sortWith((x,\
    \ y) => x.toLong > y.toLong)", "        val lst1 = lst.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst2 = lst1.sortWith((x, y) => y.toLong > x.toLong)\n\
    \        val lst3 = lst2.sortWith((x, y) => x.toLong == y.toLong)\n        val\
    \ lst4 = lst3.sortWith((x, y) => y.toLong == x.toLong)\n        val lst5 = lst4.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst6 = lst5.sortWith((x, y) => y.toLong\
    \ < x.toLong)\n        val lst7 = lst6.sortWith((x, y) => x.toLong == y.toLong)\n\
    \        val lst8 = lst7.sortWith((x, y) => y.toLong == x.toLong)\n        val\
    \ lst9 = lst8.sortWith((x, y) => x.toLong < y.toLong)\n        val lst10 = lst9.sortWith((x,\
    \ y) => y.toLong < x.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong\
    \ == y.toLong)\n        val lst12 = lst11.sortWith((x, y) => y.toLong == x.toLong)\n\
    \        val lst13 = lst12.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ lst14 = lst13.sortWith((x, y) => y.toLong < x.toLong)\n        val lst15 = lst14.sortWith((x,\
    \ y) => x.toLong == y.toLong)\n        val lst16 = lst15.sortWith((x, y) => y.toLong\
    \ == x.toLong)\n        val lst17 = lst16.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst18 = lst17.sortWith((x, y) => y.toLong < x.toLong)\n        val\
    \ lst19 = lst18.sortWith((x, y) => x.toLong == y.toLong)\n        val lst20 =\
    \ lst19.sortWith((x, y) => y.toLong == x.toLong)\n        val lst21 = lst20.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst22 = lst21.sortWith((x, y) => y.toLong\
    \ < x.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong == y.toLong)\n\
    \        val lst24 = lst23.sortWith((x, y) => y.toLong == x.toLong)\n        val\
    \ lst25 = lst24.sortWith((x, y) => x.toLong < y.toLong)", "        val rows =\
    \ lst.map(_.toList).toList\n        val rows = rows.sortBy(_.toInt)\n        val\
    \ rows = rows.sortBy(_.toInt).reverse\n        val rows = rows.map(row => row.map(i\
    \ => Tuple2(i, row.toList.indexOf(i))).toList).flatten\n        val rows = rows.map(row\
    \ => row.map(i => Tuple2(i, row.toList.indexOf(i))).toList).flatten\n        val\
    \ rows = rows.map(row => row.map(i => Tuple2(i, row.toList.indexOf(i))).toList).flatten\n\
    \        val rows = rows.map(row => row.map(i => Tuple2(i, row.toList.indexOf(i))).toList).flatten\n\
    \        val rows = rows.map(row => row.map(i => Tuple2(i, row.toList.indexOf(i))).toList).flatten\n\
    \        val rows = rows.map(row => row.map(i => Tuple2(i, row.toList.indexOf(i))).toList).flatten\n\
    \        val rows = rows.map(row => row.map(i => Tuple2(i, row.toList.indexOf(i))).toList).flatten\n\
    \        val rows = rows.map(row => row.map(i => Tuple2(i, row.toList.indexOf(i))).toList).flatten\n\
    \        val rows = rows.map(row => row.map(i => Tuple2(i, row.toList.indexOf(i))).toList).flatten\n\
    \        val rows = rows.map(row => row.map(i => Tuple2(i, row.toList.indexOf(i))).toList).flatten\n\
    \        val rows = rows.map(row => row.map(i => Tuple2(i, row.toList.indexOf(i))).toList).flatten\n\
    \        val rows = rows.map(row => row.map(i => Tuple2(i, row.toList.indexOf(i))).toList).flatten\n\
    \        val rows = rows.map(row => row.map(i => Tuple2(i, row.toList.indexOf(i))).toList).flatten\n\
    \        val rows = rows.map(row => row.map(i => Tuple2(i, row.toList.indexOf(i))).toList).flatten\n\
    \        val rows = rows.map(row => row.map(i => Tuple2(i, row.toList.indexOf(i))).toList).flatten\n\
    \        val rows = rows.map(row => row.map(i => Tuple2(i, row.toList.indexOf(i))).toList).flatten\n\
    \        val rows = rows.map(row => row.map(i => Tuple2(i, row.toList.indexOf(i))).toList).flatten\n\
    \        val rows = rows.map(row => row.map(i => Tuple2(i, row.toList.indexOf(i))).toList).flatten\n\
    \        val rows = rows.map(row => row.map(i => Tuple2(i, row.toList.indexOf(i))).toList).flatten\n\
    \        val ", "        val rowList = lst.map(row => row.zipWithIndex.filter(_._1\
    \ == x).map(_._2)).toList\n        val columnList = rowList.map(row => row.zipWithIndex.filter(_._2\
    \ == x).map(_._1)).toList\n        columnList.sortBy(row => row.reverse).sortBy(row\
    \ => row.reverse).map(row => (row._1, row._2))", "        val row: List[Tuple2[Long,\
    \ Long]] = lst.map(row => Tuple2(row(0), row(1))).toList\n        val rowSorted\
    \ = row.sortBy(row => row._1)\n        val colSorted = rowSorted.sortBy(row =>\
    \ row._2)\n        val result = colSorted.map(row => Tuple2(row._1, x))\n    \
    \    result.sortBy(row => row._1).reverse", "        val rows = lst.map(_.toList)\n\
    \        val cols = rows.map(_.size)\n        val rowIndex = rows.zipWithIndex.filter(_._1\
    \ == x).map(_._2)\n        val colIndex = cols.zipWithIndex.filter(_._1 == x).map(_._2)\n\
    \        val coords = rowIndex.zip(colIndex).sortBy(_._1).sortBy(_._2).map(x =>\
    \ (x._2, x._1))\n        coords.toList", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ListBuffer[Long]()\n        val col\
    \ = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        var i = 0\n      \
    \  while (i < rows.length) {\n            val row = lst(i).zipWithIndex.sortBy(_._1).map(_._2)\n\
    \            val col = lst(i).zipWithIndex.sortBy(_._2).map(_._1)\n          \
    \  val row1 = row.map(x => x + i)\n            val col1 = col.map(x => x + i)\n\
    \            val row2 = row.map(x => x + i)\n            val col2 = col.map(x\
    \ => x + i)\n            val row3 = row.map(x => x + i)\n            val col3\
    \ = col.map(x => x + i)\n            val row4 = row.map(x => x + i)\n        \
    \    val col4 = col.map(x => x + i)\n            val row5 = row.map(x => x + i)\n\
    \            val col5 = col.map(x => x + i)\n            val row6 = row.map(x\
    \ => x + i)\n            val col6 = col.map(x => x + i)\n            val row7\
    \ = row.map(x => x + i)\n            val col7 = col.map(x => x + i)\n        \
    \    val row8 = row.map(x => x + i)\n            val col8 = col.map(x => x + i)\n\
    \            val row9 = row.map(x => x + i)\n            val col9 = col.map(x\
    \ => x + i)\n            val row10 = row.map(x => x + i)\n            val col10\
    \ = col.map(x => x + i)\n            val row11 = row.map(x => x + i)\n       \
    \     val col11 = col.map(x => x + i)\n            val row12 = row.map(x => x\
    \ + i)\n            val col12 = col.map(x => x + i)\n            val row13 = row.map(x\
    \ => x + i)\n            val col13 = col.map(x => x + i)\n            val row14\
    \ = row.map(x => x + i)\n            val col14 = col.map(x => x + i)\n       \
    \     val row15 = row.map(x => x + i)\n            val col15 = col.map(x => x\
    \ + i)\n            val row16 = row.map(x => x + i)\n            val col16 = col.map(x\
    \ => x + i)\n            val row17 = row.map(x => x + i)\n            val col17\
    \ = col.map(", "        val lst1 = lst.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst2 = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst3 = lst2.sortWith((x, y) => x.toLong < y.toLong)\n        val lst4 = lst3.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst7 = lst6.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst13 = lst12.sortWith((x, y) => x.toLong < y.toLong)\n        val lst14 = lst13.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst17 = lst16.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst23 = lst22.sortWith((x, y) => x.toLong < y.toLong)\n        val lst24 = lst23.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong\
    \ < y.toLong)", "        val rowList = lst.map(row => row.map(i => Tuple2(i.toLong,\
    \ i.toLong)))\n        val rowTuples = rowList.map(row => row.map(i => Tuple2(i,\
    \ x)))\n        val sortedRowTuples = rowTuples.sortBy(row => row._1)\n      \
    \  val sortedRowList = sortedRowTuples.map(row => row._2)\n        val sortedRowListTuples\
    \ = sortedRowList.map(row => Tuple2(row._1, row._2))\n        sortedRowListTuples.sortBy(row\
    \ => row._2).reverse", "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst2 = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong\
    \ > y.toLong)", "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst2 = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong\
    \ > y.toLong)"]
stop_tokens:
- "\n    }\n"
